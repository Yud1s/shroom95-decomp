#include "regen.hpp"
// WvsContext.ipp
#include "WvsContext.hpp"

// CWvsContext::CloseBook
_SUB_EXCEPTION_HANDLER(5DA8F0)
__SUB_CLASS_THIS0(005DA8F0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DA8F0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	cmp dword ptr [TSingleton<CBookDlg>::ms_pInstance],0
	je Block6

 Block1:
	lea eax,[esp+4]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x14],0
	call play_ui_sound
	mov eax,dword ptr [esp+8]
	add esp,4
	mov dword ptr [esp+0x10],0xFFFFFFFF
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block3:
	mov ecx,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	test ecx,ecx
	je Block6

 Block4:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	test eax,eax
	je Block6

 Block5:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block6:
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x10
	ret
}
}
// CWvsContext::_CheckExpiredProtectItems
__SUB_CLASS_THIS0(005E63D0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	lea eax,[esp+0x20]
	push eax
	mov ebx,ecx
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x24]
	mov ebp,dword ptr [eax+4]
	mov dword ptr [esp+0x14],ebp
	test esi,esi
	je Block5

 Block1:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x24],0

 Block5:
	call Util::FTGetNow
	mov dword ptr [esp+0x18],eax
	mov dword ptr [esp+0x1C],edx
	add ebp,0x505
	mov dword ptr [esp+0x10],5

 Block6:
	mov eax,dword ptr [ebp]
	test eax,eax
	jne Block8

 Block7:
	xor edi,edi
	jmp Block9

 Block8:
	mov edi,dword ptr [eax-4]

 Block9:
	dec edi
	mov esi,1
	cmp edi,esi
	jl Block12

 Block10:
	lea esp,[esp]

 Block11:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+esi*8+4]
	lea ecx,[esp+0x18]
	push ecx
	push eax
	mov ecx,ebx
	call CWvsContext::_CheckExpiredProtectItem
	inc esi
	cmp esi,edi
	jle Block11

 Block12:
	add ebp,4
	sub dword ptr [esp+0x10],1
	jne Block6

 Block13:
	mov ebp,dword ptr [esp+0x14]
	lea esi,[ebp+0x105]
	mov edi,0x3B

 Block14:
	mov edx,dword ptr [esi]
	lea ecx,[esp+0x18]
	push ecx
	push edx
	mov ecx,ebx
	call CWvsContext::_CheckExpiredProtectItem
	add esi,8
	sub edi,1
	jne Block14

 Block15:
	lea esi,[ebp+0x4BD]
	mov edi,4

 Block16:
	mov ecx,dword ptr [esi]
	lea eax,[esp+0x18]
	push eax
	push ecx
	mov ecx,ebx
	call CWvsContext::_CheckExpiredProtectItem
	add esi,8
	sub edi,1
	jne Block16

 Block17:
	lea esi,[ebp+0x4DD]
	mov edi,5

 Block18:
	mov eax,dword ptr [esi]
	lea edx,[esp+0x18]
	push edx
	push eax
	mov ecx,ebx
	call CWvsContext::_CheckExpiredProtectItem
	add esi,8
	sub edi,1
	jne Block18

 Block19:
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUIStatChange::OnButtonClicked
__SUB_CLASS_THIS(004686F0, __thiscall, 68511,  CUIStatChange, void, uint32_t) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov esi,ecx
	cmp edi,1
	jne Block2

 Block1:
	push edi
	jmp Block6

 Block2:
	cmp edi,2
	jne Block4

 Block3:
	push edi
	jmp Block6

 Block4:
	cmp edi,8
	jne Block7

 Block5:
	push edi

 Block6:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	call edx

 Block7:
	lea eax,[edi-0x7D0]
	cmp eax,5
	ja Block27

 Block8:
	cmp EAX, 0
je Block9
cmp EAX, 1
je Block12
cmp EAX, 2
je Block15
cmp EAX, 3
je Block18
cmp EAX, 4
je Block21
cmp EAX, 5
je Block24


 Block9:
	cmp dword ptr [esi+0xC8],0
	je Block11

 Block10:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xCC],0x800
	call edx
	pop edi
	pop esi
	ret 4

 Block11:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xC8],0x800
	call edx
	pop edi
	pop esi
	ret 4

 Block12:
	cmp dword ptr [esi+0xC8],0
	je Block14

 Block13:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xCC],0x2000
	call edx
	pop edi
	pop esi
	ret 4

 Block14:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xC8],0x2000
	call edx
	pop edi
	pop esi
	ret 4

 Block15:
	cmp dword ptr [esi+0xC8],0
	je Block17

 Block16:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xCC],0x40
	call edx
	pop edi
	pop esi
	ret 4

 Block17:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xC8],0x40
	call edx
	pop edi
	pop esi
	ret 4

 Block18:
	cmp dword ptr [esi+0xC8],0
	je Block20

 Block19:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xCC],0x80
	call edx
	pop edi
	pop esi
	ret 4

 Block20:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xC8],0x80
	call edx
	pop edi
	pop esi
	ret 4

 Block21:
	cmp dword ptr [esi+0xC8],0
	je Block23

 Block22:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xCC],0x100
	call edx
	pop edi
	pop esi
	ret 4

 Block23:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xC8],0x100
	call edx
	pop edi
	pop esi
	ret 4

 Block24:
	cmp dword ptr [esi+0xC8],0
	je Block26

 Block25:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xCC],0x200
	call edx
	pop edi
	pop esi
	ret 4

 Block26:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x34]
	push 1
	mov ecx,esi
	mov dword ptr [esi+0xC8],0x200
	call edx

 Block27:
	pop edi
	pop esi
	ret 4
}
}
// CWvsContext::UI_Menu
_SUB_EXCEPTION_HANDLER(5E8120)
__SUB_CLASS_THIS0(005E8120, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E8120
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	lea eax,[esp+0x14]
	push 0x4F8
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x40],0
	call play_ui_sound
	mov eax,dword ptr [esp+0x18]
	add esp,4
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block2:
	call TSingleton<CUIGameMenu>::CreateInstance
	mov edi,dword ptr [ZImports::_InterlockedIncrement]
	test eax,eax
	je Block9

 Block3:
	add eax,8
	je Block9

 Block4:
	lea ebp,[eax-8]
	mov dword ptr [esp+0x20],ebp
	test ebp,ebp
	je Block6

 Block5:
	lea ecx,[ebp+0xC]
	push ecx
	call edi

 Block6:
	mov ebx,1
	mov ecx,ebp
	mov dword ptr [esp+0x3C],ebx
	call CDialog::DoModal
	cmp eax,ebx
	jne Block47

 Block7:
	mov eax,dword ptr [ebp+0x12C]
	cmp eax,7
	ja Block47

 Block8:
	cmp EAX, 0
je Block10
cmp EAX, 1
je Block11
cmp EAX, 2
je Block12
cmp EAX, 3
je Block19
cmp EAX, 4
je Block26
cmp EAX, 5
je Block33
cmp EAX, 6
je Block34
cmp EAX, 7
je Block42


 Block9:
	xor ebp,ebp
	mov dword ptr [esp+0x20],ebp
	jmp Block6

 Block10:
	mov ecx,esi
	call CWvsContext::ChannelShift
	jmp Block47

 Block11:
	push 0xFFFFFFFF
	push 5
	mov ecx,esi
	call CWvsContext::UI_Toggle
	jmp Block47

 Block12:
	push 0x1BC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x3C],2
	test eax,eax
	je Block18

 Block13:
	mov ecx,eax
	call CUIGameOpt::_ctor_default
	test eax,eax
	je Block18

 Block14:
	add eax,8
	je Block18

 Block15:
	lea esi,[eax-8]
	mov dword ptr [esp+0x18],esi
	test esi,esi
	je Block17

 Block16:
	lea edx,[esi+0xC]
	push edx
	call edi

 Block17:
	mov ecx,esi
	mov byte ptr [esp+0x3C],3
	call CDialog::DoModal
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x3C],bl
	call ZRef<CUIGameOpt>::~ZRef<CUIGameOpt>
	jmp Block47

 Block18:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	jmp Block17

 Block19:
	push 0x19C
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x3C],4
	test eax,eax
	je Block25

 Block20:
	mov ecx,eax
	call CUISysOpt::_ctor_default
	test eax,eax
	je Block25

 Block21:
	add eax,8
	je Block25

 Block22:
	lea esi,[eax-8]
	mov dword ptr [esp+0x18],esi
	test esi,esi
	je Block24

 Block23:
	lea eax,[esi+0xC]
	push eax
	call edi

 Block24:
	mov ecx,esi
	mov byte ptr [esp+0x3C],5
	call CDialog::DoModal
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x3C],bl
	call ZRef<CUISysOpt>::~ZRef<CUISysOpt>
	jmp Block47

 Block25:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	jmp Block24

 Block26:
	push 0x160
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x3C],6
	test eax,eax
	je Block32

 Block27:
	mov ecx,eax
	call CUIJoyPad::_ctor_default
	test eax,eax
	je Block32

 Block28:
	add eax,8
	je Block32

 Block29:
	lea esi,[eax-8]
	mov dword ptr [esp+0x18],esi
	test esi,esi
	je Block31

 Block30:
	lea ecx,[esi+0xC]
	push ecx
	call edi

 Block31:
	mov ecx,esi
	mov byte ptr [esp+0x3C],7
	call CDialog::DoModal
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x3C],bl
	call ZRef<CUIJoyPad>::~ZRef<CUIJoyPad>
	jmp Block47

 Block32:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	jmp Block31

 Block33:
	push 0xDA
	lea ecx,[esp+0x28]
	call COutPacket::_ctor_1
	mov edx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	cmp dword ptr [edx+0x98],0
	mov byte ptr [esp+0x3C],8
	setne al
	movzx ecx,al
	push ecx
	lea ecx,[esp+0x28]
	call COutPacket::Encode1
	mov edx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	cmp dword ptr [edx+0x9C],0
	setne al
	movzx ecx,al
	push ecx
	lea ecx,[esp+0x28]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x24]
	push edx
	call CClientSocket::SendPacket
	mov ecx,esi
	call CWvsContext::ReturnToTitle
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x3C],bl
	call ZArray<unsigned char>::RemoveAll
	jmp Block47

 Block34:
	cmp dword ptr [esi+0x2098],0
	je Block40

 Block35:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_THANKSFORPLAYING
	call ZXString<char>::CreateFromCharStr
	call CUtilDlg::YesNo2
	add esp,0x14
	cmp eax,6
	je Block38

 Block36:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_IFYOUEXITWITHOUT
	call ZXString<char>::CreateFromCharStr
	call CUtilDlg::YesNo2
	add esp,0x14
	cmp eax,6
	jne Block47

 Block37:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x18],esp
	push 0xFFFFFFFF
	push offset _S_
	call ZXString<char>::CreateFromCharStr
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SetGuestIDLoginInfo

 Block38:
	push 0x18
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x3C],9
	test eax,eax
	je Block45

 Block39:
	mov ecx,eax
	call CInterStage::_ctor_default
	jmp Block46

 Block40:
	call CUILogoutGift::TryShowLogoutGiftDialog
	test eax,eax
	je Block47

 Block41:
	mov ecx,esi
	call CWvsContext::ReturnToTitle
	jmp Block47

 Block42:
	call CUILogoutGift::TryShowLogoutGiftDialog
	test eax,eax
	je Block47

 Block43:
	push 0x18
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x3C],0xA
	test eax,eax
	je Block45

 Block44:
	mov ecx,eax
	call CInterStage::_ctor_default
	jmp Block46

 Block45:
	xor eax,eax

 Block46:
	push 0
	push eax
	mov byte ptr [esp+0x44],bl
	call set_stage
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add esp,8
	call CWvsContext::OnLeaveGame
	push 0
	call PostQuitMessage

 Block47:
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	test ebp,ebp
	je Block49

 Block48:
	push 0
	lea ecx,[esp+0x20]
	call ZRef<CUIGameMenu>::_ReleaseRaw

 Block49:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret
}
}
// CTemporaryStatView::TEMPORARY_STAT::Show
__SUB_CLASS_THIS0(0035C0A0, __thiscall, 5822,  CTemporaryStatView::TEMPORARY_STAT, void) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,ecx
	cmp dword ptr [edi+0x2C],0
	je Block5

 Block1:
	mov esi,dword ptr [edi+0x2C]
	test esi,esi
	jne Block3

 Block2:
	push 0x80004003
	call _com_issue_error

 Block3:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+0x11C]
	push 1
	push esi
	call ecx
	test eax,eax
	jge Block5

 Block4:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block5:
	cmp dword ptr [edi+0x30],0
	je Block10

 Block6:
	mov esi,dword ptr [edi+0x30]
	test esi,esi
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x11C]
	push 1
	push esi
	call eax
	test eax,eax
	jge Block10

 Block9:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block10:
	pop edi
	pop esi
	ret
}
}
// CWvsContext::OnStageChange
_SUB_EXCEPTION_HANDLER(5E5360)
__SUB_CLASS_THIS(005E5360, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E5360
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x20]
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	mov ecx,esi
	mov dword ptr [esp+0x18],0
	call CInPacket::Decode1
	lea ecx,[esp+8]
	push ecx
	movzx eax,al
	push eax
	push ecx
	mov ecx,esp
	lea edx,[esp+0x2C]
	mov dword ptr [esp+0x18],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [TSingleton<CStageSystem>::ms_pInstance]
	call CStageSystem::SetStagePeriod
	test eax,eax
	je Block16

 Block1:
	mov eax,dword ptr [_D_G_PSTAGE+4]
	test eax,eax
	je Block16

 Block2:
	lea ecx,[eax+4]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x48]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block16

 Block3:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block6

 Block4:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block6

 Block5:
	mov ecx,esi
	jmp Block7

 Block6:
	xor ecx,ecx

 Block7:
	call CStage::FadeOut
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block10

 Block8:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block10

 Block9:
	mov ecx,esi
	jmp Block11

 Block10:
	xor ecx,ecx

 Block11:
	call CMapLoadable::ReloadBack
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block14

 Block12:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block14

 Block13:
	mov ecx,esi
	jmp Block15

 Block14:
	xor ecx,ecx

 Block15:
	call CStage::FadeIn

 Block16:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 4
}
}
// CWvsContext::SetScreenResolution
__SUB_CLASS_THIS(005CD0C0, __thiscall, 8422,  CWvsContext, void, bool, bool) {
__asm {

 Block0:
	push ecx
	push edi
	mov edi,ecx
	mov cl,byte ptr [esp+0xC]
	cmp cl,byte ptr [edi+0x41C4]
	je Block25

 Block1:
	cmp byte ptr [esp+0x10],0
	push ebx
	push ebp
	push esi
	je Block8

 Block2:
	test cl,cl
	je Block10

 Block3:
	mov eax,dword ptr [_D_G_PSTAGE+4]
	test eax,eax
	je Block8

 Block4:
	lea esi,[eax+4]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CLogo::ms_RTTI_CLogo
	mov ecx,esi
	call edx
	test eax,eax
	jne Block24

 Block5:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CLogin::ms_RTTI_CLogin
	mov ecx,esi
	call edx
	test eax,eax
	jne Block24

 Block6:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CCashShop::ms_RTTI_CCashShop
	mov ecx,esi
	call edx
	test eax,eax
	jne Block24

 Block7:
	mov cl,byte ptr [esp+0x18]

 Block8:
	test cl,cl
	je Block10

 Block9:
	mov ebp,0x400
	mov ebx,0x300
	mov esi,0x54
	jmp Block11

 Block10:
	mov ebp,0x320
	mov ebx,0x258
	xor esi,esi

 Block11:
	mov eax,dword ptr [_D_G_GR]
	test eax,eax
	jne Block13

 Block12:
	push 0x80004003
	call _com_issue_error

 Block13:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+0x34]
	push ebx
	push ebp
	push eax
	call edx
	test eax,eax
	jl Block23

 Block14:
	mov eax,dword ptr [_D_G_GR]
	test eax,eax
	jne Block16

 Block15:
	push 0x80004003
	call _com_issue_error

 Block16:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x6C]
	mov ecx,esi
	neg ecx
	push ecx
	push 0
	push eax
	mov dword ptr [esp+0x1C],eax
	call edx
	test eax,eax
	jge Block18

 Block17:
	mov ecx,dword ptr [esp+0x10]
	push offset __GUID_e576ea33_d465_4f08_aab1_e78df73ee6d9
	push ecx
	push eax
	call _com_issue_errorex

 Block18:
	mov dl,byte ptr [esp+0x18]
	mov dword ptr [edi+0x41B8],ebp
	mov dword ptr [edi+0x41BC],ebx
	mov dword ptr [edi+0x41C0],esi
	mov byte ptr [edi+0x41C4],dl
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	test ecx,ecx
	je Block20

 Block19:
	call CWndMan::OnEventChangeScreenResolution

 Block20:
	cmp byte ptr [esp+0x1C],0
	je Block24

 Block21:
	call get_field
	test eax,eax
	je Block23

 Block22:
	mov ecx,eax
	call CMapLoadable::OnEventChangeScreenResolution

 Block23:
	movzx eax,byte ptr [edi+0x41C4]
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov dword ptr [ecx+0x98],eax
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	call CConfig::SaveGlobal

 Block24:
	pop esi
	pop ebp
	pop ebx

 Block25:
	pop edi
	pop ecx
	ret 8
}
}
// CWvsContext::OnImitatedNPCResult
__SUB_CLASS_THIS(005CFB30, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	call CInPacket::Decode1
	ret 4
}
}
// CWvsContext::SendMigrateToShopRequest
_SUB_EXCEPTION_HANDLER(5DC280)
__SUB_CLASS_THIS(005DC280, __thiscall, 8084,  CWvsContext, void, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DC280
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esi+0x2098]
	test eax,eax
	je Block5

 Block1:
	mov dword ptr [esp+0x2C],0
	lea eax,[esp+0x2C]
	push offset _S_THECASHSHOPISNOT
	push eax
	mov dword ptr [esp+0x2C],0
	call ZXString<char>::Format
	mov esi,dword ptr [esp+0x34]
	add esp,8
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block3

 Block2:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x10],esp
	push 0
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],0
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd

 Block3:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test esi,esi
	je Block20

 Block4:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x20
	ret 4

 Block5:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test eax,eax
	je Block20

 Block6:
	cmp dword ptr [eax+0x63C],0
	jle Block9

 Block7:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x40],esp
	push 0x116

 Block8:
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x20
	ret 4

 Block9:
	cmp dword ptr [esi+0x20B8],0
	jne Block20

 Block10:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block20

 Block11:
	cmp dword ptr [esi+0x3F9C],0
	je Block14

 Block12:
	lea edx,[esp+0x2C]
	push 0xC92
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x2C],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x34]
	add esp,8
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block20

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x20
	ret 4

 Block14:
	cmp dword ptr [esi+0x3FA0],0
	je Block17

 Block15:
	lea eax,[esp+8]
	push 0xF7B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x2C],2
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x10]
	add esp,8
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block20

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x20
	ret 4

 Block17:
	call get_field
	test byte ptr [eax+0x178],0x10
	je Block19

 Block18:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x40],esp
	push 0x122
	jmp Block8

 Block19:
	mov edx,dword ptr [esp+0x2C]
	push 0x2B
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x3F88],edx
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],3
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CClientSocket::SendPacket
	push 1
	mov ecx,esi
	call CWvsContext::SetExclRequestSent
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block20:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x20
	ret 4
}
}
// TryToggleTab
__SUB(005CCD00, __cdecl, 15838,  int32_t, CUIWnd*) {
__asm {

 Block0:
	push esi
	test edi,edi
	je Block15

 Block1:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea esi,[edi+4]
	push offset CUIItem::ms_RTTI_CUIItem
	mov ecx,esi
	call edx
	test eax,eax
	je Block4

 Block2:
	mov ecx,dword ptr [edi+0xB0C]

 Block3:
	mov eax,dword ptr [ecx+0x44]
	inc eax
	cdq
	idiv dword ptr [ecx+0x50]
	push edx
	call CCtrlTab::SetTab
	mov eax,1
	pop esi
	ret

 Block4:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CUISkill::ms_RTTI_CUISkill
	mov ecx,esi
	call edx
	test eax,eax
	je Block6

 Block5:
	mov ecx,dword ptr [edi+0xB10]
	jmp Block3

 Block6:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CUISkillEx::ms_RTTI_CUISkillEx
	mov ecx,esi
	call edx
	test eax,eax
	jne Block5

 Block7:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CUIUserList::ms_RTTI_CUIUserList
	mov ecx,esi
	call edx
	test eax,eax
	je Block9

 Block8:
	mov ecx,edi
	call CUIUserList::ToggleTab
	mov eax,1
	pop esi
	ret

 Block9:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CUIPartySearch::ms_RTTI_CUIPartySearch
	mov ecx,esi
	call edx
	test eax,eax
	je Block11

 Block10:
	mov ecx,edi
	call CUIPartySearch::ToggleTab
	mov eax,1
	pop esi
	ret

 Block11:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CUIQuestInfo::ms_RTTI_CUIQuestInfo
	mov ecx,esi
	call edx
	test eax,eax
	je Block13

 Block12:
	mov ecx,edi
	call CUIQuestInfo::ToggleTab
	mov eax,1
	pop esi
	ret

 Block13:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CUIMedalQuestInfo::ms_RTTI_CUIMedalQuestInfo
	mov ecx,esi
	call edx
	test eax,eax
	je Block15

 Block14:
	mov ecx,edi
	call CUIMedalQuestInfo::ToggleTab
	mov eax,1
	pop esi
	ret

 Block15:
	xor eax,eax
	pop esi
	ret
}
}
// CUIStatChangeConfirm::OnButtonClicked
__SUB_CLASS_THIS(005D3E50, __thiscall, 68535,  CUIStatChangeConfirm, void, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,1
	jne Block2

 Block1:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],1
	jmp edx

 Block2:
	cmp eax,2
	jne Block4

 Block3:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],2
	jmp edx

 Block4:
	cmp eax,8
	jne Block6

 Block5:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],8
	jmp edx

 Block6:
	ret 4
}
}
// CWvsContext::GetOnlineGuildMemberID
__SUB_CLASS_THIS(0060BB90, __thiscall, 8152,  CWvsContext, void, ZArray<unsigned long>&) {
__asm {

 Block0:
	push edi
	mov edi,ecx
	mov ecx,dword ptr [esp+8]
	mov eax,dword ptr [ecx]
	test eax,eax
	je Block3

 Block1:
	cmp dword ptr [eax-4],0
	je Block3

 Block2:
	call ZArray<unsigned long>::RemoveAll

 Block3:
	cmp dword ptr [edi+0x37C8],0
	je Block15

 Block4:
	push ebx
	push ebp
	xor ebx,ebx
	xor ebp,ebp
	push esi
	jmp Block6

 Block6:
	mov eax,dword ptr [edi+0x37D4]
	test eax,eax
	je Block8

 Block7:
	mov eax,dword ptr [eax-4]

 Block8:
	cmp ebx,eax
	jge Block14

 Block9:
	mov eax,dword ptr [edi+0x37D4]
	mov esi,dword ptr [eax+ebx*4]
	test esi,esi
	je Block13

 Block10:
	mov ecx,dword ptr [edi+0x37D8]
	cmp dword ptr [ecx+ebp+0x19],0
	je Block13

 Block11:
	cmp dword ptr [edi+0x20B4],esi
	je Block13

 Block12:
	mov ecx,dword ptr [esp+0x14]
	push 0xFFFFFFFF
	call ZArray<unsigned long>::InsertBefore
	mov dword ptr [eax],esi

 Block13:
	inc ebx
	add ebp,0x25
	jmp Block6

 Block14:
	pop esi
	pop ebp
	pop ebx

 Block15:
	pop edi
	ret 4
}
}
// CWvsContext::OnNotifyJobChange
_SUB_EXCEPTION_HANDLER(5E4EF0)
__SUB_CLASS_THIS(005E4EF0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E4EF0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x30]
	mov ecx,esi
	call CInPacket::Decode1
	mov ecx,esi
	mov bl,al
	call CInPacket::Decode4
	mov edi,eax
	lea eax,[esp+0x10]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	xor esi,esi
	mov dword ptr [esp+0x28],0
	mov dword ptr [esp+0x30],esi
	mov byte ptr [esp+0x28],1
	test bl,bl
	jne Block8

 Block1:
	lea ecx,[esp+0x18]
	push 0x1A3E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,eax
	lea edx,[esp+0x14]
	push 0x14A6
	push edx
	mov byte ptr [esp+0x30],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebx,dword ptr [eax]
	push edi
	mov byte ptr [esp+0x2C],3
	call get_job_name
	mov ecx,dword ptr [esi]
	push eax
	mov eax,dword ptr [esp+0x18]
	push eax
	push ecx
	lea edx,[esp+0x40]
	push ebx
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0x18
	mov byte ptr [esp+0x28],2
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block3:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x28],1
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block15

 Block6:
	sub esp,8
	mov dword ptr [esp+0x20],esp

 Block7:
	mov esi,dword ptr [esp+0x38]
	mov eax,esp
	push 0
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],0
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd
	jmp Block16

 Block8:
	cmp bl,1
	jne Block16

 Block9:
	lea eax,[esp+0x14]
	push 0x1A3C
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,eax
	lea ecx,[esp+0x18]
	push 0x14A6
	push ecx
	mov byte ptr [esp+0x30],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebx,dword ptr [eax]
	push edi
	mov byte ptr [esp+0x2C],5
	call get_job_name
	mov edx,dword ptr [esp+0x14]
	push eax
	mov eax,dword ptr [esi]
	push edx
	push eax
	lea ecx,[esp+0x40]
	push ebx
	push ecx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0x18
	mov byte ptr [esp+0x28],4
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x28],1
	test eax,eax
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block15

 Block14:
	sub esp,8
	mov dword ptr [esp+0x24],esp
	jmp Block7

 Block15:
	mov esi,dword ptr [esp+0x30]

 Block16:
	mov byte ptr [esp+0x28],0
	test esi,esi
	je Block18

 Block17:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CWvsContext::RemoveQuestTimer
__SUB_CLASS_THIS(005E0660, __thiscall, 8298,  CWvsContext, void, uint16_t, int32_t) {
__asm {

 Block0:
	sub esp,0x18
	push ebx
	mov ebx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push esi
	mov esi,ecx
	test ebx,ebx
	je Block14

 Block1:
	push edi
	mov edi,dword ptr [esp+0x28]
	push edi
	mov ecx,ebx
	call CQuestMan::IsAutoStartQuest
	test eax,eax
	je Block13

 Block2:
	push ebp
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [eax+4]
	mov dword ptr [esp+0x1C],ecx
	lea ecx,[esp+0x20]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov edx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add edx,0x2148
	mov ecx,esi
	mov dword ptr [esp+0x18],edx
	call CWvsContext::GetCurFieldID
	mov dword ptr [esp+0x14],eax
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov ecx,dword ptr [eax+0x2064]
	mov dword ptr [esp+0x10],ecx
	push edi
	mov ecx,ebx
	call CQuestMan::GetStartDemand
	mov ebp,dword ptr [eax+0x18]
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [esi+0x4080]
	push 0
	push edx
	mov edx,dword ptr [esp+0x20]
	push eax
	mov eax,dword ptr [esp+0x28]
	push ecx
	push edx
	push eax
	push ebp
	push edi
	mov ecx,ebx
	call CQuestMan::CheckStartDemand
	test eax,eax
	je Block11

 Block3:
	push edi
	mov ecx,ebx
	call CQuestMan::IsAutoAutoAcceptQuest
	test eax,eax
	je Block6

 Block4:
	push 0
	lea edx,[esp+0x30]
	lea ecx,[esi+0x4010]
	push edx
	call ZMap<unsigned short, int, unsigned short>::GetAt
	test eax,eax
	jne Block6

 Block5:
	mov ebx,1
	push ebx
	push ebp
	push edi
	mov ecx,esi
	call CWvsContext::StartQuest
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x30]
	push ecx
	lea ecx,[esi+0x4010]
	mov dword ptr [esp+0x38],ebx
	call ZMap<unsigned short, int, unsigned short>::Insert
	call timeGetTime
	pop ebp
	pop edi
	mov dword ptr [esi+0x405C],eax
	pop esi
	pop ebx
	add esp,0x18
	ret 8

 Block6:
	push edi
	mov ecx,ebx
	call CQuestMan::IsAutoAutoAcceptQuest
	test eax,eax
	jne Block12

 Block7:
	lea ebx,[eax+1]
	cmp dword ptr [esp+0x30],eax
	je Block10

 Block8:
	push eax
	lea edx,[esp+0x30]
	push edx
	lea ecx,[esi+0x3FF8]
	call ZMap<unsigned short, int, unsigned short>::GetAt
	test eax,eax
	jne Block10

 Block9:
	lea ecx,[esi+0x4044]
	mov dword ptr [esi+0x4040],ebx
	call ZList<unsigned short>::AddTail_
	mov word ptr [eax],di

 Block10:
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x30]
	push ecx
	lea ecx,[esi+0x3FF8]
	mov dword ptr [esp+0x38],ebx
	call ZMap<unsigned short, int, unsigned short>::Insert
	pop ebp
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret 8

 Block11:
	lea edx,[esp+0x2C]
	push edx
	lea ecx,[esi+0x3FF8]
	call ZMap<unsigned short, int, unsigned short>::RemoveKey
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esi+0x4010]
	call ZMap<unsigned short, int, unsigned short>::RemoveKey

 Block12:
	pop ebp

 Block13:
	pop edi

 Block14:
	pop esi
	pop ebx
	add esp,0x18
	ret 8
}
}
// CWvsContext::TryRecovery
_SUB_EXCEPTION_HANDLER(5D4020)
__SUB_CLASS_THIS0(005D4020, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D4020
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x54
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x68]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov esi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test esi,esi
	je Block101

 Block1:
	lea eax,[esp+0x3C]
	push eax
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x40]
	mov dword ptr [esp+0x18],ebp
	test eax,eax
	je Block6

 Block2:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block5

 Block3:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block5

 Block4:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block5:
	mov ebp,dword ptr [esp+0x18]
	mov dword ptr [esp+0x40],0

 Block6:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block9

 Block7:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block9

 Block8:
	mov eax,edi
	jmp Block10

 Block9:
	xor eax,eax

 Block10:
	mov ecx,dword ptr [ebp+0x125]
	fld qword ptr [eax+0x180]
	fst qword ptr [esp+0x34]
	test ecx,ecx
	je Block14

 Block11:
	fld1
	fcompp
	fnstsw ax
	test ah,5
	jp Block15

 Block12:
	add ecx,0xC
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block15

 Block13:
	mov ecx,dword ptr [eax+0x158]
	push ecx
	add eax,0x148
	push eax
	call _ZtlSecureFuseHelper<double>::call
	fmul qword ptr [esp+0x3C]
	add esp,8
	fstp qword ptr [esp+0x34]
	jmp Block15

 Block14:
	fstp st(0)

 Block15:
	mov eax,dword ptr [esi+0x640]
	lea edi,[esi+0x88]
	push 0
	push eax
	mov ecx,edi
	call CAvatar::MoveAction2RawAction
	mov ecx,edi
	mov dword ptr [esp+0x28],eax
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jle Block17

 Block16:
	mov ecx,edi
	call CAvatar::GetOneTimeAction
	mov dword ptr [esp+0x1C],eax
	jmp Block18

 Block17:
	mov edx,dword ptr [esp+0x28]
	mov dword ptr [esp+0x1C],edx

 Block18:
	mov eax,dword ptr [esi+0x3BA0]
	push eax
	lea ecx,[esi+0x3B98]
	push ecx
	mov dword ptr [esp+0x30],0
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	je Block20

 Block19:
	fld qword ptr [esp+0x34]
	mov dword ptr [esp+0x28],2
	fmul qword ptr [__real_3ff8000000000000]
	fstp qword ptr [esp+0x34]

 Block20:
	mov edx,dword ptr [ebp+0x69]
	push edx
	lea edi,[ebp+0x61]
	push edi
	mov dword ptr [esp+0x28],1
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block46

 Block21:
	mov eax,dword ptr [ebx+0x2138]
	push eax
	lea ecx,[ebx+0x2130]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [ebp+0x69]
	push edx
	push edi
	mov dword ptr [esp+0x40],eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,0x10
	cmp dword ptr [esp+0x30],eax
	jle Block46

 Block22:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block46

 Block23:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block46

 Block24:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x120C]
	push ecx
	add eax,0x1204
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block46

 Block25:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x14]
	lea edi,[esi+4]
	lea eax,[esp+0x44]
	push eax
	mov ecx,edi
	call edx
	mov dword ptr [esp+0x30],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [esp+0x30]
	cmp eax,dword ptr [ecx]
	jne Block46

 Block26:
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x14]
	lea eax,[esp+0x4C]
	push eax
	mov ecx,edi
	call edx
	add eax,4
	mov dword ptr [esp+0x30],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x44]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [esp+0x30]
	cmp eax,dword ptr [ecx]
	jne Block46

 Block27:
	cmp dword ptr [esi+0x5D0],0
	jne Block29

 Block28:
	cmp dword ptr [esi+0x5E4],0
	je Block32

 Block29:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,9
	je Block37

 Block30:
	cmp eax,0xA
	je Block37

 Block31:
	jmp Block36

 Block32:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,0x2D
	je Block37

 Block33:
	cmp eax,0x2E
	je Block37

 Block34:
	cmp eax,0x82
	je Block37

 Block35:
	cmp eax,0x81
	je Block37

 Block36:
	push eax
	call is_stand_action
	add esp,4
	test eax,eax
	je Block46

 Block37:
	mov edx,dword ptr [esi+0x4644]
	push edx
	lea eax,[esi+0x463C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add esp,8
	push 1
	push eax
	call CItemInfo::GetPortableChairRecoveryRate
	mov dword ptr [esp+0x30],eax
	test eax,eax
	jne Block40

 Block38:
	lea ebp,[ebx+0x3D38]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov edi,eax
	add edi,0x1E
	push edi
	mov ecx,ebp
	call TSecType<long>::SetData
	cmp edi,0x2710
	jl Block48

 Block39:
	fld qword ptr [esp+0x34]
	fmul qword ptr [__real_4024000000000000]
	call __ftol2_sse
	mov edi,eax
	jmp Block43

 Block40:
	lea ebp,[ebx+0x3D5C]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov edi,eax
	add edi,0x1E
	push edi
	mov ecx,ebp
	call TSecType<long>::SetData
	cmp edi,0x2710
	jge Block42

 Block41:
	mov dword ptr [esp+0x20],0
	jmp Block45

 Block42:
	mov edi,dword ptr [esp+0x30]

 Block43:
	test edi,edi
	jle Block45

 Block44:
	mov ecx,dword ptr [esp+0x28]
	push ecx
	push 0
	push edi
	mov ecx,ebx
	call CWvsContext::SendStatChangeRequest
	push 0
	push edi
	mov ecx,esi
	call CUser::MakeIncDecHPEffect

 Block45:
	mov ebp,dword ptr [esp+0x18]

 Block46:
	lea ecx,[ebx+0x3D38]
	push 0
	call TSecType<long>::SetData
	cmp dword ptr [esp+0x20],0
	je Block50

 Block47:
	jmp Block49

 Block48:
	mov ebp,dword ptr [esp+0x18]

 Block49:
	lea ecx,[ebx+0x3D5C]
	push 0
	call TSecType<long>::SetData

 Block50:
	mov edx,dword ptr [ebp+0x69]
	push edx
	lea eax,[ebp+0x61]
	push eax
	mov dword ptr [esp+0x28],1
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block64

 Block51:
	mov eax,dword ptr [ebx+0x2144]
	push eax
	lea ecx,[ebx+0x213C]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [ebp+0x81]
	mov edi,eax
	push edx
	lea eax,[ebp+0x79]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,0x10
	cmp edi,eax
	jle Block64

 Block52:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block64

 Block53:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block64

 Block54:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x120C]
	push ecx
	add eax,0x1204
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block64

 Block55:
	mov edx,dword ptr [esi+0x4644]
	push edx
	lea eax,[esi+0x463C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add esp,8
	push 0
	push eax
	call CItemInfo::GetPortableChairRecoveryRate
	mov dword ptr [esp+0x30],eax
	test eax,eax
	jne Block58

 Block56:
	lea ebp,[ebx+0x3D44]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov edi,eax
	add edi,0x1E
	push edi
	mov ecx,ebp
	call TSecType<long>::SetData
	cmp edi,0x2710
	jl Block66

 Block57:
	fld qword ptr [esp+0x34]
	fmul qword ptr [__real_4008000000000000]
	call __ftol2_sse
	jmp Block61

 Block58:
	lea ebp,[ebx+0x3D50]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov edi,eax
	add edi,0x1E
	push edi
	mov ecx,ebp
	call TSecType<long>::SetData
	cmp edi,0x2710
	jge Block60

 Block59:
	mov dword ptr [esp+0x20],0
	jmp Block63

 Block60:
	mov eax,dword ptr [esp+0x30]

 Block61:
	test eax,eax
	jle Block63

 Block62:
	mov ecx,dword ptr [esp+0x28]
	push ecx
	push eax
	push 0
	mov ecx,ebx
	call CWvsContext::SendStatChangeRequest

 Block63:
	mov ebp,dword ptr [esp+0x18]

 Block64:
	xor edi,edi
	lea ecx,[ebx+0x3D44]
	push edi
	call TSecType<long>::SetData
	cmp dword ptr [esp+0x20],edi
	je Block68

 Block65:
	jmp Block67

 Block66:
	mov ebp,dword ptr [esp+0x18]

 Block67:
	xor edi,edi
	lea ecx,[ebx+0x3D50]
	push edi
	call TSecType<long>::SetData

 Block68:
	mov edx,dword ptr [esi+0x4644]
	push edx
	lea eax,[esi+0x463C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add esp,8
	push eax
	call CItemInfo::IsTherePortableChairStatUp
	test eax,eax
	jne Block71

 Block69:
	mov ecx,esi
	call CUserLocal::SetPortableChairStatSetSent
	test eax,eax
	je Block71

 Block70:
	push 0x50
	lea ecx,[esp+0x50]
	call COutPacket::_ctor_1
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	mov dword ptr [esp+0x74],edi
	call CClientSocket::SendPacket
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x70],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block71:
	push edi
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x2C]
	push eax
	mov ecx,esi
	mov dword ptr [esp+0x30],edi
	mov dword ptr [esp+0x38],edi
	call CUserLocal::ApplyAccessoryOption
	cmp dword ptr [esp+0x24],edi
	jle Block93

 Block72:
	mov ecx,dword ptr [ebp+0x69]
	push ecx
	lea eax,[ebp+0x61]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block91

 Block73:
	mov edx,dword ptr [ebx+0x2138]
	push edx
	lea eax,[ebx+0x2130]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp+0x69]
	mov edi,eax
	push ecx
	lea eax,[ebp+0x61]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,0x10
	cmp edi,eax
	jle Block91

 Block74:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block91

 Block75:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block91

 Block76:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x14]
	lea edi,[esi+4]
	lea eax,[esp+0x4C]
	push eax
	mov ecx,edi
	call edx
	mov ebp,eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x44]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax]
	cmp eax,dword ptr [ebp]
	jne Block90

 Block77:
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x14]
	lea eax,[esp+0x34]
	push eax
	mov ecx,edi
	call edx
	lea ebp,[eax+4]
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x5C]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	cmp eax,dword ptr [ebp]
	jne Block90

 Block78:
	cmp dword ptr [esi+0x5D0],0
	jne Block80

 Block79:
	cmp dword ptr [esi+0x5E4],0
	je Block83

 Block80:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,9
	je Block88

 Block81:
	cmp eax,0xA
	je Block88

 Block82:
	jmp Block87

 Block83:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,0x2D
	je Block88

 Block84:
	cmp eax,0x2E
	je Block88

 Block85:
	cmp eax,0x82
	je Block88

 Block86:
	cmp eax,0x81
	je Block88

 Block87:
	push eax
	call is_stand_action
	add esp,4
	test eax,eax
	je Block90

 Block88:
	lea ebp,[ebx+0x3D68]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov edi,eax
	add edi,0x1E
	push edi
	mov ecx,ebp
	call TSecType<long>::SetData
	cmp edi,0xFA0
	jl Block92

 Block89:
	mov ecx,dword ptr [esp+0x24]
	push 0
	push ecx
	mov ecx,ebx
	call CWvsContext::SendStatChangeRequestByItemOption
	mov edx,dword ptr [esp+0x24]
	push 0
	push edx
	mov ecx,esi
	call CUser::MakeIncDecHPEffect

 Block90:
	mov ebp,dword ptr [esp+0x18]

 Block91:
	push 0
	lea ecx,[ebx+0x3D68]
	call TSecType<long>::SetData
	jmp Block93

 Block92:
	mov ebp,dword ptr [esp+0x18]

 Block93:
	cmp dword ptr [esp+0x2C],0
	jle Block101

 Block94:
	mov eax,dword ptr [ebp+0x69]
	push eax
	lea eax,[ebp+0x61]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block100

 Block95:
	mov ecx,dword ptr [ebx+0x2144]
	push ecx
	lea edx,[ebx+0x213C]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	mov edi,eax
	mov eax,dword ptr [ebp+0x81]
	push eax
	add ebp,0x79
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	add esp,0x10
	cmp edi,eax
	jle Block100

 Block96:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block100

 Block97:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block100

 Block98:
	lea edi,[ebx+0x3D74]
	mov ecx,edi
	call TSecType<long>::GetData
	mov esi,eax
	add esi,0x1E
	push esi
	mov ecx,edi
	call TSecType<long>::SetData
	cmp esi,0xFA0
	jl Block101

 Block99:
	mov edx,dword ptr [esp+0x2C]
	push edx
	push 0
	mov ecx,ebx
	call CWvsContext::SendStatChangeRequestByItemOption

 Block100:
	push 0
	lea ecx,[ebx+0x3D74]
	call TSecType<long>::SetData

 Block101:
	mov ecx,dword ptr [esp+0x68]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CWvsContext::SendInvitationQuery
_SUB_EXCEPTION_HANDLER(5DA630)
__SUB_CLASS_THIS(005DA630, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DA630
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block2

 Block1:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block3

 Block2:
	xor esi,esi

 Block3:
	test dword ptr [esi+0x178],0x2000
	je Block8

 Block4:
	lea eax,[esp+0x28]
	push 0x121
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x20],0
	je Block6

 Block5:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block6:
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test eax,eax
	je Block9

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 8

 Block8:
	push 0xA1
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	push 6
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x24],1
	call COutPacket::Encode1
	mov ecx,dword ptr [esp+0x28]
	push ecx
	lea ecx,[esp+0xC]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0xC]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+8]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block9:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 8
}
}
// ALLIANCEDATA::Clear
__SUB_CLASS_THIS0(005DFB40, __thiscall, 45460,  ALLIANCEDATA, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov dword ptr [esi],0
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esi+4],0

 Block2:
	lea ecx,[esi+8]
	call ZArray<ZXString<char>>::RemoveAll
	lea ecx,[esi+0xC]
	call ZArray<unsigned long>::RemoveAll
	mov dword ptr [esi+0x10],0
	mov eax,dword ptr [esi+0x14]
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esi+0x14],0

 Block4:
	pop esi
	ret
}
}
// CUISkillDecEX::OnKey
__SUB_CLASS_THIS(005E6610, __thiscall, 68634,  IUIMsgHandler, void, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0xD
	je Block2

 Block1:
	mov dword ptr [esp+4],eax
	jmp  CDialog::OnKey

 Block2:
	ret 8
}
}
// CWvsContext::OnSetLogoutGiftConfig
__SUB_CLASS_THIS(005CFA30, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push esi
	mov esi,ecx
	push edi
	mov ecx,ebx
	call CInPacket::Decode4
	mov dword ptr [esi+0x40A4],eax
	add esi,0x40A8
	mov edi,3

 Block1:
	mov ecx,ebx
	call CInPacket::Decode4
	mov dword ptr [esi],eax
	add esi,4
	sub edi,1
	jne Block1

 Block2:
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CUISkillDecEX::IsRequiredSkill
__SUB_CLASS_THIS(004528D0, __thiscall, 68641,  CUISkillDecEX, int32_t, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	lea eax,[esp+0x20]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x24]
	xor ebp,ebp
	cmp eax,ebp
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x24],ebp

 Block5:
	lea edi,[ebx+0x53D]
	mov ecx,edi
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x18],eax
	cmp eax,ebp
	je Block16

 Block6:
	mov ebx,dword ptr [esp+0x2C]

 Block7:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	mov ecx,edi
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	cmp dword ptr [esp+0x1C],ebp
	je Block15

 Block8:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push eax
	call CSkillInfo::GetSkill
	cmp eax,ebp
	je Block17

 Block9:
	mov eax,dword ptr [eax+0x68]
	mov dword ptr [esp+0x14],eax
	cmp eax,ebp
	je Block15

 Block10:
	jmp Block12

 Block12:
	lea eax,[esp+0x14]
	push eax
	call ZList<GW_SkillRecord>::GetNext
	mov esi,eax
	add esp,4
	cmp dword ptr [esi],ebx
	jne Block14

 Block13:
	lea ecx,[esp+0x10]
	push ecx
	lea edx,[esp+0x30]
	push edx
	mov ecx,edi
	mov dword ptr [esp+0x18],ebp
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x10]
	cmp eax,dword ptr [esi+4]
	jle Block17

 Block14:
	cmp dword ptr [esp+0x14],ebp
	jne Block12

 Block15:
	cmp dword ptr [esp+0x18],ebp
	jne Block7

 Block16:
	pop edi
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	add esp,0x18
	ret 4

 Block17:
	pop edi
	pop esi
	pop ebp
	mov eax,1
	pop ebx
	add esp,0x18
	ret 4
}
}
// CWvsContext::RunShopScanner
_SUB_EXCEPTION_HANDLER(5DEB50)
__SUB_CLASS_THIS(005DEB50, __thiscall, 8311,  CWvsContext, int32_t, COutPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DEB50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],0
	je Block6

 Block1:
	lea eax,[esp+8]
	push 0x98
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x18],0
	je Block3

 Block2:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block3:
	mov eax,dword ptr [esp+8]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	xor eax,eax
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 4

 Block6:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block5

 Block7:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block5

 Block8:
	lea ecx,[esi+0x16C]
	call TSecType<unsigned long>::GetData
	add eax,0xC9C28080
	cmp eax,0x16
	jbe Block13

 Block9:
	lea ecx,[esp+0xC]
	push 0xE61
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x18],1
	mov dword ptr [esp+0x20],0
	mov eax,dword ptr [eax]
	push 0xC
	push eax
	lea edx,[esp+0x28]
	push edx
	mov byte ptr [esp+0x24],2
	call ZXString<char>::Format
	add esp,8
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x28]
	add esp,8
	mov byte ptr [esp+0x18],1
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block5

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	xor eax,eax
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 4

 Block13:
	call TSingleton<CUIShopScanner>::CreateInstance
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	push eax
	call CUIShopScanner::SetOutPacket
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 4
}
}
// CWvsContext::UseBoxGachaponItem
_SUB_EXCEPTION_HANDLER(5DABC0)
__SUB_CLASS_THIS(005DABC0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DABC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	lea eax,[esp+0x1C]
	push eax
	mov dword ptr [esp+0x18],2
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x20],0

 Block5:
	mov eax,dword ptr [ebp+0x515]
	test eax,eax
	je Block7

 Block6:
	mov eax,dword ptr [eax-4]

 Block7:
	lea ebx,[eax-1]
	test ebx,ebx
	jle Block18

 Block8:
	push ebx
	push 5
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,ebp
	call CharacterData::GetItem
	mov esi,dword ptr [esp+0x28]
	mov dword ptr [esp+0x34],0
	test esi,esi
	je Block10

 Block9:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	cmp eax,0x53C550
	je Block16

 Block10:
	mov dword ptr [esp+0x34],0xFFFFFFFF
	test esi,esi
	je Block14

 Block11:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block13

 Block12:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block13:
	mov dword ptr [esp+0x28],0

 Block14:
	dec ebx
	test ebx,ebx
	jg Block8

 Block15:
	jmp Block18

 Block16:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x18],0
	mov dword ptr [esp+0x38],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block18

 Block17:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block18:
	push 0xA8
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x1C],eax
	mov edi,dword ptr [esp+0x40]
	mov dword ptr [esp+0x34],1
	test eax,eax
	je Block34

 Block19:
	cmp edi,0x414EC0
	je Block22

 Block20:
	cmp edi,0x414EC2
	je Block22

 Block21:
	xor ecx,ecx
	jmp Block23

 Block22:
	mov ecx,1

 Block23:
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push ecx
	mov ecx,eax
	call CUIGachaponBox::_ctor_0
	test eax,eax
	je Block34

 Block24:
	add eax,8
	je Block34

 Block25:
	lea esi,[eax-8]
	mov dword ptr [esp+0x28],esi
	test esi,esi
	je Block27

 Block26:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block27:
	mov ecx,esi
	mov dword ptr [esp+0x34],2
	call CDialog::DoModal
	cmp eax,1
	jne Block29

 Block28:
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [esp+0x18]
	push edi
	push eax
	call CWvsContext::SendUseBoxGachaponItemRequest

 Block29:
	mov dword ptr [esp+0x34],0xFFFFFFFF
	test esi,esi
	je Block33

 Block30:
	add esi,8
	lea ecx,[esi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block33

 Block31:
	lea edx,[esi+4]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block33

 Block32:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block33:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 8

 Block34:
	xor esi,esi
	mov dword ptr [esp+0x28],esi
	jmp Block27
}
}
// CWvsContext::MonsterCarnivalDlgKeyHook
__SUB_CLASS_THIS(005CCF40, __thiscall, 8123,  CWvsContext, int32_t, uint32_t) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CUIMonsterCarnival>::ms_pInstance]
	test ecx,ecx
	jne Block2

 Block1:
	xor eax,eax
	ret 4

 Block2:
	mov eax,dword ptr [esp+4]
	cmp eax,9
	je Block6

 Block3:
	cmp eax,0x6F
	jbe Block1

 Block4:
	cmp eax,0x7B
	ja Block1

 Block5:
	push eax
	call CUIMonsterCarnival::FuncKeyProcess
	mov eax,1
	ret 4

 Block6:
	push 1
	call CUIMonsterCarnival::OnTabAutoOpen
	mov eax,1
	ret 4
}
}
// CUISkillInc::DrawTab
_SUB_EXCEPTION_HANDLER(454C40)
__SUB_CLASS_THIS(00454C40, __thiscall, 68667,  CUISkillInc, void, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_454C40
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x50
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor edi,edi
	mov dword ptr [ebp-0x14],edi
	mov dword ptr [ebp-4],edi
	cmp dword ptr [esi+0xD8],edi
	je Block2

 Block1:
	mov eax,dword ptr [ebp+8]
	push eax
	push offset _S_UIUIWINDOW2IMGRE__20
	lea ecx,[ebp-0x14]
	push ecx
	jmp Block3

 Block2:
	mov edx,dword ptr [ebp+8]
	push edx
	push offset _S_UIUIWINDOW2IMGRE__19
	lea eax,[ebp-0x14]
	push eax

 Block3:
	call ZXString<char>::Format
	add esp,0xC
	lea ecx,[ebp-0x1C]
	push ecx
	mov ecx,esi
	call CWnd::GetCanvas
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x4C]
	push edx
	mov byte ptr [ebp-4],1
	call esi
	lea eax,[ebp-0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block5

 Block4:
	push eax
	call _com_issue_error

 Block5:
	lea ecx,[ebp-0x2C]
	push ecx
	mov byte ptr [ebp-4],2
	call esi
	lea edx,[ebp-0x2C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block7

 Block6:
	push eax
	call _com_issue_error

 Block7:
	mov ebx,dword ptr [ebp-0x14]
	push edi
	push edi
	push 0xFFFFFFFF
	push ebx
	push edi
	push edi
	mov byte ptr [ebp-4],3
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov esi,esp
	push edi
	push edi
	lea eax,[ebp-0x4C]
	push eax
	lea ecx,[ebp-0x2C]
	push ecx
	push 0x3FFFFFFF
	push esi
	push 0xFFFFFFFF
	push ebx
	push edi
	push edi
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x18],esp
	mov ecx,esp
	push esi
	call _xbstr_t::_ctor_1
	mov byte ptr [ebp-4],4
	cmp dword ptr [_D_G_RM],edi
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	lea edx,[ebp-0x5C]
	mov byte ptr [ebp-4],3
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x18]
	mov dword ptr [ebp-0x18],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block12

 Block10:
	cmp eax,0x80004002
	je Block12

 Block11:
	push eax
	call _com_issue_error

 Block12:
	mov esi,8
	mov byte ptr [ebp-4],7
	cmp word ptr [ebp-0x5C],si
	jne Block15

 Block13:
	xor eax,eax
	mov word ptr [ebp-0x5C],ax
	mov eax,dword ptr [ebp-0x54]
	cmp eax,edi
	je Block16

 Block14:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block16

 Block15:
	lea ecx,[ebp-0x5C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block16:
	mov byte ptr [ebp-4],8
	cmp word ptr [ebp-0x2C],si
	jne Block19

 Block17:
	mov eax,dword ptr [ebp-0x24]
	xor edx,edx
	mov word ptr [ebp-0x2C],dx
	cmp eax,edi
	je Block20

 Block18:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block20

 Block19:
	lea eax,[ebp-0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block20:
	mov ebx,9
	mov byte ptr [ebp-4],bl
	cmp word ptr [ebp-0x4C],si
	jne Block23

 Block21:
	mov eax,dword ptr [ebp-0x44]
	xor ecx,ecx
	mov word ptr [ebp-0x4C],cx
	cmp eax,edi
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea edx,[ebp-0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block24:
	mov esi,dword ptr [ebp-0x18]
	cmp esi,edi
	mov edi,dword ptr [ebp-0x1C]
	je Block31

 Block25:
	mov eax,3
	mov word ptr [ebp-0x3C],ax
	mov dword ptr [ebp-0x34],0xFF
	mov byte ptr [ebp-4],0xA
	test edi,edi
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	lea ecx,[ebp-0x3C]
	push ecx
	push esi
	push 0x46
	push ebx
	mov ecx,edi
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x3C],8
	mov byte ptr [ebp-4],bl
	jne Block30

 Block28:
	mov eax,dword ptr [ebp-0x34]
	xor edx,edx
	mov word ptr [ebp-0x3C],dx
	test eax,eax
	je Block31

 Block29:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block31

 Block30:
	lea eax,[ebp-0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block31:
	mov byte ptr [ebp-4],1
	test esi,esi
	je Block33

 Block32:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	call edx

 Block33:
	mov byte ptr [ebp-4],0
	test edi,edi
	je Block35

 Block34:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block35:
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block37

 Block36:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block37:
	lea esp,[ebp-0x6C]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::IsPartyMemberID
__SUB_CLASS_THIS(0060FCF0, __thiscall, 8161,  CWvsContext, int32_t, unsigned long) {
__asm {

 Block0:
	cmp dword ptr [ecx+0x3604],0
	je Block5

 Block1:
	mov edx,dword ptr [esp+4]
	test edx,edx
	je Block5

 Block2:
	xor eax,eax
	add ecx,0x3608
	lea esp,[esp]

 Block3:
	cmp edx,dword ptr [ecx]
	je Block6

 Block4:
	inc eax
	add ecx,4
	cmp eax,6
	jl Block3

 Block5:
	xor eax,eax
	ret 4

 Block6:
	mov eax,1
	ret 4
}
}
// CWvsContext::OnPacket
__SUB_CLASS_THIS(005E5830, __thiscall, 8124,  CWvsContext, void, long, CInPacket&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	add eax,0xFFFFFFE4
	cmp eax,0x70
	ja Block108

 Block1:
	cmp EAX, 0
je Block2
cmp EAX, 1
je Block3
cmp EAX, 2
je Block4
cmp EAX, 3
je Block5
cmp EAX, 4
je Block6
cmp EAX, 5
je Block7
cmp EAX, 6
je Block8
cmp EAX, 7
je Block9
cmp EAX, 8
je Block10
cmp EAX, 9
je Block11
cmp EAX, 10
je Block21
cmp EAX, 11
je Block22
cmp EAX, 12
je Block23
cmp EAX, 13
je Block24
cmp EAX, 14
je Block25
cmp EAX, 15
je Block108
cmp EAX, 16
je Block28
cmp EAX, 17
je Block29
cmp EAX, 18
je Block30
cmp EAX, 19
je Block36
cmp EAX, 20
je Block26
cmp EAX, 21
je Block31
cmp EAX, 22
je Block37
cmp EAX, 23
je Block38
cmp EAX, 24
je Block39
cmp EAX, 25
je Block40
cmp EAX, 26
je Block108
cmp EAX, 27
je Block27
cmp EAX, 28
je Block108
cmp EAX, 29
je Block41
cmp EAX, 30
je Block42
cmp EAX, 31
je Block56
cmp EAX, 32
je Block108
cmp EAX, 33
je Block12
cmp EAX, 34
je Block13
cmp EAX, 35
je Block108
cmp EAX, 36
je Block14
cmp EAX, 37
je Block17
cmp EAX, 38
je Block108
cmp EAX, 39
je Block15
cmp EAX, 40
je Block16
cmp EAX, 41
je Block18
cmp EAX, 42
je Block19
cmp EAX, 43
je Block20
cmp EAX, 44
je Block32
cmp EAX, 45
je Block33
cmp EAX, 46
je Block34
cmp EAX, 47
je Block48
cmp EAX, 48
je Block49
cmp EAX, 49
je Block50
cmp EAX, 50
je Block51
cmp EAX, 51
je Block35
cmp EAX, 52
je Block43
cmp EAX, 53
je Block44
cmp EAX, 54
je Block53
cmp EAX, 55
je Block45
cmp EAX, 56
je Block46
cmp EAX, 57
je Block47
cmp EAX, 58
je Block54
cmp EAX, 59
je Block55
cmp EAX, 60
je Block69
cmp EAX, 61
je Block70
cmp EAX, 62
je Block71
cmp EAX, 63
je Block72
cmp EAX, 64
je Block73
cmp EAX, 65
je Block74
cmp EAX, 66
je Block75
cmp EAX, 67
je Block76
cmp EAX, 68
je Block77
cmp EAX, 69
je Block78
cmp EAX, 70
je Block79
cmp EAX, 71
je Block80
cmp EAX, 72
je Block81
cmp EAX, 73
je Block82
cmp EAX, 74
je Block83
cmp EAX, 75
je Block84
cmp EAX, 76
je Block85
cmp EAX, 77
je Block86
cmp EAX, 78
je Block87
cmp EAX, 79
je Block88
cmp EAX, 80
je Block89
cmp EAX, 81
je Block90
cmp EAX, 82
je Block91
cmp EAX, 83
je Block92
cmp EAX, 84
je Block108
cmp EAX, 85
je Block57
cmp EAX, 86
je Block58
cmp EAX, 87
je Block59
cmp EAX, 88
je Block60
cmp EAX, 89
je Block61
cmp EAX, 90
je Block62
cmp EAX, 91
je Block63
cmp EAX, 92
je Block64
cmp EAX, 93
je Block65
cmp EAX, 94
je Block66
cmp EAX, 95
je Block67
cmp EAX, 96
je Block68
cmp EAX, 97
je Block93
cmp EAX, 98
je Block97
cmp EAX, 99
je Block94
cmp EAX, 100
je Block95
cmp EAX, 101
je Block99
cmp EAX, 102
je Block100
cmp EAX, 103
je Block96
cmp EAX, 104
je Block98
cmp EAX, 105
je Block101
cmp EAX, 106
je Block102
cmp EAX, 107
je Block103
cmp EAX, 108
je Block106
cmp EAX, 109
je Block107
cmp EAX, 110
je Block104
cmp EAX, 111
je Block105
cmp EAX, 112
je Block52


 Block2:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnInventoryOperation
	ret 8

 Block3:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnInventoryGrow
	ret 8

 Block4:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnStatChanged
	ret 8

 Block5:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnTemporaryStatSet
	ret 8

 Block6:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnTemporaryStatReset
	ret 8

 Block7:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnForcedStatSet
	ret 8

 Block8:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnForcedStatReset
	ret 8

 Block9:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnChangeSkillRecordResult
	ret 8

 Block10:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnSkillUseResult
	ret 8

 Block11:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnGivePopularityResult
	ret 8

 Block12:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnCharacterInfo
	ret 8

 Block13:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnPartyResult
	ret 8

 Block14:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnExpedtionResult
	ret 8

 Block15:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnGuildResult
	ret 8

 Block16:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnAllianceResult
	ret 8

 Block17:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnFriendResult
	ret 8

 Block18:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnTownPortal
	ret 8

 Block19:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnOpenGate
	ret 8

 Block20:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnBroadcastMsg
	ret 8

 Block21:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnMessage
	ret 8

 Block22:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnOpenFullClientDownloadLink
	ret 8

 Block23:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnMemoResult
	ret 8

 Block24:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnMapTransferResult
	ret 8

 Block25:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnAntiMacroResult
	ret 8

 Block26:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnQuestClear
	ret 8

 Block27:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSueCharacterResult
	ret 8

 Block28:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnClaimResult
	ret 8

 Block29:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSetClaimSvrAvailableTime
	ret 8

 Block30:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnClaimSvrStatusChanged
	ret 8

 Block31:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnEntrustedShopCheckResult
	ret 8

 Block32:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnIncubatorResult
	ret 8

 Block33:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnShopScannerResult
	ret 8

 Block34:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnShopLinkResult
	ret 8

 Block35:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnCashPetFoodResult
	ret 8

 Block36:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnSetTamingMobInfo
	ret 8

 Block37:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSkillLearnItemResult
	ret 8

 Block38:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnSkillResetItemResult
	ret 8

 Block39:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnGatherItemResult
	ret 8

 Block40:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnSortItemResult
	ret 8

 Block41:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnTradeMoneyLimit
	ret 8

 Block42:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnSetGender
	ret 8

 Block43:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSetWeekEventMessage
	ret 8

 Block44:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnSetPotionDiscountRate
	ret 8

 Block45:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnImitatedNPCResult
	ret 8

 Block46:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnImitatedNPCData
	ret 8

 Block47:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnLimitedNPCDisableInfo
	ret 8

 Block48:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnMarriageRequest
	ret 8

 Block49:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnMarriageResult
	ret 8

 Block50:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnWeddingGiftResult
	ret 8

 Block51:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnNotifyMarriedPartnerMapTransfer
	ret 8

 Block52:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnMacroSysDataInit
	ret 8

 Block53:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnBridleMobCatchFail
	ret 8

 Block54:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnMonsterBookSetCard
	ret 8

 Block55:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnMonsterBookSetCover
	ret 8

 Block56:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnGuildBBSPacket
	ret 8

 Block57:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnMapleTVUseRes
	ret 8

 Block58:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnAvatarMegaphoneRes
	ret 8

 Block59:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSetAvatarMegaphone
	ret 8

 Block60:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnClearAvatarMegaphone
	ret 8

 Block61:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnCancelNameChangeResult
	ret 8

 Block62:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnCancelTransferWorldResult
	ret 8

 Block63:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnDestroyShopResult
	ret 8

 Block64:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFakeGMNotice
	ret 8

 Block65:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSuccessInUsegachaponBox
	ret 8

 Block66:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnNewYearCardRes
	ret 8

 Block67:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnRandomMorphRes
	ret 8

 Block68:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnCancelNameChangebyOther
	ret 8

 Block69:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnHourChanged
	ret 8

 Block70:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnMiniMapOnOff
	ret 8

 Block71:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnConsultAuthkeyUpdate
	ret 8

 Block72:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnClassCompetitionAuthkeyUpdate
	ret 8

 Block73:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnWebBoardAuthkeyUpdate
	ret 8

 Block74:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnSessionValue
	ret 8

 Block75:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnPartyValue
	ret 8

 Block76:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFieldSetVariable
	ret 8

 Block77:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnBonusExpRateChanged
	ret 8

 Block78:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnPotionDiscountRateChanged
	ret 8

 Block79:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnFamilyChartResult
	ret 8

 Block80:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFamilyInfoResult
	ret 8

 Block81:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnFamilyResult
	ret 8

 Block82:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFamilyJoinRequest
	ret 8

 Block83:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnFamilyJoinRequestResult
	ret 8

 Block84:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFamilyJoinAccepted
	ret 8

 Block85:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnFamilyPrivilegeList
	ret 8

 Block86:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFamilyFamousPointIncResult
	ret 8

 Block87:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnFamilyNotifyLoginOrLogout
	ret 8

 Block88:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFamilySetPrivilege
	ret 8

 Block89:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnFamilySummonRequest
	ret 8

 Block90:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnNotifyLevelUp
	ret 8

 Block91:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnNotifyWedding
	ret 8

 Block92:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnNotifyJobChange
	ret 8

 Block93:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSetBuyEquipExt
	ret 8

 Block94:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnScriptProgressMessage
	ret 8

 Block95:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnDataCRCCheckFailed
	ret 8

 Block96:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnShowSlotMessage
	ret 8

 Block97:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnSetPassenserRequest
	ret 8

 Block98:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnWildHunterInfo
	ret 8

 Block99:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnCakePieEventResult
	ret 8

 Block100:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnUpdateGMBoard
	ret 8

 Block101:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnAccountMoreInfo
	ret 8

 Block102:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnFindFirend
	ret 8

 Block103:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnStageChange
	ret 8

 Block104:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnTransferChannel
	ret 8

 Block105:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnDisallowedDeliveryQuestList
	ret 8

 Block106:
	mov eax,dword ptr [esp+8]
	push eax
	call CWvsContext::OnDragonBallBox
	ret 8

 Block107:
	mov edx,dword ptr [esp+8]
	push edx
	call CWvsContext::OnAskWhetherUsePamsSong

 Block108:
	ret 8
}
}
// CWvsContext::GetOnlineFriendIDByGroup
_SUB_EXCEPTION_HANDLER(610410)
__SUB_CLASS_THIS(00610410, __thiscall, 8200,  CWvsContext, void, NakedParam<ZXString<char>>, ZArray<unsigned long>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_610410
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x14],edi
	mov ecx,dword ptr [esp+0x2C]
	mov eax,dword ptr [ecx]
	xor ebp,ebp
	mov dword ptr [esp+0x20],ebp
	cmp eax,ebp
	je Block3

 Block1:
	cmp dword ptr [eax-4],ebp
	je Block3

 Block2:
	call ZArray<unsigned long>::RemoveAll

 Block3:
	xor ebx,ebx
	jmp Block5

 Block5:
	mov esi,dword ptr [edi+0x3788]
	mov ecx,esi
	call CWvsContext::CFriend::IsDataTwisted
	mov esi,dword ptr [esi]
	test esi,esi
	je Block7

 Block6:
	mov esi,dword ptr [esi-4]

 Block7:
	cmp ebx,esi
	jge Block12

 Block8:
	mov edi,dword ptr [edi+0x3788]
	mov esi,dword ptr [edi]
	add esi,ebp
	lea eax,[esi+0x16]
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::Compare
	test eax,eax
	jne Block11

 Block9:
	mov ecx,dword ptr [edi+8]
	mov edx,dword ptr [ecx+ebx*4]
	push edx
	push esi
	call is_online
	add esp,8
	test eax,eax
	je Block11

 Block10:
	mov ecx,dword ptr [esp+0x2C]
	push 0xFFFFFFFF
	call ZArray<unsigned long>::InsertBefore
	mov ecx,dword ptr [esi]
	mov dword ptr [eax],ecx

 Block11:
	mov edi,dword ptr [esp+0x14]
	inc ebx
	add ebp,0x27
	jmp Block5

 Block12:
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test eax,eax
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x10
	ret 8
}
}
// CUISkillInc::GetSkillEntry
__SUB_CLASS_THIS(00452320, __thiscall, 68670,  CUISkillInc, const SKILLENTRY*, long) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0xC4]
	push edi
	lea edi,[ecx+0xC4]
	test eax,eax
	je Block2

 Block1:
	cmp dword ptr [eax-4],0
	jne Block3

 Block2:
	xor eax,eax
	pop edi
	ret 4

 Block3:
	push esi
	mov esi,dword ptr [esp+0xC]
	test esi,esi
	jl Block15

 Block4:
	cmp esi,dword ptr [ecx+0xC8]
	jge Block15

 Block5:
	mov ecx,eax
	test ecx,ecx
	je Block15

 Block6:
	mov eax,dword ptr [ecx-4]
	test eax,eax
	je Block15

 Block7:
	shl eax,4
	lea eax,[eax+ecx-0x10]
	mov dword ptr [esp+0xC],eax
	test eax,eax
	je Block15

 Block8:
	lea ebx,[ebx]

 Block9:
	test esi,esi
	jl Block15

 Block10:
	push eax
	call ZArray<SKILLROOT>::GetAt
	mov ecx,dword ptr [eax+8]
	add esp,4
	test ecx,ecx
	je Block12

 Block11:
	cmp esi,dword ptr [ecx-4]
	jb Block16

 Block12:
	mov eax,ecx
	test eax,eax
	je Block14

 Block13:
	mov eax,dword ptr [eax-4]

 Block14:
	sub esi,eax
	lea eax,[esp+0xC]
	push eax
	mov ecx,edi
	call ZArray<SKILLROOT>::GetNext
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	jne Block9

 Block15:
	pop esi
	xor eax,eax
	pop edi
	ret 4

 Block16:
	mov eax,dword ptr [ecx+esi*8+4]
	pop esi
	pop edi
	ret 4
}
}
// CWvsContext::OnImitatedNPCData
__SUB_CLASS_THIS(005CCDF0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov ecx,dword ptr [TSingleton<CNpcPool>::ms_pInstance]
	push eax
	push 0x54
	call CNpcPool::OnPacket
	ret 4
}
}
// CWvsContext::SetSkillCooltimeOver
_SUB_EXCEPTION_HANDLER(5DB0D0)
__SUB_CLASS_THIS(005DB0D0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DB0D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	cmp dword ptr [esp+0x28],0x4FAE6F
	jne Block5

 Block1:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+8]
	call edx
	mov ecx,eax
	call SecondaryStat::IsRidingSkillVehicle
	test eax,eax
	je Block5

 Block2:
	lea eax,[esp+0x10]
	push eax
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x14]
	mov dword ptr [esp+0x20],0
	test esi,esi
	je Block4

 Block3:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push 0x4FAA8E
	push esi
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esi+0x35]
	push ecx
	add esi,0x33
	push esi
	mov edi,eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	push edx
	push edi
	push 0x4FAA8E
	call get_max_durability_of_vehicle
	add esp,0x14
	push eax
	mov eax,dword ptr [esp+0x30]
	push eax
	push 0x4FAA8E
	lea ecx,[ebx+0x35D4]
	call CTemporaryStatView::UpdatePassively

 Block4:
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZRef<CharacterData>::~ZRef<CharacterData>

 Block5:
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	lea ecx,[ebx+0x3FB4]
	call ZMap<long, long, long>::Insert
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret 8
}
}
// CWvsContext::GetSwallowBuffType
__SUB_CLASS_THIS0(005CCFC0, __thiscall, 8085,  CWvsContext, long) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x3270]
	push edi
	push eax
	lea ecx,[esi+0x3268]
	push ecx
	xor edi,edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block2

 Block1:
	lea eax,[edi+1]
	pop edi
	pop esi
	ret

 Block2:
	mov edx,dword ptr [esi+0x3294]
	push edx
	lea eax,[esi+0x328C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block4

 Block3:
	pop edi
	mov eax,2
	pop esi
	ret

 Block4:
	mov ecx,dword ptr [esi+0x3084]
	push ecx
	lea edx,[esi+0x307C]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block6

 Block5:
	pop edi
	mov eax,3
	pop esi
	ret

 Block6:
	mov eax,dword ptr [esi+0x32B8]
	push eax
	lea ecx,[esi+0x32B0]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block8

 Block7:
	pop edi
	mov eax,4
	pop esi
	ret

 Block8:
	mov edx,dword ptr [esi+0x32DC]
	push edx
	add esi,0x32D4
	push esi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	mov eax,5
	jne Block10

 Block9:
	mov eax,edi

 Block10:
	pop edi
	pop esi
	ret
}
}
// CWvsContext::ITEMMSGINFO::ITEMMSGINFO
_SUB_EXCEPTION_HANDLER(602A80)
__SUB_CLASS_THIS0(00602A80, __thiscall, 11896,  CWvsContext::ITEMMSGINFO, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_602A80
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	xor eax,eax
	xor edi,edi
	mov word ptr [esi],ax
	mov dword ptr [esi+4],1
	mov dword ptr [esi+8],edi
	push 0xFFFFFFFF
	lea ecx,[esi+0xC]
	push offset _S___3
	mov dword ptr [esp+0x20],edi
	mov dword ptr [ecx],edi
	call ZXString<char>::AssignWideStr
	mov dword ptr [esi+0x10],0xEA60
	mov dword ptr [esi+0x14],edi
	mov dword ptr [esi+0x18],edi
	mov dword ptr [esi+0x1C],edi
	mov dword ptr [esi+0x20],edi
	mov dword ptr [esi+0x24],edi
	mov dword ptr [esi+0x28],edi
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::SendTamingMobFoodItemUseRequest
_SUB_EXCEPTION_HANDLER(5D63A0)
__SUB_CLASS_THIS(005D63A0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D63A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov ecx,dword ptr [eax+0x5F8]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0xBE
	jne Block6

 Block1:
	mov edi,dword ptr [esp+0x30]
	mov eax,0x68DB8BAD
	imul edi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xE2
	jne Block6

 Block2:
	cmp dword ptr [esi+0x20B8],0
	jne Block6

 Block3:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block6

 Block4:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block6

 Block5:
	push 0x53
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block6:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 8
}
}
// CUISkillDec::Draw
_SUB_EXCEPTION_HANDLER(4530F0)
__SUB_CLASS_THIS(004530F0, __thiscall, 68558,  CUISkillDec, void, const tagRECT*) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x68]
	sub esp,0x68
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4530F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xD8
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x64],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [ebp+0x5C],esi
	mov eax,dword ptr [ebp+0x70]
	push eax
	call CWnd::Draw
	lea ecx,[ebp+0x58]
	push ecx
	mov ecx,esi
	call CWnd::GetCanvas
	lea edx,[ebp+0x60]
	push 1
	xor edi,edi
	push edx
	mov dword ptr [ebp-4],edi
	call get_basic_font
	add esp,8
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0xAC]
	push eax
	mov byte ptr [ebp-4],1
	call esi
	lea ecx,[ebp-0xAC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	lea edx,[ebp-0x1C]
	push edx
	mov byte ptr [ebp-4],2
	call esi
	lea eax,[ebp-0x1C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	push edi
	push edi
	lea ecx,[ebp-0xAC]
	push ecx
	lea edx,[ebp-0x1C]
	push edx
	push ecx
	mov dword ptr [ebp+0x40],esp
	mov ecx,esp
	push offset _S_UIUIWINDOW2IMGRE__14
	mov byte ptr [ebp-4],3
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],4
	cmp dword ptr [_D_G_RM],edi
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	lea eax,[ebp-0xD4]
	mov byte ptr [ebp-4],3
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x10]
	mov dword ptr [ebp+0x10],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block9

 Block7:
	cmp eax,0x80004002
	je Block9

 Block8:
	push eax
	call _com_issue_error

 Block9:
	cmp word ptr [ebp-0xD4],8
	mov ebx,dword ptr [ZImports::_VariantClear]
	mov byte ptr [ebp-4],7
	jne Block12

 Block10:
	mov eax,dword ptr [ebp-0xCC]
	xor ecx,ecx
	mov word ptr [ebp-0xD4],cx
	cmp eax,edi
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea edx,[ebp-0xD4]
	push edx
	call ebx

 Block13:
	cmp word ptr [ebp-0x1C],8
	mov byte ptr [ebp-4],8
	jne Block16

 Block14:
	xor eax,eax
	mov word ptr [ebp-0x1C],ax
	mov eax,dword ptr [ebp-0x14]
	cmp eax,edi
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea ecx,[ebp-0x1C]
	push ecx
	call ebx

 Block17:
	cmp word ptr [ebp-0xAC],8
	mov byte ptr [ebp-4],9
	jne Block20

 Block18:
	mov eax,dword ptr [ebp-0xA4]
	xor edx,edx
	mov word ptr [ebp-0xAC],dx
	cmp eax,edi
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea eax,[ebp-0xAC]
	push eax
	call ebx

 Block21:
	lea ecx,[ebp-0x3C]
	push ecx
	call esi
	lea edx,[ebp-0x3C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block23

 Block22:
	push eax
	call _com_issue_error

 Block23:
	lea eax,[ebp-0x5C]
	push eax
	mov byte ptr [ebp-4],0xA
	call esi
	lea ecx,[ebp-0x5C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block25

 Block24:
	push eax
	call _com_issue_error

 Block25:
	push edi
	push edi
	lea edx,[ebp-0x3C]
	push edx
	lea eax,[ebp-0x5C]
	push eax
	push ecx
	mov dword ptr [ebp+0x40],esp
	mov ecx,esp
	push offset _S_UIUIWINDOW2IMGRE__13
	mov byte ptr [ebp-4],0xB
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],0xC
	cmp dword ptr [_D_G_RM],edi
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	lea ecx,[ebp-0xC4]
	push ecx
	mov byte ptr [ebp-4],0xB
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xD
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x3C]
	mov dword ptr [ebp+0x3C],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block30

 Block28:
	cmp eax,0x80004002
	je Block30

 Block29:
	push eax
	call _com_issue_error

 Block30:
	cmp word ptr [ebp-0xC4],8
	mov byte ptr [ebp-4],0xF
	jne Block33

 Block31:
	mov eax,dword ptr [ebp-0xBC]
	xor edx,edx
	mov word ptr [ebp-0xC4],dx
	cmp eax,edi
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea eax,[ebp-0xC4]
	push eax
	call ebx

 Block34:
	cmp word ptr [ebp-0x5C],8
	mov byte ptr [ebp-4],0x10
	jne Block37

 Block35:
	mov eax,dword ptr [ebp-0x54]
	xor ecx,ecx
	mov word ptr [ebp-0x5C],cx
	cmp eax,edi
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block38

 Block37:
	lea edx,[ebp-0x5C]
	push edx
	call ebx

 Block38:
	cmp word ptr [ebp-0x3C],8
	mov byte ptr [ebp-4],0x11
	jne Block41

 Block39:
	xor eax,eax
	mov word ptr [ebp-0x3C],ax
	mov eax,dword ptr [ebp-0x34]
	cmp eax,edi
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea ecx,[ebp-0x3C]
	push ecx
	call ebx

 Block42:
	lea edx,[ebp-0x8C]
	push edx
	call esi
	lea eax,[ebp-0x8C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block44

 Block43:
	push eax
	call _com_issue_error

 Block44:
	lea ecx,[ebp-0x6C]
	push ecx
	mov byte ptr [ebp-4],0x12
	call esi
	lea edx,[ebp-0x6C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	push edi
	push edi
	lea eax,[ebp-0x8C]
	push eax
	lea ecx,[ebp-0x6C]
	push ecx
	push ecx
	mov dword ptr [ebp+0x40],esp
	mov ecx,esp
	mov bl,0x13
	push offset _S_UIUIWINDOW2IMGRE__12
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],0x14
	cmp dword ptr [_D_G_RM],edi
	jne Block48

 Block47:
	push 0x80004003
	call _com_issue_error

 Block48:
	lea edx,[ebp-0xE4]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x15
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x24]
	mov dword ptr [ebp+0x24],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block51

 Block49:
	cmp eax,0x80004002
	je Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	mov esi,8
	mov byte ptr [ebp-4],0x17
	cmp word ptr [ebp-0xE4],si
	jne Block54

 Block52:
	xor eax,eax
	mov word ptr [ebp-0xE4],ax
	mov eax,dword ptr [ebp-0xDC]
	cmp eax,edi
	je Block55

 Block53:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block54:
	lea ecx,[ebp-0xE4]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block55:
	mov byte ptr [ebp-4],0x18
	cmp word ptr [ebp-0x6C],si
	jne Block58

 Block56:
	mov eax,dword ptr [ebp-0x64]
	xor edx,edx
	mov word ptr [ebp-0x6C],dx
	cmp eax,edi
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea eax,[ebp-0x6C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block59:
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp-0x8C],si
	jne Block62

 Block60:
	mov eax,dword ptr [ebp-0x84]
	xor ecx,ecx
	mov word ptr [ebp-0x8C],cx
	cmp eax,edi
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea edx,[ebp-0x8C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block63:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[ebp-0xB4]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0xB0]
	mov dword ptr [ebp+0x40],ebx
	cmp eax,edi
	je Block68

 Block64:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block67

 Block65:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block67

 Block66:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block67:
	mov dword ptr [ebp-0xB0],0
	xor edi,edi

 Block68:
	mov ecx,dword ptr [ebx+0x3D]
	push ecx
	lea esi,[ebx+0x39]
	push esi
	call _ZtlSecureFuseHelper<short>::call
	mov edx,dword ptr [ebp+0x5C]
	mov eax,dword ptr [edx+0x98]
	add esp,8
	cmp dword ptr [eax+0x50],edi
	je Block154

 Block69:
	mov edi,dword ptr [eax+0x44]
	mov eax,dword ptr [ebx+0x3D]
	push eax
	push esi
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esp,8
	cmp eax,3
	je Block100

 Block70:
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x16
	je Block100

 Block71:
	cmp ecx,0x7D1
	je Block100

 Block72:
	mov ebx,dword ptr [ebp+0x5C]
	cmp edi,dword ptr [ebx+0xDC]
	jge Block101

 Block73:
	push 0
	push 0
	push offset _S_UIUIWINDOW2IMGRE__11
	push ecx
	mov ecx,dword ptr [ebp+0x58]
	mov eax,esp
	mov dword ptr [ebp+0x54],esp
	mov dword ptr [eax],ecx
	test ecx,ecx
	je Block75

 Block74:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+4]
	push ecx
	call eax

 Block75:
	lea ecx,[ebx+0xE0]
	call CLayoutMan::CopyToCanvas_1
	mov eax,dword ptr [ebx+0xDC]
	cmp eax,1
	jne Block83

 Block76:
	push edi
	mov ecx,ebx
	call CUISkillDec::GetExcessSP
	mov esi,eax
	test esi,esi
	jg Block78

 Block77:
	xor esi,esi

 Block78:
	push offset _D_VTMISSING
	lea ecx,[ebp+0x14]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[ebp]
	mov byte ptr [ebp-4],0x1A
	call Ztl_variant_t::_ctor_1
	mov eax,0x20
	mov byte ptr [ebp-4],0x1B
	call __chkstk
	mov edi,esp
	push offset _D_VTMISSING
	lea ecx,[ebp+0x28]
	call Ztl_variant_t::_ctor_1
	mov eax,0x20
	mov byte ptr [ebp-4],0x1C
	call __chkstk
	mov eax,dword ptr [ebp+0x60]
	mov ebx,esp
	lea ecx,[ebp+0x14]
	push ecx
	lea edx,[ebp]
	push edx
	push eax
	push 0xA
	push edi
	push esi
	call _itoa
	add esp,8
	mov dword ptr [ebp+0x54],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	push 0x102
	lea ecx,[ebp+0x28]
	push ecx
	push 0xA
	push ebx
	push esi
	mov byte ptr [ebp-4],0x1D
	call __itow
	add esp,8
	mov dword ptr [ebp+0x50],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x60]
	mov byte ptr [ebp-4],0x1E
	test ecx,ecx
	jne Block80

 Block79:
	push 0x80004003
	call _com_issue_error

 Block80:
	mov byte ptr [ebp-4],0x1D
	call IWzFont::CalcTextWidth
	mov ecx,dword ptr [ebp+0x58]
	test ecx,ecx
	jne Block82

 Block81:
	push 0x80004003
	call _com_issue_error

 Block82:
	mov byte ptr [ebp-4],0x1C
	jmp Block99

 Block83:
	cmp eax,2
	jne Block91

 Block84:
	push 1
	mov ecx,ebx
	call CUISkillDec::GetExcessSP
	push 0
	mov ecx,ebx
	mov esi,eax
	call CUISkillDec::GetExcessSP
	add esi,eax
	test esi,esi
	jg Block86

 Block85:
	xor esi,esi

 Block86:
	push offset _D_VTMISSING
	lea ecx,[ebp+0x14]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[ebp]
	mov byte ptr [ebp-4],0x1F
	call Ztl_variant_t::_ctor_1
	mov eax,0x20
	mov byte ptr [ebp-4],0x20
	call __chkstk
	mov edi,esp
	push offset _D_VTMISSING
	lea ecx,[ebp+0x28]
	call Ztl_variant_t::_ctor_1
	mov eax,0x20
	mov byte ptr [ebp-4],0x21
	call __chkstk
	mov edx,dword ptr [ebp+0x60]
	mov ebx,esp
	lea eax,[ebp+0x14]
	push eax
	lea ecx,[ebp]
	push ecx
	push edx
	push edi
	push esi
	call _Int2Str
	add esp,4
	mov ecx,esp
	mov dword ptr [ebp+0x54],esp
	push eax
	call Ztl_bstr_t::_ctor_1
	push 0x102
	lea eax,[ebp+0x28]
	push eax
	push ebx
	push esi
	mov byte ptr [ebp-4],0x22
	call _Int2StrW
	add esp,4
	mov ecx,esp
	mov dword ptr [ebp+0x50],esp
	push eax
	call Ztl_bstr_t::_ctor_2
	mov ecx,dword ptr [ebp+0x60]
	mov byte ptr [ebp-4],0x23
	test ecx,ecx
	jne Block88

 Block87:
	push 0x80004003
	call _com_issue_error

 Block88:
	mov byte ptr [ebp-4],0x22
	call IWzFont::CalcTextWidth
	mov ecx,dword ptr [ebp+0x58]
	test ecx,ecx
	jne Block90

 Block89:
	push 0x80004003
	call _com_issue_error

 Block90:
	mov byte ptr [ebp-4],0x21
	jmp Block99

 Block91:
	cmp eax,3
	jne Block101

 Block92:
	push 2
	mov ecx,ebx
	call CUISkillDec::GetExcessSP
	push 1
	mov ecx,ebx
	mov esi,eax
	call CUISkillDec::GetExcessSP
	push 0
	mov ecx,ebx
	lea edi,[esi+eax]
	call CUISkillDec::GetExcessSP
	mov esi,eax
	add esi,edi
	test esi,esi
	jg Block94

 Block93:
	xor esi,esi

 Block94:
	push offset _D_VTMISSING
	lea ecx,[ebp+0x14]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[ebp]
	mov byte ptr [ebp-4],0x24
	call Ztl_variant_t::_ctor_1
	mov eax,0x20
	mov byte ptr [ebp-4],0x25
	call __chkstk
	mov edi,esp
	push offset _D_VTMISSING
	lea ecx,[ebp+0x28]
	call Ztl_variant_t::_ctor_1
	mov eax,0x20
	mov byte ptr [ebp-4],0x26
	call __chkstk
	mov edx,dword ptr [ebp+0x60]
	mov ebx,esp
	lea eax,[ebp+0x14]
	push eax
	lea ecx,[ebp]
	push ecx
	push edx
	push edi
	push esi
	call _Int2Str
	add esp,4
	mov ecx,esp
	mov dword ptr [ebp+0x54],esp
	push eax
	call Ztl_bstr_t::_ctor_1
	push 0x102
	lea eax,[ebp+0x28]
	push eax
	push ebx
	push esi
	mov byte ptr [ebp-4],0x27
	call _Int2StrW
	add esp,4
	mov ecx,esp
	mov dword ptr [ebp+0x50],esp
	push eax
	call Ztl_bstr_t::_ctor_2
	mov ecx,dword ptr [ebp+0x60]
	mov byte ptr [ebp-4],0x28
	test ecx,ecx
	jne Block96

 Block95:
	push 0x80004003
	call _com_issue_error

 Block96:
	mov byte ptr [ebp-4],0x27
	call IWzFont::CalcTextWidth
	mov ecx,dword ptr [ebp+0x58]
	test ecx,ecx
	jne Block98

 Block97:
	push 0x80004003
	call _com_issue_error

 Block98:
	mov byte ptr [ebp-4],0x26

 Block99:
	mov edx,0x94
	sub edx,eax
	push edx
	call IWzCanvas::DrawTextA
	lea ecx,[ebp+0x28]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[ebp]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[ebp+0x14]
	mov byte ptr [ebp-4],0x19
	call Ztl_variant_t::~Ztl_variant_t

 Block100:
	mov ebx,dword ptr [ebp+0x5C]

 Block101:
	mov eax,dword ptr [ebx+0xCC]
	test eax,eax
	je Block154

 Block102:
	cmp dword ptr [eax-4],0
	je Block154

 Block103:
	mov eax,dword ptr [ebx+0xA0]
	mov eax,dword ptr [eax+0x38]
	add ebx,0xA8
	mov dword ptr [ebp+0x50],0
	mov dword ptr [ebp+0x4C],eax
	mov edi,0x74
	mov dword ptr [ebp+0x54],ebx

 Block104:
	mov eax,dword ptr [ebp+0x4C]
	mov ecx,dword ptr [ebp+0x5C]
	cmp eax,dword ptr [ecx+0xD0]
	jge Block154

 Block105:
	mov edx,eax
	push edx
	call CUISkillDec::GetSkillEntry
	mov dword ptr [ebp+0x48],eax
	mov eax,dword ptr [ebp+0x54]
	mov eax,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	lea ecx,[eax+4]
	mov eax,dword ptr [edx+0x20]
	call eax
	mov ecx,3
	mov ebx,eax
	mov word ptr [ebp-0x9C],cx
	mov dword ptr [ebp-0x94],0xFF
	mov byte ptr [ebp-4],0x29
	lea eax,[ebp+0x10]
	test ebx,ebx
	je Block107

 Block106:
	lea eax,[ebp+0x3C]

 Block107:
	mov ecx,dword ptr [ebp+0x58]
	mov eax,dword ptr [eax]
	test ecx,ecx
	je Block5

 Block108:
	lea edx,[ebp-0x9C]
	push edx
	push eax
	lea eax,[edi-0x15]
	push eax
	push 9
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x9C],8
	mov byte ptr [ebp-4],0x19
	jne Block111

 Block109:
	mov eax,dword ptr [ebp-0x94]
	xor ecx,ecx
	mov word ptr [ebp-0x9C],cx
	test eax,eax
	je Block112

 Block110:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block112

 Block111:
	lea edx,[ebp-0x9C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block112:
	mov eax,dword ptr [ebp+0x48]
	add eax,4
	push eax
	lea ecx,[ebp+0x44]
	mov dword ptr [ebp+0x44],0
	call ZXString<char>::op_assign
	push 0x68
	push ecx
	mov ecx,dword ptr [ebp+0x60]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [ebp+0x60]
	mov byte ptr [ebp-4],0x2A
	mov dword ptr [ebp+0x38],esp
	test eax,eax
	je Block114

 Block113:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block114:
	lea ecx,[ebp+0x44]
	push ecx
	call format_string_1
	mov esi,dword ptr [ZImports::_VariantInit]
	add esp,0xC
	lea edx,[ebp-0x4C]
	push edx
	call esi
	lea eax,[ebp-0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block115:
	lea ecx,[ebp-0x7C]
	push ecx
	mov byte ptr [ebp-4],0x2B
	call esi
	lea edx,[ebp-0x7C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block116:
	mov edx,dword ptr [ebp+0x58]
	lea eax,[ebp-0x4C]
	push eax
	mov eax,dword ptr [ebp+0x44]
	lea ecx,[ebp-0x7C]
	push ecx
	push edx
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],0x2C
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x60]
	mov byte ptr [ebp-4],0x2D
	test ecx,ecx
	je Block5

 Block117:
	lea edx,[edi-0x12]
	push edx
	push 0x31
	mov byte ptr [ebp-4],0x2C
	call IWzFont::DrawTextA
	cmp word ptr [ebp-0x7C],8
	mov byte ptr [ebp-4],0x2B
	jne Block120

 Block118:
	xor eax,eax
	mov word ptr [ebp-0x7C],ax
	mov eax,dword ptr [ebp-0x74]
	test eax,eax
	je Block121

 Block119:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block121

 Block120:
	lea ecx,[ebp-0x7C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block121:
	cmp word ptr [ebp-0x4C],8
	mov byte ptr [ebp-4],0x2A
	jne Block124

 Block122:
	mov eax,dword ptr [ebp-0x44]
	xor edx,edx
	mov word ptr [ebp-0x4C],dx
	test eax,eax
	je Block125

 Block123:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block125

 Block124:
	lea eax,[ebp-0x4C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block125:
	lea ecx,[ebp+0x14]
	push ecx
	call esi
	lea edx,[ebp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block126:
	lea eax,[ebp-0x2C]
	push eax
	mov byte ptr [ebp-4],0x2E
	call esi
	lea ecx,[ebp-0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block127:
	mov eax,0x20
	mov byte ptr [ebp-4],0x2F
	call __chkstk
	mov ecx,dword ptr [ebp+0x58]
	mov esi,esp
	lea edx,[ebp+0x14]
	push edx
	lea eax,[ebp-0x2C]
	push eax
	mov eax,dword ptr [ebp+0x48]
	push ecx
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x48]
	push edx
	mov edx,dword ptr [ebp+0x40]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	call CSkillInfo::GetSkillLevel_0
	push 0xA
	push esi
	push eax
	call __itow
	add esp,8
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x60]
	mov byte ptr [ebp-4],0x30
	test ecx,ecx
	je Block5

 Block128:
	push edi
	push 0x31
	mov byte ptr [ebp-4],0x2F
	call IWzFont::DrawTextA
	mov esi,8
	mov byte ptr [ebp-4],0x2E
	cmp word ptr [ebp-0x2C],si
	jne Block131

 Block129:
	xor eax,eax
	mov word ptr [ebp-0x2C],ax
	mov eax,dword ptr [ebp-0x24]
	test eax,eax
	je Block132

 Block130:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block132

 Block131:
	lea ecx,[ebp-0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block132:
	mov byte ptr [ebp-4],0x2A
	cmp word ptr [ebp+0x14],si
	jne Block135

 Block133:
	mov eax,dword ptr [ebp+0x1C]
	xor edx,edx
	mov word ptr [ebp+0x14],dx
	test eax,eax
	je Block136

 Block134:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block136

 Block135:
	lea eax,[ebp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block136:
	mov ecx,dword ptr [ebp+0x48]
	mov esi,dword ptr [ecx+ebx*4+0x258]
	mov dword ptr [ebp+0x38],esi
	test esi,esi
	je Block138

 Block137:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+4]
	push esi
	call eax

 Block138:
	mov ecx,3
	mov word ptr [ebp],cx
	mov dword ptr [ebp+8],0xFF
	mov ebx,dword ptr [ebp+0x58]
	lea edx,[ebp]
	push edx
	push esi
	lea eax,[edi-0x13]
	push eax
	push 0xB
	mov ecx,ebx
	mov byte ptr [ebp-4],0x32
	call IWzCanvas::Copy
	cmp word ptr [ebp],8
	mov byte ptr [ebp-4],0x31
	jne Block141

 Block139:
	mov eax,dword ptr [ebp+8]
	xor ecx,ecx
	mov word ptr [ebp],cx
	test eax,eax
	je Block142

 Block140:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block142

 Block141:
	lea edx,[ebp]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block142:
	cmp dword ptr [ebp+0x50],3
	jge Block149

 Block143:
	mov eax,dword ptr [ebp+0x5C]
	mov eax,dword ptr [eax+0xD0]
	dec eax
	cmp dword ptr [ebp+0x4C],eax
	jge Block149

 Block144:
	lea ecx,[ebp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block145:
	mov ecx,dword ptr [ebp+0x24]
	lea eax,[ebp+0x28]
	push eax
	push ecx
	lea edx,[edi+0x10]
	push edx
	push 9
	mov ecx,ebx
	mov byte ptr [ebp-4],0x33
	call IWzCanvas::Copy
	cmp word ptr [ebp+0x28],8
	mov byte ptr [ebp-4],0x31
	jne Block148

 Block146:
	xor eax,eax
	mov word ptr [ebp+0x28],ax
	mov eax,dword ptr [ebp+0x30]
	test eax,eax
	je Block149

 Block147:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block149

 Block148:
	lea ecx,[ebp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block149:
	mov byte ptr [ebp-4],0x2A
	test esi,esi
	je Block151

 Block150:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block151:
	mov eax,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0x19
	test eax,eax
	je Block153

 Block152:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block153:
	add dword ptr [ebp+0x54],8
	mov eax,1
	add dword ptr [ebp+0x50],eax
	add dword ptr [ebp+0x4C],eax
	add edi,0x28
	cmp edi,0x114
	jl Block104

 Block154:
	mov eax,dword ptr [ebp+0x24]
	mov byte ptr [ebp-4],0x11
	test eax,eax
	je Block156

 Block155:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block156:
	mov eax,dword ptr [ebp+0x3C]
	mov byte ptr [ebp-4],9
	test eax,eax
	je Block158

 Block157:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block158:
	mov eax,dword ptr [ebp+0x10]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block160

 Block159:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block160:
	mov eax,dword ptr [ebp+0x60]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block162

 Block161:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block162:
	mov eax,dword ptr [ebp+0x58]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block164

 Block163:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block164:
	lea esp,[ebp-0xF4]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x64]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x68
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::ProcessBasicUIKey
__SUB_CLASS_THIS(005E8500, __thiscall, 8122,  CWvsContext, int32_t, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	push ebp
	mov ebp,ecx
	test eax,eax
	je Block3

 Block1:
	cmp dword ptr [eax+0x4690],0
	je Block3

 Block2:
	xor eax,eax
	pop ebp
	ret 8

 Block3:
	mov edx,dword ptr [esp+8]
	push ebx
	mov ebx,dword ptr [esp+0x10]
	cmp edx,0xD
	jne Block9

 Block4:
	test ebx,ebx
	js Block9

 Block5:
	mov ecx,1

 Block6:
	xor eax,eax

 Block7:
	cmp dword ptr [ebp+0x3850],0
	je Block12

 Block8:
	pop ebx
	xor eax,eax
	pop ebp
	ret 8

 Block9:
	xor ecx,ecx
	cmp edx,0xBF
	jne Block6

 Block10:
	test ebx,ebx
	js Block6

 Block11:
	lea eax,[ecx+1]
	jmp Block7

 Block12:
	test ecx,ecx
	jne Block33

 Block13:
	test eax,eax
	jne Block33

 Block14:
	push esi
	mov esi,ebx
	shr esi,0x10
	and esi,0xFF
	test ebx,ebx
	js Block28

 Block15:
	cmp edx,9
	je Block27

 Block16:
	cmp edx,0x1B
	jne Block28

 Block17:
	mov ecx,ebp
	call CWvsContext::GetTopStackForTab
	push eax
	mov ecx,ebp
	call CWvsContext::TryCloseUI
	test eax,eax
	jne Block20

 Block18:
	cmp dword ptr [TSingleton<CBookDlg>::ms_pInstance],eax
	je Block21

 Block19:
	mov ecx,ebp
	call CWvsContext::CloseBook

 Block20:
	pop esi
	pop ebx
	mov eax,1
	pop ebp
	ret 8

 Block21:
	cmp dword ptr [TSingleton<CUIShopScanner>::ms_pInstance],0
	je Block23

 Block22:
	mov ecx,ebp
	call CWvsContext::CloseShopScanner
	pop esi
	pop ebx
	mov eax,1
	pop ebp
	ret 8

 Block23:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test ecx,ecx
	je Block26

 Block24:
	cmp dword ptr [ecx+0x4690],0
	je Block26

 Block25:
	call CUserLocal::OnKeyDownSkillEnd

 Block26:
	mov ecx,ebp
	call CWvsContext::UI_Menu
	pop esi
	pop ebx
	mov eax,1
	pop ebp
	ret 8

 Block27:
	push edi
	mov ecx,ebp
	call CWvsContext::GetTopStackForTab
	mov edi,eax
	call TryToggleTab
	pop edi
	test eax,eax
	jne Block20

 Block28:
	mov ecx,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	push esi
	call CFuncKeyMappedMan::FuncKeyMapped
	mov ecx,dword ptr [eax+1]
	test ecx,ecx
	jl Block32

 Block29:
	cmp ecx,0x1E
	jge Block32

 Block30:
	cmp byte ptr [eax],4
	jne Block32

 Block31:
	push ebx
	mov ecx,ebp
	call CWvsContext::UseFuncKeyMapped
	neg eax
	pop esi
	sbb eax,eax
	pop ebx
	neg eax
	pop ebp
	ret 8

 Block32:
	pop esi
	pop ebx
	xor eax,eax
	pop ebp
	ret 8

 Block33:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	test ecx,ecx
	je Block35

 Block34:
	push 0
	call CUIStatusBar::StartChat

 Block35:
	pop ebx
	mov eax,1
	pop ebp
	ret 8
}
}
// CWvsContext::OnAskWhetherUsePamsSong
__SUB_CLASS_THIS(005DB6D0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	call CWvsContext::AskWhetherUsePamsSong
	ret 4
}
}
// CWvsContext::IssueConnect
_SUB_EXCEPTION_HANDLER(5E0300)
__SUB_CLASS_THIS(005E0300, __thiscall, 8083,  CWvsContext, void, const ZInetAddr*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E0300
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	mov ecx,esi
	call CClientSocket::Close
	xor edi,edi
	int 3// TODO: 	mov dword ptr [esp+0x10],offset ZList<ZInetAddr>::`vftable'
	mov dword ptr [esp+0x18],edi
	mov dword ptr [esp+0x1C],edi
	mov dword ptr [esp+0x20],edi
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x34],edi
	mov dword ptr [esp+0x28],edi
	call ZList<ZInetAddr>::AddTail_
	mov ecx,dword ptr [esp+0x3C]
	mov edx,dword ptr [ecx+4]
	movzx ebx,word ptr [ecx+2]
	xor ecx,ecx
	mov dword ptr [eax],ecx
	mov dword ptr [eax+8],ecx
	mov dword ptr [eax+0xC],ecx
	mov ecx,2
	mov dword ptr [eax+4],edx
	lea edx,[esp+0x10]
	mov word ptr [eax],cx
	push edx
	mov ecx,esi
	mov word ptr [eax+2],bx
	call CClientSocket::Connect_1
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	int 3// TODO: 	mov dword ptr [esp+0x10],offset ZList<ZInetAddr>::`vftable'
	call ZList<ZInetAddr>::RemoveAll
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x28
	ret 4
}
}
// GUILDDATA::SKILLENTRY::~SKILLENTRY
__SUB_CLASS_THIS0(000F6D90, __thiscall, 45410,  GUILDDATA::SKILLENTRY, void) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0xA]
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	pop ecx

 Block2:
	ret
}
}
// CWvsContext::CanSendExclRequest
__SUB_CLASS_THIS(0009C980, __thiscall, 8231,  CWvsContext, int32_t, long, int32_t) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block5

 Block1:
	cmp dword ptr [esp+0xC],0
	jne Block3

 Block2:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block5

 Block3:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,dword ptr [esp+8]
	jl Block5

 Block4:
	mov eax,1
	pop esi
	ret 8

 Block5:
	xor eax,eax
	pop esi
	ret 8
}
}
// CUIStatChangeConfirm::CreateStatChangeDlg
__SUB_CLASS_THIS0(005CC7B0, __thiscall, 68530,  CUIStatChangeConfirm, void) {
__asm {

 Block0:
	push 1
	push 0
	push 1
	push offset _S_UIUIWINDOW2IMGRE__2
	call CDialog::CreateDlg_2
	ret
}
}
// CWvsContext::LoadPackageOriginalSN
_SUB_EXCEPTION_HANDLER(5F6F00)
__SUB_CLASS_THIS(005F6F00, __thiscall, 8219,  CWvsContext, int32_t, const ZMap<long,long,long>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F6F00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	lea ebx,[ecx+0x3F80]
	xor esi,esi
	mov ecx,ebx
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x18],esi
	call ZArray<ZRef<CS_COMMODITY>>::GetCount
	test eax,eax
	jbe Block20

 Block1:
	mov eax,dword ptr [ebx]
	add esi,esi
	add esi,esi
	add esi,esi
	add eax,esi
	mov eax,dword ptr [eax+4]
	lea ecx,[eax+0x10]
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x38E
	jne Block19

 Block2:
	mov eax,dword ptr [ebx]
	add eax,esi
	mov esi,dword ptr [eax+4]
	xor edi,edi
	mov dword ptr [esp+0x28],esi
	cmp esi,edi
	je Block4

 Block3:
	lea ecx,[esi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block4:
	lea ebp,[esi+0x6C]
	mov ecx,ebp
	mov dword ptr [esp+0x34],edi
	call ZArray<long>::RemoveAll

 Block5:
	mov eax,dword ptr [esi+0x68]
	test eax,eax
	je Block10

 Block6:
	cmp edi,dword ptr [eax-4]
	jae Block9

 Block7:
	mov edx,eax
	mov eax,dword ptr [edx+edi*4]
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [esp+0x40]
	lea edx,[esp+0x20]
	push edx
	mov dword ptr [esp+0x1C],0
	mov dword ptr [esp+0x24],eax
	call ZMap<long, long, long>::GetAt
	mov ebx,dword ptr [esp+0x14]
	test ebx,ebx
	je Block22

 Block8:
	push 0xFFFFFFFF
	mov ecx,ebp
	call ZArray<long>::InsertBefore
	mov dword ptr [eax],ebx
	mov ebx,dword ptr [esp+0x20]
	inc edi
	jmp Block5

 Block9:
	test eax,eax
	jne Block11

 Block10:
	xor eax,eax
	jmp Block12

 Block11:
	mov eax,dword ptr [eax-4]

 Block12:
	mov ebp,dword ptr [ebp]
	test ebp,ebp
	je Block14

 Block13:
	mov ebp,dword ptr [ebp-4]

 Block14:
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebp
	jne Block26

 Block15:
	test esi,esi
	je Block19

 Block16:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block18

 Block17:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block18:
	mov dword ptr [esp+0x28],0

 Block19:
	mov esi,dword ptr [esp+0x18]
	inc esi
	mov ecx,ebx
	mov dword ptr [esp+0x18],esi
	call ZArray<ZRef<CS_COMMODITY>>::GetCount
	cmp esi,eax
	jb Block1

 Block20:
	mov eax,1

 Block21:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 4

 Block22:
	mov dword ptr [esp+0x34],0xFFFFFFFF

 Block23:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block25

 Block24:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block25:
	xor eax,eax
	jmp Block21

 Block26:
	test esi,esi
	je Block25

 Block27:
	jmp Block23
}
}
// CWvsContext::UI_CloseRevive
__SUB_CLASS_THIS0(005CCCD0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	mov dword ptr [ecx+0x3D80],0
	mov ecx,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	test ecx,ecx
	je Block3

 Block1:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	test eax,eax
	je Block3

 Block2:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block3:
	ret
}
}
// CWvsContext::SendMobSummonItemUseRequest
_SUB_EXCEPTION_HANDLER(5DE580)
__SUB_CLASS_THIS(005DE580, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DE580
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ebx,dword ptr [esp+0x34]
	push 1
	push ebx
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block19

 Block1:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	push 1
	call CUserLocal::CheckRidingVehicle
	test eax,eax
	jne Block19

 Block2:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block5

 Block3:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block5

 Block4:
	mov eax,edi
	jmp Block6

 Block5:
	xor eax,eax

 Block6:
	lea ecx,[eax+0x16C]
	call TSecType<unsigned long>::GetData
	lea edi,[esi+0x2038]
	mov ecx,edi
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block11

 Block7:
	cmp dword ptr [esi+0x209C],0
	jne Block11

 Block8:
	call get_field
	test byte ptr [eax+0x178],4
	je Block11

 Block9:
	mov dword ptr [esp+0x34],ebx
	call get_field
	push 0
	lea ecx,[esp+0x38]
	push ecx
	lea ecx,[eax+0xD54]
	call ZList<long>::Find
	test eax,eax
	jne Block11

 Block10:
	push eax
	push eax
	push eax
	push eax
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0x121
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8

 Block11:
	mov ecx,edi
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block15

 Block12:
	cmp dword ptr [esi+0x209C],0
	jne Block15

 Block13:
	push ebx
	call is_immediate_mobsummon_item
	add esp,4
	test eax,eax
	jne Block15

 Block14:
	push eax
	push 1
	push eax
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x48],esp
	push 0x124
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	jne Block19

 Block15:
	cmp dword ptr [esi+0x20B8],0
	jne Block19

 Block16:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block19

 Block17:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block19

 Block18:
	push 0x51
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x28],0
	call get_update_time
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x30]
	push edx
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	push ebx
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x10]
	push eax
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x14]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block19:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8
}
}
// CWvsContext::GetQuestTimer
_SUB_EXCEPTION_HANDLER(5F3720)
__SUB_CLASS_THIS(005F3720, __thiscall, 8300,  CWvsContext, ZRef<CUIQuestTimer>*, ZRef<CUIQuestTimer>*, uint16_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F3720
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x14],0
	mov eax,dword ptr [ecx+0x3F54]
	mov dword ptr [esp+0x14],eax
	test eax,eax
	je Block10

 Block1:
	mov di,word ptr [esp+0x34]
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	mov ebp,dword ptr [ZImports::_InterlockedDecrement]

 Block2:
	mov esi,dword ptr [eax+4]
	mov dword ptr [esp+0x1C],esi
	test esi,esi
	je Block4

 Block3:
	lea eax,[esi+0xC]
	push eax
	call ebx

 Block4:
	mov eax,dword ptr [esi+0xB34]
	movzx eax,word ptr [eax]
	cmp ax,di
	jne Block6

 Block5:
	mov ecx,dword ptr [esp+0x38]
	cmp dword ptr [esi+0xB2C],ecx
	je Block12

 Block6:
	lea edx,[esp+0x14]
	push edx
	call ZList<ZRef<CUIQuestTimer>>::GetNext
	add esi,8
	add esp,4
	lea eax,[esi+4]
	push eax
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ebp
	test eax,eax
	jne Block9

 Block7:
	lea ecx,[esi+4]
	push ecx
	call ebx
	test esi,esi
	je Block9

 Block8:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block9:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x1C],0
	test eax,eax
	jne Block2

 Block10:
	mov eax,dword ptr [esp+0x30]
	mov dword ptr [eax+4],0

 Block11:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 0xC

 Block12:
	mov edi,dword ptr [esp+0x30]
	mov dword ptr [edi+4],esi
	add esi,0xC
	push esi
	call ebx
	push 0
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ZRef<CUIQuestTimer>::_ReleaseRaw
	mov eax,edi
	jmp Block11
}
}
// CWvsContext::CheckNormalAutoStartQuest
_SUB_EXCEPTION_HANDLER(5E6C50)
__SUB_CLASS_THIS(005E6C50, __thiscall, 8318,  CWvsContext, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6C50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	mov dword ptr [esp+8],0
	lea eax,[esp+0xC]
	push eax
	mov dword ptr [esp+0x1C],0
	call CQuestMan::GetNormalAutoStartQuest
	push eax
	lea ecx,[esp+0xC]
	mov byte ptr [esp+0x1C],1
	call ZArray<unsigned short>::operator=
	lea ecx,[esp+0xC]
	mov byte ptr [esp+0x18],0
	call ZArray<unsigned short>::RemoveAll
	mov eax,dword ptr [esp+8]
	test eax,eax
	je Block2

 Block1:
	cmp dword ptr [eax-4],0
	jne Block3

 Block2:
	lea ecx,[esp+8]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll
	xor eax,eax
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 4

 Block3:
	mov ecx,dword ptr [esp+0x20]
	push ecx
	lea edx,[esp+0xC]
	push edx
	mov ecx,esi
	call CWvsContext::UpdateAutoStartQuestPreStartList
	lea ecx,[esp+8]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 4
}
}
// CTemporaryStatView::FindIcon
__SUB_CLASS_THIS(0035CEF0, __thiscall, 5669,  CTemporaryStatView, void, const tagPOINT&, long&, long&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+0xC]
	sub esp,8
	push ebp
	mov ebp,dword ptr [esp+0x14]
	push esi
	mov dword ptr [ebp],0xFFFFFFFF
	mov esi,ecx
	mov dword ptr [eax],0
	mov eax,dword ptr [esi+0xC]
	test eax,eax
	je Block8

 Block1:
	push ebx
	mov ebx,dword ptr [esp+0x18]
	mov ecx,dword ptr [ebx+4]
	cmp ecx,0x17
	jl Block7

 Block2:
	cmp ecx,0x37
	jge Block7

 Block3:
	shl eax,5
	push edi
	mov edi,eax
	call get_screen_width
	mov ecx,eax
	mov eax,dword ptr [ebx]
	add eax,edi
	sub eax,ecx
	add eax,3
	js Block6

 Block4:
	cmp eax,edi
	jge Block6

 Block5:
	cdq
	and edx,0x1F
	add eax,edx
	sar eax,5
	push eax
	lea ecx,[esi+4]
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::FindIndex
	push eax
	lea ecx,[esp+0x14]
	call ZRef<CTemporaryStatView::TEMPORARY_STAT>::_ctor_copy
	mov eax,dword ptr [esp+0x14]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr [ebp],edx
	mov eax,dword ptr [eax+0x20]
	mov dword ptr [ecx],eax
	lea ecx,[esp+0x10]
	call ZRef<CTemporaryStatView::TEMPORARY_STAT>::~ZRef<CTemporaryStatView::TEMPORARY_STAT>

 Block6:
	pop edi

 Block7:
	pop ebx

 Block8:
	pop esi
	pop ebp
	add esp,8
	ret 0xC
}
}
// WORLDMAPQUESTDEMANDITEM::~WORLDMAPQUESTDEMANDITEM
_SUB_EXCEPTION_HANDLER(5D37A0)
__SUB_CLASS_THIS0(005D37A0, __thiscall, 8036,  WORLDMAPQUESTDEMANDITEM, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D37A0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+8],ecx
	lea esi,[ecx+8]
	mov ecx,esi
	mov dword ptr [esp+0x14],0
	call ZList<unsigned long>::RemoveAll
	mov ecx,esi
	mov dword ptr [esp+0x14],0xFFFFFFFF
	int 3// TODO: 	mov dword ptr [esi],offset ZList<unsigned long>::`vftable'
	call ZList<unsigned long>::RemoveAll
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::OnCakePieEventResult
__SUB_CLASS_THIS(005D0040, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,dword ptr [esp+8]
	mov ecx,esi
	call CInPacket::Decode1
	test al,al
	je Block4

 Block1:
	push ebx
	push ebp
	push edi

 Block2:
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov edi,eax
	call CInPacket::Decode4
	mov ecx,esi
	mov ebx,eax
	call CInPacket::Decode1
	mov ecx,esi
	movzx ebp,al
	call CInPacket::Decode1
	movzx eax,al
	mov ecx,esi
	mov dword ptr [esp+0x14],eax
	call CInPacket::Decode1
	mov ecx,dword ptr [esp+0x14]
	movzx eax,al
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CCakePieEvent>::ms_pInstance]
	push ebp
	push ebx
	push edi
	call CCakePieEvent::SetEventItemInfo
	mov ecx,esi
	call CInPacket::Decode1
	test al,al
	jne Block2

 Block3:
	pop edi
	pop ebp
	pop ebx

 Block4:
	pop esi
	ret 4
}
}
// CWvsContext::GetQuestState
__SUB_CLASS_THIS(005F4500, __thiscall, 8305,  CWvsContext, long, uint16_t) {
__asm {

 Block0:
	sub esp,0x14
	push ebx
	push ebp
	push esi
	mov esi,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push edi
	lea eax,[esp+0x1C]
	push eax
	mov ebx,ecx
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [esp+0x20]
	mov ecx,dword ptr [eax+4]
	mov dword ptr [esp+0x10],ecx
	test edi,edi
	je Block5

 Block1:
	add edi,0xFFFFFFF0
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [esp+0x20],0

 Block5:
	mov ecx,ebx
	call CWvsContext::GetCurFieldID
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edx,dword ptr [ecx+0x2064]
	mov ebp,eax
	mov dword ptr [esp+0x18],edx
	test esi,esi
	je Block15

 Block6:
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block15

 Block7:
	cmp ebp,0xFFFFFFFF
	je Block15

 Block8:
	mov edi,dword ptr [esp+0x28]
	movzx ecx,di
	lea edx,[esp+0x14]
	mov dword ptr [esp+0x14],ecx
	push edx
	lea ecx,[eax+0x6F5]
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetPos
	test eax,eax
	je Block10

 Block9:
	pop edi
	pop esi
	pop ebp
	mov eax,1
	pop ebx
	add esp,0x14
	ret 4

 Block10:
	mov ecx,dword ptr [esp+0x10]
	push 0
	lea eax,[esp+0x2C]
	push eax
	add ecx,0x5B5
	call ZMap<unsigned short, _FILETIME, unsigned short>::GetAt
	test eax,eax
	je Block12

 Block11:
	pop edi
	pop esi
	pop ebp
	mov eax,2
	pop ebx
	add esp,0x14
	ret 4

 Block12:
	push edi
	mov ecx,esi
	call CQuestMan::GetStartDemand
	test eax,eax
	je Block15

 Block13:
	mov edx,dword ptr [esp+0x18]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [ecx+0x4080]
	push 0
	push edx
	push ebp
	push eax
	mov eax,dword ptr [esp+0x20]
	add ebx,0x2148
	push ebx
	push eax
	push edi
	mov ecx,esi
	call CQuestMan::GetStartDemand
	mov ecx,dword ptr [eax+0x18]
	push ecx
	push edi
	mov ecx,esi
	call CQuestMan::CheckStartDemand
	test eax,eax
	je Block15

 Block14:
	pop edi
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	add esp,0x14
	ret 4

 Block15:
	pop edi
	pop esi
	pop ebp
	or eax,0xFFFFFFFF
	pop ebx
	add esp,0x14
	ret 4
}
}
// ALLIANCEDATA::Decode
_SUB_EXCEPTION_HANDLER(F8AA0)
__SUB_CLASS_THIS(000F8AA0, __thiscall, 45457,  ALLIANCEDATA, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_F8AA0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call CInPacket::Decode4
	mov dword ptr [edi],eax
	lea eax,[esp+0x2C]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	push eax
	lea ecx,[edi+4]
	mov dword ptr [esp+0x28],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	lea ebx,[edi+8]
	mov dword ptr [esp+0x2C],5
	mov ebp,1
	nop

 Block3:
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,esi
	call CInPacket::DecodeStr
	push eax
	push 0xFFFFFFFF
	mov ecx,ebx
	mov dword ptr [esp+0x2C],ebp
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	sub dword ptr [esp+0x2C],ebp
	jne Block3

 Block6:
	mov ecx,esi
	call CInPacket::Decode1
	movzx ebx,al
	lea edx,[esp+0x2C]
	push edx
	lea ebp,[edi+0xC]
	push ebx
	mov ecx,ebp
	call ZArray<unsigned long>::_Alloc
	test ebx,ebx
	jle Block8

 Block7:
	mov ecx,dword ptr [ebp]
	lea eax,[ebx*4]
	push eax
	push ecx
	mov ecx,esi
	call CInPacket::DecodeBuffer

 Block8:
	mov ecx,esi
	call CInPacket::Decode4
	lea edx,[esp+0x18]
	push edx
	mov ecx,esi
	mov dword ptr [edi+0x10],eax
	call CInPacket::DecodeStr
	push eax
	lea ecx,[edi+0x14]
	mov dword ptr [esp+0x28],2
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 4
}
}
// CUISkillDecEX::OnCreate
_SUB_EXCEPTION_HANDLER(457DA0)
__SUB_CLASS_THIS(00457DA0, __thiscall, 68632,  CUISkillDecEX, void, void*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_457DA0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor edi,edi
	push 0x70
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov dword ptr [esp+0x24],edi
	mov dword ptr [esp+0x28],1
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x40],edi
	cmp eax,edi
	je Block2

 Block1:
	mov ecx,eax
	call CCtrlTab::_ctor_default
	jmp Block3

 Block2:
	xor eax,eax

 Block3:
	or ebp,0xFFFFFFFF
	mov dword ptr [esp+0x40],ebp
	cmp eax,edi
	je Block11

 Block4:
	lea ebx,[eax+8]
	cmp ebx,edi
	je Block11

 Block5:
	add ebx,0xFFFFFFF8
	cmp ebx,edi
	je Block7

 Block6:
	lea eax,[ebx+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block7:
	mov eax,dword ptr [esi+0x98]
	mov dword ptr [esi+0x98],ebx
	mov dword ptr [esp+0x1C],eax
	cmp eax,edi
	je Block9

 Block8:
	push edi
	lea ecx,[esp+0x1C]
	call ZRef<CCtrlTab>::_ReleaseRaw

 Block9:
	mov ecx,dword ptr [esi+0x98]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x20]
	push eax
	push 0x14
	push 0xAA
	push 0x45
	push 8
	push 8
	push 0x7D0
	push esi
	call edx
	push 0x74
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x40],1
	cmp eax,edi
	je Block12

 Block10:
	mov ecx,eax
	call CCtrlScrollBar::_ctor_default
	jmp Block13

 Block11:
	xor ebx,ebx
	jmp Block7

 Block12:
	xor eax,eax

 Block13:
	mov dword ptr [esp+0x40],ebp
	cmp eax,edi
	je Block22

 Block14:
	add eax,8
	cmp eax,edi
	je Block22

 Block15:
	lea ebx,[eax-8]
	cmp ebx,edi
	je Block17

 Block16:
	lea eax,[ebx+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block17:
	mov eax,dword ptr [esi+0xA0]
	mov dword ptr [esi+0xA0],ebx
	mov dword ptr [esp+0x1C],eax
	cmp eax,edi
	je Block19

 Block18:
	push edi
	lea ecx,[esp+0x1C]
	call ZRef<CCtrlScrollBar>::_ReleaseRaw

 Block19:
	mov ecx,dword ptr [esi+0xA0]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x28]
	push edi
	push 0x99
	push 0x5F
	push 0x96
	push 8
	push 1
	push 0x7D1
	push esi
	call eax
	mov eax,dword ptr [esi+0xA0]
	mov dword ptr [eax+0x34],0x9C
	mov dword ptr [esp+0x34],edi
	mov dword ptr [esp+0x2C],edi
	mov dword ptr [esp+0x30],edi
	lea ecx,[esp+0x14]
	push 0xB9F
	push ecx
	mov dword ptr [esp+0x48],2
	mov dword ptr [esp+0x30],edi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x38]
	mov byte ptr [esp+0x44],3
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x40],2
	cmp eax,edi
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block21:
	mov dword ptr [esp+0x14],edi
	mov ebx,0x73
	lea ebp,[esi+0xA8]
	jmp Block24

 Block22:
	xor ebx,ebx
	jmp Block17

 Block23:
	xor edi,edi

 Block24:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x18],eax
	mov byte ptr [esp+0x40],4
	cmp eax,edi
	je Block26

 Block25:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block27

 Block26:
	xor eax,eax

 Block27:
	mov byte ptr [esp+0x40],2
	cmp eax,edi
	je Block31

 Block28:
	add eax,8
	cmp eax,edi
	je Block31

 Block29:
	lea edi,[eax-8]
	test edi,edi
	je Block31

 Block30:
	lea edx,[edi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block31:
	mov eax,dword ptr [ebp]
	mov dword ptr [ebp],edi
	test eax,eax
	je Block35

 Block32:
	lea edi,[eax+8]
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block35

 Block33:
	lea ecx,[edi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block35

 Block34:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block35:
	mov edi,dword ptr [esp+0x14]
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x28]
	push eax
	push 1
	push ebx
	push 0x85
	lea eax,[edi+0x7DA]
	push eax
	push esi
	call edx
	inc edi
	add ebx,0x28
	add ebp,8
	cmp ebx,0x113
	mov dword ptr [esp+0x14],edi
	jl Block23

 Block36:
	lea eax,[esp+0x14]
	push 0x1A71
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x38]
	mov byte ptr [esp+0x44],5
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x40],2
	test eax,eax
	je Block38

 Block37:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block38:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x18],eax
	mov byte ptr [esp+0x40],6
	test eax,eax
	je Block40

 Block39:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block41

 Block40:
	xor eax,eax

 Block41:
	mov byte ptr [esp+0x40],2
	test eax,eax
	je Block52

 Block42:
	add eax,8
	je Block52

 Block43:
	lea edi,[eax-8]
	test edi,edi
	je Block45

 Block44:
	lea ecx,[edi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block45:
	mov eax,dword ptr [esi+0xC8]
	mov dword ptr [esi+0xC8],edi
	test eax,eax
	je Block49

 Block46:
	lea edi,[eax+8]
	lea edx,[edi+4]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block49

 Block47:
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block49

 Block48:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block49:
	mov ecx,dword ptr [esi+0xC8]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x28]
	push eax
	push 0
	push 6
	push 0x95
	push 2
	push esi
	call edx
	mov ecx,dword ptr [esi+0x98]
	push 0
	mov dword ptr [esi+0xDC],0
	call CCtrlTab::SetTab
	mov ecx,esi
	call CUISkillDecEX::SetSkillRootList
	mov ecx,esi
	call CUISkillDecEX::ResetInfo
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block51

 Block50:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block51:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 4

 Block52:
	xor edi,edi
	jmp Block45
}
}
// CWvsContext::UpdateAllianceMemberInfo
__SUB_CLASS_THIS(0060EEB0, __thiscall, 8189,  CWvsContext, void, GUILDDATA&) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push esi
	mov esi,ecx
	push edi
	mov edi,dword ptr [ebx]
	cmp edi,dword ptr [esi+0x37C8]
	lea ecx,[esi+0x37C8]
	jne Block8

 Block1:
	push ebx
	call GUILDDATA::operator=
	xor eax,eax
	lea ecx,[esi+0x384C]
	xor esi,esi
	lea esp,[esp]

 Block2:
	mov edx,dword ptr [ecx]
	test edx,edx
	je Block15

 Block3:
	cmp eax,dword ptr [edx-4]
	jae Block15

 Block4:
	mov edx,dword ptr [esi+edx]
	cmp edx,dword ptr [ebx]
	je Block6

 Block5:
	inc eax
	add esi,0x4A
	jmp Block2

 Block6:
	test eax,eax
	jl Block15

 Block7:
	imul eax,0x4A
	add eax,dword ptr [ecx]
	pop edi
	pop esi
	pop ebx
	mov dword ptr [esp+4],eax
	jmp  ZArray<GUILDDATA>::RemoveAt

 Block8:
	xor ecx,ecx
	lea edx,[esi+0x384C]
	xor esi,esi

 Block9:
	mov eax,dword ptr [edx]
	test eax,eax
	je Block14

 Block10:
	cmp ecx,dword ptr [eax-4]
	jae Block14

 Block11:
	cmp dword ptr [esi+eax],edi
	je Block13

 Block12:
	inc ecx
	add esi,0x4A
	jmp Block9

 Block13:
	imul ecx,0x4A
	push ebx
	add ecx,eax
	call GUILDDATA::operator=
	pop edi
	pop esi
	pop ebx
	ret 4

 Block14:
	push ebx
	push 0xFFFFFFFF
	mov ecx,edx
	call ZArray<GUILDDATA>::InsertBefore
	mov ecx,eax
	call GUILDDATA::operator=

 Block15:
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CWvsContext::CWvsContext
_SUB_EXCEPTION_HANDLER(5E90F0)
__SUB_CLASS_THIS0(005E90F0, __thiscall, 8078,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E90F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x14],esi
	lea eax,[esi+8]
	xor ebx,ebx
	cmp eax,ebx
	je Block2

 Block1:
	add eax,0xFFFFFFF8
	mov dword ptr [TSingleton<CWvsContext>::ms_pInstance],eax
	jmp Block3

 Block2:
	mov dword ptr [TSingleton<CWvsContext>::ms_pInstance],ebx

 Block3:
	lea ecx,[esi+0x2038]
	mov dword ptr [esp+0x24],ebx
	int 3// TODO: 	mov dword ptr [esi],offset CWvsContext::`vftable'
	mov dword ptr [esi+0xC],ebx
	mov dword ptr [esi+0x20],ebx
	mov dword ptr [esi+0x2024],ebx
	mov dword ptr [esi+0x2028],ebx
	mov dword ptr [esi+0x202C],ebx
	mov dword ptr [esi+0x2030],ebx
	call TSecType<unsigned char>::_ctor_default
	lea ecx,[esi+0x2044]
	mov byte ptr [esp+0x24],1
	call TSecType<unsigned char>::_ctor_default
	mov dword ptr [esi+0x2050],ebx
	mov dword ptr [esi+0x2054],ebx
	mov dword ptr [esi+0x2094],ebx
	mov dword ptr [esi+0x2098],ebx
	mov dword ptr [esi+0x20B4],ebx
	mov dword ptr [esi+0x20B8],ebx
	mov dword ptr [esi+0x20CC],ebx
	lea ecx,[esi+0x20D0]
	mov byte ptr [esp+0x24],5
	call BasicStat::Clear
	lea ecx,[esi+0x2148]
	call SecondaryStat::_ctor_default
	lea ecx,[esi+0x3538]
	mov byte ptr [esp+0x24],6
	call ForcedStat::Clear
	int 3// TODO: 	mov dword ptr [esi+0x35D4],offset CTemporaryStatView::`vftable'
	int 3// TODO: 	mov dword ptr [esi+0x35D8],offset ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::`vftable'
	mov dword ptr [esi+0x35E0],ebx
	mov dword ptr [esi+0x35E4],ebx
	mov dword ptr [esi+0x35E8],ebx
	mov dword ptr [esi+0x3600],ebx
	mov dword ptr [esi+0x3604],ebx
	mov dword ptr [esi+0x3788],ebx
	lea ecx,[esi+0x3794]
	mov byte ptr [esp+0x24],8
	mov dword ptr [esi+0x378C],ebx
	mov dword ptr [esi+0x3790],ebx
	call PARTYSERACH_SETTING::_ctor_default
	mov dword ptr [esi+0x37A8],ebx
	mov dword ptr [esi+0x37AC],ebx
	mov dword ptr [esi+0x37B0],ebx
	mov dword ptr [esi+0x37B4],ebx
	mov dword ptr [esi+0x37BC],ebx
	mov dword ptr [esi+0x37C0],ebx
	mov dword ptr [esi+0x37C4],ebx
	lea ecx,[esi+0x37C8]
	mov byte ptr [esp+0x24],0xB
	call GUILDDATA::_ctor_default
	push ebx
	push offset _S___3
	lea edi,[esi+0x3814]
	push ebx
	push ebx
	mov ecx,edi
	mov byte ptr [esp+0x34],0xC
	mov dword ptr [edi],ebx
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push ebx
	mov ecx,edi
	call ZXString<unsigned short>::ReleaseBuffer
	mov byte ptr [esp+0x24],0xD
	push ebx
	push offset _S___3
	lea edi,[esi+0x381C]
	push ebx
	mov dword ptr [esi+0x3818],ebx
	push ebx
	mov ecx,edi
	mov dword ptr [edi],ebx
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push ebx
	mov ecx,edi
	call ZXString<unsigned short>::ReleaseBuffer
	push ebx
	push offset _S___3
	lea edi,[esi+0x3824]
	push ebx
	mov dword ptr [esi+0x3820],ebx
	push ebx
	mov ecx,edi
	mov byte ptr [esp+0x34],0xE
	mov dword ptr [edi],ebx
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push ebx
	mov ecx,edi
	call ZXString<unsigned short>::ReleaseBuffer
	push offset ZXString<unsigned short>::~ZXString<unsigned short>
	push offset ZXString<unsigned short>::_ctor_default
	push 1
	lea eax,[esi+0x382C]
	push 4
	push eax
	mov byte ptr [esp+0x38],0xF
	mov dword ptr [esi+0x3828],ebx
	call __eh_vector_ctor_iterator
	lea ecx,[esi+0x3834]
	mov byte ptr [esp+0x24],0x10
	call ALLIANCEDATA::_ctor_default
	mov dword ptr [esi+0x384C],ebx
	mov dword ptr [esi+0x3850],ebx
	mov dword ptr [esi+0x3854],ebx
	mov dword ptr [esi+0x3858],ebx
	mov byte ptr [esi+0x385C],bl
	mov byte ptr [esi+0x385D],bl
	mov dword ptr [esi+0x3860],ebx
	mov dword ptr [esi+0x3864],ebx
	mov dword ptr [esi+0x3868],ebx
	mov dword ptr [esi+0x386C],ebx
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push offset ZRef<GW_ItemSlotBase>::_ctor_default
	push 0x3C
	push 8
	lea eax,[esi+0x3870]
	push eax
	mov byte ptr [esp+0x38],0x14
	call __eh_vector_ctor_iterator
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push offset ZRef<GW_ItemSlotBase>::_ctor_default
	push 0x3C
	push 8
	lea ecx,[esi+0x3A50]
	push ecx
	mov byte ptr [esp+0x38],0x15
	call __eh_vector_ctor_iterator
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	mov byte ptr [esp+0x28],0x16
	push offset ZRef<GW_ItemSlotBase>::_ctor_default
	push 4
	push 8
	lea edx,[esi+0x3C30]
	push edx
	call __eh_vector_ctor_iterator
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push offset ZRef<GW_ItemSlotBase>::_ctor_default
	push 5
	push 8
	lea eax,[esi+0x3C50]
	push eax
	mov byte ptr [esp+0x38],0x17
	call __eh_vector_ctor_iterator
	lea ecx,[esi+0x3C78]
	mov byte ptr [esp+0x24],0x18
	call CalcDamage::_ctor_default
	push 0xC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	lea edi,[esi+0x3D38]
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [edi+8],eax
	lea ebp,[edi-0x3FF8]
	call _rand
	add eax,ebp
	mov dword ptr [edi],eax
	call _rand
	movzx edx,byte ptr [edi]
	mov ecx,dword ptr [edi+8]
	add eax,ebp
	mov dword ptr [edi+4],eax
	mov byte ptr [ecx+5],dl
	movzx ecx,byte ptr [edi+4]
	mov eax,dword ptr [edi+8]
	mov byte ptr [eax+6],cl
	push ebx
	mov ecx,edi
	call TSecType<long>::SetData
	push 0xC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x28],0x19
	lea edi,[esi+0x3D44]
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [edi+8],eax
	lea ebp,[edi-0x3FF8]
	call _rand
	add eax,ebp
	mov dword ptr [edi],eax
	call _rand
	mov edx,dword ptr [edi+8]
	add eax,ebp
	mov dword ptr [edi+4],eax
	movzx eax,byte ptr [edi]
	mov byte ptr [edx+5],al
	movzx edx,byte ptr [edi+4]
	mov ecx,dword ptr [edi+8]
	mov byte ptr [ecx+6],dl
	push ebx
	mov ecx,edi
	call TSecType<long>::SetData
	push 0xC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x28],0x1A
	lea edi,[esi+0x3D50]
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [edi+8],eax
	lea ebp,[edi-0x3FF8]
	call _rand
	add eax,ebp
	mov dword ptr [edi],eax
	call _rand
	movzx ecx,byte ptr [edi]
	add eax,ebp
	mov dword ptr [edi+4],eax
	mov eax,dword ptr [edi+8]
	mov byte ptr [eax+5],cl
	mov edx,dword ptr [edi+8]
	movzx eax,byte ptr [edi+4]
	push ebx
	mov ecx,edi
	mov byte ptr [edx+6],al
	call TSecType<long>::SetData
	push 0xC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x28],0x1B
	lea edi,[esi+0x3D5C]
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [edi+8],eax
	lea ebp,[edi-0x3FF8]
	call _rand
	add eax,ebp
	mov dword ptr [edi],eax
	call _rand
	movzx edx,byte ptr [edi]
	mov ecx,dword ptr [edi+8]
	add eax,ebp
	mov dword ptr [edi+4],eax
	mov byte ptr [ecx+5],dl
	movzx ecx,byte ptr [edi+4]
	mov eax,dword ptr [edi+8]
	mov byte ptr [eax+6],cl
	push ebx
	mov ecx,edi
	call TSecType<long>::SetData
	push 0xC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x28],0x1C
	lea edi,[esi+0x3D68]
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [edi+8],eax
	lea ebp,[edi-0x3FF8]
	call _rand
	add eax,ebp
	mov dword ptr [edi],eax
	call _rand
	mov edx,dword ptr [edi+8]
	add eax,ebp
	mov dword ptr [edi+4],eax
	movzx eax,byte ptr [edi]
	mov byte ptr [edx+5],al
	movzx edx,byte ptr [edi+4]
	mov ecx,dword ptr [edi+8]
	mov byte ptr [ecx+6],dl
	push ebx
	mov ecx,edi
	call TSecType<long>::SetData
	push 0xC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x28],0x1D
	lea edi,[esi+0x3D74]
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [edi+8],eax
	lea ebp,[edi-0x3FF8]
	call _rand
	add eax,ebp
	mov dword ptr [edi],eax
	call _rand
	movzx ecx,byte ptr [edi]
	add eax,ebp
	mov dword ptr [edi+4],eax
	mov eax,dword ptr [edi+8]
	mov byte ptr [eax+5],cl
	movzx eax,byte ptr [edi+4]
	mov edx,dword ptr [edi+8]
	push ebx
	mov ecx,edi
	mov byte ptr [edx+6],al
	call TSecType<long>::SetData
	lea ecx,[esi+0x3DA0]
	mov byte ptr [esp+0x24],0x1E
	mov dword ptr [esi+0x3D9C],ebx
	call CRand32::_ctor_default
	mov dword ptr [esi+0x3DC0],ebx
	mov dword ptr [esi+0x3DC8],ebx
	mov dword ptr [esi+0x3DD4],ebx
	mov dword ptr [esi+0x3DDC],ebx
	mov dword ptr [esi+0x3DE4],ebx
	mov dword ptr [esi+0x3DEC],ebx
	mov dword ptr [esi+0x3DF4],ebx
	mov dword ptr [esi+0x3DFC],ebx
	mov dword ptr [esi+0x3E04],ebx
	mov dword ptr [esi+0x3E0C],ebx
	mov dword ptr [esi+0x3E14],ebx
	mov dword ptr [esi+0x3E1C],ebx
	mov dword ptr [esi+0x3E24],ebx
	mov dword ptr [esi+0x3E2C],ebx
	mov dword ptr [esi+0x3E34],ebx
	mov dword ptr [esi+0x3E3C],ebx
	mov dword ptr [esi+0x3E44],ebx
	mov dword ptr [esi+0x3E4C],ebx
	mov dword ptr [esi+0x3E54],ebx
	mov dword ptr [esi+0x3E5C],ebx
	mov dword ptr [esi+0x3E64],ebx
	mov dword ptr [esi+0x3E6C],ebx
	mov dword ptr [esi+0x3E74],ebx
	mov dword ptr [esi+0x3E7C],ebx
	mov dword ptr [esi+0x3E84],ebx
	mov dword ptr [esi+0x3E8C],ebx
	mov dword ptr [esi+0x3E94],ebx
	mov dword ptr [esi+0x3E9C],ebx
	mov dword ptr [esi+0x3EA4],ebx
	push 0x3C
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x28],0x3A
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x18],eax
	mov byte ptr [esp+0x24],0x3B
	cmp eax,ebx
	je Block5

 Block4:
	mov ecx,eax
	call CUIRaiseManager::_ctor_default
	jmp Block6

 Block5:
	xor eax,eax

 Block6:
	mov dword ptr [esi+0x3EAC],eax
	cmp eax,ebx
	je Block8

 Block7:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block8:
	mov dword ptr [esi+0x3EB4],ebx
	mov dword ptr [esi+0x3EBC],ebx
	mov dword ptr [esi+0x3EC4],ebx
	mov dword ptr [esi+0x3ECC],ebx
	mov dword ptr [esi+0x3ED4],ebx
	mov dword ptr [esi+0x3EDC],ebx
	mov dword ptr [esi+0x3EE4],ebx
	mov dword ptr [esi+0x3EEC],ebx
	mov dword ptr [esi+0x3EF4],ebx
	mov byte ptr [esi+0x3EF8],bl
	mov dword ptr [esi+0x3EFC],ebx
	mov dword ptr [esi+0x3F04],ebx
	push 0xFFFFFFFF
	lea ecx,[esi+0x3F08]
	push offset _S___3
	mov byte ptr [esp+0x2C],0x46
	mov dword ptr [ecx],ebx
	call ZXString<char>::AssignWideStr
	mov dword ptr [esi+0x3F10],ebx
	mov dword ptr [esi+0x3F18],ebx
	mov dword ptr [esi+0x3F1C],ebx
	mov dword ptr [esi+0x3F24],ebx
	mov ebp,1
	mov dword ptr [esi+0x3F28],ebp
	int 3// TODO: 	mov dword ptr [esi+0x3F2C],offset ZList<GW_Memo>::`vftable'
	mov dword ptr [esi+0x3F34],ebx
	mov dword ptr [esi+0x3F38],ebx
	mov dword ptr [esi+0x3F3C],ebx
	mov dword ptr [esi+0x3F40],ebx
	mov dword ptr [esi+0x3F44],ebx
	int 3// TODO: 	mov dword ptr [esi+0x3F48],offset ZList<ZRef<CUIQuestTimer>>::`vftable'
	mov dword ptr [esi+0x3F50],ebx
	mov dword ptr [esi+0x3F54],ebx
	mov dword ptr [esi+0x3F58],ebx
	lea ecx,[esi+0x3F5C]
	mov byte ptr [esp+0x24],0x4D
	call CTips::_ctor_default
	mov dword ptr [esi+0x3F6C],ebx
	mov dword ptr [esi+0x3F70],ebx
	mov dword ptr [esi+0x3F74],ebx
	mov dword ptr [esi+0x3F78],ebx
	mov dword ptr [esi+0x3F7C],ebx
	mov dword ptr [esi+0x3F80],ebx
	mov dword ptr [esi+0x3F84],ebx
	mov dword ptr [esi+0x3F90],ebx
	mov dword ptr [esi+0x3F94],ebx
	lea ecx,[esi+0x3FB4]
	mov dword ptr [esi+0x3F98],ebx
	mov dword ptr [esi+0x3F9C],ebx
	mov dword ptr [esi+0x3FA0],ebx
	mov edi,0x1F
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	push 0x64
	mov dword ptr [ecx+0xC],ebx
	call ZMap<long, long, long>::_CalcAutoGrow
	lea ecx,[esi+0x3FD8]
	mov dword ptr [esi+0x3FCC],ebx
	mov dword ptr [esi+0x3FD0],ebx
	mov dword ptr [esi+0x3FD4],ebx
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, ZXString<char>, unsigned short>::`vftable'
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	mov dword ptr [ecx+0xC],ebx
	call ZMap<unsigned short, ZXString<char>, unsigned short>::_CalcAutoGrow
	lea ecx,[esi+0x3FF8]
	mov dword ptr [esi+0x3FF0],ebx
	mov dword ptr [esi+0x3FF4],ebx
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, int, unsigned short>::`vftable'
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	mov dword ptr [ecx+0xC],ebx
	call ZMap<unsigned short, int, unsigned short>::_CalcAutoGrow
	lea ecx,[esi+0x4010]
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, int, unsigned short>::`vftable'
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	mov dword ptr [ecx+0xC],ebx
	call ZMap<unsigned short, int, unsigned short>::_CalcAutoGrow
	lea ecx,[esi+0x4028]
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, int, unsigned short>::`vftable'
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	mov dword ptr [ecx+0xC],ebx
	call ZMap<unsigned short, int, unsigned short>::_CalcAutoGrow
	mov dword ptr [esi+0x4040],ebx
	int 3// TODO: 	mov eax,offset ZList<unsigned short>::`vftable'
	mov dword ptr [esi+0x4044],eax
	mov dword ptr [esi+0x404C],ebx
	mov dword ptr [esi+0x4050],ebx
	mov dword ptr [esi+0x4054],ebx
	mov dword ptr [esi+0x4058],ebx
	mov dword ptr [esi+0x405C],ebx
	mov dword ptr [esi+0x4060],eax
	mov dword ptr [esi+0x4068],ebx
	mov dword ptr [esi+0x406C],ebx
	mov dword ptr [esi+0x4070],ebx
	xor ecx,ecx
	mov dword ptr [esi+0x4074],ebx
	mov dword ptr [esi+0x4078],ebx
	mov word ptr [esi+0x407C],cx
	mov dword ptr [esi+0x4080],ebx
	mov dword ptr [esi+0x4084],ebx
	mov dword ptr [esi+0x4088],ebx
	mov dword ptr [esi+0x408C],ebx
	mov dword ptr [esi+0x4090],ebx
	mov dword ptr [esi+0x4094],ebx
	mov dword ptr [esi+0x40A0],ebx
	mov dword ptr [esi+0x40B4],ebx
	mov dword ptr [esi+0x40B8],ebx
	mov dword ptr [esi+0x40BC],ebx
	mov dword ptr [esi+0x40C0],ebx
	mov dword ptr [esi+0x40C4],ebx
	mov dword ptr [esi+0x40C8],ebp
	mov dword ptr [esi+0x40CC],ebx
	mov dword ptr [esi+0x40D0],ebx
	mov dword ptr [esi+0x40D4],ebx
	mov dword ptr [esi+0x40D8],ebx
	mov byte ptr [esi+0x40DC],bl
	lea ecx,[esi+0x40EC]
	mov dword ptr [esi+0x40E0],ebx
	mov dword ptr [esi+0x40E4],ebx
	mov dword ptr [esi+0x40E8],ebx
	call FamilyInfo::_ctor_default
	mov dword ptr [esi+0x4128],ebx
	lea ecx,[esi+0x412C]
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<ZList<_FILETIME>>, unsigned long>::`vftable'
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	mov dword ptr [ecx+0xC],ebx
	call ZMap<unsigned long, ZRef<ZList<_FILETIME>>, unsigned long>::_CalcAutoGrow
	lea ecx,[esi+0x4150]
	mov dword ptr [esi+0x4144],ebx
	mov dword ptr [esi+0x4148],ebx
	mov dword ptr [esi+0x414C],ebx
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, ZXString<char>, long>::`vftable'
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	mov dword ptr [ecx+0xC],ebx
	call ZMap<long, ZXString<char>, long>::_CalcAutoGrow
	call dword ptr [ZImports::_timeGetTime]
	mov dword ptr [esi+0x4168],eax
	mov dword ptr [esi+0x4174],ebx
	mov dword ptr [esi+0x4178],ebx
	mov dword ptr [esi+0x417C],ebx
	mov dword ptr [esi+0x4180],ebx
	mov dword ptr [esi+0x4184],0xFF
	mov dword ptr [esi+0x4188],ebp
	mov dword ptr [esi+0x418C],ebp
	mov dword ptr [esi+0x4190],ebx
	mov dword ptr [esi+0x419C],ebx
	mov dword ptr [esi+0x41A0],ebx
	mov dword ptr [esi+0x41A4],ebx
	fldz
	fst qword ptr [esi+0x41A8]
	mov dword ptr [esi+0x41B8],0x320
	fstp qword ptr [esi+0x41B0]
	mov dword ptr [esi+0x41BC],0x258
	mov dword ptr [esi+0x41C0],ebx
	mov byte ptr [esi+0x41C4],bl
	mov byte ptr [esi+0x41C5],bl
	int 3// TODO: 	mov dword ptr [esi+0x4220],offset ZList<CWvsContext::ITEMMSG>::`vftable'
	mov dword ptr [esi+0x4228],ebx
	mov dword ptr [esi+0x422C],ebx
	mov dword ptr [esi+0x4230],ebx
	lea ebp,[esi+0x423C]
	int 3// TODO: 	mov dword ptr [ebp],offset ZList<unsigned long>::`vftable'
	mov dword ptr [ebp+8],ebx
	mov dword ptr [ebp+0xC],ebx
	mov dword ptr [ebp+0x10],ebx
	mov dword ptr [esi+0x4250],ebx
	push ebx
	push offset _S___3
	push ebx
	lea edi,[esi+0x382C]
	push ebx
	mov ecx,edi
	mov byte ptr [esp+0x34],0x6A
	mov dword ptr [esi+0x3830],ebx
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push ebx
	mov ecx,edi
	call ZXString<unsigned short>::ReleaseBuffer
	call timeGetTime
	mov edi,eax
	mov dword ptr [esi+0x3D8C],edi
	lea eax,[edi-0x493E0]
	mov dword ptr [esi+0x3D84],eax
	mov dword ptr [esi+0x3DCC],eax
	mov dword ptr [esi+0x3D88],edi
	mov dword ptr [esi+0x20BC],edi
	mov dword ptr [esi+0x3D90],edi
	or eax,0xFFFFFFFF
	mov edx,0x3B9AC9FF
	mov dword ptr [esi+0x35EC],edx
	mov dword ptr [esi+0x35F0],edx
	mov dword ptr [esi+0x35F4],ebx
	mov dword ptr [esi+0x35F8],eax
	or ecx,eax
	mov dword ptr [esi+0x35FC],ecx
	lea edx,[edi+0x36EE80]
	mov dword ptr [esi+0x3FAC],edx
	mov dword ptr [esi+0x3FB0],1
	mov dword ptr [esi+0x405C],edi
	mov dword ptr [esi+0x3D94],edi
	mov dword ptr [esi+0x3D98],ebx
	call Util::FTGetNow
	push 0x58
	mov dword ptr [esi+0x416C],eax
	lea eax,[esi+0x41C8]
	push ebx
	push eax
	mov dword ptr [esi+0x4170],edx
	mov dword ptr [esi+0x4194],ebx
	mov dword ptr [esi+0x4198],ebx
	call _memset
	xor ecx,ecx
	mov word ptr [esi+0x4238],cx
	add esp,0xC
	mov ecx,ebp
	mov dword ptr [esi+0x4234],edi
	call ZList<unsigned long>::RemoveAll
	mov dword ptr [esi+0x4254],1
	mov eax,esi
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret
}
}
// CWvsContext::SendMapTransferItemUseRequest
_SUB_EXCEPTION_HANDLER(5E6020)
__SUB_CLASS_THIS(005E6020, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6020
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x30]
	mov eax,0x68DB8BAD
	imul edi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xE8
	jne Block8

 Block1:
	cmp dword ptr [esi+0x20B8],0
	jne Block8

 Block2:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block8

 Block3:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block8

 Block4:
	push 0x5B
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x28],0
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	push 0
	lea eax,[esp+0x10]
	push eax
	mov ecx,esi
	call CWvsContext::RunMapTransferItem
	test eax,eax
	je Block7

 Block5:
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea edx,[esp+0x30]
	push 0x927
	push edx
	mov dword ptr [esi+0x20BC],eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0x64
	push eax
	mov byte ptr [esp+0x2C],1
	call play_game_sound
	mov eax,dword ptr [esp+0x38]
	add esp,8
	mov byte ptr [esp+0x24],0
	test eax,eax
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block7:
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block8:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 8
}
}
// CWvsContext::OnSetBuyEquipExt
__SUB_CLASS_THIS(005D0020, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esp+8]
	call CInPacket::Decode1
	movzx eax,al
	mov dword ptr [esi+0x414C],eax
	pop esi
	ret 4
}
}
// CWvsContext::SendUseBoxGachaponItemRequest
_SUB_EXCEPTION_HANDLER(5D6BC0)
__SUB_CLASS_THIS(005D6BC0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D6BC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0x7F
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+8]
	mov dword ptr [esp+0x20],0
	call COutPacket::Encode2
	mov ecx,dword ptr [esp+0x28]
	push ecx
	lea ecx,[esp+8]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+4]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret 8
}
}
// CTemporaryStatView::ResetTemporary
_SUB_EXCEPTION_HANDLER(35D030)
__SUB_CLASS_THIS(0035D030, __thiscall, 5659,  CTemporaryStatView, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35D030
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	xor ebp,ebp
	cmp dword ptr [ecx+0xC],ebp
	je Block12

 Block1:
	mov eax,dword ptr [ecx+0x10]
	mov dword ptr [esp+0x14],eax
	cmp eax,ebp
	je Block11

 Block2:
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]

 Block3:
	mov edi,eax
	lea eax,[esp+0x14]
	push eax
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x20],esi
	cmp esi,ebp
	je Block5

 Block4:
	lea ecx,[esi+4]
	push ecx
	call ebx

 Block5:
	mov edx,dword ptr [esp+0x38]
	mov dword ptr [esp+0x2C],ebp
	cmp dword ptr [esi+0x20],edx
	jne Block7

 Block6:
	mov ecx,dword ptr [esp+0x18]
	push edi
	add ecx,4
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::RemoveAt

 Block7:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x30],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block9

 Block8:
	push edi
	call ebx
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block9:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x20],ebp
	cmp eax,ebp
	jne Block3

 Block10:
	mov ecx,dword ptr [esp+0x18]

 Block11:
	call CTemporaryStatView::AdjustPosition

 Block12:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 8
}
}
// CUISkillInc::SetOption
__SUB_CLASS_THIS(005CC850, __thiscall, 68669,  CUISkillInc, void, long, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+8]
	mov edx,dword ptr [esp+4]
	mov dword ptr [ecx+0xD4],eax
	mov dword ptr [ecx+0xD0],edx
	mov eax,0x68DB8BAD
	imul edx
	sar edx,0xC
	push esi
	mov esi,edx
	shr esi,0x1F
	add esi,edx
	mov eax,0x10624DD3
	imul esi
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,3
	je Block4

 Block1:
	mov eax,0x51EB851F
	imul esi
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x16
	je Block4

 Block2:
	cmp esi,0x7D1
	je Block4

 Block3:
	xor eax,eax
	mov dword ptr [ecx+0xD8],eax
	pop esi
	ret 8

 Block4:
	mov eax,1
	mov dword ptr [ecx+0xD8],eax
	pop esi
	ret 8
}
}
// CUISkillChangeConfirm::CUISkillChangeConfirm
__SUB_CLASS_THIS0(005DFF50, __thiscall, 68686,  CUISkillChangeConfirm, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	call CDialog::_ctor_default
	xor eax,eax
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillChangeConfirm::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillChangeConfirm::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillChangeConfirm::`vftable'{for `ZRefCounted'}
	mov dword ptr [esi+0x90],eax
	mov dword ptr [esi+0x98],eax
	mov dword ptr [esi+0xA0],eax
	mov dword ptr [esi+0xA8],eax
	mov dword ptr [esi+0xB8],eax
	mov dword ptr [esi+0xBC],eax
	mov dword ptr [esi+0xC0],eax
	mov dword ptr [esi+0xC4],eax
	mov dword ptr [esi+0xC8],eax
	mov eax,esi
	pop esi
	ret
}
}
// CWvsContext::OnNotifyMarriedPartnerMapTransfer
__SUB_CLASS_THIS(005CFB00, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov esi,ecx
	mov ecx,edi
	call CInPacket::Decode4
	mov ecx,edi
	mov dword ptr [esi+0x378C],eax
	call CInPacket::Decode4
	pop edi
	mov dword ptr [esi+0x3790],eax
	pop esi
	ret 4
}
}
// CWvsContext::SendExpUpItemUseRequest
_SUB_EXCEPTION_HANDLER(5DB1C0)
__SUB_CLASS_THIS(005DB1C0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DB1C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov ecx,dword ptr [edi+0x5F8]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xBE
	jne Block6

 Block1:
	lea ecx,[esp+0x34]
	push 0xF11
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x28],0
	je Block3

 Block2:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block3:
	mov eax,dword ptr [esp+0x34]

 Block4:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block17

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8

 Block6:
	mov edx,dword ptr [edi+0x3BA0]
	push edx
	add edi,0x3B98
	push edi
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	jne Block17

 Block7:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],eax
	jne Block17

 Block8:
	mov edi,dword ptr [esp+0x34]
	push eax
	push edi
	mov ecx,esi
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block17

 Block9:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x35]
	push ecx
	add eax,0x33
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add esp,8
	push edi
	mov bl,al
	call CItemInfo::GetMaxLEV
	movzx edx,bl
	cmp edx,eax
	jle Block11

 Block10:
	lea eax,[esp+0x34]
	push 0xC97
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x30],1
	call CHATLOG_ADD
	add esp,8
	jmp Block3

 Block11:
	mov ecx,dword ptr [esi+0x20CC]
	call GW_CharacterStat::_ZtlSecureGet_nTempEXP
	test eax,eax
	je Block13

 Block12:
	lea ecx,[esp+0x30]
	push 0x130E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x30],2
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x38]
	add esp,8
	jmp Block4

 Block13:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call CUserLocal::IsAttract
	test eax,eax
	jne Block17

 Block14:
	mov edx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp dword ptr [edx+0x4690],eax
	jne Block17

 Block15:
	push eax
	push 0x1F4
	mov ecx,esi
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block17

 Block16:
	push 0xB5
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x28],3
	call get_update_time
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	push 1
	mov ecx,esi
	call CWvsContext::SetExclRequestSent
	push 0x29
	push edi
	call play_item_sound
	add esp,8
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block17:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8
}
}
// CWvsContext::CloseShopScanner
_SUB_EXCEPTION_HANDLER(5DADD0)
__SUB_CLASS_THIS0(005DADD0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DADD0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	cmp dword ptr [TSingleton<CUIShopScanner>::ms_pInstance],0
	je Block6

 Block1:
	lea eax,[esp+4]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x14],0
	call play_ui_sound
	mov eax,dword ptr [esp+8]
	add esp,4
	mov dword ptr [esp+0x10],0xFFFFFFFF
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block3:
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	test ecx,ecx
	je Block6

 Block4:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	test eax,eax
	je Block6

 Block5:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block6:
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x10
	ret
}
}
// GUILDDATA::~GUILDDATA
_SUB_EXCEPTION_HANDLER(5E0150)
__SUB_CLASS_THIS0(005E0150, __thiscall, 45448,  GUILDDATA, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E0150
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	lea ecx,[esi+0x46]
	mov dword ptr [esp+0x14],5
	call ZArray<long>::RemoveAll
	lea ecx,[esi+0x2E]
	mov byte ptr [esp+0x14],4
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, GUILDDATA::SKILLENTRY, long>::`vftable'
	call ZMap<long, GUILDDATA::SKILLENTRY, long>::RemoveAll
	mov eax,dword ptr [esi+0x1E]
	mov byte ptr [esp+0x14],3
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	lea ecx,[esi+0x10]
	mov byte ptr [esp+0x14],2
	call ZArray<GUILDMEMBER>::RemoveAll
	lea ecx,[esi+0xC]
	mov byte ptr [esp+0x14],1
	call ZArray<unsigned long>::RemoveAll
	lea ecx,[esi+8]
	mov byte ptr [esp+0x14],0
	call ZArray<ZXString<char>>::RemoveAll
	mov esi,dword ptr [esi+4]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block4

 Block3:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::CFriend::Reset
__SUB_CLASS_THIS(00610760, __thiscall, 8444,  CWvsContext::CFriend, void, CInPacket&) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push ebp
	push esi
	mov esi,ecx
	push edi
	mov ecx,ebx
	call CInPacket::Decode1
	movzx edi,al
	lea eax,[esp+0x14]
	push eax
	push 1
	push edi
	mov ecx,esi
	call ZArray<GW_Friend>::_Realloc
	lea ecx,[esp+0x14]
	push ecx
	push 1
	lea ebp,[esi+4]
	push edi
	mov ecx,ebp
	call ZArray<int>::_Realloc
	lea edx,[esp+0x14]
	push edx
	push 1
	push edi
	lea ecx,[esi+8]
	call ZArray<int>::_Realloc
	lea eax,[esp+0x14]
	push eax
	push 1
	push edi
	lea ecx,[esi+0xC]
	call ZArray<int>::_Realloc
	test edi,edi
	jle Block6

 Block1:
	mov edx,dword ptr [esi]
	mov ecx,edi
	imul ecx,0x27
	push ecx
	push edx
	mov ecx,ebx
	call CInPacket::DecodeBuffer
	mov ecx,dword ptr [ebp]
	lea eax,[edi*4]
	push eax
	push ecx
	mov ecx,ebx
	call CInPacket::DecodeBuffer
	xor edi,edi
	mov edi,edi

 Block2:
	mov ecx,esi
	call CWvsContext::CFriend::IsDataTwisted
	mov eax,dword ptr [esi]
	test eax,eax
	je Block4

 Block3:
	mov eax,dword ptr [eax-4]

 Block4:
	cmp edi,eax
	jge Block6

 Block5:
	push edi
	mov ecx,esi
	call CWvsContext::CFriend::UpdateBlockedFriend
	inc edi
	jmp Block2

 Block6:
	pop edi
	pop esi
	pop ebp
	pop ebx
	ret 4
}
}
// CWvsContext::CFriend::Insert
__SUB_CLASS_THIS(00610810, __thiscall, 8444,  CWvsContext::CFriend, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	call CWvsContext::CFriend::IsDataTwisted
	test eax,eax
	jne Block2

 Block1:
	push ebx
	push ebp
	push edi
	push 0xFFFFFFFF
	mov ecx,esi
	call ZArray<GW_Friend>::InsertBefore
	push 0xFFFFFFFF
	lea ecx,[esi+4]
	mov edi,eax
	call ZArray<int>::InsertBefore
	push 0xFFFFFFFF
	lea ecx,[esi+8]
	mov ebx,eax
	call ZArray<int>::InsertBefore
	push 0xFFFFFFFF
	lea ecx,[esi+0xC]
	mov ebp,eax
	call ZArray<int>::InsertBefore
	mov esi,eax
	mov eax,dword ptr [esp+0x14]
	push eax
	mov ecx,edi
	call GW_Friend::Decode
	mov ecx,dword ptr [esp+0x14]
	call CInPacket::Decode1
	movzx ecx,al
	mov dword ptr [ebx],ecx
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	push 0
	push edx
	call CConfig::IsBlockedFriend
	mov dword ptr [ebp],eax
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	push 1
	push eax
	call CConfig::IsBlockedFriend
	pop edi
	pop ebp
	mov dword ptr [esi],eax
	pop ebx

 Block2:
	pop esi
	ret 4
}
}
// CWvsContext::OnPartyValue
_SUB_EXCEPTION_HANDLER(5E4720)
__SUB_CLASS_THIS(005E4720, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E4720
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [esp+0x2C]
	lea eax,[esp+0xC]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x28],0
	call CInPacket::DecodeStr
	lea edx,[esp+0x10]
	push 0x1A58
	push edx
	mov byte ptr [esp+0x2C],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x10]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esp+0x2C]
	push eax
	call _atoi
	add esp,4
	mov dword ptr [edi+0x4190],eax

 Block4:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block6

 Block5:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block7

 Block6:
	xor esi,esi

 Block7:
	push ecx
	mov ecx,esp
	lea edx,[esp+0x30]
	mov dword ptr [esp+0x18],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea eax,[esp+0x14]
	mov dword ptr [esp+0x20],esp
	push eax
	mov byte ptr [esp+0x30],2
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x28]
	mov ecx,esi
	mov byte ptr [esp+0x2C],1
	call edx
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x24],0
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 4
}
}
// CWvsContext::ITEMMSG::~ITEMMSG
_SUB_EXCEPTION_HANDLER(5F2800)
__SUB_CLASS_THIS0(005F2800, __thiscall, 11911,  CWvsContext::ITEMMSG, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F2800
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+8],ecx
	lea esi,[ecx+0xC]
	mov ecx,esi
	mov dword ptr [esp+0x14],0
	call ZList<CWvsContext::ITEMMSGINFO>::RemoveAll
	mov ecx,esi
	mov dword ptr [esp+0x14],0xFFFFFFFF
	int 3// TODO: 	mov dword ptr [esi],offset ZList<CWvsContext::ITEMMSGINFO>::`vftable'
	call ZList<CWvsContext::ITEMMSGINFO>::RemoveAll
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// FamilyInfo::Decode
_SUB_EXCEPTION_HANDLER(609B10)
__SUB_CLASS_THIS(00609B10, __thiscall, 8021,  FamilyInfo, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_609B10
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [esp+0x28]
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [edi],eax
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [edi+4],eax
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [edi+8],eax
	call CInPacket::Decode2
	mov ecx,esi
	mov word ptr [edi+0xC],ax
	call CInPacket::Decode2
	mov ecx,esi
	mov word ptr [edi+0xE],ax
	call CInPacket::Decode2
	mov ecx,esi
	mov word ptr [edi+0x10],ax
	call CInPacket::Decode4
	mov dword ptr [edi+0x14],eax
	lea eax,[esp+0x28]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	push eax
	lea ecx,[edi+0x18]
	mov dword ptr [esp+0x24],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x28]
	or ebx,0xFFFFFFFF
	mov dword ptr [esp+0x20],ebx
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,esi
	call CInPacket::DecodeStr
	push eax
	lea ecx,[edi+0x1C]
	mov dword ptr [esp+0x24],1
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x20],ebx
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	lea ebp,[edi+0x20]
	mov ecx,ebp
	call ZMap<long, long, long>::RemoveAll
	mov ecx,esi
	call CInPacket::Decode4
	mov ebx,eax
	test ebx,ebx
	je Block6

 Block5:
	mov ecx,esi
	dec ebx
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [esp+0x14],eax
	call CInPacket::Decode4
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x28],eax
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	call ZMap<long, long, long>::Insert
	test ebx,ebx
	jne Block5

 Block6:
	mov dword ptr [edi+0x38],1
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x10
	ret 4
}
}
// CTownPortalPool::CTownPortalPool
__SUB_CLASS_THIS0(005D38F0, __thiscall, 51709,  CTownPortalPool, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	lea ecx,[esi+4]
	xor edi,edi
	cmp ecx,edi
	je Block2

 Block1:
	lea eax,[ecx-4]
	mov dword ptr [TSingleton<CTownPortalPool>::ms_pInstance],eax
	jmp Block3

 Block2:
	mov dword ptr [TSingleton<CTownPortalPool>::ms_pInstance],edi

 Block3:
	int 3// TODO: 	mov dword ptr [esi],offset CTownPortalPool::`vftable'
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],0x1F
	mov dword ptr [ecx+0xC],edi
	call ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::_CalcAutoGrow
	mov dword ptr [esi+0x24],edi
	mov dword ptr [esi+0x28],edi
	mov dword ptr [esi+0x2C],edi
	pop edi
	int 3// TODO: 	mov dword ptr [esi+0x1C],offset ZList<ZRef<CTownPortalPool::TOWNPORTAL>>::`vftable'
	mov eax,esi
	pop esi
	ret
}
}
// CWvsContext::SetQuestMateName
_SUB_EXCEPTION_HANDLER(5FCF40)
__SUB_CLASS_THIS(005FCF40, __thiscall, 8100,  CWvsContext, void, uint16_t, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5FCF40
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	lea esi,[ecx+0x3FD8]
	push 0
	lea eax,[esp+0x1C]
	push eax
	mov ecx,esi
	mov dword ptr [esp+0x18],0
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetAt
	test eax,eax
	je Block2

 Block1:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	jmp Block3

 Block2:
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx

 Block3:
	mov ecx,esi
	call ZMap<unsigned short, ZXString<char>, unsigned short>::Insert
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x10],0xFFFFFFFF
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0xC
	ret 8
}
}
// CUIStatChangeConfirm::GetResult
__SUB_CLASS_THIS(005CC7D0, __thiscall, 68532,  CUIStatChangeConfirm, void, unsigned long&, unsigned long&) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0xA8]
	mov edx,dword ptr [esp+4]
	mov dword ptr [edx],eax
	mov eax,dword ptr [ecx+0xAC]
	mov ecx,dword ptr [esp+8]
	mov dword ptr [ecx],eax
	ret 8
}
}
// CWvsContext::CannotDropItem
__SUB_CLASS_THIS0(00100FD0, __thiscall, 8109,  CWvsContext, int32_t) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	cmp dword ptr [esi+0x209C],0
	push edi
	jne Block9

 Block1:
	lea edi,[esi+0x2038]
	mov ecx,edi
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block8

 Block2:
	cmp dword ptr [esi+0x209C],0
	jne Block8

 Block3:
	cmp dword ptr [esi+0x20B0],0
	jne Block8

 Block4:
	mov ecx,edi
	call TSecType<unsigned char>::GetData
	test al,0x10
	jne Block8

 Block5:
	mov ecx,edi
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block8

 Block6:
	cmp dword ptr [esi+0x209C],0
	jne Block8

 Block7:
	cmp dword ptr [esi+0x20B0],0
	je Block9

 Block8:
	pop edi
	mov eax,1
	pop esi
	ret

 Block9:
	pop edi
	xor eax,eax
	pop esi
	ret
}
}
// CWvsContext::ValidateStat
_SUB_EXCEPTION_HANDLER(5E8670)
__SUB_CLASS_THIS0(005E8670, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E8670
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x64
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x78]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	lea eax,[esp+0x4C]
	push eax
	mov dword ptr [esp+0x30],0
	call CWvsContext::GetCharacterData
	xor ecx,ecx
	cmp dword ptr [eax+4],ecx
	mov eax,dword ptr [esp+0x50]
	sete cl
	mov ebp,ecx
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	test ebp,ebp
	jne Block89

 Block5:
	push offset ZRef<GW_ItemSlotPet>::~ZRef<GW_ItemSlotPet>
	push offset ZRef<GW_ItemSlotPet>::_ctor_default
	push 3
	push 8
	lea ecx,[esp+0x6C]
	push ecx
	call __eh_vector_ctor_iterator
	lea edx,[esp+0x44]
	push edx
	mov ecx,edi
	mov dword ptr [esp+0x84],ebp
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x48]
	mov dword ptr [esp+0x24],ebp
	test eax,eax
	je Block10

 Block6:
	lea esi,[eax-0x10]
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block9

 Block7:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block9

 Block8:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block9:
	mov dword ptr [esp+0x48],0

 Block10:
	lea ebx,[esp+0x60]
	lea eax,[ebp+0x1B]
	lea esi,[edi+0x2148]
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x20],eax
	mov dword ptr [esp+0x28],3
	jmp Block14

 Block13:
	mov eax,dword ptr [esp+0x20]

 Block14:
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	push 5
	mov ecx,ebp
	call CharacterData::FindCashItemSlotPosition_0
	test eax,eax
	je Block80

 Block15:
	push eax
	push 5
	lea eax,[esp+0x54]
	push eax
	mov ecx,ebp
	call CharacterData::GetItem
	mov ebp,dword ptr [eax+4]
	mov byte ptr [esp+0x80],1
	test ebp,ebp
	je Block17

 Block16:
	lea ecx,[ebp+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block17:
	mov ebx,dword ptr [ebx]
	mov edx,dword ptr [esp+0x1C]
	mov dword ptr [edx],ebp
	test ebx,ebx
	je Block20

 Block18:
	lea ebp,[ebx+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block20

 Block19:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,ebx
	call edx

 Block20:
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x80],0
	test eax,eax
	je Block25

 Block21:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block24

 Block22:
	mov eax,dword ptr [esp+0x50]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x50]
	test ecx,ecx
	je Block24

 Block23:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block24:
	mov dword ptr [esp+0x50],0

 Block25:
	mov ebp,dword ptr [esp+0x24]
	mov ebx,dword ptr [esp+0x1C]

 Block26:
	add dword ptr [esp+0x20],8
	add ebx,8
	sub dword ptr [esp+0x28],1
	mov dword ptr [esp+0x1C],ebx
	jne Block13

 Block27:
	mov ecx,dword ptr [esi+0x614]
	lea eax,[esi+0x60C]
	push ecx
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [edi+0x20CC]
	push 0
	push 0
	push eax
	lea edx,[edi+0x3C50]
	push edx
	lea ebx,[edi+0x3C30]
	push ebx
	lea eax,[edi+0x3A50]
	push eax
	lea ebp,[edi+0x3870]
	push ebp
	lea edx,[esp+0x80]
	push edx
	push ecx
	call get_real_equip
	add esp,0x2C
	mov ecx,edi
	call CWvsContext::CheckEquippedSetItem
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	xor ebx,ebx
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x28],ebx
	cmp ecx,ebx
	je Block29

 Block28:
	lea eax,[esp+0x54]
	push eax
	call CUserLocal::GetPassiveSkillData
	mov dword ptr [esp+0x2C],1
	mov byte ptr [esp+0x1B],1
	cmp dword ptr [eax+4],ebx
	jne Block30

 Block29:
	mov byte ptr [esp+0x1B],bl

 Block30:
	test byte ptr [esp+0x2C],1
	je Block35

 Block31:
	mov ebp,dword ptr [esp+0x58]
	cmp ebp,ebx
	je Block35

 Block32:
	add ebp,0xFFFFFFF0
	lea ebx,[ebp+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block35

 Block33:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebp,ebp
	je Block35

 Block34:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebp
	call eax

 Block35:
	cmp byte ptr [esp+0x1B],0
	je Block45

 Block36:
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call CUserLocal::GetPassiveSkillData
	mov eax,dword ptr [eax+4]
	mov ebp,dword ptr [esp+0x58]
	mov edx,dword ptr [eax]
	mov dword ptr [esp+0x24],edx
	test ebp,ebp
	je Block40

 Block37:
	add ebp,0xFFFFFFF0
	lea ebx,[ebp+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block40

 Block38:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebp,ebp
	je Block40

 Block39:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,ebp
	call edx

 Block40:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	lea eax,[esp+0x54]
	push eax
	call CUserLocal::GetPassiveSkillData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x58]
	mov dword ptr [esp+0x28],ecx
	test eax,eax
	je Block45

 Block41:
	lea ebp,[eax-0x10]
	lea ebx,[ebp+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block44

 Block42:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebp,ebp
	je Block44

 Block43:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebp
	call eax

 Block44:
	mov dword ptr [esp+0x58],0

 Block45:
	mov edx,dword ptr [esi+0x1230]
	mov ecx,dword ptr [edi+0x20CC]
	push edx
	lea eax,[esi+0x1228]
	push eax
	mov dword ptr [esp+0x34],ecx
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esi+0x11C4]
	push ecx
	lea edx,[esi+0x11BC]
	push edx
	mov dword ptr [esp+0x30],eax
	call _ZtlSecureFuseHelper<long>::call
	mov dword ptr [esp+0x2C],eax
	mov eax,dword ptr [esi+0x114C]
	push eax
	lea ecx,[esi+0x1144]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [esi+0xFC0]
	mov dword ptr [esp+0x48],eax
	push edx
	lea eax,[esi+0xFB8]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esi+0xF90]
	push ecx
	lea edx,[esi+0xF88]
	push edx
	mov dword ptr [esp+0x5C],eax
	call _ZtlSecureFuseHelper<long>::call
	mov dword ptr [esp+0x60],eax
	mov eax,dword ptr [esi+0x614]
	push eax
	lea eax,[esi+0x60C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esi+0x2F0]
	push ecx
	lea edx,[esi+0x2E8]
	push edx
	mov dword ptr [esp+0x74],eax
	call _ZtlSecureFuseHelper<long>::call
	mov dword ptr [esp+0x78],eax
	mov eax,dword ptr [esi+0x2CC]
	push eax
	lea ecx,[esi+0x2C4]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [edi+0x20CC]
	mov dword ptr [esp+0x84],eax
	mov eax,dword ptr [esp+0x6C]
	add esp,0x40
	push eax
	mov ecx,esi
	mov dword ptr [esp+0x50],edx
	lea ebp,[edi+0x3538]
	lea ebx,[edi+0x20D0]
	call SecondaryStat::GetJaguarRidingMaxHPUp
	mov ecx,dword ptr [esp+0x28]
	mov edx,dword ptr [esp+0x24]
	push eax
	mov eax,dword ptr [esp+0x24]
	push ecx
	mov ecx,dword ptr [esp+0x24]
	push edx
	mov edx,dword ptr [esp+0x3C]
	push eax
	mov eax,dword ptr [esp+0x44]
	push ecx
	mov ecx,dword ptr [esp+0x4C]
	push edx
	mov edx,dword ptr [esp+0x54]
	push eax
	mov eax,dword ptr [esp+0x5C]
	push ecx
	mov ecx,dword ptr [esp+0x64]
	push edx
	push eax
	push ecx
	lea eax,[edi+0x3C50]
	mov edx,dword ptr [esp+0x78]
	push eax
	lea eax,[edi+0x3C30]
	push eax
	lea eax,[edi+0x3A50]
	push eax
	lea eax,[edi+0x3870]
	push eax
	push ebp
	push edx
	mov ecx,ebx
	call BasicStat::SetFrom
	mov eax,dword ptr [edi+0x20CC]
	lea ecx,[edi+0x3C50]
	push ecx
	lea ecx,[edi+0x3C30]
	push ecx
	lea ecx,[edi+0x3A50]
	push ecx
	lea ecx,[edi+0x3870]
	push ecx
	push ebp
	push ebx
	push eax
	mov ecx,esi
	call SecondaryStat::SetFrom
	mov ecx,dword ptr [TSingleton<CUIStat>::ms_pInstance]
	test ecx,ecx
	je Block47

 Block46:
	call CUIStat::ResetInfo

 Block47:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	test ecx,ecx
	je Block49

 Block48:
	push 0
	call CWnd::InvalidateRect

 Block49:
	mov ecx,dword ptr [TSingleton<CUIKeyConfig>::ms_pInstance]
	test ecx,ecx
	je Block51

 Block50:
	push 0
	call CWnd::InvalidateRect

 Block51:
	mov ecx,dword ptr [TSingleton<CUIItem>::ms_pInstance]
	test ecx,ecx
	je Block53

 Block52:
	push 0
	call CWnd::InvalidateRect

 Block53:
	mov ecx,dword ptr [TSingleton<CUIEquip>::ms_pInstance]
	test ecx,ecx
	je Block55

 Block54:
	push 0
	call CWnd::InvalidateRect

 Block55:
	mov ecx,dword ptr [TSingleton<CUIDragonEquip>::ms_pInstance]
	test ecx,ecx
	je Block57

 Block56:
	push 0
	call CWnd::InvalidateRect

 Block57:
	mov ecx,dword ptr [TSingleton<CUIMechanicEquip>::ms_pInstance]
	test ecx,ecx
	je Block59

 Block58:
	push 0
	call CWnd::InvalidateRect

 Block59:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test ecx,ecx
	je Block62

 Block60:
	cmp dword ptr [edi+0x3850],0
	jne Block62

 Block61:
	call CUserLocal::OnFeatureChanged

 Block62:
	mov ecx,dword ptr [TSingleton<CUISkill>::ms_pInstance]
	test ecx,ecx
	je Block64

 Block63:
	call CUISkill::ResetInfo

 Block64:
	mov ecx,dword ptr [TSingleton<CUISkillEx>::ms_pInstance]
	test ecx,ecx
	je Block66

 Block65:
	call CUISkillEx::ResetInfo

 Block66:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	test ecx,ecx
	je Block68

 Block67:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x38]
	call edx

 Block68:
	mov ecx,dword ptr [TSingleton<CUIPartyHP>::ms_pInstance]
	test ecx,ecx
	je Block70

 Block69:
	push 0
	call CWnd::InvalidateRect

 Block70:
	mov ecx,dword ptr [TSingleton<CUIUserList>::ms_pInstance]
	test ecx,ecx
	je Block72

 Block71:
	call CUIUserList::OnStatChanged

 Block72:
	mov ecx,dword ptr [TSingleton<CUIPartySearch>::ms_pInstance]
	test ecx,ecx
	je Block74

 Block73:
	push 0
	call CWnd::InvalidateRect

 Block74:
	mov ecx,dword ptr [TSingleton<CUIGuildBBS>::ms_pInstance]
	test ecx,ecx
	je Block76

 Block75:
	push 0
	call CWnd::InvalidateRect

 Block76:
	mov ecx,dword ptr [TSingleton<CUIPetEquip>::ms_pInstance]
	test ecx,ecx
	je Block78

 Block77:
	push 0
	call CWnd::InvalidateRect

 Block78:
	mov ecx,edi
	call CWvsContext::ValidateAdditionalItemEffect
	cmp dword ptr [TSingleton<CUserLocal>::ms_pInstance],0
	jne Block85

 Block79:
	push offset ZRef<GW_ItemSlotPet>::~ZRef<GW_ItemSlotPet>
	push 3
	push 8
	lea eax,[esp+0x68]
	push eax
	jmp Block88

 Block80:
	mov eax,dword ptr [ebx]
	test eax,eax
	je Block26

 Block81:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block84

 Block82:
	mov eax,dword ptr [ebx]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebx]
	test ecx,ecx
	je Block84

 Block83:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block84:
	mov dword ptr [ebx],0
	jmp Block26

 Block85:
	push 1
	mov ecx,edi
	call CWvsContext::CheckNormalAutoStartQuest
	test eax,eax
	je Block87

 Block86:
	mov ecx,edi
	call CWvsContext::UpdateAutoQuestAlertIcon

 Block87:
	push offset ZRef<GW_ItemSlotPet>::~ZRef<GW_ItemSlotPet>
	push 3
	push 8
	lea ecx,[esp+0x68]
	push ecx

 Block88:
	mov dword ptr [esp+0x90],0xFFFFFFFF
	call __eh_vector_dtor_iterator

 Block89:
	mov ecx,dword ptr [esp+0x78]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CWvsContext::GetGuildMemberNameByID
__SUB_CLASS_THIS(0060BAE0, __thiscall, 8174,  CWvsContext, int32_t, unsigned long, ZXString<char>&) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x37D4]
	test eax,eax
	jne Block2

 Block1:
	xor edx,edx
	jmp Block3

 Block2:
	mov edx,dword ptr [eax-4]

 Block3:
	push esi
	xor eax,eax
	push edi
	test edx,edx
	jle Block7

 Block4:
	mov esi,dword ptr [ecx+0x37D4]
	mov edi,dword ptr [esp+0xC]

 Block5:
	cmp dword ptr [esi],edi
	je Block7

 Block6:
	inc eax
	add esi,4
	cmp eax,edx
	jl Block5

 Block7:
	cmp eax,edx
	jne Block9

 Block8:
	pop edi
	xor eax,eax
	pop esi
	ret 8

 Block9:
	imul eax,0x25
	add eax,dword ptr [ecx+0x37D8]
	jne Block12

 Block10:
	mov esi,dword ptr [esp+0x10]
	mov eax,dword ptr [esi]
	test eax,eax
	je Block15

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	pop edi
	mov dword ptr [esi],0
	mov eax,1
	pop esi
	ret 8

 Block12:
	mov ecx,eax
	lea esi,[ecx+1]

 Block13:
	mov dl,byte ptr [ecx]
	inc ecx
	test dl,dl
	jne Block13

 Block14:
	mov edi,dword ptr [esp+0x10]
	sub ecx,esi
	mov esi,ecx
	push esi
	push eax
	push 0
	push esi
	mov ecx,edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	mov ecx,edi
	call ZXString<char>::ReleaseBuffer

 Block15:
	pop edi
	mov eax,1
	pop esi
	ret 8
}
}
// CWvsContext::GetCommodityBySN
_SUB_EXCEPTION_HANDLER(605BD0)
__SUB_CLASS_THIS(00605BD0, __thiscall, 8220,  CWvsContext, const ZRef<CS_COMMODITY>, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_605BD0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x4C
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [ebp-0x20],ecx
	xor esi,esi
	lea edx,[ecx+0x3F80]
	mov dword ptr [ebp-0x18],esi
	mov dword ptr [ebp-0x14],esi
	mov dword ptr [ebp-0x24],edx
	nop

 Block1:
	mov eax,dword ptr [edx]
	xor ebx,ebx
	cmp eax,ebx
	je Block12

 Block2:
	cmp esi,dword ptr [eax-4]
	jae Block12

 Block3:
	mov edi,dword ptr [ZImports::_InterlockedIncrement]
	lea eax,[eax+esi*8]
	mov esi,dword ptr [eax+4]
	cmp esi,ebx
	je Block5

 Block4:
	lea ecx,[esi+4]
	push ecx
	call edi

 Block5:
	mov edx,dword ptr [ebp+0xC]
	lea ebx,[esi+4]
	push ebx
	cmp dword ptr [esi+0xC],edx
	je Block9

 Block6:
	mov dword ptr [ebp-4],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block8

 Block7:
	push ebx
	call edi
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block8:
	inc dword ptr [ebp-0x14]
	mov edx,dword ptr [ebp-0x24]
	mov ecx,dword ptr [ebp-0x20]
	mov esi,dword ptr [ebp-0x14]
	jmp Block1

 Block9:
	mov eax,dword ptr [ebp+8]
	mov dword ptr [eax+4],esi
	call edi
	push ebx
	mov dword ptr [ebp-4],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block11

 Block10:
	push ebx
	call edi
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block11:
	mov eax,dword ptr [ebp+8]
	jmp Block53

 Block12:
	cmp dword ptr [ecx+0x4090],ebx
	je Block52

 Block13:
	mov esi,dword ptr [ecx+0x4090]
	mov dword ptr [ebp-0x1C],ebx
	cmp esi,ebx
	jne Block15

 Block14:
	push 0x80004003
	call _com_issue_error

 Block15:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x20]
	lea edx,[ebp-0x14]
	push edx
	push esi
	mov dword ptr [ebp-0x14],ebx
	call eax
	cmp eax,ebx
	jge Block17

 Block16:
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push esi
	push eax
	call _com_issue_errorex

 Block17:
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-0x14],eax
	mov dword ptr [ebp-0x28],ebx
	mov dword ptr [ebp-4],1
	test eax,eax
	jl Block50

 Block18:
	mov ecx,dword ptr [ebp-0x14]
	mov edx,dword ptr [ebp-0x1C]
	lea esi,[ecx+edx]
	mov eax,0x20
	sar esi,1
	call __chkstk
	mov eax,esp
	push 0
	push 0
	push 0xA
	push eax
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp-0x18],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	mov eax,dword ptr [ebp-0x20]
	mov ecx,dword ptr [eax+0x4090]
	mov byte ptr [ebp-4],2
	test ecx,ecx
	je Block14

 Block19:
	lea edx,[ebp-0x40]
	push edx
	mov byte ptr [ebp-4],1
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],3
	call Ztl_variant_t::GetUnknown
	test eax,eax
	je Block27

 Block20:
	mov ecx,dword ptr [eax]
	lea edx,[ebp-0x2C]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	xor ecx,ecx
	mov edi,eax
	test edi,edi
	setl cl
	dec ecx
	and ecx,dword ptr [ebp-0x2C]
	mov dword ptr [ebp-0x18],ecx
	test ebx,ebx
	je Block22

 Block21:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	push ebx
	call eax

 Block22:
	mov ebx,dword ptr [ebp-0x18]
	mov dword ptr [ebp-0x28],ebx
	test edi,edi
	jge Block24

 Block23:
	cmp edi,0x80004002
	jne Block47

 Block24:
	cmp word ptr [ebp-0x40],8
	mov byte ptr [ebp-4],1
	jne Block30

 Block25:
	xor eax,eax
	mov word ptr [ebp-0x40],ax
	mov eax,dword ptr [ebp-0x38]
	test eax,eax
	je Block31

 Block26:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block31

 Block27:
	test ebx,ebx
	je Block24

 Block28:
	mov eax,ebx
	xor ebx,ebx
	mov dword ptr [ebp-0x28],ebx
	test eax,eax
	je Block24

 Block29:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx
	jmp Block24

 Block30:
	lea ecx,[ebp-0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block31:
	test ebx,ebx
	je Block50

 Block32:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x18],esp
	push 0xB0D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[ebp-0x50]
	mov byte ptr [ebp-4],4
	push eax
	mov ecx,ebx
	mov byte ptr [ebp-4],1
	call IWzProperty::Getitem
	push eax
	mov byte ptr [ebp-4],5
	call get_int32
	add esp,8
	cmp word ptr [ebp-0x50],8
	mov edi,eax
	mov dword ptr [ebp-0x18],edi
	mov byte ptr [ebp-4],1
	jne Block35

 Block33:
	mov eax,dword ptr [ebp-0x48]
	xor ecx,ecx
	mov word ptr [ebp-0x50],cx
	test eax,eax
	je Block36

 Block34:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block36

 Block35:
	lea edx,[ebp-0x50]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block36:
	mov eax,dword ptr [ebp+0xC]
	cmp edi,eax
	jge Block38

 Block37:
	inc esi
	mov dword ptr [ebp-0x1C],esi
	jmp Block40

 Block38:
	jle Block41

 Block39:
	dec esi
	mov dword ptr [ebp-0x14],esi

 Block40:
	mov eax,dword ptr [ebp-0x14]
	cmp dword ptr [ebp-0x1C],eax
	jle Block18

 Block41:
	mov dword ptr [ebp-0x2C],0
	push 0
	mov byte ptr [ebp-4],6
	call ZRefCounted_AllocHelper<CS_COMMODITY>::call
	mov ecx,dword ptr [ebp-0x18]
	mov edx,dword ptr [ebp-0x20]
	mov esi,eax
	add esp,4
	lea edi,[esi+4]
	mov dword ptr [edi],1
	mov dword ptr [esi+0xC],ecx
	mov eax,dword ptr [edx+0x4094]
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x2C],esi
	mov dword ptr [ebp-0x18],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block43

 Block42:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block43:
	sub esp,8
	mov eax,esp
	mov dword ptr [ebp-0x18],esp
	push edi
	mov dword ptr [eax+4],esi
	call dword ptr [ZImports::_InterlockedIncrement]
	push ecx
	mov eax,esp
	mov dword ptr [eax],ebx
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+4]
	mov dword ptr [ebp-0x18],esp
	push ebx
	call ecx
	call read_commodity_entity
	add esp,0x14
	test eax,eax
	jne Block48

 Block44:
	mov ecx,dword ptr [ebp-0x24]
	lea edx,[ebp-0x30]
	push edx
	push 0xFFFFFFFF
	call ZArray<ZRef<CS_COMMODITY>>::InsertBefore
	mov ecx,eax
	call ZRef<CS_COMMODITY>::op_assign_copy
	mov eax,dword ptr [ebp+8]
	push edi
	mov dword ptr [eax+4],esi
	call dword ptr [ZImports::_InterlockedIncrement]
	push edi
	mov byte ptr [ebp-4],1
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block46

 Block45:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block46:
	mov ecx,dword ptr [ebx]
	mov edx,dword ptr [ecx+8]
	push ebx
	mov dword ptr [ebp-4],0xFFFFFFFF
	call edx
	mov eax,dword ptr [ebp+8]
	jmp Block53

 Block47:
	push edi
	call _com_issue_error

 Block48:
	push edi
	mov byte ptr [ebp-4],1
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block50

 Block49:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block50:
	mov dword ptr [ebp-4],0xFFFFFFFF
	test ebx,ebx
	je Block52

 Block51:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block52:
	mov eax,dword ptr [ebp+8]
	mov dword ptr [eax+4],0

 Block53:
	lea esp,[ebp-0x68]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 8
}
}
// CWvsContext::GetDiceBuffType
__SUB_CLASS_THIS0(005CD070, __thiscall, 8085,  CWvsContext, long) {
__asm {

 Block0:
	push ebx
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x339C]
	push edi
	push eax
	lea edi,[esi+0x3394]
	push edi
	xor ebx,ebx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [esi+0x339C]
	push ecx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	dec eax
	xor edx,edx
	test eax,eax
	setle dl
	pop edi
	pop esi
	pop ebx
	dec edx
	and eax,edx
	ret

 Block2:
	pop edi
	pop esi
	mov eax,ebx
	pop ebx
	ret
}
}
// CWvsContext::ValidateAdditionalItemEffect
_SUB_EXCEPTION_HANDLER(5E6D30)
__SUB_CLASS_THIS0(005E6D30, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6D30
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x5C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x70]
	mov dword ptr fs:[0],eax
	mov ebx,dword ptr [ecx+0x20CC]
	test ebx,ebx
	je Block47

 Block1:
	add ecx,0x2148
	mov dword ptr [esp+0x14],ecx
	mov ecx,ebx
	call CharacterData::InitAdditionalItemEffect
	lea eax,[ebx+0xFD]
	mov dword ptr [esp+0x1C],eax
	mov dword ptr [esp+0x24],0x3C

 Block2:
	mov ecx,dword ptr [esp+0x1C]
	mov esi,dword ptr [ecx]
	test esi,esi
	je Block46

 Block3:
	mov edx,dword ptr [esi+0xF5]
	push edx
	lea eax,[esi+0xED]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block46

 Block4:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov ebp,eax
	mov dword ptr [esp+0x28],ebp
	test ebp,ebp
	je Block46

 Block5:
	mov ecx,edi
	call TSecType<long>::GetData
	push eax
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemAffectDamageTheme
	mov eax,dword ptr [esp+0x38]
	mov dword ptr [esp+0x78],0
	test eax,eax
	je Block14

 Block6:
	mov eax,dword ptr [eax]
	mov dword ptr [esp+0x20],eax
	test eax,eax
	je Block14

 Block7:
	lea ebp,[esi+0x4F]
	lea edi,[ebx+0x77D]

 Block8:
	push eax
	call ZArray<ZXString<char>>::GetAt
	add esp,4
	push eax
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x1C],0
	call ZXString<char>::op_assign
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x1C]
	push eax
	mov ecx,edi
	mov byte ptr [esp+0x80],1
	call ZMap<ZXString<char>, ZPair<long, long>, ZXString<char>>::GetAt
	test eax,eax
	jne Block10

 Block9:
	mov dword ptr [esp+0x2C],eax
	mov dword ptr [esp+0x30],eax

 Block10:
	mov ecx,dword ptr [esi+0x51]
	push ecx
	lea edx,[esi+0x4F]
	push edx
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov ecx,dword ptr [esi+0x51]
	movzx eax,al
	add dword ptr [esp+0x34],eax
	push ecx
	push ebp
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	add dword ptr [esp+0x40],edx
	add esp,0x10
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,edi
	call ZMap<ZXString<char>, ZPair<long, long>, ZXString<char>>::Insert
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],0
	test eax,eax
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block12:
	mov ecx,dword ptr [esp+0x38]
	lea edx,[esp+0x20]
	push edx
	call ZArray<ZXString<char>>::GetPrev
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block8

 Block13:
	mov ebp,dword ptr [esp+0x28]

 Block14:
	mov ebp,dword ptr [ebp+0x25C]
	mov dword ptr [esp+0x40],ebp
	test ebp,ebp
	je Block16

 Block15:
	lea eax,[ebp-0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block16:
	test ebp,ebp
	je Block45

 Block17:
	mov edi,dword ptr [ebp+4]
	mov dword ptr [esp+0x68],edi
	test edi,edi
	je Block19

 Block18:
	lea ecx,[edi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block19:
	mov byte ptr [esp+0x78],3
	test edi,edi
	je Block22

 Block20:
	mov edx,dword ptr [esp+0x14]
	push esi
	push edx
	push ebx
	mov ecx,edi
	call Additional::TCond<Additional::SKILL>::CheckCondition
	test eax,eax
	je Block22

 Block21:
	push 0xFFFFFFFF
	lea ecx,[ebx+0x725]
	call ZArray<Additional::SKILL>::InsertBefore
	mov ecx,dword ptr [edi]
	mov dword ptr [eax],ecx
	mov edx,dword ptr [edi+4]
	mov dword ptr [eax+4],edx

 Block22:
	mov edi,dword ptr [ebp+0xC]
	mov dword ptr [esp+0x60],edi
	test edi,edi
	je Block24

 Block23:
	lea eax,[edi-0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block24:
	mov byte ptr [esp+0x78],4
	test edi,edi
	je Block28

 Block25:
	mov ecx,dword ptr [esp+0x14]
	push esi
	push ecx
	push ebx
	mov ecx,edi
	call Additional::TCond<Additional::MOBCATEGORY>::CheckCondition
	test eax,eax
	je Block28

 Block26:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block28

 Block27:
	mov edx,dword ptr [edi+4]
	add dword ptr [ebx+eax*4+0x729],edx

 Block28:
	mov edi,dword ptr [ebp+0x14]
	mov dword ptr [esp+0x58],edi
	test edi,edi
	je Block30

 Block29:
	lea eax,[edi-0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block30:
	mov byte ptr [esp+0x78],5
	test edi,edi
	je Block34

 Block31:
	mov ecx,dword ptr [esp+0x14]
	push esi
	push ecx
	push ebx
	mov ecx,edi
	call Additional::TCond<Additional::ELEMBOOST>::CheckCondition
	test eax,eax
	je Block34

 Block32:
	mov eax,dword ptr [edi]
	test eax,eax
	jl Block34

 Block33:
	mov edx,dword ptr [edi+4]
	add dword ptr [ebx+eax*4+0x74D],edx

 Block34:
	mov edi,dword ptr [ebp+0x24]
	mov dword ptr [esp+0x50],edi
	test edi,edi
	je Block36

 Block35:
	lea eax,[edi-0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block36:
	mov byte ptr [esp+0x78],6
	test edi,edi
	je Block39

 Block37:
	mov ecx,dword ptr [esp+0x14]
	push esi
	push ecx
	push ebx
	mov ecx,edi
	call Additional::TCond<Additional::BOSS>::CheckCondition
	test eax,eax
	je Block39

 Block38:
	mov edx,dword ptr [edi]
	add dword ptr [ebx+0x775],edx
	mov eax,dword ptr [edi+4]
	add dword ptr [ebx+0x779],eax

 Block39:
	mov edi,dword ptr [ebp+0x1C]
	mov dword ptr [esp+0x48],edi
	test edi,edi
	je Block41

 Block40:
	lea ecx,[edi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block41:
	mov byte ptr [esp+0x78],7
	test edi,edi
	je Block44

 Block42:
	mov edx,dword ptr [esp+0x14]
	push esi
	push edx
	push ebx
	mov ecx,edi
	call Additional::TCond<Additional::CRITICAL>::CheckCondition
	test eax,eax
	je Block44

 Block43:
	mov eax,dword ptr [edi]
	add dword ptr [ebx+0x76D],eax
	mov ecx,dword ptr [edi+4]
	add dword ptr [ebx+0x771],ecx

 Block44:
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0x78],6
	call ZRef<Additional::TCond<Additional::CRITICAL>>::~ZRef<Additional::TCond<Additional::CRITICAL>>
	lea ecx,[esp+0x4C]
	mov byte ptr [esp+0x78],5
	call ZRef<Additional::TCond<Additional::BOSS>>::~ZRef<Additional::TCond<Additional::BOSS>>
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x78],4
	call ZRef<Additional::TCond<Additional::ELEMBOOST>>::~ZRef<Additional::TCond<Additional::ELEMBOOST>>
	lea ecx,[esp+0x5C]
	mov byte ptr [esp+0x78],3
	call ZRef<Additional::TCond<Additional::MOBCATEGORY>>::~ZRef<Additional::TCond<Additional::MOBCATEGORY>>
	lea ecx,[esp+0x64]
	mov byte ptr [esp+0x78],2
	call ZRef<Additional::TCond<Additional::SKILL>>::~ZRef<Additional::TCond<Additional::SKILL>>

 Block45:
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x78],0
	call ZRef<CItemInfo::EQUIPITEM::ADDITION>::~ZRef<CItemInfo::EQUIPITEM::ADDITION>
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x78],0xFFFFFFFF
	call ZRef<ZArray<ZXString<char>>>::~ZRef<ZArray<ZXString<char>>>

 Block46:
	add dword ptr [esp+0x1C],8
	sub dword ptr [esp+0x24],1
	jne Block2

 Block47:
	mov ecx,dword ptr [esp+0x70]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUIJoyPad::OnCreate
_SUB_EXCEPTION_HANDLER(573DC0)
__SUB_CLASS_THIS(00573DC0, __thiscall, 13659,  CUIJoyPad, void, void*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_573DC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x84
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x98]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	lea ecx,[esp+0x44]
	call CCtrlComboBox::CREATEPARAM::_ctor_default
	mov eax,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	mov dword ptr [esp+0x44],0xFFEEEEEE
	mov dword ptr [esp+0x48],0xFFAAAAAA
	mov dword ptr [esp+0x4C],0xFF404040
	mov eax,dword ptr [eax+0xA0C]
	push eax
	push 0xC
	mov dword ptr [esp+0xA8],0
	call _zmin_int
	mov esi,0x3E8
	add esp,8
	mov dword ptr [esp+0x28],eax
	mov dword ptr [esp+0x24],esi
	mov dword ptr [esp+0x18],0x5E
	lea ebp,[ebx+0x94]
	mov dword ptr [esp+0x2C],0xB

 Block1:
	push 0x110
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x20],eax
	mov byte ptr [esp+0xA0],1
	test eax,eax
	je Block3

 Block2:
	mov ecx,eax
	call CCtrlComboBox::_ctor_default
	jmp Block4

 Block3:
	xor eax,eax

 Block4:
	mov byte ptr [esp+0xA0],0
	test eax,eax
	je Block14

 Block5:
	add eax,8
	je Block14

 Block6:
	lea edi,[eax-8]
	test edi,edi
	je Block8

 Block7:
	lea ecx,[edi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block8:
	mov eax,dword ptr [ebp]
	mov dword ptr [ebp],edi
	test eax,eax
	je Block12

 Block9:
	lea edi,[eax+8]
	lea edx,[edi+4]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block12

 Block10:
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block12

 Block11:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block12:
	cmp esi,0x3EA
	mov ecx,dword ptr [ebp]
	jg Block15

 Block13:
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x44]
	push eax
	mov eax,dword ptr [esp+0x1C]
	push 0x11
	push 0x60
	add eax,0xFFFFFFE9
	push eax
	push 0x48
	push 0
	push esi
	push ebx
	call edx
	jmp Block16

 Block14:
	xor edi,edi
	jmp Block8

 Block15:
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x28]
	lea edx,[esp+0x44]
	push edx
	mov edx,dword ptr [esp+0x1C]
	push 0x11
	push 0x60
	push edx
	push 0x48
	push 0
	push esi
	push ebx
	call eax

 Block16:
	mov dword ptr [esp+0x1C],0
	lea ecx,[esp+0x30]
	push 0x1A54
	push ecx
	mov byte ptr [esp+0xA8],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0xA4],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xA0],2
	test eax,eax
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov edi,dword ptr [esp+0x1C]
	mov ecx,dword ptr [ebp]
	push 0
	push edi
	call CCtrlComboBox::AddItem
	cmp dword ptr [esp+0x28],0
	jle Block24

 Block19:
	mov edx,dword ptr [esp+0x28]
	mov esi,1
	mov dword ptr [esp+0x20],edx

 Block20:
	lea eax,[esp+0x14]
	push 0x180E
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x24]
	push ecx
	mov byte ptr [esp+0xAC],4
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x20]
	add esp,0xC
	mov byte ptr [esp+0xA0],2
	test eax,eax
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block22:
	mov edi,dword ptr [esp+0x1C]
	mov ecx,dword ptr [ebp]
	push esi
	push edi
	call CCtrlComboBox::AddItem
	inc esi
	sub dword ptr [esp+0x20],1
	jne Block20

 Block23:
	mov esi,dword ptr [esp+0x24]

 Block24:
	mov byte ptr [esp+0xA0],0
	test edi,edi
	je Block26

 Block25:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block26:
	add dword ptr [esp+0x18],0x12
	inc esi
	add ebp,8
	sub dword ptr [esp+0x2C],1
	mov dword ptr [esp+0x24],esi
	jne Block1

 Block27:
	xor esi,esi
	mov dword ptr [esp+0x40],esi
	mov dword ptr [esp+0x34],1
	mov dword ptr [esp+0x38],esi
	mov dword ptr [esp+0x3C],esi
	lea edx,[esp+0x14]
	push 0x180F
	push edx
	mov byte ptr [esp+0xA8],5
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0xA4],6
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xA0],5
	cmp eax,esi
	je Block29

 Block28:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block29:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0xA0],7
	cmp eax,esi
	je Block31

 Block30:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block32

 Block31:
	xor eax,eax

 Block32:
	mov byte ptr [esp+0xA0],5
	cmp eax,esi
	je Block36

 Block33:
	add eax,8
	cmp eax,esi
	je Block36

 Block34:
	lea edi,[eax-8]
	cmp edi,esi
	je Block37

 Block35:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	lea eax,[edi+0xC]
	push eax
	call ebp
	jmp Block38

 Block36:
	xor edi,edi

 Block37:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]

 Block38:
	mov eax,dword ptr [ebx+0xEC]
	mov dword ptr [ebx+0xEC],edi
	cmp eax,esi
	je Block42

 Block39:
	lea edi,[eax+8]
	lea ecx,[edi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block42

 Block40:
	lea edx,[edi+4]
	push edx
	call ebp
	cmp edi,esi
	je Block42

 Block41:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block42:
	mov ecx,dword ptr [ebx+0xEC]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x28]
	lea edx,[esp+0x34]
	push edx
	push esi
	push 0x12E
	push 8
	push 0x3F1
	push ebx
	call eax
	lea ecx,[esp+0x14]
	push 0x512
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0xA4],8
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xA0],5
	cmp eax,esi
	je Block44

 Block43:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block44:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0xA0],9
	cmp eax,esi
	je Block46

 Block45:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block47

 Block46:
	xor eax,eax

 Block47:
	mov byte ptr [esp+0xA0],5
	cmp eax,esi
	je Block59

 Block48:
	add eax,8
	cmp eax,esi
	je Block59

 Block49:
	lea edi,[eax-8]
	cmp edi,esi
	je Block51

 Block50:
	lea edx,[edi+0xC]
	push edx
	call ebp

 Block51:
	mov eax,dword ptr [ebx+0xF4]
	mov dword ptr [ebx+0xF4],edi
	cmp eax,esi
	je Block55

 Block52:
	lea edi,[eax+8]
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block55

 Block53:
	lea ecx,[edi+4]
	push ecx
	call ebp
	cmp edi,esi
	je Block55

 Block54:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block55:
	mov ecx,dword ptr [ebx+0xF4]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x34]
	push eax
	push esi
	push 0x12E
	push 0x4A
	push 1
	push ebx
	call edx
	lea eax,[esp+0x14]
	push 0x513
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0xA4],0xA
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xA0],5
	cmp eax,esi
	je Block57

 Block56:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block57:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x30],eax
	mov byte ptr [esp+0xA0],0xB
	cmp eax,esi
	je Block60

 Block58:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block61

 Block59:
	xor edi,edi
	jmp Block51

 Block60:
	xor eax,eax

 Block61:
	mov byte ptr [esp+0xA0],5
	cmp eax,esi
	je Block80

 Block62:
	add eax,8
	cmp eax,esi
	je Block80

 Block63:
	lea edi,[eax-8]
	cmp edi,esi
	je Block65

 Block64:
	lea ecx,[edi+0xC]
	push ecx
	call ebp

 Block65:
	mov eax,dword ptr [ebx+0xFC]
	mov dword ptr [ebx+0xFC],edi
	cmp eax,esi
	je Block69

 Block66:
	lea edi,[eax+8]
	lea edx,[edi+4]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block69

 Block67:
	lea eax,[edi+4]
	push eax
	call ebp
	cmp edi,esi
	je Block69

 Block68:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block69:
	mov ecx,dword ptr [ebx+0xFC]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x34]
	push eax
	push esi
	push 0x12E
	push 0x78
	push 2
	push ebx
	call edx
	mov eax,dword ptr [ebx+0xEC]
	push eax
	mov ecx,ebx
	call CWnd::SetFocusChild
	mov eax,dword ptr [TSingleton<CConfig>::ms_pInstance]
	add eax,0xA4
	mov esi,eax
	lea edi,[ebx+0x100]
	mov ecx,0xC
	rep movsd
	mov esi,eax
	lea edi,[ebx+0x130]
	mov ecx,0xC
	rep movsd
	mov ecx,ebx
	call CUIJoyPad::SetCtrlFromJoyPad
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0xA0],0
	test eax,eax
	je Block71

 Block70:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block71:
	mov esi,dword ptr [esp+0x90]
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	test esi,esi
	je Block79

 Block72:
	lea eax,[esi+8]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block79

 Block73:
	test esi,esi
	je Block79

 Block74:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block76

 Block75:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block76:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block78

 Block77:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block78:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block79:
	mov ecx,dword ptr [esp+0x98]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x90
	ret 4

 Block80:
	xor edi,edi
	jmp Block65
}
}
// CTemporaryStatView::~CTemporaryStatView
_SUB_EXCEPTION_HANDLER(5D3710)
__SUB_CLASS_THIS0(005D3710, __thiscall, 5653,  CTemporaryStatView, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D3710
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	int 3// TODO: 	mov dword ptr [esi],offset CTemporaryStatView::`vftable'
	mov dword ptr [esp+0x14],0
	call CTemporaryStatView::Clear
	lea ecx,[esi+4]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::`vftable'
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::RemoveAll
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::ShowPremiumArgument
_SUB_EXCEPTION_HANDLER(5FA5B0)
__SUB_CLASS_THIS(005FA5B0, __thiscall, 8308,  CWvsContext, void, unsigned long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5FA5B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov edi,dword ptr [esp+0x30]
	xor ebp,ebp
	cmp edi,ebp
	je Block20

 Block1:
	mov dword ptr [esp+0x18],ebp
	mov dword ptr [esp+0x28],ebp
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x30],ebp
	mov bl,2
	push offset _S_
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x2C],bl
	call ZXString<char>::AssignCStr
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::op_assign
	mov eax,0x88888889
	mul edi
	mov esi,edx
	shr esi,5
	cmp esi,ebp
	je Block4

 Block2:
	lea eax,[esp+0x1C]
	push 0xCE5
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov byte ptr [esp+0x34],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0x28],bl
	cmp eax,ebp
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov edx,esi
	shl edx,4
	sub edx,esi
	add edx,edx
	add edx,edx
	mov esi,edi
	sub esi,edx
	je Block7

 Block5:
	lea eax,[esp+0x1C]
	push 0xCE6
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x38]
	push ecx
	mov byte ptr [esp+0x34],4
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0x28],bl
	cmp eax,ebp
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov esi,dword ptr [esp+0x34]
	cmp esi,ebp
	jne Block9

 Block8:
	lea edx,[esp+0x34]
	push 0xCE7
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x30]
	mov esi,dword ptr [esp+0x14]
	mov eax,dword ptr [eax]
	push ecx
	push esi
	push eax
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x38],5
	call ZXString<char>::Format
	add esp,0x10
	jmp Block10

 Block9:
	lea eax,[esp+0x34]
	push 0xCE8
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x30]
	mov eax,dword ptr [eax]
	push esi
	mov esi,dword ptr [esp+0x18]
	push ecx
	push esi
	push eax
	lea edx,[esp+0x28]
	push edx
	mov byte ptr [esp+0x3C],6
	call ZXString<char>::Format
	add esp,0x14

 Block10:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0x28],bl
	cmp eax,ebp
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block12:
	mov edi,dword ptr [esp+0x18]
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebp
	je Block14

 Block13:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x24],esp
	push ebp
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],ebp
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push edi
	call CUIStatusBar::ChatLogAdd

 Block14:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x28],1
	cmp eax,ebp
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov byte ptr [esp+0x28],0
	cmp esi,ebp
	je Block18

 Block17:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	cmp edi,ebp
	je Block20

 Block19:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block20:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 8
}
}
// CUISkillDec::OnKey
__SUB_CLASS_THIS(005EB050, __thiscall, 68556,  IUIMsgHandler, void, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0xD
	je Block2

 Block1:
	mov dword ptr [esp+4],eax
	jmp  CDialog::OnKey

 Block2:
	ret 8
}
}
// CUIJoyPad::~CUIJoyPad
_SUB_EXCEPTION_HANDLER(5DFC90)
__SUB_CLASS_THIS0(005DFC90, __thiscall, 13658,  CUIJoyPad, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DFC90
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x10],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUIJoyPad::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUIJoyPad::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUIJoyPad::`vftable'{for `ZRefCounted'}
	lea edi,[esi+0xF8]
	xor ebx,ebx
	mov dword ptr [esp+0x1C],3
	cmp dword ptr [edi+4],ebx
	je Block2

 Block1:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block2:
	lea edi,[esi+0xF0]
	mov byte ptr [esp+0x1C],2
	cmp dword ptr [edi+4],ebx
	je Block4

 Block3:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block4:
	lea edi,[esi+0xE8]
	mov byte ptr [esp+0x1C],1
	cmp dword ptr [edi+4],ebx
	je Block6

 Block5:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block6:
	push offset ZRef<CCtrlComboBox>::~ZRef<CCtrlComboBox>
	push 0xB
	push 8
	lea eax,[esi+0x90]
	push eax
	mov byte ptr [esp+0x2C],bl
	call __eh_vector_dtor_iterator
	mov ecx,esi
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call CDialog::~CDialog
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret
}
}
// CUIStatChange::IsUnderMinHP
// 868F4C
static uint8_t _SUB_468B30_LOOKUP_TABLE_0[104] = {
0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 2, 141, 73, 0, 
};
// 8690B8
static uint8_t _SUB_468B30_LOOKUP_TABLE_2[113] = {
0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 
4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 
3, 
};
// 868FCC
static uint8_t _SUB_468B30_LOOKUP_TABLE_1[216] = {
0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 5, 5, 5, 
5, 5, 5, 5, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 2, 2, 
2, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 
5, 5, 4, 4, 4, 141, 73, 0, 
};
__SUB_CLASS_THIS(00468B30, __thiscall, 68516,  CUIStatChange, int32_t, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,8
	push esi
	push edi
	lea eax,[esp+8]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	je Block5

 Block1:
	push ebx
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [esp+0x10],0
	pop ebx

 Block5:
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	lea edi,[esi+0x39]
	push edi
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esp,8
	cmp eax,0x16
	je Block7

 Block6:
	cmp ecx,0x7D1
	jne Block9

 Block7:
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	mov edx,0x7D1
	add esp,8
	cmp ax,dx
	je Block9

 Block8:
	mov eax,dword ptr [esi+0x35]
	push eax
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx ecx,al
	shl ecx,4
	add esp,8
	sub ecx,2
	xor eax,eax
	cmp dword ptr [esp+0x14],ecx
	pop edi
	setl al
	pop esi
	add esp,8
	ret 4

 Block9:
	mov edx,dword ptr [esi+0x3D]
	push edx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	cmp eax,0xCF0
	jg Block17

 Block10:
	cmp eax,0xCEE
	jge Block16

 Block11:
	sub eax,0xC80
	cmp eax,0x64
	ja Block20

 Block12:
	movzx eax,byte ptr [eax+_SUB_468B30_LOOKUP_TABLE_0]
	cmp EAX, 0
je Block13
cmp EAX, 1
je Block14
cmp EAX, 2
je Block15
cmp EAX, 3
je Block20


 Block13:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	mov ecx,eax
	shl ecx,4
	add ecx,eax
	lea edx,[ecx+ecx-0x20]
	xor eax,eax
	cmp dword ptr [esp+0x14],edx
	pop edi
	setl al
	pop esi
	add esp,8
	ret 4

 Block14:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	mov ecx,eax
	shl ecx,4
	add ecx,eax
	lea edx,[ecx+ecx+0xA8]
	xor eax,eax
	cmp dword ptr [esp+0x14],edx
	pop edi
	setl al
	pop esi
	add esp,8
	ret 4

 Block15:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea eax,[eax+eax*4]
	lea ecx,[eax*4+0x6C]
	xor eax,eax
	cmp dword ptr [esp+0x14],ecx
	pop edi
	setl al
	pop esi
	add esp,8
	ret 4

 Block16:
	mov edx,dword ptr [esi+0x35]
	push edx
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	lea eax,[eax+eax*4]
	lea ecx,[eax*4+0x102]
	add esp,8
	xor eax,eax
	cmp dword ptr [esp+0x14],ecx
	pop edi
	setl al
	pop esi
	add esp,8
	ret 4

 Block17:
	cmp eax,0xDAC
	je Block48

 Block18:
	add eax,0xFFFFF24A
	cmp eax,2
	ja Block20

 Block19:
	mov edx,dword ptr [esi+0x35]
	push edx
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	imul eax,0x16
	add esp,8
	add eax,0xEE
	xor ecx,ecx
	cmp dword ptr [esp+0x14],eax
	pop edi
	setl cl
	pop esi
	mov eax,ecx
	add esp,8
	ret 4

 Block20:
	mov edx,dword ptr [esi+0x3D]
	push edx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	cdq
	mov ecx,0x3E8
	idiv ecx
	add esp,8
	cmp edx,0x64
	jg Block25

 Block21:
	je Block29

 Block22:
	cmp edx,1
	ja Block47

 Block23:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea edx,[eax+eax*2]
	lea eax,[edx*4+0x26]
	cmp dword ptr [esp+0x14],eax
	jge Block47

 Block24:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block25:
	cmp edx,0x190
	jg Block37

 Block26:
	je Block35

 Block27:
	sub edx,0x6E
	cmp edx,0xD4
	ja Block47

 Block28:
	movzx ecx,byte ptr [edx+_SUB_468B30_LOOKUP_TABLE_1]
	cmp ECX, 0
je Block31
cmp ECX, 1
je Block29
cmp ECX, 2
je Block33
cmp ECX, 3
je Block35
cmp ECX, 4
je Block39
cmp ECX, 5
je Block47


 Block29:
	mov edx,dword ptr [esi+0x35]
	push edx
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	lea eax,[eax+eax*2]
	lea ecx,[eax*8+0x76]
	add esp,8
	cmp dword ptr [esp+0x14],ecx
	jge Block47

 Block30:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block31:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea edx,[eax+eax*2]
	lea eax,[edx*8+0x1A2]
	cmp dword ptr [esp+0x14],eax
	jge Block47

 Block32:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block33:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea ecx,[eax+eax*4]
	lea edx,[ecx+ecx+0x36]
	cmp dword ptr [esp+0x14],edx
	jge Block47

 Block34:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block35:
	mov eax,dword ptr [esi+0x35]
	push eax
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	lea ecx,[eax+eax*4]
	lea edx,[ecx*4+0x3A]
	add esp,8
	cmp dword ptr [esp+0x14],edx
	jge Block47

 Block36:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block37:
	sub edx,0x19A
	cmp edx,0x70
	ja Block47

 Block38:
	movzx eax,byte ptr [edx+_SUB_468B30_LOOKUP_TABLE_2]
	cmp EAX, 0
je Block39
cmp EAX, 1
je Block41
cmp EAX, 2
je Block43
cmp EAX, 3
je Block45
cmp EAX, 4
je Block47


 Block39:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea ecx,[eax+eax*4]
	lea edx,[ecx*4+0x166]
	cmp dword ptr [esp+0x14],edx
	jge Block47

 Block40:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block41:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea eax,[eax+eax*4]
	lea ecx,[eax*4+0x328]
	cmp dword ptr [esp+0x14],ecx
	jge Block47

 Block42:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block43:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx edx,al
	imul edx,0x16
	add edx,0x26
	cmp dword ptr [esp+0x14],edx
	jge Block47

 Block44:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block45:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	imul eax,0x16
	add eax,0x152
	cmp dword ptr [esp+0x14],eax
	jge Block47

 Block46:
	pop edi
	mov eax,1
	pop esi
	add esp,8
	ret 4

 Block47:
	pop edi
	xor eax,eax
	pop esi
	add esp,8
	ret 4

 Block48:
	mov ecx,dword ptr [esi+0x35]
	push ecx
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	add edx,4
	imul edx,0x16
	add esp,8
	xor eax,eax
	cmp dword ptr [esp+0x14],edx
	pop edi
	setl al
	pop esi
	add esp,8
	ret 4
}
}
// CWvsContext::UseFuncKeyMapped
_SUB_EXCEPTION_HANDLER(5DD890)
// 9DDC9C
static uint8_t _SUB_5DD890_LOOKUP_TABLE_0[20] = {
0, 1, 2, 3, 8, 8, 8, 8, 4, 8, 8, 5, 8, 8, 6, 8, 
8, 8, 8, 7, 
};
__SUB_CLASS_THIS(005DD890, __thiscall, 8123,  CWvsContext, int32_t, uint32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DD890
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xB44
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xB50]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0xB60]
	mov ecx,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	mov eax,edi
	shr eax,0x10
	and eax,0xFF
	push eax
	call CFuncKeyMappedMan::FuncKeyMapped
	mov eax,dword ptr [eax+1]
	test edi,edi
	js Block39

 Block1:
	cmp eax,0x1C
	ja Block52

 Block2:
	cmp EAX, 0
je Block3
cmp EAX, 1
je Block5
cmp EAX, 2
je Block6
cmp EAX, 3
je Block7
cmp EAX, 4
je Block8
cmp EAX, 5
je Block15
cmp EAX, 6
je Block22
cmp EAX, 7
je Block25
cmp EAX, 8
je Block28
cmp EAX, 9
je Block33
cmp EAX, 10
je Block52
cmp EAX, 11
je Block52
cmp EAX, 12
je Block52
cmp EAX, 13
je Block52
cmp EAX, 14
je Block34
cmp EAX, 15
je Block35
cmp EAX, 16
je Block36
cmp EAX, 17
je Block11
cmp EAX, 18
je Block52
cmp EAX, 19
je Block9
cmp EAX, 20
je Block30
cmp EAX, 21
je Block52
cmp EAX, 22
je Block4
cmp EAX, 23
je Block14
cmp EAX, 24
je Block52
cmp EAX, 25
je Block10
cmp EAX, 26
je Block13
cmp EAX, 27
je Block29
cmp EAX, 28
je Block12


 Block3:
	push 0xFFFFFFFF
	push 1
	mov ecx,esi
	call CWvsContext::UI_Toggle

 Block4:
	mov eax,1
	jmp Block53

 Block5:
	push 0xFFFFFFFF
	push 0
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block6:
	push 0xFFFFFFFF
	push 2
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block7:
	push 0xFFFFFFFF
	push 3
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block8:
	push 0
	push 7
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block9:
	push 1
	push 7
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block10:
	push 0xFFFFFFFF
	push 0x15
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block11:
	push 3
	push 7
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block12:
	push 2
	push 7
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block13:
	push 0xFFFFFFFF
	push 0x1A
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block14:
	push 0
	mov ecx,esi
	call CWvsContext::SendMigrateToShopRequest
	mov eax,1
	jmp Block53

 Block15:
	call get_field
	mov esi,eax
	test esi,esi
	je Block21

 Block16:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,esi
	call edx
	cmp eax,0x16
	je Block52

 Block17:
	lea ecx,[esp+0x10]
	call CWorldMapDlg::_ctor_default
	lea ecx,[esi+0x16C]
	mov dword ptr [esp+0xB58],0
	call TSecType<unsigned long>::GetData
	push 0
	push 0
	push eax
	lea ecx,[esp+0x1C]
	call CWorldMapDlg::CreateWorldMapDlg
	test eax,eax
	je Block19

 Block18:
	lea ecx,[esp+0x10]
	call CDialog::DoModal
	jmp Block20

 Block19:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x20],esp
	push 0x118
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block20:
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0xB58],0xFFFFFFFF
	call CWorldMapDlg::~CWorldMapDlg

 Block21:
	mov eax,1
	jmp Block53

 Block22:
	call get_field
	test eax,eax
	je Block24

 Block23:
	mov edx,dword ptr [eax]
	mov ecx,eax
	mov eax,dword ptr [edx+0x1C]
	call eax
	cmp eax,0x16
	je Block52

 Block24:
	push 0
	call CUIMessenger::TryNew
	add esp,4
	mov eax,1
	jmp Block53

 Block25:
	mov ecx,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	test ecx,ecx
	je Block27

 Block26:
	call CUIMiniMap::ToggleMiniMapState

 Block27:
	mov eax,1
	jmp Block53

 Block28:
	push 0xFFFFFFFF
	push 6
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block29:
	push 0xFFFFFFFF
	push 0x1E
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block30:
	mov ecx,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	test ecx,ecx
	je Block32

 Block31:
	call CUIQuestAlarm::ToggleQuestAlarmState

 Block32:
	mov eax,1
	jmp Block53

 Block33:
	push 0xFFFFFFFF
	push 5
	mov ecx,esi
	call CWvsContext::UI_Toggle
	mov eax,1
	jmp Block53

 Block34:
	mov ecx,esi
	call CWvsContext::UI_ShortCut
	mov eax,1
	jmp Block53

 Block35:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	call CUIStatusBar::ToggleQuickSlot
	mov eax,1
	jmp Block53

 Block36:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp dword ptr [ecx+0x1804],3
	jne Block38

 Block37:
	push 1
	call CUIStatusBar::SetChatType
	mov eax,1
	jmp Block53

 Block38:
	push 3
	call CUIStatusBar::SetChatType
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 0
	call CWndMan::SetFocus
	mov eax,1
	jmp Block53

 Block39:
	add eax,0xFFFFFFF6
	cmp eax,0x13
	ja Block52

 Block40:
	movzx ecx,byte ptr [eax+_SUB_5DD890_LOOKUP_TABLE_0]
	cmp ECX, 0
je Block44
cmp ECX, 1
je Block41
cmp ECX, 2
je Block46
cmp ECX, 3
je Block47
cmp ECX, 4
je Block48
cmp ECX, 5
je Block51
cmp ECX, 6
je Block49
cmp ECX, 7
je Block50
cmp ECX, 8
je Block52


 Block41:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block43

 Block42:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	call CWndMan::ClearComposition
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	call CUIStatusBar::ChangeWhisperTarget

 Block43:
	mov eax,1
	jmp Block53

 Block44:
	push 8

 Block45:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	call CUIStatusBar::SetChatTarget
	mov eax,1
	jmp Block53

 Block46:
	push 2
	jmp Block45

 Block47:
	push 0
	jmp Block45

 Block48:
	push 4
	jmp Block45

 Block49:
	push 5
	jmp Block45

 Block50:
	push 3
	jmp Block45

 Block51:
	push 6
	jmp Block45

 Block52:
	xor eax,eax

 Block53:
	mov ecx,dword ptr [esp+0xB50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xB50
	ret 4
}
}
// CWvsContext::SetPresentInfo
_SUB_EXCEPTION_HANDLER(4AD210)
__SUB_CLASS_THIS(004AD210, __thiscall, 8228,  CWvsContext, void, long, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4AD210
	mov eax,dword ptr fs:[0]
	push eax
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+4]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [esp+0x14]
	lea edx,[esp+0x18]
	mov dword ptr [ecx+0x3F8C],eax
	push edx
	add ecx,0x3F90
	mov dword ptr [esp+0x10],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0xC],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov ecx,dword ptr [esp+4]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0xC
	ret 8
}
}
// CWvsContext::GetCurrentPrivilege
__SUB_CLASS_THIS0(005CC9D0, __thiscall, 8085,  CWvsContext, long) {
__asm {

 Block0:
	cmp byte ptr [ecx+0x40DC],0
	je Block2

 Block1:
	mov eax,dword ptr [ecx+0x40E0]
	ret

 Block2:
	or eax,0xFFFFFFFF
	ret
}
}
// CWvsContext::SendEntrustedShopCheckRequest
_SUB_EXCEPTION_HANDLER(5FAB90)
__SUB_CLASS_THIS(005FAB90, __thiscall, 8247,  CWvsContext, void, long, long, _LARGE_INTEGER) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5FAB90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	push 1
	call CUserLocal::CheckRidingVehicle
	test eax,eax
	jne Block20

 Block1:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp dword ptr [eax+0x5D0],0
	jne Block19

 Block2:
	cmp dword ptr [eax+0x5E4],0
	jne Block19

 Block3:
	call get_field
	cmp dword ptr [eax+0x19C],0
	jne Block5

 Block4:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x60],esp
	push 0x1C2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block20

 Block5:
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	test eax,eax
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	jmp Block8

 Block7:
	xor eax,eax

 Block8:
	cmp dword ptr [eax+0x1A0],0
	mov eax,dword ptr [esp+0x14]
	sete bl
	test eax,eax
	je Block10

 Block9:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block10:
	test bl,bl
	je Block13

 Block11:
	lea ecx,[esp+0x4C]
	push 0x10DE
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x4C],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x54]
	add esp,8
	mov dword ptr [esp+0x44],0xFFFFFFFF
	test eax,eax
	je Block20

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block20

 Block13:
	mov edx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov esi,dword ptr [edx+8]
	test esi,esi
	je Block20

 Block14:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x10]
	mov edi,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	add esi,4
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,esi
	call edx
	mov ebx,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	push 0x78
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebx]
	push eax
	push ecx
	mov ecx,edi
	call CPortalList::FindPortal_Visible
	test eax,eax
	je Block16

 Block15:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x60],esp
	push 0xDB5
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block20

 Block16:
	lea eax,[esp+0x1C]
	push eax
	mov ecx,ebp
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [eax+4]
	mov dword ptr [esp+0x44],1
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	cmp al,0xF
	setbe bl
	or esi,0xFFFFFFFF
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x44],esi
	call ZRef<CharacterData>::~ZRef<CharacterData>
	test bl,bl
	je Block18

 Block17:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x60],esp
	push 0xECA
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block20

 Block18:
	mov edx,dword ptr [esp+0x4C]
	mov eax,dword ptr [esp+0x50]
	push 0x44
	lea ecx,[esp+0x30]
	mov dword ptr [ebp+0x3FA4],edx
	mov dword ptr [ebp+0x3FA8],eax
	call COutPacket::_ctor_1
	push 0
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x48],2
	call COutPacket::Encode1
	push 8
	lea ecx,[esp+0x58]
	push ecx
	lea ecx,[esp+0x34]
	call COutPacket::EncodeBuffer
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x2C]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x44],esi
	call ZArray<unsigned char>::RemoveAll
	jmp Block20

 Block19:
	mov ecx,ebp
	call CWvsContext::AddChatMorphedMsg

 Block20:
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret 0x10
}
}
// CWvsContext::SendUIOpenItemRequest
_SUB_EXCEPTION_HANDLER(5D64D0)
__SUB_CLASS_THIS(005D64D0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D64D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x30]
	mov eax,0x68DB8BAD
	imul edi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x1B0
	jne Block5

 Block1:
	cmp dword ptr [esi+0x20B8],0
	jne Block5

 Block2:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block5

 Block3:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block5

 Block4:
	push 0x60
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block5:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 8
}
}
// CWvsContext::CheckEquippedSetItem
_SUB_EXCEPTION_HANDLER(5E04D0)
__SUB_CLASS_THIS0(005E04D0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E04D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	lea eax,[esp+0x18]
	push eax
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [esp+0x1C]
	add ebp,0x521
	xor ebx,ebx
	mov ecx,ebp
	mov dword ptr [esp+0x3C],ebx
	call ZMap<long, EQUIPPED_SETITEM, long>::RemoveAll
	mov edi,8
	mov dword ptr [esp+0x14],edi

 Block1:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp eax,ebx
	je Block3

 Block2:
	add eax,0x3870
	jmp Block4

 Block3:
	xor eax,eax

 Block4:
	mov esi,dword ptr [edi+eax+4]
	mov dword ptr [esp+0x24],esi
	cmp esi,ebx
	je Block6

 Block5:
	lea ecx,[esi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block6:
	mov byte ptr [esp+0x3C],1
	cmp esi,ebx
	je Block12

 Block7:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov eax,dword ptr [eax+0x218]
	cmp eax,ebx
	je Block9

 Block8:
	mov dword ptr [esp+0x30],ebx
	mov dword ptr [esp+0x2C],ebx
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x28],eax
	push edx
	mov eax,edx
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0x44],2
	call ZMap<long, EQUIPPED_SETITEM, long>::GetAt
	inc dword ptr [esp+0x2C]
	mov ecx,edi
	call TSecType<long>::GetData
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov edi,eax
	call ZArray<long>::InsertBefore
	lea ecx,[esp+0x28]
	push ecx
	mov edx,ecx
	push edx
	mov ecx,ebp
	mov dword ptr [eax],edi
	call ZMap<long, EQUIPPED_SETITEM, long>::Insert
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x3C],1
	call ZArray<long>::RemoveAll

 Block9:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x40],bl
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block11

 Block10:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block11:
	mov edi,dword ptr [esp+0x14]
	mov dword ptr [esp+0x24],ebx

 Block12:
	add edi,8
	cmp edi,0x1E0
	mov dword ptr [esp+0x14],edi
	jle Block1

 Block13:
	mov esi,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	cmp esi,ebx
	je Block17

 Block14:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block17

 Block15:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block17

 Block16:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block17:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret
}
}
// CUIStatChange::OnKey
__SUB_CLASS_THIS(005DFE20, __thiscall, 68513,  IUIMsgHandler, void, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0xD
	je Block2

 Block1:
	mov dword ptr [esp+4],eax
	jmp  CDialog::OnKey

 Block2:
	ret 8
}
}
// CWvsContext::SendEngagementRequest
_SUB_EXCEPTION_HANDLER(5E1410)
__SUB_CLASS_THIS(005E1410, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E1410
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	lea eax,[esp+0x1C]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x20],0

 Block5:
	push 4
	mov ecx,ebx
	call CharacterData::GetEmptySlotCount
	test eax,eax
	jg Block7

 Block6:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x5C],esp
	push 0x10B1
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block25

 Block7:
	cmp dword ptr [edi+0x2034],0
	jne Block25

 Block8:
	cmp dword ptr [ebx+0x645],0
	jbe Block12

 Block9:
	mov ebx,dword ptr [ebx+0x649]
	cmp word ptr [ebx+0xC],3
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov dword ptr [esp+0x5C],esp
	jne Block11

 Block10:
	mov edx,esp
	push 0x10A7
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block25

 Block11:
	mov eax,esp
	push 0x10A6
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block25

 Block12:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],0
	jne Block25

 Block13:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x3C],0
	test eax,eax
	je Block26

 Block14:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	test eax,eax
	je Block26

 Block15:
	add eax,8
	je Block26

 Block16:
	lea esi,[eax-8]
	mov dword ptr [esp+0x20],esi
	test esi,esi
	je Block18

 Block17:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block18:
	push 0
	push 1
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x20],esp
	push 0x10B2
	push edx
	mov dword ptr [esp+0x50],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0
	push 3
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push 0
	push 0
	push 0xC
	push 4
	push offset _S_
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_STR
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	jne Block24

 Block19:
	push 0xA1
	lea ecx,[esp+0x28]
	call COutPacket::_ctor_1
	mov bl,2
	push 0
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x40],bl
	call COutPacket::Encode1
	lea eax,[esp+0x14]
	push eax
	mov ecx,esi
	call CUtilDlgEx::GetInputStr_Result
	push 0
	push 0
	mov ecx,eax
	mov byte ptr [esp+0x44],3
	call ZXString<char>::TrimRight
	mov ecx,eax
	call ZXString<char>::TrimLeft
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x28]
	call COutPacket::EncodeStr
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x3C],bl
	test eax,eax
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block21:
	mov ecx,dword ptr [esp+0x48]
	push ecx
	lea ecx,[esp+0x28]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x24]
	push edx
	call CClientSocket::SendPacket
	push 0
	lea ecx,[esp+0x20]
	call ZRef<CUtilDlgEx>::op_assign_zero
	push 0xAC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x48],eax
	mov byte ptr [esp+0x3C],4
	test eax,eax
	je Block23

 Block22:
	mov ecx,eax
	call CEngageDlg::_ctor_default

 Block23:
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x3C],1
	call ZArray<unsigned char>::RemoveAll

 Block24:
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>

 Block25:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret 8

 Block26:
	xor esi,esi
	mov dword ptr [esp+0x20],esi
	jmp Block18
}
}
// CWvsContext::GetMyTownPortal
__SUB_CLASS_THIS(0012A180, __thiscall, 8158,  CWvsContext, void, PARTYDATA::TOWNPORTAL&) {
__asm {

 Block0:
	mov edx,dword ptr [ecx+0x35EC]
	mov eax,dword ptr [esp+4]
	mov dword ptr [eax],edx
	mov edx,dword ptr [ecx+0x35F0]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ecx+0x35F4]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ecx+0x35F8]
	mov dword ptr [eax+0xC],edx
	mov ecx,dword ptr [ecx+0x35FC]
	mov dword ptr [eax+0x10],ecx
	ret 4
}
}
// CWvsContext::OnFindFirend
__SUB_CLASS_THIS(005CF9A0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,dword ptr [esp+8]
	mov ecx,esi
	call CInPacket::Decode1
	movzx eax,al
	add eax,0xFFFFFFFA
	cmp eax,5
	ja Block10

 Block1:
	cmp EAX, 0
je Block2
cmp EAX, 1
je Block10
cmp EAX, 2
je Block4
cmp EAX, 3
je Block6
cmp EAX, 4
je Block10
cmp EAX, 5
je Block8


 Block2:
	mov ecx,dword ptr [TSingleton<CUIFindFriend>::ms_pInstance]
	test ecx,ecx
	je Block10

 Block3:
	push esi
	call CUIFindFriend::OnMyInfoResult
	pop esi
	ret 4

 Block4:
	mov ecx,dword ptr [TSingleton<CUIFindFriend>::ms_pInstance]
	test ecx,ecx
	je Block10

 Block5:
	push esi
	call CUIFindFriend::OnSearchResult
	pop esi
	ret 4

 Block6:
	mov ecx,esi
	call CInPacket::Decode1
	mov ecx,dword ptr [TSingleton<CUIFindFriend>::ms_pInstance]
	movzx eax,al
	test ecx,ecx
	je Block10

 Block7:
	pop esi
	mov dword ptr [esp+4],eax
	jmp  CUIFindFriend::OnRequestError

 Block8:
	mov ecx,dword ptr [TSingleton<CUIFindFriendDetail>::ms_pInstance]
	test ecx,ecx
	je Block10

 Block9:
	push esi
	call CUIFindFriendDetail::OnDetailInfoResult

 Block10:
	pop esi
	ret 4
}
}
// CWvsContext::CheckAutoCompletionAlertQuest
__SUB_CLASS_THIS0(005E5FD0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	mov eax,dword ptr [eax+0x2A0]
	push esi
	mov esi,ecx
	mov dword ptr [esp+4],eax
	test eax,eax
	je Block4

 Block1:
	jmp Block3

 Block3:
	lea ecx,[esp+4]
	push ecx
	call ZList<unsigned short>::GetNext
	movzx edx,word ptr [eax]
	add esp,4
	push edx
	mov ecx,esi
	call CWvsContext::TryRegisterAutoCompletionAlertQuest
	cmp dword ptr [esp+4],0
	jne Block3

 Block4:
	pop esi
	pop ecx
	ret
}
}
// CTemporaryStatView::ShowToolTip
_SUB_EXCEPTION_HANDLER(35D310)
__SUB_CLASS_THIS(0035D310, __thiscall, 5667,  CTemporaryStatView, int32_t, CUIToolTip&, const tagPOINT&, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35D310
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ebx,dword ptr [esp+0x38]
	mov ecx,ebx
	call CUIToolTip::ClearToolTip
	mov eax,dword ptr [edi+0xC]
	test eax,eax
	je Block18

 Block1:
	mov ebp,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ebp+4]
	cmp ecx,0x17
	jl Block18

 Block2:
	cmp ecx,0x37
	jge Block18

 Block3:
	shl eax,5
	mov esi,eax
	call get_screen_width
	mov ecx,eax
	mov eax,dword ptr [ebp]
	add eax,esi
	sub eax,ecx
	add eax,3
	js Block18

 Block4:
	cmp eax,esi
	jge Block18

 Block5:
	cdq
	and edx,0x1F
	add eax,edx
	sar eax,5
	push eax
	lea ecx,[edi+4]
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::FindIndex
	push eax
	lea ecx,[esp+0x24]
	call ZRef<CTemporaryStatView::TEMPORARY_STAT>::_ctor_copy
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [eax+0x1C]
	xor edx,edx
	dec ecx
	mov dword ptr [esp+0x30],edx
	cmp ecx,3
	ja Block17

 Block6:
	cmp ECX, 0
je Block12
cmp ECX, 1
je Block7
cmp ECX, 2
je Block13
cmp ECX, 3
je Block14


 Block7:
	cmp dword ptr [eax+0x38],edx
	jne Block17

 Block8:
	mov ecx,dword ptr [eax+0x24]
	cmp ecx,edx
	je Block10

 Block9:
	mov eax,ecx
	jmp Block11

 Block10:
	mov eax,dword ptr [eax+0x20]

 Block11:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	push eax
	call CSkillInfo::GetSkill
	mov edx,dword ptr [esp+0x48]
	push eax
	mov eax,dword ptr [esp+0x48]
	push edx
	push eax
	mov ecx,ebx
	call CUIToolTip::SetToolTip_Skill
	jmp Block17

 Block12:
	push 1
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	push edx
	mov dword ptr [ecx+4],edx
	mov ecx,dword ptr [eax+0x20]
	mov eax,dword ptr [esp+0x84]
	push edx
	mov edx,dword ptr [esp+0x8C]
	push ecx
	push edx
	push eax
	mov ecx,ebx
	call CUIToolTip::SetToolTip_Bundle
	jmp Block17

 Block13:
	push edx
	push 1
	push edx
	push edx
	push edx
	push edx
	push ecx
	add eax,0x28
	mov ecx,esp
	mov dword ptr [esp+0x54],esp
	push eax
	call ZXString<char>::_ctor_copy
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x5C],esp
	push 0xE02
	push ecx
	mov byte ptr [esp+0x58],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esp+0x64]
	mov eax,dword ptr [esp+0x60]
	push edx
	push eax
	mov ecx,ebx
	mov byte ptr [esp+0x58],0
	call CUIToolTip::SetToolTip_String2
	jmp Block17

 Block14:
	mov eax,dword ptr [eax+0x28]
	push eax
	call _atoi
	add esp,4
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetPrivilegeItem
	mov eax,dword ptr [esp+0x1C]
	mov bl,2
	mov byte ptr [esp+0x30],bl
	test eax,eax
	je Block16

 Block15:
	push 0
	push 1
	push 0
	push 0
	push 0
	push 0
	push ecx
	add eax,0x1C
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	mov edx,dword ptr [esp+0x38]
	push ecx
	add edx,0x18
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push edx
	mov byte ptr [esp+0x54],3
	call ZXString<char>::_ctor_copy
	mov eax,dword ptr [esp+0x64]
	mov ecx,dword ptr [esp+0x60]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x60]
	mov byte ptr [esp+0x58],bl
	call CUIToolTip::SetToolTip_String2

 Block16:
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x30],0
	call ZRef<PrivilegeItem>::~ZRef<PrivilegeItem>

 Block17:
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	call ZRef<CTemporaryStatView::TEMPORARY_STAT>::~ZRef<CTemporaryStatView::TEMPORARY_STAT>
	mov eax,1
	jmp Block19

 Block18:
	xor eax,eax

 Block19:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 0x10
}
}
// CWvsContext::OnConsultAuthkeyUpdate
_SUB_EXCEPTION_HANDLER(5E3F30)
__SUB_CLASS_THIS(005E3F30, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E3F30
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [ebp+8]
	lea eax,[ebp-0x14]
	push eax
	call CInPacket::DecodeStr
	mov ecx,dword ptr [ebp-0x14]
	push 0
	push 0
	push 0xFFFFFFFF
	push ecx
	push 0
	push 0
	mov dword ptr [ebp-4],0
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edx,dword ptr [ebp-0x14]
	mov edi,esp
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push edx
	push 0
	push 0
	call MultiByteToWideChar
	push edi
	lea ecx,[esi+0x381C]
	call ZXString<unsigned short>::AssignCStr
	call timeGetTime
	mov dword ptr [esi+0x3820],eax
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	lea esp,[ebp-0x20]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CUISkillChangeConfirm::CreateSkillChangeConfirmDlg
__SUB_CLASS_THIS0(005CC970, __thiscall, 68688,  CUISkillChangeConfirm, void) {
__asm {

 Block0:
	push 1
	push 0
	push 1
	push offset _S_UIUIWINDOW2IMGRE__5
	call CDialog::CreateDlg_2
	ret
}
}
// CWvsContext::IsTesterAccount
__SUB_CLASS_THIS0(000FEF30, __thiscall, 8109,  CWvsContext, int32_t) {
__asm {

 Block0:
	cmp dword ptr [ecx+0x20B0],0
	jne Block3

 Block1:
	cmp dword ptr [ecx+0x209C],0
	jne Block3

 Block2:
	xor eax,eax
	ret

 Block3:
	mov eax,1
	ret
}
}
// CWvsContext::IsBlockedFriend
__SUB_CLASS_THIS(00610500, __thiscall, 8207,  CWvsContext, int32_t, long, long) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push edi
	mov edi,ecx
	test ebx,ebx
	jl Block8

 Block1:
	push esi
	mov esi,dword ptr [edi+0x3788]
	mov ecx,esi
	call CWvsContext::CFriend::IsDataTwisted
	mov esi,dword ptr [esi]
	test esi,esi
	je Block3

 Block2:
	mov esi,dword ptr [esi-4]

 Block3:
	cmp ebx,esi
	pop esi
	jg Block8

 Block4:
	mov eax,dword ptr [esp+0x10]
	sub eax,0
	je Block7

 Block5:
	sub eax,1
	jne Block8

 Block6:
	mov eax,dword ptr [edi+0x3788]
	mov ecx,dword ptr [eax+0xC]
	mov eax,dword ptr [ecx+ebx*4]
	pop edi
	pop ebx
	ret 8

 Block7:
	mov edx,dword ptr [edi+0x3788]
	mov eax,dword ptr [edx+8]
	mov eax,dword ptr [eax+ebx*4]
	pop edi
	pop ebx
	ret 8

 Block8:
	pop edi
	xor eax,eax
	pop ebx
	ret 8
}
}
// CWvsContext::SendSelectNpcItemUseRequest
_SUB_EXCEPTION_HANDLER(5DA430)
__SUB_CLASS_THIS(005DA430, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DA430
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ebx,dword ptr [esp+0x34]
	mov eax,0x68DB8BAD
	imul ebx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x221
	je Block2

 Block1:
	cmp eax,0xEF
	jne Block15

 Block2:
	cmp dword ptr [edi+0x20B8],0
	jne Block15

 Block3:
	mov eax,dword ptr [edi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block15

 Block4:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0xC8
	jl Block15

 Block5:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block7

 Block6:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block8

 Block7:
	xor esi,esi

 Block8:
	test dword ptr [esi+0x178],0x40000
	je Block11

 Block9:
	lea ecx,[esp+0x34]
	push 0x121
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x30],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x3C]
	add esp,8
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block15

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8

 Block11:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],0
	je Block14

 Block12:
	lea edx,[esp+0x30]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x30],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x38]
	add esp,8
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block15

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8

 Block14:
	push 0x7B
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x2C],2
	call COutPacket::Encode2
	push ebx
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [edi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x14]
	mov dword ptr [edi+0x20BC],eax
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block15:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8
}
}
// CTemporaryStatView::ResetTemporary
_SUB_EXCEPTION_HANDLER(35D100)
__SUB_CLASS_THIS(0035D100, __thiscall, 5658,  CTemporaryStatView, void, long, long, NakedParam<MY_UINT128>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35D100
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	xor ebp,ebp
	cmp dword ptr [ecx+0xC],ebp
	je Block17

 Block1:
	mov eax,dword ptr [ecx+0x10]
	mov dword ptr [esp+0x14],eax
	cmp eax,ebp
	je Block16

 Block2:
	mov ebx,eax
	lea eax,[esp+0x14]
	push eax
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x24],esi
	cmp esi,ebp
	je Block4

 Block3:
	lea ecx,[esi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block4:
	sub esp,0x10
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x80
	lea edx,[esp+0x64]
	push edx
	mov dword ptr [esp+0x58],ebp
	lea edi,[esi+0xC]
	call MY_UINT128::_ctor_2
	lea eax,[esp+0x38]
	push eax
	call MY_UINT128::op_negate
	add esp,0x14
	push eax
	mov ecx,edi
	call MY_UINT128::operator&=
	mov eax,dword ptr [esi+0x1C]
	cmp eax,3
	je Block11

 Block5:
	cmp eax,4
	jne Block9

 Block6:
	cmp dword ptr [esp+0x48],eax
	jne Block8

 Block7:
	mov ecx,dword ptr [esp+0x4C]
	cmp dword ptr [esi+0x20],ecx
	je Block11

 Block8:
	cmp eax,4
	je Block12

 Block9:
	lea ecx,[esp+0x50]
	call MY_UINT128::op_bool
	test al,al
	je Block12

 Block10:
	push ebp
	mov ecx,edi
	call MY_UINT128::compareTo_1
	test eax,eax
	jne Block12

 Block11:
	mov ecx,dword ptr [esp+0x18]
	push ebx
	add ecx,4
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::RemoveAt

 Block12:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x44],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block14

 Block13:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block14:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x24],ebp
	cmp eax,ebp
	jne Block2

 Block15:
	mov ecx,dword ptr [esp+0x18]

 Block16:
	call CTemporaryStatView::AdjustPosition

 Block17:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 0x18
}
}
// CUIStatChange::DrawDecStat
_SUB_EXCEPTION_HANDLER(46A8F0)
__SUB_CLASS_THIS(0046A8F0, __thiscall, 68515,  CUIStatChange, void, unsigned long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_46A8F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x50
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[ebp-0x20]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [ebp-0x1C]
	mov esi,dword ptr [eax+4]
	test edi,edi
	je Block5

 Block1:
	add edi,0xFFFFFFF0
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [ebp-0x1C],0

 Block5:
	lea ecx,[ebp-0x48]
	push ecx
	mov ecx,ebx
	call CWnd::GetCanvas
	mov edi,dword ptr [ebp+8]
	push 1
	lea edx,[ebp-0x4C]
	push edi
	push edx
	mov dword ptr [ebp-4],0
	call GetStatCanvas
	add esp,0xC
	xor ebx,ebx
	mov dword ptr [ebp-0x18],ebx
	mov dword ptr [ebp-0x44],ebx
	lea eax,[ebp-0x2C]
	push 0xBA3
	push eax
	mov byte ptr [ebp-4],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push 1
	push eax
	lea ecx,[ebp-0x44]
	push ecx
	mov byte ptr [ebp-4],4
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x2C]
	add esp,0xC
	mov byte ptr [ebp-4],3
	cmp eax,ebx
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	cmp edi,0x200
	ja Block16

 Block8:
	je Block15

 Block9:
	sub edi,0x40
	je Block14

 Block10:
	sub edi,0x40
	je Block13

 Block11:
	sub edi,0x80
	jne Block24

 Block12:
	mov edx,dword ptr [esi+0x55]
	push edx
	add esi,0x51
	push esi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	dec eax
	push eax
	lea ecx,[ebp-0x18]
	push offset _S_D__1
	push ecx
	call ZXString<char>::Format
	add esp,0x14
	lea esi,[edi+4]
	jmp Block25

 Block13:
	mov edx,dword ptr [esi+0x4D]
	push edx
	add esi,0x49
	push esi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	dec eax
	push eax
	lea ecx,[ebp-0x18]
	push offset _S_D__1
	push ecx
	call ZXString<char>::Format
	add esp,0x14
	mov esi,3
	jmp Block25

 Block14:
	mov edx,dword ptr [esi+0x45]
	push edx
	add esi,0x41
	push esi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	dec eax
	push eax
	lea ecx,[ebp-0x18]
	push offset _S_D__1
	push ecx
	call ZXString<char>::Format
	add esp,0x14
	mov esi,2
	jmp Block25

 Block15:
	mov edx,dword ptr [esi+0x5D]
	push edx
	add esi,0x59
	push esi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	dec eax
	push eax
	lea ecx,[ebp-0x18]
	push offset _S_D__1
	push ecx
	call ZXString<char>::Format
	add esp,0x14
	mov esi,5
	jmp Block25

 Block16:
	cmp edi,0x800
	je Block21

 Block17:
	cmp edi,0x2000
	jne Block24

 Block18:
	mov eax,0x20
	call __chkstk
	mov edx,dword ptr [esi+0x8D]
	mov dword ptr [ebp-0x2C],esp
	push edx
	lea eax,[esi+0x85]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	lea ebx,[esi+0x39]
	push ebx
	mov edi,eax
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx edx,ax
	push edx
	call DecMPVal
	sub edi,eax
	mov eax,dword ptr [ebp-0x2C]
	push 0xA
	push eax
	push edi
	call _itoa
	push eax
	lea ecx,[ebp-0x18]
	push ecx
	call ZXString<char>::Format
	add esp,0x28
	lea edx,[ebp-0x40]
	push 0xBA3
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,eax
	mov eax,dword ptr [esi+0x3D]
	push eax
	push ebx
	mov byte ptr [ebp-4],6
	call _ZtlSecureFuseHelper<short>::call
	mov edi,dword ptr [edi]
	movzx eax,ax
	movsx ecx,ax
	push ecx
	call DecMPVal
	push eax
	lea edx,[ebp-0x44]
	push edi
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x40]
	add esp,0x18
	mov byte ptr [ebp-4],3
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	mov esi,1
	jmp Block25

 Block21:
	mov eax,0x20
	call __chkstk
	mov eax,dword ptr [esi+0x75]
	mov dword ptr [ebp-0x2C],esp
	push eax
	lea ecx,[esi+0x6D]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [esi+0x3D]
	push edx
	lea ebx,[esi+0x39]
	push ebx
	mov edi,eax
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	cwde
	push eax
	call DecHPVal
	mov ecx,dword ptr [ebp-0x2C]
	push 0xA
	sub edi,eax
	push ecx
	push edi
	call _itoa
	push eax
	lea edx,[ebp-0x18]
	push edx
	call ZXString<char>::Format
	add esp,0x28
	lea eax,[ebp-0x14]
	push 0xBA3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,eax
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	push ebx
	mov byte ptr [ebp-4],5
	call _ZtlSecureFuseHelper<short>::call
	mov edi,dword ptr [edi]
	movzx eax,ax
	movsx edx,ax
	push edx
	call DecHPVal
	push eax
	lea eax,[ebp-0x44]
	push edi
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x14]
	add esp,0x18
	mov byte ptr [ebp-4],3
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	xor esi,esi
	jmp Block25

 Block24:
	mov esi,dword ptr [ebp-0x14]

 Block25:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block27

 Block26:
	push eax
	call _com_issue_error

 Block27:
	mov eax,dword ptr [ebp-0x18]
	push 0
	push 0
	push 0xFFFFFFFF
	push eax
	push 0
	mov bl,7
	push 0
	mov byte ptr [ebp-4],bl
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edx,dword ptr [ebp-0x18]
	mov edi,esp
	lea ecx,[ebp-0x28]
	push ecx
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push edx
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push edi
	call _xbstr_t::_ctor_1
	lea eax,[ebp-0x14]
	push 0x3E
	push eax
	mov byte ptr [ebp-4],8
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],9
	test ecx,ecx
	jne Block29

 Block28:
	push 0x80004003
	call _com_issue_error

 Block29:
	mov byte ptr [ebp-4],0xA
	call IWzFont::CalcTextWidth
	mov dword ptr [ebp-0x2C],eax
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block31

 Block30:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block31:
	cmp word ptr [ebp-0x28],8
	mov ebx,dword ptr [ZImports::_VariantClear]
	mov byte ptr [ebp-4],3
	jne Block34

 Block32:
	xor eax,eax
	mov word ptr [ebp-0x28],ax
	mov eax,dword ptr [ebp-0x20]
	test eax,eax
	je Block35

 Block33:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block35

 Block34:
	lea ecx,[ebp-0x28]
	push ecx
	call ebx

 Block35:
	cmp esi,2
	jge Block69

 Block36:
	mov edx,3
	mov word ptr [ebp-0x28],dx
	mov dword ptr [ebp-0x20],0xFF
	mov ebx,dword ptr [ebp-0x48]
	mov byte ptr [ebp-4],0xB
	test ebx,ebx
	jne Block38

 Block37:
	push 0x80004003
	call _com_issue_error

 Block38:
	mov ecx,dword ptr [ebp-0x4C]
	lea eax,[ebp-0x28]
	push eax
	lea esi,[esi+esi*8]
	push ecx
	add esi,esi
	lea edx,[esi+0x47]
	push edx
	push 9
	mov ecx,ebx
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x28],8
	mov byte ptr [ebp-4],3
	jne Block41

 Block39:
	xor eax,eax
	mov word ptr [ebp-0x28],ax
	mov eax,dword ptr [ebp-0x20]
	test eax,eax
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block42:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x3C]
	push edx
	call edi
	lea eax,[ebp-0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block44

 Block43:
	push eax
	call _com_issue_error

 Block44:
	lea ecx,[ebp-0x28]
	push ecx
	mov byte ptr [ebp-4],0xC
	call edi
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x28]
	push ecx
	lea edx,[ebp-0x14]
	push 0x1C
	push edx
	mov byte ptr [ebp-4],0xD
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [ebp-0x18]
	push ecx
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],0xE
	call _xbstr_t::_ctor_0
	add esi,0x4A
	push esi
	mov byte ptr [ebp-4],0xF
	push 0x29
	mov ecx,ebx
	mov byte ptr [ebp-4],0xE
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0xD
	test eax,eax
	je Block48

 Block47:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block48:
	cmp word ptr [ebp-0x28],8
	mov byte ptr [ebp-4],0xC
	jne Block51

 Block49:
	xor eax,eax
	mov word ptr [ebp-0x28],ax
	mov eax,dword ptr [ebp-0x20]
	test eax,eax
	je Block52

 Block50:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block52

 Block51:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block52:
	cmp word ptr [ebp-0x3C],8
	mov byte ptr [ebp-4],3
	jne Block55

 Block53:
	mov eax,dword ptr [ebp-0x34]
	xor edx,edx
	mov word ptr [ebp-0x3C],dx
	test eax,eax
	je Block56

 Block54:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block56

 Block55:
	lea eax,[ebp-0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block56:
	lea ecx,[ebp-0x28]
	push ecx
	call edi
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block58

 Block57:
	push eax
	call _com_issue_error

 Block58:
	lea eax,[ebp-0x3C]
	push eax
	mov byte ptr [ebp-4],0x10
	call edi
	lea ecx,[ebp-0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block60

 Block59:
	push eax
	call _com_issue_error

 Block60:
	lea edx,[ebp-0x28]
	push edx
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x14]
	push 0x1D
	push ecx
	mov byte ptr [ebp-4],0x11
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp-0x44]
	push eax
	push ecx
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push edi
	mov byte ptr [ebp-4],0x12
	call _xbstr_t::_ctor_0
	mov edx,dword ptr [ebp-0x2C]
	push esi
	add edx,0x2D
	mov byte ptr [ebp-4],0x13
	push edx
	mov ecx,ebx
	mov byte ptr [ebp-4],0x12
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x11
	test eax,eax
	je Block62

 Block61:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block62:
	mov esi,8
	mov byte ptr [ebp-4],0x10
	cmp word ptr [ebp-0x3C],si
	jne Block65

 Block63:
	xor eax,eax
	mov word ptr [ebp-0x3C],ax
	mov eax,dword ptr [ebp-0x34]
	test eax,eax
	je Block66

 Block64:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block66

 Block65:
	lea ecx,[ebp-0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block66:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x28],si
	jne Block68

 Block67:
	mov eax,dword ptr [ebp-0x20]
	xor edx,edx
	mov word ptr [ebp-0x28],dx
	jmp Block101

 Block68:
	lea eax,[ebp-0x28]
	jmp Block104

 Block69:
	mov ecx,3
	mov word ptr [ebp-0x3C],cx
	mov dword ptr [ebp-0x34],0xFF
	mov edi,dword ptr [ebp-0x48]
	mov byte ptr [ebp-4],0x14
	test edi,edi
	jne Block71

 Block70:
	push 0x80004003
	call _com_issue_error

 Block71:
	mov eax,dword ptr [ebp-0x4C]
	lea edx,[ebp-0x3C]
	push edx
	lea esi,[esi+esi*8]
	add esi,esi
	push eax
	lea ecx,[esi+0x4E]
	push ecx
	push 9
	mov ecx,edi
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x3C],8
	mov byte ptr [ebp-4],3
	jne Block74

 Block72:
	mov eax,dword ptr [ebp-0x34]
	xor edx,edx
	mov word ptr [ebp-0x3C],dx
	test eax,eax
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea eax,[ebp-0x3C]
	push eax
	call ebx

 Block75:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x28]
	push ecx
	call ebx
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block77

 Block76:
	push eax
	call _com_issue_error

 Block77:
	lea eax,[ebp-0x3C]
	push eax
	mov byte ptr [ebp-4],0x15
	call ebx
	lea ecx,[ebp-0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block79

 Block78:
	push eax
	call _com_issue_error

 Block79:
	lea edx,[ebp-0x28]
	push edx
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x14]
	push 0x22
	push ecx
	mov byte ptr [ebp-4],0x16
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	mov edx,dword ptr [ebp-0x18]
	push eax
	push ecx
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	mov bl,0x17
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	add esi,0x51
	push esi
	mov byte ptr [ebp-4],0x18
	push 0x29
	mov ecx,edi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x16
	test eax,eax
	je Block81

 Block80:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block81:
	mov edi,8
	mov byte ptr [ebp-4],0x15
	cmp word ptr [ebp-0x3C],di
	jne Block84

 Block82:
	xor eax,eax
	mov word ptr [ebp-0x3C],ax
	mov eax,dword ptr [ebp-0x34]
	test eax,eax
	je Block85

 Block83:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block85

 Block84:
	lea ecx,[ebp-0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block85:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x28],di
	jne Block88

 Block86:
	mov eax,dword ptr [ebp-0x20]
	xor edx,edx
	mov word ptr [ebp-0x28],dx
	test eax,eax
	je Block89

 Block87:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block89

 Block88:
	lea eax,[ebp-0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block89:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x5C]
	push ecx
	call edi
	lea edx,[ebp-0x5C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block91

 Block90:
	push eax
	call _com_issue_error

 Block91:
	lea eax,[ebp-0x3C]
	push eax
	mov byte ptr [ebp-4],0x19
	call edi
	lea ecx,[ebp-0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block93

 Block92:
	push eax
	call _com_issue_error

 Block93:
	lea edx,[ebp-0x5C]
	push edx
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x14]
	push 0x23
	push ecx
	mov byte ptr [ebp-4],0x1A
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp-0x44]
	push eax
	push ecx
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	mov bl,0x1B
	push edi
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov edx,dword ptr [ebp-0x2C]
	mov ecx,dword ptr [ebp-0x48]
	push esi
	add edx,0x2D
	mov byte ptr [ebp-4],0x1C
	push edx
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x1A
	test eax,eax
	je Block95

 Block94:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block95:
	mov esi,8
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp-0x3C],si
	jne Block98

 Block96:
	xor eax,eax
	mov word ptr [ebp-0x3C],ax
	mov eax,dword ptr [ebp-0x34]
	test eax,eax
	je Block99

 Block97:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block99

 Block98:
	lea ecx,[ebp-0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block99:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x5C],si
	jne Block103

 Block100:
	mov eax,dword ptr [ebp-0x54]
	xor edx,edx
	mov word ptr [ebp-0x5C],dx

 Block101:
	test eax,eax
	je Block105

 Block102:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block105

 Block103:
	lea eax,[ebp-0x5C]

 Block104:
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block105:
	mov byte ptr [ebp-4],2
	test edi,edi
	je Block107

 Block106:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block107:
	mov eax,dword ptr [ebp-0x18]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block109

 Block108:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block109:
	mov eax,dword ptr [ebp-0x4C]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block111

 Block110:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block111:
	mov eax,dword ptr [ebp-0x48]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov dword ptr [ebp-4],0xFFFFFFFF
	call edx
	lea esp,[ebp-0x6C]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::OnLimitedNPCDisableInfo
__SUB_CLASS_THIS(005CCE10, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov ecx,dword ptr [TSingleton<CNpcPool>::ms_pInstance]
	push eax
	push 0x55
	call CNpcPool::OnPacket
	ret 4
}
}
// CTemporaryStatView::TEMPORARY_STAT::Hide
__SUB_CLASS_THIS0(0035C110, __thiscall, 5822,  CTemporaryStatView::TEMPORARY_STAT, void) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,ecx
	cmp dword ptr [edi+0x2C],0
	je Block5

 Block1:
	mov esi,dword ptr [edi+0x2C]
	test esi,esi
	jne Block3

 Block2:
	push 0x80004003
	call _com_issue_error

 Block3:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+0x11C]
	push 0
	push esi
	call ecx
	test eax,eax
	jge Block5

 Block4:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block5:
	cmp dword ptr [edi+0x30],0
	je Block10

 Block6:
	mov esi,dword ptr [edi+0x30]
	test esi,esi
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x11C]
	push 0
	push esi
	call eax
	test eax,eax
	jge Block10

 Block9:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block10:
	pop edi
	pop esi
	ret
}
}
// is_novice_skill
__SUB(005CC640, __cdecl, 66632,  int32_t, long) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	imul eax,0x3E8
	mov edx,ecx
	sub edx,eax
	je Block3

 Block1:
	cmp ecx,0x7D1
	je Block3

 Block2:
	xor eax,eax
	ret

 Block3:
	mov eax,1
	ret
}
}
// CWvsContext::SendStatChangeItemUseRequest
_SUB_EXCEPTION_HANDLER(5DDFE0)
__SUB_CLASS_THIS(005DDFE0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DDFE0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x14],ecx
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	xor edi,edi
	cmp ecx,edi
	je Block3

 Block1:
	cmp dword ptr [ecx+0xC],edi
	je Block3

 Block2:
	call CMacroSysMan::Stop

 Block3:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	cmp esi,edi
	je Block5

 Block4:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block6

 Block5:
	xor esi,esi

 Block6:
	test dword ptr [esi+0x178],0x400
	mov ebp,dword ptr [esp+0x3C]
	je Block17

 Block7:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	cmp esi,edi
	je Block9

 Block8:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block10

 Block9:
	xor esi,esi

 Block10:
	push edi
	lea eax,[esp+0x40]
	push eax
	lea ecx,[esi+0xD54]
	mov dword ptr [esp+0x44],ebp
	call ZList<long>::Find
	test eax,eax
	jne Block17

 Block11:
	lea ecx,[esp+0x3C]
	push 0x1016
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	or ebx,0xFFFFFFFF
	mov dword ptr [esp+0x30],edi
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],edi
	je Block13

 Block12:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x40],esp
	push edi
	push ebx
	mov dword ptr [ecx+4],edi
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block13:
	mov eax,dword ptr [esp+0x3C]
	cmp eax,edi

 Block14:
	mov dword ptr [esp+0x30],ebx

 Block15:
	je Block52

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block52

 Block17:
	mov ebx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov ecx,dword ptr [ebx+0x5F8]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	cmp edi,0xBE
	jne Block21

 Block18:
	lea edx,[esp+0x3C]
	push 0xF11
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	or ebx,0xFFFFFFFF
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x30],1
	je Block20

 Block19:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x40],esp
	push 0
	push ebx
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block20:
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	jmp Block14

 Block21:
	cmp ecx,0x1D7AE1
	jl Block23

 Block22:
	cmp ecx,0x1D7AE2
	jle Block24

 Block23:
	push ecx
	call is_event_vehicle_type2
	add esp,4
	test eax,eax
	je Block26

 Block24:
	lea eax,[esp+0x3C]
	push 0xF10
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x30],2

 Block25:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x44]
	add esp,8
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test eax,eax
	jmp Block15

 Block26:
	mov eax,0x68DB8BAD
	imul ebp
	sar edx,0xC
	mov esi,edx
	shr esi,0x1F
	add esi,edx
	cmp esi,0xDD
	jne Block34

 Block27:
	cmp edi,0xC1
	jne Block29

 Block28:
	lea ecx,[esp+0x3C]
	push 0x18AC
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x30],3
	jmp Block25

 Block29:
	cmp esi,0xDD
	jne Block34

 Block30:
	cmp edi,0xC1
	je Block52

 Block31:
	mov ecx,ebx
	call CUserLocal::IsSit
	test eax,eax
	jne Block52

 Block32:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],eax
	jne Block52

 Block33:
	mov ebx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]

 Block34:
	cmp esi,0xEC
	jne Block37

 Block35:
	cmp dword ptr [ebx+0x63C],0
	jg Block52

 Block36:
	cmp dword ptr [ebx+0x5D0],0
	jne Block52

 Block37:
	cmp dword ptr [ebx+0x5D0],0
	jne Block39

 Block38:
	cmp dword ptr [ebx+0x5E4],0
	je Block41

 Block39:
	push ebp
	call is_morph_item
	add esp,4
	test eax,eax
	jne Block52

 Block40:
	push ebp
	call is_ghost_item
	add esp,4
	test eax,eax
	jne Block52

 Block41:
	mov edi,dword ptr [esp+0x14]
	push 1
	push ebp
	mov ecx,edi
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block52

 Block42:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call CUserLocal::IsAttract
	test eax,eax
	jne Block52

 Block43:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call CUserLocal::IsStopPortion
	test eax,eax
	jne Block52

 Block44:
	mov edx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp dword ptr [edx+0x4690],eax
	jne Block52

 Block45:
	call get_field
	mov esi,dword ptr [eax+0x238]
	or ebx,0xFFFFFFFF
	test esi,esi
	jle Block50

 Block46:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edi,dword ptr [eax+0x47C8]
	cmp edi,ebx
	je Block49

 Block47:
	call get_update_time
	imul esi,0x3E8
	add esi,edi
	cmp esi,eax
	jle Block49

 Block48:
	lea ecx,[esp+0x38]
	push 0x15C1
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x38],4
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x40]
	add esp,8
	mov dword ptr [esp+0x30],ebx
	test eax,eax
	jmp Block15

 Block49:
	mov esi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call get_update_time
	mov edi,dword ptr [esp+0x14]
	mov dword ptr [esi+0x47C8],eax

 Block50:
	push 0
	push 0xC8
	mov ecx,edi
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block52

 Block51:
	push 0x4E
	lea ecx,[esp+0x1C]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x30],5
	call get_update_time
	push eax
	lea ecx,[esp+0x1C]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x38]
	push edx
	lea ecx,[esp+0x1C]
	call COutPacket::Encode2
	push ebp
	lea ecx,[esp+0x1C]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x18]
	push eax
	call CClientSocket::SendPacket
	push 1
	mov ecx,edi
	call CWvsContext::SetExclRequestSent
	push 0x29
	push ebp
	call play_item_sound
	add esp,8
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x30],ebx
	call ZArray<unsigned char>::RemoveAll

 Block52:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 8
}
}
// CWvsContext::SendShopScannerItemUseRequest
_SUB_EXCEPTION_HANDLER(5E10E0)
__SUB_CLASS_THIS(005E10E0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E10E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x30]
	mov eax,0x68DB8BAD
	imul edi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xE7
	jne Block5

 Block1:
	cmp dword ptr [esi+0x20B8],0
	jne Block5

 Block2:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block5

 Block3:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block5

 Block4:
	push 0x5A
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x28],0
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	lea eax,[esp+0xC]
	push eax
	mov ecx,esi
	call CWvsContext::RunShopScanner
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block5:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 8
}
}
// CWvsContext::SendNewYearCardUseRequest
__SUB_CLASS_THIS(005DA380, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	sub esp,8
	push ebx
	push esi
	push edi
	lea eax,[esp+0xC]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x10],0

 Block5:
	push 4
	mov ecx,ebx
	call CharacterData::GetEmptySlotCount
	test eax,eax
	jg Block7

 Block6:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push 0x10B1
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	pop edi
	pop esi
	pop ebx
	add esp,8
	ret 8

 Block7:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],0
	jne Block9

 Block8:
	mov edx,dword ptr [esp+0x1C]
	mov eax,dword ptr [esp+0x18]
	push edx
	push eax
	call CUINewYearCardSenderDlg::ShowDlg
	add esp,8

 Block9:
	pop edi
	pop esi
	pop ebx
	add esp,8
	ret 8
}
}
// CWvsContext::~CWvsContext
_SUB_EXCEPTION_HANDLER(5E9BA0)
__SUB_CLASS_THIS0(005E9BA0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E9BA0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x14],esi
	int 3// TODO: 	mov dword ptr [esi],offset CWvsContext::`vftable'
	lea ecx,[esi+0x4250]
	mov dword ptr [esp+0x20],0x68
	call ZArray<WORLDMAPQUESTDEMANDITEM>::RemoveAll
	lea ecx,[esi+0x423C]
	mov byte ptr [esp+0x20],0x67
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<unsigned long>::`vftable'
	call ZList<unsigned long>::RemoveAll
	lea ecx,[esi+0x4220]
	mov byte ptr [esp+0x20],0x66
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<CWvsContext::ITEMMSG>::`vftable'
	call ZList<CWvsContext::ITEMMSG>::RemoveAll
	mov eax,dword ptr [esi+0x41A4]
	xor ebx,ebx
	mov byte ptr [esp+0x20],0x65
	cmp eax,ebx
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov eax,dword ptr [esi+0x41A0]
	mov byte ptr [esp+0x20],0x64
	cmp eax,ebx
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	lea ecx,[esi+0x4150]
	mov byte ptr [esp+0x20],0x63
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, ZXString<char>, long>::`vftable'
	call ZMap<long, ZXString<char>, long>::RemoveAll
	lea ecx,[esi+0x412C]
	mov byte ptr [esp+0x20],0x62
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<ZList<_FILETIME>>, unsigned long>::`vftable'
	call ZMap<unsigned long, ZRef<ZList<_FILETIME>>, unsigned long>::RemoveAll
	mov eax,dword ptr [esi+0x4128]
	mov byte ptr [esp+0x20],0x61
	cmp eax,ebx
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	lea ecx,[esi+0x40EC]
	mov byte ptr [esp+0x20],0x60
	call FamilyInfo::~FamilyInfo
	lea ecx,[esi+0x40D4]
	mov byte ptr [esp+0x20],0x5F
	call ZArray<ZRef<PrivilegeItem>>::RemoveAll
	lea ecx,[esi+0x40A0]
	mov byte ptr [esp+0x20],0x5E
	call ZArray<CUIWnd *>::RemoveAll
	mov eax,dword ptr [esi+0x4094]
	mov byte ptr [esp+0x20],0x5D
	cmp eax,ebx
	je Block8

 Block7:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block8:
	mov eax,dword ptr [esi+0x4090]
	mov byte ptr [esp+0x20],0x5C
	cmp eax,ebx
	je Block10

 Block9:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block10:
	lea ecx,[esi+0x4060]
	mov byte ptr [esp+0x20],0x5B
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<unsigned short>::`vftable'
	call ZList<unsigned short>::RemoveAll
	lea ecx,[esi+0x4044]
	mov byte ptr [esp+0x20],0x5A
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<unsigned short>::`vftable'
	call ZList<unsigned short>::RemoveAll
	lea ecx,[esi+0x4028]
	mov byte ptr [esp+0x20],0x59
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, int, unsigned short>::`vftable'
	call ZMap<unsigned short, int, unsigned short>::RemoveAll
	lea ecx,[esi+0x4010]
	mov byte ptr [esp+0x20],0x58
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, int, unsigned short>::`vftable'
	call ZMap<unsigned short, int, unsigned short>::RemoveAll
	lea ecx,[esi+0x3FF8]
	mov byte ptr [esp+0x20],0x57
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, int, unsigned short>::`vftable'
	call ZMap<unsigned short, int, unsigned short>::RemoveAll
	lea ecx,[esi+0x3FD8]
	mov byte ptr [esp+0x20],0x56
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned short, ZXString<char>, unsigned short>::`vftable'
	call ZMap<unsigned short, ZXString<char>, unsigned short>::RemoveAll
	lea ecx,[esi+0x3FB4]
	mov byte ptr [esp+0x20],0x55
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	mov eax,dword ptr [esi+0x3F94]
	mov byte ptr [esp+0x20],0x54
	cmp eax,ebx
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block12:
	mov eax,dword ptr [esi+0x3F90]
	mov byte ptr [esp+0x20],0x53
	cmp eax,ebx
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	lea ecx,[esi+0x3F84]
	mov byte ptr [esp+0x20],0x52
	call ZArray<CS_LIMITGOODS>::RemoveAll
	lea ecx,[esi+0x3F80]
	mov byte ptr [esp+0x20],0x51
	call ZArray<ZRef<CS_COMMODITY>>::RemoveAll
	lea ecx,[esi+0x3F7C]
	mov byte ptr [esp+0x20],0x50
	call ZArray<ZRef<CS_COMMODITY>>::RemoveAll
	lea ecx,[esi+0x3F78]
	mov byte ptr [esp+0x20],0x4F
	call ZArray<int>::RemoveAll
	lea ecx,[esi+0x3F74]
	mov byte ptr [esp+0x20],0x4E
	call ZArray<ZXString<char>>::RemoveAll
	lea edi,[esi+0x3F68]
	mov byte ptr [esp+0x20],0x4D
	cmp dword ptr [edi+4],ebx
	je Block16

 Block15:
	push ebx
	mov ecx,edi
	call ZRef<CClock>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block16:
	lea ecx,[esi+0x3F5C]
	mov byte ptr [esp+0x20],0x4C
	call CTips::~CTips
	lea ecx,[esi+0x3F48]
	mov byte ptr [esp+0x20],0x4B
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<ZRef<CUIQuestTimer>>::`vftable'
	call ZList<ZRef<CUIQuestTimer>>::RemoveAll
	lea ecx,[esi+0x3F2C]
	mov byte ptr [esp+0x20],0x4A
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<GW_Memo>::`vftable'
	call ZList<GW_Memo>::RemoveAll
	lea edi,[esi+0x3F20]
	mov byte ptr [esp+0x20],0x49
	cmp dword ptr [edi+4],ebx
	je Block18

 Block17:
	push ebx
	mov ecx,edi
	call ZRef<CNoticeQuestProgress>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block18:
	lea ecx,[esi+0x3F1C]
	mov byte ptr [esp+0x20],0x48
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAll
	lea edi,[esi+0x3F14]
	mov byte ptr [esp+0x20],0x47
	cmp dword ptr [edi+4],ebx
	je Block20

 Block19:
	push ebx
	mov ecx,edi
	call ZRef<CUIFindFriend>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block20:
	lea edi,[esi+0x3F0C]
	mov byte ptr [esp+0x20],0x46
	cmp dword ptr [edi+4],ebx
	je Block22

 Block21:
	push ebx
	mov ecx,edi
	call ZRef<CUIAccountMoreInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block22:
	mov eax,dword ptr [esi+0x3F08]
	mov byte ptr [esp+0x20],0x45
	cmp eax,ebx
	je Block24

 Block23:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block24:
	lea edi,[esi+0x3F00]
	mov byte ptr [esp+0x20],0x44
	cmp dword ptr [edi+4],ebx
	je Block26

 Block25:
	push ebx
	mov ecx,edi
	call ZRef<CUIBattleRecord>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block26:
	lea edi,[esi+0x3EF0]
	mov byte ptr [esp+0x20],0x43
	cmp dword ptr [edi+4],ebx
	je Block28

 Block27:
	push ebx
	mov ecx,edi
	call ZRef<CUIDragonBox>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block28:
	lea edi,[esi+0x3EE8]
	mov byte ptr [esp+0x20],0x42
	cmp dword ptr [edi+4],ebx
	je Block30

 Block29:
	push ebx
	mov ecx,edi
	call ZRef<CUIOpBoardState>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block30:
	lea edi,[esi+0x3EE0]
	mov byte ptr [esp+0x20],0x41
	cmp dword ptr [edi+4],ebx
	je Block32

 Block31:
	push ebx
	mov ecx,edi
	call ZRef<CUIOperatorBoard>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block32:
	lea edi,[esi+0x3ED8]
	mov byte ptr [esp+0x20],0x40
	cmp dword ptr [edi+4],ebx
	je Block34

 Block33:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamilyChart>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block34:
	lea edi,[esi+0x3ED0]
	mov byte ptr [esp+0x20],0x3F
	cmp dword ptr [edi+4],ebx
	je Block36

 Block35:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamily>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block36:
	lea edi,[esi+0x3EC8]
	mov byte ptr [esp+0x20],0x3E
	cmp dword ptr [edi+4],ebx
	je Block38

 Block37:
	push ebx
	mov ecx,edi
	call ZRef<CUIRanking>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block38:
	lea edi,[esi+0x3EC0]
	mov byte ptr [esp+0x20],0x3D
	cmp dword ptr [edi+4],ebx
	je Block40

 Block39:
	push ebx
	mov ecx,edi
	call ZRef<CUIItemMaker>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block40:
	lea edi,[esi+0x3EB8]
	mov byte ptr [esp+0x20],0x3C
	cmp dword ptr [edi+4],ebx
	je Block42

 Block41:
	push ebx
	mov ecx,edi
	call ZRef<CUIPartySearch>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block42:
	lea edi,[esi+0x3EB0]
	mov byte ptr [esp+0x20],0x3B
	cmp dword ptr [edi+4],ebx
	je Block44

 Block43:
	push ebx
	mov ecx,edi
	call ZRef<CUIMonsterBook>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block44:
	mov eax,dword ptr [esi+0x3EAC]
	mov byte ptr [esp+0x20],0x3A
	cmp eax,ebx
	je Block49

 Block45:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block48

 Block46:
	mov eax,dword ptr [esi+0x3EAC]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esi+0x3EAC]
	cmp ecx,ebx
	je Block48

 Block47:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block48:
	mov dword ptr [esi+0x3EAC],ebx

 Block49:
	lea edi,[esi+0x3EA0]
	mov byte ptr [esp+0x20],0x39
	cmp dword ptr [edi+4],ebx
	je Block51

 Block50:
	push ebx
	mov ecx,edi
	call ZRef<CUIEnergyBar>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block51:
	lea edi,[esi+0x3E98]
	mov byte ptr [esp+0x20],0x38
	cmp dword ptr [edi+4],ebx
	je Block53

 Block52:
	push ebx
	mov ecx,edi
	call ZRef<CUIMonsterCarnival>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block53:
	lea edi,[esi+0x3E90]
	mov byte ptr [esp+0x20],0x37
	cmp dword ptr [edi+4],ebx
	je Block55

 Block54:
	push ebx
	mov ecx,edi
	call ZRef<CAvatarMegaphone>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block55:
	lea edi,[esi+0x3E88]
	mov byte ptr [esp+0x20],0x36
	cmp dword ptr [edi+4],ebx
	je Block57

 Block56:
	push ebx
	mov ecx,edi
	call ZRef<CUIGuildBBS>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block57:
	lea edi,[esi+0x3E80]
	mov byte ptr [esp+0x20],0x35
	cmp dword ptr [edi+4],ebx
	je Block59

 Block58:
	push ebx
	mov ecx,edi
	call ZRef<CUIQuestAlarm>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block59:
	lea edi,[esi+0x3E78]
	mov byte ptr [esp+0x20],0x34
	cmp dword ptr [edi+4],ebx
	je Block61

 Block60:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block61:
	lea edi,[esi+0x3E70]
	mov byte ptr [esp+0x20],0x33
	cmp dword ptr [edi+4],ebx
	je Block63

 Block62:
	push ebx
	mov ecx,edi
	call ZRef<CUIMedalQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block63:
	lea edi,[esi+0x3E68]
	mov byte ptr [esp+0x20],0x32
	cmp dword ptr [edi+4],ebx
	je Block65

 Block64:
	push ebx
	mov ecx,edi
	call ZRef<CUIQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block65:
	lea edi,[esi+0x3E60]
	mov byte ptr [esp+0x20],0x31
	cmp dword ptr [edi+4],ebx
	je Block67

 Block66:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserList>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block67:
	lea edi,[esi+0x3E58]
	mov byte ptr [esp+0x20],0x30
	cmp dword ptr [edi+4],ebx
	je Block69

 Block68:
	push ebx
	mov ecx,edi
	call ZRef<CUIKeyConfig>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block69:
	lea edi,[esi+0x3E50]
	mov byte ptr [esp+0x20],0x2F
	cmp dword ptr [edi+4],ebx
	je Block71

 Block70:
	push ebx
	mov ecx,edi
	call ZRef<CUISkillEx>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block71:
	lea edi,[esi+0x3E48]
	mov byte ptr [esp+0x20],0x2E
	cmp dword ptr [edi+4],ebx
	je Block73

 Block72:
	push ebx
	mov ecx,edi
	call ZRef<CUISkill>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block73:
	lea edi,[esi+0x3E40]
	mov byte ptr [esp+0x20],0x2D
	cmp dword ptr [edi+4],ebx
	je Block75

 Block74:
	push ebx
	mov ecx,edi
	call ZRef<CUIStat>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block75:
	lea edi,[esi+0x3E38]
	mov byte ptr [esp+0x20],0x2C
	cmp dword ptr [edi+4],ebx
	je Block77

 Block76:
	push ebx
	mov ecx,edi
	call ZRef<CUIEquip>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block77:
	lea edi,[esi+0x3E30]
	mov byte ptr [esp+0x20],0x2B
	cmp dword ptr [edi+4],ebx
	je Block79

 Block78:
	push ebx
	mov ecx,edi
	call ZRef<CUIItem>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block79:
	mov eax,dword ptr [esi+0x3E2C]
	mov byte ptr [esp+0x20],0x2A
	cmp eax,ebx
	je Block84

 Block80:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block83

 Block81:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block83

 Block82:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block83:
	mov dword ptr [esi+0x3E2C],ebx

 Block84:
	mov eax,dword ptr [esi+0x3E24]
	mov byte ptr [esp+0x20],0x29
	cmp eax,ebx
	je Block89

 Block85:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block88

 Block86:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block88

 Block87:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block88:
	mov dword ptr [esi+0x3E24],ebx

 Block89:
	mov eax,dword ptr [esi+0x3E1C]
	mov byte ptr [esp+0x20],0x28
	cmp eax,ebx
	je Block94

 Block90:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block93

 Block91:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block93

 Block92:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block93:
	mov dword ptr [esi+0x3E1C],ebx

 Block94:
	mov eax,dword ptr [esi+0x3E14]
	mov byte ptr [esp+0x20],0x27
	cmp eax,ebx
	je Block99

 Block95:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block98

 Block96:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block98

 Block97:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block98:
	mov dword ptr [esi+0x3E14],ebx

 Block99:
	mov eax,dword ptr [esi+0x3E0C]
	mov byte ptr [esp+0x20],0x26
	cmp eax,ebx
	je Block104

 Block100:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block103

 Block101:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block103

 Block102:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block103:
	mov dword ptr [esi+0x3E0C],ebx

 Block104:
	mov eax,dword ptr [esi+0x3E04]
	mov byte ptr [esp+0x20],0x25
	cmp eax,ebx
	je Block109

 Block105:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block108

 Block106:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block108

 Block107:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block108:
	mov dword ptr [esi+0x3E04],ebx

 Block109:
	mov eax,dword ptr [esi+0x3DFC]
	mov byte ptr [esp+0x20],0x24
	cmp eax,ebx
	je Block114

 Block110:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block113

 Block111:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block113

 Block112:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block113:
	mov dword ptr [esi+0x3DFC],ebx

 Block114:
	mov eax,dword ptr [esi+0x3DF4]
	mov byte ptr [esp+0x20],0x23
	cmp eax,ebx
	je Block119

 Block115:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block118

 Block116:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block118

 Block117:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block118:
	mov dword ptr [esi+0x3DF4],ebx

 Block119:
	mov eax,dword ptr [esi+0x3DEC]
	mov byte ptr [esp+0x20],0x22
	cmp eax,ebx
	je Block124

 Block120:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block123

 Block121:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block123

 Block122:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block123:
	mov dword ptr [esi+0x3DEC],ebx

 Block124:
	mov eax,dword ptr [esi+0x3DE4]
	mov byte ptr [esp+0x20],0x21
	cmp eax,ebx
	je Block129

 Block125:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block128

 Block126:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block128

 Block127:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block128:
	mov dword ptr [esi+0x3DE4],ebx

 Block129:
	mov eax,dword ptr [esi+0x3DDC]
	mov byte ptr [esp+0x20],0x20
	cmp eax,ebx
	je Block134

 Block130:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block133

 Block131:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block133

 Block132:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block133:
	mov dword ptr [esi+0x3DDC],ebx

 Block134:
	mov eax,dword ptr [esi+0x3DD4]
	mov byte ptr [esp+0x20],0x1F
	cmp eax,ebx
	je Block139

 Block135:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block138

 Block136:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block138

 Block137:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block138:
	mov dword ptr [esi+0x3DD4],ebx

 Block139:
	mov eax,dword ptr [esi+0x3DC0]
	mov byte ptr [esp+0x20],0x1E
	cmp eax,ebx
	je Block141

 Block140:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block141:
	mov eax,dword ptr [esi+0x3D7C]
	mov byte ptr [esp+0x20],0x1D
	cmp eax,ebx
	je Block143

 Block142:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block143:
	mov eax,dword ptr [esi+0x3D70]
	mov byte ptr [esp+0x20],0x1C
	cmp eax,ebx
	je Block145

 Block144:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block145:
	mov eax,dword ptr [esi+0x3D64]
	mov byte ptr [esp+0x20],0x1B
	cmp eax,ebx
	je Block147

 Block146:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block147:
	mov eax,dword ptr [esi+0x3D58]
	mov byte ptr [esp+0x20],0x1A
	cmp eax,ebx
	je Block149

 Block148:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block149:
	mov eax,dword ptr [esi+0x3D4C]
	mov byte ptr [esp+0x20],0x19
	cmp eax,ebx
	je Block151

 Block150:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block151:
	mov eax,dword ptr [esi+0x3D40]
	mov byte ptr [esp+0x20],0x18
	cmp eax,ebx
	je Block153

 Block152:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block153:
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push 5
	push 8
	lea eax,[esi+0x3C50]
	push eax
	mov byte ptr [esp+0x30],0x17
	call __eh_vector_dtor_iterator
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push 4
	push 8
	lea ecx,[esi+0x3C30]
	push ecx
	mov byte ptr [esp+0x30],0x16
	call __eh_vector_dtor_iterator
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push 0x3C
	push 8
	lea edx,[esi+0x3A50]
	push edx
	mov byte ptr [esp+0x30],0x15
	call __eh_vector_dtor_iterator
	push offset ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push 0x3C
	push 8
	lea eax,[esi+0x3870]
	push eax
	mov byte ptr [esp+0x30],0x14
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0x386C]
	mov byte ptr [esp+0x20],0x13
	cmp eax,ebx
	je Block155

 Block154:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block155:
	mov eax,dword ptr [esi+0x3858]
	mov byte ptr [esp+0x20],0x12
	cmp eax,ebx
	je Block157

 Block156:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block157:
	lea ecx,[esi+0x384C]
	mov byte ptr [esp+0x20],0x11
	call ZArray<GUILDDATA>::RemoveAll
	lea ecx,[esi+0x3834]
	mov byte ptr [esp+0x20],0x10
	call ALLIANCEDATA::~ALLIANCEDATA
	push offset ZXString<unsigned short>::~ZXString<unsigned short>
	push 1
	push 4
	lea ecx,[esi+0x382C]
	push ecx
	mov byte ptr [esp+0x30],0xF
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0x3824]
	mov byte ptr [esp+0x20],0xE
	cmp eax,ebx
	je Block159

 Block158:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block159:
	mov eax,dword ptr [esi+0x381C]
	mov byte ptr [esp+0x20],0xD
	cmp eax,ebx
	je Block161

 Block160:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block161:
	mov eax,dword ptr [esi+0x3814]
	mov byte ptr [esp+0x20],0xC
	cmp eax,ebx
	je Block163

 Block162:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block163:
	lea ecx,[esi+0x37C8]
	mov byte ptr [esp+0x20],0xB
	call GUILDDATA::~GUILDDATA
	mov eax,dword ptr [esi+0x37C4]
	mov byte ptr [esp+0x20],0xA
	cmp eax,ebx
	je Block165

 Block164:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block165:
	mov eax,dword ptr [esi+0x37C0]
	mov byte ptr [esp+0x20],9
	cmp eax,ebx
	je Block167

 Block166:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block167:
	lea edi,[esi+0x37B8]
	mov byte ptr [esp+0x20],8
	cmp dword ptr [edi+4],ebx
	je Block169

 Block168:
	push ebx
	mov ecx,edi
	call ZRef<CPartySearch_RemoCon>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block169:
	mov eax,dword ptr [esi+0x3788]
	mov byte ptr [esp+0x20],7
	cmp eax,ebx
	je Block174

 Block170:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block173

 Block171:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block173

 Block172:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block173:
	mov dword ptr [esi+0x3788],ebx

 Block174:
	lea ecx,[esi+0x35D4]
	mov byte ptr [esp+0x20],6
	call CTemporaryStatView::~CTemporaryStatView
	push offset ZRef<TemporaryStatBase<long>>::~ZRef<TemporaryStatBase<long>>
	push 7
	push 8
	lea eax,[esi+0x3500]
	push eax
	mov byte ptr [esp+0x30],5
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0x20CC]
	mov byte ptr [esp+0x20],4
	cmp eax,ebx
	je Block179

 Block175:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block178

 Block176:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block178

 Block177:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block178:
	mov dword ptr [esi+0x20CC],ebx

 Block179:
	mov eax,dword ptr [esi+0x2054]
	mov byte ptr [esp+0x20],3
	cmp eax,ebx
	je Block181

 Block180:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block181:
	mov eax,dword ptr [esi+0x2050]
	mov byte ptr [esp+0x20],2
	cmp eax,ebx
	je Block183

 Block182:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block183:
	mov eax,dword ptr [esi+0x204C]
	mov byte ptr [esp+0x20],1
	cmp eax,ebx
	je Block185

 Block184:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block185:
	mov esi,dword ptr [esi+0x2040]
	mov byte ptr [esp+0x20],bl
	cmp esi,ebx
	je Block187

 Block186:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block187:
	mov dword ptr [TSingleton<CWvsContext>::ms_pInstance],ebx
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x10
	ret
}
}
// CWvsContext::SendHyperUpgradeItemUseRequest
_SUB_EXCEPTION_HANDLER(5D6130)
__SUB_CLASS_THIS(005D6130, __thiscall, 8241,  CWvsContext, void, long, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D6130
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block10

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block10

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block10

 Block3:
	push 0x5E
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	mov edi,dword ptr [esp+0x34]
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode1
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	mov dword ptr [esi+0x20BC],eax
	test edi,edi
	je Block9

 Block4:
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	test eax,eax
	je Block7

 Block5:
	mov edx,dword ptr [eax+4]
	lea ecx,[eax+4]
	mov eax,dword ptr [edx+0x48]
	push offset CUIEnchantDlg::ms_RTTI_CUIEnchantDlg
	call eax
	test eax,eax
	je Block7

 Block6:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	jmp Block8

 Block7:
	xor ecx,ecx

 Block8:
	call CUIEnchantDlg::ShowEffect

 Block9:
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block10:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 0xC
}
}
// CUISkillChangeConfirm::OnButtonClicked
__SUB_CLASS_THIS(005DFFB0, __thiscall, 68690,  CUISkillChangeConfirm, void, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,1
	jne Block2

 Block1:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],1
	jmp edx

 Block2:
	cmp eax,2
	jne Block4

 Block3:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],2
	jmp edx

 Block4:
	cmp eax,8
	jne Block6

 Block5:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],8
	jmp edx

 Block6:
	ret 4
}
}
// CUISkillChangeConfirm::Draw
_SUB_EXCEPTION_HANDLER(456CA0)
__SUB_CLASS_THIS(00456CA0, __thiscall, 68691,  CUISkillChangeConfirm, void, const tagRECT*) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x6C]
	sub esp,0x6C
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_456CA0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x80
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x68],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [ebp+0x74]
	push eax
	call CWnd::Draw
	mov ecx,dword ptr [esi+0xAC]
	xor edi,edi
	push edi
	push ecx
	mov ecx,esi
	call CUISkillChangeConfirm::DrawTab
	mov edx,dword ptr [esi+0xB0]
	push 0x40
	push edx
	mov ecx,esi
	call CUISkillChangeConfirm::DrawTab
	lea eax,[ebp+0x38]
	push eax
	mov ecx,esi
	call CWnd::GetCanvas
	lea ecx,[ebp+0x3C]
	push 1
	push ecx
	mov dword ptr [ebp-4],edi
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[ebp+0x10]
	push edx
	mov byte ptr [ebp-4],1
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov dword ptr [ebp+0x2C],eax
	mov eax,dword ptr [ebp+0x14]
	cmp eax,edi
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [ebp+0x14],0
	xor edi,edi

 Block5:
	mov ecx,dword ptr [esi+0xAC]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkill
	mov edx,dword ptr [esi+0xB0]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	mov dword ptr [ebp+0x30],eax
	call CSkillInfo::GetSkill
	mov dword ptr [ebp+0x28],eax
	cmp dword ptr [ebp+0x30],edi
	je Block241

 Block6:
	cmp eax,edi
	je Block241

 Block7:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x2C]
	push eax
	call esi
	lea ecx,[ebp-0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block9

 Block8:
	push eax
	call _com_issue_error

 Block9:
	lea edx,[ebp]
	push edx
	mov byte ptr [ebp-4],2
	call esi
	lea eax,[ebp]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block11

 Block10:
	push eax
	call _com_issue_error

 Block11:
	push edi
	push edi
	lea ecx,[ebp-0x2C]
	push ecx
	lea edx,[ebp]
	push edx
	push ecx
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	push offset _S_UIUIWINDOW2IMGRE__14
	mov byte ptr [ebp-4],3
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],4
	cmp dword ptr [_D_G_RM],edi
	jne Block13

 Block12:
	push 0x80004003
	call _com_issue_error

 Block13:
	lea eax,[ebp-0x6C]
	mov byte ptr [ebp-4],3
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x1C]
	mov dword ptr [ebp+0x1C],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block16

 Block14:
	cmp eax,0x80004002
	je Block16

 Block15:
	push eax
	call _com_issue_error

 Block16:
	cmp word ptr [ebp-0x6C],8
	mov ebx,dword ptr [ZImports::_VariantClear]
	mov byte ptr [ebp-4],7
	jne Block19

 Block17:
	mov eax,dword ptr [ebp-0x64]
	xor ecx,ecx
	mov word ptr [ebp-0x6C],cx
	cmp eax,edi
	je Block20

 Block18:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block20

 Block19:
	lea edx,[ebp-0x6C]
	push edx
	call ebx

 Block20:
	cmp word ptr [ebp],8
	mov byte ptr [ebp-4],8
	jne Block23

 Block21:
	xor eax,eax
	mov word ptr [ebp],ax
	mov eax,dword ptr [ebp+8]
	cmp eax,edi
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea ecx,[ebp]
	push ecx
	call ebx

 Block24:
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],9
	jne Block27

 Block25:
	mov eax,dword ptr [ebp-0x24]
	xor edx,edx
	mov word ptr [ebp-0x2C],dx
	cmp eax,edi
	je Block28

 Block26:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block28

 Block27:
	lea eax,[ebp-0x2C]
	push eax
	call ebx

 Block28:
	lea ecx,[ebp-0x4C]
	push ecx
	call esi
	lea edx,[ebp-0x4C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block30

 Block29:
	push eax
	call _com_issue_error

 Block30:
	lea eax,[ebp-0x1C]
	push eax
	mov byte ptr [ebp-4],0xA
	call esi
	lea ecx,[ebp-0x1C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block32

 Block31:
	push eax
	call _com_issue_error

 Block32:
	push edi
	push edi
	lea edx,[ebp-0x4C]
	push edx
	lea eax,[ebp-0x1C]
	push eax
	push ecx
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	push offset _S_UIUIWINDOW2IMGRE__13
	mov byte ptr [ebp-4],0xB
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],0xC
	cmp dword ptr [_D_G_RM],edi
	jne Block34

 Block33:
	push 0x80004003
	call _com_issue_error

 Block34:
	lea ecx,[ebp-0x7C]
	push ecx
	mov byte ptr [ebp-4],0xB
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xD
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x24]
	mov dword ptr [ebp+0x24],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block37

 Block35:
	cmp eax,0x80004002
	je Block37

 Block36:
	push eax
	call _com_issue_error

 Block37:
	cmp word ptr [ebp-0x7C],8
	mov byte ptr [ebp-4],0xF
	jne Block40

 Block38:
	mov eax,dword ptr [ebp-0x74]
	xor edx,edx
	mov word ptr [ebp-0x7C],dx
	cmp eax,edi
	je Block41

 Block39:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block41

 Block40:
	lea eax,[ebp-0x7C]
	push eax
	call ebx

 Block41:
	cmp word ptr [ebp-0x1C],8
	mov byte ptr [ebp-4],0x10
	jne Block44

 Block42:
	mov eax,dword ptr [ebp-0x14]
	xor ecx,ecx
	mov word ptr [ebp-0x1C],cx
	cmp eax,edi
	je Block45

 Block43:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block45

 Block44:
	lea edx,[ebp-0x1C]
	push edx
	call ebx

 Block45:
	cmp word ptr [ebp-0x4C],8
	mov byte ptr [ebp-4],0x11
	jne Block48

 Block46:
	xor eax,eax
	mov word ptr [ebp-0x4C],ax
	mov eax,dword ptr [ebp-0x44]
	cmp eax,edi
	je Block49

 Block47:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block49

 Block48:
	lea ecx,[ebp-0x4C]
	push ecx
	call ebx

 Block49:
	lea edx,[ebp-0x5C]
	push edx
	call esi
	lea eax,[ebp-0x5C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	lea ecx,[ebp-0x3C]
	push ecx
	mov byte ptr [ebp-4],0x12
	call esi
	lea edx,[ebp-0x3C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block53

 Block52:
	push eax
	call _com_issue_error

 Block53:
	push edi
	push edi
	lea eax,[ebp-0x5C]
	push eax
	lea ecx,[ebp-0x3C]
	push ecx
	push ecx
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	mov bl,0x13
	push offset _S_UIUIWINDOW2IMGRE__12
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],0x14
	cmp dword ptr [_D_G_RM],edi
	jne Block55

 Block54:
	push 0x80004003
	call _com_issue_error

 Block55:
	lea edx,[ebp-0x8C]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x15
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x18]
	mov dword ptr [ebp+0x18],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block58

 Block56:
	cmp eax,0x80004002
	je Block58

 Block57:
	push eax
	call _com_issue_error

 Block58:
	mov esi,8
	mov byte ptr [ebp-4],0x17
	cmp word ptr [ebp-0x8C],si
	jne Block61

 Block59:
	xor eax,eax
	mov word ptr [ebp-0x8C],ax
	mov eax,dword ptr [ebp-0x84]
	cmp eax,edi
	je Block62

 Block60:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block62

 Block61:
	lea ecx,[ebp-0x8C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block62:
	mov byte ptr [ebp-4],0x18
	cmp word ptr [ebp-0x3C],si
	jne Block65

 Block63:
	mov eax,dword ptr [ebp-0x34]
	xor edx,edx
	mov word ptr [ebp-0x3C],dx
	cmp eax,edi
	je Block66

 Block64:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block66

 Block65:
	lea eax,[ebp-0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block66:
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp-0x5C],si
	jne Block69

 Block67:
	mov eax,dword ptr [ebp-0x54]
	xor ecx,ecx
	mov word ptr [ebp-0x5C],cx
	cmp eax,edi
	je Block70

 Block68:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block70

 Block69:
	lea edx,[ebp-0x5C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block70:
	mov eax,3
	mov esi,0xFF
	mov word ptr [ebp+0x44],ax
	mov dword ptr [ebp+0x4C],esi
	mov edi,dword ptr [ebp+0x38]
	mov byte ptr [ebp-4],0x1A
	test edi,edi
	jne Block72

 Block71:
	push 0x80004003
	call _com_issue_error

 Block72:
	mov edx,dword ptr [ebp+0x24]
	lea ecx,[ebp+0x44]
	push ecx
	push edx
	push 0x4F
	push 9
	mov ecx,edi
	call IWzCanvas::Copy
	mov ebx,8
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp+0x44],bx
	jne Block75

 Block73:
	xor eax,eax
	mov word ptr [ebp+0x44],ax
	mov eax,dword ptr [ebp+0x4C]
	test eax,eax
	je Block76

 Block74:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block76

 Block75:
	lea ecx,[ebp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block76:
	mov edx,3
	mov word ptr [ebp+0x44],dx
	mov dword ptr [ebp+0x4C],esi
	mov ecx,dword ptr [ebp+0x1C]
	lea eax,[ebp+0x44]
	push eax
	push ecx
	push 0x8F
	push 9
	mov ecx,edi
	mov byte ptr [ebp-4],0x1B
	call IWzCanvas::Copy
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp+0x44],bx
	jne Block79

 Block77:
	mov eax,dword ptr [ebp+0x4C]
	xor edx,edx
	mov word ptr [ebp+0x44],dx
	test eax,eax
	je Block80

 Block78:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block80

 Block79:
	lea eax,[ebp+0x44]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block80:
	mov eax,dword ptr [ebp+0x30]
	add eax,4
	push eax
	lea ecx,[ebp+0x34]
	mov dword ptr [ebp+0x34],0
	call ZXString<char>::op_assign
	push 0x68
	push ecx
	mov ecx,dword ptr [ebp+0x3C]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [ebp+0x3C]
	mov byte ptr [ebp-4],0x1C
	mov dword ptr [ebp+0x64],esp
	test eax,eax
	je Block82

 Block81:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block82:
	lea ecx,[ebp+0x34]
	push ecx
	call format_string_1
	mov esi,dword ptr [ZImports::_VariantInit]
	add esp,0xC
	lea edx,[ebp+0x54]
	push edx
	call esi
	lea eax,[ebp+0x54]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block84

 Block83:
	push eax
	call _com_issue_error

 Block84:
	lea ecx,[ebp+0x44]
	push ecx
	mov byte ptr [ebp-4],0x1D
	call esi
	lea edx,[ebp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block86

 Block85:
	push eax
	call _com_issue_error

 Block86:
	mov edx,dword ptr [ebp+0x34]
	lea eax,[ebp+0x54]
	push eax
	lea ecx,[ebp+0x44]
	push ecx
	push edi
	push ecx
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	mov bl,0x1E
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x3C]
	mov byte ptr [ebp-4],0x1F
	test ecx,ecx
	jne Block88

 Block87:
	push 0x80004003
	call _com_issue_error

 Block88:
	push 0x52
	push 0x31
	mov byte ptr [ebp-4],bl
	call IWzFont::DrawTextA
	cmp word ptr [ebp+0x44],8
	mov byte ptr [ebp-4],0x1D
	jne Block95

 Block89:
	xor eax,eax
	mov word ptr [ebp+0x44],ax
	mov eax,dword ptr [ebp+0x4C]
	test eax,eax
	je Block91

 Block90:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block91:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block92:
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x1C
	jne Block96

 Block93:
	mov eax,dword ptr [ebp+0x5C]
	xor edx,edx
	mov word ptr [ebp+0x54],dx
	test eax,eax
	je Block97

 Block94:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block97

 Block95:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea ecx,[ebp+0x44]
	push ecx
	call esi
	jmp Block92

 Block96:
	lea eax,[ebp+0x54]
	push eax
	call esi

 Block97:
	mov ecx,dword ptr [ebp+0x28]
	add ecx,4
	push ecx
	lea ecx,[ebp+0x34]
	call ZXString<char>::op_assign
	mov edx,dword ptr [ebp+0x3C]
	push 0x68
	push ecx
	mov eax,esp
	mov dword ptr [eax],edx
	mov eax,dword ptr [ebp+0x3C]
	mov dword ptr [ebp+0x64],esp
	test eax,eax
	je Block99

 Block98:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block99:
	lea eax,[ebp+0x34]
	push eax
	call format_string_1
	mov ebx,dword ptr [ZImports::_VariantInit]
	add esp,0xC
	lea ecx,[ebp+0x44]
	push ecx
	call ebx
	lea edx,[ebp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block101

 Block100:
	push eax
	call _com_issue_error

 Block101:
	lea eax,[ebp+0x54]
	push eax
	mov byte ptr [ebp-4],0x20
	call ebx
	lea ecx,[ebp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block103

 Block102:
	push eax
	call _com_issue_error

 Block103:
	lea edx,[ebp+0x44]
	push edx
	mov edx,dword ptr [ebp+0x34]
	lea eax,[ebp+0x54]
	push eax
	push edi
	push ecx
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	mov bl,0x21
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x3C]
	mov byte ptr [ebp-4],0x22
	test ecx,ecx
	jne Block105

 Block104:
	push 0x80004003
	call _com_issue_error

 Block105:
	push 0x92
	push 0x31
	mov byte ptr [ebp-4],bl
	call IWzFont::DrawTextA
	mov edi,8
	mov byte ptr [ebp-4],0x20
	cmp word ptr [ebp+0x54],di
	jne Block108

 Block106:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block109

 Block107:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block109

 Block108:
	lea ecx,[ebp+0x54]
	push ecx
	call esi

 Block109:
	mov byte ptr [ebp-4],0x1C
	cmp word ptr [ebp+0x44],di
	jne Block112

 Block110:
	mov eax,dword ptr [ebp+0x4C]
	xor edx,edx
	mov word ptr [ebp+0x44],dx
	test eax,eax
	je Block113

 Block111:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block113

 Block112:
	lea eax,[ebp+0x44]
	push eax
	call esi

 Block113:
	mov dword ptr [ebp+0x20],0
	lea ecx,[ebp+0x40]
	push 0xBA4
	push ecx
	mov byte ptr [ebp-4],0x23
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push 1
	push eax
	lea edx,[ebp+0x20]
	push edx
	mov byte ptr [ebp-4],0x24
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x40]
	add esp,0xC
	mov byte ptr [ebp-4],0x23
	test eax,eax
	je Block115

 Block114:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block115:
	mov ecx,dword ptr [ebp+0x30]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea eax,[ebp+0x30]
	push eax
	mov eax,dword ptr [ebp+0x2C]
	push edx
	push eax
	call CSkillInfo::GetSkillLevel_0
	lea ecx,[ebp+0x54]
	push ecx
	mov esi,eax
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp+0x54]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block117

 Block116:
	push eax
	call _com_issue_error

 Block117:
	mov bl,0x25
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov eax,esp
	lea ecx,[ebp+0x54]
	push ecx
	push 0xA
	push eax
	inc esi
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea edx,[ebp+0x40]
	push 6
	push edx
	mov byte ptr [ebp-4],0x26
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	jne Block119

 Block118:
	push 0x80004003
	call _com_issue_error

 Block119:
	mov byte ptr [ebp-4],0x28
	call IWzFont::CalcTextWidth
	mov edi,eax
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block121

 Block120:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block121:
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x23
	jne Block124

 Block122:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block125

 Block123:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block125

 Block124:
	lea ecx,[ebp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block125:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp+0x44]
	push edx
	call ebx
	lea eax,[ebp+0x44]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block127

 Block126:
	push eax
	call _com_issue_error

 Block127:
	lea ecx,[ebp+0x54]
	push ecx
	mov byte ptr [ebp-4],0x29
	call ebx
	lea edx,[ebp+0x54]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block129

 Block128:
	push eax
	call _com_issue_error

 Block129:
	mov bl,0x2A
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov eax,esp
	lea ecx,[ebp+0x44]
	push ecx
	mov ecx,dword ptr [ebp+0x38]
	lea edx,[ebp+0x54]
	push edx
	push ecx
	push 0xA
	push eax
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea edx,[ebp+0x40]
	push 6
	push edx
	mov byte ptr [ebp-4],0x2B
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x2C
	test ecx,ecx
	jne Block131

 Block130:
	push 0x80004003
	call _com_issue_error

 Block131:
	push 0x64
	push 0x31
	mov byte ptr [ebp-4],0x2D
	call IWzFont::DrawTextA
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block133

 Block132:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block133:
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x29
	jne Block140

 Block134:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block136

 Block135:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block136:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block137:
	cmp word ptr [ebp+0x44],8
	mov byte ptr [ebp-4],0x23
	jne Block141

 Block138:
	mov eax,dword ptr [ebp+0x4C]
	xor edx,edx
	mov word ptr [ebp+0x44],dx
	test eax,eax
	je Block142

 Block139:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block142

 Block140:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea ecx,[ebp+0x54]
	push ecx
	call esi
	jmp Block137

 Block141:
	lea eax,[ebp+0x44]
	push eax
	call esi

 Block142:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp+0x44]
	push ecx
	call ebx
	lea edx,[ebp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block144

 Block143:
	push eax
	call _com_issue_error

 Block144:
	lea eax,[ebp+0x54]
	push eax
	mov byte ptr [ebp-4],0x2E
	call ebx
	lea ecx,[ebp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block146

 Block145:
	push eax
	call _com_issue_error

 Block146:
	mov ecx,dword ptr [ebp+0x38]
	lea edx,[ebp+0x44]
	push edx
	mov edx,dword ptr [ebp+0x20]
	lea eax,[ebp+0x54]
	push eax
	push ecx
	push ecx
	mov dword ptr [ebp+0x64],esp
	mov ecx,esp
	mov bl,0x2F
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	lea eax,[ebp+0x40]
	push 0x47
	push eax
	mov byte ptr [ebp-4],0x30
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x31
	test ecx,ecx
	jne Block148

 Block147:
	push 0x80004003
	call _com_issue_error

 Block148:
	push 0x64
	add edi,0x35
	push edi
	mov byte ptr [ebp-4],0x32
	call IWzFont::DrawTextA
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block150

 Block149:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block150:
	mov edi,8
	mov byte ptr [ebp-4],0x2E
	cmp word ptr [ebp+0x54],di
	jne Block153

 Block151:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block154

 Block152:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block154

 Block153:
	lea ecx,[ebp+0x54]
	push ecx
	call esi

 Block154:
	mov byte ptr [ebp-4],0x23
	cmp word ptr [ebp+0x44],di
	jne Block157

 Block155:
	mov eax,dword ptr [ebp+0x4C]
	xor edx,edx
	mov word ptr [ebp+0x44],dx
	test eax,eax
	je Block158

 Block156:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block158

 Block157:
	lea eax,[ebp+0x44]
	push eax
	call esi

 Block158:
	mov dword ptr [ebp+0x40],0
	lea ecx,[ebp+0x64]
	push 0xBA3
	push ecx
	mov byte ptr [ebp-4],0x33
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push 1
	push eax
	lea edx,[ebp+0x40]
	push edx
	mov byte ptr [ebp-4],0x34
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x64]
	add esp,0xC
	mov byte ptr [ebp-4],0x33
	test eax,eax
	je Block160

 Block159:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block160:
	mov ecx,dword ptr [ebp+0x28]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea eax,[ebp+0x28]
	push eax
	mov eax,dword ptr [ebp+0x2C]
	push edx
	push eax
	call CSkillInfo::GetSkillLevel_0
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp+0x54]
	push ecx
	mov esi,eax
	call edi
	lea edx,[ebp+0x54]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block162

 Block161:
	push eax
	call _com_issue_error

 Block162:
	mov bl,0x35
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov eax,esp
	lea ecx,[ebp+0x54]
	push ecx
	push 0xA
	push eax
	dec esi
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x2C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea edx,[ebp+0x64]
	push 4
	push edx
	mov byte ptr [ebp-4],0x36
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x37
	test ecx,ecx
	jne Block164

 Block163:
	push 0x80004003
	call _com_issue_error

 Block164:
	mov byte ptr [ebp-4],0x38
	call IWzFont::CalcTextWidth
	mov dword ptr [ebp+0x2C],eax
	mov eax,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block166

 Block165:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block166:
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x33
	jne Block169

 Block167:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block170

 Block168:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block170

 Block169:
	lea ecx,[ebp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block170:
	lea edx,[ebp+0x44]
	push edx
	call edi
	lea eax,[ebp+0x44]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block172

 Block171:
	push eax
	call _com_issue_error

 Block172:
	lea ecx,[ebp+0x54]
	push ecx
	mov byte ptr [ebp-4],0x39
	call edi
	lea edx,[ebp+0x54]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block174

 Block173:
	push eax
	call _com_issue_error

 Block174:
	mov bl,0x3A
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov edi,dword ptr [ebp+0x38]
	mov eax,esp
	lea ecx,[ebp+0x44]
	push ecx
	lea edx,[ebp+0x54]
	push edx
	push edi
	push 0xA
	push eax
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x14],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea eax,[ebp+0x64]
	push 4
	push eax
	mov byte ptr [ebp-4],0x3B
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x3C
	test ecx,ecx
	jne Block176

 Block175:
	push 0x80004003
	call _com_issue_error

 Block176:
	push 0xA4
	push 0x31
	mov byte ptr [ebp-4],0x3D
	call IWzFont::DrawTextA
	mov eax,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block178

 Block177:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block178:
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x39
	jne Block185

 Block179:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block181

 Block180:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block181:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block182:
	cmp word ptr [ebp+0x44],8
	mov byte ptr [ebp-4],0x33
	jne Block186

 Block183:
	mov eax,dword ptr [ebp+0x4C]
	xor edx,edx
	mov word ptr [ebp+0x44],dx
	test eax,eax
	je Block187

 Block184:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block187

 Block185:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea ecx,[ebp+0x54]
	push ecx
	call esi
	jmp Block182

 Block186:
	lea eax,[ebp+0x44]
	push eax
	call esi

 Block187:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp+0x44]
	push ecx
	call ebx
	lea edx,[ebp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block189

 Block188:
	push eax
	call _com_issue_error

 Block189:
	lea eax,[ebp+0x54]
	push eax
	mov byte ptr [ebp-4],0x3E
	call ebx
	lea ecx,[ebp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block191

 Block190:
	push eax
	call _com_issue_error

 Block191:
	lea edx,[ebp+0x44]
	push edx
	mov edx,dword ptr [ebp+0x40]
	lea eax,[ebp+0x54]
	push eax
	push edi
	push ecx
	mov dword ptr [ebp+0x14],esp
	mov ecx,esp
	mov bl,0x3F
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	lea eax,[ebp+0x64]
	push 0x46
	push eax
	mov byte ptr [ebp-4],0x40
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x41
	test ecx,ecx
	jne Block193

 Block192:
	push 0x80004003
	call _com_issue_error

 Block193:
	mov edx,dword ptr [ebp+0x2C]
	push 0xA4
	add edx,0x35
	push edx
	mov byte ptr [ebp-4],0x42
	call IWzFont::DrawTextA
	mov eax,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block195

 Block194:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block195:
	mov edi,8
	mov byte ptr [ebp-4],0x3E
	cmp word ptr [ebp+0x54],di
	jne Block198

 Block196:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block199

 Block197:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block199

 Block198:
	lea ecx,[ebp+0x54]
	push ecx
	call esi

 Block199:
	mov byte ptr [ebp-4],0x33
	cmp word ptr [ebp+0x44],di
	jne Block202

 Block200:
	mov eax,dword ptr [ebp+0x4C]
	xor edx,edx
	mov word ptr [ebp+0x44],dx
	test eax,eax
	je Block203

 Block201:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block203

 Block202:
	lea eax,[ebp+0x44]
	push eax
	call esi

 Block203:
	mov ecx,dword ptr [ebp+0x30]
	mov esi,dword ptr [ecx+0x25C]
	mov dword ptr [ebp+0x64],esi
	test esi,esi
	je Block205

 Block204:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+4]
	push esi
	call eax

 Block205:
	mov ecx,3
	mov edi,0xFF
	mov word ptr [ebp+0x54],cx
	mov dword ptr [ebp+0x5C],edi
	mov ecx,dword ptr [ebp+0x38]
	lea edx,[ebp+0x54]
	push edx
	push esi
	push 0x51
	push 0xB
	mov byte ptr [ebp-4],0x44
	call IWzCanvas::Copy
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x43
	jne Block208

 Block206:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block209

 Block207:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block209

 Block208:
	lea ecx,[ebp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block209:
	mov edx,dword ptr [ebp+0x28]
	mov eax,dword ptr [edx+0x25C]
	cmp esi,eax
	je Block214

 Block210:
	mov ebx,esi
	mov esi,eax
	mov dword ptr [ebp+0x64],esi
	test eax,eax
	je Block212

 Block211:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block212:
	test ebx,ebx
	je Block214

 Block213:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block214:
	mov edx,3
	mov word ptr [ebp+0x54],dx
	mov dword ptr [ebp+0x5C],edi
	mov ecx,dword ptr [ebp+0x38]
	lea eax,[ebp+0x54]
	push eax
	push esi
	push 0x91
	push 0xB
	mov byte ptr [ebp-4],0x45
	call IWzCanvas::Copy
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x43
	jne Block217

 Block215:
	mov eax,dword ptr [ebp+0x5C]
	xor ecx,ecx
	mov word ptr [ebp+0x54],cx
	test eax,eax
	je Block218

 Block216:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block218

 Block217:
	lea edx,[ebp+0x54]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block218:
	lea eax,[ebp+0x54]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block220

 Block219:
	push eax
	call _com_issue_error

 Block220:
	mov ebx,dword ptr [ebp+0x18]
	mov edi,dword ptr [ebp+0x38]
	lea edx,[ebp+0x54]
	push edx
	push ebx
	push 0x74
	push 9
	mov ecx,edi
	mov byte ptr [ebp-4],0x46
	call IWzCanvas::Copy
	cmp word ptr [ebp+0x54],8
	mov byte ptr [ebp-4],0x43
	jne Block223

 Block221:
	xor eax,eax
	mov word ptr [ebp+0x54],ax
	mov eax,dword ptr [ebp+0x5C]
	test eax,eax
	je Block224

 Block222:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block224

 Block223:
	lea ecx,[ebp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block224:
	mov byte ptr [ebp-4],0x33
	test esi,esi
	je Block226

 Block225:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block226:
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],0x23
	test eax,eax
	je Block228

 Block227:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block228:
	mov eax,dword ptr [ebp+0x20]
	mov byte ptr [ebp-4],0x1C
	test eax,eax
	je Block230

 Block229:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block230:
	mov eax,dword ptr [ebp+0x34]
	mov byte ptr [ebp-4],0x19
	test eax,eax
	je Block232

 Block231:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block232:
	mov byte ptr [ebp-4],0x11
	test ebx,ebx
	je Block234

 Block233:
	mov ecx,dword ptr [ebx]
	mov edx,dword ptr [ecx+8]
	push ebx
	call edx

 Block234:
	mov eax,dword ptr [ebp+0x24]
	mov byte ptr [ebp-4],9
	test eax,eax
	je Block236

 Block235:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block236:
	mov eax,dword ptr [ebp+0x1C]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block238

 Block237:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block238:
	mov eax,dword ptr [ebp+0x3C]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block240

 Block239:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block240:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ecx
	jmp Block245

 Block241:
	mov eax,dword ptr [ebp+0x3C]
	mov byte ptr [ebp-4],0
	cmp eax,edi
	je Block243

 Block242:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block243:
	mov eax,dword ptr [ebp+0x38]
	mov dword ptr [ebp-4],0xFFFFFFFF
	cmp eax,edi
	je Block245

 Block244:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block245:
	lea esp,[ebp-0x9C]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x68]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x6C
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CUISkillInc::OnSkillIncButton
__SUB_CLASS_THIS(00452B20, __thiscall, 68667,  CUISkillInc, void, long) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x98]
	mov eax,dword ptr [eax+0x38]
	mov ecx,dword ptr [esp+8]
	add eax,ecx
	push eax
	mov ecx,esi
	call CUISkillInc::GetSkillEntry
	test eax,eax
	je Block2

 Block1:
	mov edx,dword ptr [eax]
	mov dword ptr [esi+0xCC],edx

 Block2:
	pop esi
	ret 4
}
}
// CWvsContext::GetGuildMemberDataByIdx
__SUB_CLASS_THIS(0060B2B0, __thiscall, 8172,  CWvsContext, void, long, long&, GUILDMEMBER&) {
__asm {

 Block0:
	mov edx,dword ptr [ecx+0x37D4]
	mov eax,dword ptr [esp+4]
	mov edx,dword ptr [edx+eax*4]
	imul eax,0x25
	push esi
	mov esi,dword ptr [esp+0xC]
	mov dword ptr [esi],edx
	mov esi,dword ptr [ecx+0x37D8]
	push edi
	mov edi,dword ptr [esp+0x14]
	add esi,eax
	mov ecx,9
	rep movsd
	movsb
	pop edi
	pop esi
	ret 0xC
}
}
// CUISkillInc::CUISkillInc
_SUB_EXCEPTION_HANDLER(5EB1A0)
__SUB_CLASS_THIS0(005EB1A0, __thiscall, 68659,  CUISkillInc, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5EB1A0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	call CDialog::_ctor_default
	xor edi,edi
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillInc::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillInc::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillInc::`vftable'{for `ZRefCounted'}
	mov dword ptr [esp+0x18],edi
	mov dword ptr [esi+0x90],edi
	mov dword ptr [esi+0x98],edi
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push offset ZRef<CCtrlButton>::_ctor_default
	push 4
	push 8
	lea eax,[esi+0x9C]
	push eax
	mov byte ptr [esp+0x2C],2
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0xC0],edi
	mov dword ptr [esi+0xC4],edi
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CUISkillDec::IsRequiredSkill
__SUB_CLASS_THIS(00452570, __thiscall, 68563,  CUISkillDec, int32_t, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	lea eax,[esp+0x20]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x24]
	xor ebp,ebp
	cmp eax,ebp
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x24],ebp

 Block5:
	lea edi,[ebx+0x53D]
	mov ecx,edi
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x18],eax
	cmp eax,ebp
	je Block16

 Block6:
	mov ebx,dword ptr [esp+0x2C]

 Block7:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	mov ecx,edi
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	cmp dword ptr [esp+0x1C],ebp
	je Block15

 Block8:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push eax
	call CSkillInfo::GetSkill
	cmp eax,ebp
	je Block17

 Block9:
	mov eax,dword ptr [eax+0x68]
	mov dword ptr [esp+0x14],eax
	cmp eax,ebp
	je Block15

 Block10:
	jmp Block12

 Block12:
	lea eax,[esp+0x14]
	push eax
	call ZList<GW_SkillRecord>::GetNext
	mov esi,eax
	add esp,4
	cmp dword ptr [esi],ebx
	jne Block14

 Block13:
	lea ecx,[esp+0x10]
	push ecx
	lea edx,[esp+0x30]
	push edx
	mov ecx,edi
	mov dword ptr [esp+0x18],ebp
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x10]
	cmp eax,dword ptr [esi+4]
	jle Block17

 Block14:
	cmp dword ptr [esp+0x14],ebp
	jne Block12

 Block15:
	cmp dword ptr [esp+0x18],ebp
	jne Block7

 Block16:
	pop edi
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	add esp,0x18
	ret 4

 Block17:
	pop edi
	pop esi
	pop ebp
	mov eax,1
	pop ebx
	add esp,0x18
	ret 4
}
}
// CWvsContext::GetCalcDamage
__SUB_CLASS_THIS0(0023A030, __thiscall, 8140,  CWvsContext, CalcDamage&) {
__asm {

 Block0:
	lea eax,[ecx+0x3C78]
	ret
}
}
// CWvsContext::SendStatChangeItemCancelRequest
_SUB_EXCEPTION_HANDLER(5D9DD0)
__SUB_CLASS_THIS(005D9DD0, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D9DD0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block9

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block9

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block9

 Block3:
	mov esi,dword ptr [esp+0x28]
	mov eax,0x97247453
	imul esi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xDD
	jne Block8

 Block4:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp dword ptr [ecx+0x5D0],0
	je Block8

 Block5:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov edx,esi
	neg edx
	push edx
	call CItemInfo::IsNoCancelMouse
	test eax,eax
	je Block8

 Block6:
	lea eax,[esp+0x28]
	push 0x110D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x28],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x30]
	add esp,8
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test eax,eax
	je Block9

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 4

 Block8:
	push 0x4F
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	push esi
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x24],1
	call COutPacket::Encode4
	lea ecx,[esp+8]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block9:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 4
}
}
// CWvsContext::GetQuestMobName
_SUB_EXCEPTION_HANDLER(600920)
__SUB_CLASS_THIS(00600920, __thiscall, 8101,  CWvsContext, ZXString<char>*, ZXString<char>*, uint16_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_600920
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x50
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x64]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	lea eax,[esp+0x44]
	mov dword ptr [esp+0x18],0
	mov esi,dword ptr [ZImports::_VariantInit]
	push eax
	call esi
	lea ecx,[esp+0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	lea edx,[esp+0x34]
	mov ebp,1
	push edx
	mov dword ptr [esp+0x70],ebp
	call esi
	lea eax,[esp+0x34]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	push 0
	push 0
	lea ecx,[esp+0x4C]
	push ecx
	lea edx,[esp+0x40]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	push 0x8E6
	mov bl,2
	push eax
	mov byte ptr [esp+0x88],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [esp+0x80],3
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	lea ecx,[esp+0x68]
	push ecx
	mov byte ptr [esp+0x84],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x74],4
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x18],0
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	test eax,eax
	jge Block9

 Block7:
	cmp eax,0x80004002
	je Block9

 Block8:
	push eax
	call _com_issue_error

 Block9:
	mov esi,dword ptr [ZImports::_VariantClear]
	mov ebx,8
	mov byte ptr [esp+0x6C],6
	cmp word ptr [esp+0x54],bx
	jne Block12

 Block10:
	mov eax,dword ptr [esp+0x5C]
	xor edx,edx
	mov word ptr [esp+0x54],dx
	test eax,eax
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea eax,[esp+0x54]
	push eax
	call esi

 Block13:
	mov byte ptr [esp+0x6C],7
	cmp word ptr [esp+0x34],bx
	jne Block16

 Block14:
	mov eax,dword ptr [esp+0x3C]
	xor ecx,ecx
	mov word ptr [esp+0x34],cx
	test eax,eax
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea edx,[esp+0x34]
	push edx
	call esi

 Block17:
	mov byte ptr [esp+0x6C],8
	cmp word ptr [esp+0x44],bx
	jne Block20

 Block18:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea ecx,[esp+0x44]
	push ecx
	call esi

 Block21:
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x20],esp
	push 0x671
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[esp+0x24]
	push eax
	mov ecx,edi
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [esp+0x7C]
	mov eax,dword ptr [eax+4]
	push ecx
	lea edx,[esp+0x30]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x78],0xA
	call CharacterData::_GetQuestValue
	mov eax,dword ptr [eax]
	mov esi,dword ptr [esp+0x18]
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x84],esp
	mov dword ptr [eax],esi
	test esi,esi
	je Block23

 Block22:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+4]
	push esi
	call ecx

 Block23:
	mov ebx,dword ptr [esp+0x80]
	push ebx
	mov byte ptr [esp+0x7C],0xB
	call get_labeled_string_0
	add esp,0x10
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x18],ebp
	mov byte ptr [esp+0x6C],8
	test eax,eax
	je Block28

 Block24:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block27

 Block25:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block27

 Block26:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block27:
	mov dword ptr [esp+0x24],0

 Block28:
	mov byte ptr [esp+0x6C],0
	test esi,esi
	je Block30

 Block29:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	call edx

 Block30:
	mov eax,ebx
	mov ecx,dword ptr [esp+0x64]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x5C
	ret 8
}
}
// CWvsContext::SendGetUpFromChairRequest
_SUB_EXCEPTION_HANDLER(5D6740)
__SUB_CLASS_THIS(005D6740, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D6740
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block4

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block4

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,dword ptr [esp+0x28]
	jl Block4

 Block3:
	push 0x2D
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	push 0xFFFF
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x24],0
	call COutPacket::Encode2
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+8]
	push edx
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0xC]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block4:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 4
}
}
// CWvsContext::UpdateAutoQuestAlertIcon
__SUB_CLASS_THIS0(005CCE30, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push edi
	mov edi,ecx
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test ecx,ecx
	je Block11

 Block1:
	push esi
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block6

 Block2:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block5

 Block3:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,esi
	call edx
	cmp eax,0x16
	jne Block5

 Block4:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	pop esi
	pop edi
	jmp  CUserLocal::EraseAutoQuestAlert

 Block5:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]

 Block6:
	cmp dword ptr [edi+0x4004],0
	jne Block10

 Block7:
	cmp dword ptr [edi+0x4034],0
	jne Block10

 Block8:
	cmp dword ptr [edi+0x4068],0
	jne Block10

 Block9:
	pop esi
	pop edi
	jmp  CUserLocal::EraseAutoQuestAlert

 Block10:
	pop esi
	pop edi
	jmp  CUserLocal::ViewAutoQuestAlert

 Block11:
	pop edi
	ret
}
}
// CWvsContext::OnEnterField
__SUB_CLASS_THIS0(005DBEC0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	sub esp,0x44
	push ebx
	push esi
	push edi
	mov dword ptr [ebp-0x3C],ecx
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::UI_CloseRevive
	mov eax,dword ptr [ebp-0x3C]
	movzx ecx,byte ptr [eax+0x3EF8]
	test ecx,ecx
	je Block2

 Block1:
	push 0xFFFFFFFF
	push 0x1D
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::UI_Open

 Block2:
	jmp Block16

 Block16:
	mov ecx,dword ptr [ebp-0x3C]
	add ecx,0x35D4
	call CTemporaryStatView::Show
	mov ecx,dword ptr [ebp-0x3C]
	mov dword ptr [ecx+0x40BC],0
	call TSingleton<CUIStatusBar>::IsInstantiated
	test eax,eax
	je Block18

 Block17:
	push 0x1388
	push 0
	push 0
	call TSingleton<CUIStatusBar>::GetInstance
	mov ecx,eax
	call CUIStatusBar::FloatNotice

 Block18:
	mov ecx,dword ptr [ebp-0x3C]
	add ecx,0x3EA8
	call ZRef<CUIRaiseManager>::op_arrow
	mov ecx,eax
	call CUIRaiseManager::RestoreWindows
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::GetPartyID
	test eax,eax
	je Block22

 Block19:
	call TSingleton<CUIPartyHP>::IsInstantiated
	test eax,eax
	jne Block22

 Block20:
	call TSingleton<CConfig>::GetInstance
	mov ecx,eax
	call CConfig::GetShowPartyHP
	test eax,eax
	je Block22

 Block21:
	call TSingleton<CUIPartyHP>::CreateInstance

 Block22:
	mov edx,dword ptr [ebp-0x3C]
	cmp dword ptr [edx+0x37AC],1
	jne Block29

 Block23:
	mov eax,dword ptr [ebp-0x3C]
	mov dword ptr [eax+0x37AC],0
	mov ecx,dword ptr [ebp-0x3C]
	mov edx,dword ptr [ecx+0x37A8]
	mov dword ptr [ebp-0x40],edx
	mov eax,dword ptr [ebp-0x40]
	mov dword ptr [ebp-0x44],eax
	sub dword ptr [ebp-0x44],1
	je Block26

 Block24:
	sub dword ptr [ebp-0x44],1
	je Block27

 Block25:
	jmp Block28

 Block26:
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::ShowPartySearch_Remocon_Searching
	mov ecx,dword ptr [ebp-0x3C]
	mov edx,dword ptr [ecx+0x37A4]
	push edx
	mov eax,dword ptr [ebp-0x3C]
	mov ecx,dword ptr [eax+0x37A0]
	push ecx
	mov edx,dword ptr [ebp-0x3C]
	mov eax,dword ptr [edx+0x379C]
	push eax
	mov ecx,dword ptr [ebp-0x3C]
	mov edx,dword ptr [ecx+0x3798]
	push edx
	call TSingleton<CWvsContext>::GetInstance
	mov ecx,eax
	call CWvsContext::SendPartyWanted
	jmp Block28

 Block27:
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::ShowPartySearch_Remocon_Holding

 Block28:
	jmp Block30

 Block29:
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::StopPartySearch

 Block30:
	mov dword ptr [ebp-0x14],1
	call TSingleton<CRadioManager>::IsInstantiated
	test eax,eax
	je Block35

 Block31:
	call TSingleton<CRadioManager>::GetInstance
	mov ecx,eax
	call CRadioManager::IsPlaying
	test eax,eax
	je Block35

 Block32:
	mov eax,dword ptr [ebp-0x3C]
	cmp dword ptr [eax+0x37B0],0
	je Block34

 Block33:
	mov ecx,dword ptr [ebp-0x3C]
	mov edx,dword ptr [ecx+0x37B4]
	push edx
	call TSingleton<CRadioManager>::GetInstance
	mov ecx,eax
	call CRadioManager::Mute

 Block34:
	push 1
	call TSingleton<CRadioManager>::GetInstance
	mov ecx,eax
	call CRadioManager::ShowUI
	mov eax,dword ptr [ebp-0x3C]
	mov dword ptr [eax+0x37B0],0

 Block35:
	jmp Block37

 Block37:
	call TSingleton<CUIStatusBar>::IsInstantiated
	test eax,eax
	je Block42

 Block38:
	call get_field
	mov dword ptr [ebp-0x1C],eax
	cmp dword ptr [ebp-0x1C],0
	je Block41

 Block39:
	mov ecx,dword ptr [ebp-0x1C]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C]
	mov eax,dword ptr [edx+0x1C]
	call eax
	cmp eax,0x16
	jne Block41

 Block40:
	push 0
	call TSingleton<CUIStatusBar>::GetInstance
	mov ecx,eax
	call CUIStatusBar::EnableButtons
	jmp Block42

 Block41:
	push 1
	call TSingleton<CUIStatusBar>::GetInstance
	mov ecx,eax
	call CUIStatusBar::EnableButtons

 Block42:
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::GetBasicStat
	mov ecx,eax
	call BasicStat::_ZtlSecureGet_nJob
	push eax
	call is_wildhunter_job
	add esp,4
	test eax,eax
	je Block49

 Block43:
	call get_field
	mov dword ptr [ebp-0x20],eax
	cmp dword ptr [ebp-0x20],0
	je Block49

 Block44:
	mov ecx,dword ptr [ebp-0x3C]
	movzx edx,byte ptr [ecx+0x41C5]
	cmp edx,1
	jne Block46

 Block45:
	mov ecx,dword ptr [ebp-0x20]
	call CField::IsFlyingMap
	test eax,eax
	jne Block48

 Block46:
	mov eax,dword ptr [ebp-0x3C]
	movzx ecx,byte ptr [eax+0x41C5]
	cmp ecx,2
	jne Block49

 Block47:
	mov ecx,dword ptr [ebp-0x20]
	call CField::IsSwimmingMap
	test eax,eax
	je Block49

 Block48:
	mov edx,dword ptr [ebp-0x3C]
	mov byte ptr [edx+0x41C5],0

 Block49:
	jmp Block51

 Block51:
	cmp dword ptr [ebp-0x14],0
	jmp Block56

 Block56:
	mov ecx,dword ptr [ebp-0x3C]
	call CWvsContext::GetCurFieldID
	mov dword ptr [ebp-4],eax
	mov eax,dword ptr [ebp-4]
	push eax
	call TSingleton<CConfig>::GetInstance
	mov ecx,eax
	call CConfig::SaveSessionInfo_FieldID
	jmp Block58

 Block58:
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CWvsContext::OnDragonBallBox
__SUB_CLASS_THIS(005DB630, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push ecx
	push ebx
	push ebp
	push esi
	mov esi,dword ptr [esp+0x14]
	push edi
	mov edi,ecx
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov ebp,eax
	call CInPacket::Decode1
	movzx eax,al
	mov ecx,esi
	mov dword ptr [esp+0x18],eax
	call CInPacket::Decode1
	mov ecx,esi
	movzx ebx,al
	call CInPacket::Decode1
	movzx ecx,al
	mov dword ptr [esp+0x10],ecx
	test ebx,ebx
	je Block2

 Block1:
	push 0x2A
	mov ecx,edi
	call CWvsContext::UI_Close
	pop edi
	pop esi
	pop ebp
	pop ebx
	pop ecx
	ret 4

 Block2:
	cmp dword ptr [esp+0x18],0
	je Block4

 Block3:
	push 0xFFFFFFFF
	push 0x2A
	mov ecx,edi
	call CWvsContext::UI_Open

 Block4:
	cmp dword ptr [edi+0x3EF4],0
	je Block6

 Block5:
	mov edx,dword ptr [edi+0x3EF4]
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [edx+0xB18],ebp
	mov edi,dword ptr [edi+0x3EF4]
	push eax
	mov ecx,esi
	call CInPacket::Decode4
	push eax
	mov ecx,edi
	call CUIDragonBox::SetOrb

 Block6:
	pop edi
	pop esi
	pop ebp
	pop ebx
	pop ecx
	ret 4
}
}
// CWvsContext::SendSendInvitaionRequest
_SUB_EXCEPTION_HANDLER(5E16E0)
__SUB_CLASS_THIS(005E16E0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E16E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x30
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x40]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	lea eax,[esp+0x28]
	push eax
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x2C],0

 Block5:
	cmp dword ptr [ebp+0x645],0
	je Block25

 Block6:
	mov eax,dword ptr [ebp+0x649]
	mov edi,1
	cmp word ptr [eax+0xC],di
	jne Block25

 Block7:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x48],0
	test eax,eax
	je Block20

 Block8:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	test eax,eax
	je Block20

 Block9:
	add eax,8
	je Block20

 Block10:
	lea esi,[eax-8]
	mov dword ptr [esp+0x24],esi
	test esi,esi
	je Block12

 Block11:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block12:
	push 0
	push edi
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x20],esp
	push 0x10B3
	push edx
	mov dword ptr [esp+0x5C],edi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0
	push 3
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push 0
	push 0
	push 0xC
	push 4
	push offset _S_
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_STR
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,edi
	jne Block23

 Block13:
	lea eax,[esp+0x14]
	push eax
	mov ecx,esi
	call CUtilDlgEx::GetInputStr_Result
	push 0
	push 0
	mov ecx,eax
	mov byte ptr [esp+0x50],2
	call ZXString<char>::TrimRight
	mov ecx,eax
	call ZXString<char>::TrimLeft
	push eax
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x14],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x48],4
	test eax,eax
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block15:
	mov edi,dword ptr [ebp+0x649]
	lea ecx,[edi+0x16]
	push ecx
	lea ecx,[esp+0x14]
	call ZXString<char>::Compare
	test eax,eax
	je Block21

 Block16:
	add edi,0x23
	push edi
	lea ecx,[esp+0x14]
	call ZXString<char>::Compare
	test eax,eax
	je Block21

 Block17:
	push 0xA1
	lea ecx,[esp+0x34]
	call COutPacket::_ctor_1
	push 5
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x4C],5
	call COutPacket::Encode1
	push ecx
	lea edx,[esp+0x14]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x34]
	call COutPacket::EncodeStr
	mov eax,dword ptr [ebp+0x649]
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[esp+0x34]
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x50]
	push ecx
	lea ecx,[esp+0x34]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x30]
	push edx
	call CClientSocket::SendPacket
	mov ecx,dword ptr [esp+0x18]
	push 1
	call CWvsContext::SetExclRequestSent
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x48],4
	call ZArray<unsigned char>::RemoveAll
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x48],1
	test eax,eax
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block19:
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x48],0xFFFFFFFF
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x3C
	ret 8

 Block20:
	xor esi,esi
	mov dword ptr [esp+0x24],esi
	jmp Block12

 Block21:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x64],esp
	push 0x10B4
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	mov eax,dword ptr [esp+0x24]
	add esp,0x14
	mov byte ptr [esp+0x48],1
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	mov dword ptr [esp+0x48],0xFFFFFFFF
	test esi,esi
	je Block25

 Block24:
	push 0
	lea ecx,[esp+0x24]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block25:
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x3C
	ret 8
}
}
// CWvsContext::OnPotionDiscountRateChanged
_SUB_EXCEPTION_HANDLER(5DF300)
__SUB_CLASS_THIS(005DF300, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DF300
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ebx,dword ptr [esp+0x30]
	mov ecx,ebx
	call CInPacket::Decode4
	mov ecx,ebx
	mov esi,eax
	call CInPacket::Decode4
	mov ebp,eax
	cmp esi,0x3B
	ja Block9

 Block1:
	xor ebx,ebx
	cmp ebp,ebx
	je Block9

 Block2:
	lea eax,[esp+0x18]
	push eax
	mov ecx,edi
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov esi,dword ptr [eax+esi*8+0xFD]
	lea ecx,[esp+0x18]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp esi,ebx
	je Block9

 Block3:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov esi,eax
	cmp esi,ebx
	je Block9

 Block4:
	mov ecx,esi
	call CItemInfo::EQUIPITEM::IsPotionDiscount
	test eax,eax
	je Block9

 Block5:
	mov dword ptr [esp+0x30],ebx
	lea ecx,[esp+0x14]
	push 0x11EB
	push ecx
	mov dword ptr [esp+0x30],ebx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [eax]
	push ebp
	push edx
	push eax
	lea eax,[esp+0x3C]
	push eax
	mov byte ptr [esp+0x38],1
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0x10
	mov byte ptr [esp+0x28],bl
	cmp eax,ebx
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	lea ecx,[esp+0x30]
	push 0xC
	push ecx
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x38]
	add esp,8
	mov dword ptr [esp+0x28],0xFFFFFFFF
	cmp eax,ebx
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 4
}
}
// CUIStatChangeConfirm::SetOption
__SUB_CLASS_THIS(005CC790, __thiscall, 68531,  CUIStatChangeConfirm, void, unsigned long, unsigned long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov edx,dword ptr [esp+8]
	mov dword ptr [ecx+0xA8],eax
	mov dword ptr [ecx+0xAC],edx
	ret 8
}
}
// CWvsContext::SendUpgradeItemUseRequest
_SUB_EXCEPTION_HANDLER(5D6260)
__SUB_CLASS_THIS(005D6260, __thiscall, 8239,  CWvsContext, void, long, long, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D6260
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block10

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block10

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block10

 Block3:
	push 0x5D
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	mov ecx,dword ptr [esp+0x34]
	push ecx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	mov edi,dword ptr [esp+0x38]
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0xC]
	push edx
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	mov dword ptr [esi+0x20BC],eax
	test edi,edi
	je Block9

 Block4:
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	test eax,eax
	je Block7

 Block5:
	lea ecx,[eax+4]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x48]
	push offset CUIEnchantDlg::ms_RTTI_CUIEnchantDlg
	call edx
	test eax,eax
	je Block7

 Block6:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	jmp Block8

 Block7:
	xor ecx,ecx

 Block8:
	call CUIEnchantDlg::ShowEffect

 Block9:
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block10:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 0x10
}
}
// CWvsContext::SendBridleItemUseRequest
_SUB_EXCEPTION_HANDLER(5E08C0)
__SUB_CLASS_THIS(005E08C0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E08C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xA4
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xB8]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x24],esi
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov ecx,dword ptr [eax+0x5F8]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0xBE
	je Block73

 Block1:
	mov edi,dword ptr [esp+0xCC]
	mov eax,0x68DB8BAD
	imul edi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xE3
	jne Block73

 Block2:
	cmp dword ptr [esi+0x20B8],ebp
	jne Block73

 Block3:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block73

 Block4:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block73

 Block5:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edi
	call CItemInfo::GetBridleItem
	mov edx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov ebx,eax
	mov eax,dword ptr [edx+8]
	mov dword ptr [esp+0x1C],ebx
	cmp eax,ebp
	je Block25

 Block6:
	add eax,8
	cmp eax,ebp
	je Block25

 Block7:
	lea edi,[eax-8]
	mov dword ptr [esp+0x38],edi
	cmp edi,ebp
	je Block9

 Block8:
	lea eax,[edi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block9:
	lea ecx,[esp+0x64]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0xC4],ebp
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x64]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,dword ptr [ebx+0x18]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block26

 Block10:
	mov esi,1
	push esi
	mov ecx,ebp
	call CharacterData::GetItemSlotCount
	cmp eax,esi
	jl Block19

 Block11:
	push esi
	push 1
	lea edx,[esp+0x30]
	push edx
	mov ecx,ebp
	call CharacterData::GetItem
	xor ecx,ecx
	cmp dword ptr [eax+4],ecx
	mov eax,dword ptr [esp+0x2C]
	sete cl
	mov edi,ecx
	test eax,eax
	je Block16

 Block12:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block15

 Block13:
	mov edx,dword ptr [esp+0x2C]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x2C]
	test ecx,ecx
	je Block15

 Block14:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block15:
	mov dword ptr [esp+0x2C],0

 Block16:
	test edi,edi
	jne Block57

 Block17:
	push 1
	mov ecx,ebp
	inc esi
	call CharacterData::GetItemSlotCount
	cmp esi,eax
	jle Block11

 Block18:
	mov edi,dword ptr [esp+0x38]

 Block19:
	lea eax,[esp+0x20]
	push 0xF1B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov byte ptr [esp+0xC0],1
	je Block21

 Block20:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block21:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0xC0],0
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	mov dword ptr [esp+0xC0],0xFFFFFFFF
	test edi,edi
	je Block73

 Block24:
	jmp Block72

 Block25:
	mov dword ptr [esp+0x38],ebp
	mov edi,ebp
	jmp Block9

 Block26:
	mov ecx,dword ptr [ebx+0x18]
	mov eax,0x431BDE83
	imul ecx
	sar edx,0x12
	push ecx
	mov edi,edx
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	shr edi,0x1F
	add edi,edx
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x30],0
	je Block38

 Block27:
	push edi
	mov ecx,ebp
	mov dword ptr [esp+0x24],1
	call CharacterData::GetItemSlotCount
	cmp eax,1
	jl Block38

 Block28:
	mov edx,dword ptr [esp+0x20]
	push edx
	push edi
	lea eax,[esp+0x44]
	push eax
	mov ecx,ebp
	call CharacterData::GetItem
	mov esi,dword ptr [esp+0x40]
	mov byte ptr [esp+0xC0],3
	test esi,esi
	je Block33

 Block29:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [ebx+0x18]
	jne Block32

 Block30:
	push 0x64
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push 0x968
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x38]
	mov byte ptr [esp+0xC8],4
	test ecx,ecx
	je Block40

 Block31:
	lea edx,[esp+0x74]
	push edx
	mov byte ptr [esp+0xCC],3
	call IWzProperty::Getitem
	or dword ptr [esp+0x18],1
	push eax
	mov byte ptr [esp+0xC8],5
	call get_int32
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x20]
	add esp,8
	mov ecx,esi
	mov dword ptr [esp+0x28],eax
	call edx
	mov ecx,dword ptr [esp+0x28]
	cmp eax,ecx
	jl Block33

 Block32:
	mov byte ptr [esp+0x1B],0
	jmp Block34

 Block33:
	mov byte ptr [esp+0x1B],1

 Block34:
	test byte ptr [esp+0x14],1
	mov dword ptr [esp+0xC0],3
	je Block36

 Block35:
	and dword ptr [esp+0x14],0xFFFFFFFE
	lea ecx,[esp+0x6C]
	call Ztl_variant_t::~Ztl_variant_t

 Block36:
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0xC0],2
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp byte ptr [esp+0x1B],0
	jne Block55

 Block37:
	mov esi,dword ptr [esp+0x20]
	inc esi
	push edi
	mov ecx,ebp
	mov dword ptr [esp+0x24],esi
	call CharacterData::GetItemSlotCount
	cmp esi,eax
	jle Block28

 Block38:
	mov dword ptr [esp+0x14],0
	lea eax,[edi-1]
	mov bl,6
	mov byte ptr [esp+0xC0],bl
	cmp eax,3
	ja Block47

 Block39:
	cmp EAX, 0
je Block41
cmp EAX, 1
je Block42
cmp EAX, 2
je Block43
cmp EAX, 3
je Block44


 Block40:
	push 0x80004003
	call _com_issue_error

 Block41:
	lea eax,[esp+0x28]
	push 0xA
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xC4],7
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [esp+0x28]
	jmp Block45

 Block42:
	lea ecx,[esp+0x20]
	push 0x1A87
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xC4],8
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [esp+0x20]
	jmp Block45

 Block43:
	lea edx,[esp+0x24]
	push 0xB
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xC4],9
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [esp+0x24]
	jmp Block45

 Block44:
	lea eax,[esp+0x1C]
	push 0x1A38
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xC4],0xA
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [esp+0x1C]

 Block45:
	mov byte ptr [esp+0xC0],bl
	test eax,eax
	je Block47

 Block46:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block47:
	lea ecx,[esp+0x1C]
	push 0xCDC
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esp+0x14]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xCC],0xB
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0xC0],bl
	test eax,eax
	je Block49

 Block48:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block49:
	lea ecx,[esp+0x14]
	push 0xC
	push ecx
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x1C]
	add esp,8
	mov byte ptr [esp+0xC0],2
	test eax,eax
	je Block51

 Block50:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block51:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xC0],0
	test eax,eax
	je Block53

 Block52:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block53:
	cmp dword ptr [esp+0x38],0
	mov dword ptr [esp+0xC0],0xFFFFFFFF
	je Block73

 Block54:
	jmp Block72

 Block55:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xC0],0
	test eax,eax
	je Block57

 Block56:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block57:
	mov eax,dword ptr [ebx+8]
	mov esi,dword ptr [esp+0x38]
	mov dword ptr [esp+0x54],eax
	mov ecx,dword ptr [ebx+0xC]
	mov dword ptr [esp+0x58],ecx
	mov edx,dword ptr [ebx+0x10]
	mov dword ptr [esp+0x5C],edx
	mov eax,dword ptr [ebx+0x14]
	mov dword ptr [esp+0x60],eax
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	add esi,4
	lea eax,[esp+0x64]
	push eax
	mov ecx,esi
	call edx
	mov edi,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x3C]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [edi]
	push eax
	push ecx
	lea edx,[esp+0x5C]
	push edx
	call OffsetRect
	mov eax,dword ptr [ebx]
	push 0
	push 0
	push eax
	push 0
	push 0
	push 0
	push 1
	lea ecx,[esp+0x98]
	push ecx
	mov ecx,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	lea edx,[esp+0x74]
	push edx
	call CMobPool::FindHitMobInRect
	add ebx,0x38
	push ebx
	lea ecx,[esp+0x18]
	mov esi,eax
	mov dword ptr [esp+0x18],0
	call ZXString<char>::op_assign
	mov ebx,0xC
	mov byte ptr [esp+0xC0],bl
	test esi,esi
	jne Block68

 Block58:
	mov eax,dword ptr [esp+0x1C]
	mov eax,dword ptr [eax+0x24]
	cmp eax,3
	ja Block69

 Block59:
	cmp EAX, 0
je Block60
cmp EAX, 1
je Block62
cmp EAX, 2
je Block64
cmp EAX, 3
je Block66


 Block60:
	lea ecx,[esp+0x1C]
	push 0xF1E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebx
	push eax
	mov byte ptr [esp+0xC8],0xD
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x24]
	add esp,8
	mov byte ptr [esp+0xC0],bl
	test eax,eax
	je Block69

 Block61:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block69

 Block62:
	lea edx,[esp+0x24]
	push 0x1110
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebx
	push eax
	mov byte ptr [esp+0xC8],0xE
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x2C]
	add esp,8
	mov byte ptr [esp+0xC0],bl
	test eax,eax
	je Block69

 Block63:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block69

 Block64:
	lea eax,[esp+0x28]
	push 0x1111
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebx
	push eax
	mov byte ptr [esp+0xC8],0xF
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x30]
	add esp,8
	mov byte ptr [esp+0xC0],bl
	test eax,eax
	je Block69

 Block65:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block69

 Block66:
	lea ecx,[esp+0x14]
	call ZXString<char>::IsEmpty
	test eax,eax
	jne Block69

 Block67:
	lea ecx,[esp+0x14]
	push ebx
	push ecx
	call CHATLOG_ADD
	add esp,8
	jmp Block69

 Block68:
	push 0x57
	lea ecx,[esp+0x48]
	call COutPacket::_ctor_1
	mov byte ptr [esp+0xC0],0x10
	call get_update_time
	push eax
	lea ecx,[esp+0x48]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0xC8]
	push edx
	lea ecx,[esp+0x48]
	call COutPacket::Encode2
	mov eax,dword ptr [esp+0xCC]
	push eax
	lea ecx,[esp+0x48]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x7C]
	mov ecx,dword ptr [eax+0x170]
	push ecx
	add eax,0x168
	push eax
	call _ZtlSecureFuseHelper<unsigned long>::call
	add esp,8
	push eax
	lea ecx,[esp+0x48]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x44]
	push edx
	call CClientSocket::SendPacket
	mov esi,dword ptr [esp+0x24]
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x48]
	mov dword ptr [esi+0x20BC],eax
	mov byte ptr [esp+0xC0],bl
	call ZArray<unsigned char>::RemoveAll

 Block69:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xC0],0
	test eax,eax
	je Block71

 Block70:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block71:
	mov dword ptr [esp+0xC0],0xFFFFFFFF

 Block72:
	push 0
	lea ecx,[esp+0x38]
	call ZRef<CUserLocal>::_ReleaseRaw

 Block73:
	mov ecx,dword ptr [esp+0xB8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xB0
	ret 8
}
}
// CWvsContext::SendWishListInput
_SUB_EXCEPTION_HANDLER(5E19D0)
__SUB_CLASS_THIS(005E19D0, __thiscall, 8268,  CWvsContext, void, ZXString<char>*, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E19D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	push 0xA1
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	push 9
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x28],0
	call COutPacket::Encode1
	mov edi,dword ptr [esp+0x30]
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode1
	test edi,edi
	jle Block3

 Block1:
	mov esi,dword ptr [esp+0x2C]
	lea esp,[esp]

 Block2:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push esi
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	lea ecx,[esp+0x10]
	call COutPacket::EncodeStr
	add esi,4
	sub edi,1
	jne Block2

 Block3:
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 8
}
}
// COpenGatePool::AddOpenGate1
_SUB_EXCEPTION_HANDLER(28BE70)
__SUB_CLASS_THIS(0028BE70, __thiscall, 51998,  COpenGatePool, void, NakedParam<ZRef<COpenGatePool::OPENGATE>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_28BE70
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	lea ecx,[esi+0x1C]
	mov dword ptr [esp+0x14],0
	call ZList<ZRef<COpenGatePool::OPENGATE>>::AddTail_
	mov edi,eax
	lea eax,[esp+0x1C]
	push eax
	mov ecx,edi
	call ZRef<COpenGatePool::OPENGATE>::op_assign_copy
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [ecx+4],edi
	mov eax,dword ptr [esp+0x20]
	lea edx,[esp+0x1C]
	push edx
	add eax,8
	push eax
	lea ecx,[esi+4]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::Insert
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CWvsContext::UI_ShortCut
_SUB_EXCEPTION_HANDLER(5DD740)
__SUB_CLASS_THIS0(005DD740, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DD740
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block3

 Block1:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block3

 Block2:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,esi
	call edx
	cmp eax,0x16
	je Block17

 Block3:
	lea eax,[esp+0x10]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x28],0
	call play_ui_sound
	mov eax,dword ptr [esp+0x14]
	or edi,0xFFFFFFFF
	add esp,4
	mov dword ptr [esp+0x24],edi
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block5:
	push 0x138
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x24],1
	test eax,eax
	je Block13

 Block6:
	mov ecx,eax
	call CUIShortCutMenu::_ctor_default
	test eax,eax
	je Block13

 Block7:
	add eax,8
	je Block13

 Block8:
	lea esi,[eax-8]
	mov dword ptr [esp+0x18],esi
	test esi,esi
	je Block10

 Block9:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block10:
	mov ecx,esi
	mov dword ptr [esp+0x24],2
	call CDialog::DoModal
	cmp eax,1
	jne Block15

 Block11:
	mov esi,dword ptr [esi+0x134]
	cmp esi,8
	je Block14

 Block12:
	push edi
	push esi
	mov ecx,ebx
	call CWvsContext::UI_Toggle
	mov dword ptr [esp+0x24],edi
	jmp Block16

 Block13:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	jmp Block10

 Block14:
	push 0
	call CUIMessenger::TryNew
	add esp,4
	mov dword ptr [esp+0x24],edi
	jmp Block16

 Block15:
	mov dword ptr [esp+0x24],edi
	test esi,esi
	je Block17

 Block16:
	push 0
	lea ecx,[esp+0x18]
	call ZRef<CUIShortCutMenu>::_ReleaseRaw

 Block17:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret
}
}
// CWvsContext::SendTempExpUseRequest
_SUB_EXCEPTION_HANDLER(5DB430)
__SUB_CLASS_THIS0(005DB430, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DB430
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov ecx,dword ptr [edi+0x5F8]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xBE
	jne Block5

 Block1:
	lea ecx,[esp+0xC]
	push 0xF11
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x2C],0
	je Block3

 Block2:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x18],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block3:
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	test eax,eax
	je Block14

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x24
	ret

 Block5:
	mov edx,dword ptr [edi+0x3BA0]
	push edx
	add edi,0x3B98
	push edi
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	jne Block14

 Block6:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],eax
	jne Block14

 Block7:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x35]
	push ecx
	add eax,0x33
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	cmp al,0x32
	jbe Block10

 Block8:
	lea edx,[esp+0x10]
	push 0xC97
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x34],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x18]
	add esp,8
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	test eax,eax
	je Block14

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x24
	ret

 Block10:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call CUserLocal::IsAttract
	test eax,eax
	jne Block14

 Block11:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp dword ptr [eax+0x4690],0
	jne Block14

 Block12:
	push 0
	push 0x1F4
	mov ecx,esi
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block14

 Block13:
	push 0xB6
	lea ecx,[esp+0x18]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x2C],2
	call get_update_time
	push eax
	lea ecx,[esp+0x18]
	call COutPacket::Encode4
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	push 1
	mov ecx,esi
	call CWvsContext::SetExclRequestSent
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block14:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x24
	ret
}
}
// CWvsContext::ResetWorldMapQuestDemand
__SUB_CLASS_THIS0(005E54A0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	lea ecx,[esi+0x423C]
	call ZList<unsigned long>::RemoveAll
	lea ecx,[esi+0x4250]
	call ZArray<WORLDMAPQUESTDEMANDITEM>::RemoveAll
	xor eax,eax
	mov word ptr [esi+0x4238],ax
	pop esi
	ret
}
}
// CWvsContext::IsWorthlessQuest
__SUB_CLASS_THIS(005D75C0, __thiscall, 8435,  CWvsContext, int32_t, uint16_t) {
__asm {

 Block0:
	sub esp,8
	push ebp
	mov ebp,dword ptr [esp+0x10]
	test bp,bp
	jne Block2

 Block1:
	xor eax,eax
	pop ebp
	add esp,8
	ret 4

 Block2:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebx
	push esi
	push edi
	lea eax,[esp+0x10]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block7

 Block3:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block6

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block6:
	mov dword ptr [esp+0x14],0

 Block7:
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push ebp
	call CQuestMan::GetStartDemand
	mov edi,eax
	test edi,edi
	je Block9

 Block8:
	cmp dword ptr [edi+0x1C],0
	jne Block10

 Block9:
	pop edi
	pop esi
	pop ebx
	xor eax,eax
	pop ebp
	add esp,8
	ret 4

 Block10:
	mov ecx,dword ptr [ebx+0x35]
	push ecx
	add ebx,0x33
	push ebx
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov edx,dword ptr [edi+0x1C]
	add esp,8
	movzx eax,al
	add edx,0xA
	cmp eax,edx
	sbb esi,esi
	push offset _D_DB_DATE_20790101__2
	add edi,0x40
	push edi
	inc esi
	call CompareFileTime
	neg eax
	sbb eax,eax
	pop edi
	inc eax
	and eax,esi
	pop esi
	pop ebx
	pop ebp
	add esp,8
	ret 4
}
}
// CTemporaryStatView::UpdatePassively
_SUB_EXCEPTION_HANDLER(35DD40)
__SUB_CLASS_THIS(0035DD40, __thiscall, 5661,  CTemporaryStatView, void, long, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35DD40
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	cmp dword ptr [ecx+0xC],0
	je Block11

 Block1:
	mov ecx,dword ptr [ecx+0x10]
	mov dword ptr [esp+0x14],ecx
	test ecx,ecx
	je Block11

 Block2:
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	mov ebp,dword ptr [ZImports::_InterlockedDecrement]

 Block3:
	lea eax,[esp+0x14]
	push eax
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x1C],esi
	test esi,esi
	je Block5

 Block4:
	lea ecx,[esi+4]
	push ecx
	call ebx

 Block5:
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [esp+0x28],0
	cmp dword ptr [esi+0x20],edx
	je Block10

 Block6:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ebp
	test eax,eax
	jne Block8

 Block7:
	push edi
	call ebx
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block8:
	cmp dword ptr [esp+0x14],0
	mov dword ptr [esp+0x1C],0
	jne Block3

 Block9:
	jmp Block11

 Block10:
	mov eax,dword ptr [esp+0x34]
	push eax
	mov ecx,esi
	call CTemporaryStatView::TEMPORARY_STAT::SetLeft
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZRef<CTemporaryStatView::TEMPORARY_STAT>::~ZRef<CTemporaryStatView::TEMPORARY_STAT>

 Block11:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 0xC
}
}
// CUISkillDecEX::Draw
_SUB_EXCEPTION_HANDLER(4554A0)
__SUB_CLASS_THIS(004554A0, __thiscall, 68636,  CUISkillDecEX, void, const tagRECT*) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x70]
	sub esp,0x70
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4554A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xD8
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x6C],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [ebp+0x60],esi
	mov eax,dword ptr [ebp+0x78]
	push eax
	call CWnd::Draw
	lea ecx,[ebp+0x68]
	push ecx
	mov ecx,esi
	call CWnd::GetCanvas
	lea edx,[ebp+0x64]
	push 1
	xor edi,edi
	push edx
	mov dword ptr [ebp-4],edi
	call get_basic_font
	add esp,8
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x1C]
	push eax
	mov byte ptr [ebp-4],1
	call ebx
	lea ecx,[ebp-0x1C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	lea edx,[ebp+0x20]
	push edx
	mov byte ptr [ebp-4],2
	call ebx
	lea eax,[ebp+0x20]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	push edi
	push edi
	lea ecx,[ebp-0x1C]
	push ecx
	lea edx,[ebp+0x20]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x5C],esp
	push 0x7AC
	push eax
	mov byte ptr [ebp-4],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [ebp-4],4
	cmp dword ptr [_D_G_RM],edi
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	lea ecx,[ebp-0xD4]
	push ecx
	mov byte ptr [ebp-4],3
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x48]
	mov dword ptr [ebp+0x48],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block9

 Block7:
	cmp eax,0x80004002
	je Block9

 Block8:
	push eax
	call _com_issue_error

 Block9:
	cmp word ptr [ebp-0xD4],8
	mov edi,dword ptr [ZImports::_VariantClear]
	mov byte ptr [ebp-4],7
	jne Block12

 Block10:
	mov eax,dword ptr [ebp-0xCC]
	xor edx,edx
	mov word ptr [ebp-0xD4],dx
	test eax,eax
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea eax,[ebp-0xD4]
	push eax
	call edi

 Block13:
	cmp word ptr [ebp+0x20],8
	mov byte ptr [ebp-4],8
	jne Block16

 Block14:
	mov eax,dword ptr [ebp+0x28]
	xor ecx,ecx
	mov word ptr [ebp+0x20],cx
	test eax,eax
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea edx,[ebp+0x20]
	push edx
	call edi

 Block17:
	cmp word ptr [ebp-0x1C],8
	mov byte ptr [ebp-4],9
	jne Block20

 Block18:
	xor eax,eax
	mov word ptr [ebp-0x1C],ax
	mov eax,dword ptr [ebp-0x14]
	test eax,eax
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea ecx,[ebp-0x1C]
	push ecx
	call edi

 Block21:
	lea edx,[ebp-0x3C]
	push edx
	call ebx
	lea eax,[ebp-0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block23

 Block22:
	push eax
	call _com_issue_error

 Block23:
	lea ecx,[ebp-0x9C]
	push ecx
	mov byte ptr [ebp-4],0xA
	call ebx
	lea edx,[ebp-0x9C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block25

 Block24:
	push eax
	call _com_issue_error

 Block25:
	push 0
	push 0
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x9C]
	push ecx
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x5C],esp
	push 0x7AD
	push edx
	mov byte ptr [ebp-4],0xB
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0xC
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	lea eax,[ebp-0xC4]
	mov byte ptr [ebp-4],0xB
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xD
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x4C]
	mov dword ptr [ebp+0x4C],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block30

 Block28:
	cmp eax,0x80004002
	je Block30

 Block29:
	push eax
	call _com_issue_error

 Block30:
	cmp word ptr [ebp-0xC4],8
	mov byte ptr [ebp-4],0xF
	jne Block33

 Block31:
	mov eax,dword ptr [ebp-0xBC]
	xor ecx,ecx
	mov word ptr [ebp-0xC4],cx
	test eax,eax
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea edx,[ebp-0xC4]
	push edx
	call edi

 Block34:
	cmp word ptr [ebp-0x9C],8
	mov byte ptr [ebp-4],0x10
	jne Block37

 Block35:
	xor eax,eax
	mov word ptr [ebp-0x9C],ax
	mov eax,dword ptr [ebp-0x94]
	test eax,eax
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block38

 Block37:
	lea ecx,[ebp-0x9C]
	push ecx
	call edi

 Block38:
	cmp word ptr [ebp-0x3C],8
	mov byte ptr [ebp-4],0x11
	jne Block41

 Block39:
	mov eax,dword ptr [ebp-0x34]
	xor edx,edx
	mov word ptr [ebp-0x3C],dx
	test eax,eax
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea eax,[ebp-0x3C]
	push eax
	call edi

 Block42:
	lea ecx,[ebp+0x10]
	push ecx
	call ebx
	lea edx,[ebp+0x10]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block44

 Block43:
	push eax
	call _com_issue_error

 Block44:
	lea eax,[ebp-0x7C]
	push eax
	mov byte ptr [ebp-4],0x12
	call ebx
	lea ecx,[ebp-0x7C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	push 0
	push 0
	lea edx,[ebp+0x10]
	push edx
	lea eax,[ebp-0x7C]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x5C],esp
	push 0xA8A
	mov bl,0x13
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0x14
	jne Block48

 Block47:
	push 0x80004003
	call _com_issue_error

 Block48:
	lea edx,[ebp-0xE4]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x15
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x40]
	mov dword ptr [ebp+0x40],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block51

 Block49:
	cmp eax,0x80004002
	je Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	mov ebx,8
	mov byte ptr [ebp-4],0x17
	cmp word ptr [ebp-0xE4],bx
	jne Block54

 Block52:
	xor eax,eax
	mov word ptr [ebp-0xE4],ax
	mov eax,dword ptr [ebp-0xDC]
	test eax,eax
	je Block55

 Block53:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block54:
	lea ecx,[ebp-0xE4]
	push ecx
	call edi

 Block55:
	mov byte ptr [ebp-4],0x18
	cmp word ptr [ebp-0x7C],bx
	jne Block58

 Block56:
	mov eax,dword ptr [ebp-0x74]
	xor edx,edx
	mov word ptr [ebp-0x7C],dx
	test eax,eax
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea eax,[ebp-0x7C]
	push eax
	call edi

 Block59:
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp+0x10],bx
	jne Block62

 Block60:
	mov eax,dword ptr [ebp+0x18]
	xor ecx,ecx
	mov word ptr [ebp+0x10],cx
	test eax,eax
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea edx,[ebp+0x10]
	push edx
	call edi

 Block63:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[ebp-0xB4]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0xB0]
	mov dword ptr [ebp+0x34],ebx
	test eax,eax
	je Block68

 Block64:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block67

 Block65:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block67

 Block66:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block67:
	mov esi,dword ptr [ebp+0x60]
	mov dword ptr [ebp-0xB0],0

 Block68:
	mov ecx,dword ptr [ebx+0x3D]
	push ecx
	add ebx,0x39
	push ebx
	call _ZtlSecureFuseHelper<short>::call
	mov eax,dword ptr [esi+0x98]
	add esp,8
	cmp dword ptr [eax+0x50],0
	je Block126

 Block69:
	push 0
	mov ecx,esi
	call CUISkillDecEX::GetSkillRootVisible
	mov edx,eax
	mov dword ptr [ebp+0x60],edx
	test edx,edx
	je Block126

 Block70:
	mov eax,dword ptr [esi+0xA0]
	mov ecx,dword ptr [eax+0x38]
	lea eax,[ecx*8]
	add esi,0xA8
	mov dword ptr [ebp+0x5C],ecx
	mov dword ptr [ebp+0x54],0
	mov dword ptr [ebp+0x3C],eax
	mov ebx,0x74
	mov dword ptr [ebp+0x44],esi
	jmp Block72

 Block72:
	mov eax,dword ptr [edx+8]
	test eax,eax
	je Block126

 Block73:
	mov edx,dword ptr [ebp+0x54]
	mov eax,dword ptr [eax-4]
	add ecx,edx
	mov dword ptr [ebp+0x30],ecx
	cmp ecx,eax
	jae Block126

 Block74:
	mov eax,dword ptr [ebp+0x60]
	mov ecx,dword ptr [eax+8]
	mov edx,dword ptr [ebp+0x3C]
	mov eax,dword ptr [ecx+edx+4]
	mov ecx,dword ptr [ebp+0x44]
	mov dword ptr [ebp+0x50],eax
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+4]
	lea ecx,[eax+4]
	mov eax,dword ptr [edx+0x20]
	call eax
	mov ecx,3
	mov edi,eax
	mov word ptr [ebp],cx
	mov dword ptr [ebp+8],0xFF
	mov byte ptr [ebp-4],0x1A
	lea eax,[ebp+0x48]
	test edi,edi
	je Block76

 Block75:
	lea eax,[ebp+0x4C]

 Block76:
	mov ecx,dword ptr [ebp+0x68]
	mov eax,dword ptr [eax]
	test ecx,ecx
	je Block5

 Block77:
	lea edx,[ebp]
	push edx
	push eax
	lea eax,[ebx-0x15]
	push eax
	push 9
	call IWzCanvas::Copy
	cmp word ptr [ebp],8
	mov byte ptr [ebp-4],0x19
	jne Block80

 Block78:
	mov eax,dword ptr [ebp+8]
	xor ecx,ecx
	mov word ptr [ebp],cx
	test eax,eax
	je Block81

 Block79:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block81

 Block80:
	lea edx,[ebp]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block81:
	mov eax,dword ptr [ebp+0x50]
	add eax,4
	push eax
	lea ecx,[ebp+0x58]
	mov dword ptr [ebp+0x58],0
	call ZXString<char>::op_assign
	push 0x68
	push ecx
	mov ecx,dword ptr [ebp+0x64]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],0x1B
	mov dword ptr [ebp+0x38],esp
	test eax,eax
	je Block83

 Block82:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block83:
	lea ecx,[ebp+0x58]
	push ecx
	call format_string_1
	mov esi,dword ptr [ZImports::_VariantInit]
	add esp,0xC
	lea edx,[ebp-0x4C]
	push edx
	call esi
	lea eax,[ebp-0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block84:
	lea ecx,[ebp-0x2C]
	push ecx
	mov byte ptr [ebp-4],0x1C
	call esi
	lea edx,[ebp-0x2C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block85:
	mov edx,dword ptr [ebp+0x68]
	lea eax,[ebp-0x4C]
	push eax
	mov eax,dword ptr [ebp+0x58]
	lea ecx,[ebp-0x2C]
	push ecx
	push edx
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],0x1D
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],0x1E
	test ecx,ecx
	je Block5

 Block86:
	lea edx,[ebx-0x12]
	push edx
	push 0x31
	mov byte ptr [ebp-4],0x1D
	call IWzFont::DrawTextA
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],0x1C
	jne Block89

 Block87:
	xor eax,eax
	mov word ptr [ebp-0x2C],ax
	mov eax,dword ptr [ebp-0x24]
	test eax,eax
	je Block90

 Block88:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block90

 Block89:
	lea ecx,[ebp-0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block90:
	cmp word ptr [ebp-0x4C],8
	mov byte ptr [ebp-4],0x1B
	jne Block93

 Block91:
	mov eax,dword ptr [ebp-0x44]
	xor edx,edx
	mov word ptr [ebp-0x4C],dx
	test eax,eax
	je Block94

 Block92:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block94

 Block93:
	lea eax,[ebp-0x4C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block94:
	lea ecx,[ebp-0x8C]
	push ecx
	call esi
	lea edx,[ebp-0x8C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block95:
	lea eax,[ebp-0x6C]
	push eax
	mov byte ptr [ebp-4],0x1F
	call esi
	lea ecx,[ebp-0x6C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block96:
	mov eax,0x20
	mov byte ptr [ebp-4],0x20
	call __chkstk
	mov ecx,dword ptr [ebp+0x68]
	mov esi,esp
	lea edx,[ebp-0x8C]
	push edx
	lea eax,[ebp-0x6C]
	push eax
	mov eax,dword ptr [ebp+0x50]
	push ecx
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x50]
	push edx
	mov edx,dword ptr [ebp+0x34]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	call CSkillInfo::GetSkillLevel_0
	push 0xA
	push esi
	push eax
	call __itow
	add esp,8
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],0x21
	test ecx,ecx
	je Block5

 Block97:
	push ebx
	push 0x31
	mov byte ptr [ebp-4],0x20
	call IWzFont::DrawTextA
	mov esi,8
	mov byte ptr [ebp-4],0x1F
	cmp word ptr [ebp-0x6C],si
	jne Block100

 Block98:
	xor eax,eax
	mov word ptr [ebp-0x6C],ax
	mov eax,dword ptr [ebp-0x64]
	test eax,eax
	je Block101

 Block99:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block101

 Block100:
	lea ecx,[ebp-0x6C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block101:
	mov byte ptr [ebp-4],0x1B
	cmp word ptr [ebp-0x8C],si
	jne Block104

 Block102:
	mov eax,dword ptr [ebp-0x84]
	xor edx,edx
	mov word ptr [ebp-0x8C],dx
	test eax,eax
	je Block105

 Block103:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block105

 Block104:
	lea eax,[ebp-0x8C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block105:
	mov ecx,dword ptr [ebp+0x50]
	mov esi,dword ptr [ecx+edi*4+0x258]
	mov dword ptr [ebp+0x38],esi
	test esi,esi
	je Block107

 Block106:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+4]
	push esi
	call eax

 Block107:
	mov ecx,3
	mov word ptr [ebp-0xAC],cx
	mov dword ptr [ebp-0xA4],0xFF
	mov edi,dword ptr [ebp+0x68]
	lea edx,[ebp-0xAC]
	push edx
	push esi
	lea eax,[ebx-0x13]
	push eax
	push 0xB
	mov ecx,edi
	mov byte ptr [ebp-4],0x23
	call IWzCanvas::Copy
	cmp word ptr [ebp-0xAC],8
	mov byte ptr [ebp-4],0x22
	jne Block110

 Block108:
	mov eax,dword ptr [ebp-0xA4]
	xor ecx,ecx
	mov word ptr [ebp-0xAC],cx
	test eax,eax
	je Block111

 Block109:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block111

 Block110:
	lea edx,[ebp-0xAC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block111:
	cmp dword ptr [ebp+0x54],3
	jge Block120

 Block112:
	mov eax,dword ptr [ebp+0x60]
	mov eax,dword ptr [eax+8]
	test eax,eax
	je Block114

 Block113:
	mov eax,dword ptr [eax-4]

 Block114:
	dec eax
	cmp dword ptr [ebp+0x30],eax
	jae Block120

 Block115:
	lea ecx,[ebp-0x5C]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x5C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block116:
	mov ecx,dword ptr [ebp+0x40]
	lea eax,[ebp-0x5C]
	push eax
	push ecx
	lea edx,[ebx+0x10]
	push edx
	push 9
	mov ecx,edi
	mov byte ptr [ebp-4],0x24
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x5C],8
	mov byte ptr [ebp-4],0x22
	jne Block119

 Block117:
	xor eax,eax
	mov word ptr [ebp-0x5C],ax
	mov eax,dword ptr [ebp-0x54]
	test eax,eax
	je Block120

 Block118:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block120

 Block119:
	lea ecx,[ebp-0x5C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block120:
	mov byte ptr [ebp-4],0x1B
	test esi,esi
	je Block122

 Block121:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block122:
	mov eax,dword ptr [ebp+0x58]
	mov byte ptr [ebp-4],0x19
	test eax,eax
	je Block124

 Block123:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block124:
	inc dword ptr [ebp+0x54]
	mov eax,8
	add dword ptr [ebp+0x3C],eax
	add dword ptr [ebp+0x44],eax
	add ebx,0x28
	cmp ebx,0x114
	jge Block126

 Block125:
	mov edx,dword ptr [ebp+0x60]
	mov ecx,dword ptr [ebp+0x5C]
	jmp Block72

 Block126:
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],0x11
	test eax,eax
	je Block128

 Block127:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block128:
	mov eax,dword ptr [ebp+0x4C]
	mov byte ptr [ebp-4],9
	test eax,eax
	je Block130

 Block129:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block130:
	mov eax,dword ptr [ebp+0x48]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block132

 Block131:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block132:
	mov eax,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block134

 Block133:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block134:
	mov eax,dword ptr [ebp+0x68]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block136

 Block135:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block136:
	lea esp,[ebp-0xF4]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x6C]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x70
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CUIStatChangeConfirm::~CUIStatChangeConfirm
_SUB_EXCEPTION_HANDLER(5D3EB0)
__SUB_CLASS_THIS0(005D3EB0, __thiscall, 68530,  CUIStatChangeConfirm, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D3EB0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x10],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUIStatChangeConfirm::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUIStatChangeConfirm::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUIStatChangeConfirm::`vftable'{for `ZRefCounted'}
	lea edi,[esi+0xA0]
	xor ebx,ebx
	mov dword ptr [esp+0x1C],2
	cmp dword ptr [edi+4],ebx
	je Block2

 Block1:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block2:
	lea edi,[esi+0x98]
	mov byte ptr [esp+0x1C],1
	cmp dword ptr [edi+4],ebx
	je Block4

 Block3:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block4:
	lea edi,[esi+0x90]
	mov byte ptr [esp+0x1C],bl
	cmp dword ptr [edi+4],ebx
	je Block6

 Block5:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block6:
	mov ecx,esi
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call CDialog::~CDialog
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret
}
}
// CWvsContext::SendDropPickUpRequest
_SUB_EXCEPTION_HANDLER(5D5D50)
__SUB_CLASS_THIS(005D5D50, __thiscall, 8236,  CWvsContext, void, const tagPOINT&, unsigned long, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D5D50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block7

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block7

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1E
	jl Block7

 Block3:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+8]
	call eax
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block7

 Block4:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+8]
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block7

 Block5:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+8]
	call eax
	mov ecx,dword ptr [eax+0x120C]
	push ecx
	add eax,0x1204
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block7

 Block6:
	mov edi,dword ptr [esp+0x34]
	mov ecx,dword ptr [esi+0x3DFC]
	push edi
	call CDropPool::RecordRecentPickupItem
	push 0xF6
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x28],0
	call get_field
	mov dl,byte ptr [eax+0x168]
	mov byte ptr [esp+0x34],dl
	mov eax,dword ptr [esp+0x34]
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode1
	call get_update_time
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov ebx,dword ptr [esp+0x30]
	movzx ecx,word ptr [ebx]
	push ecx
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	movzx edx,word ptr [ebx+4]
	push edx
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x38]
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov edi,1
	mov dword ptr [esi+0x20B8],edi
	call get_update_time
	lea ecx,[esp+0x14]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esi+0x40B8],edi
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block7:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 0xC
}
}
// CWvsContext::GetPartyTownPortal
__SUB_CLASS_THIS(0060FC60, __thiscall, 8156,  CWvsContext, int32_t, long, PARTYDATA::TOWNPORTAL&) {
__asm {

 Block0:
	mov edx,dword ptr [ecx+0x3604]
	mov eax,dword ptr [esp+4]
	test edx,edx
	je Block4

 Block1:
	cmp dword ptr [ecx+eax*4+0x3608],0
	jne Block3

 Block2:
	xor eax,eax
	ret 8

 Block3:
	test edx,edx
	jne Block5

 Block4:
	mov edx,dword ptr [ecx+0x35EC]
	mov eax,dword ptr [esp+8]
	mov dword ptr [eax],edx
	mov edx,dword ptr [ecx+0x35F0]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ecx+0x35F4]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ecx+0x35F8]
	mov dword ptr [eax+0xC],edx
	mov ecx,dword ptr [ecx+0x35FC]
	mov dword ptr [eax+0x10],ecx
	mov eax,1
	ret 8

 Block5:
	lea edx,[eax+eax*4]
	lea eax,[ecx+edx*4+0x36D2]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [esp+8]
	mov dword ptr [ecx],edx
	mov edx,dword ptr [eax+4]
	mov dword ptr [ecx+4],edx
	mov edx,dword ptr [eax+8]
	mov dword ptr [ecx+8],edx
	mov edx,dword ptr [eax+0xC]
	mov dword ptr [ecx+0xC],edx
	mov eax,dword ptr [eax+0x10]
	mov dword ptr [ecx+0x10],eax
	mov eax,1
	ret 8
}
}
// CWvsContext::GetFriendByID
__SUB_CLASS_THIS(00612220, __thiscall, 8196,  CWvsContext, void, unsigned long, GW_Friend*) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	mov esi,ecx
	test eax,eax
	je Block5

 Block1:
	push edi
	mov edi,dword ptr [esp+0x10]
	test edi,edi
	je Block4

 Block2:
	mov ecx,dword ptr [esi+0x3788]
	push eax
	call CWvsContext::CFriend::FindIndex_0
	test eax,eax
	jl Block4

 Block3:
	mov ecx,dword ptr [esi+0x3788]
	mov esi,eax
	imul esi,0x27
	add esi,dword ptr [ecx]
	mov ecx,9
	rep movsd
	movsw
	movsb

 Block4:
	pop edi

 Block5:
	pop esi
	ret 8
}
}
// CWvsContext::ClearFieldUI
__SUB_CLASS_THIS0(005D4CB0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebx
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x3E5C]
	xor ebx,ebx
	cmp eax,ebx
	je Block2

 Block1:
	mov dword ptr [eax+0x11D0],1

 Block2:
	mov ecx,dword ptr [esi+0x3E34]
	push edi
	cmp ecx,ebx
	je Block5

 Block3:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E34],ebx
	lea edi,[esi+0x3E30]
	je Block5

 Block4:
	push ebx
	mov ecx,edi
	call ZRef<CUIItem>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block5:
	mov ecx,dword ptr [esi+0x3E3C]
	cmp ecx,ebx
	je Block8

 Block6:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E3C],ebx
	lea edi,[esi+0x3E38]
	je Block8

 Block7:
	push ebx
	mov ecx,edi
	call ZRef<CUIEquip>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block8:
	mov ecx,dword ptr [esi+0x3E44]
	cmp ecx,ebx
	je Block11

 Block9:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E44],ebx
	lea edi,[esi+0x3E40]
	je Block11

 Block10:
	push ebx
	mov ecx,edi
	call ZRef<CUIStat>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block11:
	mov ecx,dword ptr [esi+0x3E4C]
	cmp ecx,ebx
	je Block14

 Block12:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E4C],ebx
	lea edi,[esi+0x3E48]
	je Block14

 Block13:
	push ebx
	mov ecx,edi
	call ZRef<CUISkill>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block14:
	mov ecx,dword ptr [esi+0x3E54]
	cmp ecx,ebx
	je Block17

 Block15:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E54],ebx
	lea edi,[esi+0x3E50]
	je Block17

 Block16:
	push ebx
	mov ecx,edi
	call ZRef<CUISkillEx>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block17:
	mov ecx,dword ptr [esi+0x3E5C]
	cmp ecx,ebx
	je Block20

 Block18:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E5C],ebx
	lea edi,[esi+0x3E58]
	je Block20

 Block19:
	push ebx
	mov ecx,edi
	call ZRef<CUIKeyConfig>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block20:
	mov ecx,dword ptr [esi+0x3E64]
	cmp ecx,ebx
	je Block23

 Block21:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E64],ebx
	lea edi,[esi+0x3E60]
	je Block23

 Block22:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserList>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block23:
	mov ecx,dword ptr [esi+0x3E6C]
	cmp ecx,ebx
	je Block26

 Block24:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E6C],ebx
	lea edi,[esi+0x3E68]
	je Block26

 Block25:
	push ebx
	mov ecx,edi
	call ZRef<CUIQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block26:
	mov ecx,dword ptr [esi+0x3E74]
	cmp ecx,ebx
	je Block29

 Block27:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E74],ebx
	lea edi,[esi+0x3E70]
	je Block29

 Block28:
	push ebx
	mov ecx,edi
	call ZRef<CUIMedalQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block29:
	mov ecx,dword ptr [esi+0x3E7C]
	cmp ecx,ebx
	je Block32

 Block30:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E7C],ebx
	lea edi,[esi+0x3E78]
	je Block32

 Block31:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block32:
	mov ecx,dword ptr [esi+0x3EBC]
	cmp ecx,ebx
	je Block35

 Block33:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EBC],ebx
	lea edi,[esi+0x3EB8]
	je Block35

 Block34:
	push ebx
	mov ecx,edi
	call ZRef<CUIPartySearch>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block35:
	mov ecx,dword ptr [esi+0x37BC]
	cmp ecx,ebx
	je Block38

 Block36:
	call CWnd::Destroy
	cmp dword ptr [esi+0x37BC],ebx
	lea edi,[esi+0x37B8]
	je Block38

 Block37:
	push ebx
	mov ecx,edi
	call ZRef<CPartySearch_RemoCon>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block38:
	mov ecx,dword ptr [esi+0x3EA4]
	cmp ecx,ebx
	je Block41

 Block39:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EA4],ebx
	lea edi,[esi+0x3EA0]
	je Block41

 Block40:
	push ebx
	mov ecx,edi
	call ZRef<CUIEnergyBar>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block41:
	mov ecx,dword ptr [esi+0x3EB4]
	cmp ecx,ebx
	je Block44

 Block42:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EB4],ebx
	lea edi,[esi+0x3EB0]
	je Block44

 Block43:
	push ebx
	mov ecx,edi
	call ZRef<CUIMonsterBook>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block44:
	mov ecx,dword ptr [esi+0x3E8C]
	cmp ecx,ebx
	je Block47

 Block45:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E8C],ebx
	lea edi,[esi+0x3E88]
	je Block47

 Block46:
	push ebx
	mov ecx,edi
	call ZRef<CUIGuildBBS>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block47:
	mov ecx,dword ptr [esi+0x3E94]
	cmp ecx,ebx
	je Block50

 Block48:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E94],ebx
	lea edi,[esi+0x3E90]
	je Block50

 Block49:
	push ebx
	mov ecx,edi
	call ZRef<CAvatarMegaphone>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block50:
	mov ecx,dword ptr [esi+0x3F10]
	cmp ecx,ebx
	je Block53

 Block51:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F10],ebx
	lea edi,[esi+0x3F0C]
	je Block53

 Block52:
	push ebx
	mov ecx,edi
	call ZRef<CUIAccountMoreInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block53:
	mov ecx,dword ptr [esi+0x3F18]
	cmp ecx,ebx
	je Block56

 Block54:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F18],ebx
	lea edi,[esi+0x3F14]
	je Block56

 Block55:
	push ebx
	mov ecx,edi
	call ZRef<CUIFindFriend>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block56:
	mov ecx,dword ptr [esi+0x3EC4]
	cmp ecx,ebx
	je Block59

 Block57:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EC4],ebx
	lea edi,[esi+0x3EC0]
	je Block59

 Block58:
	push ebx
	mov ecx,edi
	call ZRef<CUIItemMaker>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block59:
	mov ecx,dword ptr [esi+0x3ED4]
	cmp ecx,ebx
	je Block62

 Block60:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3ED4],ebx
	lea edi,[esi+0x3ED0]
	je Block62

 Block61:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamily>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block62:
	mov ecx,dword ptr [esi+0x3EDC]
	cmp ecx,ebx
	je Block65

 Block63:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EDC],ebx
	lea edi,[esi+0x3ED8]
	je Block65

 Block64:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamilyChart>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block65:
	mov ecx,dword ptr [esi+0x3ECC]
	cmp ecx,ebx
	je Block68

 Block66:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3ECC],ebx
	lea edi,[esi+0x3EC8]
	je Block68

 Block67:
	push ebx
	mov ecx,edi
	call ZRef<CUIRanking>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block68:
	mov ecx,dword ptr [esi+0x3EE4]
	cmp ecx,ebx
	je Block71

 Block69:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EE4],ebx
	lea edi,[esi+0x3EE0]
	je Block71

 Block70:
	push ebx
	mov ecx,edi
	call ZRef<CUIOperatorBoard>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block71:
	mov ecx,dword ptr [esi+0x3EEC]
	cmp ecx,ebx
	je Block74

 Block72:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EEC],ebx
	lea edi,[esi+0x3EE8]
	je Block74

 Block73:
	push ebx
	mov ecx,edi
	call ZRef<CUIOpBoardState>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block74:
	mov ecx,dword ptr [esi+0x3EF4]
	cmp ecx,ebx
	je Block77

 Block75:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EF4],ebx
	lea edi,[esi+0x3EF0]
	je Block77

 Block76:
	push ebx
	mov ecx,edi
	call ZRef<CUIDragonBox>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block77:
	mov ecx,dword ptr [esi+0x3EAC]
	call CUIRaiseManager::DestroyWindows
	mov ecx,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	pop edi
	cmp ecx,ebx
	je Block80

 Block78:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	cmp eax,ebx
	je Block80

 Block79:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block80:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp ecx,ebx
	je Block83

 Block81:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp eax,ebx
	je Block83

 Block82:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block83:
	mov ecx,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	cmp ecx,ebx
	je Block86

 Block84:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	cmp eax,ebx
	je Block86

 Block85:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block86:
	mov ecx,dword ptr [TSingleton<CUIMessenger>::ms_pInstance]
	cmp ecx,ebx
	je Block89

 Block87:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMessenger>::ms_pInstance]
	cmp eax,ebx
	je Block89

 Block88:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block89:
	mov ecx,dword ptr [TSingleton<CUIAntiMacro>::ms_pInstance]
	cmp ecx,ebx
	je Block92

 Block90:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIAntiMacro>::ms_pInstance]
	cmp eax,ebx
	je Block92

 Block91:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block92:
	mov ecx,dword ptr [TSingleton<CUIAdminAntiMacro>::ms_pInstance]
	cmp ecx,ebx
	je Block95

 Block93:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIAdminAntiMacro>::ms_pInstance]
	cmp eax,ebx
	je Block95

 Block94:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block95:
	mov ecx,dword ptr [TSingleton<CUIInitialQuiz>::ms_pInstance]
	cmp ecx,ebx
	je Block98

 Block96:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIInitialQuiz>::ms_pInstance]
	cmp eax,ebx
	je Block98

 Block97:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block98:
	mov ecx,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	cmp ecx,ebx
	je Block100

 Block99:
	call CWnd::Destroy

 Block100:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp ecx,ebx
	je Block103

 Block101:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp eax,ebx
	je Block103

 Block102:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block103:
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp ecx,ebx
	je Block106

 Block104:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp eax,ebx
	je Block106

 Block105:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block106:
	mov ecx,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	cmp ecx,ebx
	je Block109

 Block107:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	cmp eax,ebx
	je Block109

 Block108:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block109:
	mov ecx,dword ptr [TSingleton<CUIMonsterCarnival>::ms_pInstance]
	cmp ecx,ebx
	je Block112

 Block110:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMonsterCarnival>::ms_pInstance]
	cmp eax,ebx
	je Block112

 Block111:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block112:
	mov ecx,dword ptr [TSingleton<CUIEnergyBar>::ms_pInstance]
	cmp ecx,ebx
	je Block115

 Block113:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIEnergyBar>::ms_pInstance]
	cmp eax,ebx
	je Block115

 Block114:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block115:
	mov ecx,dword ptr [TSingleton<CWndGuildBoard>::ms_pInstance]
	cmp ecx,ebx
	je Block118

 Block116:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CWndGuildBoard>::ms_pInstance]
	cmp eax,ebx
	je Block118

 Block117:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block118:
	mov ecx,dword ptr [TSingleton<CUIPartyHP>::ms_pInstance]
	cmp ecx,ebx
	je Block121

 Block119:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIPartyHP>::ms_pInstance]
	cmp eax,ebx
	je Block121

 Block120:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block121:
	mov ecx,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	cmp ecx,ebx
	je Block124

 Block122:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	cmp eax,ebx
	je Block124

 Block123:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block124:
	mov ecx,dword ptr [TSingleton<CCakePieEvent>::ms_pInstance]
	cmp ecx,ebx
	je Block126

 Block125:
	call CCakePieEvent::CloseUI_ItemInfo

 Block126:
	lea ecx,[esi+0x35D4]
	call CTemporaryStatView::Hide
	mov ecx,dword ptr [TSingleton<CUIScreenMsg>::ms_pInstance]
	cmp ecx,ebx
	je Block128

 Block127:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block128:
	mov ecx,esi
	call CWvsContext::ClearFadeWnd
	mov ecx,esi
	call CWvsContext::ClearQuestTimer
	mov eax,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	cmp eax,ebx
	je Block131

 Block129:
	cmp dword ptr [eax+8],ebx
	je Block131

 Block130:
	mov dword ptr [esi+0x37B0],1
	mov eax,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	mov ecx,dword ptr [eax+0xC]
	mov dword ptr [esi+0x37B4],ecx
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	push 1
	call CRadioManager::Mute
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	push ebx
	call CRadioManager::ShowUI

 Block131:
	mov ecx,dword ptr [TSingleton<CDamageMeter>::ms_pInstance]
	pop esi
	cmp ecx,ebx
	pop ebx
	je Block133

 Block132:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block133:
	ret
}
}
// CWvsContext::SetWorldInfo
__SUB_CLASS_THIS(005E02A0, __thiscall, 8115,  CWvsContext, void, long, long, ZArray<ZXString<char> >&, ZArray<int>&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov edx,dword ptr [esp+8]
	push esi
	mov esi,ecx
	mov dword ptr [esi+0x205C],eax
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push edi
	mov dword ptr [ecx+0x64],eax
	lea edi,[esi+0x3F74]
	mov ecx,edi
	mov dword ptr [esi+0x2060],edx
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [eax]
	mov dword ptr [edi],ecx
	add esi,0x3F78
	mov ecx,esi
	mov dword ptr [eax],0
	call ZArray<int>::RemoveAll
	mov eax,dword ptr [esp+0x18]
	mov edx,dword ptr [eax]
	mov dword ptr [esi],edx
	pop edi
	mov dword ptr [eax],0
	pop esi
	ret 0x10
}
}
// CWvsContext::SetPasssiveSkillBuffing
__SUB_CLASS_THIS(005CD220, __thiscall, 8425,  CWvsContext, void, const SecondaryStat&) {
__asm {

 Block0:
	push ebx
	push ebp
	push esi
	push edi
	push 0x58
	lea esi,[ecx+0x41C8]
	push 0
	push esi
	call _memset
	mov ebp,dword ptr [esp+0x20]
	add esp,0xC
	lea edi,[ebp+0x1270]
	mov ebx,0x16
	jmp Block2

 Block2:
	mov eax,dword ptr [ebp+0x1254]
	push eax
	lea eax,[ebp+0x124C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp eax,1
	jle Block5

 Block3:
	cmp dword ptr [edi],0
	jle Block5

 Block4:
	mov eax,1
	jmp Block6

 Block5:
	xor eax,eax

 Block6:
	mov dword ptr [esi],eax
	add edi,4
	add esi,4
	sub ebx,1
	jne Block2

 Block7:
	pop edi
	pop esi
	pop ebp
	pop ebx
	ret 4
}
}
// CTemporaryStatView::SetTemporary
_SUB_EXCEPTION_HANDLER(35FA50)
__SUB_CLASS_THIS(0035FA50, __thiscall, 5656,  CTemporaryStatView, void, long, long, long, NakedParam<MY_UINT128>, NakedParam<ZXString<char>>, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35FA50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x14],edi
	mov eax,dword ptr [esp+0x4C]
	push eax
	mov dword ptr [esp+0x44],0
	call is_guided_bullet_skill
	add esp,4
	test eax,eax
	jne Block30

 Block1:
	xor esi,esi
	mov dword ptr [esp+0x24],esi
	mov eax,dword ptr [edi+0x10]
	mov byte ptr [esp+0x40],1
	mov dword ptr [esp+0x18],eax
	test eax,eax
	je Block16

 Block2:
	lea ecx,[esp+0x18]
	push ecx
	mov ebx,eax
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::GetNext
	mov edi,eax
	mov eax,dword ptr [edi+4]
	add esp,4
	test eax,eax
	je Block4

 Block3:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block4:
	test esi,esi
	je Block7

 Block5:
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block7

 Block6:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block7:
	mov esi,dword ptr [edi+4]
	sub esp,0x10
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x80
	lea edx,[esp+0x68]
	push edx
	mov dword ptr [esp+0x3C],esi
	lea edi,[esi+0xC]
	call MY_UINT128::_ctor_2
	lea eax,[esp+0x38]
	push eax
	call MY_UINT128::op_negate
	add esp,0x14
	push eax
	mov ecx,edi
	call MY_UINT128::operator&=
	mov eax,dword ptr [esi+0x1C]
	cmp eax,3
	je Block9

 Block8:
	cmp eax,4
	jne Block11

 Block9:
	cmp eax,dword ptr [esp+0x48]
	jne Block11

 Block10:
	mov ecx,dword ptr [esi+0x20]
	cmp ecx,dword ptr [esp+0x4C]
	je Block14

 Block11:
	cmp eax,3
	je Block15

 Block12:
	cmp eax,4
	je Block15

 Block13:
	push 0
	mov ecx,edi
	call MY_UINT128::compareTo_1
	test eax,eax
	jne Block15

 Block14:
	mov ecx,dword ptr [esp+0x14]
	push ebx
	add ecx,4
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::RemoveAt

 Block15:
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	jne Block2

 Block16:
	push 0x48
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov edi,eax
	mov dword ptr [esp+0x1C],edi
	mov bl,2
	mov byte ptr [esp+0x40],bl
	test edi,edi
	je Block18

 Block17:
	mov edx,dword ptr [esp+0x6C]
	mov eax,dword ptr [esp+0x68]
	push edx
	push eax
	push ecx
	mov ecx,esp
	lea edx,[esp+0x70]
	mov dword ptr [esp+0x78],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	sub esp,0x10
	mov ecx,esp
	mov dword ptr [esp+0x84],esp
	push 0x80
	lea eax,[esp+0x74]
	push eax
	mov byte ptr [esp+0x64],3
	call MY_UINT128::_ctor_2
	mov ecx,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x68]
	mov eax,dword ptr [esp+0x64]
	push ecx
	push edx
	push eax
	mov ecx,edi
	mov byte ptr [esp+0x68],bl
	call CTemporaryStatView::TEMPORARY_STAT::_ctor_0
	mov edi,eax
	jmp Block19

 Block18:
	xor edi,edi

 Block19:
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	mov byte ptr [esp+0x40],1
	test edi,edi
	je Block21

 Block20:
	lea ecx,[edi+4]
	push ecx
	call ebx

 Block21:
	mov dword ptr [esp+0x24],edi
	test esi,esi
	je Block24

 Block22:
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block24

 Block23:
	push ebp
	call ebx
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block24:
	cmp dword ptr [esp+0x48],3
	mov esi,dword ptr [esp+0x14]
	lea ecx,[esi+4]
	jne Block26

 Block25:
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::AddHead_
	lea ecx,[esp+0x20]
	push ecx
	jmp Block27

 Block26:
	call ZList<ZRef<CTemporaryStatView::TEMPORARY_STAT>>::AddTail_
	lea edx,[esp+0x20]
	push edx

 Block27:
	mov ecx,eax
	call ZRef<CTemporaryStatView::TEMPORARY_STAT>::op_assign_copy
	mov ecx,esi
	call CTemporaryStatView::AdjustPosition
	mov byte ptr [esp+0x40],0
	test edi,edi
	je Block30

 Block28:
	lea esi,[edi+4]
	push esi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block30

 Block29:
	push esi
	call ebx
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block30:
	mov eax,dword ptr [esp+0x64]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block32

 Block31:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block32:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 0x28
}
}
// _anon__IsGuildSupplyQuest
__SUB(005CCEB0, __cdecl, 46623,  int32_t, uint16_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	add eax,0xFFFF9A70
	mov ecx,0x3E7
	cmp cx,ax
	sbb eax,eax
	inc eax
	ret
}
}
// CWvsContext::SendScriptRunItemRequest
_SUB_EXCEPTION_HANDLER(5DE7A0)
__SUB_CLASS_THIS(005DE7A0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DE7A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x30]
	mov eax,0x68DB8BAD
	imul edi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xF3
	je Block2

 Block1:
	cmp edi,0x3CF271
	jne Block7

 Block2:
	cmp dword ptr [esi+0x20B8],0
	jne Block7

 Block3:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block7

 Block4:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block7

 Block5:
	push 1
	push edi
	mov ecx,esi
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block7

 Block6:
	push 0x54
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block7:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 8
}
}
// CWvsContext::SendFamilyChartRequest
_SUB_EXCEPTION_HANDLER(5FA330)
__SUB_CLASS_THIS(005FA330, __thiscall, 8275,  CWvsContext, void, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5FA330
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	lea eax,[esp+0x10]
	xor ebx,ebx
	push eax
	mov dword ptr [esp+0x2C],ebx
	call GetLocalTime
	mov dword ptr [esp+0xC],ebx
	lea ecx,[esp+0xC]
	push ecx
	mov byte ptr [esp+0x2C],1
	call CScreenShot::GetBaseFolder
	mov dword ptr [esp+0xC],ebx
	movzx edx,word ptr [esp+0x20]
	movzx eax,word ptr [esp+0x1E]
	movzx ecx,word ptr [esp+0x1C]
	push edx
	movzx edx,word ptr [esp+0x1E]
	push eax
	movzx eax,word ptr [esp+0x1E]
	push ecx
	movzx ecx,word ptr [esp+0x20]
	push edx
	mov edx,dword ptr [esp+0x44]
	push eax
	mov eax,dword ptr [esp+0x24]
	push ecx
	push edx
	push eax
	lea ecx,[esp+0x2C]
	push offset _S_SS04D02D02D02D02
	push ecx
	mov byte ptr [esp+0x54],2
	call ZXString<char>::Format
	lea edx,[esp+0x34]
	push edx
	call CScreenShot::SaveFullScreenToJpg_0
	mov eax,dword ptr [esp+0x38]
	add esp,0x30
	mov byte ptr [esp+0x28],1
	cmp eax,ebx
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov eax,dword ptr [esp+0xC]
	mov byte ptr [esp+0x28],bl
	cmp eax,ebx
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov eax,dword ptr [esp+0x30]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	cmp eax,ebx
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop ebx
	add esp,0x24
	ret 4
}
}
// GUILDDATA::operator=
__SUB_CLASS_THIS(0060D270, __thiscall, 45438,  GUILDDATA, GUILDDATA&, const GUILDDATA&) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov eax,dword ptr [edi]
	mov esi,ecx
	lea ecx,[edi+4]
	push ecx
	lea ecx,[esi+4]
	mov dword ptr [esi],eax
	call ZXString<char>::op_assign
	lea edx,[edi+8]
	push edx
	lea ecx,[esi+8]
	call ZArray<ZXString<char>>::operator=
	lea eax,[edi+0xC]
	push eax
	lea ecx,[esi+0xC]
	call ZArray<unsigned long>::operator=
	lea ecx,[edi+0x10]
	push ecx
	lea ecx,[esi+0x10]
	call ZArray<GUILDMEMBER>::operator=
	mov edx,dword ptr [edi+0x14]
	mov dword ptr [esi+0x14],edx
	mov ax,word ptr [edi+0x18]
	mov word ptr [esi+0x18],ax
	mov cl,byte ptr [edi+0x1A]
	mov byte ptr [esi+0x1A],cl
	mov dx,word ptr [edi+0x1B]
	lea ecx,[edi+0x1E]
	mov word ptr [esi+0x1B],dx
	mov al,byte ptr [edi+0x1D]
	push ecx
	lea ecx,[esi+0x1E]
	mov byte ptr [esi+0x1D],al
	call ZXString<char>::op_assign
	mov edx,dword ptr [edi+0x22]
	mov dword ptr [esi+0x22],edx
	mov eax,dword ptr [edi+0x26]
	mov dword ptr [esi+0x26],eax
	mov ecx,dword ptr [edi+0x2A]
	lea edx,[edi+0x2E]
	mov dword ptr [esi+0x2A],ecx
	push edx
	lea ecx,[esi+0x2E]
	call ZMap<long, GUILDDATA::SKILLENTRY, long>::operator=
	add edi,0x46
	push edi
	lea ecx,[esi+0x46]
	call ZArray<long>::operator=
	pop edi
	mov eax,esi
	pop esi
	ret 4
}
}
// CWvsContext::CFriend::UpdateBlockedFriend
__SUB_CLASS_THIS(0060FD80, __thiscall, 8447,  CWvsContext::CFriend, void, long) {
__asm {

 Block0:
	push ebx
	push ebp
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esp+0x10]
	mov eax,dword ptr [esi]
	mov ebx,dword ptr [esi+8]
	push edi
	mov edi,ecx
	imul edi,0x27
	add eax,edi
	mov eax,dword ptr [eax]
	lea ebp,[ecx*4]
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	push 0
	push eax
	add ebx,ebp
	call CConfig::IsBlockedFriend
	mov dword ptr [ebx],eax
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+edi]
	mov esi,dword ptr [esi+0xC]
	add eax,edi
	push 1
	push ecx
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	add esi,ebp
	call CConfig::IsBlockedFriend
	pop edi
	mov dword ptr [esi],eax
	pop esi
	pop ebp
	pop ebx
	ret 4
}
}
// ALLIANCEDATA::~ALLIANCEDATA
_SUB_EXCEPTION_HANDLER(5E0210)
__SUB_CLASS_THIS0(005E0210, __thiscall, 45460,  ALLIANCEDATA, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E0210
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	mov eax,dword ptr [esi+0x14]
	mov dword ptr [esp+0x14],2
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	lea ecx,[esi+0xC]
	mov byte ptr [esp+0x14],1
	call ZArray<unsigned long>::RemoveAll
	lea ecx,[esi+8]
	mov byte ptr [esp+0x14],0
	call ZArray<ZXString<char>>::RemoveAll
	mov esi,dword ptr [esi+4]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block4

 Block3:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::GetTopStackForTab
__SUB_CLASS_THIS0(005CF8C0, __thiscall, 8402,  CWvsContext, CUIWnd*) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x40A0]
	test eax,eax
	je Block5

 Block1:
	cmp dword ptr [eax-4],0
	je Block5

 Block2:
	test eax,eax
	jne Block4

 Block3:
	mov ecx,eax
	mov eax,dword ptr [ecx+eax*4-4]
	ret

 Block4:
	mov eax,dword ptr [eax-4]
	mov ecx,dword ptr [ecx+0x40A0]
	mov eax,dword ptr [ecx+eax*4-4]
	ret

 Block5:
	xor eax,eax
	ret
}
}
// COpenGatePool::AddOpenGate2
_SUB_EXCEPTION_HANDLER(28BF20)
__SUB_CLASS_THIS(0028BF20, __thiscall, 51998,  COpenGatePool, void, NakedParam<ZRef<COpenGatePool::OPENGATE>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_28BF20
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	lea ecx,[esi+0x48]
	mov dword ptr [esp+0x14],0
	call ZList<ZRef<COpenGatePool::OPENGATE>>::AddTail_
	mov edi,eax
	lea eax,[esp+0x1C]
	push eax
	mov ecx,edi
	call ZRef<COpenGatePool::OPENGATE>::op_assign_copy
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [ecx+4],edi
	mov eax,dword ptr [esp+0x20]
	lea edx,[esp+0x1C]
	push edx
	add eax,8
	push eax
	lea ecx,[esi+0x30]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::Insert
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CUIJoyPad::Draw
_SUB_EXCEPTION_HANDLER(5743F0)
__SUB_CLASS_THIS(005743F0, __thiscall, 13662,  CUIJoyPad, void, const tagRECT*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5743F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x2C
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x4C]
	push eax
	call CWnd::Draw
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,esi
	call CWnd::GetCanvas
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	lea edx,[esp+0x4C]
	push edx
	mov dword ptr [esp+0x48],0
	call CInputSystem::GetJoystickName
	lea eax,[esp+0x10]
	push 0x31
	push eax
	mov byte ptr [esp+0x4C],1
	call get_basic_font
	add esp,8
	mov eax,dword ptr [esp+0x4C]
	mov esi,dword ptr [ZImports::_VariantInit]
	mov edi,dword ptr [ZImports::_VariantClear]
	mov byte ptr [esp+0x44],2
	test eax,eax
	je Block14

 Block1:
	cmp byte ptr [eax],0
	je Block14

 Block2:
	lea ecx,[esp+0x1C]
	push ecx
	call esi
	lea edx,[esp+0x1C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	mov edx,dword ptr [esp+0x4C]
	lea eax,[esp+0x1C]
	push eax
	push ecx
	mov dword ptr [esp+0x1C],esp
	mov ecx,esp
	mov bl,3
	push edx
	mov byte ptr [esp+0x50],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x18]
	mov byte ptr [esp+0x4C],4
	test ecx,ecx
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	mov byte ptr [esp+0x4C],bl
	call IWzFont::CalcTextWidth
	cmp eax,0x50
	seta bl
	cmp word ptr [esp+0x1C],8
	mov byte ptr [esp+0x44],2
	jne Block9

 Block7:
	xor eax,eax
	mov word ptr [esp+0x1C],ax
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block10

 Block8:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block10

 Block9:
	lea ecx,[esp+0x1C]
	push ecx
	call edi

 Block10:
	test bl,bl
	je Block16

 Block11:
	mov edx,dword ptr [esp+0x10]
	push 0x50
	push ecx
	mov eax,esp
	mov dword ptr [eax],edx
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x1C],esp
	test eax,eax
	je Block13

 Block12:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block13:
	lea eax,[esp+0x54]
	push eax
	call format_string_1
	add esp,0xC
	jmp Block16

 Block14:
	lea ecx,[esp+0x14]
	push 0x1A54
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0x48],5
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x44],2
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	lea edx,[esp+0x2C]
	push edx
	call esi
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block18

 Block17:
	push eax
	call _com_issue_error

 Block18:
	lea ecx,[esp+0x1C]
	push ecx
	mov byte ptr [esp+0x48],6
	call esi
	lea edx,[esp+0x1C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block20

 Block19:
	push eax
	call _com_issue_error

 Block20:
	mov edx,dword ptr [esp+0x10]
	lea eax,[esp+0x2C]
	push eax
	mov eax,dword ptr [esp+0x50]
	lea ecx,[esp+0x20]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	mov bl,7
	push eax
	mov byte ptr [esp+0x58],bl
	call _xbstr_t::_ctor_0
	mov esi,dword ptr [esp+0x28]
	mov byte ptr [esp+0x54],8
	test esi,esi
	jne Block22

 Block21:
	push 0x80004003
	call _com_issue_error

 Block22:
	push 0x22
	push 0x58
	mov ecx,esi
	mov byte ptr [esp+0x5C],bl
	call IWzCanvas::DrawTextA
	mov ebx,8
	mov byte ptr [esp+0x44],6
	cmp word ptr [esp+0x1C],bx
	jne Block25

 Block23:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	test eax,eax
	je Block26

 Block24:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block26

 Block25:
	lea edx,[esp+0x1C]
	push edx
	call edi

 Block26:
	mov byte ptr [esp+0x44],2
	cmp word ptr [esp+0x2C],bx
	jne Block29

 Block27:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea ecx,[esp+0x2C]
	push ecx
	call edi

 Block30:
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x44],1
	test eax,eax
	je Block32

 Block31:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block32:
	mov eax,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x44],0
	test eax,eax
	je Block34

 Block33:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block34:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	mov dword ptr [esp+0x48],0xFFFFFFFF
	call edx
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x38
	ret 4
}
}
// CWvsContext::IsEquipped
__SUB_CLASS_THIS(005CC9F0, __thiscall, 8136,  CWvsContext, int32_t, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0x15
	ja Block2

 Block1:
	mov eax,dword ptr [ecx+eax*4+0x41C8]
	ret 4

 Block2:
	xor eax,eax
	ret 4
}
}
// CWvsContext::OnMonsterBookSetCard
_SUB_EXCEPTION_HANDLER(5DDCB0)
__SUB_CLASS_THIS(005DDCB0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DDCB0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0xC],0
	mov edi,dword ptr [esp+0x24]
	mov ecx,edi
	mov dword ptr [esp+0x1C],0
	call CInPacket::Decode1
	movzx eax,al
	test eax,eax
	je Block8

 Block1:
	mov ecx,edi
	call CInPacket::Decode4
	mov ecx,edi
	mov esi,eax
	call CInPacket::Decode4
	mov edi,eax
	push edi
	push esi
	call CUserLocal::SetMonsterCardCount
	add esp,8
	cmp edi,1
	jne Block3

 Block2:
	call CUserLocal::UpdateMonsterBookInfo

 Block3:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	push 0
	push esi
	call CUserLocal::SetMonsterCardCheckList
	mov ecx,dword ptr [TSingleton<CUIMonsterBook>::ms_pInstance]
	test ecx,ecx
	je Block5

 Block4:
	call CUIMonsterBook::UpdateUI

 Block5:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x14]
	push eax
	call CItemInfo::GetItemName
	mov esi,eax
	lea ecx,[esp+0x24]
	push 0xA4A
	push ecx
	mov byte ptr [esp+0x24],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x14]
	push eax
	mov byte ptr [esp+0x28],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0xC
	mov byte ptr [esp+0x1C],1
	test eax,eax
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov eax,dword ptr [esp+0x10]
	jmp Block9

 Block8:
	lea ecx,[esp+0x24]
	push 0xA4B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x10]
	mov byte ptr [esp+0x20],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x24]

 Block9:
	mov byte ptr [esp+0x1C],0
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov esi,dword ptr [esp+0xC]
	je Block13

 Block12:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x18],esp
	push 0
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],0
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd

 Block13:
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test esi,esi
	je Block15

 Block14:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block15:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret 4
}
}
// CWvsContext::GetChannelName
__SUB_CLASS_THIS(0012FEC0, __thiscall, 8116,  CWvsContext, const char*, long) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [esp+8]
	push ebx
	xor ebx,ebx
	push esi
	mov dword ptr [esp+8],ebx
	test eax,eax
	jl Block4

 Block1:
	mov edx,dword ptr [ecx+0x3F74]
	test edx,edx
	je Block4

 Block2:
	cmp eax,dword ptr [edx-4]
	jae Block4

 Block3:
	mov ecx,edx
	lea eax,[ecx+eax*4]
	jmp Block5

 Block4:
	push 0
	push offset _S_
	push 0
	push 0
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x20],ebx
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	lea ecx,[esp+0x14]
	call ZXString<char>::ReleaseBuffer
	lea eax,[esp+0x10]
	mov ebx,1

 Block5:
	mov esi,dword ptr [eax]
	test bl,1
	je Block8

 Block6:
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov eax,esi
	pop esi
	pop ebx
	pop ecx
	ret 4
}
}
// CWvsContext::CFriend::~CFriend
_SUB_EXCEPTION_HANDLER(5D8090)
__SUB_CLASS_THIS0(005D8090, __thiscall, 8460,  CWvsContext::CFriend, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D8090
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	lea ecx,[esi+0xC]
	mov dword ptr [esp+0x14],2
	call ZArray<int>::RemoveAll
	lea ecx,[esi+8]
	mov byte ptr [esp+0x14],1
	call ZArray<int>::RemoveAll
	lea ecx,[esi+4]
	mov byte ptr [esp+0x14],0
	call ZArray<int>::RemoveAll
	mov ecx,esi
	mov dword ptr [esp+0x14],0xFFFFFFFF
	call ZArray<GW_Friend>::RemoveAll
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// COpenGatePool::~COpenGatePool
_SUB_EXCEPTION_HANDLER(5D3A70)
__SUB_CLASS_THIS0(005D3A70, __thiscall, 51989,  COpenGatePool, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D3A70
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	int 3// TODO: 	mov dword ptr [esi],offset COpenGatePool::`vftable'
	lea ecx,[esi+0x48]
	mov dword ptr [esp+0x14],3
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<ZRef<COpenGatePool::OPENGATE>>::`vftable'
	call ZList<ZRef<COpenGatePool::OPENGATE>>::RemoveAll
	lea ecx,[esi+0x30]
	mov byte ptr [esp+0x14],2
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::`vftable'
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::RemoveAll
	lea ecx,[esi+0x1C]
	mov byte ptr [esp+0x14],1
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<ZRef<COpenGatePool::OPENGATE>>::`vftable'
	call ZList<ZRef<COpenGatePool::OPENGATE>>::RemoveAll
	lea ecx,[esi+4]
	mov byte ptr [esp+0x14],0
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::`vftable'
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::RemoveAll
	mov dword ptr [TSingleton<COpenGatePool>::ms_pInstance],0
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// GUILDDATA::FindIndex
__SUB_CLASS_THIS(0012B330, __thiscall, 45447,  GUILDDATA, long, unsigned long) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,ecx
	xor esi,esi
	call GUILDDATA::GetCount
	test eax,eax
	jle Block4

 Block1:
	mov ecx,dword ptr [edi+0xC]
	mov edx,dword ptr [esp+0xC]

 Block2:
	cmp dword ptr [ecx],edx
	je Block5

 Block3:
	inc esi
	add ecx,4
	cmp esi,eax
	jl Block2

 Block4:
	pop edi
	or eax,0xFFFFFFFF
	pop esi
	ret 4

 Block5:
	pop edi
	mov eax,esi
	pop esi
	ret 4
}
}
// CUISkillDec::OnSkillDecButton
__SUB_CLASS_THIS(004524B0, __thiscall, 68560,  CUISkillDec, void, long) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0xA0]
	mov eax,dword ptr [eax+0x38]
	mov ecx,dword ptr [esp+8]
	add eax,ecx
	push eax
	mov ecx,esi
	call CUISkillDec::GetSkillEntry
	test eax,eax
	je Block2

 Block1:
	mov edx,dword ptr [eax]
	mov dword ptr [esi+0xD8],edx

 Block2:
	pop esi
	ret 4
}
}
// CUIStatChange::CreateStatChangeDlg
__SUB_CLASS_THIS0(005CC750, __thiscall, 68506,  CUIStatChange, void) {
__asm {

 Block0:
	cmp dword ptr [ecx+0xC8],0
	mov eax,offset _S_UIUIWINDOW2IMGRE__1
	jne Block2

 Block1:
	mov eax,offset _S_UIUIWINDOW2IMGRE

 Block2:
	push 1
	push 0
	push 1
	push eax
	call CDialog::CreateDlg_2
	ret
}
}
// CUISkillInc::OnCreate
_SUB_EXCEPTION_HANDLER(458AC0)
__SUB_CLASS_THIS(00458AC0, __thiscall, 68662,  CUISkillInc, void, void*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_458AC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	push 0x74
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	xor esi,esi
	mov dword ptr [esp+0x38],esi
	cmp eax,esi
	je Block2

 Block1:
	mov ecx,eax
	call CCtrlScrollBar::_ctor_default
	jmp Block3

 Block2:
	xor eax,eax

 Block3:
	mov dword ptr [esp+0x38],0xFFFFFFFF
	cmp eax,esi
	je Block12

 Block4:
	add eax,8
	cmp eax,esi
	je Block12

 Block5:
	lea ebx,[eax-8]
	cmp ebx,esi
	je Block7

 Block6:
	lea eax,[ebx+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block7:
	mov eax,dword ptr [edi+0x98]
	mov dword ptr [edi+0x98],ebx
	mov dword ptr [esp+0x1C],eax
	cmp eax,esi
	je Block9

 Block8:
	push esi
	lea ecx,[esp+0x1C]
	call ZRef<CCtrlScrollBar>::_ReleaseRaw

 Block9:
	mov ecx,dword ptr [edi+0x98]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x28]
	push esi
	push 0x9B
	push 0x5D
	push 0x96
	push 8
	push 1
	push 0x7D1
	push edi
	call eax
	mov eax,dword ptr [edi+0x98]
	mov dword ptr [eax+0x34],0x9C
	mov dword ptr [esp+0x2C],esi
	mov dword ptr [esp+0x24],esi
	mov dword ptr [esp+0x28],esi
	lea ecx,[esp+0x14]
	push 0xB9E
	push ecx
	mov dword ptr [esp+0x40],1
	mov dword ptr [esp+0x28],esi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x3C],2
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x38],1
	cmp eax,esi
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block11:
	mov dword ptr [esp+0x14],esi
	mov ebx,0x71
	lea ebp,[edi+0xA0]
	jmp Block16

 Block12:
	xor ebx,ebx
	jmp Block7

 Block15:
	xor esi,esi

 Block16:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x18],eax
	mov byte ptr [esp+0x38],3
	cmp eax,esi
	je Block18

 Block17:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block19

 Block18:
	xor eax,eax

 Block19:
	mov byte ptr [esp+0x38],1
	cmp eax,esi
	je Block23

 Block20:
	add eax,8
	cmp eax,esi
	je Block23

 Block21:
	lea esi,[eax-8]
	test esi,esi
	je Block23

 Block22:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block23:
	mov eax,dword ptr [ebp]
	mov dword ptr [ebp],esi
	test eax,eax
	je Block27

 Block24:
	lea esi,[eax+8]
	lea eax,[esi+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block27

 Block25:
	lea ecx,[esi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block27

 Block26:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block27:
	mov esi,dword ptr [esp+0x14]
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x20]
	push eax
	push 1
	push ebx
	push 0x85
	lea eax,[esi+0x7DA]
	push eax
	push edi
	call edx
	inc esi
	add ebx,0x28
	add ebp,8
	cmp ebx,0x111
	mov dword ptr [esp+0x14],esi
	jl Block15

 Block28:
	lea eax,[esp+0x14]
	push 0x1962
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x3C],4
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x38],1
	test eax,eax
	je Block30

 Block29:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block30:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x18],eax
	mov byte ptr [esp+0x38],5
	test eax,eax
	je Block32

 Block31:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block33

 Block32:
	xor eax,eax

 Block33:
	mov byte ptr [esp+0x38],1
	test eax,eax
	je Block44

 Block34:
	add eax,8
	je Block44

 Block35:
	lea esi,[eax-8]
	test esi,esi
	je Block37

 Block36:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block37:
	mov eax,dword ptr [edi+0xC0]
	mov dword ptr [edi+0xC0],esi
	test eax,eax
	je Block41

 Block38:
	lea esi,[eax+8]
	lea edx,[esi+4]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block41

 Block39:
	lea eax,[esi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block41

 Block40:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block41:
	mov ecx,dword ptr [edi+0xC0]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x20]
	push eax
	push 0
	push 6
	push 0x98
	push 2
	push edi
	call edx
	mov ecx,edi
	call CUISkillInc::SetSkillRootList
	mov ecx,edi
	call CUISkillInc::ResetInfo
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	test eax,eax
	je Block43

 Block42:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block43:
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x28
	ret 4

 Block44:
	xor esi,esi
	jmp Block37
}
}
// CUISkillChangeConfirm::DrawTab
__SUB_CLASS_THIS(005CC8F0, __thiscall, 68692,  CUISkillChangeConfirm, void, long, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+8]
	mov edx,dword ptr [esp+4]
	mov dword ptr [ecx+0xAC],eax
	mov dword ptr [ecx+0xB0],edx
	mov eax,0x68DB8BAD
	imul edx
	sar edx,0xC
	push esi
	mov esi,edx
	shr esi,0x1F
	add esi,edx
	mov eax,0x10624DD3
	imul esi
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,3
	je Block4

 Block1:
	mov eax,0x51EB851F
	imul esi
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x16
	je Block4

 Block2:
	cmp esi,0x7D1
	je Block4

 Block3:
	xor eax,eax
	mov dword ptr [ecx+0xB4],eax
	pop esi
	ret 8

 Block4:
	mov eax,1
	mov dword ptr [ecx+0xB4],eax
	pop esi
	ret 8
}
}
// CWvsContext::GetEMailAccount
__SUB_CLASS_THIS0(0009C800, __thiscall, 8094,  CWvsContext, const char*) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x20CC]
	test eax,eax
	je Block2

 Block1:
	add eax,4
	ret

 Block2:
	xor eax,eax
	ret
}
}
// CUIStatChangeConfirm::CUIStatChangeConfirm
__SUB_CLASS_THIS0(005D3E10, __thiscall, 68528,  CUIStatChangeConfirm, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	call CDialog::_ctor_default
	xor eax,eax
	int 3// TODO: 	mov dword ptr [esi],offset CUIStatChangeConfirm::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUIStatChangeConfirm::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUIStatChangeConfirm::`vftable'{for `ZRefCounted'}
	mov dword ptr [esi+0x94],eax
	mov dword ptr [esi+0x9C],eax
	mov dword ptr [esi+0xA4],eax
	mov eax,esi
	pop esi
	ret
}
}
// CWvsContext::IsTradeBlockedUser
__SUB_CLASS_THIS0(00100F90, __thiscall, 8109,  CWvsContext, int32_t) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	lea edi,[esi+0x2038]
	mov ecx,edi
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block5

 Block1:
	cmp dword ptr [esi+0x209C],0
	jne Block5

 Block2:
	cmp dword ptr [esi+0x20B0],0
	jne Block5

 Block3:
	mov ecx,edi
	call TSecType<unsigned char>::GetData
	test al,0x10
	jne Block5

 Block4:
	pop edi
	xor eax,eax
	pop esi
	ret

 Block5:
	pop edi
	mov eax,1
	pop esi
	ret
}
}
// CWvsContext::StartQuest
_SUB_EXCEPTION_HANDLER(5F70B0)
__SUB_CLASS_THIS(005F70B0, __thiscall, 8302,  CWvsContext, void, uint16_t, unsigned long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F70B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],0
	push 0x30
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov dword ptr [esp+0x28],0
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x10],eax
	mov byte ptr [esp+0x24],1
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [esp+0x30]
	mov edx,dword ptr [esp+0x2C]
	push ecx
	push edx
	mov ecx,eax
	call CQuest::_ctor_0
	mov esi,eax
	jmp Block3

 Block2:
	xor esi,esi

 Block3:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	mov byte ptr [esp+0x24],0
	test esi,esi
	je Block5

 Block4:
	lea eax,[esi+4]
	push eax
	call ebp

 Block5:
	mov ecx,dword ptr [esp+0x34]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x1C],esi
	call CQuest::StartQuest
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test esi,esi
	je Block8

 Block6:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block8

 Block7:
	push edi
	call ebp
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block8:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x18
	ret 0xC
}
}
// CWvsContext::GetAutoQuestIconUOL
__SUB_CLASS_THIS0(005DDE40, __thiscall, 8145,  CWvsContext, ZXString<unsigned short>) {
__asm {

 Block0:
	push ecx
	push ebx
	push esi
	push edi
	mov edi,ecx
	push offset _anon__IsGuildSupplyQuest
	lea ecx,[edi+0x4060]
	mov dword ptr [esp+0x10],0
	xor ebx,ebx
	call ZList<unsigned short>::FindSatisfying
	test eax,eax
	je Block2

 Block1:
	mov ebx,1

 Block2:
	lea esi,[edi+0x3FF8]
	mov ecx,esi
	call ZMap<unsigned short, int, unsigned short>::GetHeadPosition
	mov dword ptr [esp+0xC],eax
	test eax,eax
	je Block8

 Block3:
	mov edi,edi

 Block4:
	push 0
	lea eax,[esp+0x10]
	push eax
	mov ecx,esi
	call ZMap<unsigned short, int, unsigned short>::GetNext
	movzx ecx,word ptr [eax]
	push ecx
	call _anon__IsGuildSupplyQuest
	add esp,4
	test eax,eax
	jne Block7

 Block5:
	cmp dword ptr [esp+0xC],eax
	jne Block4

 Block6:
	jmp Block8

 Block7:
	mov ebx,1

 Block8:
	lea esi,[edi+0x4028]
	mov ecx,esi
	call ZMap<unsigned short, int, unsigned short>::GetHeadPosition
	mov dword ptr [esp+0xC],eax
	test eax,eax
	je Block11

 Block9:
	push 0
	lea edx,[esp+0x10]
	push edx
	mov ecx,esi
	call ZMap<unsigned short, int, unsigned short>::GetNext
	movzx eax,word ptr [eax]
	push eax
	call _anon__IsGuildSupplyQuest
	add esp,4
	test eax,eax
	jne Block12

 Block10:
	cmp dword ptr [esp+0xC],eax
	jne Block9

 Block11:
	test ebx,ebx
	je Block13

 Block12:
	mov esi,dword ptr [esp+0x14]
	push 0x4E
	push offset _S_EFFECTBASICEFFIM__1
	push 0
	push 0x27
	mov ecx,esi
	mov dword ptr [esi],0
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0x27
	mov ecx,esi
	call ZXString<unsigned short>::ReleaseBuffer
	pop edi
	mov eax,esi
	pop esi
	pop ebx
	pop ecx
	ret 4

 Block13:
	mov esi,dword ptr [esp+0x14]
	push 0x4C
	push offset _S_EFFECTBASICEFFIM
	push 0
	push 0x26
	mov ecx,esi
	mov dword ptr [esi],0
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0x26
	mov ecx,esi
	call ZXString<unsigned short>::ReleaseBuffer
	pop edi
	mov eax,esi
	pop esi
	pop ebx
	pop ecx
	ret 4
}
}
// CWvsContext::CFriend::FindIndex
_SUB_EXCEPTION_HANDLER(610900)
__SUB_CLASS_THIS(00610900, __thiscall, 8450,  CWvsContext::CFriend, long, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_610900
	mov eax,dword ptr fs:[0]
	push eax
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x18],0
	call CWvsContext::CFriend::IsDataTwisted
	test eax,eax
	jne Block11

 Block1:
	xor edi,edi
	xor esi,esi
	lea ebx,[ebx]

 Block2:
	mov ecx,ebx
	call CWvsContext::CFriend::IsDataTwisted
	mov eax,dword ptr [ebx]
	test eax,eax
	jne Block4

 Block3:
	xor ecx,ecx
	jmp Block5

 Block4:
	mov ecx,dword ptr [eax-4]

 Block5:
	cmp edi,ecx
	jge Block11

 Block6:
	lea eax,[esi+eax+4]
	push eax
	lea ecx,[esp+0x24]
	call ZXString<char>::CompareNoCase
	test eax,eax
	je Block8

 Block7:
	inc edi
	add esi,0x27
	jmp Block2

 Block8:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	mov eax,edi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0xC
	ret 4

 Block11:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	or eax,0xFFFFFFFF
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0xC
	ret 4
}
}
// CWvsContext::FindUser
__SUB_CLASS_THIS(0060FBE0, __thiscall, 8160,  CWvsContext, unsigned long, unsigned long) {
__asm {

 Block0:
	cmp dword ptr [ecx+0x3604],0
	je Block4

 Block1:
	mov edx,dword ptr [esp+4]
	xor eax,eax
	add ecx,0x3608

 Block2:
	cmp edx,dword ptr [ecx]
	je Block5

 Block3:
	inc eax
	add ecx,4
	cmp eax,6
	jl Block2

 Block4:
	or eax,0xFFFFFFFF

 Block5:
	ret 4
}
}
// CWvsContext::GetPartyMemberData
__SUB_CLASS_THIS(006101B0, __thiscall, 8149,  CWvsContext, void, long, unsigned long&, ZXString<char>&, unsigned long&, ZXString<char>&, long&, long&, int32_t&) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+0xC]
	push esi
	mov esi,ecx
	push edi
	mov edi,dword ptr [esp+0x10]
	mov eax,dword ptr [esi+edi*4+0x3608]
	mov ecx,edi
	imul ecx,0xD
	lea edx,[ecx+esi+0x3620]
	mov ecx,dword ptr [esp+0x18]
	push edx
	mov dword ptr [ebx],eax
	call ZXString<char>::AssignCStr
	mov eax,dword ptr [esi+edi*4+0x36BA]
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr [ecx],eax
	mov edx,dword ptr [esi+edi*4+0x366E]
	push edx
	call get_job_name
	mov ecx,dword ptr [esp+0x24]
	add esp,4
	push eax
	call ZXString<char>::AssignCStr
	mov eax,dword ptr [esi+edi*4+0x3686]
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr [ecx],eax
	mov edx,dword ptr [esi+edi*4+0x369E]
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [eax],edx
	mov ecx,dword ptr [esi+0x36B6]
	mov eax,dword ptr [esp+0x2C]
	xor edx,edx
	cmp ecx,dword ptr [ebx]
	pop edi
	sete dl
	pop esi
	pop ebx
	mov dword ptr [eax],edx
	ret 0x20
}
}
// CWvsContext::IsNewAccount
__SUB_CLASS_THIS0(005FA230, __thiscall, 8111,  CWvsContext, int32_t) {
__asm {

 Block0:
	sub esp,8
	push ebx
	push ebp
	mov ebp,ecx
	cmp dword ptr [ebp+0x408C],0
	push esi
	push edi
	je Block2

 Block1:
	mov eax,1
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,8
	ret

 Block2:
	mov eax,dword ptr [ebp+0x4094]
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block4

 Block3:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block4:
	mov eax,dword ptr [ebp+0x4090]
	lea esi,[ebp+0x3F7C]
	push esi
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block6

 Block5:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block6:
	call load_commodity
	add esp,0x10
	test eax,eax
	jne Block8

 Block7:
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,8
	ret

 Block8:
	mov esi,dword ptr [esi]
	test esi,esi
	jne Block10

 Block9:
	xor eax,eax
	jmp Block11

 Block10:
	mov eax,dword ptr [esi-4]

 Block11:
	lea ecx,[esp+0x13]
	push ecx
	lea edi,[ebp+0x3F80]
	push eax
	mov ecx,edi
	call ZArray<ZRef<CS_COMMODITY>>::_Alloc
	xor ebx,ebx

 Block12:
	mov eax,dword ptr [ebp+0x3F7C]
	test eax,eax
	je Block17

 Block13:
	cmp ebx,dword ptr [eax-4]
	jae Block17

 Block14:
	mov ecx,dword ptr [edi]
	lea esi,[ebx*8]
	mov edx,eax
	add edx,esi
	push edx
	add ecx,esi
	call ZRef<CS_COMMODITY>::op_assign_copy
	mov eax,dword ptr [edi]
	mov eax,dword ptr [eax+esi+4]
	lea ecx,[eax+0x10]
	call TSecType<long>::GetData
	push eax
	mov ecx,ebp
	call CWvsContext::IsValidCommodity
	test eax,eax
	jne Block16

 Block15:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+esi+4]
	mov dword ptr [edx+0x4C],eax

 Block16:
	inc ebx
	jmp Block12

 Block17:
	pop edi
	mov eax,1
	pop esi
	mov dword ptr [ebp+0x408C],eax
	pop ebp
	pop ebx
	add esp,8
	ret
}
}
// CUISkillInc::~CUISkillInc
_SUB_EXCEPTION_HANDLER(5EB2B0)
__SUB_CLASS_THIS0(005EB2B0, __thiscall, 68661,  CUISkillInc, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5EB2B0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillInc::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillInc::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillInc::`vftable'{for `ZRefCounted'}
	lea ecx,[esi+0xC4]
	mov dword ptr [esp+0x18],4
	call ZArray<SKILLROOT>::RemoveAll
	cmp dword ptr [esi+0xC0],0
	lea edi,[esi+0xBC]
	mov byte ptr [esp+0x18],3
	je Block2

 Block1:
	push 0
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],0

 Block2:
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push 4
	push 8
	lea eax,[esi+0x9C]
	push eax
	mov byte ptr [esp+0x28],2
	call __eh_vector_dtor_iterator
	cmp dword ptr [esi+0x98],0
	lea edi,[esi+0x94]
	mov byte ptr [esp+0x18],1
	je Block4

 Block3:
	push 0
	mov ecx,edi
	call ZRef<CCtrlScrollBar>::_ReleaseRaw
	mov dword ptr [edi+4],0

 Block4:
	lea ecx,[esi+0x90]
	mov byte ptr [esp+0x18],0
	call ZArray<long>::RemoveAll
	mov ecx,esi
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call CDialog::~CDialog
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::SendGivePopularityRequest
_SUB_EXCEPTION_HANDLER(5F67E0)
__SUB_CLASS_THIS(005F67E0, __thiscall, 8256,  CWvsContext, void, const char*, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F67E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block10

 Block1:
	call timeGetTime
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov esi,eax
	mov eax,dword ptr [esp+0x30]
	push eax
	call CUserPool::FindRemoteUserByName
	mov edi,eax
	test edi,edi
	jne Block6

 Block2:
	lea ecx,[esp+0x30]
	push 0x17B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x28],edi
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],edi
	je Block4

 Block3:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x3C],esp
	push edi
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],edi
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block4:
	mov eax,dword ptr [esp+0x30]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block10

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8

 Block6:
	mov edx,esi
	sub edx,dword ptr [ebx+0x3D84]
	cmp edx,0x493E0
	jge Block9

 Block7:
	lea eax,[esp+0x34]
	push 0x140
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x30],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x3C]
	add esp,8
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block10

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8

 Block9:
	push 0x6B
	lea ecx,[esp+0x14]
	mov dword ptr [ebx+0x3D84],esi
	call COutPacket::_ctor_1
	mov edi,dword ptr [edi+0x19E8]
	push edi
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x2C],2
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x34]
	push ecx
	lea ecx,[esp+0x14]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x10]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block10:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 8
}
}
// CWvsContext::SetAccountInfo
_SUB_EXCEPTION_HANDLER(1D51F0)
__SUB_CLASS_THIS(001D51F0, __thiscall, 8103,  CWvsContext, void, unsigned long, long, unsigned char, unsigned char, NakedParam<ZXString<char>>, unsigned char, unsigned char, NakedParam<_SYSTEMTIME>, unsigned char, int32_t, NakedParam<_SYSTEMTIME>, long, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_1D51F0
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [esp+0x1C]
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esi+0x2034],ecx
	lea ecx,[esi+0x2038]
	push edx
	mov dword ptr [esp+0x14],1
	mov dword ptr [esi+0x2030],eax
	call TSecType<unsigned char>::SetData
	mov al,byte ptr [esp+0x24]
	lea ecx,[esp+0x28]
	push ecx
	lea ecx,[esi+0x2054]
	mov byte ptr [esi+0x2058],al
	call ZXString<char>::op_assign
	mov dl,byte ptr [esp+0x2C]
	mov al,byte ptr [esp+0x30]
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr [esi+0x206E],ecx
	mov ecx,dword ptr [esp+0x40]
	mov byte ptr [esi+0x2059],dl
	mov edx,dword ptr [esp+0x38]
	mov byte ptr [esi+0x206C],al
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esi+0x2072],edx
	mov edx,dword ptr [esp+0x44]
	mov dword ptr [esi+0x2076],eax
	mov dword ptr [esi+0x207A],ecx
	lea ecx,[esi+0x2044]
	push edx
	call TSecType<unsigned char>::SetData
	mov eax,dword ptr [esp+0x48]
	mov ecx,dword ptr [esp+0x4C]
	mov edx,dword ptr [esp+0x50]
	mov dword ptr [esi+0x207E],ecx
	mov ecx,dword ptr [esp+0x58]
	mov dword ptr [esi+0x20B0],eax
	mov eax,dword ptr [esp+0x54]
	mov dword ptr [esi+0x2082],edx
	mov edx,dword ptr [esp+0x5C]
	mov dword ptr [esi+0x2086],eax
	mov eax,dword ptr [esp+0x60]
	mov dword ptr [esi+0x208A],ecx
	mov dword ptr [esi+0x2090],edx
	test eax,eax
	je Block3

 Block1:
	cmp byte ptr [eax],0
	je Block3

 Block2:
	xor eax,eax
	jmp Block4

 Block3:
	mov eax,1

 Block4:
	xor ecx,ecx
	test eax,eax
	sete cl
	lea edx,[esp+0x60]
	push ecx
	mov dword ptr [esi+0x2098],ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SetGuestIDLoginInfo
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x10],0
	test eax,eax
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	mov eax,dword ptr [esp+0x60]
	mov dword ptr [esp+0x10],0xFFFFFFFF
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0xC
	ret 0x4C
}
}
// CWvsContext::SendStatChangeRequest
_SUB_EXCEPTION_HANDLER(5F2A00)
__SUB_CLASS_THIS(005F2A00, __thiscall, 8254,  CWvsContext, void, long, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F2A00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0x64
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x1C],0
	call get_update_time
	push eax
	lea ecx,[esp+8]
	call COutPacket::Encode4
	push 0x1400
	lea ecx,[esp+8]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+8]
	call COutPacket::Encode2
	mov ecx,dword ptr [esp+0x28]
	push ecx
	lea ecx,[esp+8]
	call COutPacket::Encode2
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+8]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+4]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret 0xC
}
}
// CWvsContext::SendClaimRequest
_SUB_EXCEPTION_HANDLER(605FB0)
__SUB_CLASS_THIS(00605FB0, __thiscall, 8266,  CWvsContext, void, ZArray<ZXString<char> >&, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_605FB0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x64
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x78]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x40],esi
	xor ebp,ebp
	mov dword ptr [esp+0x80],ebp
	cmp dword ptr [esi+0x3860],ebp
	jne Block2

 Block1:
	push ebp
	push ebp
	push ebp
	push ebp
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x9C],esp
	push 0xD5A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block100

 Block2:
	lea ecx,[esp+0x68]
	push ecx
	call GetLocalTime
	mov al,byte ptr [esi+0x385C]
	mov cl,byte ptr [esi+0x385D]
	mov dx,word ptr [esp+0x70]
	cmp al,cl
	jae Block6

 Block3:
	movzx di,al
	cmp di,dx
	ja Block5

 Block4:
	movzx di,cl
	cmp dx,di
	jb Block11

 Block5:
	cmp al,cl

 Block6:
	jbe Block9

 Block7:
	movzx di,al
	cmp di,dx
	jbe Block11

 Block8:
	movzx di,cl
	cmp dx,di
	jb Block11

 Block9:
	test al,al
	jne Block94

 Block10:
	test cl,cl
	jne Block94

 Block11:
	push 0xA4
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x34],eax
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	mov byte ptr [esp+0x80],3
	cmp eax,ebp
	je Block20

 Block12:
	mov ecx,eax
	call CUIClaimPreNotice::_ctor_default
	cmp eax,ebp
	je Block20

 Block13:
	add eax,8
	cmp eax,ebp
	je Block20

 Block14:
	lea edi,[eax-8]
	mov dword ptr [esp+0x48],edi
	cmp edi,ebp
	je Block16

 Block15:
	lea edx,[edi+0xC]
	push edx
	call ebx

 Block16:
	mov ecx,edi
	mov byte ptr [esp+0x80],4
	call CDialog::DoModal
	mov esi,eax
	mov dword ptr [esp+0x14],ebp
	push ecx
	mov ecx,esp
	lea eax,[esp+0x90]
	mov dword ptr [esp+0x38],esp
	push eax
	mov byte ptr [esp+0x88],5
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x8C]
	push ecx
	lea ecx,[esp+0x54]
	call CClaimChatLog::_ctor_0
	mov eax,esi
	sub eax,0x3E8
	mov byte ptr [esp+0x80],6
	je Block62

 Block17:
	sub eax,1
	je Block21

 Block18:
	lea ecx,[esp+0x4C]
	mov byte ptr [esp+0x80],5
	call CClaimChatLog::~CClaimChatLog
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x80],4
	call ZArray<ZXString<char>>::RemoveAll
	mov byte ptr [esp+0x80],0
	cmp edi,ebp
	je Block100

 Block19:
	push ebp
	lea ecx,[esp+0x48]
	call ZRef<CUIClaimPreNotice>::_ReleaseRaw
	jmp Block100

 Block20:
	xor edi,edi
	mov dword ptr [esp+0x48],edi
	jmp Block16

 Block21:
	mov eax,dword ptr [esp+0x8C]
	mov dword ptr [esp+0x2C],ebp
	cmp eax,ebp
	je Block32

 Block22:
	cmp byte ptr [eax],0
	je Block32

 Block23:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push eax
	call CUserPool::FindRemoteUserByName
	cmp eax,ebp
	je Block30

 Block24:
	add eax,8
	cmp eax,ebp
	je Block30

 Block25:
	lea esi,[eax-8]
	mov dword ptr [esp+0x38],esi
	cmp esi,ebp
	je Block27

 Block26:
	lea edx,[esi+0xC]
	push edx
	call ebx

 Block27:
	mov byte ptr [esp+0x80],7
	cmp esi,ebp
	jne Block31

 Block28:
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x80],6
	call ZRef<CUserRemote>::~ZRef<CUserRemote>

 Block29:
	lea ecx,[esp+0x4C]
	mov byte ptr [esp+0x80],5
	call CClaimChatLog::~CClaimChatLog
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x80],4
	call ZArray<ZXString<char>>::RemoveAll
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0x80],0
	call ZRef<CUIClaimPreNotice>::~ZRef<CUIClaimPreNotice>
	jmp Block100

 Block30:
	xor esi,esi
	mov dword ptr [esp+0x38],esi
	jmp Block27

 Block31:
	lea eax,[esp+0x8C]
	push eax
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x80],6
	call ZRef<CUserRemote>::~ZRef<CUserRemote>
	jmp Block67

 Block32:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov eax,dword ptr [ecx+0x30]
	mov dword ptr [esp+0x24],eax
	cmp eax,ebp
	je Block48

 Block33:
	mov edi,dword ptr [ZImports::_InterlockedIncrement]
	mov bl,9
	nop

 Block34:
	lea edx,[esp+0x24]
	push edx
	call ZList<ZRef<USERREMOTE_ENTRY>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x38],esi
	cmp esi,ebp
	je Block36

 Block35:
	lea eax,[esi+4]
	push eax
	call edi

 Block36:
	cmp esi,ebp
	je Block47

 Block37:
	mov esi,dword ptr [esi+0x10]
	mov dword ptr [esp+0x20],esi
	cmp esi,ebp
	je Block39

 Block38:
	lea ecx,[esi+0xC]
	push ecx
	call edi

 Block39:
	mov byte ptr [esp+0x80],bl
	cmp esi,ebp
	je Block47

 Block40:
	mov ecx,dword ptr [esi+0x19EC]
	xor esi,esi
	mov dword ptr [esp+0x88],esi
	cmp ecx,ebp
	je Block44

 Block41:
	mov eax,ecx
	lea esi,[eax+1]
	mov edi,edi

 Block42:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block42

 Block43:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push ebp
	push esi
	lea ecx,[esp+0x98]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x8C]
	call ZXString<char>::ReleaseBuffer
	mov esi,dword ptr [esp+0x88]

 Block44:
	lea edx,[esp+0x88]
	push edx
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x88],0xA
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov byte ptr [esp+0x80],bl
	cmp esi,ebp
	je Block46

 Block45:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block46:
	push ebp
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x84],8
	call ZRef<CUserRemote>::_ReleaseRaw
	mov dword ptr [esp+0x20],ebp

 Block47:
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x80],6
	call ZRef<USERREMOTE_ENTRY>::~ZRef<USERREMOTE_ENTRY>
	cmp dword ptr [esp+0x24],ebp
	jne Block34

 Block48:
	mov ebx,dword ptr [esp+0x14]
	cmp ebx,ebp
	jne Block50

 Block49:
	xor eax,eax
	jmp Block51

 Block50:
	mov eax,dword ptr [ebx-4]

 Block51:
	xor ecx,ecx
	mov dword ptr [esp+0x88],eax
	mov dword ptr [esp+0x24],ecx
	dec eax
	cmp eax,ebp
	mov byte ptr [esp+0x80],0xB
	jle Block60

 Block52:
	xor ebp,ebp
	mov dword ptr [esp+0x1C],1
	mov dword ptr [esp+0x34],eax
	lea ecx,[ecx]

 Block53:
	mov esi,dword ptr [esp+0x1C]
	cmp esi,dword ptr [esp+0x88]
	jge Block58

 Block54:
	lea ecx,[ecx]

 Block55:
	mov eax,dword ptr [ebx+esi*4]
	lea edi,[ebx+ebp]
	push eax
	mov ecx,edi
	call ZXString<char>::Compare
	test eax,eax
	jle Block57

 Block56:
	push edi
	lea ecx,[esp+0x28]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	lea ecx,[eax+esi*4]
	push ecx
	lea ecx,[eax+ebp]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	lea edx,[esp+0x24]
	push edx
	lea ecx,[eax+esi*4]
	call ZXString<char>::op_assign
	mov ebx,dword ptr [esp+0x14]

 Block57:
	inc esi
	cmp esi,dword ptr [esp+0x88]
	jl Block55

 Block58:
	mov eax,1
	add dword ptr [esp+0x1C],eax
	add ebp,4
	sub dword ptr [esp+0x34],eax
	jne Block53

 Block59:
	mov ecx,dword ptr [esp+0x24]

 Block60:
	mov byte ptr [esp+0x80],6
	test ecx,ecx
	je Block68

 Block61:
	add ecx,0xFFFFFFF4
	push ecx
	call ZXString<char>::_Release
	add esp,4
	jmp Block67

 Block62:
	mov eax,dword ptr [esp+0x8C]
	mov dword ptr [esp+0x2C],1
	cmp eax,ebp
	je Block66

 Block63:
	cmp byte ptr [eax],0
	je Block66

 Block64:
	push ecx
	mov ecx,esp
	lea edx,[esp+0x90]
	mov dword ptr [esp+0x8C],esp
	push edx
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	lea ecx,[esp+0x50]
	call CClaimChatLog::IsClaimAbleCharacter
	cmp eax,ebp
	jne Block66

 Block65:
	push ebp
	push ebp
	push ebp
	push ebp
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x9C],esp
	push 0xD64
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block29

 Block66:
	lea ecx,[esp+0x54]
	push ecx
	lea ecx,[esp+0x18]
	call ZArray<ZXString<char>>::operator=

 Block67:
	mov ebx,dword ptr [esp+0x14]

 Block68:
	xor ebp,ebp
	cmp ebx,ebp
	je Block70

 Block69:
	cmp dword ptr [ebx-4],ebp
	jne Block73

 Block70:
	push ebp
	push ebp
	push ebp
	push ebp
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x9C],esp
	push 0xD5F
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block71:
	lea ecx,[esp+0x4C]
	mov byte ptr [esp+0x80],5
	call CClaimChatLog::~CClaimChatLog
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x80],4
	call ZArray<ZXString<char>>::RemoveAll
	mov byte ptr [esp+0x80],0
	cmp dword ptr [esp+0x48],ebp
	je Block100

 Block72:
	push ebp
	lea ecx,[esp+0x48]
	call ZRef<CUIClaimPreNotice>::_ReleaseRaw
	jmp Block100

 Block73:
	push 0xE0
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x88],eax
	mov esi,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x80],0xC
	cmp eax,ebp
	je Block81

 Block74:
	push esi
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,eax
	call CUIClaim::_ctor_0
	cmp eax,ebp
	je Block81

 Block75:
	add eax,8
	cmp eax,ebp
	je Block81

 Block76:
	lea edi,[eax-8]
	mov dword ptr [esp+0x28],edi
	cmp edi,ebp
	je Block78

 Block77:
	lea edx,[edi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block78:
	mov ecx,edi
	mov byte ptr [esp+0x80],0xD
	call CDialog::DoModal
	cmp eax,1
	je Block82

 Block79:
	mov byte ptr [esp+0x80],6
	cmp edi,ebp
	je Block71

 Block80:
	push ebp
	lea ecx,[esp+0x28]
	call ZRef<CUIClaim>::_ReleaseRaw
	jmp Block71

 Block81:
	xor edi,edi
	mov dword ptr [esp+0x28],edi
	jmp Block78

 Block82:
	mov dword ptr [esp+0x18],ebp
	mov dword ptr [esp+0x30],ebp
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x40]
	push ecx
	lea edx,[esp+0x20]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x8C],0xF
	call CUIClaim::GetResult
	push 0x76
	lea ecx,[esp+0x5C]
	call COutPacket::_ctor_1
	push esi
	lea ecx,[esp+0x5C]
	mov byte ptr [esp+0x84],0x10
	call COutPacket::Encode1
	push ecx
	mov ecx,esp
	lea eax,[esp+0x1C]
	mov dword ptr [esp+0x8C],esp
	push eax
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	lea ecx,[esp+0x5C]
	call COutPacket::EncodeStr
	mov ecx,dword ptr [esp+0x3C]
	push ecx
	lea ecx,[esp+0x5C]
	call COutPacket::Encode1
	push ecx
	mov ecx,esp
	lea edx,[esp+0x34]
	mov dword ptr [esp+0x8C],esp
	push edx
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	lea ecx,[esp+0x5C]
	call COutPacket::EncodeStr
	cmp esi,ebp
	je Block90

 Block83:
	mov dword ptr [esp+0x88],ebp
	mov eax,dword ptr [esp+0x40]
	mov eax,dword ptr [eax+0x20CC]
	mov bl,0x11
	mov byte ptr [esp+0x80],bl
	cmp eax,ebp
	je Block85

 Block84:
	add eax,4
	jmp Block86

 Block85:
	xor eax,eax

 Block86:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0xFFFFFFFF
	push eax
	call ZXString<char>::CreateFromCharStr
	push ecx
	mov ecx,esp
	lea edx,[esp+0x20]
	mov dword ptr [esp+0x34],esp
	push edx
	mov byte ptr [esp+0x8C],0x12
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	lea eax,[esp+0x48]
	push eax
	lea ecx,[esp+0x58]
	mov byte ptr [esp+0x8C],bl
	call CClaimChatLog::GetChatLogOfTwoCharacters
	push eax
	lea ecx,[esp+0x8C]
	mov byte ptr [esp+0x84],0x13
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0x80],bl
	cmp eax,ebp
	je Block88

 Block87:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block88:
	push ecx
	mov ecx,esp
	lea edx,[esp+0x8C]
	mov dword ptr [esp+0x38],esp
	push edx
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	lea ecx,[esp+0x5C]
	call COutPacket::EncodeStr
	mov eax,dword ptr [esp+0x88]
	mov byte ptr [esp+0x80],0x10
	cmp eax,ebp
	je Block90

 Block89:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block90:
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x58]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0x5C]
	mov byte ptr [esp+0x80],0xF
	call ZArray<unsigned char>::RemoveAll
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x80],0xE
	cmp eax,ebp
	je Block92

 Block91:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block92:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x80],0xD
	cmp eax,ebp
	je Block79

 Block93:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block79

 Block94:
	cmp al,cl
	jne Block96

 Block95:
	push ebp
	push ebp
	push ebp
	push ebp
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x9C],esp
	push 0xD5A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block100

 Block96:
	mov dword ptr [esp+0x88],ebp
	lea edx,[esp+0x40]
	push 0xD63
	push edx
	mov byte ptr [esp+0x88],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,byte ptr [esi+0x385D]
	movzx edx,byte ptr [esi+0x385C]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x94]
	push eax
	mov byte ptr [esp+0x90],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x50]
	add esp,0x10
	mov byte ptr [esp+0x80],1
	cmp eax,ebp
	je Block98

 Block97:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block98:
	push ebp
	push ebp
	push ebp
	push ebp
	push ecx
	mov ecx,esp
	lea edx,[esp+0x9C]
	mov dword ptr [esp+0x54],esp
	push edx
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	call CUtilDlg::Notice
	mov eax,dword ptr [esp+0x9C]
	add esp,0x14
	mov byte ptr [esp+0x80],0
	cmp eax,ebp
	je Block100

 Block99:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block100:
	mov eax,dword ptr [esp+0x8C]
	mov dword ptr [esp+0x80],0xFFFFFFFF
	cmp eax,ebp
	je Block102

 Block101:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block102:
	mov ecx,dword ptr [esp+0x78]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x70
	ret 8
}
}
// CWvsContext::OnMobDead
__SUB_CLASS_THIS0(005CC9A0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	mov dword ptr [ecx+0x40BC],1
	ret
}
}
// CWvsContext::ITEMMSGINFO::~ITEMMSGINFO
_SUB_EXCEPTION_HANDLER(602B00)
__SUB_CLASS_THIS0(00602B00, __thiscall, 11898,  CWvsContext::ITEMMSGINFO, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_602B00
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x10],esi
	lea ebx,[esi+8]
	mov ecx,ebx
	mov dword ptr [esp+0x1C],2
	call ZArray<long>::RemoveAll
	lea edi,[esi+0x20]
	mov ecx,edi
	call ZArray<ZXString<char>>::RemoveAll
	mov ecx,edi
	mov byte ptr [esp+0x1C],1
	call ZArray<ZXString<char>>::RemoveAll
	mov esi,dword ptr [esi+0xC]
	mov byte ptr [esp+0x1C],0
	test esi,esi
	je Block2

 Block1:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov ecx,ebx
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<long>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret
}
}
// CUISkillChangeConfirm::GetResult
__SUB_CLASS_THIS(005CC8D0, __thiscall, 68693,  CUISkillChangeConfirm, void, long&, long&) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0xB0]
	mov edx,dword ptr [esp+4]
	mov dword ptr [edx],eax
	mov eax,dword ptr [ecx+0xAC]
	mov ecx,dword ptr [esp+8]
	mov dword ptr [ecx],eax
	ret 8
}
}
// CWvsContext::Update
_SUB_EXCEPTION_HANDLER(5EA7F0)
__SUB_CLASS_THIS0(005EA7F0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5EA7F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebp,ebp
	mov dword ptr [esp+0x28],ebp
	call get_update_time
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	mov ebx,eax
	mov dword ptr [esp+0x18],ebx
	cmp ecx,ebp
	je Block2

 Block1:
	push ebx
	call CInputSystem::Update

 Block2:
	mov ecx,dword ptr [TSingleton<CUINoticePremium>::ms_pInstance]
	cmp ecx,ebp
	je Block4

 Block3:
	mov eax,dword ptr [esi+0x3F28]
	push eax
	call CUINoticePremium::SetVisible

 Block4:
	mov ecx,esi
	call CWvsContext::CheckTemporaryStatDuration
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	call CAnimationDisplayer::UpdateBeforeUserUpdate
	mov ecx,dword ptr [esi+0x3DD4]
	cmp ecx,ebp
	je Block6

 Block5:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	call eax
	mov ecx,esi
	call CWvsContext::TryRecovery

 Block6:
	mov ecx,dword ptr [esi+0x3DDC]
	cmp ecx,ebp
	je Block8

 Block7:
	push ebx
	call CSummonedPool::Update

 Block8:
	mov ecx,dword ptr [esi+0x3DE4]
	cmp ecx,ebp
	je Block10

 Block9:
	call CMobPool::Update

 Block10:
	mov ecx,dword ptr [esi+0x3DEC]
	cmp ecx,ebp
	je Block12

 Block11:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	call eax

 Block12:
	mov ecx,dword ptr [esi+0x3DF4]
	cmp ecx,ebp
	je Block14

 Block13:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	call eax

 Block14:
	mov ecx,dword ptr [esi+0x3DFC]
	cmp ecx,ebp
	je Block16

 Block15:
	push ebx
	call CDropPool::Update

 Block16:
	mov ecx,dword ptr [esi+0x3E04]
	cmp ecx,ebp
	je Block18

 Block17:
	push ebx
	call CMessageBoxPool::Update

 Block18:
	mov ecx,dword ptr [esi+0x3E0C]
	cmp ecx,ebp
	je Block20

 Block19:
	push ebx
	call CAffectedAreaPool::Update

 Block20:
	mov ecx,dword ptr [esi+0x3E14]
	cmp ecx,ebp
	je Block22

 Block21:
	push ebx
	call CTownPortalPool::Update

 Block22:
	mov ecx,dword ptr [esi+0x3E1C]
	cmp ecx,ebp
	je Block24

 Block23:
	push ebx
	call COpenGatePool::Update

 Block24:
	mov ecx,dword ptr [esi+0x3E24]
	cmp ecx,ebp
	je Block26

 Block25:
	push ebx
	call CReactorPool::Update

 Block26:
	lea ecx,[esi+0x35D4]
	call CTemporaryStatView::Update
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	call eax
	mov edi,dword ptr [_D_NCOUNTER]
	mov ecx,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	inc edi
	mov dword ptr [_D_NCOUNTER],edi
	cmp ecx,ebp
	je Block28

 Block27:
	call CUIQuestAlarm::RemoveOldQuest
	mov edi,dword ptr [_D_NCOUNTER]

 Block28:
	mov eax,dword ptr [esi+0x3D80]
	cmp eax,ebp
	je Block31

 Block29:
	sub ebx,eax
	cmp ebx,0x898
	jle Block31

 Block30:
	call TSingleton<CUIRevive>::CreateInstance
	mov edi,dword ptr [_D_NCOUNTER]
	mov dword ptr [esi+0x3D80],ebp

 Block31:
	mov eax,0x51EB851F
	mul edi
	shr edx,7
	imul edx,0x190
	sub edi,edx
	jne Block46

 Block32:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	cmp edi,ebp
	je Block34

 Block33:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block35

 Block34:
	xor edi,edi

 Block35:
	push ebp
	mov ecx,edi
	call CField::IsEventMap
	test eax,eax
	jne Block46

 Block36:
	mov dword ptr [esp+0x14],ebp
	mov ecx,dword ptr [esi+0x20E4]
	push ecx
	lea edx,[esi+0x20DC]
	push edx
	mov dword ptr [esp+0x40],ebp
	call _ZtlSecureFuseHelper<long>::call
	mov edi,eax
	mov eax,dword ptr [esi+0x20F0]
	push eax
	lea ecx,[esi+0x20E8]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	add esp,0x10
	lea edx,[esp+0x14]
	push edx
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	imul eax,0x3E8
	sub ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	push edi
	push ecx
	lea ecx,[esi+0x3F5C]
	call CTips::GetTip
	test eax,eax
	je Block44

 Block37:
	lea edx,[esp+0x28]
	push 0x38E
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S___2
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x40],1
	call ZXString<char>::op_add_0
	lea edx,[esp+0x14]
	push edx
	lea ecx,[esp+0x20]
	push ecx
	mov bl,2
	mov ecx,eax
	mov byte ptr [esp+0x40],bl
	call ZXString<char>::op_add_1
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x3C],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x38],bl
	cmp eax,ebp
	je Block39

 Block38:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block39:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x38],1
	cmp eax,ebp
	je Block41

 Block40:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block41:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x38],0
	cmp eax,ebp
	je Block43

 Block42:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block43:
	lea edx,[esp+0x14]
	push 8
	push edx
	call CHATLOG_ADD
	add esp,8

 Block44:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	cmp eax,ebp
	je Block46

 Block45:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block46:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	cmp edi,ebp
	je Block48

 Block47:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block49

 Block48:
	xor edi,edi

 Block49:
	push 1
	mov ecx,edi
	call CField::IsEventMap
	test eax,eax
	je Block53

 Block50:
	mov eax,dword ptr [esi+0x3F6C]
	cmp eax,ebp
	je Block56

 Block51:
	cmp dword ptr [eax+0x80],ebp
	je Block56

 Block52:
	cmp dword ptr [eax+0x94],ebp
	jne Block56

 Block53:
	mov ecx,dword ptr [esi+0x3F6C]
	cmp ecx,ebp
	je Block56

 Block54:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F6C],ebp
	lea edi,[esi+0x3F68]
	je Block56

 Block55:
	push ebp
	mov ecx,edi
	call ZRef<CClock>::_ReleaseRaw
	mov dword ptr [edi+4],ebp

 Block56:
	call dword ptr [ZImports::_timeGetTime]
	mov dword ptr [esp+0x1C],eax
	sub eax,dword ptr [esi+0x3FAC]
	js Block66

 Block57:
	mov dword ptr [esp+0x14],ebp
	cmp dword ptr [esi+0x3FB0],3
	mov ebx,4
	mov dword ptr [esp+0x38],ebx
	lea eax,[esp+0x28]
	jl Block59

 Block58:
	push 0xDFC
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x38],5
	jmp Block60

 Block59:
	push 0xDFB
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x38],6

 Block60:
	mov ecx,dword ptr [esi+0x3FB0]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x1C]
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x34]
	add esp,0xC
	mov byte ptr [esp+0x38],bl
	cmp eax,ebp
	je Block62

 Block61:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block62:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebp
	je Block64

 Block63:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push ebp
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],ebp
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push edi
	call CUIStatusBar::ChatLogAdd

 Block64:
	add dword ptr [esi+0x3FAC],0x36EE80
	inc dword ptr [esi+0x3FB0]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	cmp edi,ebp
	je Block66

 Block65:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block66:
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::IsLoadFlash
	test eax,eax
	je Block68

 Block67:
	mov dword ptr [esi+0x3FF0],1
	mov dword ptr [esi+0x3FF4],ebp

 Block68:
	mov eax,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	cmp dword ptr [eax+0x444],ebp
	je Block72

 Block69:
	cmp dword ptr [esi+0x3FF0],ebp
	je Block72

 Block70:
	cmp dword ptr [esi+0x3FF4],ebp
	je Block72

 Block71:
	mov dword ptr [esi+0x3FF4],ebp

 Block72:
	cmp dword ptr [esi+0xC],ebp
	je Block77

 Block73:
	mov ecx,dword ptr [esp+0x1C]
	sub ecx,dword ptr [esi+0x10]
	cmp ecx,0x2710
	jle Block77

 Block74:
	mov ecx,dword ptr [esi+0x3E94]
	cmp ecx,ebp
	je Block76

 Block75:
	call CAvatarMegaphone::ByeAvatarMegaphone

 Block76:
	mov dword ptr [esi+0xC],ebp

 Block77:
	cmp dword ptr [esi+0x3F44],ebp
	je Block79

 Block78:
	mov ecx,esi
	call CWvsContext::OnMemoNotify_Receive

 Block79:
	cmp dword ptr [esi+0x3850],ebp
	je Block81

 Block80:
	call CUtilDlg::ForcedRet
	call CUtilDlgEx::ForcedRet

 Block81:
	lea edx,[esp+0x28]
	push edx
	mov ecx,esi
	call CWvsContext::GetCharacterData
	cmp dword ptr [eax+4],ebp
	je Block85

 Block82:
	mov eax,dword ptr [esi+0x4144]
	cmp eax,ebp
	je Block85

 Block83:
	mov ecx,dword ptr [esp+0x18]
	sub ecx,eax
	cmp ecx,0xEA60
	jle Block85

 Block84:
	mov bl,1
	jmp Block86

 Block85:
	xor bl,bl

 Block86:
	mov eax,dword ptr [esp+0x2C]
	cmp eax,ebp
	je Block90

 Block87:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block90

 Block88:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block90

 Block89:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block90:
	test bl,bl
	je Block92

 Block91:
	mov ecx,esi
	call CWvsContext::_CheckExpiredProtectItems
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr [esi+0x4144],ecx

 Block92:
	call timeGetTime
	sub eax,dword ptr [esi+0x405C]
	cmp eax,0x2710
	jbe Block95

 Block93:
	cmp dword ptr [esi+0x401C],0
	je Block95

 Block94:
	lea ecx,[esi+0x4010]
	call ZMap<unsigned short, int, unsigned short>::RemoveAll
	mov ecx,esi
	call CWvsContext::ResetAutoQuest

 Block95:
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	test ecx,ecx
	je Block97

 Block96:
	mov edx,dword ptr [esp+0x18]
	push edx
	call CRadioManager::Update

 Block97:
	cmp dword ptr [esi+0x20CC],0
	je Block108

 Block98:
	mov eax,dword ptr [esp+0x1C]
	sub eax,dword ptr [esi+0x4168]
	cmp eax,0x3E8
	jle Block108

 Block99:
	call Util::FTGetNow
	mov ebx,dword ptr [ZImports::_CompareFileTime]
	mov dword ptr [esp+0x20],eax
	mov dword ptr [esp+0x24],edx
	xor edi,edi
	mov ebp,0x1D8

 Block100:
	mov eax,dword ptr [esi+0x20CC]
	test edi,edi
	ja Block102

 Block101:
	lea ecx,[esi+0x416C]
	push ecx
	lea edx,[eax+ebp+0x341]
	push edx
	call ebx
	test eax,eax
	jl Block104

 Block102:
	mov eax,dword ptr [esi+0x20CC]
	test edi,edi
	ja Block104

 Block103:
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[eax+ebp+0x341]
	push edx
	call ebx
	test eax,eax
	jl Block106

 Block104:
	inc edi
	add ebp,8
	cmp edi,1
	jl Block100

 Block105:
	jmp Block107

 Block106:
	mov ecx,esi
	call CWvsContext::ValidateStat

 Block107:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x1C]
	mov dword ptr [esi+0x416C],eax
	mov dword ptr [esi+0x4170],ecx
	mov dword ptr [esi+0x4168],edx

 Block108:
	mov ecx,dword ptr [TSingleton<CDamageMeter>::ms_pInstance]
	test ecx,ecx
	je Block110

 Block109:
	call CDamageMeter::Update

 Block110:
	mov eax,dword ptr [esp+0x18]
	push eax
	mov ecx,esi
	call CWvsContext::UpdateItemMsg
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x28
	ret
}
}
// CWvsContext::GetGuildMemberGrade
__SUB_CLASS_THIS(0012C6D0, __thiscall, 8176,  CWvsContext, long, unsigned long) {
__asm {

 Block0:
	push ebx
	push esi
	mov ebx,ecx
	push edi
	lea edi,[ebx+0x37C8]
	mov ecx,edi
	xor esi,esi
	call GUILDDATA::GetCount
	test eax,eax
	jle Block4

 Block1:
	mov ecx,dword ptr [edi+0xC]
	mov edx,dword ptr [esp+0x10]
	nop

 Block2:
	cmp dword ptr [ecx],edx
	je Block5

 Block3:
	inc esi
	add ecx,4
	cmp esi,eax
	jl Block2

 Block4:
	pop edi
	pop esi
	or eax,0xFFFFFFFF
	pop ebx
	ret 4

 Block5:
	test esi,esi
	jl Block4

 Block6:
	mov eax,dword ptr [ebx+0x37D8]
	imul esi,0x25
	mov eax,dword ptr [eax+esi+0x15]
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CUISkillDecEX::OnTabChanged
__SUB_CLASS_THIS(004530C0, __thiscall, 68638,  CUISkillDecEX, void, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	mov esi,ecx
	push 1
	mov dword ptr [esi+0xDC],eax
	call CUISkillDecEX::GetSkillRootVisible
	mov ecx,esi
	call CUISkillDecEX::SetScrollBar
	mov ecx,esi
	call CUISkillDecEX::SetButtons
	push 0
	mov ecx,esi
	call CWnd::InvalidateRect
	pop esi
	ret 4
}
}
// CUISkillDec::GetSkillEntry
__SUB_CLASS_THIS(00452280, __thiscall, 68565,  CUISkillDec, const SKILLENTRY*, long) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0xCC]
	push edi
	lea edi,[ecx+0xCC]
	test eax,eax
	je Block2

 Block1:
	cmp dword ptr [eax-4],0
	jne Block3

 Block2:
	xor eax,eax
	pop edi
	ret 4

 Block3:
	push esi
	mov esi,dword ptr [esp+0xC]
	test esi,esi
	jl Block15

 Block4:
	cmp esi,dword ptr [ecx+0xD0]
	jge Block15

 Block5:
	mov ecx,eax
	test ecx,ecx
	je Block15

 Block6:
	mov eax,dword ptr [ecx-4]
	test eax,eax
	je Block15

 Block7:
	shl eax,4
	lea eax,[eax+ecx-0x10]
	mov dword ptr [esp+0xC],eax
	test eax,eax
	je Block15

 Block8:
	lea ebx,[ebx]

 Block9:
	test esi,esi
	jl Block15

 Block10:
	push eax
	call ZArray<SKILLROOT>::GetAt
	mov ecx,dword ptr [eax+8]
	add esp,4
	test ecx,ecx
	je Block12

 Block11:
	cmp esi,dword ptr [ecx-4]
	jb Block16

 Block12:
	mov eax,ecx
	test eax,eax
	je Block14

 Block13:
	mov eax,dword ptr [eax-4]

 Block14:
	sub esi,eax
	lea eax,[esp+0xC]
	push eax
	mov ecx,edi
	call ZArray<SKILLROOT>::GetNext
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	jne Block9

 Block15:
	pop esi
	xor eax,eax
	pop edi
	ret 4

 Block16:
	mov eax,dword ptr [ecx+esi*8+4]
	pop esi
	pop edi
	ret 4
}
}
// CTownPortalPool::OnTownPortalRemoved
_SUB_EXCEPTION_HANDLER(361920)
__SUB_CLASS_THIS(00361920, __thiscall, 51715,  CTownPortalPool, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_361920
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x88
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x9C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	mov dword ptr [esp+0x64],ebx
	mov edi,dword ptr [esp+0xAC]
	mov ecx,edi
	mov dword ptr [esp+0xA4],ebx
	call CInPacket::Decode1
	mov ecx,edi
	movzx ebp,al
	call CInPacket::Decode4
	mov dword ptr [esp+0x4C],eax
	lea eax,[esp+0x60]
	push eax
	lea ecx,[esp+0x50]
	push ecx
	lea ecx,[esi+4]
	call ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::GetAt
	test eax,eax
	jne Block3

 Block1:
	mov eax,dword ptr [esp+0x64]
	mov dword ptr [esp+0xA4],0xFFFFFFFF
	cmp eax,ebx
	je Block131

 Block2:
	lea esi,[eax-0x10]
	jmp Block128

 Block3:
	mov edi,dword ptr [esp+0x64]
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x1C],esp
	mov dword ptr [eax+4],edi
	cmp edi,ebx
	je Block5

 Block4:
	lea ecx,[edi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block5:
	mov ecx,esi
	call CTownPortalPool::RemoveTownPortal
	cmp ebp,ebx
	jne Block126

 Block6:
	mov edi,dword ptr [edi+0x14]
	mov dword ptr [esp+0x4C],edi
	cmp edi,ebx
	je Block8

 Block7:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+4]
	push edi
	call eax

 Block8:
	mov ecx,dword ptr [esp+0x64]
	mov edi,dword ptr [ecx+0x18]
	mov byte ptr [esp+0xA4],1
	mov dword ptr [esp+0x98],edi
	cmp edi,ebx
	je Block10

 Block9:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+4]
	push edi
	call eax

 Block10:
	mov ecx,3
	mov word ptr [esp+0x88],cx
	mov dword ptr [esp+0x90],ebx
	mov esi,dword ptr [esp+0x4C]
	mov byte ptr [esp+0xA4],cl
	cmp esi,ebx
	jne Block12

 Block11:
	push 0x80004003
	call _com_issue_error

 Block12:
	lea edx,[esp+0x88]
	push edx
	lea eax,[esp+0x2C]
	push eax
	mov ecx,esi
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x88],8
	mov ebp,dword ptr [ZImports::_VariantClear]
	mov byte ptr [esp+0xA4],5
	jne Block15

 Block13:
	mov eax,dword ptr [esp+0x90]
	xor ecx,ecx
	mov word ptr [esp+0x88],cx
	cmp eax,ebx
	je Block16

 Block14:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block16

 Block15:
	lea edx,[esp+0x88]
	push edx
	call ebp

 Block16:
	mov eax,3
	mov word ptr [esp+0x3C],ax
	mov dword ptr [esp+0x44],0xFFFFFFFE
	lea ecx,[esp+0x3C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,esi
	mov byte ptr [esp+0xAC],6
	call IWzGr2DLayer::RemoveCanvas
	mov eax,dword ptr [esp+0x14]
	cmp eax,ebx
	je Block18

 Block17:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block18:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xA4],5
	jne Block21

 Block19:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	cmp eax,ebx
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea ecx,[esp+0x3C]
	push ecx
	call ebp

 Block22:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x18]
	push edx
	call ebp
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block24

 Block23:
	push eax
	call _com_issue_error

 Block24:
	lea ecx,[esp+0x2C]
	mov bl,7
	push ecx
	mov byte ptr [esp+0xA8],bl
	call ebp
	lea edx,[esp+0x2C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	xor ebp,ebp
	add esp,8
	cmp eax,ebp
	jge Block26

 Block25:
	push eax
	call _com_issue_error

 Block26:
	mov eax,3
	mov word ptr [esp+0x68],ax
	mov dword ptr [esp+0x70],ebp
	mov ecx,eax
	mov word ptr [esp+0x50],cx
	mov dword ptr [esp+0x58],0xFF
	mov edx,eax
	mov word ptr [esp+0x3C],dx
	mov dword ptr [esp+0x44],0x3E8
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x30]
	push ecx
	lea edx,[esp+0x70]
	push edx
	mov edx,dword ptr [esp+0x34]
	lea eax,[esp+0x5C]
	push eax
	lea ecx,[esp+0x4C]
	push ecx
	push edx
	lea eax,[esp+0x90]
	push eax
	mov ecx,esi
	mov byte ptr [esp+0xC0],0xB
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x78],8
	jne Block29

 Block27:
	mov eax,dword ptr [esp+0x80]
	xor ecx,ecx
	mov word ptr [esp+0x78],cx
	cmp eax,ebp
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea edx,[esp+0x78]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block30:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xA4],0xA
	jne Block37

 Block31:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	cmp eax,ebp
	je Block33

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block33:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block34:
	cmp word ptr [esp+0x50],8
	mov byte ptr [esp+0xA4],9
	jne Block38

 Block35:
	mov eax,dword ptr [esp+0x58]
	xor edx,edx
	mov word ptr [esp+0x50],dx
	cmp eax,ebp
	je Block39

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block39

 Block37:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea ecx,[esp+0x3C]
	push ecx
	call esi
	jmp Block34

 Block38:
	lea eax,[esp+0x50]
	push eax
	call esi

 Block39:
	cmp word ptr [esp+0x68],8
	mov byte ptr [esp+0xA4],8
	jne Block42

 Block40:
	mov eax,dword ptr [esp+0x70]
	xor ecx,ecx
	mov word ptr [esp+0x68],cx
	cmp eax,ebp
	je Block43

 Block41:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block43

 Block42:
	lea edx,[esp+0x68]
	push edx
	call esi

 Block43:
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0xA4],bl
	jne Block46

 Block44:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	cmp eax,ebp
	je Block47

 Block45:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block47

 Block46:
	lea ecx,[esp+0x2C]
	push ecx
	call esi

 Block47:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xA4],5
	jne Block50

 Block48:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	cmp eax,ebp
	je Block51

 Block49:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block51

 Block50:
	lea eax,[esp+0x18]
	push eax
	call esi

 Block51:
	mov ecx,3
	mov word ptr [esp+0x18],cx
	mov dword ptr [esp+0x20],ebp
	mov byte ptr [esp+0xA4],0xC
	cmp edi,ebp
	jne Block53

 Block52:
	push 0x80004003
	call _com_issue_error

 Block53:
	lea edx,[esp+0x18]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,edi
	call IWzGr2DLayer::Getcanvas
	mov eax,dword ptr [eax]
	cmp dword ptr [esp+0x28],eax
	je Block58

 Block54:
	mov esi,dword ptr [esp+0x28]
	mov dword ptr [esp+0x28],eax
	cmp eax,ebp
	je Block56

 Block55:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block56:
	cmp esi,ebp
	je Block58

 Block57:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block58:
	mov eax,dword ptr [esp+0x14]
	cmp eax,ebp
	je Block60

 Block59:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block60:
	mov esi,8
	mov byte ptr [esp+0xA4],5
	cmp word ptr [esp+0x18],si
	jne Block63

 Block61:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	cmp eax,ebp
	je Block64

 Block62:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block64

 Block63:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block64:
	mov eax,3
	mov word ptr [esp+0x18],ax
	mov dword ptr [esp+0x20],0xFFFFFFFE
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0xAC],0xD
	call IWzGr2DLayer::RemoveCanvas
	mov eax,dword ptr [esp+0x14]
	cmp eax,ebp
	je Block66

 Block65:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block66:
	mov byte ptr [esp+0xA4],5
	cmp word ptr [esp+0x18],si
	jne Block69

 Block67:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebp
	je Block70

 Block68:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block70

 Block69:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block70:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block72

 Block71:
	push eax
	call _com_issue_error

 Block72:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x50]
	mov bl,0xE
	push ecx
	mov byte ptr [esp+0xA8],bl
	call esi
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block74

 Block73:
	push eax
	call _com_issue_error

 Block74:
	mov eax,3
	mov word ptr [esp+0x68],ax
	mov dword ptr [esp+0x70],0
	mov ecx,eax
	mov word ptr [esp+0x2C],cx
	mov dword ptr [esp+0x34],0xFF
	mov edx,eax
	mov word ptr [esp+0x18],dx
	mov dword ptr [esp+0x20],0x3E8
	lea eax,[esp+0x3C]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x70]
	push edx
	mov edx,dword ptr [esp+0x34]
	lea eax,[esp+0x38]
	push eax
	lea ecx,[esp+0x28]
	push ecx
	push edx
	lea eax,[esp+0x90]
	push eax
	mov ecx,edi
	mov byte ptr [esp+0xC0],0x12
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x78],8
	jne Block81

 Block75:
	mov eax,dword ptr [esp+0x80]
	xor ecx,ecx
	mov word ptr [esp+0x78],cx
	test eax,eax
	je Block77

 Block76:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block77:
	mov ebp,dword ptr [ZImports::_VariantClear]

 Block78:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xA4],0x11
	jne Block82

 Block79:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block83

 Block80:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block83

 Block81:
	mov ebp,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0x78]
	push edx
	call ebp
	jmp Block78

 Block82:
	lea ecx,[esp+0x18]
	push ecx
	call ebp

 Block83:
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0xA4],0x10
	jne Block86

 Block84:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block87

 Block85:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block87

 Block86:
	lea eax,[esp+0x2C]
	push eax
	call ebp

 Block87:
	cmp word ptr [esp+0x68],8
	mov byte ptr [esp+0xA4],0xF
	jne Block90

 Block88:
	mov eax,dword ptr [esp+0x70]
	xor ecx,ecx
	mov word ptr [esp+0x68],cx
	test eax,eax
	je Block91

 Block89:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block91

 Block90:
	lea edx,[esp+0x68]
	push edx
	call ebp

 Block91:
	cmp word ptr [esp+0x50],8
	mov byte ptr [esp+0xA4],bl
	jne Block94

 Block92:
	xor eax,eax
	mov word ptr [esp+0x50],ax
	mov eax,dword ptr [esp+0x58]
	test eax,eax
	je Block95

 Block93:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block95

 Block94:
	lea ecx,[esp+0x50]
	push ecx
	call ebp

 Block95:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xA4],5
	jne Block98

 Block96:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block99

 Block97:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block99

 Block98:
	lea eax,[esp+0x3C]
	push eax
	call ebp

 Block99:
	lea ecx,[esp+0x2C]
	push ecx
	call esi
	lea edx,[esp+0x2C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block101

 Block100:
	push eax
	call _com_issue_error

 Block101:
	lea eax,[esp+0x18]
	mov bl,0x13
	push eax
	mov byte ptr [esp+0xA8],bl
	call esi
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block103

 Block102:
	push eax
	call _com_issue_error

 Block103:
	mov ebp,dword ptr [esp+0x4C]
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x1C]
	push eax
	push 0
	mov ecx,ebp
	mov byte ptr [esp+0xB0],0x14
	call IWzGr2DLayer::Animate
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xA4],bl
	jne Block106

 Block104:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block107

 Block105:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block107

 Block106:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block107:
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0xA4],5
	jne Block110

 Block108:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block111

 Block109:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block111

 Block110:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block111:
	lea edx,[esp+0x2C]
	push edx
	call esi
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block113

 Block112:
	push eax
	call _com_issue_error

 Block113:
	lea ecx,[esp+0x18]
	mov bl,0x15
	push ecx
	mov byte ptr [esp+0xA8],bl
	call esi
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block115

 Block114:
	push eax
	call _com_issue_error

 Block115:
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0xB0],0x16
	call IWzGr2DLayer::Animate
	mov esi,8
	mov byte ptr [esp+0xA4],bl
	cmp word ptr [esp+0x18],si
	jne Block118

 Block116:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block119

 Block117:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block119

 Block118:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block119:
	mov byte ptr [esp+0xA4],5
	cmp word ptr [esp+0x2C],si
	jne Block122

 Block120:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	test eax,eax
	je Block123

 Block121:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block123

 Block122:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block123:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x18],esp
	push 0
	push ecx
	mov dword ptr [eax],0
	mov eax,esp
	mov dword ptr [eax],ebp
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+4]
	mov dword ptr [esp+0x20],esp
	push ebp
	call ecx
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	call CAnimationDisplayer::RegisterOneTimeAnimation
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x18],esp
	push 0
	mov dword ptr [eax],0
	push ecx
	mov eax,esp
	mov dword ptr [eax],edi
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+4]
	mov dword ptr [esp+0x20],esp
	push edi
	call eax
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	call CAnimationDisplayer::RegisterOneTimeAnimation
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xA4],2
	test eax,eax
	je Block125

 Block124:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block125:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov byte ptr [esp+0xA8],1
	call ecx
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+8]
	push ebp
	mov byte ptr [esp+0xA8],0
	call eax
	mov edi,dword ptr [esp+0x64]
	xor ebx,ebx

 Block126:
	mov dword ptr [esp+0xA4],0xFFFFFFFF
	cmp edi,ebx
	je Block131

 Block127:
	mov esi,dword ptr [esp+0x64]
	add esi,0xFFFFFFF0

 Block128:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block131

 Block129:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block131

 Block130:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block131:
	mov ecx,dword ptr [esp+0x9C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x94
	ret 4
}
}
// CTownPortalPool::OnPacket
__SUB_CLASS_THIS(003636B0, __thiscall, 51713,  CTownPortalPool, void, long, CInPacket&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	sub eax,0x14A
	je Block3

 Block1:
	sub eax,1
	jne Block4

 Block2:
	mov eax,dword ptr [esp+8]
	push eax
	call CTownPortalPool::OnTownPortalRemoved
	ret 8

 Block3:
	mov edx,dword ptr [esp+8]
	push edx
	call CTownPortalPool::OnTownPortalCreated

 Block4:
	ret 8
}
}
// CUIStatChange::IsOverMaxMP
__SUB_CLASS_THIS(00469880, __thiscall, 68516,  CUIStatChange, int32_t, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,8
	push ebx
	lea eax,[esp+4]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+8]
	test eax,eax
	je Block5

 Block1:
	push esi
	push edi
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	pop edi
	mov dword ptr [esp+0xC],0
	pop esi

 Block5:
	mov ecx,dword ptr [ebx+0x3D]
	push ecx
	add ebx,0x39
	push ebx
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	push edx
	call IncMPVal
	add eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	add esp,0xC
	cmp eax,0x1869F
	setg cl
	pop ebx
	mov eax,ecx
	add esp,8
	ret 4
}
}
// CUIJoyPad::OnButtonClicked
__SUB_CLASS_THIS(00569A00, __thiscall, 13661,  CUIJoyPad, void, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0x3F1
	jne Block3

 Block1:
	call CUIJoyPad::SetDefault

 Block2:
	ret 4

 Block3:
	cmp eax,1
	jne Block5

 Block4:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],1
	jmp edx

 Block5:
	cmp eax,2
	jne Block7

 Block6:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],2
	jmp edx

 Block7:
	cmp eax,8
	jne Block2

 Block8:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],8
	jmp edx
}
}
// CWvsContext::GetAllianceNotice
__SUB_CLASS_THIS0(004C21E0, __thiscall, 8184,  CWvsContext, ZXString<char>) {
__asm {

 Block0:
	push ecx
	push esi
	mov esi,dword ptr [esp+0xC]
	add ecx,0x3848
	push ecx
	mov ecx,esi
	mov dword ptr [esp+8],0
	mov dword ptr [esi],0
	call ZXString<char>::op_assign
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CWvsContext::SendItemReleaseRequest
_SUB_EXCEPTION_HANDLER(5D5F10)
__SUB_CLASS_THIS(005D5F10, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D5F10
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block4

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block4

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block4

 Block3:
	push 0x61
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x20],0
	call get_update_time
	push eax
	lea ecx,[esp+0xC]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x28]
	push edx
	lea ecx,[esp+0xC]
	call COutPacket::Encode2
	mov eax,dword ptr [esp+0x2C]
	push eax
	lea ecx,[esp+0xC]
	call COutPacket::Encode2
	lea ecx,[esp+8]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0xC]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block4:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 8
}
}
// CWvsContext::GetQuestMateName
_SUB_EXCEPTION_HANDLER(5F7F50)
__SUB_CLASS_THIS(005F7F50, __thiscall, 8101,  CWvsContext, ZXString<char>*, ZXString<char>*, uint16_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F7F50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	xor ebx,ebx
	mov dword ptr [esp+0xC],ebx
	mov dword ptr [esp+0x10],ebx
	lea eax,[esp+0x10]
	push eax
	lea edx,[esp+0x2C]
	push edx
	add ecx,0x3FD8
	mov dword ptr [esp+0x24],1
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetAt
	test eax,eax
	je Block2

 Block1:
	lea eax,[esp+0x10]
	jmp Block3

 Block2:
	push 0
	push offset _S_
	push 0
	push 0
	lea ecx,[esp+0x38]
	mov dword ptr [esp+0x38],0
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	mov ebx,1
	lea eax,[esp+0x28]
	mov byte ptr [esp+0x1C],2
	mov dword ptr [esp+0xC],ebx

 Block3:
	mov esi,dword ptr [esp+0x24]
	push eax
	mov ecx,esi
	mov dword ptr [esi],0
	call ZXString<char>::op_assign
	or ebx,2
	mov dword ptr [esp+0xC],ebx
	mov dword ptr [esp+0x1C],1
	test bl,1
	je Block6

 Block4:
	mov eax,dword ptr [esp+0x28]
	and ebx,0xFFFFFFFE
	mov dword ptr [esp+0xC],ebx
	test eax,eax
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x1C],0
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov eax,esi
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x14
	ret 8
}
}
// CWvsContext::ShowNewYearCard
_SUB_EXCEPTION_HANDLER(5DED00)
__SUB_CLASS_THIS(005DED00, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DED00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	xor ebx,ebx
	push ebx
	push 6
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x24],ebx
	call ZXString<char>::GetBuffer
	mov ecx,dword ptr [_S_SYSTEM]
	mov dword ptr [eax],ecx
	mov dx,word ptr [_S_SYSTEM+4]
	push 6
	lea ecx,[esp+0x20]
	mov word ptr [eax+4],dx
	call ZXString<char>::ReleaseBuffer
	push 0x1A
	push offset _S_SOMETHINGWENTWRO
	push ebx
	push 0x1A
	lea ecx,[esp+0x28]
	mov dword ptr [esp+0x48],ebx
	mov dword ptr [esp+0x28],ebx
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0x1A
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	push ebx
	push 3
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x40],1
	mov dword ptr [esp+0x1C],ebx
	call ZXString<char>::GetBuffer
	mov cx,word ptr [_S_YOU]
	mov word ptr [eax],cx
	mov dl,byte ptr [_S_YOU+2]
	push 3
	lea ecx,[esp+0x18]
	mov byte ptr [eax+2],dl
	call ZXString<char>::ReleaseBuffer
	lea eax,[esp+0x28]
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0x3C],2
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [eax+0x635]
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x20],ecx
	cmp eax,ebx
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	cmp dword ptr [esp+0x20],ebx
	je Block14

 Block5:
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,ebp
	call CWvsContext::GetCharacterData
	lea edx,[esp+0x20]
	push edx
	call ZList<GW_NewYearCardRecord>::GetNext
	mov esi,dword ptr [esp+0x30]
	add esp,4
	mov edi,eax
	mov dword ptr [esp+0x24],edi
	cmp esi,ebx
	je Block10

 Block6:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block9

 Block7:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block9

 Block8:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block9:
	mov edi,dword ptr [esp+0x24]
	mov dword ptr [esp+0x2C],ebx

 Block10:
	mov eax,dword ptr [esp+0x40]
	cmp dword ptr [edi],eax
	je Block13

 Block11:
	cmp dword ptr [esp+0x20],ebx
	jne Block5

 Block12:
	jmp Block14

 Block13:
	lea ecx,[edi+8]
	push ecx
	lea ecx,[esp+0x20]
	call ZXString<char>::AssignCStr
	lea edx,[edi+0x25]
	push edx
	lea ecx,[esp+0x18]
	call ZXString<char>::AssignCStr
	add edi,0x42
	push edi
	lea ecx,[esp+0x1C]
	call ZXString<char>::AssignCStr

 Block14:
	push ecx
	mov ecx,esp
	lea eax,[esp+0x1C]
	mov dword ptr [esp+0x44],esp
	push eax
	mov dword ptr [ecx],ebx
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea edx,[esp+0x1C]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov byte ptr [esp+0x44],3
	mov dword ptr [ecx],ebx
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea eax,[esp+0x28]
	mov dword ptr [esp+0x2C],esp
	push eax
	mov byte ptr [esp+0x48],4
	mov dword ptr [ecx],ebx
	call ZXString<char>::op_assign
	mov byte ptr [esp+0x44],2
	call CUINewYearCardDlg::ShowDlg
	mov eax,dword ptr [esp+0x20]
	add esp,0xC
	mov byte ptr [esp+0x38],1
	cmp eax,ebx
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x38],bl
	cmp eax,ebx
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	cmp eax,ebx
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x28
	ret 4
}
}
// CWvsContext::GetBasicStat
__SUB_CLASS_THIS0(000701C0, __thiscall, 8130,  CWvsContext, const BasicStat&) {
__asm {

 Block0:
	lea eax,[ecx+0x20D0]
	ret
}
}
// CWvsContext::OnShowSlotMessage
_SUB_EXCEPTION_HANDLER(5DF4C0)
__SUB_CLASS_THIS(005DF4C0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DF4C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [esp+0x48]
	call CInPacket::Decode1
	movzx eax,al
	xor ebp,ebp
	mov dword ptr [esp+0x14],eax
	test al,2
	je Block18

 Block1:
	lea eax,[esp+0x24]
	push 0xA
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,eax
	lea ecx,[esp+0x1C]
	push 0xA
	push ecx
	mov dword ptr [esp+0x48],ebp
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,eax
	lea edx,[esp+0x18]
	push 0x165C
	push edx
	mov byte ptr [esp+0x48],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x10],ebp
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [edi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0x50],3
	call ZXString<char>::Format
	add esp,0x10
	push eax
	lea ecx,[esp+0x4C]
	mov dword ptr [esp+0x4C],ebp
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x40],5
	cmp eax,ebp
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block3:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x40],6
	cmp eax,ebp
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x40],7
	cmp eax,ebp
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x40],8
	cmp eax,ebp
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x34],eax
	mov byte ptr [esp+0x40],9
	cmp eax,ebp
	je Block37

 Block10:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	cmp eax,ebp
	je Block37

 Block11:
	add eax,8
	cmp eax,ebp
	je Block37

 Block12:
	lea esi,[eax-8]
	mov dword ptr [esp+0x30],esi
	cmp esi,ebp
	je Block14

 Block13:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block14:
	push ebp
	push ebp
	push ecx
	mov ecx,esp
	lea edx,[esp+0x54]
	mov dword ptr [esp+0x40],esp
	push edx
	mov byte ptr [esp+0x50],0xA
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	push 0x897B50
	push ebp
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push ebp
	push ebp
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_TEXT
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	mov byte ptr [esp+0x40],8
	cmp esi,ebp
	je Block16

 Block15:
	push ebp
	lea ecx,[esp+0x30]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block16:
	mov eax,dword ptr [esp+0x48]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	cmp eax,ebp
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	test byte ptr [esp+0x14],4
	je Block36

 Block19:
	lea eax,[esp+0x34]
	push 0x1A87
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,eax
	lea ecx,[esp+0x2C]
	push 0x1A87
	push ecx
	mov dword ptr [esp+0x48],0xB
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,eax
	lea edx,[esp+0x28]
	push 0x165C
	push edx
	mov byte ptr [esp+0x48],0xC
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],ebp
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [edi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x20]
	push eax
	mov byte ptr [esp+0x50],0xE
	call ZXString<char>::Format
	add esp,0x10
	push eax
	lea ecx,[esp+0x4C]
	mov dword ptr [esp+0x4C],ebp
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x40],0x10
	cmp eax,ebp
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block21:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x40],0x11
	cmp eax,ebp
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x40],0x12
	cmp eax,ebp
	je Block25

 Block24:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block25:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0x40],0x13
	cmp eax,ebp
	je Block27

 Block26:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block27:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x40],0x14
	cmp eax,ebp
	je Block38

 Block28:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	cmp eax,ebp
	je Block38

 Block29:
	add eax,8
	cmp eax,ebp
	je Block38

 Block30:
	lea esi,[eax-8]
	mov dword ptr [esp+0x20],esi
	cmp esi,ebp
	je Block32

 Block31:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block32:
	push ebp
	push ebp
	push ecx
	mov ecx,esp
	lea edx,[esp+0x54]
	mov dword ptr [esp+0x30],esp
	push edx
	mov byte ptr [esp+0x50],0x15
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	push 0x897B50
	push ebp
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push ebp
	push ebp
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_TEXT
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	mov byte ptr [esp+0x40],0x13
	cmp esi,ebp
	je Block34

 Block33:
	push ebp
	lea ecx,[esp+0x20]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block34:
	mov eax,dword ptr [esp+0x48]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	cmp eax,ebp
	je Block36

 Block35:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block36:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x34
	ret 4

 Block37:
	xor esi,esi
	mov dword ptr [esp+0x30],esi
	jmp Block14

 Block38:
	xor esi,esi
	mov dword ptr [esp+0x20],esi
	jmp Block32
}
}
// CWvsContext::DeleteFadeWnd
_SUB_EXCEPTION_HANDLER(5F9840)
__SUB_CLASS_THIS(005F9840, __thiscall, 8284,  CWvsContext, void, NakedParam<ZRef<CUIFadeYesNo>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F9840
	mov eax,dword ptr fs:[0]
	push eax
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [esp+0x18],0
	test edx,edx
	je Block21

 Block1:
	xor edi,edi
	lea esi,[ecx+0x3F1C]
	nop

 Block2:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block13

 Block3:
	cmp edi,dword ptr [eax-4]
	jae Block13

 Block4:
	cmp dword ptr [eax+edi*8+4],edx
	je Block6

 Block5:
	inc edi
	jmp Block2

 Block6:
	mov edx,eax
	lea ebx,[edi*8]
	lea eax,[edx+ebx+4]
	mov edx,dword ptr [eax]
	cmp dword ptr [edx+0xD8],4
	jne Block8

 Block7:
	mov dword ptr [ecx+0x3F40],0

 Block8:
	mov ecx,dword ptr [eax]
	call CWnd::Destroy
	mov eax,dword ptr [esi]
	add eax,ebx
	push eax
	mov ecx,esi
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAt
	lea esp,[esp]

 Block9:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block12

 Block10:
	cmp edi,dword ptr [eax-4]
	jae Block12

 Block11:
	mov ecx,eax
	mov ecx,dword ptr [ecx+edi*8+4]
	call CUIFadeYesNo::MoveWndPosition
	inc edi
	jmp Block9

 Block12:
	mov edx,dword ptr [esp+0x24]

 Block13:
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test edx,edx
	je Block21

 Block14:
	add edx,0xC
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block21

 Block15:
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block17

 Block16:
	add eax,8
	jmp Block18

 Block17:
	xor eax,eax

 Block18:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block21

 Block19:
	lea ecx,[eax+8]
	test ecx,ecx
	je Block21

 Block20:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block21:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0xC
	ret 8
}
}
// CWvsContext::SendUseGachaponRemoteRequest
_SUB_EXCEPTION_HANDLER(5D7340)
__SUB_CLASS_THIS(005D7340, __thiscall, 8310,  CWvsContext, void, long, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D7340
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0x80
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+8]
	mov dword ptr [esp+0x20],0
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x28]
	push ecx
	lea ecx,[esp+8]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+4]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret 8
}
}
// CWvsContext::SetActionRndSeed
__SUB_CLASS_THIS(00318C60, __thiscall, 8314,  CWvsContext, void, uint32_t, uint32_t, uint32_t) {
__asm {

 Block0:
	push ecx
	push esi
	mov esi,ecx
	lea eax,[esi+0x3DB8]
	push eax
	lea ecx,[esp+8]
	call ZSynchronizedHelper<ZFatalSection>::_ctor_0
	mov eax,dword ptr [esp+0xC]
	or eax,0x100000
	mov dword ptr [esi+0x3DA0],eax
	mov dword ptr [esi+0x3DAC],eax
	mov eax,dword ptr [esp+0x10]
	or eax,0x1000
	mov dword ptr [esi+0x3DA4],eax
	mov dword ptr [esi+0x3DB0],eax
	mov eax,dword ptr [esp+0x14]
	or eax,0x10
	mov dword ptr [esi+0x3DA8],eax
	mov dword ptr [esi+0x3DB4],eax
	mov eax,dword ptr [esp+4]
	add dword ptr [eax+4],0xFFFFFFFF
	pop esi
	jne Block2

 Block1:
	mov dword ptr [eax],0

 Block2:
	pop ecx
	ret 0xC
}
}
// CWvsContext::IsInWorldMapQuestDemand
__SUB_CLASS_THIS(005D00B0, __thiscall, 8317,  CWvsContext, int32_t, unsigned long) {
__asm {

 Block0:
	push ebx
	mov ebx,ecx
	push 0
	lea eax,[esp+0xC]
	push eax
	lea ecx,[ebx+0x423C]
	call ZList<unsigned long>::Find
	test eax,eax
	je Block2

 Block1:
	mov eax,1
	pop ebx
	ret 4

 Block2:
	push esi
	push edi
	xor esi,esi
	xor edi,edi
	jmp Block4

 Block4:
	mov eax,dword ptr [ebx+0x4250]
	test eax,eax
	je Block9

 Block5:
	cmp esi,dword ptr [eax-4]
	jae Block9

 Block6:
	push 0
	lea ecx,[esp+0x14]
	mov edx,eax
	push ecx
	lea ecx,[edx+edi+8]
	call ZList<unsigned long>::Find
	test eax,eax
	jne Block8

 Block7:
	inc esi
	add edi,0x1C
	jmp Block4

 Block8:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	ret 4

 Block9:
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	ret 4
}
}
// CWvsContext::GetGuildNotice
__SUB_CLASS_THIS0(004C2180, __thiscall, 8184,  CWvsContext, ZXString<char>) {
__asm {

 Block0:
	push ecx
	push esi
	mov esi,dword ptr [esp+0xC]
	add ecx,0x37E6
	push ecx
	mov ecx,esi
	mov dword ptr [esp+8],0
	mov dword ptr [esi],0
	call ZXString<char>::op_assign
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CWvsContext::IsNearStartQuest
__SUB_CLASS_THIS(005D7690, __thiscall, 8435,  CWvsContext, int32_t, uint16_t) {
__asm {

 Block0:
	sub esp,8
	push ebp
	mov ebp,dword ptr [esp+0x10]
	test bp,bp
	jne Block2

 Block1:
	xor eax,eax
	pop ebp
	add esp,8
	ret 4

 Block2:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebx
	push esi
	push edi
	lea eax,[esp+0x10]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block7

 Block3:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block6

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block6:
	mov dword ptr [esp+0x14],0

 Block7:
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push ebp
	call CQuestMan::GetStartDemand
	mov esi,eax
	test esi,esi
	je Block11

 Block8:
	mov ecx,dword ptr [ebx+0x35]
	push ecx
	lea edi,[ebx+0x33]
	push edi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	add esp,8
	cmp edx,dword ptr [esi+0x1C]
	jae Block11

 Block9:
	mov eax,dword ptr [ebx+0x35]
	push eax
	push edi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx ecx,al
	add ecx,0xA
	add esp,8
	cmp ecx,dword ptr [esi+0x1C]
	jb Block11

 Block10:
	pop edi
	pop esi
	pop ebx
	mov eax,1
	pop ebp
	add esp,8
	ret 4

 Block11:
	pop edi
	pop esi
	pop ebx
	xor eax,eax
	pop ebp
	add esp,8
	ret 4
}
}
// CUISkillInc::OnKey
__SUB_CLASS_THIS(005EB240, __thiscall, 68664,  IUIMsgHandler, void, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0xD
	je Block2

 Block1:
	mov dword ptr [esp+4],eax
	jmp  CDialog::OnKey

 Block2:
	ret 8
}
}
// CTownPortalPool::~CTownPortalPool
_SUB_EXCEPTION_HANDLER(5D3950)
__SUB_CLASS_THIS0(005D3950, __thiscall, 51711,  CTownPortalPool, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D3950
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	int 3// TODO: 	mov dword ptr [esi],offset CTownPortalPool::`vftable'
	lea ecx,[esi+0x1C]
	mov dword ptr [esp+0x14],1
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<ZRef<CTownPortalPool::TOWNPORTAL>>::`vftable'
	call ZList<ZRef<CTownPortalPool::TOWNPORTAL>>::RemoveAll
	lea ecx,[esi+4]
	mov byte ptr [esp+0x14],0
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::`vftable'
	call ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::RemoveAll
	mov dword ptr [TSingleton<CTownPortalPool>::ms_pInstance],0
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CTownPortalPool::Update
_SUB_EXCEPTION_HANDLER(3626C0)
__SUB_CLASS_THIS(003626C0, __thiscall, 51712,  CTownPortalPool, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_3626C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x48
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x5C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov ecx,dword ptr [eax+8]
	lea edx,[esp+0x18]
	push edx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [esp+0x18]
	xor ebx,ebx
	cmp eax,ebx
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	mov esi,dword ptr [esi+0x28]
	mov dword ptr [esp+0x18],esi
	cmp esi,ebx
	je Block46

 Block3:
	lea esp,[esp]

 Block4:
	lea eax,[esp+0x18]
	push eax
	call ZList<ZRef<CTownPortalPool::TOWNPORTAL>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x38],esi
	cmp esi,ebx
	je Block6

 Block5:
	lea ecx,[esi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block6:
	mov dword ptr [esp+0x64],ebx
	call timeGetTime
	cmp dword ptr [esi],ebx
	jne Block42

 Block7:
	sub eax,dword ptr [esi+0x1C]
	cmp eax,0x708
	jle Block42

 Block8:
	push 1
	mov dword ptr [esp+0x18],ebx
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea edx,[esp+0x1C]
	push edx
	sub eax,5
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	cmp edi,ebx
	jne Block10

 Block9:
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [esi+0x10]
	mov edi,eax
	mov dword ptr [esp+0x14],ecx

 Block10:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x3C],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x4C],esp
	mov dword ptr [eax],ebx
	lea ecx,[esp+0x3C]
	push 0xAC1
	push ecx
	mov byte ptr [esp+0x88],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x80],3
	push ebx
	push eax
	lea edx,[esp+0x40]
	push edx
	mov byte ptr [esp+0x8C],4
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov ebp,dword ptr [esi+0x14]
	add esp,0x28
	cmp ebp,eax
	je Block15

 Block11:
	mov dword ptr [esi+0x14],eax
	cmp eax,ebx
	je Block13

 Block12:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block13:
	cmp ebp,ebx
	je Block15

 Block14:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	call ecx

 Block15:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,ebx
	je Block17

 Block16:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block17:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x64],bl
	cmp eax,ebx
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block19:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1E0
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],ebx
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x48],esp
	mov dword ptr [eax],ebx
	lea eax,[esp+0x44]
	push 0xAC2
	push eax
	mov byte ptr [esp+0x88],6
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x80],7
	push ebx
	push eax
	lea ecx,[esp+0x48]
	push ecx
	mov byte ptr [esp+0x8C],8
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block24

 Block20:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block22

 Block21:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block22:
	cmp edi,ebx
	je Block24

 Block23:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block24:
	mov eax,dword ptr [esp+0x24]
	cmp eax,ebx
	je Block26

 Block25:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block26:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x64],bl
	cmp eax,ebx
	je Block28

 Block27:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block28:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x4C]
	push eax
	call edi
	lea ecx,[esp+0x4C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block47

 Block29:
	lea edx,[esp+0x3C]
	push edx
	mov byte ptr [esp+0x68],9
	call edi
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block47

 Block30:
	mov edi,dword ptr [esi+0x14]
	mov byte ptr [esp+0x64],0xA
	cmp edi,ebx
	je Block48

 Block31:
	mov edx,dword ptr [esp+0x4C]
	mov ecx,dword ptr [edi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x60]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x68]
	mov dword ptr [eax+0xC],edx
	mov edx,dword ptr [esp+0x4C]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x60]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x68]
	push 0x20
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x110]
	push edi
	call eax
	cmp eax,ebx
	jge Block33

 Block32:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block33:
	mov edi,8
	mov byte ptr [esp+0x64],9
	cmp word ptr [esp+0x3C],di
	jne Block36

 Block34:
	mov eax,dword ptr [esp+0x44]
	xor ecx,ecx
	mov word ptr [esp+0x3C],cx
	cmp eax,ebx
	je Block37

 Block35:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block37

 Block36:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block37:
	mov byte ptr [esp+0x64],bl
	cmp word ptr [esp+0x4C],di
	jne Block40

 Block38:
	xor eax,eax
	mov word ptr [esp+0x4C],ax
	mov eax,dword ptr [esp+0x54]
	cmp eax,ebx
	je Block41

 Block39:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block41

 Block40:
	lea ecx,[esp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block41:
	mov dword ptr [esi],1

 Block42:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x68],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block45

 Block43:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block45

 Block44:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block45:
	mov dword ptr [esp+0x38],ebx
	cmp dword ptr [esp+0x18],ebx
	jne Block4

 Block46:
	mov ecx,dword ptr [esp+0x5C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret 4

 Block47:
	push eax
	call _com_issue_error

 Block48:
	push 0x80004003
	call _com_issue_error
}
}
// CUISkillDecEX::CreateSkillDecDlg
__SUB_CLASS_THIS0(005CC810, __thiscall, 68631,  CUISkillDecEX, void) {
__asm {

 Block0:
	push 1
	push 0
	push 1
	push offset _S_UIUIWINDOW2IMGRE__3
	call CDialog::CreateDlg_2
	ret
}
}
// COpenGatePool::OnOpenGateRemoved
_SUB_EXCEPTION_HANDLER(28B780)
__SUB_CLASS_THIS(0028B780, __thiscall, 51994,  COpenGatePool, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_28B780
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x40
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x54]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	xor edi,edi
	mov dword ptr [esp+0x28],edi
	mov dword ptr [esp+0x5C],edi
	mov dword ptr [esp+0x30],edi
	mov esi,dword ptr [esp+0x64]
	mov ecx,esi
	mov byte ptr [esp+0x5C],1
	call CInPacket::Decode1
	mov ecx,esi
	movzx ebx,al
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [esp+0x64],eax
	call CInPacket::Decode1
	movzx eax,al
	mov dword ptr [esp+0x14],edi
	cmp eax,edi
	je Block8

 Block1:
	lea eax,[esp+0x24]
	push eax
	lea ecx,[esp+0x68]
	push ecx
	lea ecx,[ebp+4]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	test eax,eax
	jne Block3

 Block2:
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x5C],0
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x5C],0xFFFFFFFF
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>
	jmp Block80

 Block3:
	mov edi,dword ptr [esp+0x28]
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x20],esp
	mov dword ptr [eax+4],edi
	test edi,edi
	je Block5

 Block4:
	lea edx,[edi-0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block5:
	mov ecx,ebp
	call COpenGatePool::RemoveOpenGate1
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[edi+8]
	push ecx
	lea ecx,[ebp+0x30]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	test ebx,ebx
	jne Block44

 Block6:
	mov edx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov eax,dword ptr [esp+0x64]
	cmp dword ptr [edx+0x19E8],eax
	jne Block16

 Block7:
	lea ecx,[esp+0x64]
	push 0x18DE
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x5C],2
	jmp Block14

 Block8:
	lea edx,[esp+0x24]
	push edx
	lea eax,[esp+0x68]
	push eax
	lea ecx,[ebp+0x30]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	test eax,eax
	je Block2

 Block9:
	mov edi,dword ptr [esp+0x28]
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x20],esp
	mov dword ptr [eax+4],edi
	test edi,edi
	je Block11

 Block10:
	lea ecx,[edi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block11:
	mov ecx,ebp
	call COpenGatePool::RemoveOpenGate2
	lea edx,[esp+0x2C]
	push edx
	lea eax,[edi+8]
	push eax
	lea ecx,[ebp+4]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	test ebx,ebx
	jne Block44

 Block12:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edx,dword ptr [esp+0x64]
	cmp dword ptr [ecx+0x19E8],edx
	jne Block16

 Block13:
	lea eax,[esp+0x64]
	push 0x18DE
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x5C],3

 Block14:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x6C]
	add esp,8
	mov byte ptr [esp+0x5C],1
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov edx,dword ptr [edi+0x10]
	mov eax,dword ptr [edi+0xC]
	push 1
	push 0x7FFFFFFF
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test eax,eax
	jne Block18

 Block17:
	mov ecx,dword ptr [edi+0x10]
	mov edx,dword ptr [edi+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [edi+0x10]
	mov dword ptr [esp+0x14],ecx

 Block18:
	mov eax,dword ptr [eax+0x2C]
	imul eax,0x7530
	push 0
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	mov dword ptr [eax],0
	mov edx,dword ptr [edi+0x10]
	mov eax,dword ptr [edi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x3C],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x34]
	push 0xAC8
	push ecx
	mov byte ptr [esp+0x80],5
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],6
	push 0
	push eax
	lea edx,[esp+0x88]
	push edx
	mov byte ptr [esp+0x84],7
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov esi,dword ptr [edi+0x18]
	add esp,0x28
	cmp esi,eax
	je Block23

 Block19:
	mov dword ptr [edi+0x18],eax
	test eax,eax
	je Block21

 Block20:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block21:
	test esi,esi
	je Block23

 Block22:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block23:
	mov eax,dword ptr [esp+0x64]
	test eax,eax
	je Block25

 Block24:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block25:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x5C],1
	test eax,eax
	je Block27

 Block26:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block27:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x44]
	push ecx
	call ebx
	lea edx,[esp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block29

 Block28:
	push eax
	call _com_issue_error

 Block29:
	lea eax,[esp+0x34]
	push eax
	mov byte ptr [esp+0x60],8
	call ebx
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block31

 Block30:
	push eax
	call _com_issue_error

 Block31:
	mov ecx,dword ptr [edi+0x18]
	mov byte ptr [esp+0x5C],9
	test ecx,ecx
	jne Block33

 Block32:
	push 0x80004003
	call _com_issue_error

 Block33:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x38]
	push eax
	push 0
	call IWzGr2DLayer::Animate
	mov esi,8
	mov byte ptr [esp+0x5C],8
	cmp word ptr [esp+0x34],si
	jne Block36

 Block34:
	mov eax,dword ptr [esp+0x3C]
	xor ecx,ecx
	mov word ptr [esp+0x34],cx
	test eax,eax
	je Block37

 Block35:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block37

 Block36:
	lea edx,[esp+0x34]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block37:
	mov byte ptr [esp+0x5C],1
	cmp word ptr [esp+0x44],si
	jne Block40

 Block38:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block41

 Block39:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block41

 Block40:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block41:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x68],esp
	push 0
	mov dword ptr [eax],0
	mov eax,dword ptr [edi+0x18]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block43

 Block42:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block43:
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	call CAnimationDisplayer::RegisterOneTimeAnimation
	jmp Block45

 Block44:
	mov ebx,dword ptr [ZImports::_VariantInit]

 Block45:
	mov esi,dword ptr [esp+0x30]
	test esi,esi
	je Block72

 Block46:
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push 1
	push 0x7FFFFFFF
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test eax,eax
	jne Block48

 Block47:
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [esi+0x10]
	mov dword ptr [esp+0x14],ecx

 Block48:
	mov eax,dword ptr [eax+0x2C]
	imul eax,0x7530
	push 0
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	mov dword ptr [eax],0
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x34]
	push 0xAC5
	push ecx
	mov byte ptr [esp+0x80],0xB
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],0xC
	push 0
	push eax
	lea edx,[esp+0x88]
	push edx
	mov byte ptr [esp+0x84],0xD
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov ebp,dword ptr [esi+0x18]
	add esp,0x28
	cmp ebp,eax
	je Block53

 Block49:
	mov dword ptr [esi+0x18],eax
	test eax,eax
	je Block51

 Block50:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block51:
	test ebp,ebp
	je Block53

 Block52:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	call ecx

 Block53:
	mov eax,dword ptr [esp+0x64]
	test eax,eax
	je Block55

 Block54:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block55:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x5C],1
	test eax,eax
	je Block57

 Block56:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block57:
	lea ecx,[esp+0x34]
	push ecx
	call ebx
	lea edx,[esp+0x34]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block59

 Block58:
	push eax
	call _com_issue_error

 Block59:
	lea eax,[esp+0x44]
	mov bl,0xE
	push eax
	mov byte ptr [esp+0x60],bl
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block61

 Block60:
	push eax
	call _com_issue_error

 Block61:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x5C],0xF
	test ecx,ecx
	jne Block63

 Block62:
	push 0x80004003
	call _com_issue_error

 Block63:
	lea edx,[esp+0x34]
	push edx
	lea eax,[esp+0x48]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov byte ptr [esp+0x5C],bl
	mov ebx,8
	cmp word ptr [esp+0x44],bx
	jne Block66

 Block64:
	mov eax,dword ptr [esp+0x4C]
	xor ecx,ecx
	mov word ptr [esp+0x44],cx
	test eax,eax
	je Block67

 Block65:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block67

 Block66:
	lea edx,[esp+0x44]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block67:
	mov byte ptr [esp+0x5C],1
	cmp word ptr [esp+0x34],bx
	jne Block70

 Block68:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block71:
	mov dword ptr [esi+0x24],1

 Block72:
	mov ebp,dword ptr [ZImports::_InterlockedDecrement]
	mov byte ptr [esp+0x5C],0
	test esi,esi
	je Block76

 Block73:
	add esi,0xFFFFFFF0
	lea ebx,[esi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block76

 Block74:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block76

 Block75:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block76:
	mov dword ptr [esp+0x5C],0xFFFFFFFF
	test edi,edi
	je Block80

 Block77:
	add edi,0xFFFFFFF0
	lea esi,[edi+4]
	push esi
	call ebp
	test eax,eax
	jne Block80

 Block78:
	push esi
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block80

 Block79:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block80:
	mov ecx,dword ptr [esp+0x54]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x4C
	ret 4
}
}
// CUISkillDecEX::OnButtonClicked
__SUB_CLASS_THIS(00453060, __thiscall, 68635,  CUISkillDecEX, void, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	mov esi,ecx
	lea ecx,[eax-0x7DA]
	cmp ecx,3
	ja Block3

 Block1:
	add eax,0xFFFFF826
	push eax
	mov ecx,esi
	call CUISkillDecEX::OnSkillDecButton

 Block2:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x34]
	push 1
	mov ecx,esi
	call eax
	pop esi
	ret 4

 Block3:
	cmp eax,1
	je Block2

 Block4:
	cmp eax,2
	jne Block6

 Block5:
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x34]
	mov ecx,esi
	call eax
	pop esi
	ret 4

 Block6:
	cmp eax,8
	jne Block8

 Block7:
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x34]
	mov ecx,esi
	call eax

 Block8:
	pop esi
	ret 4
}
}
// CWvsContext::SendMigrateToITCRequest
_SUB_EXCEPTION_HANDLER(5DEF50)
__SUB_CLASS_THIS0(005DEF50, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DEF50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esi+0x2098]
	test eax,eax
	je Block5

 Block1:
	mov dword ptr [esp+8],0
	lea eax,[esp+8]
	push offset _S_THEMAPLESTORYTRA
	push eax
	mov dword ptr [esp+0x30],0
	call ZXString<char>::Format
	mov esi,dword ptr [esp+0x10]
	add esp,8
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block3

 Block2:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x14],esp
	push 0
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],0
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd

 Block3:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test esi,esi
	je Block16

 Block4:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x24
	ret

 Block5:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test eax,eax
	je Block16

 Block6:
	cmp dword ptr [eax+0x63C],0
	jle Block8

 Block7:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push 0x116
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x24
	ret

 Block8:
	cmp dword ptr [esi+0x20B8],0
	jne Block16

 Block9:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block16

 Block10:
	cmp dword ptr [esi+0x3F9C],0
	je Block13

 Block11:
	lea edx,[esp+8]
	push 0xC92
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x30],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x10]
	add esp,8
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block16

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x24
	ret

 Block13:
	call get_field
	test byte ptr [eax+0x178],0x10
	je Block15

 Block14:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x20],esp
	push 0x122
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x24
	ret

 Block15:
	push 0xB4
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	mov dword ptr [esp+0x2C],2
	call CClientSocket::SendPacket
	push 1
	mov ecx,esi
	call CWvsContext::SetExclRequestSent
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block16:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x24
	ret
}
}
// CTemporaryStatView::TEMPORARY_STAT::UpdateShadowIndex
_SUB_EXCEPTION_HANDLER(35D560)
__SUB_CLASS_THIS0(0035D560, __thiscall, 5822,  CTemporaryStatView::TEMPORARY_STAT, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35D560
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x78
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [ebp-0x30],edi
	xor esi,esi
	cmp dword ptr [edi+0x3C],esi
	jne Block75

 Block1:
	mov ecx,dword ptr [edi+0x44]
	mov dword ptr [ebp-0x28],esi
	cmp ecx,esi
	je Block7

 Block2:
	mov eax,dword ptr [edi+0x40]
	cdq
	idiv ecx
	cmp eax,0xF
	jl Block4

 Block3:
	mov eax,0xF
	mov dword ptr [ebp-0x28],eax
	jmp Block7

 Block4:
	cmp eax,esi
	jle Block6

 Block5:
	mov dword ptr [ebp-0x28],eax
	jmp Block7

 Block6:
	mov dword ptr [ebp-0x28],esi

 Block7:
	mov ebx,dword ptr [ebp-0x28]
	cmp dword ptr [edi+0x34],ebx
	je Block75

 Block8:
	mov dword ptr [ebp-0x2C],esi
	lea eax,[ebp-0x24]
	push 0xE32
	push eax
	mov dword ptr [ebp-4],esi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push ebx
	push eax
	lea ecx,[ebp-0x2C]
	push ecx
	mov byte ptr [ebp-4],1
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x24]
	add esp,0xC
	mov byte ptr [ebp-4],0
	cmp eax,esi
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	mov dword ptr [ebp-0x24],esi
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x20]
	push edx
	mov byte ptr [ebp-4],2
	call edi
	lea eax,[ebp-0x20]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block12

 Block11:
	push eax
	call _com_issue_error

 Block12:
	lea ecx,[ebp-0x40]
	push ecx
	mov byte ptr [ebp-4],3
	call edi
	lea edx,[ebp-0x40]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block14

 Block13:
	push eax
	call _com_issue_error

 Block14:
	mov eax,dword ptr [ebp-0x2C]
	push esi
	push esi
	push 0xFFFFFFFF
	push eax
	push esi
	mov bl,4
	push esi
	mov byte ptr [ebp-4],bl
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov eax,dword ptr [ebp-0x2C]
	mov esi,esp
	push 0
	push 0
	lea ecx,[ebp-0x20]
	push ecx
	lea edx,[ebp-0x40]
	push edx
	push 0x3FFFFFFF
	push esi
	push 0xFFFFFFFF
	push eax
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x84],esp
	mov ecx,esp
	push esi
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],5
	jne Block16

 Block15:
	push 0x80004003
	call _com_issue_error

 Block16:
	lea ecx,[ebp-0x50]
	push ecx
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],6
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x24]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block19

 Block17:
	cmp eax,0x80004002
	je Block19

 Block18:
	push eax
	call _com_issue_error

 Block19:
	mov byte ptr [ebp-4],bl
	mov ebx,8
	cmp word ptr [ebp-0x50],bx
	jne Block26

 Block20:
	mov eax,dword ptr [ebp-0x48]
	xor edx,edx
	mov word ptr [ebp-0x50],dx
	test eax,eax
	je Block22

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block22:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block23:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x40],bx
	jne Block27

 Block24:
	mov eax,dword ptr [ebp-0x38]
	xor ecx,ecx
	mov word ptr [ebp-0x40],cx
	test eax,eax
	je Block28

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block28

 Block26:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea eax,[ebp-0x50]
	push eax
	call esi
	jmp Block23

 Block27:
	lea edx,[ebp-0x40]
	push edx
	call esi

 Block28:
	mov byte ptr [ebp-4],2
	cmp word ptr [ebp-0x20],bx
	jne Block31

 Block29:
	xor eax,eax
	mov word ptr [ebp-0x20],ax
	mov eax,dword ptr [ebp-0x18]
	test eax,eax
	je Block32

 Block30:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block32

 Block31:
	lea ecx,[ebp-0x20]
	push ecx
	call esi

 Block32:
	mov edx,3
	mov word ptr [ebp-0x20],dx
	mov dword ptr [ebp-0x18],0xFFFFFFFE
	mov ebx,dword ptr [ebp-0x30]
	mov ecx,dword ptr [ebx+0x30]
	mov byte ptr [ebp-4],7
	test ecx,ecx
	jne Block34

 Block33:
	push 0x80004003
	call _com_issue_error

 Block34:
	lea eax,[ebp-0x20]
	push eax
	lea edx,[ebp-0x30]
	push edx
	call IWzGr2DLayer::RemoveCanvas
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block36

 Block35:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block36:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block39

 Block37:
	xor eax,eax
	mov word ptr [ebp-0x20],ax
	mov eax,dword ptr [ebp-0x18]
	test eax,eax
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block40

 Block39:
	lea ecx,[ebp-0x20]
	push ecx
	call esi

 Block40:
	lea edx,[ebp-0x50]
	push edx
	call edi
	lea eax,[ebp-0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block42

 Block41:
	push eax
	call _com_issue_error

 Block42:
	lea ecx,[ebp-0x60]
	push ecx
	mov byte ptr [ebp-4],8
	call edi
	lea edx,[ebp-0x60]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block44

 Block43:
	push eax
	call _com_issue_error

 Block44:
	mov eax,3
	mov word ptr [ebp-0x70],ax
	mov dword ptr [ebp-0x68],0x40
	mov ecx,eax
	mov word ptr [ebp-0x40],cx
	mov dword ptr [ebp-0x38],0xD2
	mov edx,eax
	mov word ptr [ebp-0x20],dx
	mov dword ptr [ebp-0x18],0x1F4
	mov ecx,dword ptr [ebx+0x30]
	mov byte ptr [ebp-4],0xC
	test ecx,ecx
	jne Block46

 Block45:
	push 0x80004003
	call _com_issue_error

 Block46:
	mov esi,dword ptr [ebp-0x24]
	lea eax,[ebp-0x50]
	push eax
	lea edx,[ebp-0x60]
	push edx
	lea eax,[ebp-0x70]
	push eax
	lea edx,[ebp-0x40]
	push edx
	lea eax,[ebp-0x20]
	push eax
	push esi
	lea edx,[ebp-0x80]
	push edx
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [ebp-0x80],8
	jne Block53

 Block47:
	xor eax,eax
	mov word ptr [ebp-0x80],ax
	mov eax,dword ptr [ebp-0x78]
	test eax,eax
	je Block49

 Block48:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block49:
	mov edi,dword ptr [ZImports::_VariantClear]

 Block50:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],0xB
	jne Block54

 Block51:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block55

 Block52:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block53:
	mov edi,dword ptr [ZImports::_VariantClear]
	lea ecx,[ebp-0x80]
	push ecx
	call edi
	jmp Block50

 Block54:
	lea eax,[ebp-0x20]
	push eax
	call edi

 Block55:
	cmp word ptr [ebp-0x40],8
	mov byte ptr [ebp-4],0xA
	jne Block58

 Block56:
	mov eax,dword ptr [ebp-0x38]
	xor ecx,ecx
	mov word ptr [ebp-0x40],cx
	test eax,eax
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea edx,[ebp-0x40]
	push edx
	call edi

 Block59:
	cmp word ptr [ebp-0x70],8
	mov byte ptr [ebp-4],9
	jne Block62

 Block60:
	xor eax,eax
	mov word ptr [ebp-0x70],ax
	mov eax,dword ptr [ebp-0x68]
	test eax,eax
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea ecx,[ebp-0x70]
	push ecx
	call edi

 Block63:
	cmp word ptr [ebp-0x60],8
	mov byte ptr [ebp-4],8
	jne Block66

 Block64:
	mov eax,dword ptr [ebp-0x58]
	xor edx,edx
	mov word ptr [ebp-0x60],dx
	test eax,eax
	je Block67

 Block65:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block67

 Block66:
	lea eax,[ebp-0x60]
	push eax
	call edi

 Block67:
	cmp word ptr [ebp-0x50],8
	mov byte ptr [ebp-4],2
	jne Block70

 Block68:
	mov eax,dword ptr [ebp-0x48]
	xor ecx,ecx
	mov word ptr [ebp-0x50],cx
	test eax,eax
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea edx,[ebp-0x50]
	push edx
	call edi

 Block71:
	mov eax,dword ptr [ebp-0x28]
	mov dword ptr [ebx+0x34],eax
	mov byte ptr [ebp-4],0
	test esi,esi
	je Block73

 Block72:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	call edx

 Block73:
	mov eax,dword ptr [ebp-0x2C]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block75

 Block74:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block75:
	lea esp,[ebp-0x94]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret
}
}
// CWvsContext::GetAccountId
__SUB_CLASS_THIS0(003F6AB0, __thiscall, 8106,  CWvsContext, unsigned long) {
__asm {

 Block0:
	cmp dword ptr [ecx+0x3604],0
	jle Block2

 Block1:
	mov eax,dword ptr [ecx+0x36B6]
	ret

 Block2:
	xor eax,eax
	ret
}
}
// CUISkillDec::OnCreate
_SUB_EXCEPTION_HANDLER(458690)
__SUB_CLASS_THIS(00458690, __thiscall, 68554,  CUISkillDec, void, void*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_458690
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor edi,edi
	push edi
	push edi
	push esi
	lea ecx,[esi+0xE0]
	call CLayoutMan::Init
	push 0x70
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov dword ptr [esp+0x24],edi
	mov dword ptr [esp+0x28],1
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x40],edi
	cmp eax,edi
	je Block2

 Block1:
	mov ecx,eax
	call CCtrlTab::_ctor_default
	jmp Block3

 Block2:
	xor eax,eax

 Block3:
	or ebp,0xFFFFFFFF
	mov dword ptr [esp+0x40],ebp
	cmp eax,edi
	je Block11

 Block4:
	lea ebx,[eax+8]
	cmp ebx,edi
	je Block11

 Block5:
	add ebx,0xFFFFFFF8
	cmp ebx,edi
	je Block7

 Block6:
	lea eax,[ebx+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block7:
	mov eax,dword ptr [esi+0x98]
	mov dword ptr [esi+0x98],ebx
	mov dword ptr [esp+0x1C],eax
	cmp eax,edi
	je Block9

 Block8:
	push edi
	lea ecx,[esp+0x1C]
	call ZRef<CCtrlTab>::_ReleaseRaw

 Block9:
	mov ecx,dword ptr [esi+0x98]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x20]
	push eax
	push 0x14
	push 0xAA
	push 0x45
	push 8
	push 8
	push 0x7D0
	push esi
	call edx
	push 0x74
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x40],1
	cmp eax,edi
	je Block12

 Block10:
	mov ecx,eax
	call CCtrlScrollBar::_ctor_default
	jmp Block13

 Block11:
	xor ebx,ebx
	jmp Block7

 Block12:
	xor eax,eax

 Block13:
	mov dword ptr [esp+0x40],ebp
	cmp eax,edi
	je Block22

 Block14:
	add eax,8
	cmp eax,edi
	je Block22

 Block15:
	lea ebx,[eax-8]
	cmp ebx,edi
	je Block17

 Block16:
	lea eax,[ebx+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block17:
	mov eax,dword ptr [esi+0xA0]
	mov dword ptr [esi+0xA0],ebx
	mov dword ptr [esp+0x1C],eax
	cmp eax,edi
	je Block19

 Block18:
	push edi
	lea ecx,[esp+0x1C]
	call ZRef<CCtrlScrollBar>::_ReleaseRaw

 Block19:
	mov ecx,dword ptr [esi+0xA0]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x28]
	push edi
	push 0x99
	push 0x5F
	push 0x96
	push 8
	push 1
	push 0x7D1
	push esi
	call eax
	mov eax,dword ptr [esi+0xA0]
	mov dword ptr [eax+0x34],0x9C
	mov dword ptr [esp+0x34],edi
	mov dword ptr [esp+0x2C],edi
	mov dword ptr [esp+0x30],edi
	lea ecx,[esp+0x14]
	push 0xB9F
	push ecx
	mov dword ptr [esp+0x48],2
	mov dword ptr [esp+0x30],edi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x38]
	mov byte ptr [esp+0x44],3
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x40],2
	cmp eax,edi
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block21:
	mov dword ptr [esp+0x14],edi
	mov ebx,0x73
	lea ebp,[esi+0xA8]
	jmp Block24

 Block22:
	xor ebx,ebx
	jmp Block17

 Block23:
	xor edi,edi

 Block24:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x18],eax
	mov byte ptr [esp+0x40],4
	cmp eax,edi
	je Block26

 Block25:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block27

 Block26:
	xor eax,eax

 Block27:
	mov byte ptr [esp+0x40],2
	cmp eax,edi
	je Block31

 Block28:
	add eax,8
	cmp eax,edi
	je Block31

 Block29:
	lea edi,[eax-8]
	test edi,edi
	je Block31

 Block30:
	lea edx,[edi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block31:
	mov eax,dword ptr [ebp]
	mov dword ptr [ebp],edi
	test eax,eax
	je Block35

 Block32:
	lea edi,[eax+8]
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block35

 Block33:
	lea ecx,[edi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block35

 Block34:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block35:
	mov edi,dword ptr [esp+0x14]
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x28]
	push eax
	push 1
	push ebx
	push 0x85
	lea eax,[edi+0x7DA]
	push eax
	push esi
	call edx
	inc edi
	add ebx,0x28
	add ebp,8
	cmp ebx,0x113
	mov dword ptr [esp+0x14],edi
	jl Block23

 Block36:
	lea eax,[esp+0x14]
	push 0x1962
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x38]
	mov byte ptr [esp+0x44],5
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x40],2
	test eax,eax
	je Block38

 Block37:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block38:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x18],eax
	mov byte ptr [esp+0x40],6
	test eax,eax
	je Block40

 Block39:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block41

 Block40:
	xor eax,eax

 Block41:
	mov byte ptr [esp+0x40],2
	test eax,eax
	je Block52

 Block42:
	add eax,8
	je Block52

 Block43:
	lea edi,[eax-8]
	test edi,edi
	je Block45

 Block44:
	lea ecx,[edi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block45:
	mov eax,dword ptr [esi+0xC8]
	mov dword ptr [esi+0xC8],edi
	test eax,eax
	je Block49

 Block46:
	lea edi,[eax+8]
	lea edx,[edi+4]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block49

 Block47:
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block49

 Block48:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block49:
	mov ecx,dword ptr [esi+0xC8]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x28]
	push eax
	push 0
	push 6
	push 0x95
	push 2
	push esi
	call edx
	mov ecx,dword ptr [esi+0x98]
	push 0
	call CCtrlTab::SetTab
	mov ecx,esi
	call CUISkillDec::SetSkillRootList
	mov ecx,esi
	call CUISkillDec::ResetInfo
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block51

 Block50:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block51:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 4

 Block52:
	xor edi,edi
	jmp Block45
}
}
// CWvsContext::SendDragonBallBoxRequest
_SUB_EXCEPTION_HANDLER(5D73D0)
__SUB_CLASS_THIS0(005D73D0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D73D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0xC4
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+4]
	push eax
	mov dword ptr [esp+0x20],0
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret
}
}
// COpenGatePool::RemoveOpenGate2
_SUB_EXCEPTION_HANDLER(2895B0)
__SUB_CLASS_THIS(002895B0, __thiscall, 51998,  COpenGatePool, void, NakedParam<ZRef<COpenGatePool::OPENGATE>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_2895B0
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [eax+4]
	push ecx
	lea ecx,[esi+0x48]
	mov dword ptr [esp+0x18],0
	call ZList<ZRef<COpenGatePool::OPENGATE>>::RemoveAt
	mov edx,dword ptr [esp+0x20]
	add edx,8
	push edx
	lea ecx,[esi+0x30]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::RemoveKey
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CWvsContext::GetCharacterData
__SUB_CLASS_THIS(0002B960, __thiscall, 8127,  CWvsContext, ZRef<CharacterData>*, ZRef<CharacterData>*) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [ecx+0x20CC]
	push esi
	mov esi,dword ptr [esp+0xC]
	mov dword ptr [esp+4],0
	mov dword ptr [esi+4],eax
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block2:
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CWvsContext::GetOnlineAllianceMemberID
__SUB_CLASS_THIS(0060BC10, __thiscall, 8152,  CWvsContext, void, ZArray<unsigned long>&) {
__asm {

 Block0:
	sub esp,8
	push ebx
	mov ebx,ecx
	mov ecx,dword ptr [esp+0x10]
	mov eax,dword ptr [ecx]
	push ebp
	xor ebp,ebp
	cmp eax,ebp
	je Block3

 Block1:
	cmp dword ptr [eax-4],ebp
	je Block3

 Block2:
	call ZArray<unsigned long>::RemoveAll

 Block3:
	cmp dword ptr [ebx+0x37EE],ebp
	je Block25

 Block4:
	push esi
	mov dword ptr [esp+0x10],ebp
	push edi
	nop

 Block5:
	mov eax,dword ptr [ebx+0x384C]
	test eax,eax
	je Block14

 Block6:
	mov ecx,dword ptr [esp+0x14]
	cmp ecx,dword ptr [eax-4]
	jae Block14

 Block7:
	xor esi,esi
	mov dword ptr [esp+0x10],esi
	lea esp,[esp]

 Block8:
	mov edx,dword ptr [ebx+0x384C]
	lea eax,[edx+ebp+0xC]
	mov eax,dword ptr [eax]
	test eax,eax
	je Block13

 Block9:
	cmp esi,dword ptr [eax-4]
	jae Block13

 Block10:
	mov eax,edx
	mov ecx,dword ptr [eax+ebp+0xC]
	mov edx,dword ptr [eax+ebp+0x10]
	mov edi,dword ptr [ecx+esi*4]
	add eax,ebp
	mov eax,dword ptr [esp+0x10]
	cmp dword ptr [edx+eax+0x19],0
	je Block12

 Block11:
	mov ecx,dword ptr [esp+0x1C]
	push 0xFFFFFFFF
	call ZArray<unsigned long>::InsertBefore
	mov dword ptr [eax],edi

 Block12:
	inc esi
	add dword ptr [esp+0x10],0x25
	jmp Block8

 Block13:
	inc dword ptr [esp+0x14]
	add ebp,0x4A
	jmp Block5

 Block14:
	cmp dword ptr [ebx+0x37C8],0
	je Block24

 Block15:
	xor edi,edi
	xor ebp,ebp
	lea ebx,[ebx]

 Block16:
	mov eax,dword ptr [ebx+0x37D4]
	test eax,eax
	je Block18

 Block17:
	mov eax,dword ptr [eax-4]

 Block18:
	cmp edi,eax
	jge Block24

 Block19:
	mov ecx,dword ptr [ebx+0x37D4]
	mov esi,dword ptr [ecx+edi*4]
	test esi,esi
	je Block23

 Block20:
	mov edx,dword ptr [ebx+0x37D8]
	cmp dword ptr [edx+ebp+0x19],0
	je Block23

 Block21:
	cmp dword ptr [ebx+0x20B4],esi
	je Block23

 Block22:
	mov ecx,dword ptr [esp+0x1C]
	push 0xFFFFFFFF
	call ZArray<unsigned long>::InsertBefore
	mov dword ptr [eax],esi

 Block23:
	inc edi
	add ebp,0x25
	jmp Block16

 Block24:
	pop edi
	pop esi

 Block25:
	pop ebp
	pop ebx
	add esp,8
	ret 4
}
}
// CUIStatChangeConfirm::OnCreate
_SUB_EXCEPTION_HANDLER(46A480)
__SUB_CLASS_THIS(0046A480, __thiscall, 68533,  CUIStatChangeConfirm, void, void*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_46A480
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x1C],1
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x24],ebx
	push offset _S_UIBASICIMGBTOK4
	lea ecx,[esp+0x2C]
	mov dword ptr [esp+0x38],ebx
	call ZXString<unsigned short>::AssignCStr
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],1
	cmp eax,ebx
	je Block2

 Block1:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block3

 Block2:
	xor eax,eax

 Block3:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block11

 Block4:
	add eax,8
	cmp eax,ebx
	je Block11

 Block5:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block7

 Block6:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block7:
	mov eax,dword ptr [esi+0x94]
	mov dword ptr [esi+0x94],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block9

 Block8:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block9:
	mov ecx,dword ptr [esi+0x94]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push ebx
	push 0x64
	push 0x42
	push 1
	push esi
	call edx
	push offset _S_UIBASICIMGBTCANC
	lea ecx,[esp+0x2C]
	call ZXString<unsigned short>::AssignCStr
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],2
	cmp eax,ebx
	je Block12

 Block10:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block13

 Block11:
	xor edi,edi
	jmp Block7

 Block12:
	xor eax,eax

 Block13:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block21

 Block14:
	add eax,8
	cmp eax,ebx
	je Block21

 Block15:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block17

 Block16:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block17:
	mov eax,dword ptr [esi+0x9C]
	mov dword ptr [esi+0x9C],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block19

 Block18:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block19:
	mov ecx,dword ptr [esi+0x9C]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push ebx
	push 0x64
	push 0x6E
	push 2
	push esi
	call edx
	push offset _S_UIBASICIMGBTCLOS__1
	lea ecx,[esp+0x2C]
	call ZXString<unsigned short>::AssignCStr
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],3
	cmp eax,ebx
	je Block22

 Block20:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block23

 Block21:
	xor edi,edi
	jmp Block17

 Block22:
	xor eax,eax

 Block23:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block32

 Block24:
	add eax,8
	cmp eax,ebx
	je Block32

 Block25:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block27

 Block26:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block27:
	mov eax,dword ptr [esi+0xA4]
	mov dword ptr [esi+0xA4],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block29

 Block28:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block29:
	mov ecx,dword ptr [esi+0xA4]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push ebx
	push 6
	push 0x8B
	push 2
	push esi
	call edx
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block31

 Block30:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block31:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 4

 Block32:
	xor edi,edi
	jmp Block27
}
}
// CWvsContext::SetNewFadeWnd
_SUB_EXCEPTION_HANDLER(5F9690)
__SUB_CLASS_THIS(005F9690, __thiscall, 8281,  CWvsContext, void, CUIFadeYesNo*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F9690
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [ecx+0x3F1C]
	lea edi,[ecx+0x3F1C]
	test eax,eax
	je Block2

 Block1:
	cmp dword ptr [eax-4],0x64
	jae Block30

 Block2:
	mov ebp,dword ptr [esp+0x2C]
	mov ebx,dword ptr [ebp+0xD8]
	cmp ebx,1
	je Block21

 Block3:
	cmp ebx,0xB
	je Block21

 Block4:
	xor esi,esi
	nop

 Block5:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block21

 Block6:
	cmp esi,dword ptr [eax-4]
	jae Block21

 Block7:
	mov ecx,dword ptr [eax+esi*8+4]
	lea eax,[eax+esi*8]
	cmp ebx,dword ptr [ecx+0xD8]
	jne Block16

 Block8:
	cmp ebx,7
	jne Block10

 Block9:
	movzx eax,word ptr [ecx+0x110]
	movzx ecx,word ptr [ebp+0x110]
	cmp ax,cx
	jmp Block15

 Block10:
	cmp ebx,0xD
	jne Block12

 Block11:
	push ebx
	mov eax,ecx
	call CUIFadeYesNo::GetRelatedValue
	push ebx
	mov ecx,ebp
	mov dword ptr [esp+0x18],eax
	call CUIFadeYesNo::GetRelatedValue
	mov ecx,dword ptr [esp+0x14]
	jmp Block14

 Block12:
	cmp ebx,0xF
	jne Block17

 Block13:
	push ebx
	mov eax,ecx
	call CUIFadeYesNo::GetRelatedValue
	push ebx
	mov ecx,ebp
	mov dword ptr [esp+0x18],eax
	call CUIFadeYesNo::GetRelatedValue
	mov ecx,dword ptr [esp+0x14]

 Block14:
	mov ebp,dword ptr [esp+0x2C]
	cmp ecx,eax

 Block15:
	je Block17

 Block16:
	inc esi
	jmp Block5

 Block17:
	mov ecx,dword ptr [edi]
	lea ebx,[esi*8]
	mov ecx,dword ptr [ebx+ecx+4]
	call CWnd::Destroy
	mov edx,dword ptr [edi]
	add edx,ebx
	push edx
	mov ecx,edi
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAt

 Block18:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block21

 Block19:
	cmp esi,dword ptr [eax-4]
	jae Block21

 Block20:
	mov ecx,dword ptr [eax+esi*8+4]
	call CUIFadeYesNo::MoveWndPosition
	inc esi
	jmp Block18

 Block21:
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	lea eax,[ebp+8]
	test eax,eax
	je Block31

 Block22:
	lea esi,[eax-8]
	mov dword ptr [esp+0x18],esi
	test esi,esi
	je Block24

 Block23:
	lea ecx,[esi+0xC]
	push ecx
	call ebx

 Block24:
	push 0xFFFFFFFF
	mov ecx,edi
	mov dword ptr [esp+0x28],0
	call ZArray<ZRef<CUIFadeYesNo>>::InsertBefore
	mov edi,eax
	test esi,esi
	je Block26

 Block25:
	lea edx,[esi+0xC]
	push edx
	call ebx

 Block26:
	cmp dword ptr [edi+4],0
	je Block28

 Block27:
	push 0
	mov ecx,edi
	call ZRef<CUIFadeYesNo>::_ReleaseRaw
	mov dword ptr [edi+4],0

 Block28:
	mov dword ptr [edi+4],esi
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test esi,esi
	je Block30

 Block29:
	push 0
	lea ecx,[esp+0x18]
	call ZRef<CUIFadeYesNo>::_ReleaseRaw

 Block30:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 4

 Block31:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	jmp Block24
}
}
// CUISkillDecEX::IsEnableSkill
__SUB_CLASS_THIS(004529D0, __thiscall, 68640,  CUISkillDecEX, int32_t, const SKILLENTRY*) {
__asm {

 Block0:
	sub esp,8
	push ebx
	push ebp
	push esi
	lea eax,[esp+0xC]
	mov ebx,ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push eax
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block5

 Block1:
	push edi
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x14],0
	pop edi

 Block5:
	mov esi,dword ptr [esp+0x18]
	mov ecx,dword ptr [esi]
	push ecx
	mov ecx,ebx
	call CUISkillDecEX::IsRequiredSkill
	test eax,eax
	je Block7

 Block6:
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	add esp,8
	ret 4

 Block7:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push edx
	push ebp
	call CSkillInfo::GetSkillLevel_0
	xor ecx,ecx
	test eax,eax
	setg cl
	pop esi
	pop ebp
	pop ebx
	mov eax,ecx
	add esp,8
	ret 4
}
}
// FamilyInfo::~FamilyInfo
_SUB_EXCEPTION_HANDLER(5D3F90)
__SUB_CLASS_THIS0(005D3F90, __thiscall, 8022,  FamilyInfo, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D3F90
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	lea ecx,[esi+0x20]
	mov dword ptr [esp+0x14],1
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	mov eax,dword ptr [esi+0x1C]
	mov byte ptr [esp+0x14],0
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov esi,dword ptr [esi+0x18]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block4

 Block3:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::StopPartySearch
__SUB_CLASS_THIS0(005D6B80, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CUIPartySearch>::ms_pInstance]
	test ecx,ecx
	je Block2

 Block1:
	pop esi
	jmp  CUIPartySearch::StopSearch

 Block2:
	lea ecx,[esi+0x3794]
	call PARTYSERACH_SETTING::Clear
	mov ecx,esi
	mov dword ptr [esi+0x37A8],0
	call CWvsContext::ClosePartySearch_Remocon
	mov ecx,esi
	pop esi
	jmp  CWvsContext::SendCancelPartyWanted
}
}
// CWvsContext::SendRequestSessionValue
_SUB_EXCEPTION_HANDLER(5E1A90)
__SUB_CLASS_THIS(005E1A90, __thiscall, 8272,  CWvsContext, void, NakedParam<ZXString<char>>, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E1A90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	push 0xBF
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x24],0
	call COutPacket::_ctor_1
	push ecx
	mov ecx,esp
	lea eax,[esp+0x2C]
	mov dword ptr [esp+8],esp
	push eax
	mov byte ptr [esp+0x28],1
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	lea ecx,[esp+0xC]
	call COutPacket::EncodeStr
	mov ecx,dword ptr [esp+0x2C]
	push ecx
	lea ecx,[esp+0xC]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+8]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0xC]
	mov byte ptr [esp+0x20],0
	call ZArray<unsigned char>::RemoveAll
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x20
	ret 8
}
}
// CWvsContext::OnNotifyLevelUp
_SUB_EXCEPTION_HANDLER(5E4A90)
__SUB_CLASS_THIS(005E4A90, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E4A90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x2C],ecx
	mov esi,dword ptr [esp+0x40]
	xor edi,edi
	mov ecx,esi
	mov dword ptr [esp+0x18],edi
	call CInPacket::Decode1
	mov bl,al
	mov ecx,esi
	mov byte ptr [esp+0x40],bl
	call CInPacket::Decode4
	mov ebp,eax
	lea eax,[esp+0x1C]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	mov dword ptr [esp+0x38],edi
	mov dword ptr [esp+0x14],edi
	mov byte ptr [esp+0x38],1
	cmp bl,2
	jne Block2

 Block1:
	lea ecx,[esp+0x28]
	push 0x1A3E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x38],bl
	lea ebx,[edi+1]
	jmp Block3

 Block2:
	lea edx,[esp+0x24]
	push 0x1A3C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x38],3
	mov ebx,2

 Block3:
	mov esi,dword ptr [eax]
	lea eax,[esp+0x20]
	push 0x1256
	push eax
	mov dword ptr [esp+0x20],ebx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x1C]
	mov eax,dword ptr [eax]
	push ebp
	push ecx
	push esi
	push eax
	lea edx,[esp+0x24]
	push edx
	mov dword ptr [esp+0x4C],4
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x34]
	add esp,0x14
	mov byte ptr [esp+0x38],3
	cmp eax,edi
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov dword ptr [esp+0x38],2
	test bl,2
	je Block8

 Block6:
	mov eax,dword ptr [esp+0x24]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x18],ebx
	cmp eax,edi
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov dword ptr [esp+0x38],1
	test bl,1
	je Block11

 Block9:
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov esi,dword ptr [esp+0x14]
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],edi
	je Block13

 Block12:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push edi
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],edi
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd

 Block13:
	cmp byte ptr [esp+0x40],0
	jne Block19

 Block14:
	mov eax,dword ptr [esp+0x2C]
	mov ecx,dword ptr [eax+0x20E4]
	push ecx
	add eax,0x20DC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp ebp,eax
	jle Block19

 Block15:
	lea edx,[esp+0x28]
	push 0x1257
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x1C]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0x44],5
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x34]
	add esp,0xC
	mov byte ptr [esp+0x38],1
	cmp eax,edi
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block17:
	mov esi,dword ptr [esp+0x14]
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],edi
	je Block19

 Block18:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x48],esp
	push edi
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],edi
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd

 Block19:
	mov byte ptr [esp+0x38],0
	cmp esi,edi
	je Block21

 Block20:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block21:
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	cmp eax,edi
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x28
	ret 4
}
}
// CTownPortalPool::OnTownPortalCreated
_SUB_EXCEPTION_HANDLER(362C00)
__SUB_CLASS_THIS(00362C00, __thiscall, 51715,  CTownPortalPool, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_362C00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x40
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x54]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x1C],esi
	mov eax,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov ecx,dword ptr [eax+8]
	lea edx,[esp+0x14]
	push edx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [esp+0x14]
	xor edi,edi
	cmp eax,edi
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	mov dword ptr [esp+0x30],edi
	mov ebx,dword ptr [esp+0x64]
	mov ecx,ebx
	mov dword ptr [esp+0x5C],edi
	call CInPacket::Decode1
	mov ecx,ebx
	movzx edi,al
	call CInPacket::Decode4
	mov ebp,eax
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	lea ecx,[esi+4]
	mov dword ptr [esp+0x1C],ebp
	call ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::GetAt
	test eax,eax
	je Block81

 Block3:
	mov esi,dword ptr [esp+0x30]
	push 1
	xor ebx,ebx
	mov dword ptr [esp+0x18],ebx
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea edx,[esp+0x1C]
	push edx
	sub eax,5
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	cmp edi,ebx
	jne Block5

 Block4:
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [esi+0x10]
	mov edi,eax
	mov dword ptr [esp+0x14],ecx

 Block5:
	cmp dword ptr [esi],ebx
	jne Block39

 Block6:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	mov dword ptr [eax],ebx
	lea ecx,[esp+0x3C]
	push 0xAC1
	push ecx
	mov byte ptr [esp+0x80],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],3
	push ebx
	push eax
	lea edx,[esp+0x40]
	push edx
	mov byte ptr [esp+0x84],4
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov ebp,dword ptr [esi+0x14]
	add esp,0x28
	cmp ebp,eax
	je Block11

 Block7:
	mov dword ptr [esi+0x14],eax
	cmp eax,ebx
	je Block9

 Block8:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block9:
	cmp ebp,ebx
	je Block11

 Block10:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	call ecx

 Block11:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,ebx
	je Block13

 Block12:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block13:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x5C],0
	cmp eax,ebx
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block15:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1E0
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],ebx
	lea eax,[esp+0x38]
	push 0xAC2
	push eax
	mov byte ptr [esp+0x80],6
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],7
	push ebx
	push eax
	lea ecx,[esp+0x44]
	push ecx
	mov ebp,8
	mov byte ptr [esp+0x84],8
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block20

 Block16:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block18

 Block17:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block18:
	cmp edi,ebx
	je Block20

 Block19:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block20:
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebx
	je Block22

 Block21:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block22:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x5C],0
	cmp eax,ebx
	je Block24

 Block23:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block24:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x44]
	push eax
	call edi
	lea ecx,[esp+0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block26

 Block25:
	push eax
	call _com_issue_error

 Block26:
	lea edx,[esp+0x34]
	mov bl,9
	push edx
	mov byte ptr [esp+0x60],bl
	call edi
	lea eax,[esp+0x34]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block28

 Block27:
	push eax
	call _com_issue_error

 Block28:
	mov ecx,dword ptr [esi+0x14]
	mov byte ptr [esp+0x5C],0xA
	test ecx,ecx
	jne Block30

 Block29:
	push 0x80004003
	call _com_issue_error

 Block30:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x38]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov byte ptr [esp+0x5C],bl
	mov ebx,dword ptr [ZImports::_VariantClear]
	cmp word ptr [esp+0x34],bp
	jne Block33

 Block31:
	mov eax,dword ptr [esp+0x3C]
	xor ecx,ecx
	mov word ptr [esp+0x34],cx
	test eax,eax
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea edx,[esp+0x34]
	push edx
	call ebx

 Block34:
	mov byte ptr [esp+0x5C],0
	cmp word ptr [esp+0x44],bp
	jne Block37

 Block35:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	mov dword ptr [esi],1
	jmp Block64

 Block37:
	lea ecx,[esp+0x44]
	push ecx
	call ebx

 Block38:
	mov dword ptr [esi],1
	jmp Block64

 Block39:
	mov eax,dword ptr [esi+0x18]
	cmp eax,ebx
	je Block41

 Block40:
	mov dword ptr [esi+0x18],ebx
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block41:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],ebx
	lea eax,[esp+0x38]
	push 0xAC3
	push eax
	mov byte ptr [esp+0x80],0xC
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],0xD
	push ebx
	push eax
	lea ecx,[esp+0x44]
	push ecx
	mov byte ptr [esp+0x84],0xE
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x14]
	add esp,0x28
	cmp edi,eax
	je Block46

 Block42:
	mov dword ptr [esi+0x14],eax
	cmp eax,ebx
	je Block44

 Block43:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block44:
	cmp edi,ebx
	je Block46

 Block45:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block46:
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebx
	je Block48

 Block47:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block48:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x5C],0
	cmp eax,ebx
	je Block50

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block50:
	call timeGetTime
	mov edi,dword ptr [ZImports::_VariantInit]
	mov dword ptr [esi+0x1C],eax
	lea eax,[esp+0x34]
	push eax
	call edi
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block52

 Block51:
	push eax
	call _com_issue_error

 Block52:
	lea edx,[esp+0x44]
	mov bl,0xF
	push edx
	mov byte ptr [esp+0x60],bl
	call edi
	lea eax,[esp+0x44]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block54

 Block53:
	push eax
	call _com_issue_error

 Block54:
	mov ecx,dword ptr [esi+0x14]
	mov byte ptr [esp+0x5C],0x10
	test ecx,ecx
	jne Block56

 Block55:
	push 0x80004003
	call _com_issue_error

 Block56:
	lea edx,[esp+0x34]
	push edx
	lea eax,[esp+0x48]
	push eax
	push 0
	call IWzGr2DLayer::Animate
	mov ebp,8
	mov byte ptr [esp+0x5C],bl
	mov ebx,dword ptr [ZImports::_VariantClear]
	cmp word ptr [esp+0x44],bp
	jne Block59

 Block57:
	mov eax,dword ptr [esp+0x4C]
	xor ecx,ecx
	mov word ptr [esp+0x44],cx
	test eax,eax
	je Block60

 Block58:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block60

 Block59:
	lea edx,[esp+0x44]
	push edx
	call ebx

 Block60:
	mov byte ptr [esp+0x5C],0
	cmp word ptr [esp+0x34],bp
	jne Block63

 Block61:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block64

 Block62:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block64

 Block63:
	lea ecx,[esp+0x34]
	push ecx
	call ebx

 Block64:
	mov ebp,dword ptr [esp+0x64]
	mov ecx,ebp
	call CInPacket::Decode2
	movsx edx,ax
	mov ecx,ebp
	mov dword ptr [esi+0xC],edx
	call CInPacket::Decode2
	cwde
	lea ecx,[esp+0x34]
	push ecx
	mov dword ptr [esi+0x10],eax
	call edi
	lea edx,[esp+0x34]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block66

 Block65:
	push eax
	call _com_issue_error

 Block66:
	lea eax,[esp+0x44]
	mov bl,0x11
	push eax
	mov byte ptr [esp+0x60],bl
	call edi
	lea ecx,[esp+0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block68

 Block67:
	push eax
	call _com_issue_error

 Block68:
	mov ecx,dword ptr [esi+0x14]
	mov byte ptr [esp+0x5C],0x12
	test ecx,ecx
	jne Block70

 Block69:
	push 0x80004003
	call _com_issue_error

 Block70:
	lea edx,[esp+0x34]
	push edx
	mov edx,dword ptr [esi+0x10]
	lea eax,[esp+0x48]
	push eax
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	call IWzVector2D::RelMove
	mov edi,8
	mov byte ptr [esp+0x5C],bl
	cmp word ptr [esp+0x44],di
	jne Block73

 Block71:
	mov eax,dword ptr [esp+0x4C]
	xor ecx,ecx
	mov word ptr [esp+0x44],cx
	test eax,eax
	je Block74

 Block72:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block74

 Block73:
	lea edx,[esp+0x44]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block74:
	mov byte ptr [esp+0x5C],0
	cmp word ptr [esp+0x34],di
	jne Block77

 Block75:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block78

 Block76:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block78

 Block77:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block78:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x60],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block136

 Block79:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block136

 Block80:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax
	jmp Block136

 Block81:
	lea ecx,[esp+0x2C]
	call ZRef<CTownPortalPool::TOWNPORTAL>::_Alloc
	mov esi,dword ptr [esp+0x30]
	mov dword ptr [esi],edi
	mov ecx,ebx
	mov dword ptr [esi+8],ebp
	call CInPacket::Decode2
	movsx ecx,ax
	mov dword ptr [esi+0xC],ecx
	mov ecx,ebx
	call CInPacket::Decode2
	movsx edx,ax
	mov dword ptr [esi+0x10],edx
	push 1
	mov dword ptr [esp+0x1C],0
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea eax,[esp+0x20]
	push eax
	sub ecx,5
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	test edi,edi
	jne Block83

 Block82:
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov edx,dword ptr [esi+0x10]
	mov edi,eax
	mov dword ptr [esp+0x18],edx

 Block83:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	push 0
	sub eax,0x3FFFB1DF
	cmp dword ptr [esi],0
	push 0xFF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	jne Block100

 Block84:
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push eax
	push ecx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],0
	lea edx,[esp+0x3C]
	push 0xAC3
	push edx
	mov byte ptr [esp+0x80],0x14
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],0x15
	push 0
	push eax
	lea eax,[esp+0x88]
	push eax
	mov byte ptr [esp+0x84],0x16
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x14]
	add esp,0x28
	cmp edi,eax
	je Block89

 Block85:
	mov dword ptr [esi+0x14],eax
	test eax,eax
	je Block87

 Block86:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block87:
	test edi,edi
	je Block89

 Block88:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block89:
	mov eax,dword ptr [esp+0x64]
	test eax,eax
	je Block91

 Block90:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block91:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x5C],0
	test eax,eax
	je Block93

 Block92:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block93:
	call timeGetTime
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x34]
	push ecx
	mov dword ptr [esi+0x1C],eax
	call edi
	lea edx,[esp+0x34]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block95

 Block94:
	push eax
	call _com_issue_error

 Block95:
	lea eax,[esp+0x44]
	mov bl,0x17
	push eax
	mov byte ptr [esp+0x60],bl
	call edi
	lea ecx,[esp+0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block97

 Block96:
	push eax
	call _com_issue_error

 Block97:
	mov ecx,dword ptr [esi+0x14]
	mov byte ptr [esp+0x5C],0x18
	test ecx,ecx
	jne Block99

 Block98:
	push 0x80004003
	call _com_issue_error

 Block99:
	lea edx,[esp+0x34]
	push edx
	lea eax,[esp+0x48]
	push eax
	push 0
	jmp Block125

 Block100:
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x3C]
	push 0xAC1
	push ecx
	mov byte ptr [esp+0x80],0x1A
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],0x1B
	push 0
	push eax
	lea edx,[esp+0x88]
	push edx
	mov byte ptr [esp+0x84],0x1C
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov ebp,dword ptr [esi+0x14]
	add esp,0x28
	cmp ebp,eax
	je Block105

 Block101:
	mov dword ptr [esi+0x14],eax
	test eax,eax
	je Block103

 Block102:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block103:
	test ebp,ebp
	je Block105

 Block104:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	call ecx

 Block105:
	mov eax,dword ptr [esp+0x64]
	test eax,eax
	je Block107

 Block106:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block107:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x5C],0
	test eax,eax
	je Block109

 Block108:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block109:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	push 0
	push 0xFF
	sub eax,0x3FFFB1E0
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],0
	lea eax,[esp+0x3C]
	push 0xAC2
	push eax
	mov byte ptr [esp+0x80],0x1E
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x78],0x1F
	push 0
	push eax
	lea ecx,[esp+0x88]
	push ecx
	mov byte ptr [esp+0x84],0x20
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block114

 Block110:
	mov dword ptr [esi+0x18],eax
	test eax,eax
	je Block112

 Block111:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block112:
	test edi,edi
	je Block114

 Block113:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block114:
	mov eax,dword ptr [esp+0x64]
	test eax,eax
	je Block116

 Block115:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block116:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x5C],0
	test eax,eax
	je Block118

 Block117:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block118:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x34]
	push eax
	call edi
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block120

 Block119:
	push eax
	call _com_issue_error

 Block120:
	lea edx,[esp+0x44]
	mov bl,0x21
	push edx
	mov byte ptr [esp+0x60],bl
	call edi
	lea eax,[esp+0x44]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block122

 Block121:
	push eax
	call _com_issue_error

 Block122:
	mov ecx,dword ptr [esi+0x14]
	mov byte ptr [esp+0x5C],0x22
	test ecx,ecx
	jne Block124

 Block123:
	push 0x80004003
	call _com_issue_error

 Block124:
	lea edx,[esp+0x34]
	push edx
	lea eax,[esp+0x48]
	push eax
	push 0x20

 Block125:
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x5C],bl
	mov ebx,dword ptr [ZImports::_VariantClear]
	cmp word ptr [esp+0x44],di
	jne Block128

 Block126:
	mov eax,dword ptr [esp+0x4C]
	xor ecx,ecx
	mov word ptr [esp+0x44],cx
	test eax,eax
	je Block129

 Block127:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block129

 Block128:
	lea edx,[esp+0x44]
	push edx
	call ebx

 Block129:
	mov byte ptr [esp+0x5C],0
	cmp word ptr [esp+0x34],di
	jne Block132

 Block130:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block133

 Block131:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block133

 Block132:
	lea ecx,[esp+0x34]
	push ecx
	call ebx

 Block133:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	sub esp,8
	mov eax,esp
	mov dword ptr [eax+4],esi
	add esi,0xFFFFFFF0
	lea edx,[esi+4]
	mov dword ptr [esp+0x6C],esp
	push edx
	call ebp
	mov ecx,dword ptr [esp+0x24]
	call CTownPortalPool::AddTownPortal
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x60],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block136

 Block134:
	push edi
	call ebp
	test esi,esi
	je Block136

 Block135:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block136:
	mov ecx,dword ptr [esp+0x54]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x4C
	ret 4
}
}
// CWvsContext::SetCharacterId
_SUB_EXCEPTION_HANDLER(5F61C0)
__SUB_CLASS_THIS(005F61C0, __thiscall, 8119,  CWvsContext, void, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F61C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x14],esi
	cmp dword ptr [esi+0x20B8],0
	jne Block12

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block12

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block12

 Block3:
	lea ecx,[esi+0x3538]
	call ForcedStat::IsForced
	test eax,eax
	je Block5

 Block4:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x58],esp
	push 0x388
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block12

 Block5:
	lea eax,[esp+0x1C]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0x1C]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [esi+0x95]
	push ecx
	lea edx,[esi+0x91]
	push edx
	call _ZtlSecureFuseHelper<short>::call
	add esp,8
	test ax,ax
	jle Block12

 Block6:
	mov eax,dword ptr [esi+0x35]
	push eax
	lea edi,[esi+0x33]
	push edi
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	lea ebp,[esi+0x39]
	push ebp
	mov bl,al
	call _ZtlSecureFuseHelper<short>::call
	add esp,0x10
	cmp bl,0x14
	jae Block8

 Block7:
	test dword ptr [esp+0x44],0x2800
	jne Block12

 Block8:
	mov edx,dword ptr [esi+0x35]
	push edx
	push edi
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov bl,al
	mov eax,dword ptr [esi+0x3D]
	push eax
	push ebp
	call _ZtlSecureFuseHelper<short>::call
	add esp,0x10
	cmp bl,0x14
	jb Block11

 Block9:
	test dword ptr [esp+0x44],0x2800
	je Block11

 Block10:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x14A5
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	jne Block12

 Block11:
	push 0x62
	lea ecx,[esp+0x28]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x3C],0
	call get_update_time
	push eax
	lea ecx,[esp+0x28]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x44]
	push edx
	lea ecx,[esp+0x28]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x24]
	push eax
	call CClientSocket::SendPacket
	mov esi,dword ptr [esp+0x14]
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x28]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block12:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret 4
}
}
// CUIStatChangeConfirm::Draw
_SUB_EXCEPTION_HANDLER(46B260)
__SUB_CLASS_THIS(0046B260, __thiscall, 68534,  CUIStatChangeConfirm, void, const tagRECT*) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_46B260
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x4C
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [ebp-0x2C],edi
	xor ebx,ebx
	push ebx
	call CWnd::Draw
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[ebp-0x58]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0x54]
	cmp eax,ebx
	je Block5

 Block1:
	lea ebx,[eax-0x10]
	lea eax,[ebx+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	lea eax,[ebx+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebx,ebx
	je Block4

 Block3:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebx
	call eax

 Block4:
	mov dword ptr [ebp-0x54],0
	xor ebx,ebx

 Block5:
	mov dword ptr [ebp-0x14],ebx
	mov dword ptr [ebp-4],ebx
	mov dword ptr [ebp-0x38],ebx
	lea ecx,[ebp-0x50]
	push ecx
	mov ecx,edi
	mov byte ptr [ebp-4],1
	call CWnd::GetCanvas
	mov dword ptr [ebp-0x4C],ebx
	lea edx,[ebp-0x34]
	push 0xBA4
	push edx
	mov byte ptr [ebp-4],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push 1
	push eax
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],4
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x34]
	add esp,0xC
	mov byte ptr [ebp-4],3
	cmp eax,ebx
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov ecx,dword ptr [edi+0xAC]
	push ebx
	push ecx
	lea edx,[ebp-0x34]
	push edx
	call GetStatCanvas
	mov eax,dword ptr [eax]
	add esp,0xC
	cmp eax,ebx
	je Block9

 Block8:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	mov dword ptr [ebp-0x4C],eax
	call edx

 Block9:
	mov eax,dword ptr [ebp-0x34]
	cmp eax,ebx
	je Block11

 Block10:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block11:
	mov eax,dword ptr [edi+0xAC]
	cmp eax,0x200
	ja Block20

 Block12:
	je Block19

 Block13:
	sub eax,0x40
	je Block18

 Block14:
	sub eax,0x40
	je Block17

 Block15:
	sub eax,0x80
	jne Block26

 Block16:
	mov eax,dword ptr [esi+0x55]
	push eax
	lea ecx,[esi+0x51]
	push ecx
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	inc edx
	push edx
	lea eax,[ebp-0x14]
	push offset _S_D__1
	push eax
	call ZXString<char>::Format
	add esp,0x14
	jmp Block26

 Block17:
	mov ecx,dword ptr [esi+0x4D]
	push ecx
	lea edx,[esi+0x49]
	push edx
	call _ZtlSecureFuseHelper<short>::call
	cwde
	inc eax
	push eax
	lea ecx,[ebp-0x14]
	push offset _S_D__1
	push ecx
	call ZXString<char>::Format
	add esp,0x14
	jmp Block26

 Block18:
	mov edx,dword ptr [esi+0x45]
	push edx
	lea eax,[esi+0x41]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	inc ecx
	push ecx
	lea edx,[ebp-0x14]
	push offset _S_D__1
	push edx
	call ZXString<char>::Format
	add esp,0x14
	jmp Block26

 Block19:
	mov eax,dword ptr [esi+0x5D]
	push eax
	lea ecx,[esi+0x59]
	push ecx
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	inc edx
	push edx
	lea eax,[ebp-0x14]
	push offset _S_D__1
	push eax
	call ZXString<char>::Format
	add esp,0x14
	jmp Block26

 Block20:
	cmp eax,0x800
	je Block23

 Block21:
	cmp eax,0x2000
	jne Block26

 Block22:
	mov eax,0x20
	call __chkstk
	mov ecx,dword ptr [esi+0x8D]
	mov ebx,esp
	push ecx
	lea edx,[esi+0x85]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	mov dword ptr [ebp-0x34],eax
	mov eax,dword ptr [esi+0x3D]
	push eax
	lea edi,[esi+0x39]
	push edi
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	push ecx
	call IncMPVal
	add eax,dword ptr [ebp-0x34]
	push 0xA
	push ebx
	push eax
	call _itoa
	push eax
	lea edx,[ebp-0x14]
	push edx
	call ZXString<char>::Format
	add esp,0x28
	lea eax,[ebp-0x30]
	push 0xBA4
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebx,eax
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	push edi
	mov byte ptr [ebp-4],6
	call _ZtlSecureFuseHelper<short>::call
	mov ebx,dword ptr [ebx]
	movzx eax,ax
	movsx edx,ax
	push edx
	call IncMPVal
	push eax
	lea eax,[ebp-0x38]
	push ebx
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x30]
	jmp Block24

 Block23:
	mov eax,0x20
	call __chkstk
	mov ecx,dword ptr [esi+0x75]
	mov ebx,esp
	push ecx
	lea edx,[esi+0x6D]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	mov dword ptr [ebp-0x34],eax
	mov eax,dword ptr [esi+0x3D]
	push eax
	lea edi,[esi+0x39]
	push edi
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	push ecx
	call IncHPVal
	add eax,dword ptr [ebp-0x34]
	push 0xA
	push ebx
	push eax
	call _itoa
	push eax
	lea edx,[ebp-0x14]
	push edx
	call ZXString<char>::Format
	add esp,0x28
	lea eax,[ebp-0x18]
	push 0xBA4
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebx,eax
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	push edi
	mov byte ptr [ebp-4],5
	call _ZtlSecureFuseHelper<short>::call
	mov ebx,dword ptr [ebx]
	movzx eax,ax
	movsx edx,ax
	push edx
	call IncHPVal
	push eax
	lea eax,[ebp-0x38]
	push ebx
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x18]

 Block24:
	add esp,0x18
	mov byte ptr [ebp-4],3
	test eax,eax
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block26:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block28

 Block27:
	push eax
	call _com_issue_error

 Block28:
	mov eax,dword ptr [ebp-0x14]
	push 0
	push 0
	push 0xFFFFFFFF
	push eax
	push 0
	mov bl,7
	push 0
	mov byte ptr [ebp-4],bl
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edx,dword ptr [ebp-0x14]
	mov edi,esp
	lea ecx,[ebp-0x28]
	push ecx
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push edx
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x30],esp
	mov ecx,esp
	push edi
	call _xbstr_t::_ctor_1
	lea eax,[ebp-0x18]
	push 0x22
	push eax
	mov byte ptr [ebp-4],8
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],9
	test ecx,ecx
	jne Block30

 Block29:
	push 0x80004003
	call _com_issue_error

 Block30:
	mov byte ptr [ebp-4],0xA
	call IWzFont::CalcTextWidth
	mov dword ptr [ebp-0x30],eax
	mov eax,dword ptr [ebp-0x18]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block32

 Block31:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block32:
	cmp word ptr [ebp-0x28],8
	mov byte ptr [ebp-4],3
	jne Block35

 Block33:
	xor eax,eax
	mov word ptr [ebp-0x28],ax
	mov eax,dword ptr [ebp-0x20]
	test eax,eax
	je Block36

 Block34:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block36

 Block35:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block36:
	mov edx,3
	mov ecx,0xFF
	mov word ptr [ebp-0x28],dx
	mov dword ptr [ebp-0x20],ecx
	mov edi,dword ptr [ebp-0x50]
	mov byte ptr [ebp-4],0xB
	test edi,edi
	jne Block38

 Block37:
	push 0x80004003
	call _com_issue_error

 Block38:
	mov ebx,dword ptr [ebp-0x28]
	mov edx,dword ptr [edi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebx
	mov ebx,dword ptr [ebp-0x24]
	mov dword ptr [eax+4],ebx
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x1C]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x4C]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0x38
	push 9
	push edi
	call ecx
	test eax,eax
	jge Block40

 Block39:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block40:
	cmp word ptr [ebp-0x28],8
	mov byte ptr [ebp-4],3
	jne Block43

 Block41:
	mov eax,dword ptr [ebp-0x20]
	xor edx,edx
	mov word ptr [ebp-0x28],dx
	test eax,eax
	je Block44

 Block42:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block44

 Block43:
	lea eax,[ebp-0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block44:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x48]
	push ecx
	call ebx
	lea edx,[ebp-0x48]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	lea eax,[ebp-0x28]
	push eax
	mov byte ptr [ebp-4],0xC
	call ebx
	lea ecx,[ebp-0x28]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block48

 Block47:
	push eax
	call _com_issue_error

 Block48:
	lea edx,[ebp-0x48]
	push edx
	lea eax,[ebp-0x28]
	push eax
	lea ecx,[ebp-0x18]
	push 0x22
	push ecx
	mov byte ptr [ebp-4],0xD
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	mov edx,dword ptr [ebp-0x14]
	push eax
	push ecx
	mov dword ptr [ebp-0x34],esp
	mov ecx,esp
	mov bl,0xE
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	push 0x3B
	mov byte ptr [ebp-4],0xF
	push 0x29
	mov ecx,edi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x18]
	mov byte ptr [ebp-4],0xD
	test eax,eax
	je Block50

 Block49:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block50:
	mov ebx,8
	mov byte ptr [ebp-4],0xC
	cmp word ptr [ebp-0x28],bx
	jne Block53

 Block51:
	xor eax,eax
	mov word ptr [ebp-0x28],ax
	mov eax,dword ptr [ebp-0x20]
	test eax,eax
	je Block54

 Block52:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block54

 Block53:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block54:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x48],bx
	jne Block57

 Block55:
	mov eax,dword ptr [ebp-0x40]
	xor edx,edx
	mov word ptr [ebp-0x48],dx
	test eax,eax
	je Block58

 Block56:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block58

 Block57:
	lea eax,[ebp-0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block58:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x28]
	push ecx
	call ebx
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block60

 Block59:
	push eax
	call _com_issue_error

 Block60:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0x10
	call ebx
	lea ecx,[ebp-0x48]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block62

 Block61:
	push eax
	call _com_issue_error

 Block62:
	lea edx,[ebp-0x28]
	push edx
	lea eax,[ebp-0x48]
	push eax
	lea ecx,[ebp-0x18]
	push 0x23
	push ecx
	mov byte ptr [ebp-4],0x11
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	mov edx,dword ptr [ebp-0x38]
	push eax
	push ecx
	mov dword ptr [ebp-0x34],esp
	mov ecx,esp
	mov bl,0x12
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [ebp-0x30]
	push 0x3B
	add eax,0x2D
	mov byte ptr [ebp-4],0x13
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x18]
	mov byte ptr [ebp-4],0x11
	test eax,eax
	je Block64

 Block63:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block64:
	mov edi,8
	mov byte ptr [ebp-4],0x10
	cmp word ptr [ebp-0x48],di
	jne Block67

 Block65:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block68

 Block66:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block68

 Block67:
	lea ecx,[ebp-0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block68:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x28],di
	jne Block71

 Block69:
	mov eax,dword ptr [ebp-0x20]
	xor edx,edx
	mov word ptr [ebp-0x28],dx
	test eax,eax
	je Block72

 Block70:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block72

 Block71:
	lea eax,[ebp-0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block72:
	lea ecx,[ebp-0x18]
	push 0xBA3
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push 1
	push eax
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x14
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x18]
	add esp,0xC
	mov byte ptr [ebp-4],3
	test eax,eax
	je Block74

 Block73:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block74:
	mov ebx,dword ptr [ebp-0x2C]
	mov eax,dword ptr [ebx+0xA8]
	push 0
	push eax
	lea ecx,[ebp-0x2C]
	push ecx
	call GetStatCanvas
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x4C]
	add esp,0xC
	cmp ecx,eax
	je Block79

 Block75:
	mov edi,ecx
	mov dword ptr [ebp-0x4C],eax
	test eax,eax
	je Block77

 Block76:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block77:
	test edi,edi
	je Block79

 Block78:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block79:
	mov eax,dword ptr [ebp-0x2C]
	test eax,eax
	je Block81

 Block80:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block81:
	mov eax,dword ptr [ebx+0xA8]
	cmp eax,0x200
	ja Block90

 Block82:
	je Block89

 Block83:
	sub eax,0x40
	je Block88

 Block84:
	sub eax,0x40
	je Block87

 Block85:
	sub eax,0x80
	jne Block96

 Block86:
	mov eax,dword ptr [esi+0x55]
	push eax
	add esi,0x51
	push esi
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	dec ecx
	push ecx
	lea edx,[ebp-0x14]
	push offset _S_D__1
	push edx
	call ZXString<char>::Format
	add esp,0x14
	jmp Block96

 Block87:
	mov eax,dword ptr [esi+0x4D]
	push eax
	add esi,0x49
	push esi
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	dec ecx
	push ecx
	lea edx,[ebp-0x14]
	push offset _S_D__1
	push edx
	call ZXString<char>::Format
	add esp,0x14
	jmp Block96

 Block88:
	mov eax,dword ptr [esi+0x45]
	push eax
	add esi,0x41
	push esi
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	dec ecx
	push ecx
	lea edx,[ebp-0x14]
	push offset _S_D__1
	push edx
	call ZXString<char>::Format
	add esp,0x14
	jmp Block96

 Block89:
	mov eax,dword ptr [esi+0x5D]
	push eax
	add esi,0x59
	push esi
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	dec ecx
	push ecx
	lea edx,[ebp-0x14]
	push offset _S_D__1
	push edx
	call ZXString<char>::Format
	add esp,0x14
	jmp Block96

 Block90:
	cmp eax,0x800
	je Block93

 Block91:
	cmp eax,0x2000
	jne Block96

 Block92:
	mov eax,0x20
	call __chkstk
	mov eax,dword ptr [esi+0x8D]
	mov dword ptr [ebp-0x2C],esp
	push eax
	lea ecx,[esi+0x85]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [esi+0x3D]
	push edx
	lea ebx,[esi+0x39]
	push ebx
	mov edi,eax
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	cwde
	push eax
	call DecMPVal
	mov ecx,dword ptr [ebp-0x2C]
	push 0xA
	sub edi,eax
	push ecx
	push edi
	call _itoa
	push eax
	lea edx,[ebp-0x14]
	push edx
	call ZXString<char>::Format
	add esp,0x28
	lea eax,[ebp-0x18]
	push 0xBA3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,eax
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	push ebx
	mov byte ptr [ebp-4],0x16
	call _ZtlSecureFuseHelper<short>::call
	mov edi,dword ptr [edi]
	movzx eax,ax
	movsx edx,ax
	push edx
	call DecMPVal
	push eax
	lea eax,[ebp-0x38]
	push edi
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x18]
	jmp Block94

 Block93:
	mov eax,0x20
	call __chkstk
	mov ecx,dword ptr [esi+0x75]
	mov dword ptr [ebp-0x2C],esp
	push ecx
	lea edx,[esi+0x6D]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	mov edi,eax
	mov eax,dword ptr [esi+0x3D]
	push eax
	lea ebx,[esi+0x39]
	push ebx
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	push ecx
	call DecHPVal
	mov edx,dword ptr [ebp-0x2C]
	push 0xA
	sub edi,eax
	push edx
	push edi
	call _itoa
	push eax
	lea eax,[ebp-0x14]
	push eax
	call ZXString<char>::Format
	add esp,0x28
	lea ecx,[ebp-0x30]
	push 0xBA3
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,eax
	mov edx,dword ptr [esi+0x3D]
	push edx
	push ebx
	mov byte ptr [ebp-4],0x15
	call _ZtlSecureFuseHelper<short>::call
	mov edi,dword ptr [edi]
	movzx eax,ax
	cwde
	push eax
	call DecHPVal
	push eax
	lea ecx,[ebp-0x38]
	push edi
	push ecx
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x30]

 Block94:
	add esp,0x18
	mov byte ptr [ebp-4],3
	test eax,eax
	je Block96

 Block95:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block96:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x48]
	push edx
	call edi
	lea eax,[ebp-0x48]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block98

 Block97:
	push eax
	call _com_issue_error

 Block98:
	mov ebx,dword ptr [ebp-0x14]
	push 0
	push 0
	push 0xFFFFFFFF
	push ebx
	push 0
	push 0
	mov byte ptr [ebp-4],0x17
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov esi,esp
	lea ecx,[ebp-0x48]
	push ecx
	push 0x3FFFFFFF
	push esi
	push 0xFFFFFFFF
	push ebx
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x18],esp
	mov ecx,esp
	push esi
	call _xbstr_t::_ctor_1
	lea edx,[ebp-0x2C]
	push 0x1C
	push edx
	mov byte ptr [ebp-4],0x18
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x19
	test ecx,ecx
	jne Block100

 Block99:
	push 0x80004003
	call _com_issue_error

 Block100:
	mov byte ptr [ebp-4],0x1A
	call IWzFont::CalcTextWidth
	mov dword ptr [ebp-0x18],eax
	mov eax,dword ptr [ebp-0x2C]
	mov byte ptr [ebp-4],0x17
	test eax,eax
	je Block102

 Block101:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block102:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],3
	jne Block105

 Block103:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block106

 Block104:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block106

 Block105:
	lea ecx,[ebp-0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block106:
	mov edx,3
	mov ecx,0xFF
	mov word ptr [ebp-0x28],dx
	mov dword ptr [ebp-0x20],ecx
	mov ebx,dword ptr [ebp-0x28]
	mov esi,dword ptr [ebp-0x50]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebx
	mov ebx,dword ptr [ebp-0x24]
	mov dword ptr [eax+4],ebx
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x1C]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x4C]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0x4A
	push 9
	push esi
	mov byte ptr [ebp-4],0x1B
	call ecx
	test eax,eax
	jge Block108

 Block107:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block108:
	cmp word ptr [ebp-0x28],8
	mov byte ptr [ebp-4],3
	jne Block111

 Block109:
	mov eax,dword ptr [ebp-0x20]
	xor edx,edx
	mov word ptr [ebp-0x28],dx
	test eax,eax
	je Block112

 Block110:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block112

 Block111:
	lea eax,[ebp-0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block112:
	lea ecx,[ebp-0x28]
	push ecx
	call edi
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block114

 Block113:
	push eax
	call _com_issue_error

 Block114:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0x1C
	call edi
	lea ecx,[ebp-0x48]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block116

 Block115:
	push eax
	call _com_issue_error

 Block116:
	lea edx,[ebp-0x28]
	push edx
	lea eax,[ebp-0x48]
	push eax
	lea ecx,[ebp-0x2C]
	push 0x1C
	push ecx
	mov byte ptr [ebp-4],0x1D
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	mov edx,dword ptr [ebp-0x14]
	push eax
	push ecx
	mov dword ptr [ebp-0x30],esp
	mov ecx,esp
	mov bl,0x1E
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	push 0x4D
	mov byte ptr [ebp-4],0x1F
	push 0x29
	mov ecx,esi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x2C]
	mov byte ptr [ebp-4],0x1D
	test eax,eax
	je Block118

 Block117:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block118:
	mov ebx,8
	mov byte ptr [ebp-4],0x1C
	cmp word ptr [ebp-0x48],bx
	jne Block121

 Block119:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block122

 Block120:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block122

 Block121:
	lea ecx,[ebp-0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block122:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x28],bx
	jne Block125

 Block123:
	mov eax,dword ptr [ebp-0x20]
	xor edx,edx
	mov word ptr [ebp-0x28],dx
	test eax,eax
	je Block126

 Block124:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block126

 Block125:
	lea eax,[ebp-0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block126:
	lea ecx,[ebp-0x28]
	push ecx
	call edi
	lea edx,[ebp-0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block128

 Block127:
	push eax
	call _com_issue_error

 Block128:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0x20
	call edi
	lea ecx,[ebp-0x48]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block130

 Block129:
	push eax
	call _com_issue_error

 Block130:
	lea edx,[ebp-0x28]
	push edx
	lea eax,[ebp-0x48]
	push eax
	lea ecx,[ebp-0x30]
	push 0x1D
	mov bl,0x21
	push ecx
	mov byte ptr [ebp-4],bl
	call get_basic_font
	add esp,8
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp-0x38]
	push eax
	push ecx
	mov dword ptr [ebp-0x2C],esp
	mov ecx,esp
	push edi
	mov byte ptr [ebp-4],0x22
	call _xbstr_t::_ctor_0
	mov edx,dword ptr [ebp-0x18]
	push 0x4D
	add edx,0x2D
	mov byte ptr [ebp-4],0x23
	push edx
	mov ecx,esi
	mov byte ptr [ebp-4],0x22
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [ebp-0x30]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block132

 Block131:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block132:
	mov ebx,8
	mov byte ptr [ebp-4],0x20
	cmp word ptr [ebp-0x48],bx
	jne Block135

 Block133:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block136

 Block134:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block136

 Block135:
	lea ecx,[ebp-0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block136:
	mov byte ptr [ebp-4],3
	cmp word ptr [ebp-0x28],bx
	jne Block139

 Block137:
	mov eax,dword ptr [ebp-0x20]
	xor edx,edx
	mov word ptr [ebp-0x28],dx
	test eax,eax
	je Block140

 Block138:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block140

 Block139:
	lea eax,[ebp-0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block140:
	mov eax,dword ptr [ebp-0x4C]
	mov byte ptr [ebp-4],2
	test eax,eax
	je Block142

 Block141:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block142:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	mov byte ptr [ebp-4],1
	call ecx
	mov byte ptr [ebp-4],0
	test edi,edi
	je Block144

 Block143:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block144:
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block146

 Block145:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block146:
	lea esp,[ebp-0x68]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::ChangeBlockOption
__SUB_CLASS_THIS(00612570, __thiscall, 8209,  CWvsContext, int32_t, unsigned long, long, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esi+0x3788]
	push eax
	call CWvsContext::CFriend::FindIndex_0
	test eax,eax
	jl Block7

 Block1:
	mov ecx,dword ptr [esp+0xC]
	sub ecx,0
	je Block4

 Block2:
	sub ecx,1
	jne Block7

 Block3:
	mov ecx,dword ptr [esi+0x3788]
	mov edx,dword ptr [ecx+0xC]
	jmp Block5

 Block4:
	mov ecx,dword ptr [esi+0x3788]
	mov edx,dword ptr [ecx+8]

 Block5:
	mov ecx,dword ptr [esp+0x10]
	lea eax,[edx+eax*4]
	xor edx,edx
	cmp dword ptr [eax],edx
	sete dl
	cmp edx,ecx
	jne Block7

 Block6:
	mov dword ptr [eax],ecx
	mov eax,1
	pop esi
	ret 0xC

 Block7:
	xor eax,eax
	pop esi
	ret 0xC
}
}
// CWvsContext::GetRealEquipSlot
__SUB_CLASS_THIS(004617D0, __thiscall, 8135,  CWvsContext, ZRef<GW_ItemSlotBase>*, ZRef<GW_ItemSlotBase>*, long) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [esp+0xC]
	mov eax,dword ptr [ecx+eax*8+0x3874]
	push esi
	mov esi,dword ptr [esp+0xC]
	mov dword ptr [esp+4],0
	mov dword ptr [esi+4],eax
	test eax,eax
	je Block2

 Block1:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block2:
	mov eax,esi
	pop esi
	pop ecx
	ret 8
}
}
// CWvsContext::GetPartySearch_Remocon_Layer
__SUB_CLASS_THIS0(004170D0, __thiscall, 8166,  CWvsContext, _x_com_ptr<IWzGr2DLayer>) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [ecx+0x37C0]
	push esi
	mov esi,dword ptr [esp+0xC]
	mov dword ptr [esp+4],0
	mov dword ptr [esi],eax
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block2:
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CTownPortalPool::RemoveTownPortal
_SUB_EXCEPTION_HANDLER(361880)
__SUB_CLASS_THIS(00361880, __thiscall, 51719,  CTownPortalPool, void, NakedParam<ZRef<CTownPortalPool::TOWNPORTAL>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_361880
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [eax+4]
	push ecx
	lea ecx,[esi+0x1C]
	mov dword ptr [esp+0x18],0
	call ZList<ZRef<CTownPortalPool::TOWNPORTAL>>::RemoveAt
	mov edx,dword ptr [esp+0x20]
	add edx,8
	push edx
	lea ecx,[esi+4]
	call ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::RemoveKey
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CWvsContext::GuildNPCSay
_SUB_EXCEPTION_HANDLER(60BD90)
__SUB_CLASS_THIS(0060BD90, __thiscall, 8178,  CWvsContext, void, ZArray<ZXString<char> >&, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_60BD90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	xor ebx,ebx
	test byte ptr [_D__S3__2],1
	jne Block2

 Block1:
	or dword ptr [_D__S3__2],1
	// TODO: 	push offset `dynamic atexit destructor for '`TSimpleSingleton<CFontContainer>::GetInstance'::`2'::singleton''+368
	mov dword ptr [_D_PPREVIOUSDLG+4],ebx
	call _atexit
	add esp,4

 Block2:
	mov ecx,dword ptr [_D_PPREVIOUSDLG+4]
	xor ebp,ebp
	cmp ecx,ebx
	je Block5

 Block3:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	push 1
	call edx
	cmp dword ptr [_D_PPREVIOUSDLG+4],ebx
	je Block5

 Block4:
	push ebx
	mov ecx,offset _D_PPREVIOUSDLG
	call ZRef<CUtilDlgEx>::_ReleaseRaw
	mov dword ptr [_D_PPREVIOUSDLG+4],ebx

 Block5:
	mov edi,dword ptr [esp+0x30]
	mov ecx,edi
	call ZArray<ZXString<char>>::GetCount
	cmp ebp,eax
	jae Block37

 Block6:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x28],ebx
	cmp eax,ebx
	je Block17

 Block7:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	cmp eax,ebx
	je Block17

 Block8:
	add eax,8
	cmp eax,ebx
	je Block17

 Block9:
	lea esi,[eax-8]
	mov dword ptr [esp+0x1C],esi
	cmp esi,ebx
	je Block11

 Block10:
	lea eax,[esi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block11:
	mov dword ptr [esp+0x28],1
	cmp esi,ebx
	je Block13

 Block12:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block13:
	mov eax,dword ptr [_D_PPREVIOUSDLG+4]
	cmp eax,ebx
	je Block22

 Block14:
	add eax,0xC
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block22

 Block15:
	mov eax,dword ptr [_D_PPREVIOUSDLG+4]
	cmp eax,ebx
	je Block18

 Block16:
	add eax,8
	jmp Block19

 Block17:
	xor esi,esi
	mov dword ptr [esp+0x1C],esi
	jmp Block11

 Block18:
	xor eax,eax

 Block19:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [_D_PPREVIOUSDLG+4]
	cmp eax,ebx
	je Block22

 Block20:
	lea ecx,[eax+8]
	cmp ecx,ebx
	je Block22

 Block21:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block22:
	push ebx
	mov dword ptr [_D_PPREVIOUSDLG+4],esi
	mov ecx,dword ptr [edi]
	push ebx
	push ecx
	lea eax,[ecx+ebp*4]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push eax
	mov dword ptr [ecx],ebx
	call ZXString<char>::op_assign
	mov edx,dword ptr [esp+0x40]
	push edx
	push ebx
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	mov ecx,edi
	call ZArray<ZXString<char>>::GetCount
	dec eax
	cmp ebp,eax
	sbb eax,eax
	xor ecx,ecx
	neg eax
	cmp ebp,ebx
	setg cl
	push eax
	push ecx
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_TEXT
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	mov edi,eax
	mov eax,dword ptr [_D_PPREVIOUSDLG+4]
	cmp eax,ebx
	je Block31

 Block23:
	add eax,0xC
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block30

 Block24:
	mov eax,dword ptr [_D_PPREVIOUSDLG+4]
	cmp eax,ebx
	je Block26

 Block25:
	add eax,8
	jmp Block27

 Block26:
	xor eax,eax

 Block27:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [_D_PPREVIOUSDLG+4]
	cmp eax,ebx
	je Block30

 Block28:
	lea ecx,[eax+8]
	cmp ecx,ebx
	je Block30

 Block29:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block30:
	mov dword ptr [_D_PPREVIOUSDLG+4],ebx

 Block31:
	cmp edi,0x2000
	jg Block39

 Block32:
	je Block38

 Block33:
	mov eax,edi
	sub eax,1
	je Block40

 Block34:
	sub eax,1
	jne Block41

 Block35:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	cmp esi,ebx
	je Block37

 Block36:
	push ebx
	lea ecx,[esp+0x1C]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block37:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 8

 Block38:
	dec ebp
	jmp Block41

 Block39:
	cmp edi,0x2001
	jne Block41

 Block40:
	inc ebp

 Block41:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	cmp esi,ebx
	je Block46

 Block42:
	add esi,8
	lea ecx,[esi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block45

 Block43:
	lea edx,[esi+4]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block45

 Block44:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block45:
	mov dword ptr [esp+0x1C],ebx

 Block46:
	cmp ebp,ebx
	jge Block5

 Block47:
	jmp Block37
}
}
// CWvsContext::SendSkillLearnItemUseRequest
_SUB_EXCEPTION_HANDLER(5D65E0)
__SUB_CLASS_THIS(005D65E0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D65E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x30]
	mov eax,0x68DB8BAD
	imul edi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xE4
	je Block2

 Block1:
	push edi
	call is_masterybook_item
	add esp,4
	test eax,eax
	je Block6

 Block2:
	cmp dword ptr [esi+0x20B8],0
	jne Block6

 Block3:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block6

 Block4:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block6

 Block5:
	push 0x58
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block6:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 8
}
}
// CWvsContext::SendLotteryItemUseRequest
_SUB_EXCEPTION_HANDLER(5D6C50)
__SUB_CLASS_THIS(005D6C50, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D6C50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block4

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block4

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block4

 Block3:
	push 0x7C
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	mov edx,dword ptr [esp+0x28]
	push edx
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x24],0
	call COutPacket::Encode2
	mov eax,dword ptr [esp+0x2C]
	push eax
	lea ecx,[esp+0xC]
	call COutPacket::Encode4
	lea ecx,[esp+8]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0xC]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block4:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 8
}
}
// CWvsContext::OnWebBoardAuthkeyUpdate
_SUB_EXCEPTION_HANDLER(5E40D0)
__SUB_CLASS_THIS(005E40D0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E40D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov edi,dword ptr [ebp+8]
	mov ecx,edi
	call CInPacket::Decode1
	movzx esi,al
	test esi,esi
	ja Block3

 Block1:
	lea eax,[ebp-0x14]
	push eax
	mov ecx,edi
	call CInPacket::DecodeStr
	mov ecx,dword ptr [ebp-0x14]
	push 0
	push 0
	push 0xFFFFFFFF
	push ecx
	push 0
	push 0
	mov dword ptr [ebp-4],0
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edx,dword ptr [ebp-0x14]
	mov edi,esp
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push edx
	push 0
	push 0
	call MultiByteToWideChar
	push edi
	lea ecx,[ebx+esi*4+0x382C]
	call ZXString<unsigned short>::AssignCStr
	call timeGetTime
	mov dword ptr [ebx+esi*4+0x3830],eax
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block3:
	lea esp,[ebp-0x24]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::SendGatherItemRequest
_SUB_EXCEPTION_HANDLER(5D5B70)
__SUB_CLASS_THIS(005D5B70, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D5B70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x2C]
	lea eax,[edi-1]
	cmp eax,4
	ja Block5

 Block1:
	cmp dword ptr [esi+0x20B8],0
	jne Block5

 Block2:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block5

 Block3:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block5

 Block4:
	push 0x4B
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0xC]
	push edx
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block5:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 4
}
}
// CWvsContext::OnScriptProgressMessage
_SUB_EXCEPTION_HANDLER(5E5110)
__SUB_CLASS_THIS(005E5110, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E5110
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [esp+0x1C]
	lea eax,[esp+0x1C]
	push eax
	call CInPacket::DecodeStr
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x14],0
	test eax,eax
	je Block3

 Block1:
	cmp byte ptr [eax],0
	je Block3

 Block2:
	push ecx
	mov ecx,esp
	lea edx,[esp+0x20]
	mov dword ptr [esp+0xC],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esi+0x3F24]
	call CNoticeQuestProgress::OnQuestProgressUpdated_Script
	mov eax,dword ptr [esp+0x1C]

 Block3:
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret 4
}
}
// CUISkillDec::CreateSkillDecDlg
__SUB_CLASS_THIS0(005CC7F0, __thiscall, 68553,  CUISkillDec, void) {
__asm {

 Block0:
	push 1
	push 0
	push 1
	push offset _S_UIUIWINDOW2IMGRE__3
	call CDialog::CreateDlg_2
	ret
}
}
// CUISkillChangeConfirm::OnCreate
_SUB_EXCEPTION_HANDLER(454EF0)
__SUB_CLASS_THIS(00454EF0, __thiscall, 68689,  CUISkillChangeConfirm, void, void*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_454EF0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebp,ebp
	push ebp
	push ebp
	lea edi,[esi+0xB8]
	push esi
	mov ecx,edi
	call CLayoutMan::Init
	push ebp
	push ebp
	push ebp
	push 1
	push offset _S_UIUIWINDOW2IMGRE__22
	lea eax,[esp+0x28]
	push eax
	mov ecx,edi
	call CLayoutMan::AddButton
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x3C],ebp
	cmp eax,ebp
	je Block20

 Block1:
	add eax,8
	cmp eax,ebp
	je Block20

 Block2:
	lea ebx,[eax-8]
	cmp ebx,ebp
	je Block4

 Block3:
	lea ecx,[ebx+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block4:
	mov eax,dword ptr [esi+0x98]
	mov dword ptr [esi+0x98],ebx
	mov dword ptr [esp+0x20],eax
	cmp eax,ebp
	je Block6

 Block5:
	push ebp
	lea ecx,[esp+0x20]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block6:
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	cmp dword ptr [esp+0x18],ebp
	je Block8

 Block7:
	push ebp
	lea ecx,[esp+0x18]
	call ZRef<CCtrlOriginButton>::_ReleaseRaw

 Block8:
	push ebp
	push ebp
	push ebp
	push 2
	push offset _S_UIUIWINDOW2IMGRE__21
	lea edx,[esp+0x28]
	push edx
	mov ecx,edi
	call CLayoutMan::AddButton
	mov eax,dword ptr [eax+4]
	mov ebx,1
	mov dword ptr [esp+0x3C],ebx
	cmp eax,ebp
	je Block21

 Block9:
	add eax,8
	cmp eax,ebp
	je Block21

 Block10:
	lea edi,[eax-8]
	cmp edi,ebp
	je Block12

 Block11:
	lea eax,[edi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block12:
	mov eax,dword ptr [esi+0xA0]
	mov dword ptr [esi+0xA0],edi
	mov dword ptr [esp+0x20],eax
	cmp eax,ebp
	je Block14

 Block13:
	push ebp
	lea ecx,[esp+0x20]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block14:
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	cmp dword ptr [esp+0x18],ebp
	je Block16

 Block15:
	push ebp
	lea ecx,[esp+0x18]
	call ZRef<CCtrlOriginButton>::_ReleaseRaw

 Block16:
	mov dword ptr [esp+0x30],ebp
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x28],ebp
	mov dword ptr [esp+0x2C],ebp
	lea ecx,[esp+0x14]
	push 0x1962
	push ecx
	mov dword ptr [esp+0x44],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	push eax
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x40],3
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x3C],2
	cmp eax,ebp
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block18:
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x3C],4
	cmp eax,ebp
	je Block22

 Block19:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block23

 Block20:
	xor ebx,ebx
	jmp Block4

 Block21:
	xor edi,edi
	jmp Block12

 Block22:
	xor eax,eax

 Block23:
	mov byte ptr [esp+0x3C],2
	cmp eax,ebp
	je Block32

 Block24:
	add eax,8
	cmp eax,ebp
	je Block32

 Block25:
	lea edi,[eax-8]
	cmp edi,ebp
	je Block27

 Block26:
	lea edx,[edi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block27:
	mov eax,dword ptr [esi+0xA8]
	mov dword ptr [esi+0xA8],edi
	mov dword ptr [esp+0x20],eax
	cmp eax,ebp
	je Block29

 Block28:
	push ebp
	lea ecx,[esp+0x20]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block29:
	mov ecx,dword ptr [esi+0xA8]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x28]
	lea edx,[esp+0x24]
	push edx
	push ebp
	push 6
	push 0x8A
	push 2
	push esi
	call eax
	mov eax,dword ptr [esp+0x30]
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	cmp eax,ebp
	je Block31

 Block30:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block31:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret 4

 Block32:
	xor edi,edi
	jmp Block27
}
}
// CWvsContext::GetGuildMarkCanvas
_SUB_EXCEPTION_HANDLER(60C2C0)
__SUB_CLASS_THIS(0060C2C0, __thiscall, 8183,  CWvsContext, _x_com_ptr<IWzCanvas>*, _x_com_ptr<IWzCanvas>*, uint16_t, unsigned char, uint16_t, unsigned char) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x58]
	sub esp,0x58
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_60C2C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x50
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x54],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	xor edi,edi
	mov dword ptr [ebp+0x20],edi
	mov eax,dword ptr [ebp+0x60]
	mov dword ptr [eax],edi
	mov eax,dword ptr [ebp+0x64]
	mov esi,1
	mov dword ptr [ebp+0x20],esi
	cmp ax,di
	jne Block2

 Block1:
	movzx eax,word ptr [ecx+0x37E3]

 Block2:
	mov bl,byte ptr [ebp+0x68]
	test bl,bl
	jne Block4

 Block3:
	mov bl,byte ptr [ecx+0x37E5]

 Block4:
	cmp word ptr [ebp+0x6C],di
	jne Block6

 Block5:
	movzx edx,word ptr [ecx+0x37E0]
	mov dword ptr [ebp+0x6C],edx

 Block6:
	cmp byte ptr [ebp+0x70],0
	jne Block8

 Block7:
	mov cl,byte ptr [ecx+0x37E2]
	mov byte ptr [ebp+0x70],cl

 Block8:
	mov dword ptr [ebp+0x40],edi
	mov dword ptr [ebp-4],esi
	mov dword ptr [ebp+0x48],edi
	movzx esi,ax
	mov eax,0x10624DD3
	imul esi
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	lea eax,[edx+eax-2]
	mov byte ptr [ebp-4],2
	cmp eax,7
	ja Block17

 Block9:
	cmp EAX, 0
je Block10
cmp EAX, 1
je Block11
cmp EAX, 2
je Block12
cmp EAX, 3
je Block13
cmp EAX, 4
je Block17
cmp EAX, 5
je Block17
cmp EAX, 6
je Block17
cmp EAX, 7
je Block14


 Block10:
	lea ecx,[ebp+0x50]
	push 0xD27
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x48]
	mov byte ptr [ebp-4],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp+0x50]
	jmp Block15

 Block11:
	lea edx,[ebp+0x24]
	push 0x1A5A
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x48]
	mov byte ptr [ebp-4],4
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp+0x24]
	jmp Block15

 Block12:
	lea eax,[ebp+0x28]
	push 0xD28
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x48]
	mov byte ptr [ebp-4],5
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp+0x28]
	jmp Block15

 Block13:
	lea ecx,[ebp+0x2C]
	push 0xD29
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x48]
	mov byte ptr [ebp-4],6
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp+0x2C]
	jmp Block15

 Block14:
	lea edx,[ebp+0x4C]
	push 0x1A38
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x48]
	mov byte ptr [ebp-4],7
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp+0x4C]

 Block15:
	mov byte ptr [ebp-4],2
	cmp eax,edi
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block17:
	lea eax,[ebp+0x50]
	push 0xD2A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [ebp+0x48]
	mov eax,dword ptr [eax]
	movzx ecx,bl
	push ecx
	push esi
	push edx
	push eax
	lea eax,[ebp+0x40]
	push eax
	mov byte ptr [ebp-4],8
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x50]
	add esp,0x14
	mov byte ptr [ebp-4],2
	cmp eax,edi
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block19:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp]
	push ecx
	call esi
	lea edx,[ebp]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block21

 Block20:
	push eax
	call _com_issue_error

 Block21:
	lea eax,[ebp-0x1C]
	push eax
	mov byte ptr [ebp-4],9
	call esi
	lea ecx,[ebp-0x1C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block23

 Block22:
	push eax
	call _com_issue_error

 Block23:
	mov edi,dword ptr [ebp+0x40]
	push 0
	push 0
	push 0xFFFFFFFF
	push edi
	push 0
	mov bl,0xA
	push 0
	mov byte ptr [ebp-4],bl
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov esi,esp
	push 0
	push 0
	lea edx,[ebp]
	push edx
	lea eax,[ebp-0x1C]
	push eax
	push 0x3FFFFFFF
	push esi
	push 0xFFFFFFFF
	push edi
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp+0x50],esp
	mov ecx,esp
	push esi
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0xB
	jne Block25

 Block24:
	push 0x80004003
	call _com_issue_error

 Block25:
	lea ecx,[ebp-0x4C]
	push ecx
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xC
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x44]
	mov dword ptr [ebp+0x44],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block28

 Block26:
	cmp eax,0x80004002
	je Block28

 Block27:
	push eax
	call _com_issue_error

 Block28:
	mov esi,dword ptr [ZImports::_VariantClear]
	mov edi,8
	mov byte ptr [ebp-4],0xE
	cmp word ptr [ebp-0x4C],di
	jne Block31

 Block29:
	mov eax,dword ptr [ebp-0x44]
	xor edx,edx
	mov word ptr [ebp-0x4C],dx
	test eax,eax
	je Block32

 Block30:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block32

 Block31:
	lea eax,[ebp-0x4C]
	push eax
	call esi

 Block32:
	mov byte ptr [ebp-4],0xF
	cmp word ptr [ebp-0x1C],di
	jne Block35

 Block33:
	mov eax,dword ptr [ebp-0x14]
	xor ecx,ecx
	mov word ptr [ebp-0x1C],cx
	test eax,eax
	je Block36

 Block34:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block36

 Block35:
	lea edx,[ebp-0x1C]
	push edx
	call esi

 Block36:
	mov byte ptr [ebp-4],0x10
	cmp word ptr [ebp],di
	jne Block39

 Block37:
	xor eax,eax
	mov word ptr [ebp],ax
	mov eax,dword ptr [ebp+8]
	test eax,eax
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block40

 Block39:
	lea ecx,[ebp]
	push ecx
	call esi

 Block40:
	lea edx,[ebp+0x50]
	push 0xD2B
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,byte ptr [ebp+0x70]
	movzx edx,word ptr [ebp+0x6C]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[ebp+0x40]
	push eax
	mov byte ptr [ebp-4],0x11
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x50]
	add esp,0x10
	mov byte ptr [ebp-4],0x10
	test eax,eax
	je Block42

 Block41:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block42:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x2C]
	push ecx
	call esi
	lea edx,[ebp-0x2C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block44

 Block43:
	push eax
	call _com_issue_error

 Block44:
	lea eax,[ebp-0x3C]
	push eax
	mov byte ptr [ebp-4],0x12
	call esi
	lea ecx,[ebp-0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	mov edi,dword ptr [ebp+0x40]
	push 0
	push 0
	push 0xFFFFFFFF
	push edi
	push 0
	mov bl,0x13
	push 0
	mov byte ptr [ebp-4],bl
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov esi,esp
	push 0
	push 0
	lea edx,[ebp-0x2C]
	push edx
	lea eax,[ebp-0x3C]
	push eax
	push 0x3FFFFFFF
	push esi
	push 0xFFFFFFFF
	push edi
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp+0x50],esp
	mov ecx,esp
	push esi
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0x14
	jne Block48

 Block47:
	push 0x80004003
	call _com_issue_error

 Block48:
	lea ecx,[ebp-0x5C]
	push ecx
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x15
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x4C]
	mov dword ptr [ebp+0x4C],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block51

 Block49:
	cmp eax,0x80004002
	je Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	mov esi,8
	mov byte ptr [ebp-4],0x17
	cmp word ptr [ebp-0x5C],si
	jne Block54

 Block52:
	mov eax,dword ptr [ebp-0x54]
	xor edx,edx
	mov word ptr [ebp-0x5C],dx
	test eax,eax
	je Block55

 Block53:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block54:
	lea eax,[ebp-0x5C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block55:
	mov byte ptr [ebp-4],0x18
	cmp word ptr [ebp-0x3C],si
	jne Block58

 Block56:
	mov eax,dword ptr [ebp-0x34]
	xor ecx,ecx
	mov word ptr [ebp-0x3C],cx
	test eax,eax
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea edx,[ebp-0x3C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block59:
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp-0x2C],si
	jne Block62

 Block60:
	xor eax,eax
	mov word ptr [ebp-0x2C],ax
	mov eax,dword ptr [ebp-0x24]
	test eax,eax
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea ecx,[ebp-0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block63:
	cmp dword ptr [ebp+0x44],0
	sete al
	test al,al
	sete al
	test al,al
	je Block105

 Block64:
	cmp dword ptr [ebp+0x4C],0
	sete al
	test al,al
	sete al
	test al,al
	je Block105

 Block65:
	lea edx,[ebp+0x50]
	push 0x3D0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edi,dword ptr [ebp+0x60]
	mov eax,dword ptr [eax]
	push 0
	push edi
	push eax
	mov byte ptr [ebp-4],0x1A
	call PcCreate_IWzCanvas
	mov eax,dword ptr [ebp+0x50]
	add esp,0xC
	mov byte ptr [ebp-4],0x19
	test eax,eax
	je Block67

 Block66:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block67:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp+0x30]
	push eax
	call esi
	lea ecx,[ebp+0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block69

 Block68:
	push eax
	call _com_issue_error

 Block69:
	lea edx,[ebp+0x10]
	mov bl,0x1B
	push edx
	mov byte ptr [ebp-4],bl
	call esi
	lea eax,[ebp+0x10]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block71

 Block70:
	push eax
	call _com_issue_error

 Block71:
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x1C
	test ecx,ecx
	jne Block73

 Block72:
	push 0x80004003
	call _com_issue_error

 Block73:
	lea edx,[ebp+0x30]
	push edx
	lea eax,[ebp+0x10]
	push eax
	push 0x11
	push 0x11
	call IWzCanvas::Create
	mov esi,8
	mov byte ptr [ebp-4],bl
	cmp word ptr [ebp+0x10],si
	jne Block76

 Block74:
	mov eax,dword ptr [ebp+0x18]
	xor ecx,ecx
	mov word ptr [ebp+0x10],cx
	test eax,eax
	je Block77

 Block75:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block77

 Block76:
	lea edx,[ebp+0x10]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block77:
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp+0x30],si
	jne Block80

 Block78:
	xor eax,eax
	mov word ptr [ebp+0x30],ax
	mov eax,dword ptr [ebp+0x38]
	test eax,eax
	je Block81

 Block79:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block81

 Block80:
	lea ecx,[ebp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block81:
	mov edx,3
	mov ebx,0xFF
	mov word ptr [ebp+0x30],dx
	mov dword ptr [ebp+0x38],ebx
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x1D
	test ecx,ecx
	jne Block83

 Block82:
	push 0x80004003
	call _com_issue_error

 Block83:
	mov esi,dword ptr [ebp+0x4C]
	lea eax,[ebp+0x30]
	push eax
	push esi
	push 0
	push 0
	call IWzCanvas::Copy
	cmp word ptr [ebp+0x30],8
	mov byte ptr [ebp-4],0x19
	jne Block86

 Block84:
	mov eax,dword ptr [ebp+0x38]
	xor ecx,ecx
	mov word ptr [ebp+0x30],cx
	test eax,eax
	je Block87

 Block85:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block87

 Block86:
	lea edx,[ebp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block87:
	mov eax,3
	mov word ptr [ebp+0x30],ax
	mov dword ptr [ebp+0x38],ebx
	mov byte ptr [ebp-4],0x1E
	test esi,esi
	jne Block89

 Block88:
	push 0x80004003
	call _com_issue_error

 Block89:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x48]
	lea edx,[ebp+0x2C]
	push edx
	push esi
	mov dword ptr [ebp+0x2C],0
	call eax
	test eax,eax
	jge Block91

 Block90:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block91:
	mov esi,dword ptr [ebp+0x44]
	mov edi,dword ptr [ebp+0x2C]
	test esi,esi
	jne Block93

 Block92:
	push 0x80004003
	call _com_issue_error

 Block93:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x48]
	lea edx,[ebp+0x28]
	push edx
	push esi
	mov dword ptr [ebp+0x28],0
	call eax
	test eax,eax
	jge Block95

 Block94:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block95:
	mov esi,dword ptr [ebp+0x4C]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x40]
	mov ebx,dword ptr [ebp+0x28]
	lea edx,[ebp+0x24]
	push edx
	push esi
	mov dword ptr [ebp+0x24],0
	call eax
	test eax,eax
	jge Block97

 Block96:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block97:
	mov eax,dword ptr [ebp+0x44]
	mov ecx,dword ptr [eax]
	mov esi,dword ptr [ebp+0x24]
	lea edx,[ebp+0x50]
	push edx
	push eax
	mov eax,dword ptr [ecx+0x40]
	mov dword ptr [ebp+0x50],0
	call eax
	test eax,eax
	jge Block99

 Block98:
	mov ecx,dword ptr [ebp+0x44]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ecx
	push eax
	call _com_issue_errorex

 Block99:
	mov edx,dword ptr [ebp+0x60]
	mov ecx,dword ptr [edx]
	test ecx,ecx
	jne Block101

 Block100:
	push 0x80004003
	call _com_issue_error

 Block101:
	mov edx,dword ptr [ebp+0x44]
	sub esi,dword ptr [ebp+0x50]
	lea eax,[ebp+0x30]
	push eax
	push edx
	sub edi,ebx
	shr edi,1
	push edi
	shr esi,1
	push esi
	call IWzCanvas::Copy
	cmp word ptr [ebp+0x30],8
	mov byte ptr [ebp-4],0x19
	jne Block104

 Block102:
	xor eax,eax
	mov word ptr [ebp+0x30],ax
	mov eax,dword ptr [ebp+0x38]
	test eax,eax
	je Block105

 Block103:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block105

 Block104:
	lea ecx,[ebp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block105:
	mov eax,dword ptr [ebp+0x4C]
	mov byte ptr [ebp-4],0x10
	test eax,eax
	je Block107

 Block106:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block107:
	mov eax,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],2
	test eax,eax
	je Block109

 Block108:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block109:
	mov eax,dword ptr [ebp+0x48]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block111

 Block110:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block111:
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block113

 Block112:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block113:
	mov eax,dword ptr [ebp+0x60]
	lea esp,[ebp-0x6C]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x54]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x58
	mov esp,ebp
	pop ebp
	ret 0x14
}
}
// CWvsContext::SendSitOnPortableChairRequest
_SUB_EXCEPTION_HANDLER(5DA100)
__SUB_CLASS_THIS(005DA100, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DA100
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	cmp dword ptr [ebx+0x20B8],0
	jne Block29

 Block1:
	mov eax,dword ptr [ebx+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block29

 Block2:
	call get_update_time
	sub eax,dword ptr [ebx+0x20BC]
	cmp eax,0x1F4
	jl Block29

 Block3:
	mov esi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edx,dword ptr [esi+0x3BA0]
	push edx
	lea eax,[esi+0x3B98]
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	jne Block29

 Block4:
	cmp dword ptr [esi+0x3AD4],eax
	jne Block29

 Block5:
	cmp dword ptr [esi+0x63C],eax
	jg Block29

 Block6:
	mov ecx,esi
	call CUser::IsStand
	test eax,eax
	je Block29

 Block7:
	lea edi,[esi+0x88]
	mov ecx,edi
	call CAvatar::IsMonsterMorphed
	test eax,eax
	jne Block28

 Block8:
	mov ecx,edi
	call CAvatar::IsHideMorphed
	test eax,eax
	jne Block28

 Block9:
	mov ecx,edi
	call CAvatar::IsAttackableMorphed
	test eax,eax
	jne Block28

 Block10:
	push eax
	mov ecx,esi
	call CUserLocal::CheckRidingVehicle
	test eax,eax
	jne Block29

 Block11:
	mov eax,dword ptr [esi+0x5E4]
	mov edi,dword ptr [esp+0x3C]
	test eax,eax
	je Block13

 Block12:
	push edi
	call get_different_height_chair_type
	add esp,4
	cmp eax,1
	jge Block29

 Block13:
	call get_field
	test eax,eax
	je Block26

 Block14:
	mov edx,dword ptr [eax]
	mov ecx,eax
	mov eax,dword ptr [edx+0x1C]
	call eax
	cmp eax,0x3D
	je Block26

 Block15:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov ebp,dword ptr [ebx+0x20CC]
	push edi
	call CItemInfo::GetRequiredLEV
	mov ecx,ebp
	mov dword ptr [esp+0x3C],eax
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx ecx,al
	mov eax,dword ptr [esp+0x3C]
	cmp eax,ecx
	jg Block29

 Block16:
	push 0x2E
	lea ecx,[esp+0x1C]
	call COutPacket::_ctor_1
	push edi
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x34],1
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x18]
	push edx
	call CClientSocket::SendPacket
	push 1
	mov ecx,ebx
	call CWvsContext::SetExclRequestSent
	push edi
	mov ecx,esi
	call CUserLocal::SitOnPortableChair
	push edi
	mov ecx,esi
	call CUser::SetActivePortableChair
	lea eax,[esp+0x14]
	push eax
	mov ecx,esi
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	xor ebx,ebx
	cmp eax,ebx
	je Block18

 Block17:
	lea edi,[eax-0xC]
	jmp Block19

 Block18:
	xor edi,edi

 Block19:
	mov eax,dword ptr [esp+0x14]
	cmp eax,ebx
	je Block21

 Block20:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block21:
	push 0xA
	mov ecx,edi
	call CVecCtrl::SetMovePathAttribute
	mov eax,dword ptr [esi+0x2E9C]
	cmp eax,ebx
	je Block25

 Block22:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push eax
	call CUserPool::GetUser
	cmp eax,ebx
	je Block24

 Block23:
	mov dword ptr [eax+0x2E98],ebx

 Block24:
	mov dword ptr [esi+0x2E9C],ebx

 Block25:
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	jmp Block29

 Block26:
	lea eax,[esp+0x3C]
	push 0x10BF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x38],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x44]
	add esp,8
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test eax,eax
	je Block29

 Block27:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block29

 Block28:
	mov ecx,ebx
	call CWvsContext::AddChatMorphedMsg

 Block29:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 8
}
}
// CUIStatChange::CUIStatChange
_SUB_EXCEPTION_HANDLER(5DFD80)
__SUB_CLASS_THIS0(005DFD80, __thiscall, 68504,  CUIStatChange, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DFD80
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	call CDialog::_ctor_default
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push offset ZRef<CCtrlButton>::_ctor_default
	push 6
	push 8
	lea eax,[esi+0x90]
	xor edi,edi
	push eax
	mov dword ptr [esp+0x2C],edi
	int 3// TODO: 	mov dword ptr [esi],offset CUIStatChange::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUIStatChange::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUIStatChange::`vftable'{for `ZRefCounted'}
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0xC4],edi
	mov dword ptr [esi+0xD0],edi
	mov dword ptr [esi+0xD4],edi
	mov dword ptr [esi+0xD8],edi
	mov dword ptr [esi+0xDC],edi
	mov dword ptr [esi+0xE0],edi
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::LoadPartySearch_Remocon_Layer
_SUB_EXCEPTION_HANDLER(5E1B50)
__SUB_CLASS_THIS0(005E1B50, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E1B50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xBC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xD0]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x3C],ebx
	xor edi,edi
	cmp dword ptr [ebx+0x37C0],edi
	sete al
	test al,al
	sete al
	test al,al
	jne Block527

 Block1:
	cmp dword ptr [ebx+0x37C4],edi
	sete al
	test al,al
	sete al
	test al,al
	jne Block527

 Block2:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x50]
	push eax
	call ebp
	lea ecx,[esp+0x50]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	mov edx,3
	mov dword ptr [esp+0xD8],edi
	mov word ptr [esp+0x40],dx
	mov dword ptr [esp+0x48],edi
	mov ecx,dword ptr [_D_G_GR]
	mov byte ptr [esp+0xD8],1
	cmp ecx,edi
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	lea eax,[esp+0x50]
	push eax
	lea edx,[esp+0x44]
	push edx
	push 0xC006156C
	push edi
	push edi
	push edi
	push edi
	lea eax,[esp+0x30]
	push eax
	call IWzGr2D::CreateLayer
	mov eax,dword ptr [eax]
	mov esi,dword ptr [ebx+0x37C0]
	cmp esi,eax
	je Block11

 Block7:
	mov dword ptr [ebx+0x37C0],eax
	cmp eax,edi
	je Block9

 Block8:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block9:
	cmp esi,edi
	je Block11

 Block10:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block11:
	mov eax,dword ptr [esp+0x14]
	cmp eax,edi
	je Block13

 Block12:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block13:
	mov ebx,dword ptr [ZImports::_VariantClear]
	mov esi,8
	mov byte ptr [esp+0xD8],0
	cmp word ptr [esp+0x40],si
	jne Block16

 Block14:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	cmp eax,edi
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea edx,[esp+0x40]
	push edx
	call ebx

 Block17:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x50],si
	jne Block20

 Block18:
	xor eax,eax
	mov word ptr [esp+0x50],ax
	mov eax,dword ptr [esp+0x58]
	cmp eax,edi
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea ecx,[esp+0x50]
	push ecx
	call ebx

 Block21:
	lea edx,[esp+0x18]
	push edx
	call ebp
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block23

 Block22:
	push eax
	call _com_issue_error

 Block23:
	lea ecx,[esp+0x28]
	push ecx
	mov dword ptr [esp+0xDC],2
	call ebp
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block25

 Block24:
	push eax
	call _com_issue_error

 Block25:
	lea eax,[esp+0x70]
	push eax
	mov byte ptr [esp+0xDC],3
	call ebp
	lea ecx,[esp+0x70]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block27

 Block26:
	push eax
	call _com_issue_error

 Block27:
	lea edx,[esp+0x60]
	push edx
	mov byte ptr [esp+0xDC],4
	call ebp
	lea eax,[esp+0x60]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block29

 Block28:
	push eax
	call _com_issue_error

 Block29:
	mov ecx,3
	mov word ptr [esp+0x80],cx
	mov dword ptr [esp+0x88],0xC8
	lea edx,[esp+0x40]
	push edx
	mov byte ptr [esp+0xDC],6
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block31

 Block30:
	push eax
	call _com_issue_error

 Block31:
	lea ecx,[esp+0x50]
	push ecx
	mov byte ptr [esp+0xDC],7
	call ebp
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block33

 Block32:
	push eax
	call _com_issue_error

 Block33:
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x78]
	push edx
	lea eax,[esp+0x6C]
	push eax
	lea ecx,[esp+0x90]
	push ecx
	push edi
	push edi
	lea edx,[esp+0x5C]
	push edx
	lea eax,[esp+0x70]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push offset _S_UIUIWINDOWIMGPAR__5
	mov byte ptr [esp+0x104],8
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x100],9
	cmp dword ptr [_D_G_RM],edi
	jne Block35

 Block34:
	push 0x80004003
	call _com_issue_error

 Block35:
	lea ecx,[esp+0xB8]
	push ecx
	mov byte ptr [esp+0x104],8
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov bl,0xA
	mov ecx,eax
	mov byte ptr [esp+0xF4],bl
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x50],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block38

 Block36:
	cmp eax,0x80004002
	je Block38

 Block37:
	push eax
	call _com_issue_error

 Block38:
	mov edx,dword ptr [esp+0x50]
	mov ecx,dword ptr [edx+0x37C0]
	mov byte ptr [esp+0xEC],0xB
	cmp ecx,edi
	jne Block40

 Block39:
	push 0x80004003
	call _com_issue_error

 Block40:
	mov esi,dword ptr [esp+0x4C]
	push esi
	lea eax,[esp+0xB8]
	push eax
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0xA0],8
	jne Block43

 Block41:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	cmp eax,edi
	je Block44

 Block42:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block44

 Block43:
	lea edx,[esp+0xA0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block44:
	mov byte ptr [esp+0xD8],bl
	cmp esi,edi
	je Block46

 Block45:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block46:
	cmp word ptr [esp+0x90],8
	mov byte ptr [esp+0xD8],8
	jne Block49

 Block47:
	mov eax,dword ptr [esp+0x98]
	xor edx,edx
	mov word ptr [esp+0x90],dx
	cmp eax,edi
	je Block50

 Block48:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block50

 Block49:
	lea eax,[esp+0x90]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block50:
	mov ebx,8
	mov byte ptr [esp+0xD8],7
	cmp word ptr [esp+0x50],bx
	jne Block57

 Block51:
	mov eax,dword ptr [esp+0x58]
	xor ecx,ecx
	mov word ptr [esp+0x50],cx
	cmp eax,edi
	je Block53

 Block52:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block53:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block54:
	mov byte ptr [esp+0xD8],6
	cmp word ptr [esp+0x40],bx
	jne Block58

 Block55:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	cmp eax,edi
	je Block59

 Block56:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block57:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0x50]
	push edx
	call esi
	jmp Block54

 Block58:
	lea ecx,[esp+0x40]
	push ecx
	call esi

 Block59:
	mov byte ptr [esp+0xD8],5
	cmp word ptr [esp+0x80],bx
	jne Block62

 Block60:
	mov eax,dword ptr [esp+0x88]
	xor edx,edx
	mov word ptr [esp+0x80],dx
	cmp eax,edi
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea eax,[esp+0x80]
	push eax
	call esi

 Block63:
	mov byte ptr [esp+0xD8],4
	cmp word ptr [esp+0x60],bx
	jne Block66

 Block64:
	mov eax,dword ptr [esp+0x68]
	xor ecx,ecx
	mov word ptr [esp+0x60],cx
	cmp eax,edi
	je Block67

 Block65:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block67

 Block66:
	lea edx,[esp+0x60]
	push edx
	call esi

 Block67:
	mov byte ptr [esp+0xD8],3
	cmp word ptr [esp+0x70],bx
	jne Block70

 Block68:
	xor eax,eax
	mov word ptr [esp+0x70],ax
	mov eax,dword ptr [esp+0x78]
	cmp eax,edi
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea ecx,[esp+0x70]
	push ecx
	call esi

 Block71:
	mov byte ptr [esp+0xD8],2
	cmp word ptr [esp+0x28],bx
	jne Block74

 Block72:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	cmp eax,edi
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea eax,[esp+0x28]
	push eax
	call esi

 Block75:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x18],bx
	jne Block78

 Block76:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	cmp eax,edi
	je Block79

 Block77:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block79

 Block78:
	lea edx,[esp+0x18]
	push edx
	call esi

 Block79:
	lea eax,[esp+0x40]
	push eax
	call ebp
	lea ecx,[esp+0x40]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block81

 Block80:
	push eax
	call _com_issue_error

 Block81:
	lea edx,[esp+0x50]
	push edx
	mov dword ptr [esp+0xDC],0xC
	call ebp
	lea eax,[esp+0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block83

 Block82:
	push eax
	call _com_issue_error

 Block83:
	lea ecx,[esp+0x80]
	push ecx
	mov byte ptr [esp+0xDC],0xD
	call ebp
	lea edx,[esp+0x80]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block85

 Block84:
	push eax
	call _com_issue_error

 Block85:
	lea eax,[esp+0x60]
	push eax
	mov byte ptr [esp+0xDC],0xE
	call ebp
	lea ecx,[esp+0x60]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block87

 Block86:
	push eax
	call _com_issue_error

 Block87:
	mov edx,3
	mov word ptr [esp+0x70],dx
	mov dword ptr [esp+0x78],0xC8
	lea eax,[esp+0x28]
	push eax
	mov byte ptr [esp+0xDC],0x10
	call ebp
	lea ecx,[esp+0x28]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block89

 Block88:
	push eax
	call _com_issue_error

 Block89:
	lea edx,[esp+0x18]
	push edx
	mov byte ptr [esp+0xDC],0x11
	call ebp
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block91

 Block90:
	push eax
	call _com_issue_error

 Block91:
	lea ecx,[esp+0x40]
	push ecx
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x88]
	push eax
	lea ecx,[esp+0x6C]
	push ecx
	lea edx,[esp+0x80]
	push edx
	push edi
	push edi
	lea eax,[esp+0x44]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push offset _S_UIUIWINDOWIMGPAR__4
	mov byte ptr [esp+0x104],0x12
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x100],0x13
	cmp dword ptr [_D_G_RM],edi
	jne Block93

 Block92:
	push 0x80004003
	call _com_issue_error

 Block93:
	lea edx,[esp+0xC8]
	mov byte ptr [esp+0x100],0x12
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov bl,0x14
	mov ecx,eax
	mov byte ptr [esp+0xF4],bl
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x50],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block96

 Block94:
	cmp eax,0x80004002
	je Block96

 Block95:
	push eax
	call _com_issue_error

 Block96:
	mov eax,dword ptr [esp+0x50]
	mov ecx,dword ptr [eax+0x37C0]
	mov byte ptr [esp+0xEC],0x15
	cmp ecx,edi
	jne Block98

 Block97:
	push 0x80004003
	call _com_issue_error

 Block98:
	mov esi,dword ptr [esp+0x4C]
	push esi
	lea edx,[esp+0xA8]
	push edx
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x90],8
	jne Block101

 Block99:
	xor eax,eax
	mov word ptr [esp+0x90],ax
	mov eax,dword ptr [esp+0x98]
	cmp eax,edi
	je Block102

 Block100:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block102

 Block101:
	lea ecx,[esp+0x90]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block102:
	mov byte ptr [esp+0xD8],bl
	cmp esi,edi
	je Block104

 Block103:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block104:
	cmp word ptr [esp+0xA0],8
	mov byte ptr [esp+0xD8],0x12
	jne Block107

 Block105:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	cmp eax,edi
	je Block108

 Block106:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block108

 Block107:
	lea edx,[esp+0xA0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block108:
	mov ebx,8
	mov byte ptr [esp+0xD8],0x11
	cmp word ptr [esp+0x18],bx
	jne Block115

 Block109:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block111

 Block110:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block111:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block112:
	mov byte ptr [esp+0xD8],0x10
	cmp word ptr [esp+0x28],bx
	jne Block116

 Block113:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	cmp eax,edi
	je Block117

 Block114:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block117

 Block115:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea ecx,[esp+0x18]
	push ecx
	call esi
	jmp Block112

 Block116:
	lea eax,[esp+0x28]
	push eax
	call esi

 Block117:
	mov byte ptr [esp+0xD8],0xF
	cmp word ptr [esp+0x70],bx
	jne Block120

 Block118:
	mov eax,dword ptr [esp+0x78]
	xor ecx,ecx
	mov word ptr [esp+0x70],cx
	cmp eax,edi
	je Block121

 Block119:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block121

 Block120:
	lea edx,[esp+0x70]
	push edx
	call esi

 Block121:
	mov byte ptr [esp+0xD8],0xE
	cmp word ptr [esp+0x60],bx
	jne Block124

 Block122:
	xor eax,eax
	mov word ptr [esp+0x60],ax
	mov eax,dword ptr [esp+0x68]
	cmp eax,edi
	je Block125

 Block123:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block125

 Block124:
	lea ecx,[esp+0x60]
	push ecx
	call esi

 Block125:
	mov byte ptr [esp+0xD8],0xD
	cmp word ptr [esp+0x80],bx
	jne Block128

 Block126:
	mov eax,dword ptr [esp+0x88]
	xor edx,edx
	mov word ptr [esp+0x80],dx
	cmp eax,edi
	je Block129

 Block127:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block129

 Block128:
	lea eax,[esp+0x80]
	push eax
	call esi

 Block129:
	mov byte ptr [esp+0xD8],0xC
	cmp word ptr [esp+0x50],bx
	jne Block132

 Block130:
	mov eax,dword ptr [esp+0x58]
	xor ecx,ecx
	mov word ptr [esp+0x50],cx
	cmp eax,edi
	je Block133

 Block131:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block133

 Block132:
	lea edx,[esp+0x50]
	push edx
	call esi

 Block133:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x40],bx
	jne Block136

 Block134:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	cmp eax,edi
	je Block137

 Block135:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block137

 Block136:
	lea ecx,[esp+0x40]
	push ecx
	call esi

 Block137:
	lea edx,[esp+0x40]
	push edx
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block139

 Block138:
	push eax
	call _com_issue_error

 Block139:
	lea ecx,[esp+0x50]
	push ecx
	mov dword ptr [esp+0xDC],0x16
	call ebp
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block141

 Block140:
	push eax
	call _com_issue_error

 Block141:
	lea eax,[esp+0x80]
	push eax
	mov byte ptr [esp+0xDC],0x17
	call ebp
	lea ecx,[esp+0x80]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block143

 Block142:
	push eax
	call _com_issue_error

 Block143:
	lea edx,[esp+0x60]
	push edx
	mov byte ptr [esp+0xDC],0x18
	call ebp
	lea eax,[esp+0x60]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block145

 Block144:
	push eax
	call _com_issue_error

 Block145:
	mov ecx,3
	mov word ptr [esp+0x70],cx
	mov dword ptr [esp+0x78],0xC8
	lea edx,[esp+0x28]
	push edx
	mov byte ptr [esp+0xDC],0x1A
	call ebp
	lea eax,[esp+0x28]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block147

 Block146:
	push eax
	call _com_issue_error

 Block147:
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0xDC],0x1B
	call ebp
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block149

 Block148:
	push eax
	call _com_issue_error

 Block149:
	lea eax,[esp+0x40]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x88]
	push edx
	lea eax,[esp+0x6C]
	push eax
	lea ecx,[esp+0x80]
	push ecx
	push edi
	push edi
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x38]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push offset _S_UIUIWINDOWIMGPAR__3
	mov byte ptr [esp+0x104],0x1C
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x100],0x1D
	cmp dword ptr [_D_G_RM],edi
	jne Block151

 Block150:
	push 0x80004003
	call _com_issue_error

 Block151:
	lea ecx,[esp+0xC8]
	push ecx
	mov byte ptr [esp+0x104],0x1C
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov bl,0x1E
	mov ecx,eax
	mov byte ptr [esp+0xF4],bl
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x50],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block154

 Block152:
	cmp eax,0x80004002
	je Block154

 Block153:
	push eax
	call _com_issue_error

 Block154:
	mov edx,dword ptr [esp+0x50]
	mov ecx,dword ptr [edx+0x37C0]
	mov byte ptr [esp+0xEC],0x1F
	cmp ecx,edi
	jne Block156

 Block155:
	push 0x80004003
	call _com_issue_error

 Block156:
	mov esi,dword ptr [esp+0x4C]
	push esi
	lea eax,[esp+0xA8]
	push eax
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x90],8
	jne Block159

 Block157:
	mov eax,dword ptr [esp+0x98]
	xor ecx,ecx
	mov word ptr [esp+0x90],cx
	cmp eax,edi
	je Block160

 Block158:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block160

 Block159:
	lea edx,[esp+0x90]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block160:
	mov byte ptr [esp+0xD8],bl
	cmp esi,edi
	je Block162

 Block161:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block162:
	cmp word ptr [esp+0xA0],8
	mov byte ptr [esp+0xD8],0x1C
	jne Block165

 Block163:
	mov eax,dword ptr [esp+0xA8]
	xor edx,edx
	mov word ptr [esp+0xA0],dx
	cmp eax,edi
	je Block166

 Block164:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block166

 Block165:
	lea eax,[esp+0xA0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block166:
	mov ebx,8
	mov byte ptr [esp+0xD8],0x1B
	cmp word ptr [esp+0x18],bx
	jne Block173

 Block167:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	cmp eax,edi
	je Block169

 Block168:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block169:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block170:
	mov byte ptr [esp+0xD8],0x1A
	cmp word ptr [esp+0x28],bx
	jne Block174

 Block171:
	xor eax,eax
	mov word ptr [esp+0x28],ax
	mov eax,dword ptr [esp+0x30]
	cmp eax,edi
	je Block175

 Block172:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block175

 Block173:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0x18]
	push edx
	call esi
	jmp Block170

 Block174:
	lea ecx,[esp+0x28]
	push ecx
	call esi

 Block175:
	mov byte ptr [esp+0xD8],0x19
	cmp word ptr [esp+0x70],bx
	jne Block178

 Block176:
	mov eax,dword ptr [esp+0x78]
	xor edx,edx
	mov word ptr [esp+0x70],dx
	cmp eax,edi
	je Block179

 Block177:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block179

 Block178:
	lea eax,[esp+0x70]
	push eax
	call esi

 Block179:
	mov byte ptr [esp+0xD8],0x18
	cmp word ptr [esp+0x60],bx
	jne Block182

 Block180:
	mov eax,dword ptr [esp+0x68]
	xor ecx,ecx
	mov word ptr [esp+0x60],cx
	cmp eax,edi
	je Block183

 Block181:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block183

 Block182:
	lea edx,[esp+0x60]
	push edx
	call esi

 Block183:
	mov byte ptr [esp+0xD8],0x17
	cmp word ptr [esp+0x80],bx
	jne Block186

 Block184:
	xor eax,eax
	mov word ptr [esp+0x80],ax
	mov eax,dword ptr [esp+0x88]
	cmp eax,edi
	je Block187

 Block185:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block187

 Block186:
	lea ecx,[esp+0x80]
	push ecx
	call esi

 Block187:
	mov byte ptr [esp+0xD8],0x16
	cmp word ptr [esp+0x50],bx
	jne Block190

 Block188:
	mov eax,dword ptr [esp+0x58]
	xor edx,edx
	mov word ptr [esp+0x50],dx
	cmp eax,edi
	je Block191

 Block189:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block191

 Block190:
	lea eax,[esp+0x50]
	push eax
	call esi

 Block191:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x40],bx
	jne Block194

 Block192:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	cmp eax,edi
	je Block195

 Block193:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block195

 Block194:
	lea edx,[esp+0x40]
	push edx
	call esi

 Block195:
	lea eax,[esp+0x40]
	push eax
	call ebp
	lea ecx,[esp+0x40]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block197

 Block196:
	push eax
	call _com_issue_error

 Block197:
	lea edx,[esp+0x50]
	push edx
	mov dword ptr [esp+0xDC],0x20
	call ebp
	lea eax,[esp+0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block199

 Block198:
	push eax
	call _com_issue_error

 Block199:
	lea ecx,[esp+0x80]
	push ecx
	mov byte ptr [esp+0xDC],0x21
	call ebp
	lea edx,[esp+0x80]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block201

 Block200:
	push eax
	call _com_issue_error

 Block201:
	lea eax,[esp+0x60]
	push eax
	mov byte ptr [esp+0xDC],0x22
	call ebp
	lea ecx,[esp+0x60]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block203

 Block202:
	push eax
	call _com_issue_error

 Block203:
	mov edx,3
	mov word ptr [esp+0x70],dx
	mov dword ptr [esp+0x78],0xC8
	lea eax,[esp+0x28]
	push eax
	mov byte ptr [esp+0xDC],0x24
	call ebp
	lea ecx,[esp+0x28]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block205

 Block204:
	push eax
	call _com_issue_error

 Block205:
	lea edx,[esp+0x18]
	push edx
	mov byte ptr [esp+0xDC],0x25
	call ebp
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block207

 Block206:
	push eax
	call _com_issue_error

 Block207:
	lea ecx,[esp+0x40]
	push ecx
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x88]
	push eax
	lea ecx,[esp+0x6C]
	push ecx
	lea edx,[esp+0x80]
	push edx
	push edi
	push edi
	lea eax,[esp+0x44]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push offset _S_UIUIWINDOWIMGPAR__2
	mov byte ptr [esp+0x104],0x26
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x100],0x27
	cmp dword ptr [_D_G_RM],edi
	jne Block209

 Block208:
	push 0x80004003
	call _com_issue_error

 Block209:
	lea edx,[esp+0xC8]
	mov byte ptr [esp+0x100],0x26
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov bl,0x28
	mov ecx,eax
	mov byte ptr [esp+0xF4],bl
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x50],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block212

 Block210:
	cmp eax,0x80004002
	je Block212

 Block211:
	push eax
	call _com_issue_error

 Block212:
	mov eax,dword ptr [esp+0x50]
	mov ecx,dword ptr [eax+0x37C0]
	mov byte ptr [esp+0xEC],0x29
	cmp ecx,edi
	jne Block214

 Block213:
	push 0x80004003
	call _com_issue_error

 Block214:
	mov esi,dword ptr [esp+0x4C]
	push esi
	lea edx,[esp+0xA8]
	push edx
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x90],8
	jne Block217

 Block215:
	xor eax,eax
	mov word ptr [esp+0x90],ax
	mov eax,dword ptr [esp+0x98]
	cmp eax,edi
	je Block218

 Block216:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block218

 Block217:
	lea ecx,[esp+0x90]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block218:
	mov byte ptr [esp+0xD8],bl
	cmp esi,edi
	je Block220

 Block219:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block220:
	cmp word ptr [esp+0xA0],8
	mov byte ptr [esp+0xD8],0x26
	jne Block223

 Block221:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	cmp eax,edi
	je Block224

 Block222:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block224

 Block223:
	lea edx,[esp+0xA0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block224:
	mov ebx,8
	mov byte ptr [esp+0xD8],0x25
	cmp word ptr [esp+0x18],bx
	jne Block231

 Block225:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block227

 Block226:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block227:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block228:
	mov byte ptr [esp+0xD8],0x24
	cmp word ptr [esp+0x28],bx
	jne Block232

 Block229:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	cmp eax,edi
	je Block233

 Block230:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block233

 Block231:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea ecx,[esp+0x18]
	push ecx
	call esi
	jmp Block228

 Block232:
	lea eax,[esp+0x28]
	push eax
	call esi

 Block233:
	mov byte ptr [esp+0xD8],0x23
	cmp word ptr [esp+0x70],bx
	jne Block236

 Block234:
	mov eax,dword ptr [esp+0x78]
	xor ecx,ecx
	mov word ptr [esp+0x70],cx
	cmp eax,edi
	je Block237

 Block235:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block237

 Block236:
	lea edx,[esp+0x70]
	push edx
	call esi

 Block237:
	mov byte ptr [esp+0xD8],0x22
	cmp word ptr [esp+0x60],bx
	jne Block240

 Block238:
	xor eax,eax
	mov word ptr [esp+0x60],ax
	mov eax,dword ptr [esp+0x68]
	cmp eax,edi
	je Block241

 Block239:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block241

 Block240:
	lea ecx,[esp+0x60]
	push ecx
	call esi

 Block241:
	mov byte ptr [esp+0xD8],0x21
	cmp word ptr [esp+0x80],bx
	jne Block244

 Block242:
	mov eax,dword ptr [esp+0x88]
	xor edx,edx
	mov word ptr [esp+0x80],dx
	cmp eax,edi
	je Block245

 Block243:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block245

 Block244:
	lea eax,[esp+0x80]
	push eax
	call esi

 Block245:
	mov byte ptr [esp+0xD8],0x20
	cmp word ptr [esp+0x50],bx
	jne Block248

 Block246:
	mov eax,dword ptr [esp+0x58]
	xor ecx,ecx
	mov word ptr [esp+0x50],cx
	cmp eax,edi
	je Block249

 Block247:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block249

 Block248:
	lea edx,[esp+0x50]
	push edx
	call esi

 Block249:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x40],bx
	jne Block252

 Block250:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	cmp eax,edi
	je Block253

 Block251:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block253

 Block252:
	lea ecx,[esp+0x40]
	push ecx
	call esi

 Block253:
	lea edx,[esp+0x40]
	push edx
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block255

 Block254:
	push eax
	call _com_issue_error

 Block255:
	lea ecx,[esp+0x50]
	push ecx
	mov dword ptr [esp+0xDC],0x2A
	call ebp
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block257

 Block256:
	push eax
	call _com_issue_error

 Block257:
	lea eax,[esp+0x80]
	push eax
	mov byte ptr [esp+0xDC],0x2B
	call ebp
	lea ecx,[esp+0x80]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block259

 Block258:
	push eax
	call _com_issue_error

 Block259:
	lea edx,[esp+0x60]
	push edx
	mov byte ptr [esp+0xDC],0x2C
	call ebp
	lea eax,[esp+0x60]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block261

 Block260:
	push eax
	call _com_issue_error

 Block261:
	mov ecx,3
	mov word ptr [esp+0x70],cx
	mov dword ptr [esp+0x78],0xC8
	lea edx,[esp+0x28]
	push edx
	mov byte ptr [esp+0xDC],0x2E
	call ebp
	lea eax,[esp+0x28]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block263

 Block262:
	push eax
	call _com_issue_error

 Block263:
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0xDC],0x2F
	call ebp
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block265

 Block264:
	push eax
	call _com_issue_error

 Block265:
	lea eax,[esp+0x40]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x88]
	push edx
	lea eax,[esp+0x6C]
	push eax
	lea ecx,[esp+0x80]
	push ecx
	push edi
	push edi
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x38]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push offset _S_UIUIWINDOWIMGPAR__1
	mov byte ptr [esp+0x104],0x30
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x100],0x31
	cmp dword ptr [_D_G_RM],edi
	jne Block267

 Block266:
	push 0x80004003
	call _com_issue_error

 Block267:
	lea ecx,[esp+0xC8]
	push ecx
	mov byte ptr [esp+0x104],0x30
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov bl,0x32
	mov ecx,eax
	mov byte ptr [esp+0xF4],bl
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x50],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block270

 Block268:
	cmp eax,0x80004002
	je Block270

 Block269:
	push eax
	call _com_issue_error

 Block270:
	mov edx,dword ptr [esp+0x50]
	mov ecx,dword ptr [edx+0x37C0]
	mov byte ptr [esp+0xEC],0x33
	cmp ecx,edi
	jne Block272

 Block271:
	push 0x80004003
	call _com_issue_error

 Block272:
	mov esi,dword ptr [esp+0x4C]
	push esi
	lea eax,[esp+0xA8]
	push eax
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x90],8
	jne Block275

 Block273:
	mov eax,dword ptr [esp+0x98]
	xor ecx,ecx
	mov word ptr [esp+0x90],cx
	cmp eax,edi
	je Block276

 Block274:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block276

 Block275:
	lea edx,[esp+0x90]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block276:
	mov byte ptr [esp+0xD8],bl
	cmp esi,edi
	je Block278

 Block277:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block278:
	cmp word ptr [esp+0xA0],8
	mov byte ptr [esp+0xD8],0x30
	jne Block281

 Block279:
	mov eax,dword ptr [esp+0xA8]
	xor edx,edx
	mov word ptr [esp+0xA0],dx
	cmp eax,edi
	je Block282

 Block280:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block282

 Block281:
	lea eax,[esp+0xA0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block282:
	mov esi,8
	mov byte ptr [esp+0xD8],0x2F
	cmp word ptr [esp+0x18],si
	jne Block289

 Block283:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	cmp eax,edi
	je Block285

 Block284:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block285:
	mov ebx,dword ptr [ZImports::_VariantClear]

 Block286:
	mov byte ptr [esp+0xD8],0x2E
	cmp word ptr [esp+0x28],si
	jne Block290

 Block287:
	xor eax,eax
	mov word ptr [esp+0x28],ax
	mov eax,dword ptr [esp+0x30]
	cmp eax,edi
	je Block291

 Block288:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block291

 Block289:
	mov ebx,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0x18]
	push edx
	call ebx
	jmp Block286

 Block290:
	lea ecx,[esp+0x28]
	push ecx
	call ebx

 Block291:
	mov byte ptr [esp+0xD8],0x2D
	cmp word ptr [esp+0x70],si
	jne Block294

 Block292:
	mov eax,dword ptr [esp+0x78]
	xor edx,edx
	mov word ptr [esp+0x70],dx
	cmp eax,edi
	je Block295

 Block293:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block295

 Block294:
	lea eax,[esp+0x70]
	push eax
	call ebx

 Block295:
	mov byte ptr [esp+0xD8],0x2C
	cmp word ptr [esp+0x60],si
	jne Block298

 Block296:
	mov eax,dword ptr [esp+0x68]
	xor ecx,ecx
	mov word ptr [esp+0x60],cx
	cmp eax,edi
	je Block299

 Block297:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block299

 Block298:
	lea edx,[esp+0x60]
	push edx
	call ebx

 Block299:
	mov byte ptr [esp+0xD8],0x2B
	cmp word ptr [esp+0x80],si
	jne Block302

 Block300:
	xor eax,eax
	mov word ptr [esp+0x80],ax
	mov eax,dword ptr [esp+0x88]
	cmp eax,edi
	je Block303

 Block301:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block303

 Block302:
	lea ecx,[esp+0x80]
	push ecx
	call ebx

 Block303:
	mov byte ptr [esp+0xD8],0x2A
	cmp word ptr [esp+0x50],si
	jne Block306

 Block304:
	mov eax,dword ptr [esp+0x58]
	xor edx,edx
	mov word ptr [esp+0x50],dx
	cmp eax,edi
	je Block307

 Block305:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block307

 Block306:
	lea eax,[esp+0x50]
	push eax
	call ebx

 Block307:
	or esi,0xFFFFFFFF
	cmp word ptr [esp+0x40],8
	mov dword ptr [esp+0xD8],esi
	jne Block310

 Block308:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	cmp eax,edi
	je Block311

 Block309:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block311

 Block310:
	lea edx,[esp+0x40]
	push edx
	call ebx

 Block311:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push edi
	lea eax,[esp+0x18]
	push eax
	call CWndMan::GetOrgWindow
	mov eax,dword ptr [eax]
	mov ebx,0x34
	mov ecx,0xD
	mov dword ptr [esp+0xD8],ebx
	mov word ptr [esp+0x18],cx
	mov dword ptr [esp+0x20],eax
	cmp eax,edi
	je Block313

 Block312:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block313:
	mov ecx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ecx+0x37C0]
	mov byte ptr [esp+0xD8],0x35
	cmp ecx,edi
	jne Block315

 Block314:
	push 0x80004003
	call _com_issue_error

 Block315:
	lea edx,[esp+0x18]
	push edx
	call IWzVector2D::Putorigin
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xD8],bl
	jne Block318

 Block316:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block319

 Block317:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block319

 Block318:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block319:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0xD8],esi
	cmp eax,edi
	je Block321

 Block320:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block321:
	lea ecx,[esp+0x28]
	push ecx
	call ebp
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block323

 Block322:
	push eax
	call _com_issue_error

 Block323:
	lea eax,[esp+0x18]
	push eax
	mov dword ptr [esp+0xDC],0x36
	call ebp
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block325

 Block324:
	push eax
	call _com_issue_error

 Block325:
	mov ebx,dword ptr [esp+0x3C]
	mov esi,dword ptr [ebx+0x37C0]
	mov byte ptr [esp+0xD8],0x37
	cmp esi,edi
	jne Block327

 Block326:
	push 0x80004003
	call _com_issue_error

 Block327:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xC0]
	lea eax,[esp+0x38]
	push eax
	push esi
	mov dword ptr [esp+0x40],edi
	call ecx
	cmp eax,edi
	jge Block329

 Block328:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block329:
	mov esi,dword ptr [ebx+0x37C0]
	mov ebp,dword ptr [esp+0x38]
	cmp esi,edi
	jne Block331

 Block330:
	push 0x80004003
	call _com_issue_error

 Block331:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xB8]
	lea eax,[esp+0x14]
	push eax
	push esi
	mov dword ptr [esp+0x1C],edi
	call ecx
	cmp eax,edi
	jge Block333

 Block332:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block333:
	mov esi,dword ptr [ebx+0x37C0]
	mov edi,dword ptr [esp+0x14]
	test esi,esi
	jne Block335

 Block334:
	push 0x80004003
	call _com_issue_error

 Block335:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x1C]
	push eax
	add ebp,0x17
	push ebp
	call get_screen_width
	mov ecx,0xFFFFFFFD
	sub ecx,edi
	add eax,ecx
	push eax
	mov ecx,esi
	call IWzVector2D::RelMove
	mov esi,8
	mov byte ptr [esp+0xD8],0x36
	cmp word ptr [esp+0x18],si
	jne Block338

 Block336:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block339

 Block337:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block339

 Block338:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block339:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x28],si
	jne Block342

 Block340:
	mov eax,dword ptr [esp+0x30]
	xor ecx,ecx
	mov word ptr [esp+0x28],cx
	test eax,eax
	je Block343

 Block341:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block343

 Block342:
	lea edx,[esp+0x28]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block343:
	mov esi,dword ptr [ebx+0x37C0]
	test esi,esi
	jne Block345

 Block344:
	push 0x80004003
	call _com_issue_error

 Block345:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+0xE0]
	push 0xFFFFFFFF
	push esi
	call ecx
	test eax,eax
	jge Block347

 Block346:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block347:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x28]
	push edx
	call esi
	lea eax,[esp+0x28]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block349

 Block348:
	push eax
	call _com_issue_error

 Block349:
	lea ecx,[esp+0x18]
	push ecx
	mov dword ptr [esp+0xDC],0x38
	call esi
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block351

 Block350:
	push eax
	call _com_issue_error

 Block351:
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax+0x37C0]
	mov bl,0x39
	mov byte ptr [esp+0xD8],bl
	test ecx,ecx
	jne Block353

 Block352:
	push 0x80004003
	call _com_issue_error

 Block353:
	lea edx,[esp+0x14]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0xD8],0x3A
	test ecx,ecx
	jne Block355

 Block354:
	push 0x80004003
	call _com_issue_error

 Block355:
	lea eax,[esp+0x28]
	push eax
	lea edx,[esp+0x1C]
	push edx
	push 0
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xD8],bl
	test eax,eax
	je Block357

 Block356:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block357:
	mov esi,8
	mov byte ptr [esp+0xD8],0x38
	cmp word ptr [esp+0x18],si
	jne Block360

 Block358:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block361

 Block359:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block361

 Block360:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block361:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x28],si
	jne Block364

 Block362:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	test eax,eax
	je Block365

 Block363:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block365

 Block364:
	lea eax,[esp+0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block365:
	lea ecx,[esp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block367

 Block366:
	push eax
	call _com_issue_error

 Block367:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	mov ebx,0x3B
	push eax
	mov dword ptr [esp+0xDC],ebx
	call ebp
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	xor edi,edi
	add esp,8
	cmp eax,edi
	jge Block369

 Block368:
	push eax
	call _com_issue_error

 Block369:
	mov edx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [edx+0x37C0]
	mov byte ptr [esp+0xD8],0x3C
	cmp ecx,edi
	jne Block371

 Block370:
	push 0x80004003
	call _com_issue_error

 Block371:
	lea eax,[esp+0x28]
	push eax
	lea edx,[esp+0x1C]
	push edx
	push 0x20
	call IWzGr2DLayer::Animate
	mov esi,8
	mov byte ptr [esp+0xD8],bl
	cmp word ptr [esp+0x18],si
	jne Block374

 Block372:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block375

 Block373:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block375

 Block374:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block375:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0x28],si
	jne Block378

 Block376:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	cmp eax,edi
	je Block379

 Block377:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block379

 Block378:
	lea eax,[esp+0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block379:
	lea ecx,[esp+0x28]
	push ecx
	call ebp
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block381

 Block380:
	push eax
	call _com_issue_error

 Block381:
	mov ebx,0x3D
	mov eax,3
	mov dword ptr [esp+0xD8],ebx
	mov word ptr [esp+0x18],ax
	mov dword ptr [esp+0x20],edi
	mov ecx,dword ptr [_D_G_GR]
	mov byte ptr [esp+0xD8],0x3E
	cmp ecx,edi
	jne Block383

 Block382:
	push 0x80004003
	call _com_issue_error

 Block383:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x1C]
	push eax
	push 0xC006156C
	push edi
	push edi
	push edi
	push edi
	lea edx,[esp+0x30]
	push edx
	call IWzGr2D::CreateLayer
	mov ecx,dword ptr [esp+0x3C]
	mov eax,dword ptr [eax]
	mov esi,dword ptr [ecx+0x37C4]
	cmp esi,eax
	je Block388

 Block384:
	mov edx,ecx
	mov dword ptr [edx+0x37C4],eax
	cmp eax,edi
	je Block386

 Block385:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block386:
	cmp esi,edi
	je Block388

 Block387:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block388:
	mov eax,dword ptr [esp+0x14]
	cmp eax,edi
	je Block390

 Block389:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block390:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xD8],bl
	jne Block393

 Block391:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	cmp eax,edi
	je Block394

 Block392:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block394

 Block393:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block394:
	cmp word ptr [esp+0x28],8
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	jne Block397

 Block395:
	xor eax,eax
	mov word ptr [esp+0x28],ax
	mov eax,dword ptr [esp+0x30]
	cmp eax,edi
	je Block398

 Block396:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block398

 Block397:
	lea ecx,[esp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block398:
	lea edx,[esp+0x40]
	push edx
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block400

 Block399:
	push eax
	call _com_issue_error

 Block400:
	lea ecx,[esp+0x50]
	push ecx
	mov dword ptr [esp+0xDC],0x3F
	call ebp
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block402

 Block401:
	push eax
	call _com_issue_error

 Block402:
	lea eax,[esp+0x80]
	push eax
	mov byte ptr [esp+0xDC],0x40
	call ebp
	lea ecx,[esp+0x80]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block404

 Block403:
	push eax
	call _com_issue_error

 Block404:
	lea edx,[esp+0x60]
	push edx
	mov byte ptr [esp+0xDC],0x41
	call ebp
	lea eax,[esp+0x60]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block406

 Block405:
	push eax
	call _com_issue_error

 Block406:
	lea ecx,[esp+0x70]
	push ecx
	mov byte ptr [esp+0xDC],0x42
	call ebp
	lea edx,[esp+0x70]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block408

 Block407:
	push eax
	call _com_issue_error

 Block408:
	lea eax,[esp+0x28]
	push eax
	mov byte ptr [esp+0xDC],0x43
	call ebp
	lea ecx,[esp+0x28]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block410

 Block409:
	push eax
	call _com_issue_error

 Block410:
	lea edx,[esp+0x18]
	push edx
	mov byte ptr [esp+0xDC],0x44
	call ebp
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block412

 Block411:
	push eax
	call _com_issue_error

 Block412:
	lea ecx,[esp+0x40]
	push ecx
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x88]
	push eax
	lea ecx,[esp+0x6C]
	push ecx
	lea edx,[esp+0x80]
	push edx
	push edi
	push edi
	lea eax,[esp+0x44]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push offset _S_UIUIWINDOWIMGPAR
	mov byte ptr [esp+0x104],0x45
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x100],0x46
	cmp dword ptr [_D_G_RM],edi
	jne Block414

 Block413:
	push 0x80004003
	call _com_issue_error

 Block414:
	lea edx,[esp+0xC8]
	mov byte ptr [esp+0x100],0x45
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov bl,0x47
	mov ecx,eax
	mov byte ptr [esp+0xF4],bl
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x2C]
	mov dword ptr [esp+0x2C],edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,edi
	jge Block417

 Block415:
	cmp eax,0x80004002
	je Block417

 Block416:
	push eax
	call _com_issue_error

 Block417:
	mov eax,dword ptr [esp+0x50]
	mov ecx,dword ptr [eax+0x37C4]
	mov byte ptr [esp+0xEC],0x48
	cmp ecx,edi
	jne Block419

 Block418:
	push 0x80004003
	call _com_issue_error

 Block419:
	mov esi,dword ptr [esp+0x28]
	push esi
	lea edx,[esp+0xA8]
	push edx
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x90],8
	jne Block422

 Block420:
	xor eax,eax
	mov word ptr [esp+0x90],ax
	mov eax,dword ptr [esp+0x98]
	cmp eax,edi
	je Block423

 Block421:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block423

 Block422:
	lea ecx,[esp+0x90]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block423:
	mov byte ptr [esp+0xD8],bl
	cmp esi,edi
	je Block425

 Block424:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block425:
	cmp word ptr [esp+0xA0],8
	mov byte ptr [esp+0xD8],0x45
	jne Block428

 Block426:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	cmp eax,edi
	je Block429

 Block427:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block429

 Block428:
	lea edx,[esp+0xA0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block429:
	mov esi,8
	mov byte ptr [esp+0xD8],0x44
	cmp word ptr [esp+0x18],si
	jne Block436

 Block430:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block432

 Block431:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block432:
	mov ebx,dword ptr [ZImports::_VariantClear]

 Block433:
	mov byte ptr [esp+0xD8],0x43
	cmp word ptr [esp+0x28],si
	jne Block437

 Block434:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	cmp eax,edi
	je Block438

 Block435:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block438

 Block436:
	mov ebx,dword ptr [ZImports::_VariantClear]
	lea ecx,[esp+0x18]
	push ecx
	call ebx
	jmp Block433

 Block437:
	lea eax,[esp+0x28]
	push eax
	call ebx

 Block438:
	mov byte ptr [esp+0xD8],0x42
	cmp word ptr [esp+0x70],si
	jne Block441

 Block439:
	mov eax,dword ptr [esp+0x78]
	xor ecx,ecx
	mov word ptr [esp+0x70],cx
	cmp eax,edi
	je Block442

 Block440:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block442

 Block441:
	lea edx,[esp+0x70]
	push edx
	call ebx

 Block442:
	mov byte ptr [esp+0xD8],0x41
	cmp word ptr [esp+0x60],si
	jne Block445

 Block443:
	xor eax,eax
	mov word ptr [esp+0x60],ax
	mov eax,dword ptr [esp+0x68]
	cmp eax,edi
	je Block446

 Block444:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block446

 Block445:
	lea ecx,[esp+0x60]
	push ecx
	call ebx

 Block446:
	mov byte ptr [esp+0xD8],0x40
	cmp word ptr [esp+0x80],si
	jne Block449

 Block447:
	mov eax,dword ptr [esp+0x88]
	xor edx,edx
	mov word ptr [esp+0x80],dx
	cmp eax,edi
	je Block450

 Block448:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block450

 Block449:
	lea eax,[esp+0x80]
	push eax
	call ebx

 Block450:
	mov byte ptr [esp+0xD8],0x3F
	cmp word ptr [esp+0x50],si
	jne Block453

 Block451:
	mov eax,dword ptr [esp+0x58]
	xor ecx,ecx
	mov word ptr [esp+0x50],cx
	cmp eax,edi
	je Block454

 Block452:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block454

 Block453:
	lea edx,[esp+0x50]
	push edx
	call ebx

 Block454:
	or esi,0xFFFFFFFF
	cmp word ptr [esp+0x40],8
	mov dword ptr [esp+0xD8],esi
	jne Block457

 Block455:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	cmp eax,edi
	je Block458

 Block456:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block458

 Block457:
	lea ecx,[esp+0x40]
	push ecx
	call ebx

 Block458:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push edi
	lea edx,[esp+0x18]
	push edx
	call CWndMan::GetOrgWindow
	mov eax,dword ptr [eax]
	mov ebx,0x49
	mov ecx,0xD
	mov dword ptr [esp+0xD8],ebx
	mov word ptr [esp+0x18],cx
	mov dword ptr [esp+0x20],eax
	cmp eax,edi
	je Block460

 Block459:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block460:
	mov ecx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ecx+0x37C4]
	mov byte ptr [esp+0xD8],0x4A
	cmp ecx,edi
	jne Block462

 Block461:
	push 0x80004003
	call _com_issue_error

 Block462:
	lea edx,[esp+0x18]
	push edx
	call IWzVector2D::Putorigin
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xD8],bl
	jne Block465

 Block463:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block466

 Block464:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block466

 Block465:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block466:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0xD8],esi
	cmp eax,edi
	je Block468

 Block467:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block468:
	lea ecx,[esp+0x28]
	push ecx
	call ebp
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block470

 Block469:
	push eax
	call _com_issue_error

 Block470:
	lea eax,[esp+0x18]
	push eax
	mov dword ptr [esp+0xDC],0x4B
	call ebp
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block472

 Block471:
	push eax
	call _com_issue_error

 Block472:
	mov ebx,dword ptr [esp+0x3C]
	mov esi,dword ptr [ebx+0x37C4]
	mov byte ptr [esp+0xD8],0x4C
	cmp esi,edi
	jne Block474

 Block473:
	push 0x80004003
	call _com_issue_error

 Block474:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xC0]
	lea eax,[esp+0x14]
	push eax
	push esi
	mov dword ptr [esp+0x1C],edi
	call ecx
	cmp eax,edi
	jge Block476

 Block475:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block476:
	mov esi,dword ptr [ebx+0x37C4]
	mov ebp,dword ptr [esp+0x14]
	cmp esi,edi
	jne Block478

 Block477:
	push 0x80004003
	call _com_issue_error

 Block478:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xB8]
	lea eax,[esp+0x38]
	push eax
	push esi
	mov dword ptr [esp+0x40],edi
	call ecx
	cmp eax,edi
	jge Block480

 Block479:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block480:
	mov esi,dword ptr [ebx+0x37C4]
	mov edi,dword ptr [esp+0x38]
	test esi,esi
	jne Block482

 Block481:
	push 0x80004003
	call _com_issue_error

 Block482:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x1C]
	push eax
	add ebp,0x17
	push ebp
	call get_screen_width
	mov ecx,0xFFFFFFFD
	sub ecx,edi
	add eax,ecx
	push eax
	mov ecx,esi
	call IWzVector2D::RelMove
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xD8],0x4B
	jne Block489

 Block483:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block485

 Block484:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block485:
	mov ebp,dword ptr [ZImports::_VariantClear]

 Block486:
	or edi,0xFFFFFFFF
	cmp word ptr [esp+0x28],8
	mov dword ptr [esp+0xD8],edi
	jne Block490

 Block487:
	mov eax,dword ptr [esp+0x30]
	xor ecx,ecx
	mov word ptr [esp+0x28],cx
	test eax,eax
	je Block491

 Block488:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block491

 Block489:
	mov ebp,dword ptr [ZImports::_VariantClear]
	lea eax,[esp+0x18]
	push eax
	call ebp
	jmp Block486

 Block490:
	lea edx,[esp+0x28]
	push edx
	call ebp

 Block491:
	mov esi,dword ptr [ebx+0x37C4]
	test esi,esi
	jne Block493

 Block492:
	push 0x80004003
	call _com_issue_error

 Block493:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+0xE0]
	push edi
	push esi
	call ecx
	test eax,eax
	jge Block495

 Block494:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block495:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x28]
	push edx
	call esi
	lea eax,[esp+0x28]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block497

 Block496:
	push eax
	call _com_issue_error

 Block497:
	lea ecx,[esp+0x18]
	push ecx
	mov dword ptr [esp+0xDC],0x4D
	call esi
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block499

 Block498:
	push eax
	call _com_issue_error

 Block499:
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax+0x37C4]
	mov bl,0x4E
	mov byte ptr [esp+0xD8],bl
	test ecx,ecx
	jne Block501

 Block500:
	push 0x80004003
	call _com_issue_error

 Block501:
	lea edx,[esp+0x14]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0xD8],0x4F
	test ecx,ecx
	jne Block503

 Block502:
	push 0x80004003
	call _com_issue_error

 Block503:
	lea eax,[esp+0x28]
	push eax
	lea edx,[esp+0x1C]
	push edx
	push 0
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xD8],bl
	test eax,eax
	je Block505

 Block504:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block505:
	mov ebx,8
	mov byte ptr [esp+0xD8],0x4D
	cmp word ptr [esp+0x18],bx
	jne Block508

 Block506:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block509

 Block507:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block509

 Block508:
	lea ecx,[esp+0x18]
	push ecx
	call ebp

 Block509:
	mov dword ptr [esp+0xD8],edi
	cmp word ptr [esp+0x28],bx
	jne Block512

 Block510:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	test eax,eax
	je Block513

 Block511:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block513

 Block512:
	lea eax,[esp+0x28]
	push eax
	call ebp

 Block513:
	lea ecx,[esp+0xC0]
	push ecx
	call esi
	lea edx,[esp+0xC0]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block515

 Block514:
	push eax
	call _com_issue_error

 Block515:
	lea eax,[esp+0xB0]
	mov ebx,0x50
	push eax
	mov dword ptr [esp+0xDC],ebx
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0xB0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block517

 Block516:
	push eax
	call _com_issue_error

 Block517:
	mov edx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [edx+0x37C4]
	mov byte ptr [esp+0xD8],0x51
	test ecx,ecx
	jne Block519

 Block518:
	push 0x80004003
	call _com_issue_error

 Block519:
	lea eax,[esp+0xC0]
	push eax
	lea edx,[esp+0xB4]
	push edx
	push 0
	call IWzGr2DLayer::Animate
	mov esi,8
	mov byte ptr [esp+0xD8],bl
	cmp word ptr [esp+0xB0],si
	jne Block522

 Block520:
	xor eax,eax
	mov word ptr [esp+0xB0],ax
	mov eax,dword ptr [esp+0xB8]
	test eax,eax
	je Block523

 Block521:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block523

 Block522:
	lea ecx,[esp+0xB0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block523:
	mov dword ptr [esp+0xD8],0xFFFFFFFF
	cmp word ptr [esp+0xC0],si
	jne Block526

 Block524:
	mov eax,dword ptr [esp+0xC8]
	xor edx,edx
	mov word ptr [esp+0xC0],dx
	test eax,eax
	je Block527

 Block525:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block527

 Block526:
	lea eax,[esp+0xC0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block527:
	mov ecx,dword ptr [esp+0xD0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC8
	ret
}
}
// CUISkillDec::OnTabChanged
__SUB_CLASS_THIS(00458630, __thiscall, 68560,  CUISkillDec, void, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	mov esi,ecx
	mov dword ptr [esi+0xD4],eax
	call CUISkillDec::ReloadSkillRootVisible
	mov ecx,esi
	call CUISkillDec::SetScrollBar
	mov ecx,esi
	call CUISkillDec::SetButtons
	push 0
	mov ecx,esi
	call CWnd::InvalidateRect
	pop esi
	ret 4
}
}
// CUIStatChange::SetRet
__SUB_CLASS_THIS(005DFE40, __thiscall, 68514,  CUIStatChange, void, long) {
__asm {

 Block0:
	cmp dword ptr [ecx+0x84],0
	jne Block3

 Block1:
	cmp dword ptr [ecx+0x14],0
	mov eax,dword ptr [esp+4]
	mov dword ptr [ecx+0x80],eax
	mov dword ptr [ecx+0x84],1
	je Block3

 Block2:
	call CWnd::Destroy

 Block3:
	ret 4
}
}
// CWvsContext::IsFadeWndExist
_SUB_EXCEPTION_HANDLER(5F32A0)
__SUB_CLASS_THIS(005F32A0, __thiscall, 8289,  CWvsContext, int32_t, long, unsigned long, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F32A0
	mov eax,dword ptr fs:[0]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov edi,dword ptr [esp+0x24]
	xor ebp,ebp
	mov dword ptr [esp+0x1C],ebp

 Block1:
	mov eax,dword ptr [ebx+0x3F1C]
	test eax,eax
	je Block16

 Block2:
	cmp ebp,dword ptr [eax-4]
	jae Block16

 Block3:
	lea esi,[ebp*8]
	mov ecx,dword ptr [eax+esi+4]
	add eax,esi
	cmp dword ptr [ecx+0xD8],edi
	jne Block11

 Block4:
	cmp dword ptr [esp+0x28],0
	je Block6

 Block5:
	push edi
	mov eax,ecx
	call CUIFadeYesNo::GetRelatedValue
	cmp eax,dword ptr [esp+0x28]
	jne Block11

 Block6:
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block13

 Block7:
	cmp byte ptr [eax],0
	je Block13

 Block8:
	mov eax,dword ptr [ebx+0x3F1C]
	add eax,esi
	mov eax,dword ptr [eax+4]
	push edi
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,eax
	call CUIFadeYesNo::GetRelatedName
	lea edx,[esp+0x2C]
	push edx
	mov ecx,eax
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x24]
	neg esi
	sbb esi,esi
	inc esi
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	test esi,esi
	je Block12

 Block11:
	inc ebp
	jmp Block1

 Block12:
	mov eax,dword ptr [esp+0x2C]

 Block13:
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test eax,eax
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block15:
	mov eax,1
	jmp Block19

 Block16:
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test eax,eax
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	xor eax,eax

 Block19:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC
	ret 0xC
}
}
// CWvsContext::SendPetFoodItemUseRequest
_SUB_EXCEPTION_HANDLER(5D9F20)
__SUB_CLASS_THIS(005D9F20, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D9F20
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebp,ebp
	cmp dword ptr [esi+0x20B8],ebp
	jne Block14

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block14

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block14

 Block3:
	push 0x52
	lea ecx,[esp+0x18]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x2C],ebp
	call get_update_time
	push eax
	lea ecx,[esp+0x18]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x34]
	push edx
	lea ecx,[esp+0x18]
	call COutPacket::Encode2
	mov eax,dword ptr [esp+0x38]
	push eax
	lea ecx,[esp+0x18]
	call COutPacket::Encode4
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	mov dword ptr [esi+0x20BC],eax
	mov edi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edx,dword ptr [edi+0x2E44]
	mov ecx,dword ptr [edx+4]
	xor ebx,ebx
	cmp ecx,ebp
	je Block5

 Block4:
	call CPet::GetItemSlot
	mov ecx,dword ptr [eax+0x45]
	push ecx
	add eax,0x43
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	movzx ebp,al

 Block5:
	mov esi,1
	lea esp,[esp]

 Block6:
	mov edx,dword ptr [edi+0x2E44]
	mov ecx,dword ptr [edx+esi*8+4]
	test ecx,ecx
	je Block9

 Block7:
	call CPet::GetItemSlot
	mov ecx,dword ptr [eax+0x45]
	push ecx
	add eax,0x43
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	add esp,8
	cmp edx,ebp
	jge Block9

 Block8:
	mov eax,dword ptr [edi+0x2E44]
	mov ecx,dword ptr [eax+esi*8+4]
	call CPet::GetItemSlot
	mov ecx,dword ptr [eax+0x45]
	push ecx
	add eax,0x43
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	movzx ebp,al
	mov ebx,esi

 Block9:
	inc esi
	cmp esi,3
	jl Block6

 Block10:
	mov edx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov eax,dword ptr [edx+0x2E44]
	mov esi,dword ptr [eax+ebx*8+4]
	test esi,esi
	je Block13

 Block11:
	lea ecx,[esp+0x34]
	push 0x926
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov edx,dword ptr [esi+0x88]
	mov ecx,dword ptr [edx]
	push 0x64
	push eax
	push ecx
	mov byte ptr [esp+0x38],1
	call play_pet_sound
	mov eax,dword ptr [esp+0x40]
	add esp,0xC
	mov byte ptr [esp+0x2C],0
	test eax,eax
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block13:
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block14:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 8
}
}
// CUISkillDecEX::GetSkillRootVisible
__SUB_CLASS_THIS(00452A70, __thiscall, 68643,  CUISkillDecEX, const SKILLROOT*, int32_t) {
__asm {

 Block0:
	sub esp,8
	cmp dword ptr [esp+0xC],0
	push esi
	mov esi,ecx
	je Block7

 Block1:
	mov ecx,dword ptr [esi+0x98]
	mov edx,dword ptr [ecx+0x44]
	mov eax,dword ptr [esi+0xE4]
	mov ecx,dword ptr [esi+0x90]
	lea eax,[edx+eax*2]
	push ebp
	mov ebp,dword ptr [ecx+eax*4]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+8]
	push edx
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x14],eax
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	je Block6

 Block2:
	push ebx
	push edi
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block5

 Block3:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block5

 Block4:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block5:
	pop edi
	mov dword ptr [esp+0x10],0
	pop ebx

 Block6:
	mov edx,dword ptr [esp+0x14]
	lea ecx,[esi+0xCC]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	push ebp
	call CSkillInfo::GetSkillRootVisible
	pop ebp

 Block7:
	lea eax,[esi+0xCC]
	pop esi
	add esp,8
	ret 4
}
}
// GUILDDATA::Clear
__SUB_CLASS_THIS0(005DFAC0, __thiscall, 45448,  GUILDDATA, void) {
__asm {

 Block0:
	push ebx
	xor ebx,ebx
	push esi
	mov esi,ecx
	mov dword ptr [esi],ebx
	mov dword ptr [esi+0x22],ebx
	mov dword ptr [esi+0x2A],1
	mov eax,dword ptr [esi+4]
	cmp eax,ebx
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esi+4],ebx

 Block2:
	lea ecx,[esi+8]
	call ZArray<ZXString<char>>::RemoveAll
	lea ecx,[esi+0xC]
	call ZArray<unsigned long>::RemoveAll
	lea ecx,[esi+0x10]
	call ZArray<GUILDMEMBER>::RemoveAll
	xor eax,eax
	xor ecx,ecx
	mov dword ptr [esi+0x14],ebx
	mov word ptr [esi+0x1B],ax
	mov word ptr [esi+0x18],cx
	mov byte ptr [esi+0x1D],bl
	mov byte ptr [esi+0x1A],bl
	mov eax,dword ptr [esi+0x1E]
	cmp eax,ebx
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esi+0x1E],ebx

 Block4:
	lea ecx,[esi+0x2E]
	mov dword ptr [esi+0x26],ebx
	call ZMap<long, GUILDDATA::SKILLENTRY, long>::RemoveAll
	lea ecx,[esi+0x46]
	pop esi
	pop ebx
	jmp  ZArray<long>::RemoveAll
}
}
// CWvsContext::GetAutoQuestIconAppearUOL
__SUB_CLASS_THIS0(005DDF60, __thiscall, 8145,  CWvsContext, ZXString<unsigned short>) {
__asm {

 Block0:
	push ecx
	push esi
	push offset _anon__IsGuildSupplyQuest
	add ecx,0x4044
	mov dword ptr [esp+8],0
	call ZList<unsigned short>::FindSatisfying
	mov esi,dword ptr [esp+0xC]
	mov dword ptr [esi],0
	mov ecx,esi
	test eax,eax
	je Block2

 Block1:
	push 0x4C
	push offset _S_EFFECTBASICEFFIM__3
	push 0
	push 0x26
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0x26
	mov ecx,esi
	call ZXString<unsigned short>::ReleaseBuffer
	mov eax,esi
	pop esi
	pop ecx
	ret 4

 Block2:
	push 0x4A
	push offset _S_EFFECTBASICEFFIM__2
	push 0
	push 0x25
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0x25
	mov ecx,esi
	call ZXString<unsigned short>::ReleaseBuffer
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CUISkillChangeConfirm::~CUISkillChangeConfirm
_SUB_EXCEPTION_HANDLER(5E0010)
__SUB_CLASS_THIS0(005E0010, __thiscall, 68688,  CUISkillChangeConfirm, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E0010
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x10],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillChangeConfirm::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillChangeConfirm::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillChangeConfirm::`vftable'{for `ZRefCounted'}
	lea ecx,[esi+0xB8]
	mov dword ptr [esp+0x1C],4
	call CLayoutMan::~CLayoutMan
	lea edi,[esi+0xA4]
	xor ebx,ebx
	mov byte ptr [esp+0x1C],3
	cmp dword ptr [edi+4],ebx
	je Block2

 Block1:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block2:
	lea edi,[esi+0x9C]
	mov byte ptr [esp+0x1C],2
	cmp dword ptr [edi+4],ebx
	je Block4

 Block3:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block4:
	lea edi,[esi+0x94]
	mov byte ptr [esp+0x1C],1
	cmp dword ptr [edi+4],ebx
	je Block6

 Block5:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block6:
	lea ecx,[esi+0x90]
	mov byte ptr [esp+0x1C],bl
	call ZArray<long>::RemoveAll
	mov ecx,esi
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call CDialog::~CDialog
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret
}
}
// CWvsContext::GetGuildGradeName
__SUB_CLASS_THIS(005DF440, __thiscall, 8175,  CWvsContext, ZXString<char>*, ZXString<char>*, long) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [esp+0xC]
	push esi
	mov dword ptr [esp+4],0
	test eax,eax
	jl Block4

 Block1:
	mov edx,dword ptr [ecx+0x40D4]
	test edx,edx
	je Block4

 Block2:
	cmp eax,dword ptr [edx-4]
	jae Block4

 Block3:
	mov esi,dword ptr [esp+0xC]
	mov ecx,edx
	mov eax,dword ptr [ecx+eax*8+4]
	add eax,0x18
	push eax
	mov ecx,esi
	mov dword ptr [esi],0
	call ZXString<char>::op_assign
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block4:
	mov esi,dword ptr [esp+0xC]
	push 0
	push offset _S_
	push 0
	push 0
	mov ecx,esi
	mov dword ptr [esi],0
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	mov ecx,esi
	call ZXString<char>::ReleaseBuffer
	mov eax,esi
	pop esi
	pop ecx
	ret 8
}
}
// CUIStatChange::Draw
_SUB_EXCEPTION_HANDLER(46BF90)
__SUB_CLASS_THIS(0046BF90, __thiscall, 68512,  CUIStatChange, void, const tagRECT*) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_46BF90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x74
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [ebp-0x38],esi
	xor ebx,ebx
	push ebx
	call CWnd::Draw
	lea eax,[ebp-0x4C]
	push eax
	mov ecx,esi
	call CWnd::GetCanvas
	lea ecx,[ebp-0x34]
	push 0x18
	push ecx
	mov dword ptr [ebp-4],ebx
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[ebp-0x70]
	push edx
	mov byte ptr [ebp-4],1
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [ebp-0x6C]
	mov eax,dword ptr [eax+4]
	mov dword ptr [ebp-0x3C],eax
	cmp esi,ebx
	je Block5

 Block1:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [ebp-0x6C],ebx

 Block5:
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push offset _x_com_ptr<IWzCanvas>::_ctor_default
	push 6
	push 4
	lea ecx,[ebp-0x64]
	push ecx
	call __eh_vector_ctor_iterator
	xor ebx,ebx

 Block6:
	xor edi,edi
	mov dword ptr [ebp-0x48],edi
	push ebx
	lea edx,[ebp-0x48]
	push offset _S_UIUIWINDOW2IMGRE__10
	push edx
	mov byte ptr [ebp-4],3
	call ZXString<unsigned short>::Format
	add esp,0xC
	push eax
	lea ecx,[ebp-0x44]
	mov dword ptr [ebp-0x44],edi
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [ebp-0x48]
	mov byte ptr [ebp-4],5
	cmp eax,edi
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block8:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x30]
	push eax
	call esi
	lea ecx,[ebp-0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block45

 Block9:
	lea edx,[ebp-0x20]
	push edx
	mov byte ptr [ebp-4],6
	call esi
	lea eax,[ebp-0x20]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block45

 Block10:
	mov eax,dword ptr [ebp-0x44]
	push edi
	push edi
	lea ecx,[ebp-0x30]
	push ecx
	lea edx,[ebp-0x20]
	push edx
	push ecx
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],7
	call _xbstr_t::_ctor_1
	mov byte ptr [ebp-4],8
	cmp dword ptr [_D_G_RM],edi
	je Block36

 Block11:
	lea ecx,[ebp-0x80]
	push ecx
	mov byte ptr [ebp-4],7
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],9
	call Ztl_variant_t::GetUnknown
	cmp eax,edi
	je Block19

 Block12:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx]
	lea ecx,[ebp-0x68]
	push ecx
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push eax
	call edx
	mov esi,eax
	xor eax,eax
	test esi,esi
	setl al
	dec eax
	and eax,dword ptr [ebp-0x68]
	mov edi,eax
	mov eax,dword ptr [ebp+ebx*4-0x64]
	test eax,eax
	je Block14

 Block13:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block14:
	mov dword ptr [ebp+ebx*4-0x64],edi
	test esi,esi
	jge Block16

 Block15:
	cmp esi,0x80004002
	jne Block37

 Block16:
	cmp word ptr [ebp-0x80],8
	mov byte ptr [ebp-4],7
	jne Block22

 Block17:
	xor eax,eax
	mov word ptr [ebp-0x80],ax
	mov eax,dword ptr [ebp-0x78]
	test eax,eax
	je Block23

 Block18:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block19:
	mov eax,dword ptr [ebp+ebx*4-0x64]
	cmp eax,edi
	je Block16

 Block20:
	mov dword ptr [ebp+ebx*4-0x64],0
	test eax,eax
	je Block16

 Block21:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx
	jmp Block16

 Block22:
	lea ecx,[ebp-0x80]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block23:
	mov esi,8
	mov byte ptr [ebp-4],6
	cmp word ptr [ebp-0x20],si
	jne Block26

 Block24:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block27:
	mov byte ptr [ebp-4],5
	cmp word ptr [ebp-0x30],si
	jne Block30

 Block28:
	mov eax,dword ptr [ebp-0x28]
	xor ecx,ecx
	mov word ptr [ebp-0x30],cx
	test eax,eax
	je Block31

 Block29:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block31

 Block30:
	lea edx,[ebp-0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block31:
	mov eax,dword ptr [ebp-0x44]
	mov byte ptr [ebp-4],2
	test eax,eax
	je Block33

 Block32:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block33:
	inc ebx
	cmp ebx,6
	jl Block6

 Block34:
	mov eax,dword ptr [ebp-0x38]
	cmp dword ptr [eax+0xC8],0x800
	mov esi,dword ptr [ebp-0x4C]
	je Block56

 Block35:
	mov ecx,3
	mov word ptr [ebp-0x20],cx
	mov ecx,0xFF
	mov dword ptr [ebp-0x18],ecx
	mov byte ptr [ebp-4],0xA
	test esi,esi
	jne Block38

 Block36:
	push 0x80004003
	call _com_issue_error

 Block37:
	push esi
	call _com_issue_error

 Block38:
	mov edi,dword ptr [ebp-0x20]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x1C]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x14]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x64]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0x47
	push 9
	push esi
	call ecx
	test eax,eax
	jge Block40

 Block39:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block40:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block43

 Block41:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block44

 Block42:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block44

 Block43:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block44:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x20]
	push ecx
	call edi
	lea edx,[ebp-0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	lea eax,[ebp-0x30]
	push eax
	mov byte ptr [ebp-4],0xB
	call edi
	lea ecx,[ebp-0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block48

 Block47:
	push eax
	call _com_issue_error

 Block48:
	mov bl,0xC
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov ecx,dword ptr [ebp-0x34]
	mov edi,esp
	lea edx,[ebp-0x20]
	push edx
	lea eax,[ebp-0x30]
	push eax
	mov eax,dword ptr [ebp-0x3C]
	mov edx,dword ptr [eax+0x75]
	push ecx
	push edx
	add eax,0x6D
	push eax
	call _ZtlSecureFuseHelper<long>::call
	push 0xA
	push edi
	push eax
	call _itoa
	add esp,0x10
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	push 0x4A
	mov byte ptr [ebp-4],0xD
	push 0x29
	mov ecx,esi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x30],8
	mov byte ptr [ebp-4],0xB
	jne Block51

 Block49:
	xor eax,eax
	mov word ptr [ebp-0x30],ax
	mov eax,dword ptr [ebp-0x28]
	test eax,eax
	je Block52

 Block50:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block52

 Block51:
	lea ecx,[ebp-0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block52:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block55

 Block53:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block56

 Block54:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block56

 Block55:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block56:
	mov ecx,dword ptr [ebp-0x38]
	cmp dword ptr [ecx+0xC8],0x2000
	je Block77

 Block57:
	mov edx,3
	mov ecx,0xFF
	mov word ptr [ebp-0x20],dx
	mov dword ptr [ebp-0x18],ecx
	mov byte ptr [ebp-4],0xE
	test esi,esi
	jne Block59

 Block58:
	push 0x80004003
	call _com_issue_error

 Block59:
	mov edi,dword ptr [ebp-0x20]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x1C]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x14]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x60]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0x59
	push 9
	push esi
	call ecx
	test eax,eax
	jge Block61

 Block60:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block61:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block64

 Block62:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block65

 Block63:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block65

 Block64:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block65:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x20]
	push ecx
	call edi
	lea edx,[ebp-0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block67

 Block66:
	push eax
	call _com_issue_error

 Block67:
	lea eax,[ebp-0x30]
	push eax
	mov byte ptr [ebp-4],0xF
	call edi
	lea ecx,[ebp-0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block69

 Block68:
	push eax
	call _com_issue_error

 Block69:
	mov bl,0x10
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov ecx,dword ptr [ebp-0x34]
	mov edi,esp
	lea edx,[ebp-0x20]
	push edx
	lea eax,[ebp-0x30]
	push eax
	mov eax,dword ptr [ebp-0x3C]
	mov edx,dword ptr [eax+0x8D]
	push ecx
	push edx
	add eax,0x85
	push eax
	call _ZtlSecureFuseHelper<long>::call
	push 0xA
	push edi
	push eax
	call _itoa
	add esp,0x10
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	push 0x5C
	mov byte ptr [ebp-4],0x11
	push 0x29
	mov ecx,esi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x30],8
	mov byte ptr [ebp-4],0xF
	jne Block72

 Block70:
	xor eax,eax
	mov word ptr [ebp-0x30],ax
	mov eax,dword ptr [ebp-0x28]
	test eax,eax
	je Block73

 Block71:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block73

 Block72:
	lea ecx,[ebp-0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block73:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block76

 Block74:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block77

 Block75:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block77

 Block76:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block77:
	mov ecx,dword ptr [ebp-0x38]
	cmp dword ptr [ecx+0xC8],0x40
	je Block98

 Block78:
	mov edx,3
	mov ecx,0xFF
	mov word ptr [ebp-0x20],dx
	mov dword ptr [ebp-0x18],ecx
	mov byte ptr [ebp-4],0x12
	test esi,esi
	jne Block80

 Block79:
	push 0x80004003
	call _com_issue_error

 Block80:
	mov edi,dword ptr [ebp-0x20]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x1C]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x14]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x5C]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0x72
	push 9
	push esi
	call ecx
	test eax,eax
	jge Block82

 Block81:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block82:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block85

 Block83:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block86

 Block84:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block86

 Block85:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block86:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x20]
	push ecx
	call edi
	lea edx,[ebp-0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block88

 Block87:
	push eax
	call _com_issue_error

 Block88:
	lea eax,[ebp-0x30]
	push eax
	mov byte ptr [ebp-4],0x13
	call edi
	lea ecx,[ebp-0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block90

 Block89:
	push eax
	call _com_issue_error

 Block90:
	mov bl,0x14
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov ecx,dword ptr [ebp-0x34]
	mov edi,esp
	lea edx,[ebp-0x20]
	push edx
	lea eax,[ebp-0x30]
	push eax
	mov eax,dword ptr [ebp-0x3C]
	mov edx,dword ptr [eax+0x45]
	push ecx
	push edx
	add eax,0x41
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	push 0xA
	cwde
	push edi
	push eax
	call _itoa
	add esp,0x10
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	push 0x75
	mov byte ptr [ebp-4],0x15
	push 0x29
	mov ecx,esi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x30],8
	mov byte ptr [ebp-4],0x13
	jne Block93

 Block91:
	mov eax,dword ptr [ebp-0x28]
	xor ecx,ecx
	mov word ptr [ebp-0x30],cx
	test eax,eax
	je Block94

 Block92:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block94

 Block93:
	lea edx,[ebp-0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block94:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block97

 Block95:
	xor eax,eax
	mov word ptr [ebp-0x20],ax
	mov eax,dword ptr [ebp-0x18]
	test eax,eax
	je Block98

 Block96:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block98

 Block97:
	lea ecx,[ebp-0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block98:
	mov edx,dword ptr [ebp-0x38]
	cmp dword ptr [edx+0xC8],0x80
	je Block119

 Block99:
	mov eax,3
	mov ecx,0xFF
	mov word ptr [ebp-0x20],ax
	mov dword ptr [ebp-0x18],ecx
	mov byte ptr [ebp-4],0x16
	test esi,esi
	jne Block101

 Block100:
	push 0x80004003
	call _com_issue_error

 Block101:
	mov edi,dword ptr [ebp-0x20]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x1C]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x14]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x58]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0x84
	push 9
	push esi
	call ecx
	test eax,eax
	jge Block103

 Block102:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block103:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block106

 Block104:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block107

 Block105:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block107

 Block106:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block107:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x20]
	push ecx
	call edi
	lea edx,[ebp-0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block109

 Block108:
	push eax
	call _com_issue_error

 Block109:
	lea eax,[ebp-0x30]
	mov bl,0x17
	push eax
	mov byte ptr [ebp-4],bl
	call edi
	lea ecx,[ebp-0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block111

 Block110:
	push eax
	call _com_issue_error

 Block111:
	mov eax,0x20
	mov byte ptr [ebp-4],0x18
	call __chkstk
	mov ecx,dword ptr [ebp-0x34]
	mov edi,esp
	lea edx,[ebp-0x20]
	push edx
	lea eax,[ebp-0x30]
	push eax
	mov eax,dword ptr [ebp-0x3C]
	mov edx,dword ptr [eax+0x4D]
	push ecx
	push edx
	add eax,0x49
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	push 0xA
	cwde
	push edi
	push eax
	call _itoa
	add esp,0x10
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	push 0x87
	mov byte ptr [ebp-4],0x19
	push 0x29
	mov ecx,esi
	mov byte ptr [ebp-4],0x18
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x30],8
	mov byte ptr [ebp-4],bl
	jne Block114

 Block112:
	mov eax,dword ptr [ebp-0x28]
	xor ecx,ecx
	mov word ptr [ebp-0x30],cx
	test eax,eax
	je Block115

 Block113:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block115

 Block114:
	lea edx,[ebp-0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block115:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block118

 Block116:
	xor eax,eax
	mov word ptr [ebp-0x20],ax
	mov eax,dword ptr [ebp-0x18]
	test eax,eax
	je Block119

 Block117:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block119

 Block118:
	lea ecx,[ebp-0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block119:
	mov edx,dword ptr [ebp-0x38]
	cmp dword ptr [edx+0xC8],0x100
	je Block140

 Block120:
	mov eax,3
	mov ecx,0xFF
	mov word ptr [ebp-0x20],ax
	mov dword ptr [ebp-0x18],ecx
	mov byte ptr [ebp-4],0x1A
	test esi,esi
	jne Block122

 Block121:
	push 0x80004003
	call _com_issue_error

 Block122:
	mov edi,dword ptr [ebp-0x20]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x1C]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x14]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x54]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0x96
	push 9
	push esi
	call ecx
	test eax,eax
	jge Block124

 Block123:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block124:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block127

 Block125:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block128

 Block126:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block128

 Block127:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block128:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x20]
	push ecx
	call edi
	lea edx,[ebp-0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block130

 Block129:
	push eax
	call _com_issue_error

 Block130:
	lea eax,[ebp-0x30]
	push eax
	mov byte ptr [ebp-4],0x1B
	call edi
	lea ecx,[ebp-0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block132

 Block131:
	push eax
	call _com_issue_error

 Block132:
	mov bl,0x1C
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov ecx,dword ptr [ebp-0x34]
	mov edi,esp
	lea edx,[ebp-0x20]
	push edx
	lea eax,[ebp-0x30]
	push eax
	mov eax,dword ptr [ebp-0x3C]
	mov edx,dword ptr [eax+0x55]
	push ecx
	push edx
	add eax,0x51
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	push 0xA
	cwde
	push edi
	push eax
	call _itoa
	add esp,0x10
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	push 0x99
	mov byte ptr [ebp-4],0x1D
	push 0x29
	mov ecx,esi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x30],8
	mov byte ptr [ebp-4],0x1B
	jne Block135

 Block133:
	mov eax,dword ptr [ebp-0x28]
	xor ecx,ecx
	mov word ptr [ebp-0x30],cx
	test eax,eax
	je Block136

 Block134:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block136

 Block135:
	lea edx,[ebp-0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block136:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block139

 Block137:
	xor eax,eax
	mov word ptr [ebp-0x20],ax
	mov eax,dword ptr [ebp-0x18]
	test eax,eax
	je Block140

 Block138:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block140

 Block139:
	lea ecx,[ebp-0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block140:
	mov edx,dword ptr [ebp-0x38]
	cmp dword ptr [edx+0xC8],0x200
	je Block161

 Block141:
	mov eax,3
	mov ecx,0xFF
	mov word ptr [ebp-0x20],ax
	mov dword ptr [ebp-0x18],ecx
	mov byte ptr [ebp-4],0x1E
	test esi,esi
	jne Block143

 Block142:
	push 0x80004003
	call _com_issue_error

 Block143:
	mov edi,dword ptr [ebp-0x20]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x1C]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp-0x14]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp-0x50]
	mov ecx,dword ptr [edx+0x80]
	push eax
	push 0xA8
	push 9
	push esi
	call ecx
	test eax,eax
	jge Block145

 Block144:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block145:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block148

 Block146:
	mov eax,dword ptr [ebp-0x18]
	xor edx,edx
	mov word ptr [ebp-0x20],dx
	test eax,eax
	je Block149

 Block147:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block149

 Block148:
	lea eax,[ebp-0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block149:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x20]
	push ecx
	call edi
	lea edx,[ebp-0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block151

 Block150:
	push eax
	call _com_issue_error

 Block151:
	lea eax,[ebp-0x30]
	mov bl,0x1F
	push eax
	mov byte ptr [ebp-4],bl
	call edi
	lea ecx,[ebp-0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block153

 Block152:
	push eax
	call _com_issue_error

 Block153:
	mov eax,0x20
	mov byte ptr [ebp-4],0x20
	call __chkstk
	mov ecx,dword ptr [ebp-0x34]
	mov edi,esp
	lea edx,[ebp-0x20]
	push edx
	lea eax,[ebp-0x30]
	push eax
	mov eax,dword ptr [ebp-0x3C]
	mov edx,dword ptr [eax+0x5D]
	push ecx
	push edx
	add eax,0x59
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	push 0xA
	cwde
	push edi
	push eax
	call _itoa
	add esp,0x10
	mov dword ptr [ebp-0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	push 0xAB
	mov byte ptr [ebp-4],0x21
	push 0x29
	mov ecx,esi
	mov byte ptr [ebp-4],0x20
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x30],8
	mov byte ptr [ebp-4],bl
	jne Block156

 Block154:
	mov eax,dword ptr [ebp-0x28]
	xor ecx,ecx
	mov word ptr [ebp-0x30],cx
	test eax,eax
	je Block157

 Block155:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block157

 Block156:
	lea edx,[ebp-0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block157:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],2
	jne Block160

 Block158:
	xor eax,eax
	mov word ptr [ebp-0x20],ax
	mov eax,dword ptr [ebp-0x18]
	test eax,eax
	je Block161

 Block159:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block161

 Block160:
	lea ecx,[ebp-0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block161:
	mov ecx,dword ptr [ebp-0x38]
	mov eax,dword ptr [ecx+0xC8]
	test eax,eax
	je Block163

 Block162:
	push eax
	call CUIStatChange::DrawDecStat

 Block163:
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push 6
	push 4
	lea edx,[ebp-0x64]
	push edx
	mov byte ptr [ebp-4],1
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [ebp-0x34]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block165

 Block164:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block165:
	mov dword ptr [ebp-4],0xFFFFFFFF
	test esi,esi
	je Block167

 Block166:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block167:
	lea esp,[ebp-0x90]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::GetQuestRecordValue
_SUB_EXCEPTION_HANDLER(601550)
__SUB_CLASS_THIS(00601550, __thiscall, 8101,  CWvsContext, ZXString<char>*, ZXString<char>*, uint16_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_601550
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x10],0
	mov esi,dword ptr [esp+0x2C]
	mov dword ptr [esi],0
	lea eax,[esp+0x14]
	mov edi,1
	push eax
	mov dword ptr [esp+0x14],edi
	call CWvsContext::GetCharacterData
	movzx ecx,word ptr [esp+0x30]
	mov eax,dword ptr [eax+4]
	push esi
	lea edx,[esp+0x34]
	mov dword ptr [esp+0x34],ecx
	push edx
	lea ecx,[eax+0x6F5]
	mov dword ptr [esp+0x2C],edi
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetAt
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x24],0
	test eax,eax
	je Block4

 Block1:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block4:
	mov eax,esi
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x18
	ret 8
}
}
// CWvsContext::CheckFieldOnAutoStartQuest
_SUB_EXCEPTION_HANDLER(5E6B70)
__SUB_CLASS_THIS(005E6B70, __thiscall, 8317,  CWvsContext, int32_t, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6B70
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,dword ptr [esp+0x20]
	mov esi,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	test eax,eax
	jbe Block6

 Block1:
	push eax
	mov ecx,esi
	call CQuestMan::IsFieldOnAutoStartQuest
	test eax,eax
	je Block6

 Block2:
	cmp dword ptr [esi+0x254],0
	lea ecx,[esi+0x248]
	je Block6

 Block3:
	mov dword ptr [esp+0xC],0
	lea eax,[esp+0xC]
	push eax
	lea edx,[esp+0x24]
	push edx
	mov dword ptr [esp+0x20],0
	call ZMap<unsigned long, ZArray<unsigned short>, unsigned long>::GetAt
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	je Block5

 Block4:
	cmp dword ptr [eax-4],0
	jne Block7

 Block5:
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll

 Block6:
	xor eax,eax
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x10
	ret 4

 Block7:
	push 1
	lea eax,[esp+0x10]
	push eax
	mov ecx,ebx
	call CWvsContext::UpdateAutoStartQuestPreStartList
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x10
	ret 4
}
}
// CWvsContext::SendCashSlotItemUseRequest
// 9FC54C
static uint8_t _SUB_5FC4B0_LOOKUP_TABLE_0[32] = {
0, 1, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 
};
__SUB_CLASS_THIS(005FC4B0, __thiscall, 8247,  CWvsContext, void, long, long, _LARGE_INTEGER) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0x10]
	push edi
	mov esi,ecx
	call get_cashslot_item_type
	add esp,4
	cmp eax,8
	jl Block10

 Block1:
	cmp eax,0xB
	jle Block3

 Block2:
	cmp eax,0x27
	jne Block10

 Block3:
	test eax,eax
	je Block10

 Block4:
	add eax,0xFFFFFFF8
	cmp eax,0x1F
	ja Block10

 Block5:
	movzx eax,byte ptr [eax+_SUB_5FC4B0_LOOKUP_TABLE_0]
	cmp EAX, 0
je Block6
cmp EAX, 1
je Block8
cmp EAX, 2
je Block7
cmp EAX, 3
je Block9
cmp EAX, 4
je Block10


 Block6:
	mov ecx,dword ptr [esp+0xC]
	push ecx
	mov ecx,esi
	call CWvsContext::SendActivatePetRequest
	pop edi
	pop esi
	ret 0x10

 Block7:
	mov edx,dword ptr [esp+0x18]
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [esp+0xC]
	push edx
	push eax
	push edi
	push ecx
	mov ecx,esi
	call CWvsContext::SendEntrustedShopCheckRequest
	pop edi
	pop esi
	ret 0x10

 Block8:
	push edi
	mov ecx,esi
	call CWvsContext::SendActiveEffectItemChange
	pop edi
	pop esi
	ret 0x10

 Block9:
	mov edx,dword ptr [esp+0xC]
	push edx
	mov ecx,esi
	call CWvsContext::SendRemoteShopOpenRequest

 Block10:
	pop edi
	pop esi
	ret 0x10
}
}
// CUISkillDec::OnChildNotify
__SUB_CLASS_THIS(00458A60, __thiscall, 68555,  CUISkillDec, void, uint32_t, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov edx,dword ptr [esp+8]
	cmp eax,0x7D1
	jne Block4

 Block1:
	cmp edx,0x12C
	jb Block7

 Block2:
	cmp edx,0x130
	ja Block7

 Block3:
	call CUISkillDec::ResetInfo
	ret 0xC

 Block4:
	cmp eax,0x7D0
	jne Block7

 Block5:
	cmp edx,0x1F4
	jne Block7

 Block6:
	mov eax,dword ptr [esp+0xC]
	push eax
	call CUISkillDec::OnTabChanged
	ret 0xC

 Block7:
	cmp edx,0x64
	jne Block9

 Block8:
	mov edx,dword ptr [ecx]
	push eax
	mov eax,dword ptr [edx+0x20]
	call eax

 Block9:
	ret 0xC
}
}
// CWvsContext::UpdateAutoStartQuestPreStartList
__SUB_CLASS_THIS(005E5F70, __thiscall, 8322,  CWvsContext, void, ZArray<unsigned short>&, int32_t) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push ebp
	mov ebp,ecx
	push edi
	mov ecx,ebx
	xor edi,edi
	call ZArray<unsigned short>::GetCount
	test eax,eax
	jbe Block7

 Block1:
	push esi
	jmp Block3

 Block3:
	mov eax,dword ptr [ebx]
	movzx esi,word ptr [eax+edi*2]
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push esi
	call CQuestMan::IsAutoStartQuest
	test eax,eax
	je Block5

 Block4:
	mov ecx,dword ptr [esp+0x18]
	push ecx
	push esi
	mov ecx,ebp
	call CWvsContext::TryRegisterAutoStartQuest

 Block5:
	mov ecx,ebx
	inc edi
	call ZArray<unsigned short>::GetCount
	cmp edi,eax
	jb Block3

 Block6:
	pop esi

 Block7:
	pop edi
	pop ebp
	pop ebx
	ret 8
}
}
// CWvsContext::SetCharacterData
_SUB_EXCEPTION_HANDLER(5EAE70)
__SUB_CLASS_THIS(005EAE70, __thiscall, 8129,  CWvsContext, void, NakedParam<ZRef<CharacterData>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5EAE70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	lea eax,[esp+0x2C]
	xor edi,edi
	push eax
	lea ecx,[ebx+0x20C8]
	mov dword ptr [esp+0x28],edi
	mov dword ptr [ebx+0x20B8],edi
	call ZRef<CharacterData>::op_assign_copy
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp ecx,edi
	je Block2

 Block1:
	call CUIStatusBar::ResetButtonToolTip

 Block2:
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	call CConfig::GetQuestAlarm
	mov ebp,dword ptr [esp+0x14]
	mov byte ptr [esp+0x24],1
	lea ecx,[ecx]

 Block3:
	test ebp,ebp
	je Block8

 Block4:
	cmp edi,dword ptr [ebp-4]
	jae Block8

 Block5:
	movzx esi,word ptr [ebp+edi*4]
	mov ecx,dword ptr [ebx+0x20CC]
	movzx edx,si
	lea eax,[esp+0x18]
	push eax
	add ecx,0x6F5
	mov dword ptr [esp+0x1C],edx
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetPos
	test eax,eax
	jne Block7

 Block6:
	mov ecx,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	push esi
	call CUIQuestAlarm::DeleteQuest

 Block7:
	inc edi
	jmp Block3

 Block8:
	mov ecx,ebx
	call CWvsContext::ValidateStat
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x24],0
	call ZArray<long>::RemoveAll
	mov eax,dword ptr [esp+0x30]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block12

 Block9:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block12

 Block10:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block12

 Block11:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block12:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 8
}
}
// CWvsContext::OnPostEnterGame
__SUB_CLASS_THIS0(005E6750, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	jmp  CWvsContext::_CheckExpiredProtectItems
}
}
// CWvsContext::GetPrivilegeItem
__SUB_CLASS_THIS(005D72E0, __thiscall, 8407,  CWvsContext, ZRef<PrivilegeItem>*, ZRef<PrivilegeItem>*, long) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp],0
	test eax,eax
	jl Block6

 Block1:
	mov edx,dword ptr [ecx+0x40D4]
	test edx,edx
	je Block6

 Block2:
	cmp eax,dword ptr [edx-4]
	jae Block6

 Block3:
	mov ecx,edx
	mov eax,dword ptr [ecx+eax*8+4]
	push esi
	mov esi,dword ptr [esp+0xC]
	mov dword ptr [esi+4],eax
	test eax,eax
	je Block5

 Block4:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block5:
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block6:
	mov eax,dword ptr [esp+8]
	mov dword ptr [eax+4],0
	pop ecx
	ret 8
}
}
// CTemporaryStatView::TEMPORARY_STAT::TEMPORARY_STAT
_SUB_EXCEPTION_HANDLER(35DE20)
__SUB_CLASS_THIS(0035DE20, __thiscall, 5817,  CTemporaryStatView::TEMPORARY_STAT, void, long, long, long, NakedParam<MY_UINT128>, NakedParam<ZXString<char>>, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35DE20
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x224
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x238]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x1CC],esi
	xor ebp,ebp
	mov dword ptr [esp+0x60],ebp
	xor eax,eax
	mov dword ptr [esi+4],eax
	mov dword ptr [esp+0x240],ebp
	mov dword ptr [esi+8],eax
	push 0x80
	lea eax,[esp+0x258]
	push eax
	lea ecx,[esi+0xC]
	mov byte ptr [esp+0x248],1
	int 3// TODO: 	mov dword ptr [esi],offset CTemporaryStatView::TEMPORARY_STAT::`vftable'
	call MY_UINT128::_ctor_2
	mov ecx,dword ptr [esp+0x24C]
	mov ebx,dword ptr [esp+0x248]
	mov edi,dword ptr [esp+0x268]
	mov dword ptr [esi+0x20],ecx
	lea edx,[esp+0x264]
	lea ecx,[esi+0x28]
	mov dword ptr [esi+0x1C],ebx
	mov dword ptr [esi+0x24],edi
	push edx
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	mov dword ptr [esi+0x2C],ebp
	mov dword ptr [esi+0x30],ebp
	mov eax,dword ptr [esp+0x26C]
	mov ecx,dword ptr [esp+0x250]
	mov dword ptr [esi+0x34],0xFFFFFFFF
	mov dword ptr [esi+0x38],eax
	mov dword ptr [esi+0x3C],ebp
	mov dword ptr [esi+0x40],ebp
	mov dword ptr [esi+0x44],ebp
	mov dword ptr [esp+0x5C],ecx
	mov dword ptr [esp+0x14],ebp
	lea eax,[ebx-1]
	mov byte ptr [esp+0x240],5
	cmp eax,3
	ja Block213

 Block1:
	cmp EAX, 0
je Block12
cmp EAX, 1
je Block2
cmp EAX, 2
je Block96
cmp EAX, 3
je Block165


 Block2:
	cmp edi,ebp
	jne Block4

 Block3:
	mov edi,dword ptr [esp+0x24C]

 Block4:
	xor eax,eax
	cmp edi,0x1F914CE
	jne Block6

 Block5:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetSwallowBuffType
	jmp Block10

 Block6:
	cmp edi,0x4DFCDF
	je Block9

 Block7:
	cmp edi,0x4F837F
	je Block9

 Block8:
	cmp edi,0x217C065
	jne Block10

 Block9:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetDiceBuffType

 Block10:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0xCC]
	push edx
	push edi
	call CSkillInfo::GetSkill
	mov ecx,eax
	call SKILLENTRY::GetIconCanvas_1
	push eax
	lea ecx,[esp+0x18]
	call _x_com_ptr<IWzCanvas>::op_assign_copy
	mov eax,dword ptr [esp+0xC8]
	cmp eax,ebp
	je Block213

 Block11:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx
	jmp Block213

 Block12:
	lea eax,[esp+0xC4]
	push 0x3D0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push ebp
	lea ecx,[esp+0x18]
	push ecx
	push eax
	mov byte ptr [esp+0x24C],6
	call PcCreate_IWzCanvas
	mov eax,dword ptr [esp+0xD0]
	add esp,0xC
	mov byte ptr [esp+0x240],5
	cmp eax,ebp
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block14:
	lea edx,[esp+0x12C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x12C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block16

 Block15:
	push eax
	call _com_issue_error

 Block16:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x10C]
	mov bl,7
	push ecx
	mov byte ptr [esp+0x244],bl
	call edi
	lea edx,[esp+0x10C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block18

 Block17:
	push eax
	call _com_issue_error

 Block18:
	mov ecx,dword ptr [esp+0x14]
	mov byte ptr [esp+0x240],8
	cmp ecx,ebp
	jne Block20

 Block19:
	push 0x80004003
	call _com_issue_error

 Block20:
	lea eax,[esp+0x12C]
	push eax
	lea edx,[esp+0x110]
	push edx
	push 0x20
	push 0x20
	call IWzCanvas::Create
	mov byte ptr [esp+0x240],bl
	mov ebx,8
	cmp word ptr [esp+0x10C],bx
	jne Block23

 Block21:
	xor eax,eax
	mov word ptr [esp+0x10C],ax
	mov eax,dword ptr [esp+0x114]
	cmp eax,ebp
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea ecx,[esp+0x10C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block24:
	mov byte ptr [esp+0x240],5
	cmp word ptr [esp+0x12C],bx
	jne Block27

 Block25:
	mov eax,dword ptr [esp+0x134]
	xor edx,edx
	mov word ptr [esp+0x12C],dx
	cmp eax,ebp
	je Block28

 Block26:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block28

 Block27:
	lea eax,[esp+0x12C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block28:
	mov ecx,3
	mov word ptr [esp+0x15C],cx
	mov dword ptr [esp+0x164],0xFF
	lea edx,[esp+0xCC]
	push edx
	mov byte ptr [esp+0x244],9
	call edi
	lea eax,[esp+0xCC]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block30

 Block29:
	push eax
	call _com_issue_error

 Block30:
	lea ecx,[esp+0x14C]
	push ecx
	mov byte ptr [esp+0x244],0xA
	call edi
	lea edx,[esp+0x14C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block32

 Block31:
	push eax
	call _com_issue_error

 Block32:
	lea eax,[esp+0x15C]
	push eax
	push ebp
	push ebp
	lea ecx,[esp+0xD8]
	push ecx
	lea edx,[esp+0x15C]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x3C],esp
	push 0xB8D
	mov bl,0xB
	push eax
	mov byte ptr [esp+0x260],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0x258],0xC
	cmp dword ptr [_D_G_RM],ebp
	jne Block34

 Block33:
	push 0x80004003
	call _com_issue_error

 Block34:
	lea ecx,[esp+0x194]
	push ecx
	mov byte ptr [esp+0x25C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov edi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x24C],0xD
	cmp edi,ebp
	jne Block36

 Block35:
	push 0x80004003
	call _com_issue_error

 Block36:
	mov ecx,eax
	call Ztl_variant_t::GetUnknown
	push eax
	push ebp
	push ebp
	mov ecx,edi
	call IWzCanvas::Copy
	cmp word ptr [esp+0x17C],8
	mov byte ptr [esp+0x240],bl
	jne Block39

 Block37:
	mov eax,dword ptr [esp+0x184]
	xor edx,edx
	mov word ptr [esp+0x17C],dx
	cmp eax,ebp
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block40

 Block39:
	lea eax,[esp+0x17C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block40:
	mov edi,8
	mov byte ptr [esp+0x240],0xA
	cmp word ptr [esp+0x14C],di
	jne Block43

 Block41:
	mov eax,dword ptr [esp+0x154]
	xor ecx,ecx
	mov word ptr [esp+0x14C],cx
	cmp eax,ebp
	je Block44

 Block42:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block44

 Block43:
	lea edx,[esp+0x14C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block44:
	mov byte ptr [esp+0x240],9
	cmp word ptr [esp+0xCC],di
	jne Block47

 Block45:
	xor eax,eax
	mov word ptr [esp+0xCC],ax
	mov eax,dword ptr [esp+0xD4]
	cmp eax,ebp
	je Block48

 Block46:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block48

 Block47:
	lea ecx,[esp+0xCC]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block48:
	mov byte ptr [esp+0x240],5
	cmp word ptr [esp+0x15C],di
	jne Block51

 Block49:
	mov eax,dword ptr [esp+0x164]
	xor edx,edx
	mov word ptr [esp+0x15C],dx
	cmp eax,ebp
	je Block52

 Block50:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block52

 Block51:
	lea eax,[esp+0x15C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block52:
	mov ecx,dword ptr [esp+0x24C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	lea edx,[esp+0x5C]
	push edx
	call CItemInfo::GetItemInfo
	xor ebp,ebp
	mov dword ptr [esp+0x64],ebp
	mov byte ptr [esp+0x240],0xF
	cmp dword ptr [esp+0x58],ebp
	je Block68

 Block53:
	mov eax,dword ptr [esp+0x24C]
	push eax
	call is_monsterbook_card_item
	add esp,4
	push ecx
	mov dword ptr [esp+0x28],esp
	test eax,eax
	je Block59

 Block54:
	mov ecx,esp
	push 0x95B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x5C]
	mov byte ptr [esp+0x244],0x10
	test ecx,ecx
	jne Block56

 Block55:
	push 0x80004003
	call _com_issue_error

 Block56:
	lea edx,[esp+0x1EC]
	push edx
	mov byte ptr [esp+0x248],0xF
	call IWzProperty::Getitem
	push eax
	lea eax,[esp+0xC4]
	mov bl,0x11
	push eax
	mov byte ptr [esp+0x248],bl
	call get_unknown
	add esp,8
	push eax
	lea ecx,[esp+0x68]
	mov byte ptr [esp+0x244],0x12
	call _x_com_ptr<IWzCanvas>::op_assign_unknown_com_ptr
	mov eax,dword ptr [esp+0xC0]
	mov byte ptr [esp+0x240],bl
	test eax,eax
	je Block58

 Block57:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block58:
	lea ecx,[esp+0x1E8]
	jmp Block64

 Block59:
	mov eax,esp
	push 0x661
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x5C]
	mov byte ptr [esp+0x244],0x13
	test ecx,ecx
	jne Block61

 Block60:
	push 0x80004003
	call _com_issue_error

 Block61:
	lea edx,[esp+0x21C]
	push edx
	mov byte ptr [esp+0x248],0xF
	call IWzProperty::Getitem
	push eax
	lea eax,[esp+0xB4]
	mov bl,0x14
	push eax
	mov byte ptr [esp+0x248],bl
	call get_unknown
	add esp,8
	push eax
	lea ecx,[esp+0x68]
	mov byte ptr [esp+0x244],0x15
	call _x_com_ptr<IWzCanvas>::op_assign_unknown_com_ptr
	mov eax,dword ptr [esp+0xB0]
	mov byte ptr [esp+0x240],bl
	test eax,eax
	je Block63

 Block62:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block63:
	lea ecx,[esp+0x218]

 Block64:
	call Ztl_variant_t::~Ztl_variant_t
	mov ebp,dword ptr [esp+0x64]
	test ebp,ebp
	je Block68

 Block65:
	mov eax,3
	mov word ptr [esp+0x1BC],ax
	mov dword ptr [esp+0x1C4],0xFF
	mov ecx,ebp
	mov byte ptr [esp+0x240],0x16
	call IWzCanvas::Getheight
	mov ecx,0x20
	sub ecx,eax
	mov eax,ecx
	cdq
	sub eax,edx
	sar eax,1
	mov edx,0
	sets dl
	mov ecx,ebp
	dec edx
	and edx,eax
	mov edi,edx
	call IWzCanvas::Getwidth
	mov ecx,0x20
	sub ecx,eax
	mov eax,ecx
	mov ecx,dword ptr [esp+0x14]
	cdq
	sub eax,edx
	sar eax,1
	mov edx,0
	sets dl
	dec edx
	and eax,edx
	test ecx,ecx
	jne Block67

 Block66:
	push 0x80004003
	call _com_issue_error

 Block67:
	lea edx,[esp+0x1BC]
	push edx
	push ebp
	push edi
	push eax
	call IWzCanvas::Copy
	lea ecx,[esp+0x1BC]
	call Ztl_variant_t::~Ztl_variant_t

 Block68:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x1D0]
	mov ebx,1
	push eax
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0xA0],0
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [eax+0x3D]
	push ecx
	add eax,0x39
	push eax
	mov byte ptr [esp+0x248],0x17
	call _ZtlSecureFuseHelper<short>::call
	add esp,8
	lea ecx,[esp+0x1D0]
	movsx edi,ax
	mov byte ptr [esp+0x240],0xF
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,0x10624DD3
	imul edi
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,ebx
	jne Block70

 Block69:
	mov edi,0xD74D33
	jmp Block71

 Block70:
	sub eax,3
	neg eax
	sbb eax,eax
	and eax,0xFE74F32E
	add eax,0x1C9C382
	mov edi,eax

 Block71:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x48]
	push edx
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	lea ecx,[esp+0x9C]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edi
	push eax
	mov byte ptr [esp+0x24C],0x18
	call CSkillInfo::GetSkillLevel_0
	lea ecx,[esp+0x48]
	mov edi,eax
	mov byte ptr [esp+0x240],0xF
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [esp+0x9C]
	test ecx,ecx
	je Block74

 Block72:
	test edi,edi
	je Block74

 Block73:
	push edi
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nY
	mov dword ptr [esp+0x1C],eax
	fild dword ptr [esp+0x1C]
	fdiv qword ptr [__real_4059000000000000]
	call __ftol2_sse
	mov dword ptr [esp+0x1C],eax

 Block74:
	cmp dword ptr [esp+0x248],ebx
	jne Block92

 Block75:
	mov edx,dword ptr [esp+0x24C]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edx
	lea eax,[esp+0x1C]
	push eax
	call CItemInfo::GetItemProp
	cmp dword ptr [esp+0x18],0
	mov byte ptr [esp+0x240],0x19
	je Block79

 Block76:
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push 0x928
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x24]
	mov byte ptr [esp+0x24C],0x1A
	test ecx,ecx
	jne Block78

 Block77:
	push 0x80004003
	call _com_issue_error

 Block78:
	lea edx,[esp+0x204]
	push edx
	mov byte ptr [esp+0x250],0x19
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0x248],0x1B
	mov dword ptr [esp+0x68],1
	call Ztl_variant_t::GetUnknown
	jmp Block80

 Block79:
	xor eax,eax

 Block80:
	push eax
	lea ecx,[esp+0x28]
	call _x_com_ptr<IWzProperty>::CreateFromUnknown
	test byte ptr [esp+0x60],1
	mov ebx,0x1D
	mov dword ptr [esp+0x240],ebx
	je Block82

 Block81:
	lea ecx,[esp+0x1F8]
	call Ztl_variant_t::~Ztl_variant_t

 Block82:
	mov edi,dword ptr [esp+0x24]
	test edi,edi
	je Block84

 Block83:
	mov eax,dword ptr [esp+0x250]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x68],esp
	push 0x963
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea edx,[esp+0x210]
	mov byte ptr [esp+0x248],0x1E
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x24C],bl
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0x248],0x1F
	call get_int32
	add esp,8
	lea ecx,[esp+0x208]
	mov dword ptr [esp+0x5C],eax
	mov byte ptr [esp+0x240],bl
	call Ztl_variant_t::~Ztl_variant_t

 Block84:
	mov eax,dword ptr [esp+0x24C]
	push eax
	lea ecx,[esp+0x9C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemInfo
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x68],esp
	push 0xFEE
	push edx
	mov byte ptr [esp+0x250],0x20
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0xA0]
	mov byte ptr [esp+0x248],0x21
	test ecx,ecx
	jne Block86

 Block85:
	push 0x80004003
	call _com_issue_error

 Block86:
	lea eax,[esp+0x230]
	push eax
	mov byte ptr [esp+0x24C],0x20
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0x248],0x22
	call get_int32
	add esp,8
	neg eax
	sbb eax,eax
	neg eax
	lea ecx,[esp+0x228]
	mov dword ptr [esi+0x3C],eax
	call Ztl_variant_t::~Ztl_variant_t
	mov eax,dword ptr [esp+0x98]
	mov byte ptr [esp+0x240],bl
	test eax,eax
	je Block88

 Block87:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block88:
	mov byte ptr [esp+0x240],0x19
	test edi,edi
	je Block90

 Block89:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block90:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x240],0xF
	test eax,eax
	je Block92

 Block91:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block92:
	mov eax,dword ptr [esp+0x1C]
	imul eax,dword ptr [esp+0x5C]
	mov dword ptr [esp+0x5C],eax
	mov byte ptr [esp+0x240],0xE
	test ebp,ebp
	je Block94

 Block93:
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx+8]
	push ebp
	call edx

 Block94:
	mov eax,dword ptr [esp+0x58]
	mov byte ptr [esp+0x240],5
	test eax,eax
	je Block213

 Block95:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx
	jmp Block213

 Block96:
	lea eax,[esp+0xBC]
	push 0x3D0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push ebp
	lea ecx,[esp+0x18]
	push ecx
	push eax
	mov byte ptr [esp+0x24C],0x23
	call PcCreate_IWzCanvas
	mov eax,dword ptr [esp+0xC8]
	add esp,0xC
	mov byte ptr [esp+0x240],5
	cmp eax,ebp
	je Block98

 Block97:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block98:
	lea edx,[esp+0xFC]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0xFC]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block100

 Block99:
	push eax
	call _com_issue_error

 Block100:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x16C]
	mov bl,0x24
	push ecx
	mov byte ptr [esp+0x244],bl
	call edi
	lea edx,[esp+0x16C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block102

 Block101:
	push eax
	call _com_issue_error

 Block102:
	mov ecx,dword ptr [esp+0x14]
	mov byte ptr [esp+0x240],0x25
	cmp ecx,ebp
	jne Block104

 Block103:
	push 0x80004003
	call _com_issue_error

 Block104:
	lea eax,[esp+0xFC]
	push eax
	lea edx,[esp+0x170]
	push edx
	push 0x20
	push 0x20
	call IWzCanvas::Create
	mov byte ptr [esp+0x240],bl
	mov ebx,8
	cmp word ptr [esp+0x16C],bx
	jne Block107

 Block105:
	xor eax,eax
	mov word ptr [esp+0x16C],ax
	mov eax,dword ptr [esp+0x174]
	cmp eax,ebp
	je Block108

 Block106:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block108

 Block107:
	lea ecx,[esp+0x16C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block108:
	mov byte ptr [esp+0x240],5
	cmp word ptr [esp+0xFC],bx
	jne Block111

 Block109:
	mov eax,dword ptr [esp+0x104]
	xor edx,edx
	mov word ptr [esp+0xFC],dx
	cmp eax,ebp
	je Block112

 Block110:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block112

 Block111:
	lea eax,[esp+0xFC]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block112:
	mov ecx,3
	mov word ptr [esp+0xDC],cx
	mov dword ptr [esp+0xE4],0xFF
	lea edx,[esp+0x11C]
	push edx
	mov byte ptr [esp+0x244],0x26
	call edi
	lea eax,[esp+0x11C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block114

 Block113:
	push eax
	call _com_issue_error

 Block114:
	lea ecx,[esp+0x13C]
	push ecx
	mov byte ptr [esp+0x244],0x27
	call edi
	lea edx,[esp+0x13C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block116

 Block115:
	push eax
	call _com_issue_error

 Block116:
	lea eax,[esp+0xDC]
	push eax
	push ebp
	push ebp
	lea ecx,[esp+0x128]
	push ecx
	lea edx,[esp+0x14C]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x3C],esp
	push 0xB8D
	mov bl,0x28
	push eax
	mov byte ptr [esp+0x260],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0x258],0x29
	cmp dword ptr [_D_G_RM],ebp
	jne Block118

 Block117:
	push 0x80004003
	call _com_issue_error

 Block118:
	lea ecx,[esp+0x1B4]
	push ecx
	mov byte ptr [esp+0x25C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov edi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x24C],0x2A
	cmp edi,ebp
	jne Block120

 Block119:
	push 0x80004003
	call _com_issue_error

 Block120:
	mov ecx,eax
	call Ztl_variant_t::GetUnknown
	push eax
	push ebp
	push ebp
	mov ecx,edi
	call IWzCanvas::Copy
	cmp word ptr [esp+0x19C],8
	mov byte ptr [esp+0x240],bl
	jne Block123

 Block121:
	mov eax,dword ptr [esp+0x1A4]
	xor edx,edx
	mov word ptr [esp+0x19C],dx
	cmp eax,ebp
	je Block124

 Block122:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block124

 Block123:
	lea eax,[esp+0x19C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block124:
	mov ebx,8
	mov byte ptr [esp+0x240],0x27
	cmp word ptr [esp+0x13C],bx
	jne Block131

 Block125:
	mov eax,dword ptr [esp+0x144]
	xor ecx,ecx
	mov word ptr [esp+0x13C],cx
	cmp eax,ebp
	je Block127

 Block126:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block127:
	mov edi,dword ptr [ZImports::_VariantClear]

 Block128:
	mov byte ptr [esp+0x240],0x26
	cmp word ptr [esp+0x11C],bx
	jne Block132

 Block129:
	xor eax,eax
	mov word ptr [esp+0x11C],ax
	mov eax,dword ptr [esp+0x124]
	cmp eax,ebp
	je Block133

 Block130:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block133

 Block131:
	mov edi,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0x13C]
	push edx
	call edi
	jmp Block128

 Block132:
	lea ecx,[esp+0x11C]
	push ecx
	call edi

 Block133:
	mov byte ptr [esp+0x240],5
	cmp word ptr [esp+0xDC],bx
	jne Block136

 Block134:
	mov eax,dword ptr [esp+0xE4]
	xor edx,edx
	mov word ptr [esp+0xDC],dx
	cmp eax,ebp
	je Block137

 Block135:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block137

 Block136:
	lea eax,[esp+0xDC]
	push eax
	call edi

 Block137:
	mov dword ptr [esp+0x1C],ebp
	mov dword ptr [esp+0x18],ebp
	lea ecx,[esp+0xB4]
	push 0xE25
	push ecx
	mov byte ptr [esp+0x248],0x2C
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [esp+0x24C]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x20]
	push eax
	mov byte ptr [esp+0x24C],0x2D
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [esp+0xC0]
	add esp,0xC
	mov byte ptr [esp+0x240],0x2C
	cmp eax,ebp
	je Block139

 Block138:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block139:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x68]
	push ecx
	call ebx
	lea edx,[esp+0x68]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block141

 Block140:
	push eax
	call _com_issue_error

 Block141:
	lea eax,[esp+0xEC]
	push eax
	mov byte ptr [esp+0x244],0x2E
	call ebx
	lea ecx,[esp+0xEC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block143

 Block142:
	push eax
	call _com_issue_error

 Block143:
	push ebp
	push ebp
	lea edx,[esp+0x70]
	push edx
	mov edx,dword ptr [esp+0x24]
	lea eax,[esp+0xF8]
	push eax
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0x2F
	push edx
	mov byte ptr [esp+0x258],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x254],0x30
	cmp dword ptr [_D_G_RM],ebp
	jne Block145

 Block144:
	push 0x80004003
	call _com_issue_error

 Block145:
	lea eax,[esp+0x1A0]
	mov byte ptr [esp+0x254],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x248],0x31
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x20]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block148

 Block146:
	cmp eax,0x80004002
	je Block148

 Block147:
	push eax
	call _com_issue_error

 Block148:
	mov byte ptr [esp+0x240],bl
	mov ebx,8
	cmp word ptr [esp+0x18C],bx
	jne Block151

 Block149:
	mov eax,dword ptr [esp+0x194]
	xor ecx,ecx
	mov word ptr [esp+0x18C],cx
	cmp eax,ebp
	je Block152

 Block150:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block152

 Block151:
	lea edx,[esp+0x18C]
	push edx
	call edi

 Block152:
	mov byte ptr [esp+0x240],0x2E
	cmp word ptr [esp+0xEC],bx
	jne Block155

 Block153:
	xor eax,eax
	mov word ptr [esp+0xEC],ax
	mov eax,dword ptr [esp+0xF4]
	cmp eax,ebp
	je Block156

 Block154:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block156

 Block155:
	lea ecx,[esp+0xEC]
	push ecx
	call edi

 Block156:
	mov byte ptr [esp+0x240],0x2C
	cmp word ptr [esp+0x68],bx
	jne Block159

 Block157:
	mov eax,dword ptr [esp+0x70]
	xor edx,edx
	mov word ptr [esp+0x68],dx
	cmp eax,ebp
	je Block160

 Block158:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block160

 Block159:
	lea eax,[esp+0x68]
	push eax
	call edi

 Block160:
	mov edi,dword ptr [esp+0x1C]
	cmp edi,ebp
	je Block164

 Block161:
	mov ecx,3
	mov word ptr [esp+0x1AC],cx
	mov dword ptr [esp+0x1B4],0xFF
	mov ecx,edi
	mov byte ptr [esp+0x240],0x32
	call IWzCanvas::Getheight
	mov edx,0x20
	sub edx,eax
	mov eax,edx
	cdq
	sub eax,edx
	sar eax,1
	mov ecx,0
	sets cl
	dec ecx
	and ecx,eax
	mov ebp,ecx
	mov ecx,edi
	call IWzCanvas::Getwidth
	mov edx,0x20
	sub edx,eax
	mov eax,edx
	cdq
	sub eax,edx
	sar eax,1
	mov ecx,0
	sets cl
	dec ecx
	and eax,ecx
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	jne Block163

 Block162:
	push 0x80004003
	call _com_issue_error

 Block163:
	lea edx,[esp+0x1AC]
	push edx
	push edi
	push ebp
	push eax
	call IWzCanvas::Copy
	lea ecx,[esp+0x1AC]
	call Ztl_variant_t::~Ztl_variant_t
	xor ebp,ebp

 Block164:
	mov byte ptr [esp+0x240],0x2B
	jmp Block209

 Block165:
	lea edx,[esp+0xB8]
	push 0x3D0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push ebp
	lea ecx,[esp+0x18]
	push ecx
	push eax
	mov byte ptr [esp+0x24C],0x33
	call PcCreate_IWzCanvas
	mov eax,dword ptr [esp+0xC4]
	add esp,0xC
	mov byte ptr [esp+0x240],5
	cmp eax,ebp
	je Block167

 Block166:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block167:
	lea edx,[esp+0x78]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x78]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block169

 Block168:
	push eax
	call _com_issue_error

 Block169:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x88]
	mov bl,0x34
	push ecx
	mov byte ptr [esp+0x244],bl
	call edi
	lea edx,[esp+0x88]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block171

 Block170:
	push eax
	call _com_issue_error

 Block171:
	mov ecx,dword ptr [esp+0x14]
	mov byte ptr [esp+0x240],0x35
	cmp ecx,ebp
	jne Block173

 Block172:
	push 0x80004003
	call _com_issue_error

 Block173:
	lea eax,[esp+0x78]
	push eax
	lea edx,[esp+0x8C]
	push edx
	push 0x20
	push 0x20
	call IWzCanvas::Create
	cmp word ptr [esp+0x88],8
	mov byte ptr [esp+0x240],bl
	jne Block176

 Block174:
	xor eax,eax
	mov word ptr [esp+0x88],ax
	mov eax,dword ptr [esp+0x90]
	cmp eax,ebp
	je Block177

 Block175:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block177

 Block176:
	lea ecx,[esp+0x88]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block177:
	cmp word ptr [esp+0x78],8
	mov byte ptr [esp+0x240],5
	jne Block180

 Block178:
	mov eax,dword ptr [esp+0x80]
	xor edx,edx
	mov word ptr [esp+0x78],dx
	cmp eax,ebp
	je Block181

 Block179:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block181

 Block180:
	lea eax,[esp+0x78]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block181:
	mov dword ptr [esp+0x1C],ebp
	mov dword ptr [esp+0x18],ebp
	lea ecx,[esp+0x20]
	push 0x11F3
	push ecx
	mov byte ptr [esp+0x248],0x37
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [esp+0x24C]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x20]
	push eax
	mov byte ptr [esp+0x24C],0x38
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0xC
	mov byte ptr [esp+0x240],0x37
	cmp eax,ebp
	je Block183

 Block182:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block183:
	lea ecx,[esp+0x28]
	push ecx
	call edi
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block185

 Block184:
	push eax
	call _com_issue_error

 Block185:
	lea eax,[esp+0x38]
	push eax
	mov byte ptr [esp+0x244],0x39
	call edi
	lea ecx,[esp+0x38]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block187

 Block186:
	push eax
	call _com_issue_error

 Block187:
	push ebp
	push ebp
	lea edx,[esp+0x30]
	push edx
	mov edx,dword ptr [esp+0x24]
	lea eax,[esp+0x44]
	push eax
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0x3A
	push edx
	mov byte ptr [esp+0x258],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x254],0x3B
	cmp dword ptr [_D_G_RM],ebp
	jne Block189

 Block188:
	push 0x80004003
	call _com_issue_error

 Block189:
	lea eax,[esp+0xB4]
	mov byte ptr [esp+0x254],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x248],0x3C
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x20]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block192

 Block190:
	cmp eax,0x80004002
	je Block192

 Block191:
	push eax
	call _com_issue_error

 Block192:
	mov edi,8
	mov byte ptr [esp+0x240],bl
	cmp word ptr [esp+0xA0],di
	jne Block195

 Block193:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	cmp eax,ebp
	je Block196

 Block194:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block196

 Block195:
	lea edx,[esp+0xA0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block196:
	mov byte ptr [esp+0x240],0x39
	cmp word ptr [esp+0x38],di
	jne Block199

 Block197:
	xor eax,eax
	mov word ptr [esp+0x38],ax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebp
	je Block200

 Block198:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block200

 Block199:
	lea ecx,[esp+0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block200:
	mov byte ptr [esp+0x240],0x37
	cmp word ptr [esp+0x28],di
	jne Block203

 Block201:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	cmp eax,ebp
	je Block204

 Block202:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block204

 Block203:
	lea eax,[esp+0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block204:
	mov edi,dword ptr [esp+0x1C]
	cmp edi,ebp
	je Block208

 Block205:
	mov ecx,3
	mov word ptr [esp+0x1D8],cx
	mov dword ptr [esp+0x1E0],0xFF
	mov ecx,edi
	mov byte ptr [esp+0x240],0x3D
	call IWzCanvas::Getheight
	mov edx,0x20
	sub edx,eax
	mov eax,edx
	cdq
	sub eax,edx
	sar eax,1
	mov ecx,0
	sets cl
	dec ecx
	and ecx,eax
	mov ebp,ecx
	mov ecx,edi
	call IWzCanvas::Getwidth
	mov edx,0x20
	sub edx,eax
	mov eax,edx
	cdq
	sub eax,edx
	sar eax,1
	mov ecx,0
	sets cl
	dec ecx
	and eax,ecx
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	jne Block207

 Block206:
	push 0x80004003
	call _com_issue_error

 Block207:
	lea edx,[esp+0x1D8]
	push edx
	push edi
	push ebp
	push eax
	call IWzCanvas::Copy
	lea ecx,[esp+0x1D8]
	call Ztl_variant_t::~Ztl_variant_t
	xor ebp,ebp

 Block208:
	mov byte ptr [esp+0x240],0x36

 Block209:
	mov eax,dword ptr [esp+0x18]
	cmp eax,ebp
	je Block211

 Block210:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block211:
	mov byte ptr [esp+0x240],5
	cmp edi,ebp
	je Block213

 Block212:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block213:
	lea edx,[esp+0x38]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x38]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	xor ebp,ebp
	add esp,8
	cmp eax,ebp
	jge Block215

 Block214:
	push eax
	call _com_issue_error

 Block215:
	mov ecx,3
	mov word ptr [esp+0x28],cx
	mov dword ptr [esp+0x30],ebp
	mov ecx,dword ptr [_D_G_GR]
	mov byte ptr [esp+0x240],0x3F
	cmp ecx,ebp
	jne Block217

 Block216:
	push 0x80004003
	call _com_issue_error

 Block217:
	lea edx,[esp+0x38]
	push edx
	lea eax,[esp+0x2C]
	push eax
	push 0xC006156C
	push ebp
	push ebp
	push ebp
	push ebp
	lea edx,[esp+0x3C]
	push edx
	call IWzGr2D::CreateLayer
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x2C]
	cmp edi,eax
	je Block222

 Block218:
	mov dword ptr [esi+0x2C],eax
	cmp eax,ebp
	je Block220

 Block219:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block220:
	cmp edi,ebp
	je Block222

 Block221:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block222:
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebp
	je Block224

 Block223:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block224:
	mov ebx,8
	mov byte ptr [esp+0x240],0x3E
	cmp word ptr [esp+0x28],bx
	jne Block227

 Block225:
	mov eax,dword ptr [esp+0x30]
	xor ecx,ecx
	mov word ptr [esp+0x28],cx
	cmp eax,ebp
	je Block228

 Block226:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block228

 Block227:
	lea edx,[esp+0x28]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block228:
	mov byte ptr [esp+0x240],5
	cmp word ptr [esp+0x38],bx
	jne Block231

 Block229:
	xor eax,eax
	mov word ptr [esp+0x38],ax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebp
	je Block232

 Block230:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block232

 Block231:
	lea ecx,[esp+0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block232:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 2
	lea edx,[esp+0x24]
	push edx
	call CWndMan::GetOrgWindow
	mov eax,dword ptr [eax]
	mov ecx,0xD
	mov byte ptr [esp+0x240],0x40
	mov word ptr [esp+0x48],cx
	mov dword ptr [esp+0x50],eax
	cmp eax,ebp
	je Block234

 Block233:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block234:
	mov edi,dword ptr [esi+0x2C]
	mov byte ptr [esp+0x240],0x41
	cmp edi,ebp
	jne Block236

 Block235:
	push 0x80004003
	call _com_issue_error

 Block236:
	mov edx,dword ptr [esp+0x48]
	mov ecx,dword ptr [edi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x5C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x60]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push edi
	call eax
	cmp eax,ebp
	jge Block238

 Block237:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push edi
	push eax
	call _com_issue_errorex

 Block238:
	mov byte ptr [esp+0x240],0x40
	cmp word ptr [esp+0x48],bx
	jne Block241

 Block239:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	cmp eax,ebp
	je Block242

 Block240:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block242

 Block241:
	lea edx,[esp+0x48]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block242:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x240],5
	cmp eax,ebp
	je Block244

 Block243:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block244:
	mov edi,dword ptr [esi+0x2C]
	cmp edi,ebp
	jne Block246

 Block245:
	push 0x80004003
	call _com_issue_error

 Block246:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+0xE0]
	push 0xD2FFFFFF
	push edi
	call ecx
	cmp eax,ebp
	jge Block248

 Block247:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block248:
	lea edx,[esp+0x68]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x68]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block250

 Block249:
	push eax
	call _com_issue_error

 Block250:
	lea ecx,[esp+0x88]
	mov bl,0x42
	push ecx
	mov byte ptr [esp+0x244],bl
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x88]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block252

 Block251:
	push eax
	call _com_issue_error

 Block252:
	mov eax,3
	mov word ptr [esp+0x78],ax
	mov dword ptr [esp+0x80],0x40
	mov ecx,eax
	mov word ptr [esp+0x38],cx
	mov dword ptr [esp+0x40],0xD2
	mov edx,eax
	mov word ptr [esp+0x28],dx
	mov dword ptr [esp+0x30],0x1F4
	mov ecx,dword ptr [esi+0x2C]
	mov byte ptr [esp+0x240],0x46
	cmp ecx,ebp
	jne Block254

 Block253:
	push 0x80004003
	call _com_issue_error

 Block254:
	lea eax,[esp+0x68]
	push eax
	lea edx,[esp+0x8C]
	push edx
	lea eax,[esp+0x80]
	push eax
	lea edx,[esp+0x44]
	push edx
	mov edx,dword ptr [esp+0x24]
	lea eax,[esp+0x38]
	push eax
	push edx
	lea eax,[esp+0xB8]
	push eax
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0xA0],8
	jne Block261

 Block255:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	cmp eax,ebp
	je Block257

 Block256:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block257:
	mov edi,dword ptr [ZImports::_VariantClear]

 Block258:
	cmp word ptr [esp+0x28],8
	mov byte ptr [esp+0x240],0x45
	jne Block262

 Block259:
	xor eax,eax
	mov word ptr [esp+0x28],ax
	mov eax,dword ptr [esp+0x30]
	cmp eax,ebp
	je Block263

 Block260:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block263

 Block261:
	mov edi,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0xA0]
	push edx
	call edi
	jmp Block258

 Block262:
	lea ecx,[esp+0x28]
	push ecx
	call edi

 Block263:
	cmp word ptr [esp+0x38],8
	mov byte ptr [esp+0x240],0x44
	jne Block266

 Block264:
	mov eax,dword ptr [esp+0x40]
	xor edx,edx
	mov word ptr [esp+0x38],dx
	cmp eax,ebp
	je Block267

 Block265:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block267

 Block266:
	lea eax,[esp+0x38]
	push eax
	call edi

 Block267:
	cmp word ptr [esp+0x78],8
	mov byte ptr [esp+0x240],0x43
	jne Block270

 Block268:
	mov eax,dword ptr [esp+0x80]
	xor ecx,ecx
	mov word ptr [esp+0x78],cx
	cmp eax,ebp
	je Block271

 Block269:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block271

 Block270:
	lea edx,[esp+0x78]
	push edx
	call edi

 Block271:
	cmp word ptr [esp+0x88],8
	mov byte ptr [esp+0x240],bl
	jne Block274

 Block272:
	xor eax,eax
	mov word ptr [esp+0x88],ax
	mov eax,dword ptr [esp+0x90]
	cmp eax,ebp
	je Block275

 Block273:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block275

 Block274:
	lea ecx,[esp+0x88]
	push ecx
	call edi

 Block275:
	cmp word ptr [esp+0x68],8
	mov byte ptr [esp+0x240],5
	jne Block278

 Block276:
	mov eax,dword ptr [esp+0x70]
	xor edx,edx
	mov word ptr [esp+0x68],dx
	cmp eax,ebp
	je Block279

 Block277:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block279

 Block278:
	lea eax,[esp+0x68]
	push eax
	call edi

 Block279:
	lea ecx,[esp+0x38]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x38]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block281

 Block280:
	push eax
	call _com_issue_error

 Block281:
	mov eax,3
	mov word ptr [esp+0x28],ax
	mov dword ptr [esp+0x30],ebp
	mov ecx,dword ptr [_D_G_GR]
	mov byte ptr [esp+0x240],0x48
	cmp ecx,ebp
	jne Block283

 Block282:
	push 0x80004003
	call _com_issue_error

 Block283:
	lea edx,[esp+0x38]
	push edx
	lea eax,[esp+0x2C]
	push eax
	push 0xC006156C
	push ebp
	push ebp
	push ebp
	push ebp
	lea edx,[esp+0x3C]
	push edx
	call IWzGr2D::CreateLayer
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x30]
	cmp edi,eax
	je Block288

 Block284:
	mov dword ptr [esi+0x30],eax
	cmp eax,ebp
	je Block286

 Block285:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block286:
	cmp edi,ebp
	je Block288

 Block287:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block288:
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebp
	je Block290

 Block289:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block290:
	mov edi,8
	mov byte ptr [esp+0x240],0x47
	cmp word ptr [esp+0x28],di
	jne Block293

 Block291:
	mov eax,dword ptr [esp+0x30]
	xor ecx,ecx
	mov word ptr [esp+0x28],cx
	cmp eax,ebp
	je Block294

 Block292:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block294

 Block293:
	lea edx,[esp+0x28]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block294:
	mov byte ptr [esp+0x240],5
	cmp word ptr [esp+0x38],di
	jne Block297

 Block295:
	xor eax,eax
	mov word ptr [esp+0x38],ax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebp
	je Block298

 Block296:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block298

 Block297:
	lea ecx,[esp+0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block298:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 2
	lea edx,[esp+0x24]
	push edx
	call CWndMan::GetOrgWindow
	mov eax,dword ptr [eax]
	mov bl,0x49
	mov ecx,0xD
	mov byte ptr [esp+0x240],bl
	mov word ptr [esp+0x48],cx
	mov dword ptr [esp+0x50],eax
	cmp eax,ebp
	je Block300

 Block299:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block300:
	mov edi,dword ptr [esi+0x30]
	mov byte ptr [esp+0x240],0x4A
	cmp edi,ebp
	jne Block302

 Block301:
	push 0x80004003
	call _com_issue_error

 Block302:
	mov edx,dword ptr [esp+0x48]
	mov ecx,dword ptr [edi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x5C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x60]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push edi
	call eax
	cmp eax,ebp
	jge Block304

 Block303:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push edi
	push eax
	call _com_issue_errorex

 Block304:
	cmp word ptr [esp+0x48],8
	mov byte ptr [esp+0x240],bl
	jne Block307

 Block305:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	cmp eax,ebp
	je Block308

 Block306:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block308

 Block307:
	lea edx,[esp+0x48]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block308:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x240],5
	cmp eax,ebp
	je Block310

 Block309:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block310:
	mov edi,dword ptr [esi+0x30]
	cmp edi,ebp
	jne Block312

 Block311:
	push 0x80004003
	call _com_issue_error

 Block312:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+0xE0]
	push 0xD2FFFFFF
	push edi
	call ecx
	cmp eax,ebp
	jge Block314

 Block313:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block314:
	mov eax,dword ptr [esp+0x5C]
	cdq
	and edx,0xF
	add eax,edx
	mov edx,dword ptr [esp+0x250]
	sar eax,4
	push edx
	mov ecx,esi
	mov dword ptr [esi+0x44],eax
	call CTemporaryStatView::TEMPORARY_STAT::SetLeft
	cmp dword ptr [esi+0x38],ebp
	je Block317

 Block315:
	call get_update_time
	cmp eax,dword ptr [esi+0x38]
	jge Block317

 Block316:
	mov ecx,esi
	call CTemporaryStatView::TEMPORARY_STAT::Hide

 Block317:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x240],4
	cmp eax,ebp
	je Block319

 Block318:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block319:
	mov eax,dword ptr [esp+0x264]
	mov dword ptr [esp+0x240],0xFFFFFFFF
	cmp eax,ebp
	je Block321

 Block320:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block321:
	mov eax,esi
	mov ecx,dword ptr [esp+0x238]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi

 Block322:
	pop esi
	pop ebp
	pop ebx
	add esp,0x230
	ret 0x28
}
}
// CWvsContext::AddWorldMapQuestDemandItem
_SUB_EXCEPTION_HANDLER(5E8F30)
__SUB_CLASS_THIS(005E8F30, __thiscall, 8434,  CWvsContext, void, unsigned long, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E8F30
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebp,ebp
	push ebp
	lea eax,[esp+0x4C]
	push eax
	lea ecx,[esi+0x423C]
	mov dword ptr [esp+0x1C],ebp
	call ZList<unsigned long>::Find
	cmp eax,ebp
	je Block2

 Block1:
	mov dword ptr [esp+0x14],1

 Block2:
	mov ebx,dword ptr [esp+0x44]
	xor edx,edx
	lea edi,[esi+0x4250]
	xor ecx,ecx
	lea ebx,[ebx]

 Block3:
	mov eax,dword ptr [edi]
	cmp eax,ebp
	je Block9

 Block4:
	cmp edx,dword ptr [eax-4]
	jae Block9

 Block5:
	mov esi,eax
	add esi,ecx
	cmp dword ptr [esi],ebx
	je Block7

 Block6:
	inc edx
	add ecx,0x1C
	jmp Block3

 Block7:
	push ebp
	lea ecx,[esp+0x4C]
	lea edi,[esi+8]
	push ecx
	mov ecx,edi
	call ZList<unsigned long>::Find
	cmp eax,ebp
	jne Block13

 Block8:
	mov edx,dword ptr [esp+0x14]
	mov ecx,edi
	mov dword ptr [esi+4],edx
	call ZList<unsigned long>::AddTail_
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr [eax],ecx
	jmp Block13

 Block9:
	int 3// TODO: 	mov dword ptr [esp+0x20],offset ZList<unsigned long>::`vftable'
	mov dword ptr [esp+0x28],ebp
	mov dword ptr [esp+0x2C],ebp
	mov dword ptr [esp+0x30],ebp
	mov edx,dword ptr [esp+0x14]
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x3C],ebp
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x1C],edx
	call ZList<unsigned long>::AddTail_
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr [eax],ecx
	push 0xFFFFFFFF
	mov ecx,edi
	call ZArray<WORLDMAPQUESTDEMANDITEM>::InsertBefore
	mov ecx,dword ptr [esp+0x1C]
	mov edx,dword ptr [esp+0x18]
	lea esi,[eax+8]
	mov dword ptr [eax+4],ecx
	mov ecx,esi
	mov dword ptr [eax],edx
	call ZList<unsigned long>::RemoveAll
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x48],eax
	cmp eax,ebp
	je Block12

 Block10:
	lea esp,[esp]

 Block11:
	lea edx,[esp+0x48]
	push edx
	call ZList<unsigned long>::GetNext
	add esp,4
	mov ecx,esi
	mov edi,eax
	call ZList<unsigned long>::AddTail_
	mov ecx,dword ptr [edi]
	mov dword ptr [eax],ecx
	cmp dword ptr [esp+0x48],ebp
	jne Block11

 Block12:
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x3C],1
	call ZList<unsigned long>::RemoveAll
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	int 3// TODO: 	mov dword ptr [esp+0x20],offset ZList<unsigned long>::`vftable'
	call ZList<unsigned long>::RemoveAll

 Block13:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret 8
}
}
// COpenGatePool::OnPacket
__SUB_CLASS_THIS(0028C8B0, __thiscall, 51991,  COpenGatePool, void, long, CInPacket&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	sub eax,0x14C
	je Block3

 Block1:
	sub eax,1
	jne Block4

 Block2:
	mov eax,dword ptr [esp+8]
	push eax
	call COpenGatePool::OnOpenGateRemoved
	ret 8

 Block3:
	mov edx,dword ptr [esp+8]
	push edx
	call COpenGatePool::OnOpenGateCreated

 Block4:
	ret 8
}
}
// CUISkillDec::GetExcessSP
__SUB_CLASS_THIS(00452670, __thiscall, 68564,  CUISkillDec, long, long) {
__asm {

 Block0:
	sub esp,0x14
	mov eax,dword ptr [esp+0x18]
	inc eax
	mov dword ptr [esp+0x18],eax
	dec eax
	cmp eax,3
	ja Block14

 Block1:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebx
	push ebp
	push esi
	push edi
	lea eax,[esp+0x1C]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x1C]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [edi+0x3D]
	push ecx
	lea ebp,[edi+0x39]
	push ebp
	mov dword ptr [esp+0x18],0
	call _ZtlSecureFuseHelper<short>::call
	lea ebx,[edi+0x53D]
	add esp,8
	mov ecx,ebx
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x14],eax
	test eax,eax
	je Block7

 Block2:
	lea edx,[esp+0x18]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebx
	call ZMap<long, long, long>::GetNext
	mov ecx,dword ptr [eax]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov esi,edx
	shr esi,0x1F
	add esi,edx
	push esi
	call get_job_level
	mov ecx,eax
	mov eax,0x10624DD3
	imul esi
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	imul eax,0x3E8
	mov edx,esi
	add esp,4
	sub edx,eax
	je Block6

 Block3:
	cmp esi,0x7D1
	je Block6

 Block4:
	cmp dword ptr [esp+0x28],ecx
	jne Block6

 Block5:
	mov eax,dword ptr [esp+0x18]
	add dword ptr [esp+0x10],eax

 Block6:
	cmp dword ptr [esp+0x14],0
	jne Block2

 Block7:
	mov ecx,dword ptr [edi+0x3D]
	push ecx
	push ebp
	call _ZtlSecureFuseHelper<short>::call
	mov edx,dword ptr [edi+0x3D]
	push edx
	push ebp
	movzx esi,ax
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,dword ptr [esp+0x38]
	movzx ebx,word ptr [edi+0xF7]
	inc ecx
	push ecx
	movsx edx,si
	movzx eax,ax
	push ebx
	push edx
	mov dword ptr [esp+0x34],eax
	call get_job_change_level
	movsx ecx,word ptr [esp+0x34]
	mov esi,eax
	mov eax,dword ptr [esp+0x44]
	push eax
	push ebx
	push ecx
	call get_job_change_level
	mov edx,dword ptr [edi+0x3D]
	push edx
	sub esi,eax
	push ebp
	lea esi,[esi+esi*2+1]
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add esp,0x30
	add eax,edx
	jne Block13

 Block8:
	cmp word ptr [edi+0xF7],1
	jne Block13

 Block9:
	mov eax,dword ptr [esp+0x28]
	cmp eax,2
	jne Block11

 Block10:
	mov eax,dword ptr [esp+0x10]
	inc esi
	pop edi
	sub eax,esi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 4

 Block11:
	cmp eax,3
	jne Block13

 Block12:
	add esi,2

 Block13:
	mov eax,dword ptr [esp+0x10]
	pop edi
	sub eax,esi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 4

 Block14:
	xor eax,eax
	add esp,0x14
	ret 4
}
}
// CUISkillDecEX::CUISkillDecEX
_SUB_EXCEPTION_HANDLER(5E6560)
__SUB_CLASS_THIS0(005E6560, __thiscall, 68629,  CUISkillDecEX, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6560
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	call CDialog::_ctor_default
	xor edi,edi
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillDecEX::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillDecEX::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillDecEX::`vftable'{for `ZRefCounted'}
	mov dword ptr [esp+0x18],edi
	mov dword ptr [esi+0x90],edi
	mov dword ptr [esi+0x98],edi
	mov dword ptr [esi+0xA0],edi
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push offset ZRef<CCtrlButton>::_ctor_default
	push 4
	push 8
	lea eax,[esi+0xA4]
	push eax
	mov byte ptr [esp+0x2C],3
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0xC8],edi
	mov dword ptr [esi+0xD0],edi
	mov dword ptr [esi+0xD4],edi
	mov dword ptr [esi+0xD8],edi
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::OnFieldSetVariable
_SUB_EXCEPTION_HANDLER(5E4870)
__SUB_CLASS_THIS(005E4870, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E4870
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [esp+0x2C]
	lea eax,[esp+0xC]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x28],0
	call CInPacket::DecodeStr
	lea edx,[esp+0x10]
	push 0x156B
	push edx
	mov byte ptr [esp+0x2C],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x10]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	test esi,esi
	je Block8

 Block3:
	mov eax,dword ptr [edi+0x4184]
	test eax,eax
	jne Block5

 Block4:
	mov eax,dword ptr [esp+0x2C]
	push eax
	call _atoi
	mov dword ptr [edi+0x4188],eax
	jmp Block18

 Block5:
	cmp eax,1

 Block6:
	jne Block19

 Block7:
	mov ecx,dword ptr [esp+0x2C]
	push ecx
	call _atoi
	mov dword ptr [edi+0x418C],eax
	jmp Block18

 Block8:
	lea edx,[esp+0x10]
	push 0x156C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x10]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	test esi,esi
	je Block14

 Block11:
	mov eax,dword ptr [edi+0x4184]
	cmp eax,1
	jne Block13

 Block12:
	mov eax,dword ptr [esp+0x2C]
	push eax
	call _atoi
	mov dword ptr [edi+0x4188],eax
	jmp Block18

 Block13:
	test eax,eax
	jmp Block6

 Block14:
	lea edx,[esp+0x10]
	push 0x1587
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x10]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	test esi,esi
	je Block19

 Block17:
	mov eax,dword ptr [esp+0x2C]
	push eax
	call _atoi
	mov dword ptr [edi+0x419C],eax

 Block18:
	add esp,4

 Block19:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block21

 Block20:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block22

 Block21:
	xor esi,esi

 Block22:
	push ecx
	mov ecx,esp
	lea edx,[esp+0x30]
	mov dword ptr [esp+0x18],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea eax,[esp+0x14]
	mov dword ptr [esp+0x20],esp
	push eax
	mov byte ptr [esp+0x30],2
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x20]
	mov ecx,esi
	mov byte ptr [esp+0x2C],1
	call edx
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x24],0
	test eax,eax
	je Block24

 Block23:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block24:
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block26:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 4
}
}
// CWvsContext::OnDataCRCCheckFailed
_SUB_EXCEPTION_HANDLER(5E51B0)
__SUB_CLASS_THIS(005E51B0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E51B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [esp+0x24]
	lea eax,[esp+0x24]
	push eax
	call CInPacket::DecodeStr
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x1C],0
	test eax,eax
	je Block11

 Block1:
	cmp byte ptr [eax],0
	je Block10

 Block2:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+8],eax
	mov byte ptr [esp+0x1C],1
	test eax,eax
	je Block14

 Block3:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	test eax,eax
	je Block14

 Block4:
	add eax,8
	je Block14

 Block5:
	lea esi,[eax-8]
	mov dword ptr [esp+0x10],esi
	test esi,esi
	je Block7

 Block6:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block7:
	push 0
	push 0
	push ecx
	mov ecx,esp
	lea edx,[esp+0x30]
	mov dword ptr [esp+0x14],esp
	push edx
	mov byte ptr [esp+0x2C],2
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push 0x897B50
	push 0
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push 0
	push 0
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_TEXT
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	mov byte ptr [esp+0x1C],0
	test esi,esi
	je Block9

 Block8:
	push 0
	lea ecx,[esp+0x10]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block9:
	mov eax,dword ptr [esp+0x24]

 Block10:
	test eax,eax

 Block11:
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x18
	ret 4

 Block14:
	xor esi,esi
	mov dword ptr [esp+0x10],esi
	jmp Block7
}
}
// CWvsContext::_CheckExpiredProtectItem
_SUB_EXCEPTION_HANDLER(5E6180)
__SUB_CLASS_THIS(005E6180, __thiscall, 8411,  CWvsContext, void, GW_ItemSlotBase*, const _FILETIME&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6180
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x14],ecx
	mov edi,dword ptr [esp+0x4C]
	xor ebp,ebp
	cmp edi,ebp
	je Block20

 Block1:
	mov ebx,dword ptr [ZImports::_CompareFileTime]
	push offset _D_DB_DATE_20790101__2
	lea esi,[edi+0x20]
	push esi
	call ebx
	test eax,eax
	jge Block20

 Block2:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+4]
	mov ecx,edi
	call edx
	test eax,eax
	je Block20

 Block3:
	mov eax,dword ptr [esp+0x50]
	push eax
	push esi
	call ebx
	test eax,eax
	jl Block20

 Block4:
	mov dword ptr [esp+0x20],ebp
	mov dword ptr [esp+0x44],ebp
	lea ebp,[edi+0xC]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [esp+0x14]
	lea edx,[esp+0x1C]
	mov dword ptr [esp+0x4C],eax
	push edx
	lea eax,[esp+0x50]
	add ecx,0x412C
	push eax
	mov dword ptr [esp+0x20],ecx
	call ZMap<unsigned long, ZRef<ZList<_FILETIME>>, unsigned long>::GetAt
	test eax,eax
	je Block10

 Block5:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block10

 Block6:
	mov eax,dword ptr [eax+0xC]
	mov dword ptr [esp+0x4C],eax
	test eax,eax
	je Block10

 Block7:
	lea ecx,[ecx]

 Block8:
	lea ecx,[esp+0x4C]
	push ecx
	call ZList<_FILETIME>::GetNext
	add esp,4
	push esi
	push eax
	call ebx
	test eax,eax
	je Block19

 Block9:
	cmp dword ptr [esp+0x4C],0
	jne Block8

 Block10:
	push 0xFFFFFFFB
	push esi
	call Util::FTAddDay
	add esp,8
	mov dword ptr [esp+0x28],edx
	mov edx,dword ptr [esp+0x50]
	mov dword ptr [esp+0x24],eax
	push edx
	lea eax,[esp+0x28]
	push eax
	call ebx
	test eax,eax
	jge Block19

 Block11:
	lea ecx,[esp+0x2C]
	push ecx
	push esi
	call dword ptr [ZImports::_FileTimeToSystemTime]
	mov dword ptr [esp+0x50],0
	mov ecx,ebp
	mov byte ptr [esp+0x44],1
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0x18]
	push edx
	call CItemInfo::GetItemName
	mov edi,eax
	lea eax,[esp+0x4C]
	push 0x13AA
	mov bl,2
	push eax
	mov byte ptr [esp+0x4C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,word ptr [esp+0x36]
	movzx edx,word ptr [esp+0x34]
	mov eax,dword ptr [eax]
	push ecx
	movzx ecx,word ptr [esp+0x36]
	push edx
	movzx edx,word ptr [esp+0x36]
	push ecx
	movzx ecx,word ptr [esp+0x38]
	push edx
	mov edx,dword ptr [edi]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x6C]
	push eax
	mov byte ptr [esp+0x64],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x6C]
	add esp,0x20
	mov byte ptr [esp+0x44],bl
	test eax,eax
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x44],1
	test eax,eax
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block15:
	lea ecx,[esp+0x50]
	push 0xB
	push ecx
	call CHATLOG_ADD
	add esp,8
	cmp dword ptr [esp+0x20],0
	jne Block17

 Block16:
	lea ecx,[esp+0x1C]
	call ZRef<ZList<_FILETIME>>::_Alloc
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [esp+0x18]
	lea edx,[esp+0x1C]
	mov dword ptr [esp+0x4C],eax
	push edx
	lea eax,[esp+0x50]
	push eax
	call ZMap<unsigned long, ZRef<ZList<_FILETIME>>, unsigned long>::Insert

 Block17:
	mov ecx,dword ptr [esp+0x20]
	push esi
	call ZList<_FILETIME>::AddTail_Position
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x44],0
	test eax,eax
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block19:
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x44],0xFFFFFFFF
	call ZRef<ZList<_FILETIME>>::~ZRef<ZList<_FILETIME>>

 Block20:
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret 8
}
}
// CWvsContext::SendCharacterInfoRequest
_SUB_EXCEPTION_HANDLER(5F2F70)
__SUB_CLASS_THIS(005F2F70, __thiscall, 8258,  CWvsContext, void, unsigned long, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F2F70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block3

 Block1:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block3

 Block2:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,edi
	call edx
	cmp eax,0x16
	je Block12

 Block3:
	cmp dword ptr [esi+0x20B8],0
	jne Block12

 Block4:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block12

 Block5:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block12

 Block6:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block12

 Block7:
	mov edi,dword ptr [esp+0x2C]
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push edi
	call CUserPool::GetRemoteUser
	cmp dword ptr [esp+0x30],0
	je Block10

 Block8:
	test eax,eax
	jne Block11

 Block9:
	mov edx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov eax,dword ptr [edx+8]
	mov edi,dword ptr [esi+0x20B4]

 Block10:
	test eax,eax
	je Block12

 Block11:
	push 0x6D
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x34]
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode1
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block12:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 0xC
}
}
// COpenGatePool::COpenGatePool
__SUB_CLASS_THIS0(005D39F0, __thiscall, 51987,  COpenGatePool, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	lea ecx,[esi+4]
	xor edi,edi
	cmp ecx,edi
	je Block2

 Block1:
	lea eax,[ecx-4]
	mov dword ptr [TSingleton<COpenGatePool>::ms_pInstance],eax
	jmp Block3

 Block2:
	mov dword ptr [TSingleton<COpenGatePool>::ms_pInstance],edi

 Block3:
	int 3// TODO: 	mov dword ptr [esi],offset COpenGatePool::`vftable'
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],0x1F
	mov dword ptr [ecx+0xC],edi
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::_CalcAutoGrow
	lea ecx,[esi+0x30]
	int 3// TODO: 	mov dword ptr [esi+0x1C],offset ZList<ZRef<COpenGatePool::OPENGATE>>::`vftable'
	mov dword ptr [esi+0x24],edi
	mov dword ptr [esi+0x28],edi
	mov dword ptr [esi+0x2C],edi
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],0x1F
	mov dword ptr [ecx+0xC],edi
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::_CalcAutoGrow
	mov dword ptr [esi+0x50],edi
	mov dword ptr [esi+0x54],edi
	mov dword ptr [esi+0x58],edi
	pop edi
	int 3// TODO: 	mov dword ptr [esi+0x48],offset ZList<ZRef<COpenGatePool::OPENGATE>>::`vftable'
	mov eax,esi
	pop esi
	ret
}
}
// CWvsContext::SendAbilityUpRequest
_SUB_EXCEPTION_HANDLER(5F63B0)
__SUB_CLASS_THIS(005F63B0, __thiscall, 8252,  CWvsContext, void, const ZArray<StatPair>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F63B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x14],edi
	cmp dword ptr [edi+0x20B8],0
	jne Block21

 Block1:
	mov eax,dword ptr [edi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block21

 Block2:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0x1F4
	jl Block21

 Block3:
	lea ecx,[edi+0x3538]
	call ForcedStat::IsForced
	test eax,eax
	je Block5

 Block4:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x54],esp
	push 0x388
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block21

 Block5:
	mov esi,dword ptr [esp+0x40]
	mov eax,dword ptr [esi]
	test eax,eax
	je Block21

 Block6:
	mov eax,dword ptr [eax-4]
	cmp eax,1
	jb Block21

 Block7:
	lea eax,[esp+0x18]
	push eax
	mov ecx,edi
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x18]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	xor ebx,ebx
	mov ecx,esi
	mov dword ptr [esp+0x40],ebx
	xor ebp,ebp
	call ZArray<StatPair>::GetCount
	test eax,eax
	jbe Block12

 Block8:
	mov ecx,dword ptr [edi+0x35]
	push ecx
	lea eax,[edi+0x33]
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov edx,dword ptr [edi+0x3D]
	mov bl,al
	push edx
	lea eax,[edi+0x39]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	add esp,0x10
	cmp bl,0x14
	jae Block10

 Block9:
	mov eax,dword ptr [esi]
	test dword ptr [eax+ebp*8],0x2800
	jne Block21

 Block10:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+ebp*8+4]
	add dword ptr [esp+0x40],edx
	mov ecx,esi
	inc ebp
	call ZArray<StatPair>::GetCount
	cmp ebp,eax
	jb Block8

 Block11:
	mov ebx,dword ptr [esp+0x40]

 Block12:
	mov eax,dword ptr [edi+0x95]
	push eax
	lea ebp,[edi+0x91]
	push ebp
	call _ZtlSecureFuseHelper<short>::call
	add esp,8
	test ax,ax
	jle Block21

 Block13:
	test ebx,ebx
	je Block21

 Block14:
	mov ecx,dword ptr [edi+0x95]
	push ecx
	push ebp
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	add esp,8
	cmp edx,ebx
	jl Block21

 Block15:
	push 0x63
	lea ecx,[esp+0x24]
	call COutPacket::_ctor_1
	xor edi,edi
	mov dword ptr [esp+0x38],edi
	call get_update_time
	push eax
	lea ecx,[esp+0x24]
	call COutPacket::Encode4
	mov eax,dword ptr [esi]
	cmp eax,edi
	jne Block17

 Block16:
	xor eax,eax
	jmp Block18

 Block17:
	mov eax,dword ptr [eax-4]

 Block18:
	push eax
	lea ecx,[esp+0x24]
	call COutPacket::Encode4
	mov ecx,esi
	call ZArray<StatPair>::GetCount
	test eax,eax
	jbe Block20

 Block19:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+edi*8]
	push ecx
	lea ecx,[esp+0x24]
	call COutPacket::Encode4
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+edi*8+4]
	push eax
	lea ecx,[esp+0x24]
	call COutPacket::Encode4
	mov ecx,esi
	inc edi
	call ZArray<StatPair>::GetCount
	cmp edi,eax
	jb Block19

 Block20:
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov esi,dword ptr [esp+0x14]
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x24]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x38],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block21:
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x28
	ret 4
}
}
// CWvsContext::GetGuildName
__SUB_CLASS_THIS0(004C21B0, __thiscall, 8168,  CWvsContext, ZXString<char>) {
__asm {

 Block0:
	push ecx
	push esi
	mov esi,dword ptr [esp+0xC]
	add ecx,0x3838
	push ecx
	mov ecx,esi
	mov dword ptr [esp+8],0
	mov dword ptr [esi],0
	call ZXString<char>::op_assign
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CUISkillDecEX::OnChildNotify
__SUB_CLASS_THIS(00458170, __thiscall, 68633,  CUISkillDecEX, void, uint32_t, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov edx,dword ptr [esp+8]
	cmp eax,0x7D1
	jne Block4

 Block1:
	cmp edx,0x12C
	jb Block7

 Block2:
	cmp edx,0x130
	ja Block7

 Block3:
	call CUISkillDecEX::ResetInfo
	ret 0xC

 Block4:
	cmp eax,0x7D0
	jne Block7

 Block5:
	cmp edx,0x1F4
	jne Block7

 Block6:
	mov eax,dword ptr [esp+0xC]
	push eax
	call CUISkillDecEX::OnTabChanged
	ret 0xC

 Block7:
	cmp edx,0x64
	jne Block9

 Block8:
	mov edx,dword ptr [ecx]
	push eax
	mov eax,dword ptr [edx+0x20]
	call eax

 Block9:
	ret 0xC
}
}
// CUISkillDecEX::~CUISkillDecEX
_SUB_EXCEPTION_HANDLER(5E6640)
__SUB_CLASS_THIS0(005E6640, __thiscall, 68631,  CUISkillDecEX, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6640
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x10],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillDecEX::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillDecEX::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillDecEX::`vftable'{for `ZRefCounted'}
	lea ecx,[esi+0xCC]
	mov dword ptr [esp+0x1C],5
	call SKILLROOT::~SKILLROOT
	lea edi,[esi+0xC4]
	xor ebx,ebx
	mov byte ptr [esp+0x1C],4
	cmp dword ptr [edi+4],ebx
	je Block2

 Block1:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block2:
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push 4
	push 8
	lea eax,[esi+0xA4]
	push eax
	mov byte ptr [esp+0x2C],3
	call __eh_vector_dtor_iterator
	lea edi,[esi+0x9C]
	mov byte ptr [esp+0x1C],2
	cmp dword ptr [edi+4],ebx
	je Block4

 Block3:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlScrollBar>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block4:
	lea edi,[esi+0x94]
	mov byte ptr [esp+0x1C],1
	cmp dword ptr [edi+4],ebx
	je Block6

 Block5:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlTab>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block6:
	lea ecx,[esi+0x90]
	mov byte ptr [esp+0x1C],bl
	call ZArray<long>::RemoveAll
	mov ecx,esi
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call CDialog::~CDialog
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret
}
}
// CWvsContext::CheckOpBoardHasNew
_SUB_EXCEPTION_HANDLER(5D4870)
__SUB_CLASS_THIS0(005D4870, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D4870
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	lea eax,[esp+0x24]
	xor edi,edi
	push eax
	mov dword ptr [esp+0x1C],edi
	call CWvsContext::GetCharacterData
	lea ebx,[edi+1]
	cmp dword ptr [eax+4],edi
	je Block2

 Block1:
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [eax+0x35]
	mov dword ptr [esp+0x44],ebx
	push edx
	add eax,0x33
	mov ebx,3
	push eax
	mov dword ptr [esp+0x20],ebx
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	mov byte ptr [esp+0x17],1
	cmp al,0xA
	jbe Block3

 Block2:
	mov byte ptr [esp+0x17],0

 Block3:
	mov ebp,dword ptr [ZImports::_InterlockedDecrement]
	mov dword ptr [esp+0x44],edi
	test bl,2
	je Block9

 Block4:
	mov esi,dword ptr [esp+0x20]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x18],ebx
	cmp esi,edi
	je Block9

 Block5:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call ebp
	test eax,eax
	jne Block8

 Block6:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block8

 Block7:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block8:
	mov dword ptr [esp+0x20],0

 Block9:
	mov dword ptr [esp+0x44],0xFFFFFFFF
	test bl,1
	je Block15

 Block10:
	mov esi,dword ptr [esp+0x28]
	test esi,esi
	je Block15

 Block11:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call ebp
	test eax,eax
	jne Block14

 Block12:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block14

 Block13:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block14:
	mov dword ptr [esp+0x28],0

 Block15:
	cmp byte ptr [esp+0x17],0
	jne Block17

 Block16:
	mov eax,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov esi,dword ptr [eax+0x64]
	push 0xC0
	lea ecx,[esp+0x30]
	call COutPacket::_ctor_1
	push esi
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x48],2
	call COutPacket::Encode4
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x44],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block17:
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret
}
}
// CUISkillInc::Draw
_SUB_EXCEPTION_HANDLER(455EA0)
__SUB_CLASS_THIS(00455EA0, __thiscall, 68666,  CUISkillInc, void, const tagRECT*) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x74]
	sub esp,0x74
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_455EA0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x13C
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x70],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [ebp+0x50],edi
	mov eax,dword ptr [ebp+0x7C]
	push eax
	call CWnd::Draw
	mov ecx,dword ptr [edi+0xD4]
	push ecx
	mov ecx,edi
	call CUISkillInc::DrawTab
	lea edx,[ebp+0x6C]
	push edx
	mov ecx,edi
	call CWnd::GetCanvas
	lea eax,[ebp+0x68]
	push 1
	xor ebx,ebx
	push eax
	mov dword ptr [ebp-4],ebx
	call get_basic_font
	add esp,8
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0xE0]
	push ecx
	mov byte ptr [ebp-4],1
	call esi
	lea edx,[ebp-0xE0]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	lea eax,[ebp-0x40]
	push eax
	mov byte ptr [ebp-4],2
	call esi
	lea ecx,[ebp-0x40]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	push ebx
	push ebx
	lea edx,[ebp-0xE0]
	push edx
	lea eax,[ebp-0x40]
	push eax
	push ecx
	mov dword ptr [ebp+0x58],esp
	mov ecx,esp
	push offset _S_UIUIWINDOW2IMGRE__14
	mov byte ptr [ebp-4],3
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],4
	cmp dword ptr [_D_G_RM],ebx
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	lea ecx,[ebp-0x138]
	push ecx
	mov byte ptr [ebp-4],3
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x40]
	mov dword ptr [ebp+0x40],ebx
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebx
	jge Block9

 Block7:
	cmp eax,0x80004002
	je Block9

 Block8:
	push eax
	call _com_issue_error

 Block9:
	cmp word ptr [ebp-0x138],8
	mov byte ptr [ebp-4],7
	jne Block12

 Block10:
	mov eax,dword ptr [ebp-0x130]
	xor edx,edx
	mov word ptr [ebp-0x138],dx
	cmp eax,ebx
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea eax,[ebp-0x138]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block13:
	cmp word ptr [ebp-0x40],8
	mov byte ptr [ebp-4],8
	jne Block16

 Block14:
	mov eax,dword ptr [ebp-0x38]
	xor ecx,ecx
	mov word ptr [ebp-0x40],cx
	cmp eax,ebx
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea edx,[ebp-0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block17:
	cmp word ptr [ebp-0xE0],8
	mov byte ptr [ebp-4],9
	jne Block20

 Block18:
	xor eax,eax
	mov word ptr [ebp-0xE0],ax
	mov eax,dword ptr [ebp-0xD8]
	cmp eax,ebx
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea ecx,[ebp-0xE0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block21:
	lea edx,[ebp-0x20]
	push edx
	call esi
	lea eax,[ebp-0x20]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block23

 Block22:
	push eax
	call _com_issue_error

 Block23:
	lea ecx,[ebp-0x60]
	push ecx
	mov byte ptr [ebp-4],0xA
	call esi
	lea edx,[ebp-0x60]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block25

 Block24:
	push eax
	call _com_issue_error

 Block25:
	push ebx
	push ebx
	lea eax,[ebp-0x20]
	push eax
	lea ecx,[ebp-0x60]
	push ecx
	push ecx
	mov dword ptr [ebp+0x58],esp
	mov ecx,esp
	push offset _S_UIUIWINDOW2IMGRE__13
	mov byte ptr [ebp-4],0xB
	call _xbstr_t::_ctor_0
	mov byte ptr [ebp-4],0xC
	cmp dword ptr [_D_G_RM],ebx
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	lea edx,[ebp-0x128]
	mov byte ptr [ebp-4],0xB
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xD
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x48]
	mov dword ptr [ebp+0x48],ebx
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebx
	jge Block30

 Block28:
	cmp eax,0x80004002
	je Block30

 Block29:
	push eax
	call _com_issue_error

 Block30:
	cmp word ptr [ebp-0x128],8
	mov byte ptr [ebp-4],0xF
	jne Block33

 Block31:
	xor eax,eax
	mov word ptr [ebp-0x128],ax
	mov eax,dword ptr [ebp-0x120]
	cmp eax,ebx
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea ecx,[ebp-0x128]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block34:
	cmp word ptr [ebp-0x60],8
	mov byte ptr [ebp-4],0x10
	jne Block37

 Block35:
	mov eax,dword ptr [ebp-0x58]
	xor edx,edx
	mov word ptr [ebp-0x60],dx
	cmp eax,ebx
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block38

 Block37:
	lea eax,[ebp-0x60]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block38:
	cmp word ptr [ebp-0x20],8
	mov byte ptr [ebp-4],0x11
	jne Block41

 Block39:
	mov eax,dword ptr [ebp-0x18]
	xor ecx,ecx
	mov word ptr [ebp-0x20],cx
	cmp eax,ebx
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea edx,[ebp-0x20]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block42:
	lea eax,[ebp-0x100]
	push eax
	call esi
	lea ecx,[ebp-0x100]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block44

 Block43:
	push eax
	call _com_issue_error

 Block44:
	lea edx,[ebp-0x80]
	push edx
	mov byte ptr [ebp-4],0x12
	call esi
	lea eax,[ebp-0x80]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	push 0
	push 0
	lea ecx,[ebp-0x100]
	push ecx
	lea edx,[ebp-0x80]
	push edx
	push ecx
	mov dword ptr [ebp+0x58],esp
	mov ecx,esp
	mov bl,0x13
	push offset _S_UIUIWINDOW2IMGRE__12
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0x14
	jne Block48

 Block47:
	push 0x80004003
	call _com_issue_error

 Block48:
	lea eax,[ebp-0x148]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x15
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x44]
	mov dword ptr [ebp+0x44],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block51

 Block49:
	cmp eax,0x80004002
	je Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	mov esi,8
	mov byte ptr [ebp-4],0x17
	cmp word ptr [ebp-0x148],si
	jne Block54

 Block52:
	mov eax,dword ptr [ebp-0x140]
	xor ecx,ecx
	mov word ptr [ebp-0x148],cx
	test eax,eax
	je Block55

 Block53:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block54:
	lea edx,[ebp-0x148]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block55:
	mov byte ptr [ebp-4],0x18
	cmp word ptr [ebp-0x80],si
	jne Block58

 Block56:
	xor eax,eax
	mov word ptr [ebp-0x80],ax
	mov eax,dword ptr [ebp-0x78]
	test eax,eax
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea ecx,[ebp-0x80]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block59:
	mov byte ptr [ebp-4],0x19
	cmp word ptr [ebp-0x100],si
	jne Block62

 Block60:
	mov eax,dword ptr [ebp-0xF8]
	xor edx,edx
	mov word ptr [ebp-0x100],dx
	test eax,eax
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea eax,[ebp-0x100]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block63:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[ebp-0x118]
	push edx
	mov dword ptr [ebp+0x10],ecx
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov dword ptr [ebp+0xC],eax
	mov eax,dword ptr [ebp-0x114]
	test eax,eax
	je Block68

 Block64:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block67

 Block65:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block67

 Block66:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block67:
	mov edi,dword ptr [ebp+0x50]
	mov dword ptr [ebp-0x114],0

 Block68:
	mov eax,dword ptr [edi+0xC4]
	test eax,eax
	je Block166

 Block69:
	cmp dword ptr [eax-4],0
	je Block166

 Block70:
	mov eax,dword ptr [edi+0x98]
	mov ecx,dword ptr [eax+0x38]
	mov dword ptr [ebp-0x10],ecx
	mov dword ptr [ebp+0x4C],0

 Block71:
	mov ebx,dword ptr [ebp+0x4C]
	mov edx,dword ptr [ebp-0x10]
	mov edi,dword ptr [ebp+0x50]
	lea esi,[ebx+edx]
	cmp esi,dword ptr [edi+0xC8]
	mov dword ptr [ebp+0x58],esi
	jge Block166

 Block72:
	push esi
	mov ecx,edi
	call CUISkillInc::GetSkillEntry
	mov ecx,dword ptr [ebp+0x10]
	push eax
	mov dword ptr [ebp+0x60],eax
	call CWvsContext::GetSkillLevelUpState
	cmp eax,1
	jne Block75

 Block73:
	push esi
	mov ecx,edi
	call CUISkillInc::GetSkillEntry
	mov ecx,dword ptr [edi+0xD0]
	cmp ecx,dword ptr [eax]
	je Block75

 Block74:
	mov edi,1
	jmp Block76

 Block75:
	xor edi,edi

 Block76:
	lea edx,[ebx+ebx*4]
	lea eax,[edx*8+0x5D]
	mov edx,dword ptr [ebp+0x60]
	lea ecx,[ebp+0x60]
	push ecx
	mov ecx,dword ptr [ebp+0xC]
	mov dword ptr [ebp+0x64],eax
	mov eax,dword ptr [edx]
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov dword ptr [ebp+0x34],edi
	call CSkillInfo::GetSkillLevel_0
	mov edx,3
	mov ecx,0xFF
	mov esi,eax
	mov word ptr [ebp+0x24],dx
	mov dword ptr [ebp+0x2C],ecx
	mov byte ptr [ebp-4],0x1A
	lea eax,[ebp+0x40]
	test edi,edi
	je Block78

 Block77:
	lea eax,[ebp+0x48]

 Block78:
	mov edx,dword ptr [eax]
	mov eax,dword ptr [ebp+0x6C]
	test eax,eax
	je Block5

 Block79:
	mov ebx,dword ptr [eax]
	mov edi,dword ptr [ebp+0x24]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0x28]
	push edx
	mov edx,dword ptr [ebp+0x64]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp+0x6C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp+0x30]
	push edx
	push 9
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebx+0x80]
	push edi
	call eax
	test eax,eax
	jge Block81

 Block80:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block81:
	cmp word ptr [ebp+0x24],8
	mov byte ptr [ebp-4],0x19
	jne Block84

 Block82:
	mov eax,dword ptr [ebp+0x2C]
	xor ecx,ecx
	mov word ptr [ebp+0x24],cx
	test eax,eax
	je Block85

 Block83:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block85

 Block84:
	lea edx,[ebp+0x24]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block85:
	mov eax,dword ptr [ebp+0x60]
	add eax,4
	push eax
	lea ecx,[ebp+0x54]
	mov dword ptr [ebp+0x54],0
	call ZXString<char>::op_assign
	push 0x68
	push ecx
	mov ecx,dword ptr [ebp+0x68]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [ebp+0x68]
	mov byte ptr [ebp-4],0x1B
	mov dword ptr [ebp+0x5C],esp
	test eax,eax
	je Block87

 Block86:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block87:
	lea ecx,[ebp+0x54]
	push ecx
	call format_string_1
	mov edi,dword ptr [ZImports::_VariantInit]
	add esp,0xC
	lea edx,[ebp-0x30]
	push edx
	call edi
	lea eax,[ebp-0x30]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block88:
	lea ecx,[ebp-0xA0]
	push ecx
	mov byte ptr [ebp-4],0x1C
	call edi
	lea edx,[ebp-0xA0]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block89:
	mov edx,dword ptr [ebp+0x6C]
	lea eax,[ebp-0x30]
	push eax
	mov eax,dword ptr [ebp+0x54]
	lea ecx,[ebp-0xA0]
	push ecx
	push edx
	push ecx
	mov dword ptr [ebp+0x5C],esp
	mov ecx,esp
	mov bl,0x1D
	push eax
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x68]
	mov byte ptr [ebp-4],0x1E
	test ecx,ecx
	je Block5

 Block90:
	mov edx,dword ptr [ebp+0x64]
	add edx,3
	push edx
	push 0x31
	mov byte ptr [ebp-4],bl
	call IWzFont::DrawTextA
	cmp word ptr [ebp-0xA0],8
	mov byte ptr [ebp-4],0x1C
	jne Block93

 Block91:
	xor eax,eax
	mov word ptr [ebp-0xA0],ax
	mov eax,dword ptr [ebp-0x98]
	test eax,eax
	je Block94

 Block92:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block94

 Block93:
	lea ecx,[ebp-0xA0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block94:
	cmp word ptr [ebp-0x30],8
	mov byte ptr [ebp-4],0x1B
	jne Block97

 Block95:
	mov eax,dword ptr [ebp-0x28]
	xor edx,edx
	mov word ptr [ebp-0x30],dx
	test eax,eax
	je Block98

 Block96:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block98

 Block97:
	lea eax,[ebp-0x30]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block98:
	mov ecx,dword ptr [ebp+0x50]
	mov edx,dword ptr [ecx+0xD0]
	mov eax,dword ptr [ebp+0x60]
	cmp edx,dword ptr [eax]
	je Block110

 Block99:
	lea ecx,[ebp-0x70]
	push ecx
	call edi
	lea edx,[ebp-0x70]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block100:
	lea eax,[ebp-0x50]
	push eax
	mov byte ptr [ebp-4],0x1F
	call edi
	lea ecx,[ebp-0x50]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block101:
	mov ebx,0x20
	mov eax,ebx
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov eax,esp
	lea edx,[ebp-0x70]
	push edx
	mov edx,dword ptr [ebp+0x6C]
	lea ecx,[ebp-0x50]
	push ecx
	push edx
	push 0xA
	push eax
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x5C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x68]
	mov byte ptr [ebp-4],0x21
	test ecx,ecx
	je Block5

 Block102:
	mov eax,dword ptr [ebp+0x64]
	add eax,0x15
	push eax
	push 0x31
	mov byte ptr [ebp-4],bl
	call IWzFont::DrawTextA
	mov esi,8
	mov byte ptr [ebp-4],0x1F
	cmp word ptr [ebp-0x50],si
	jne Block105

 Block103:
	mov eax,dword ptr [ebp-0x48]
	xor ecx,ecx
	mov word ptr [ebp-0x50],cx
	test eax,eax
	je Block106

 Block104:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block106

 Block105:
	lea edx,[ebp-0x50]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block106:
	mov byte ptr [ebp-4],0x1B
	cmp word ptr [ebp-0x70],si
	jne Block109

 Block107:
	xor eax,eax
	mov word ptr [ebp-0x70],ax
	mov eax,dword ptr [ebp-0x68]
	test eax,eax
	je Block146

 Block108:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block146

 Block109:
	lea ecx,[ebp-0x70]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block146

 Block110:
	mov dword ptr [ebp+0x3C],0
	lea edx,[ebp+4]
	push 0xBA3
	push edx
	mov byte ptr [ebp-4],0x22
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push 1
	push eax
	lea eax,[ebp+0x3C]
	push eax
	mov byte ptr [ebp-4],0x23
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+4]
	add esp,0xC
	mov byte ptr [ebp-4],0x22
	test eax,eax
	je Block112

 Block111:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block112:
	lea ecx,[ebp-0x90]
	push ecx
	call edi
	lea edx,[ebp-0x90]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block113:
	mov bl,0x24
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov eax,esp
	lea ecx,[ebp-0x90]
	push ecx
	push 0xA
	push eax
	dec esi
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x5C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x68]
	mov byte ptr [ebp-4],0x25
	test ecx,ecx
	je Block5

 Block114:
	mov byte ptr [ebp-4],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [ebp-0x90],8
	mov dword ptr [ebp+0x5C],eax
	mov byte ptr [ebp-4],0x22
	jne Block117

 Block115:
	mov eax,dword ptr [ebp-0x88]
	xor edx,edx
	mov word ptr [ebp-0x90],dx
	test eax,eax
	je Block118

 Block116:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block118

 Block117:
	lea eax,[ebp-0x90]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block118:
	lea ecx,[ebp-0xD0]
	push ecx
	call edi
	lea edx,[ebp-0xD0]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block119:
	lea eax,[ebp-0xB0]
	push eax
	mov byte ptr [ebp-4],0x26
	call edi
	lea ecx,[ebp-0xB0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block120:
	mov bl,0x27
	mov eax,0x20
	mov byte ptr [ebp-4],bl
	call __chkstk
	mov eax,esp
	lea edx,[ebp-0xD0]
	push edx
	mov edx,dword ptr [ebp+0x6C]
	lea ecx,[ebp-0xB0]
	push ecx
	push edx
	push 0xA
	push eax
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea eax,[ebp]
	push 4
	push eax
	mov byte ptr [ebp-4],0x28
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x29
	test ecx,ecx
	je Block5

 Block121:
	mov esi,dword ptr [ebp+0x64]
	add esi,0x15
	push esi
	push 0x31
	mov byte ptr [ebp-4],0x2A
	call IWzFont::DrawTextA
	mov eax,dword ptr [ebp]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block123

 Block122:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block123:
	mov ebx,8
	mov byte ptr [ebp-4],0x26
	cmp word ptr [ebp-0xB0],bx
	jne Block126

 Block124:
	xor eax,eax
	mov word ptr [ebp-0xB0],ax
	mov eax,dword ptr [ebp-0xA8]
	test eax,eax
	je Block127

 Block125:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block127

 Block126:
	lea ecx,[ebp-0xB0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block127:
	mov byte ptr [ebp-4],0x22
	cmp word ptr [ebp-0xD0],bx
	jne Block130

 Block128:
	mov eax,dword ptr [ebp-0xC8]
	xor edx,edx
	mov word ptr [ebp-0xD0],dx
	test eax,eax
	je Block131

 Block129:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block131

 Block130:
	lea eax,[ebp-0xD0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block131:
	lea ecx,[ebp-0x110]
	push ecx
	call edi
	lea edx,[ebp-0x110]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block132:
	lea eax,[ebp-0xF0]
	push eax
	mov byte ptr [ebp-4],0x2B
	call edi
	lea ecx,[ebp-0xF0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block133:
	mov ecx,dword ptr [ebp+0x6C]
	mov edi,dword ptr [ebp+0x3C]
	lea edx,[ebp-0x110]
	push edx
	lea eax,[ebp-0xF0]
	push eax
	push ecx
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	mov bl,0x2C
	push edi
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	lea edx,[ebp+8]
	push 0x46
	push edx
	mov byte ptr [ebp-4],0x2D
	call get_basic_font
	add esp,8
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x2E
	test ecx,ecx
	je Block5

 Block134:
	mov eax,dword ptr [ebp+0x5C]
	push esi
	add eax,0x35
	push eax
	mov byte ptr [ebp-4],0x2F
	call IWzFont::DrawTextA
	mov eax,dword ptr [ebp+8]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block136

 Block135:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block136:
	mov esi,8
	mov byte ptr [ebp-4],0x2B
	cmp word ptr [ebp-0xF0],si
	jne Block139

 Block137:
	xor eax,eax
	mov word ptr [ebp-0xF0],ax
	mov eax,dword ptr [ebp-0xE8]
	test eax,eax
	je Block140

 Block138:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block140

 Block139:
	lea ecx,[ebp-0xF0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block140:
	mov byte ptr [ebp-4],0x22
	cmp word ptr [ebp-0x110],si
	jne Block143

 Block141:
	mov eax,dword ptr [ebp-0x108]
	xor edx,edx
	mov word ptr [ebp-0x110],dx
	test eax,eax
	je Block144

 Block142:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block144

 Block143:
	lea eax,[ebp-0x110]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block144:
	mov byte ptr [ebp-4],0x1B
	test edi,edi
	je Block146

 Block145:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block146:
	mov ecx,dword ptr [ebp+0x60]
	mov edx,dword ptr [ebp+0x34]
	mov esi,dword ptr [ecx+edx*4+0x258]
	mov dword ptr [ebp+0x38],esi
	test esi,esi
	je Block148

 Block147:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+4]
	push esi
	call ecx

 Block148:
	mov edx,3
	mov ecx,0xFF
	mov word ptr [ebp+0x14],dx
	mov dword ptr [ebp+0x1C],ecx
	mov edi,dword ptr [ebp+0x14]
	mov ebx,dword ptr [ebp+0x6C]
	mov edx,dword ptr [ebx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0x18]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp+0x20]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp+0x64]
	mov ecx,dword ptr [edx+0x80]
	push esi
	add eax,2
	push eax
	push 0xB
	push ebx
	mov byte ptr [ebp-4],0x31
	call ecx
	test eax,eax
	jge Block150

 Block149:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block150:
	mov edi,8
	mov byte ptr [ebp-4],0x30
	cmp word ptr [ebp+0x14],di
	jne Block153

 Block151:
	mov eax,dword ptr [ebp+0x1C]
	xor edx,edx
	mov word ptr [ebp+0x14],dx
	test eax,eax
	je Block154

 Block152:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block154

 Block153:
	lea eax,[ebp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block154:
	cmp dword ptr [ebp+0x4C],3
	jge Block161

 Block155:
	mov ecx,dword ptr [ebp+0x50]
	mov eax,dword ptr [ecx+0xC8]
	dec eax
	cmp dword ptr [ebp+0x58],eax
	jge Block161

 Block156:
	lea edx,[ebp-0xC0]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0xC0]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block1

 Block157:
	mov edx,dword ptr [ebp+0x44]
	mov eax,dword ptr [ebp+0x64]
	lea ecx,[ebp-0xC0]
	push ecx
	push edx
	add eax,0x25
	push eax
	push 9
	mov ecx,ebx
	mov byte ptr [ebp-4],0x32
	call IWzCanvas::Copy
	mov byte ptr [ebp-4],0x30
	cmp word ptr [ebp-0xC0],di
	jne Block160

 Block158:
	mov eax,dword ptr [ebp-0xB8]
	xor ecx,ecx
	mov word ptr [ebp-0xC0],cx
	test eax,eax
	je Block161

 Block159:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block161

 Block160:
	lea edx,[ebp-0xC0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block161:
	mov byte ptr [ebp-4],0x1B
	test esi,esi
	je Block163

 Block162:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block163:
	mov eax,dword ptr [ebp+0x54]
	mov byte ptr [ebp-4],0x19
	test eax,eax
	je Block165

 Block164:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block165:
	mov eax,dword ptr [ebp+0x4C]
	inc eax
	cmp eax,4
	mov dword ptr [ebp+0x4C],eax
	jl Block71

 Block166:
	mov eax,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0x11
	test eax,eax
	je Block168

 Block167:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block168:
	mov eax,dword ptr [ebp+0x48]
	mov byte ptr [ebp-4],9
	test eax,eax
	je Block170

 Block169:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block170:
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block172

 Block171:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block172:
	mov eax,dword ptr [ebp+0x68]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block174

 Block173:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block174:
	mov eax,dword ptr [ebp+0x6C]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block176

 Block175:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block176:
	lea esp,[ebp-0x158]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x70]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x74
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::GetCurFieldID
__SUB_CLASS_THIS0(005DB0A0, __thiscall, 8085,  CWvsContext, long) {
__asm {

 Block0:
	push esi
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block3

 Block1:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block3

 Block2:
	lea ecx,[esi+0x16C]
	pop esi
	jmp  TSecType<unsigned long>::GetData

 Block3:
	or eax,0xFFFFFFFF
	pop esi
	ret
}
}
// ALLIANCEDATA::ALLIANCEDATA
_SUB_EXCEPTION_HANDLER(5E57D0)
__SUB_CLASS_THIS0(005E57D0, __thiscall, 45453,  ALLIANCEDATA, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E57D0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	xor eax,eax
	mov dword ptr [esi+4],eax
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esi+8],eax
	mov dword ptr [esi+0xC],eax
	mov dword ptr [esi+0x14],eax
	mov byte ptr [esp+0x14],3
	call ALLIANCEDATA::Clear
	mov eax,esi
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CUISkillDecEX::OnSkillDecButton
__SUB_CLASS_THIS(00452E20, __thiscall, 68638,  CUISkillDecEX, void, long) {
__asm {

 Block0:
	push esi
	mov esi,dword ptr [esp+8]
	push edi
	mov edi,ecx
	mov eax,dword ptr [edi+0xA0]
	add esi,dword ptr [eax+0x38]
	push 0
	call CUISkillDecEX::GetSkillRootVisible
	test eax,eax
	je Block5

 Block1:
	test esi,esi
	jl Block5

 Block2:
	mov ecx,dword ptr [eax+8]
	test ecx,ecx
	je Block5

 Block3:
	cmp esi,dword ptr [ecx-4]
	jae Block5

 Block4:
	mov edx,dword ptr [ecx+esi*8+4]
	mov eax,dword ptr [edx]
	mov dword ptr [edi+0xE0],eax

 Block5:
	pop edi
	pop esi
	ret 4
}
}
// CWvsContext::GetGuildSkillArray
__SUB_CLASS_THIS0(00506BC0, __thiscall, 8181,  CWvsContext, ZArray<long>) {
__asm {

 Block0:
	push ecx
	push esi
	mov esi,dword ptr [esp+0xC]
	add ecx,0x380E
	push ecx
	mov ecx,esi
	mov dword ptr [esp+8],0
	mov dword ptr [esi],0
	call ZArray<long>::operator=
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CWvsContext::AddQuestTimer
_SUB_EXCEPTION_HANDLER(605A90)
__SUB_CLASS_THIS(00605A90, __thiscall, 8296,  CWvsContext, void, uint16_t, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_605A90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	cmp dword ptr [ebx+0x3F50],0
	jne Block2

 Block1:
	mov edi,0x2BC
	mov esi,0x32
	jmp Block5

 Block2:
	mov eax,dword ptr [ebx+0x3F58]
	mov esi,dword ptr [eax+4]
	mov dword ptr [esp+0x14],esi
	test esi,esi
	je Block4

 Block3:
	lea eax,[esi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block4:
	mov edi,dword ptr [esi+0xB08]
	mov esi,dword ptr [esi+0xB0C]
	push 0
	lea ecx,[esp+0x14]
	add esi,0x32
	call ZRef<CUIQuestTimer>::_ReleaseRaw

 Block5:
	push 0xB50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x10],eax
	mov dword ptr [esp+0x20],0
	test eax,eax
	je Block17

 Block6:
	mov ecx,dword ptr [esp+0x30]
	mov edx,dword ptr [esp+0x2C]
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	push esi
	push edi
	push edx
	push ecx
	mov ecx,eax
	call CUIQuestTimer::_ctor_0
	test eax,eax
	je Block17

 Block7:
	add eax,8
	je Block17

 Block8:
	lea esi,[eax-8]
	mov dword ptr [esp+0x14],esi
	test esi,esi
	je Block10

 Block9:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block10:
	lea ecx,[ebx+0x3F48]
	mov dword ptr [esp+0x20],1
	call ZList<ZRef<CUIQuestTimer>>::AddTail_
	mov edi,eax
	test esi,esi
	je Block12

 Block11:
	lea eax,[esi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block12:
	cmp dword ptr [edi+4],0
	je Block14

 Block13:
	push 0
	mov ecx,edi
	call ZRef<CUIQuestTimer>::_ReleaseRaw
	mov dword ptr [edi+4],0

 Block14:
	mov dword ptr [edi+4],esi
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test esi,esi
	je Block16

 Block15:
	push 0
	lea ecx,[esp+0x14]
	call ZRef<CUIQuestTimer>::_ReleaseRaw

 Block16:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret 0xC

 Block17:
	xor esi,esi
	mov dword ptr [esp+0x14],esi
	jmp Block10
}
}
// CWvsContext::SendDragonBallSummonRequest
_SUB_EXCEPTION_HANDLER(5D7440)
__SUB_CLASS_THIS0(005D7440, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D7440
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block4

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block4

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block4

 Block3:
	push 0xC5
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+8]
	push edx
	mov dword ptr [esp+0x24],0
	call CClientSocket::SendPacket
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block4:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret
}
}
// CWvsContext::OnMiniMapOnOff
__SUB_CLASS_THIS(005CFFF0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esp+8]
	call CInPacket::Decode1
	movzx eax,al
	mov dword ptr [esi+0x40C8],eax
	mov ecx,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	call CUIMiniMap::ReloadMiniMap
	pop esi
	ret 4
}
}
// CWvsContext::OnGuildBBSPacket
__SUB_CLASS_THIS(005CCF20, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CUIGuildBBS>::ms_pInstance]
	test ecx,ecx
	je Block2

 Block1:
	jmp  CUIGuildBBS::OnGuildBBSPacket

 Block2:
	ret 4
}
}
// CUIJoyPad::CUIJoyPad
_SUB_EXCEPTION_HANDLER(5DFBA0)
__SUB_CLASS_THIS0(005DFBA0, __thiscall, 13656,  CUIJoyPad, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DFBA0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	call CDialog::_ctor_default
	push offset ZRef<CCtrlComboBox>::~ZRef<CCtrlComboBox>
	push offset ZRef<CCtrlComboBox>::_ctor_default
	push 0xB
	push 8
	lea eax,[esi+0x90]
	xor edi,edi
	push eax
	mov dword ptr [esp+0x30],edi
	int 3// TODO: 	mov dword ptr [esi],offset CUIJoyPad::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUIJoyPad::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUIJoyPad::`vftable'{for `ZRefCounted'}
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0xEC],edi
	mov dword ptr [esi+0xF4],edi
	mov dword ptr [esi+0xFC],edi
	push edi
	push edi
	push edi
	push edi
	push edi
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0x180B
	push ecx
	mov byte ptr [esp+0x3C],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,esi
	call CWnd::SetBackgrnd
	push edi
	push edi
	push 1
	push 0xA
	push 0x145
	push 0xAF
	push 0x64
	push 0x12C
	mov ecx,esi
	call CDialog::CreateDlg_0
	mov eax,esi
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret
}
}
// CWvsContext::IsAbleToConsume
_SUB_EXCEPTION_HANDLER(5DA770)
__SUB_CLASS_THIS(005DA770, __thiscall, 8233,  CWvsContext, int32_t, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DA770
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push 0
	push eax
	call CItemInfo::CheckUseRequirement
	cmp dword ptr [esp+0x1C],0
	mov esi,eax
	je Block7

 Block1:
	sub eax,2
	je Block4

 Block2:
	sub eax,1
	jne Block7

 Block3:
	lea ecx,[esp+0x18]
	push 0x1573
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x18],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x20]
	jmp Block5

 Block4:
	lea edx,[esp+0x1C]
	push 0xC96
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x18],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x24]

 Block5:
	add esp,8
	mov dword ptr [esp+0x10],0xFFFFFFFF
	test eax,eax
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	xor eax,eax
	test esi,esi
	sete al
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0xC
	ret 8
}
}
// CWvsContext::UI_Close
_SUB_EXCEPTION_HANDLER(5D5370)
// 9D5A0C
static uint8_t _SUB_5D5370_LOOKUP_TABLE_0[43] = {
0, 1, 2, 3, 25, 4, 5, 6, 25, 7, 8, 25, 25, 25, 25, 25, 
25, 25, 25, 9, 25, 10, 11, 25, 25, 12, 13, 14, 15, 16, 17, 18, 
19, 25, 25, 20, 25, 25, 25, 21, 22, 23, 24, 
};
__SUB_CLASS_THIS(005D5370, __thiscall, 8084,  CWvsContext, void, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D5370
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	cmp dword ptr [esp+0x30],3
	mov dword ptr [esp+0x14],ebx
	jne Block4

 Block1:
	lea eax,[esp+0x18]
	push eax
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [eax+0x3D]
	mov dword ptr [esp+0x28],ebx
	push ecx
	add eax,0x39
	mov ebx,1
	push eax
	mov dword ptr [esp+0x1C],ebx
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esp,8
	cmp eax,0x16
	je Block3

 Block2:
	cmp ecx,0x7D1
	jne Block4

 Block3:
	mov byte ptr [esp+0x13],bl
	jmp Block5

 Block4:
	mov byte ptr [esp+0x13],0

 Block5:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test bl,1
	je Block11

 Block6:
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block11

 Block7:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block10

 Block8:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block10

 Block9:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block10:
	mov dword ptr [esp+0x1C],0

 Block11:
	cmp byte ptr [esp+0x13],0
	je Block13

 Block12:
	mov dword ptr [esp+0x30],0x20
	jmp Block14

 Block13:
	cmp dword ptr [esp+0x30],0x2A
	ja Block66

 Block14:
	mov ecx,dword ptr [esp+0x30]
	movzx edx,byte ptr [ecx+_SUB_5D5370_LOOKUP_TABLE_0]
	cmp EDX, 0
je Block15
cmp EDX, 1
je Block17
cmp EDX, 2
je Block19
cmp EDX, 3
je Block21
cmp EDX, 4
je Block25
cmp EDX, 5
je Block29
cmp EDX, 6
je Block27
cmp EDX, 7
je Block35
cmp EDX, 8
je Block33
cmp EDX, 9
je Block37
cmp EDX, 10
je Block39
cmp EDX, 11
je Block47
cmp EDX, 12
je Block49
cmp EDX, 13
je Block51
cmp EDX, 14
je Block53
cmp EDX, 15
je Block55
cmp EDX, 16
je Block61
cmp EDX, 17
je Block31
cmp EDX, 18
je Block63
cmp EDX, 19
je Block23
cmp EDX, 20
je Block57
cmp EDX, 21
je Block41
cmp EDX, 22
je Block43
cmp EDX, 23
je Block45
cmp EDX, 24
je Block59
cmp EDX, 25
je Block66


 Block15:
	mov ecx,dword ptr [esi+0x3E34]
	test ecx,ecx
	je Block66

 Block16:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E30]
	call ZRef<CUIItem>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block17:
	mov ecx,dword ptr [esi+0x3E3C]
	test ecx,ecx
	je Block66

 Block18:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E38]
	call ZRef<CUIEquip>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block19:
	mov ecx,dword ptr [esi+0x3E44]
	test ecx,ecx
	je Block66

 Block20:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E40]
	call ZRef<CUIStat>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block21:
	mov ecx,dword ptr [esi+0x3E4C]
	test ecx,ecx
	je Block66

 Block22:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E48]
	call ZRef<CUISkill>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block23:
	mov ecx,dword ptr [esi+0x3E54]
	test ecx,ecx
	je Block66

 Block24:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E50]
	call ZRef<CUISkillEx>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block25:
	mov ecx,dword ptr [esi+0x3E5C]
	test ecx,ecx
	je Block66

 Block26:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E58]
	call ZRef<CUIKeyConfig>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block27:
	mov ecx,dword ptr [esi+0x3E64]
	test ecx,ecx
	je Block66

 Block28:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E60]
	call ZRef<CUIUserList>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block29:
	mov ecx,dword ptr [esi+0x3E6C]
	test ecx,ecx
	je Block66

 Block30:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E68]
	call ZRef<CUIQuestInfo>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block31:
	mov ecx,dword ptr [esi+0x3E74]
	test ecx,ecx
	je Block66

 Block32:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E70]
	call ZRef<CUIMedalQuestInfo>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block33:
	mov ecx,dword ptr [esi+0x3E7C]
	test ecx,ecx
	je Block66

 Block34:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E78]
	call ZRef<CUIUserInfo>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block35:
	mov ecx,dword ptr [esi+0x3EB4]
	test ecx,ecx
	je Block66

 Block36:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EB0]
	call ZRef<CUIMonsterBook>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block37:
	mov ecx,dword ptr [esi+0x3EA4]
	test ecx,ecx
	je Block66

 Block38:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EA0]
	call ZRef<CUIEnergyBar>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block39:
	mov ecx,dword ptr [esi+0x3EBC]
	test ecx,ecx
	je Block66

 Block40:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EB8]
	call ZRef<CUIPartySearch>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block41:
	mov ecx,dword ptr [esi+0x3E8C]
	test ecx,ecx
	je Block66

 Block42:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3E88]
	call ZRef<CUIGuildBBS>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block43:
	mov ecx,dword ptr [esi+0x3F10]
	test ecx,ecx
	je Block66

 Block44:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3F0C]
	call ZRef<CUIAccountMoreInfo>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block45:
	mov ecx,dword ptr [esi+0x3F18]
	test ecx,ecx
	je Block66

 Block46:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3F14]
	call ZRef<CUIFindFriend>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block47:
	mov ecx,dword ptr [esi+0x3EC4]
	test ecx,ecx
	je Block66

 Block48:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EC0]
	call ZRef<CUIItemMaker>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block49:
	mov ecx,dword ptr [esi+0x3ECC]
	test ecx,ecx
	je Block66

 Block50:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EC8]
	call ZRef<CUIRanking>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block51:
	mov ecx,dword ptr [esi+0x3ED4]
	test ecx,ecx
	je Block66

 Block52:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3ED0]
	call ZRef<CUIFamily>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block53:
	mov ecx,dword ptr [esi+0x3EDC]
	test ecx,ecx
	je Block66

 Block54:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3ED8]
	call ZRef<CUIFamilyChart>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block55:
	mov ecx,dword ptr [esi+0x3EE4]
	test ecx,ecx
	je Block66

 Block56:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EE0]
	call ZRef<CUIOperatorBoard>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block57:
	mov ecx,dword ptr [esi+0x3F04]
	test ecx,ecx
	je Block66

 Block58:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3F00]
	call ZRef<CUIBattleRecord>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block59:
	mov ecx,dword ptr [esi+0x3EF4]
	test ecx,ecx
	je Block66

 Block60:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EF0]
	call ZRef<CUIDragonBox>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block61:
	mov ecx,dword ptr [esi+0x3EEC]
	mov byte ptr [esi+0x3EF8],0
	test ecx,ecx
	je Block66

 Block62:
	call CWnd::Destroy
	push 0
	lea ecx,[esi+0x3EE8]
	call ZRef<CUIOpBoardState>::op_assign_zero
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4

 Block63:
	mov ecx,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	test ecx,ecx
	je Block66

 Block64:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	test eax,eax
	je Block66

 Block65:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block66:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CWvsContext::SetImpactNextBySessionValue
__SUB_CLASS_THIS(005E52F0, __thiscall, 8420,  CWvsContext, void, const ZXString<char>&, const ZXString<char>&, double, double) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov eax,dword ptr [edi]
	mov esi,ecx
	test eax,eax
	je Block3

 Block1:
	cmp byte ptr [eax],0
	je Block3

 Block2:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x14],esp
	push edi
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,esi
	call CWvsContext::SendRequestSessionValue
	push edi
	lea ecx,[esi+0x41A0]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x10]
	push eax
	lea ecx,[esi+0x41A4]
	call ZXString<char>::op_assign
	fld qword ptr [esp+0x14]
	fstp qword ptr [esi+0x41A8]
	fld qword ptr [esp+0x1C]
	fstp qword ptr [esi+0x41B0]

 Block3:
	pop edi
	pop esi
	ret 0x18
}
}
// CUIStatChange::GetResult
__SUB_CLASS_THIS(005CC770, __thiscall, 68509,  CUIStatChange, void, unsigned long&, unsigned long&) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0xC8]
	mov edx,dword ptr [esp+4]
	mov dword ptr [edx],eax
	mov eax,dword ptr [ecx+0xCC]
	mov ecx,dword ptr [esp+8]
	mov dword ptr [ecx],eax
	ret 8
}
}
// CWvsContext::UI_Toggle
_SUB_EXCEPTION_HANDLER(5DC510)
// 9DD714
static uint8_t _SUB_5DC510_LOOKUP_TABLE_0[43] = {
0, 1, 2, 3, 21, 4, 5, 21, 21, 6, 7, 21, 21, 21, 21, 21, 
21, 21, 21, 21, 21, 8, 9, 21, 21, 10, 11, 12, 13, 14, 15, 16, 
17, 21, 21, 18, 21, 21, 21, 19, 21, 21, 20, 
};
__SUB_CLASS_THIS(005DC510, __thiscall, 8086,  CWvsContext, void, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DC510
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xB8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xCC]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x14],ecx
	mov ebp,dword ptr [esp+0xDC]
	xor ebx,ebx
	mov dword ptr [esp+0x1C],ebx
	cmp ebp,3
	jne Block4

 Block1:
	lea eax,[esp+0x24]
	push eax
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [eax+0x3D]
	mov dword ptr [esp+0xD4],ebx
	push ecx
	add eax,0x39
	mov ebx,1
	push eax
	mov dword ptr [esp+0x24],ebx
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esp,8
	cmp eax,0x16
	je Block3

 Block2:
	cmp ecx,0x7D1
	jne Block4

 Block3:
	mov byte ptr [esp+0x1B],bl
	jmp Block5

 Block4:
	mov byte ptr [esp+0x1B],0

 Block5:
	or esi,0xFFFFFFFF
	mov dword ptr [esp+0xD4],esi
	test bl,1
	je Block10

 Block6:
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block10

 Block7:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block10

 Block8:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block10

 Block9:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block10:
	cmp byte ptr [esp+0x1B],0
	je Block12

 Block11:
	mov ebp,0x20
	jmp Block13

 Block12:
	cmp ebp,0x2A
	ja Block161

 Block13:
	movzx ecx,byte ptr [ebp+_SUB_5DC510_LOOKUP_TABLE_0]
	cmp ECX, 0
je Block14
cmp ECX, 1
je Block21
cmp ECX, 2
je Block28
cmp ECX, 3
je Block35
cmp ECX, 4
je Block49
cmp ECX, 5
je Block56
cmp ECX, 6
je Block77
cmp ECX, 7
je Block70
cmp ECX, 8
je Block84
cmp ECX, 9
je Block91
cmp ECX, 10
je Block98
cmp ECX, 11
je Block105
cmp ECX, 12
je Block112
cmp ECX, 13
je Block119
cmp ECX, 14
je Block126
cmp ECX, 15
je Block63
cmp ECX, 16
je Block140
cmp ECX, 17
je Block42
cmp ECX, 18
je Block147
cmp ECX, 19
je Block133
cmp ECX, 20
je Block154
cmp ECX, 21
je Block161


 Block14:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E34],0
	jne Block18

 Block15:
	lea edx,[esp+0x1C]
	push 0x924
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],1
	call play_ui_sound
	mov eax,dword ptr [esp+0x20]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block17:
	push esi
	push 0
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block18:
	lea eax,[esp+0x74]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],2
	call play_ui_sound
	mov eax,dword ptr [esp+0x78]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block20:
	push 0
	mov ecx,edi
	jmp Block180

 Block21:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E3C],0
	jne Block25

 Block22:
	lea ecx,[esp+0xC0]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],3
	call play_ui_sound
	mov eax,dword ptr [esp+0xC4]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block24

 Block23:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block24:
	push esi
	push 1
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block25:
	lea edx,[esp+0xC8]
	push 0x925
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],4
	call play_ui_sound
	mov eax,dword ptr [esp+0xCC]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block27

 Block26:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block27:
	push 1
	mov ecx,edi
	jmp Block180

 Block28:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E44],0
	jne Block32

 Block29:
	lea eax,[esp+0x34]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],5
	call play_ui_sound
	mov eax,dword ptr [esp+0x38]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block31

 Block30:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block31:
	push esi
	push 2
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block32:
	lea ecx,[esp+0xA4]
	push 0x925
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],6
	call play_ui_sound
	mov eax,dword ptr [esp+0xA8]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block34

 Block33:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block34:
	push 2
	mov ecx,edi
	jmp Block180

 Block35:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E4C],0
	jne Block39

 Block36:
	lea edx,[esp+0x3C]
	push 0x924
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],7
	call play_ui_sound
	mov eax,dword ptr [esp+0x40]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block38

 Block37:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block38:
	push esi
	push 3
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block39:
	lea eax,[esp+0x84]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],8
	call play_ui_sound
	mov eax,dword ptr [esp+0x88]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block41

 Block40:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block41:
	push 3
	mov ecx,edi
	jmp Block180

 Block42:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E54],0
	jne Block46

 Block43:
	lea ecx,[esp+0x44]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],9
	call play_ui_sound
	mov eax,dword ptr [esp+0x48]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block45

 Block44:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block45:
	push esi
	push 0x20
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block46:
	lea edx,[esp+0xC4]
	push 0x925
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0xA
	call play_ui_sound
	mov eax,dword ptr [esp+0xC8]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block48

 Block47:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block48:
	push 0x20
	mov ecx,edi
	jmp Block180

 Block49:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E5C],0
	jne Block53

 Block50:
	lea eax,[esp+0x4C]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0xB
	call play_ui_sound
	mov eax,dword ptr [esp+0x50]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block52

 Block51:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block52:
	push esi
	push 5
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block53:
	lea ecx,[esp+0x8C]
	push 0x925
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0xC
	call play_ui_sound
	mov eax,dword ptr [esp+0x90]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block55

 Block54:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block55:
	push 5
	mov ecx,edi
	jmp Block180

 Block56:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E6C],0
	jne Block60

 Block57:
	lea edx,[esp+0x54]
	push 0x924
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0xD
	call play_ui_sound
	mov eax,dword ptr [esp+0x58]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block59

 Block58:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block59:
	push esi
	push 6
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block60:
	lea eax,[esp+0xAC]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0xE
	call play_ui_sound
	mov eax,dword ptr [esp+0xB0]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block62

 Block61:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block62:
	push 6
	mov ecx,edi
	jmp Block180

 Block63:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E74],0
	jne Block67

 Block64:
	lea ecx,[esp+0x5C]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0xF
	call play_ui_sound
	mov eax,dword ptr [esp+0x60]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block66

 Block65:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block66:
	push esi
	push 0x1E
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block67:
	lea edx,[esp+0x94]
	push 0x925
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x10
	call play_ui_sound
	mov eax,dword ptr [esp+0x98]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block69

 Block68:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block69:
	push 0x1E
	mov ecx,edi
	jmp Block180

 Block70:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E7C],0
	jne Block74

 Block71:
	lea eax,[esp+0x64]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x11
	call play_ui_sound
	mov eax,dword ptr [esp+0x68]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block73

 Block72:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block73:
	push esi
	push 0xA
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block74:
	lea ecx,[esp+0xBC]
	push 0x925
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x12
	call play_ui_sound
	mov eax,dword ptr [esp+0xC0]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block76

 Block75:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block76:
	push 0xA
	mov ecx,edi
	jmp Block180

 Block77:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3EB4],0
	jne Block81

 Block78:
	lea edx,[esp+0x6C]
	push 0x924
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x13
	call play_ui_sound
	mov eax,dword ptr [esp+0x70]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block80

 Block79:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block80:
	push esi
	push 9
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block81:
	lea eax,[esp+0x9C]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x14
	call play_ui_sound
	mov eax,dword ptr [esp+0xA0]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block83

 Block82:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block83:
	push 9
	mov ecx,edi
	jmp Block180

 Block84:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3EBC],0
	jne Block88

 Block85:
	lea ecx,[esp+0x2C]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x15
	call play_ui_sound
	mov eax,dword ptr [esp+0x30]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block87

 Block86:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block87:
	push esi
	push 0x15
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block88:
	lea edx,[esp+0xB4]
	push 0x925
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x16
	call play_ui_sound
	mov eax,dword ptr [esp+0xB8]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block90

 Block89:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block90:
	push 0x15
	mov ecx,edi
	jmp Block180

 Block91:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3EC4],0
	jne Block95

 Block92:
	lea eax,[esp+0x7C]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x17
	call play_ui_sound
	mov eax,dword ptr [esp+0x80]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block94

 Block93:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block94:
	push esi
	push 0x16
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block95:
	lea ecx,[esp+0x30]
	push 0x925
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x18
	call play_ui_sound
	mov eax,dword ptr [esp+0x34]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block97

 Block96:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block97:
	push 0x16
	mov ecx,edi
	jmp Block180

 Block98:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3ECC],0
	jne Block102

 Block99:
	lea edx,[esp+0x38]
	push 0x924
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x19
	call play_ui_sound
	mov eax,dword ptr [esp+0x3C]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block101

 Block100:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block101:
	push esi
	push 0x19
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block102:
	lea eax,[esp+0x40]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x1A
	call play_ui_sound
	mov eax,dword ptr [esp+0x44]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block104

 Block103:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block104:
	push 0x19
	mov ecx,edi
	jmp Block180

 Block105:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3ED4],0
	jne Block109

 Block106:
	lea ecx,[esp+0x48]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x1B
	call play_ui_sound
	mov eax,dword ptr [esp+0x4C]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block108

 Block107:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block108:
	push esi
	push 0x1A
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block109:
	lea edx,[esp+0x50]
	push 0x925
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x1C
	call play_ui_sound
	mov eax,dword ptr [esp+0x54]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block111

 Block110:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block111:
	push 0x1A
	mov ecx,edi
	jmp Block180

 Block112:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3EDC],0
	jne Block116

 Block113:
	lea eax,[esp+0x58]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x1D
	call play_ui_sound
	mov eax,dword ptr [esp+0x5C]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block115

 Block114:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block115:
	push esi
	push 0x1B
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block116:
	lea ecx,[esp+0x60]
	push 0x925
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x1E
	call play_ui_sound
	mov eax,dword ptr [esp+0x64]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block118

 Block117:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block118:
	push 0x1B
	mov ecx,edi
	jmp Block180

 Block119:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3EE4],0
	jne Block123

 Block120:
	lea edx,[esp+0x68]
	push 0x924
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x1F
	call play_ui_sound
	mov eax,dword ptr [esp+0x6C]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block122

 Block121:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block122:
	push esi
	push 0x1C
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block123:
	lea eax,[esp+0x70]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x20
	call play_ui_sound
	mov eax,dword ptr [esp+0x74]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block125

 Block124:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block125:
	push 0x1C
	mov ecx,edi
	jmp Block180

 Block126:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3EEC],0
	jne Block130

 Block127:
	lea ecx,[esp+0x78]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x21
	call play_ui_sound
	mov eax,dword ptr [esp+0x7C]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block129

 Block128:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block129:
	push esi
	push 0x1D
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block130:
	lea edx,[esp+0x80]
	push 0x925
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x22
	call play_ui_sound
	mov eax,dword ptr [esp+0x84]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block132

 Block131:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block132:
	push 0x1D
	mov ecx,edi
	jmp Block180

 Block133:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3E8C],0
	jne Block137

 Block134:
	lea eax,[esp+0x88]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x23
	call play_ui_sound
	mov eax,dword ptr [esp+0x8C]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block136

 Block135:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block136:
	push esi
	push 0x27
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block137:
	lea ecx,[esp+0x90]
	push 0x925
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x24
	call play_ui_sound
	mov eax,dword ptr [esp+0x94]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block139

 Block138:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block139:
	push 0x27
	mov ecx,edi
	jmp Block180

 Block140:
	cmp dword ptr [TSingleton<CUIWebEvent>::ms_pInstance],0
	jne Block144

 Block141:
	lea edx,[esp+0x98]
	push 0x924
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x25
	call play_ui_sound
	mov eax,dword ptr [esp+0x9C]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block143

 Block142:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block143:
	mov ecx,dword ptr [esp+0x14]
	push esi
	push 0x1F
	call CWvsContext::UI_Open
	jmp Block181

 Block144:
	lea eax,[esp+0xA0]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x26
	call play_ui_sound
	mov eax,dword ptr [esp+0xA4]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block146

 Block145:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block146:
	push 0x1F
	jmp Block179

 Block147:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3F04],0
	jne Block151

 Block148:
	lea ecx,[esp+0xA8]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x27
	call play_ui_sound
	mov eax,dword ptr [esp+0xAC]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block150

 Block149:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block150:
	push esi
	push 0x23
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block151:
	lea edx,[esp+0xB0]
	push 0x925
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x28
	call play_ui_sound
	mov eax,dword ptr [esp+0xB4]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block153

 Block152:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block153:
	push 0x23
	mov ecx,edi
	jmp Block180

 Block154:
	mov edi,dword ptr [esp+0x14]
	cmp dword ptr [edi+0x3EF4],0
	jne Block158

 Block155:
	lea eax,[esp+0xB8]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x29
	call play_ui_sound
	mov eax,dword ptr [esp+0xBC]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block157

 Block156:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block157:
	push esi
	push 0x2A
	mov ecx,edi
	call CWvsContext::UI_Open
	jmp Block181

 Block158:
	lea ecx,[esp+0x24]
	push 0x925
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x2A
	call play_ui_sound
	mov eax,dword ptr [esp+0x28]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block160

 Block159:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block160:
	push 0x2A
	mov ecx,edi
	jmp Block180

 Block161:
	cmp ebp,7
	jne Block181

 Block162:
	mov ecx,dword ptr [TSingleton<CUIUserList>::ms_pInstance]
	test ecx,ecx
	jne Block172

 Block163:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block166

 Block164:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block166

 Block165:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x1C]
	mov ecx,edi
	call eax
	cmp eax,0x16
	je Block181

 Block166:
	lea ecx,[esp+0x24]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x2B
	call play_ui_sound
	mov eax,dword ptr [esp+0x28]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block168

 Block167:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block168:
	mov edi,dword ptr [esp+0x14]
	mov ecx,edi
	call CWvsContext::CheckReqFriend
	push 0xCBC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x20],eax
	mov dword ptr [esp+0xD4],0x2C
	test eax,eax
	je Block170

 Block169:
	mov edx,dword ptr [esp+0xE0]
	push edx
	mov ecx,eax
	call CUIUserList::_ctor_0
	jmp Block171

 Block170:
	xor eax,eax

 Block171:
	push eax
	lea ecx,[edi+0x3E60]
	mov dword ptr [esp+0xD8],esi
	call ZRef<CUIUserList>::op_assign_ptr
	jmp Block181

 Block172:
	mov edx,dword ptr [ecx+0xB1C]
	mov eax,dword ptr [esp+0xE0]
	cmp edx,eax
	je Block176

 Block173:
	test eax,eax
	jl Block181

 Block174:
	mov esi,dword ptr [ecx+0xB10]
	cmp eax,dword ptr [esi+0x50]
	lea edx,[ecx+0xB10]
	jge Block181

 Block175:
	mov dword ptr [ecx+0xB1C],eax
	push eax
	mov ecx,esi
	call CCtrlTab::SetTab
	jmp Block181

 Block176:
	lea eax,[esp+0x20]
	push 0x925
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0xD8],0x2D
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0xD4],esi
	test eax,eax
	je Block178

 Block177:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block178:
	push 7

 Block179:
	mov ecx,dword ptr [esp+0x18]

 Block180:
	call CWvsContext::UI_Close

 Block181:
	mov ecx,dword ptr [esp+0xCC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC4
	ret 8
}
}
// CUISkillDec::CUISkillDec
_SUB_EXCEPTION_HANDLER(5EAF90)
__SUB_CLASS_THIS0(005EAF90, __thiscall, 68551,  CUISkillDec, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5EAF90
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	call CDialog::_ctor_default
	xor edi,edi
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillDec::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillDec::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillDec::`vftable'{for `ZRefCounted'}
	mov dword ptr [esp+0x18],edi
	mov dword ptr [esi+0x90],edi
	mov dword ptr [esi+0x98],edi
	mov dword ptr [esi+0xA0],edi
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push offset ZRef<CCtrlButton>::_ctor_default
	push 4
	push 8
	lea eax,[esi+0xA4]
	push eax
	mov byte ptr [esp+0x2C],3
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0xC8],edi
	mov dword ptr [esi+0xCC],edi
	mov dword ptr [esi+0xE0],edi
	mov dword ptr [esi+0xE4],edi
	mov dword ptr [esi+0xE8],edi
	mov dword ptr [esi+0xEC],edi
	mov dword ptr [esi+0xF0],edi
	mov dword ptr [esi+0xDC],edi
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::HoldPartyMemberSearch
__SUB_CLASS_THIS0(005DAB90, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CUIPartySearch>::ms_pInstance]
	test ecx,ecx
	je Block2

 Block1:
	pop esi
	jmp  CUIPartySearch::HoldSearch

 Block2:
	mov ecx,esi
	mov dword ptr [esi+0x37A8],2
	call CWvsContext::ShowPartySearch_Remocon_Holding
	mov ecx,esi
	pop esi
	jmp  CWvsContext::SendCancelPartyWanted
}
}
// CWvsContext::SendEmotionChange
_SUB_EXCEPTION_HANDLER(5F9320)
__SUB_CLASS_THIS(005F9320, __thiscall, 8260,  CWvsContext, void, long, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F9320
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov esi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test esi,esi
	je Block6

 Block1:
	cmp dword ptr [esi+0x5D0],0
	je Block3

 Block2:
	call CWvsContext::AddChatMorphedMsg
	jmp Block6

 Block3:
	call timeGetTime
	mov ebp,eax
	sub eax,dword ptr [ebx+0x3D88]
	cmp eax,0x7D0
	jl Block6

 Block4:
	mov eax,dword ptr [esp+0x34]
	cmp eax,0x17
	ja Block6

 Block5:
	mov edi,dword ptr [esp+0x3C]
	push edi
	add esi,0x88
	push eax
	mov ecx,esi
	call CAvatar::SetEmotion
	push 0x38
	lea ecx,[esp+0x18]
	mov dword ptr [ebx+0x3D88],ebp
	call COutPacket::_ctor_1
	mov ecx,esi
	mov dword ptr [esp+0x2C],0
	call CAvatar::GetEmotion
	push eax
	lea ecx,[esp+0x18]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x18]
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x38]
	push ecx
	lea ecx,[esp+0x18]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x14]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block6:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 0xC
}
}
// CUIStatChange::~CUIStatChange
_SUB_EXCEPTION_HANDLER(5DFE80)
__SUB_CLASS_THIS0(005DFE80, __thiscall, 68506,  CUIStatChange, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DFE80
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUIStatChange::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUIStatChange::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUIStatChange::`vftable'{for `ZRefCounted'}
	lea ecx,[esi+0xD0]
	mov dword ptr [esp+0x18],2
	call CLayoutMan::~CLayoutMan
	cmp dword ptr [esi+0xC4],0
	lea edi,[esi+0xC0]
	mov byte ptr [esp+0x18],1
	je Block2

 Block1:
	push 0
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],0

 Block2:
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push 6
	push 8
	lea eax,[esi+0x90]
	push eax
	mov byte ptr [esp+0x28],0
	call __eh_vector_dtor_iterator
	mov ecx,esi
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call CDialog::~CDialog
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// COpenGatePool::Update
_SUB_EXCEPTION_HANDLER(289E00)
__SUB_CLASS_THIS(00289E00, __thiscall, 51990,  COpenGatePool, void, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_289E00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x104
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x118]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x28],esi
	mov eax,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov ecx,dword ptr [eax+8]
	lea edx,[esp+0x24]
	push edx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [esp+0x24]
	xor ebx,ebx
	cmp eax,ebx
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	mov eax,dword ptr [esi+0x28]
	mov dword ptr [esp+0x24],eax
	cmp eax,ebx
	je Block148

 Block3:
	lea esp,[esp]

 Block4:
	lea eax,[esp+0x24]
	push eax
	call ZList<ZRef<COpenGatePool::OPENGATE>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x110],esi
	cmp esi,ebx
	je Block6

 Block5:
	lea ecx,[esi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block6:
	mov dword ptr [esp+0x120],ebx
	call timeGetTime
	mov dword ptr [esp+0x14],eax
	cmp dword ptr [esi],ebx
	jne Block80

 Block7:
	mov edx,eax
	sub edx,dword ptr [esi+0x20]
	cmp edx,0x708
	jle Block80

 Block8:
	push 1
	mov dword ptr [esp+0x24],ebx
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea eax,[esp+0x28]
	push eax
	sub ecx,5
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	cmp edi,ebx
	jne Block10

 Block9:
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov edx,dword ptr [esi+0x10]
	mov edi,eax
	mov dword ptr [esp+0x20],edx

 Block10:
	mov dword ptr [esp+0x34],ebx
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esi+8]
	push ecx
	mov ecx,dword ptr [esp+0x30]
	add ecx,0x30
	mov byte ptr [esp+0x128],1
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	mov ebp,dword ptr [esp+0x34]
	push ebx
	test eax,eax
	mov eax,dword ptr [edi+0x2C]
	push 0xFF
	je Block54

 Block11:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	mov dword ptr [eax],ebx
	lea ecx,[esp+0x6C]
	push 0xAC6
	push ecx
	mov byte ptr [esp+0x144],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],4
	push ebx
	push eax
	lea edx,[esp+0x80]
	push edx
	mov byte ptr [esp+0x148],5
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block16

 Block12:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block14

 Block13:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block14:
	cmp edi,ebx
	je Block16

 Block15:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block16:
	mov eax,dword ptr [esp+0x5C]
	cmp eax,ebx
	je Block18

 Block17:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block18:
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x120],1
	cmp eax,ebx
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block20:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0xCC]
	push ecx
	call edi
	lea edx,[esp+0xCC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block21:
	lea eax,[esp+0x6C]
	push eax
	mov byte ptr [esp+0x124],6
	call edi
	lea ecx,[esp+0x6C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block22:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x120],7
	cmp ecx,ebx
	je Block151

 Block23:
	lea edx,[esp+0xCC]
	push edx
	lea eax,[esp+0x70]
	push eax
	push ebx
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x120],6
	cmp word ptr [esp+0x6C],di
	jne Block26

 Block24:
	mov eax,dword ptr [esp+0x74]
	xor ecx,ecx
	mov word ptr [esp+0x6C],cx
	cmp eax,ebx
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea edx,[esp+0x6C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block27:
	mov byte ptr [esp+0x120],1
	cmp word ptr [esp+0xCC],di
	jne Block30

 Block28:
	xor eax,eax
	mov word ptr [esp+0xCC],ax
	mov eax,dword ptr [esp+0xD4]
	cmp eax,ebx
	je Block31

 Block29:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block31

 Block30:
	lea ecx,[esp+0xCC]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block31:
	mov edx,dword ptr [esp+0x14]
	push 1
	mov dword ptr [esi+0x20],edx
	mov ecx,dword ptr [ebp+0x10]
	mov edx,dword ptr [ebp+0xC]
	push 0x7FFFFFFF
	lea eax,[esp+0x28]
	push eax
	sub ecx,5
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	cmp eax,ebx
	jne Block33

 Block32:
	mov eax,dword ptr [ebp+0x10]
	mov ecx,dword ptr [ebp+0xC]
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov edx,dword ptr [ebp+0x10]
	mov dword ptr [esp+0x20],edx

 Block33:
	mov eax,dword ptr [eax+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov eax,dword ptr [ebp+0x10]
	mov ecx,dword ptr [ebp+0xC]
	push eax
	push ecx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea edx,[esp+0x7C]
	push 0xAC6
	push edx
	mov byte ptr [esp+0x144],9
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0xA
	push ebx
	push eax
	lea eax,[esp+0x7C]
	push eax
	mov byte ptr [esp+0x148],0xB
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp+0x18]
	add esp,0x28
	cmp edi,eax
	je Block38

 Block34:
	mov dword ptr [ebp+0x18],eax
	cmp eax,ebx
	je Block36

 Block35:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block36:
	cmp edi,ebx
	je Block38

 Block37:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block38:
	mov eax,dword ptr [esp+0x58]
	cmp eax,ebx
	je Block40

 Block39:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block40:
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0x120],1
	cmp eax,ebx
	je Block42

 Block41:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block42:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0xEC]
	push ecx
	call edi
	lea edx,[esp+0xEC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block43:
	lea eax,[esp+0xAC]
	push eax
	mov byte ptr [esp+0x124],0xC
	call edi
	lea ecx,[esp+0xAC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block44:
	mov ecx,dword ptr [ebp+0x18]
	mov byte ptr [esp+0x120],0xD
	cmp ecx,ebx
	je Block151

 Block45:
	lea edx,[esp+0xEC]
	push edx
	lea eax,[esp+0xB0]
	push eax
	push ebx
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x120],0xC
	cmp word ptr [esp+0xAC],di
	jne Block48

 Block46:
	mov eax,dword ptr [esp+0xB4]
	xor ecx,ecx
	mov word ptr [esp+0xAC],cx
	cmp eax,ebx
	je Block49

 Block47:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block49

 Block48:
	lea edx,[esp+0xAC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block49:
	mov byte ptr [esp+0x120],1
	cmp word ptr [esp+0xEC],di
	jne Block52

 Block50:
	xor eax,eax
	mov word ptr [esp+0xEC],ax
	mov eax,dword ptr [esp+0xF4]
	cmp eax,ebx
	je Block53

 Block51:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block53

 Block52:
	lea ecx,[esp+0xEC]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block53:
	mov edx,dword ptr [esp+0x14]
	mov dword ptr [ebp+0x20],edx
	mov dword ptr [ebp+0x24],ebx
	mov dword ptr [ebp],1
	jmp Block75

 Block54:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push eax
	push ecx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea edx,[esp+0x60]
	push 0xAC5
	push edx
	mov byte ptr [esp+0x144],0xF
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x10
	push ebx
	push eax
	lea eax,[esp+0x64]
	push eax
	mov byte ptr [esp+0x148],0x11
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block59

 Block55:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block57

 Block56:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block57:
	cmp edi,ebx
	je Block59

 Block58:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block59:
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebx
	je Block61

 Block60:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block61:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0x120],1
	cmp eax,ebx
	je Block63

 Block62:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block63:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x9C]
	push ecx
	call edi
	lea edx,[esp+0x9C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block64:
	lea eax,[esp+0x7C]
	push eax
	mov byte ptr [esp+0x124],0x12
	call edi
	lea ecx,[esp+0x7C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block65:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x120],0x13
	cmp ecx,ebx
	je Block151

 Block66:
	lea edx,[esp+0x9C]
	push edx
	lea eax,[esp+0x80]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x120],0x12
	cmp word ptr [esp+0x7C],di
	jne Block69

 Block67:
	mov eax,dword ptr [esp+0x84]
	xor ecx,ecx
	mov word ptr [esp+0x7C],cx
	cmp eax,ebx
	je Block70

 Block68:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block70

 Block69:
	lea edx,[esp+0x7C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block70:
	mov byte ptr [esp+0x120],1
	cmp word ptr [esp+0x9C],di
	jne Block73

 Block71:
	xor eax,eax
	mov word ptr [esp+0x9C],ax
	mov eax,dword ptr [esp+0xA4]
	cmp eax,ebx
	je Block74

 Block72:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block74

 Block73:
	lea ecx,[esp+0x9C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block74:
	mov dword ptr [esi+0x24],1

 Block75:
	mov dword ptr [esi],1
	mov byte ptr [esp+0x120],0
	cmp ebp,ebx
	je Block80

 Block76:
	lea edi,[ebp-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block79

 Block77:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block79

 Block78:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block79:
	mov dword ptr [esp+0x34],ebx

 Block80:
	cmp dword ptr [esi],1
	jne Block143

 Block81:
	cmp dword ptr [esi+0x24],ebx
	jne Block143

 Block82:
	mov eax,dword ptr [esp+0x14]
	sub eax,dword ptr [esi+0x20]
	cmp eax,0x708
	jle Block143

 Block83:
	push 1
	mov dword ptr [esp+0x18],ebx
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	cmp edi,ebx
	jne Block85

 Block84:
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov edi,eax
	mov eax,dword ptr [esi+0x10]
	mov dword ptr [esp+0x14],eax

 Block85:
	mov dword ptr [esp+0x3C],ebx
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	lea edx,[esi+8]
	push edx
	add ecx,0x30
	mov byte ptr [esp+0x128],0x14
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	mov ebp,dword ptr [esp+0x3C]
	push ebx
	test eax,eax
	mov eax,dword ptr [edi+0x2C]
	push 0xFF
	je Block117

 Block86:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push eax
	push ecx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea edx,[esp+0x68]
	push 0xAC7
	push edx
	mov byte ptr [esp+0x144],0x16
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x17
	push ebx
	push eax
	lea eax,[esp+0x6C]
	push eax
	mov byte ptr [esp+0x148],0x18
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block91

 Block87:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block89

 Block88:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block89:
	cmp edi,ebx
	je Block91

 Block90:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block91:
	mov eax,dword ptr [esp+0x48]
	cmp eax,ebx
	je Block93

 Block92:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block93:
	mov eax,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x120],0x14
	cmp eax,ebx
	je Block95

 Block94:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block95:
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	push 1
	push 0x7FFFFFFF
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	cmp eax,ebx
	jne Block97

 Block96:
	mov ecx,dword ptr [ebp+0x10]
	mov edx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [ebp+0x10]
	mov dword ptr [esp+0x14],ecx

 Block97:
	mov eax,dword ptr [eax+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea ecx,[esp+0x70]
	push 0xAC7
	push ecx
	mov byte ptr [esp+0x144],0x1A
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x1B
	push ebx
	push eax
	lea edx,[esp+0x8C]
	push edx
	mov byte ptr [esp+0x148],0x1C
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp+0x18]
	add esp,0x28
	cmp edi,eax
	je Block102

 Block98:
	mov dword ptr [ebp+0x18],eax
	cmp eax,ebx
	je Block100

 Block99:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block100:
	cmp edi,ebx
	je Block102

 Block101:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block102:
	mov eax,dword ptr [esp+0x68]
	cmp eax,ebx
	je Block104

 Block103:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block104:
	mov eax,dword ptr [esp+0x54]
	mov byte ptr [esp+0x120],0x14
	cmp eax,ebx
	je Block106

 Block105:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block106:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0xDC]
	push ecx
	call edi
	lea edx,[esp+0xDC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block107:
	lea eax,[esp+0xBC]
	push eax
	mov byte ptr [esp+0x124],0x1D
	call edi
	lea ecx,[esp+0xBC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block108:
	mov ecx,dword ptr [ebp+0x18]
	mov byte ptr [esp+0x120],0x1E
	cmp ecx,ebx
	je Block151

 Block109:
	lea edx,[esp+0xDC]
	push edx
	lea eax,[esp+0xC0]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	cmp word ptr [esp+0xBC],8
	mov byte ptr [esp+0x120],0x1D
	jne Block112

 Block110:
	mov eax,dword ptr [esp+0xC4]
	xor ecx,ecx
	mov word ptr [esp+0xBC],cx
	cmp eax,ebx
	je Block113

 Block111:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block113

 Block112:
	lea edx,[esp+0xBC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block113:
	cmp word ptr [esp+0xDC],8
	mov byte ptr [esp+0x120],0x14
	jne Block116

 Block114:
	xor eax,eax
	mov word ptr [esp+0xDC],ax
	mov eax,dword ptr [esp+0xE4]
	cmp eax,ebx
	je Block127

 Block115:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block127

 Block116:
	lea ecx,[esp+0xDC]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block127

 Block117:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea ecx,[esp+0x48]
	push 0xAC5
	push ecx
	mov byte ptr [esp+0x144],0x20
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x21
	push ebx
	push eax
	lea edx,[esp+0x88]
	push edx
	mov byte ptr [esp+0x148],0x22
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block122

 Block118:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block120

 Block119:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block120:
	cmp edi,ebx
	je Block122

 Block121:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block122:
	mov eax,dword ptr [esp+0x64]
	cmp eax,ebx
	je Block124

 Block123:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block124:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x120],0x14
	cmp eax,ebx
	je Block126

 Block125:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block126:
	mov edi,dword ptr [ZImports::_VariantInit]

 Block127:
	lea ecx,[esp+0x8C]
	push ecx
	call edi
	lea edx,[esp+0x8C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block128:
	lea eax,[esp+0xFC]
	push eax
	mov byte ptr [esp+0x124],0x23
	call edi
	lea ecx,[esp+0xFC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block129:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x120],0x24
	cmp ecx,ebx
	je Block151

 Block130:
	lea edx,[esp+0x8C]
	push edx
	lea eax,[esp+0x100]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x120],0x23
	cmp word ptr [esp+0xFC],di
	jne Block133

 Block131:
	mov eax,dword ptr [esp+0x104]
	xor ecx,ecx
	mov word ptr [esp+0xFC],cx
	cmp eax,ebx
	je Block134

 Block132:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block134

 Block133:
	lea edx,[esp+0xFC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block134:
	mov byte ptr [esp+0x120],0x14
	cmp word ptr [esp+0x8C],di
	jne Block137

 Block135:
	xor eax,eax
	mov word ptr [esp+0x8C],ax
	mov eax,dword ptr [esp+0x94]
	cmp eax,ebx
	je Block138

 Block136:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block138

 Block137:
	lea ecx,[esp+0x8C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block138:
	mov dword ptr [esi+0x24],1
	mov byte ptr [esp+0x120],0
	cmp ebp,ebx
	je Block143

 Block139:
	lea edi,[ebp-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block142

 Block140:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block142

 Block141:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block142:
	mov dword ptr [esp+0x3C],ebx

 Block143:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x124],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block146

 Block144:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block146

 Block145:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block146:
	mov dword ptr [esp+0x110],ebx
	cmp dword ptr [esp+0x24],ebx
	jne Block4

 Block147:
	mov esi,dword ptr [esp+0x28]

 Block148:
	mov eax,dword ptr [esi+0x54]
	mov dword ptr [esp+0x24],eax
	cmp eax,ebx
	je Block296

 Block149:
	jmp Block153

 Block150:
	push eax
	call _com_issue_error

 Block151:
	push 0x80004003
	call _com_issue_error

 Block152:
	xor ebx,ebx

 Block153:
	lea ecx,[esp+0x24]
	push ecx
	call ZList<ZRef<COpenGatePool::OPENGATE>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x110],esi
	cmp esi,ebx
	je Block155

 Block154:
	lea edx,[esi-0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block155:
	mov dword ptr [esp+0x120],0x25
	call timeGetTime
	cmp dword ptr [esi],0
	mov ebx,eax
	jne Block229

 Block156:
	sub eax,dword ptr [esi+0x20]
	cmp eax,0x708
	jle Block229

 Block157:
	push 1
	mov dword ptr [esp+0x18],0
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	test edi,edi
	jne Block159

 Block158:
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov edi,eax
	mov eax,dword ptr [esi+0x10]
	mov dword ptr [esp+0x14],eax

 Block159:
	mov dword ptr [esp+0x3C],0
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	lea edx,[esi+8]
	push edx
	add ecx,4
	mov byte ptr [esp+0x128],0x26
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	mov ebp,dword ptr [esp+0x3C]
	push 0
	test eax,eax
	mov eax,dword ptr [edi+0x2C]
	push 0xFF
	je Block203

 Block160:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],0
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push eax
	push ecx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	lea edx,[esp+0x80]
	push 0xAC6
	push edx
	mov byte ptr [esp+0x144],0x28
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x29
	push 0
	push eax
	lea eax,[esp+0x50]
	push eax
	mov byte ptr [esp+0x148],0x2A
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block165

 Block161:
	mov dword ptr [esi+0x18],eax
	test eax,eax
	je Block163

 Block162:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block163:
	test edi,edi
	je Block165

 Block164:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block165:
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block167

 Block166:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block167:
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0x120],0x26
	test eax,eax
	je Block169

 Block168:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block169:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0xFC]
	push ecx
	call edi
	lea edx,[esp+0xFC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block170:
	lea eax,[esp+0x8C]
	push eax
	mov byte ptr [esp+0x124],0x2B
	call edi
	lea ecx,[esp+0x8C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block171:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x120],0x2C
	test ecx,ecx
	je Block151

 Block172:
	lea edx,[esp+0xFC]
	push edx
	lea eax,[esp+0x90]
	push eax
	push 0
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x120],0x2B
	cmp word ptr [esp+0x8C],di
	jne Block175

 Block173:
	mov eax,dword ptr [esp+0x94]
	xor ecx,ecx
	mov word ptr [esp+0x8C],cx
	test eax,eax
	je Block176

 Block174:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block176

 Block175:
	lea edx,[esp+0x8C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block176:
	mov byte ptr [esp+0x120],0x26
	cmp word ptr [esp+0xFC],di
	jne Block179

 Block177:
	xor eax,eax
	mov word ptr [esp+0xFC],ax
	mov eax,dword ptr [esp+0x104]
	test eax,eax
	je Block180

 Block178:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block180

 Block179:
	lea ecx,[esp+0xFC]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block180:
	push 1
	mov dword ptr [esi+0x20],ebx
	mov eax,dword ptr [ebp+0x10]
	mov ecx,dword ptr [ebp+0xC]
	push 0x7FFFFFFF
	lea edx,[esp+0x1C]
	push edx
	sub eax,5
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test eax,eax
	jne Block182

 Block181:
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [ebp+0x10]
	mov dword ptr [esp+0x14],ecx

 Block182:
	mov eax,dword ptr [eax+0x2C]
	imul eax,0x7530
	push 0
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],0
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x84]
	push 0xAC6
	push ecx
	mov byte ptr [esp+0x144],0x2E
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x2F
	push 0
	push eax
	lea edx,[esp+0x78]
	push edx
	mov byte ptr [esp+0x148],0x30
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp+0x18]
	add esp,0x28
	cmp edi,eax
	je Block187

 Block183:
	mov dword ptr [ebp+0x18],eax
	test eax,eax
	je Block185

 Block184:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block185:
	test edi,edi
	je Block187

 Block186:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block187:
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block189

 Block188:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block189:
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0x120],0x26
	test eax,eax
	je Block191

 Block190:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block191:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0xBC]
	push ecx
	call edi
	lea edx,[esp+0xBC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block192:
	lea eax,[esp+0xDC]
	push eax
	mov byte ptr [esp+0x124],0x31
	call edi
	lea ecx,[esp+0xDC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block193:
	mov ecx,dword ptr [ebp+0x18]
	mov byte ptr [esp+0x120],0x32
	test ecx,ecx
	je Block151

 Block194:
	lea edx,[esp+0xBC]
	push edx
	lea eax,[esp+0xE0]
	push eax
	push 0
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x120],0x31
	cmp word ptr [esp+0xDC],di
	jne Block197

 Block195:
	mov eax,dword ptr [esp+0xE4]
	xor ecx,ecx
	mov word ptr [esp+0xDC],cx
	test eax,eax
	je Block198

 Block196:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block198

 Block197:
	lea edx,[esp+0xDC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block198:
	mov byte ptr [esp+0x120],0x26
	cmp word ptr [esp+0xBC],di
	jne Block201

 Block199:
	xor eax,eax
	mov word ptr [esp+0xBC],ax
	mov eax,dword ptr [esp+0xC4]
	test eax,eax
	je Block202

 Block200:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block202

 Block201:
	lea ecx,[esp+0xBC]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block202:
	mov dword ptr [ebp+0x20],ebx
	mov dword ptr [ebp+0x24],0
	mov dword ptr [ebp],1
	jmp Block224

 Block203:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],0
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x64]
	push 0xAC5
	push ecx
	mov byte ptr [esp+0x144],0x34
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x35
	push 0
	push eax
	lea edx,[esp+0x70]
	push edx
	mov byte ptr [esp+0x148],0x36
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block208

 Block204:
	mov dword ptr [esi+0x18],eax
	test eax,eax
	je Block206

 Block205:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block206:
	test edi,edi
	je Block208

 Block207:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block208:
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block210

 Block209:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block210:
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0x120],0x26
	test eax,eax
	je Block212

 Block211:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block212:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x7C]
	push ecx
	call edi
	lea edx,[esp+0x7C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block213:
	lea eax,[esp+0x9C]
	push eax
	mov byte ptr [esp+0x124],0x37
	call edi
	lea ecx,[esp+0x9C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block214:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x120],0x38
	test ecx,ecx
	je Block151

 Block215:
	lea edx,[esp+0x7C]
	push edx
	lea eax,[esp+0xA0]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x120],0x37
	cmp word ptr [esp+0x9C],di
	jne Block218

 Block216:
	mov eax,dword ptr [esp+0xA4]
	xor ecx,ecx
	mov word ptr [esp+0x9C],cx
	test eax,eax
	je Block219

 Block217:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block219

 Block218:
	lea edx,[esp+0x9C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block219:
	mov byte ptr [esp+0x120],0x26
	cmp word ptr [esp+0x7C],di
	jne Block222

 Block220:
	xor eax,eax
	mov word ptr [esp+0x7C],ax
	mov eax,dword ptr [esp+0x84]
	test eax,eax
	je Block223

 Block221:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block223

 Block222:
	lea ecx,[esp+0x7C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block223:
	mov dword ptr [esi+0x24],1

 Block224:
	mov dword ptr [esi],1
	mov byte ptr [esp+0x120],0x25
	test ebp,ebp
	je Block229

 Block225:
	lea edi,[ebp-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block228

 Block226:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block228

 Block227:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block228:
	mov dword ptr [esp+0x3C],0

 Block229:
	cmp dword ptr [esi],1
	jne Block292

 Block230:
	cmp dword ptr [esi+0x24],0
	jne Block292

 Block231:
	sub ebx,dword ptr [esi+0x20]
	cmp ebx,0x708
	jle Block292

 Block232:
	push 1
	xor ebx,ebx
	mov dword ptr [esp+0x24],ebx
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	cmp edi,ebx
	jne Block234

 Block233:
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov edi,eax
	mov eax,dword ptr [esi+0x10]
	mov dword ptr [esp+0x20],eax

 Block234:
	mov dword ptr [esp+0x34],ebx
	lea ecx,[esp+0x30]
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	lea edx,[esi+8]
	push edx
	add ecx,4
	mov byte ptr [esp+0x128],0x39
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	mov ebp,dword ptr [esp+0x34]
	push ebx
	test eax,eax
	mov eax,dword ptr [edi+0x2C]
	push 0xFF
	je Block266

 Block235:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	push eax
	push ecx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea edx,[esp+0x5C]
	push 0xAC7
	push edx
	mov byte ptr [esp+0x144],0x3B
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x3C
	push ebx
	push eax
	lea eax,[esp+0x68]
	push eax
	mov byte ptr [esp+0x148],0x3D
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block240

 Block236:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block238

 Block237:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block238:
	cmp edi,ebx
	je Block240

 Block239:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block240:
	mov eax,dword ptr [esp+0x44]
	cmp eax,ebx
	je Block242

 Block241:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block242:
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0x120],0x39
	cmp eax,ebx
	je Block244

 Block243:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block244:
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	push 1
	push 0x7FFFFFFF
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	cmp eax,ebx
	jne Block246

 Block245:
	mov ecx,dword ptr [ebp+0x10]
	mov edx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [ebp+0x10]
	mov dword ptr [esp+0x20],ecx

 Block246:
	mov eax,dword ptr [eax+0x2C]
	imul eax,0x7530
	push ebx
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea ecx,[esp+0x74]
	push 0xAC7
	push ecx
	mov byte ptr [esp+0x144],0x3F
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x40
	push ebx
	push eax
	lea edx,[esp+0x84]
	push edx
	mov byte ptr [esp+0x148],0x41
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp+0x18]
	add esp,0x28
	cmp edi,eax
	je Block251

 Block247:
	mov dword ptr [ebp+0x18],eax
	cmp eax,ebx
	je Block249

 Block248:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block249:
	cmp edi,ebx
	je Block251

 Block250:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block251:
	mov eax,dword ptr [esp+0x60]
	cmp eax,ebx
	je Block253

 Block252:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block253:
	mov eax,dword ptr [esp+0x58]
	mov byte ptr [esp+0x120],0x39
	cmp eax,ebx
	je Block255

 Block254:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block255:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0xAC]
	push ecx
	call edi
	lea edx,[esp+0xAC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block256:
	lea eax,[esp+0xEC]
	push eax
	mov byte ptr [esp+0x124],0x42
	call edi
	lea ecx,[esp+0xEC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block150

 Block257:
	mov ecx,dword ptr [ebp+0x18]
	mov byte ptr [esp+0x120],0x43
	cmp ecx,ebx
	je Block151

 Block258:
	lea edx,[esp+0xAC]
	push edx
	lea eax,[esp+0xF0]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov ebx,8
	mov byte ptr [esp+0x120],0x42
	cmp word ptr [esp+0xEC],bx
	jne Block261

 Block259:
	mov eax,dword ptr [esp+0xF4]
	xor ecx,ecx
	mov word ptr [esp+0xEC],cx
	test eax,eax
	je Block262

 Block260:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block262

 Block261:
	lea edx,[esp+0xEC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block262:
	mov byte ptr [esp+0x120],0x39
	cmp word ptr [esp+0xAC],bx
	jne Block265

 Block263:
	xor eax,eax
	mov word ptr [esp+0xAC],ax
	mov eax,dword ptr [esp+0xB4]
	test eax,eax
	je Block276

 Block264:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block276

 Block265:
	lea ecx,[esp+0xAC]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block276

 Block266:
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],ebx
	lea ecx,[esp+0x78]
	push 0xAC5
	push ecx
	mov byte ptr [esp+0x144],0x45
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x13C],0x46
	push ebx
	push eax
	lea edx,[esp+0x74]
	push edx
	mov byte ptr [esp+0x148],0x47
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block271

 Block267:
	mov dword ptr [esi+0x18],eax
	cmp eax,ebx
	je Block269

 Block268:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block269:
	cmp edi,ebx
	je Block271

 Block270:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block271:
	mov eax,dword ptr [esp+0x50]
	cmp eax,ebx
	je Block273

 Block272:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block273:
	mov eax,dword ptr [esp+0x5C]
	mov byte ptr [esp+0x120],0x39
	cmp eax,ebx
	je Block275

 Block274:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block275:
	mov edi,dword ptr [ZImports::_VariantInit]
	mov ebx,8

 Block276:
	lea ecx,[esp+0x6C]
	push ecx
	call edi
	lea edx,[esp+0x6C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block277:
	lea eax,[esp+0xCC]
	push eax
	mov byte ptr [esp+0x124],0x48
	call edi
	lea ecx,[esp+0xCC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block150

 Block278:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x120],0x49
	test ecx,ecx
	je Block151

 Block279:
	lea edx,[esp+0x6C]
	push edx
	lea eax,[esp+0xD0]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov byte ptr [esp+0x120],0x48
	cmp word ptr [esp+0xCC],bx
	jne Block282

 Block280:
	mov eax,dword ptr [esp+0xD4]
	xor ecx,ecx
	mov word ptr [esp+0xCC],cx
	test eax,eax
	je Block283

 Block281:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block283

 Block282:
	lea edx,[esp+0xCC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block283:
	mov byte ptr [esp+0x120],0x39
	cmp word ptr [esp+0x6C],bx
	jne Block286

 Block284:
	xor eax,eax
	mov word ptr [esp+0x6C],ax
	mov eax,dword ptr [esp+0x74]
	test eax,eax
	je Block287

 Block285:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block287

 Block286:
	lea ecx,[esp+0x6C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block287:
	mov dword ptr [esi+0x24],1
	mov byte ptr [esp+0x120],0x25
	test ebp,ebp
	je Block292

 Block288:
	lea edi,[ebp-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block291

 Block289:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block291

 Block290:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block291:
	mov dword ptr [esp+0x34],0

 Block292:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x124],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block295

 Block293:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block295

 Block294:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block295:
	cmp dword ptr [esp+0x24],0
	mov dword ptr [esp+0x110],0
	jne Block152

 Block296:
	mov ecx,dword ptr [esp+0x118]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CWvsContext::GetGuildSkillLevel
__SUB_CLASS_THIS(005F3E10, __thiscall, 8180,  CWvsContext, long, long) {
__asm {

 Block0:
	sub esp,0x18
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebx
	push ebp
	push esi
	push edi
	lea eax,[esp+0x20]
	xor ebx,ebx
	push eax
	mov dword ptr [esp+0x14],ebx
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x24]
	cmp eax,ebx
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x24],ebx

 Block5:
	mov edi,dword ptr [esp+0x2C]
	mov eax,0x431BDE83
	imul edi
	sar edx,0x12
	mov esi,edx
	shr esi,0x1F
	add esi,edx
	mov eax,dword ptr [ebp+esi*4+0x501]
	cmp eax,ebx
	jne Block7

 Block6:
	xor eax,eax
	jmp Block8

 Block7:
	mov eax,dword ptr [eax-4]

 Block8:
	dec eax
	mov ebx,1
	cmp eax,ebx
	mov dword ptr [esp+0x14],eax
	jl Block19

 Block9:
	push ebx
	push esi
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,ebp
	call CharacterData::GetItem
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block14

 Block10:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block13

 Block11:
	mov edx,dword ptr [esp+0x1C]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x1C]
	test ecx,ecx
	je Block13

 Block12:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block13:
	mov dword ptr [esp+0x1C],0

 Block14:
	test edi,edi
	je Block17

 Block15:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [esp+0x2C]
	jne Block17

 Block16:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x20]
	mov ecx,edi
	call edx
	add dword ptr [esp+0x10],eax

 Block17:
	inc ebx
	cmp ebx,dword ptr [esp+0x14]
	jle Block9

 Block18:
	mov edi,dword ptr [esp+0x2C]

 Block19:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edi
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block26

 Block20:
	push ebp
	lea eax,[esp+0x1C]
	push edi
	push eax
	call get_equiped_from_item
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	test eax,eax
	je Block24

 Block21:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block24

 Block22:
	mov ecx,dword ptr [esp+0x1C]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x1C]
	test ecx,ecx
	je Block24

 Block23:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block24:
	mov eax,dword ptr [esp+0x10]
	test esi,esi
	je Block27

 Block25:
	pop edi
	pop esi
	pop ebp
	inc eax
	pop ebx
	add esp,0x18
	ret 4

 Block26:
	mov eax,dword ptr [esp+0x10]

 Block27:
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 4
}
}
// CWvsContext::DeleteFadeWnd
_SUB_EXCEPTION_HANDLER(5F9950)
// 9F9B9C
static uint8_t _SUB_5F9950_LOOKUP_TABLE_0[17] = {
0, 3, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 
2, 
};
__SUB_CLASS_THIS(005F9950, __thiscall, 8286,  CWvsContext, void, long, long, uint16_t, NakedParam<ZXString<char>>, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F9950
	mov eax,dword ptr fs:[0]
	push eax
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov edx,dword ptr [esp+0x20]
	lea eax,[edx-1]
	mov dword ptr [esp+0x18],0
	cmp eax,0x10
	ja Block33

 Block1:
	movzx eax,byte ptr [eax+_SUB_5F9950_LOOKUP_TABLE_0]
	cmp EAX, 0
je Block2
cmp EAX, 1
je Block12
cmp EAX, 2
je Block22
cmp EAX, 3
je Block33


 Block2:
	lea esi,[ecx+0x3F1C]
	mov ecx,dword ptr [esp+0x24]
	xor edi,edi

 Block3:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block4:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block5:
	mov eax,dword ptr [eax+edi*8+4]
	cmp edx,dword ptr [eax+0xD8]
	jne Block7

 Block6:
	cmp dword ptr [eax+0xF0],ecx
	je Block8

 Block7:
	inc edi
	jmp Block3

 Block8:
	mov ecx,dword ptr [esi]
	mov ecx,dword ptr [ecx+edi*8+4]
	lea ebx,[edi*8]
	call CWnd::Destroy
	mov edx,dword ptr [esi]
	add edx,ebx
	push edx
	mov ecx,esi
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAt
	lea ecx,[ecx]

 Block9:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block10:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block11:
	mov ecx,dword ptr [eax+edi*8+4]
	call CUIFadeYesNo::MoveWndPosition
	inc edi
	jmp Block9

 Block12:
	lea esi,[ecx+0x3F1C]
	mov cx,word ptr [esp+0x28]
	xor edi,edi
	lea esp,[esp]

 Block13:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block14:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block15:
	mov eax,dword ptr [eax+edi*8+4]
	cmp edx,dword ptr [eax+0xD8]
	jne Block17

 Block16:
	movzx eax,word ptr [eax+0x110]
	cmp ax,cx
	je Block18

 Block17:
	inc edi
	jmp Block13

 Block18:
	mov ecx,dword ptr [esi]
	mov ecx,dword ptr [ecx+edi*8+4]
	lea ebx,[edi*8]
	call CWnd::Destroy
	mov edx,dword ptr [esi]
	add edx,ebx
	push edx
	mov ecx,esi
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAt
	lea esp,[esp]

 Block19:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block20:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block21:
	mov ecx,dword ptr [eax+edi*8+4]
	call CUIFadeYesNo::MoveWndPosition
	inc edi
	jmp Block19

 Block22:
	lea esi,[ecx+0x3F1C]
	mov ecx,dword ptr [esp+0x30]
	xor edi,edi
	jmp Block24

 Block24:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block25:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block26:
	mov eax,dword ptr [eax+edi*8+4]
	cmp edx,dword ptr [eax+0xD8]
	jne Block28

 Block27:
	cmp dword ptr [eax+0xEC],ecx
	je Block29

 Block28:
	inc edi
	jmp Block24

 Block29:
	mov ecx,dword ptr [esi]
	mov ecx,dword ptr [ecx+edi*8+4]
	lea ebx,[edi*8]
	call CWnd::Destroy
	mov edx,dword ptr [esi]
	add edx,ebx
	push edx
	mov ecx,esi
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAt

 Block30:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block31:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block32:
	mov ecx,dword ptr [eax+edi*8+4]
	call CUIFadeYesNo::MoveWndPosition
	inc edi
	jmp Block30

 Block33:
	xor edi,edi
	lea esi,[ecx+0x3F1C]

 Block34:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block35:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block36:
	mov ecx,eax
	mov eax,dword ptr [ecx+edi*8+4]
	cmp edx,dword ptr [eax+0xD8]
	je Block38

 Block37:
	inc edi
	jmp Block34

 Block38:
	mov edx,ecx
	lea ebx,[edi*8]
	mov ecx,dword ptr [ebx+edx+4]
	call CWnd::Destroy
	mov eax,dword ptr [esi]
	add eax,ebx
	push eax
	mov ecx,esi
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAt

 Block39:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block42

 Block40:
	cmp edi,dword ptr [eax-4]
	jae Block42

 Block41:
	mov ecx,eax
	mov ecx,dword ptr [ecx+edi*8+4]
	call CUIFadeYesNo::MoveWndPosition
	inc edi
	jmp Block39

 Block42:
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block44

 Block43:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block44:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0xC
	ret 0x14
}
}
// CWvsContext::ClosePartySearch_Remocon
_SUB_EXCEPTION_HANDLER(5D68A0)
__SUB_CLASS_THIS0(005D68A0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D68A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x48
	push ebx
	push ebp
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x58]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x37C0],0
	mov ebx,dword ptr [ZImports::_VariantInit]
	sete al
	test al,al
	sete al
	mov ebp,8
	test al,al
	je Block17

 Block1:
	lea eax,[esp+0x28]
	push eax
	call ebx
	lea ecx,[esp+0x28]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block3

 Block2:
	push eax
	call _com_issue_error

 Block3:
	mov dword ptr [esp+0x60],0
	call get_update_time
	add eax,0x190
	mov edx,3
	mov word ptr [esp+0x18],dx
	mov dword ptr [esp+0x20],eax
	mov ecx,dword ptr [esi+0x37C0]
	mov byte ptr [esp+0x60],1
	test ecx,ecx
	jne Block5

 Block4:
	push 0x80004003
	call _com_issue_error

 Block5:
	lea eax,[esp+0x10]
	push eax
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x60],2
	test ecx,ecx
	jne Block7

 Block6:
	push 0x80004003
	call _com_issue_error

 Block7:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x1C]
	push eax
	push 0xFF
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x60],1
	test eax,eax
	je Block9

 Block8:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block9:
	mov byte ptr [esp+0x60],0
	cmp word ptr [esp+0x18],bp
	jne Block12

 Block10:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block13:
	mov dword ptr [esp+0x60],0xFFFFFFFF
	cmp word ptr [esp+0x28],bp
	jne Block16

 Block14:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	test eax,eax
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea eax,[esp+0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block17:
	cmp dword ptr [esi+0x37C4],0
	sete al
	test al,al
	sete al
	test al,al
	je Block34

 Block18:
	lea ecx,[esp+0x48]
	push ecx
	call ebx
	lea edx,[esp+0x48]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block20

 Block19:
	push eax
	call _com_issue_error

 Block20:
	mov dword ptr [esp+0x60],3
	call get_update_time
	add eax,0x190
	mov ecx,3
	mov word ptr [esp+0x38],cx
	mov dword ptr [esp+0x40],eax
	mov ecx,dword ptr [esi+0x37C4]
	mov bl,4
	mov byte ptr [esp+0x60],bl
	test ecx,ecx
	jne Block22

 Block21:
	push 0x80004003
	call _com_issue_error

 Block22:
	lea edx,[esp+0x14]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x60],5
	test ecx,ecx
	jne Block24

 Block23:
	push 0x80004003
	call _com_issue_error

 Block24:
	lea eax,[esp+0x48]
	push eax
	lea edx,[esp+0x3C]
	push edx
	push 0xFF
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x60],bl
	test eax,eax
	je Block26

 Block25:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block26:
	mov byte ptr [esp+0x60],3
	cmp word ptr [esp+0x38],bp
	jne Block29

 Block27:
	xor eax,eax
	mov word ptr [esp+0x38],ax
	mov eax,dword ptr [esp+0x40]
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea ecx,[esp+0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block30:
	mov dword ptr [esp+0x60],0xFFFFFFFF
	cmp word ptr [esp+0x48],bp
	jne Block33

 Block31:
	mov eax,dword ptr [esp+0x50]
	xor edx,edx
	mov word ptr [esp+0x48],dx
	test eax,eax
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea eax,[esp+0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block34:
	mov ecx,dword ptr [esi+0x37BC]
	test ecx,ecx
	je Block37

 Block35:
	call CWnd::Destroy
	add esi,0x37B8
	cmp dword ptr [esi+4],0
	je Block37

 Block36:
	push 0
	mov ecx,esi
	call ZRef<CPartySearch_RemoCon>::_ReleaseRaw
	mov dword ptr [esi+4],0

 Block37:
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	test ecx,ecx
	je Block40

 Block38:
	cmp dword ptr [ecx+8],0
	je Block40

 Block39:
	push 0
	call CRadioManager::ShowUI
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	push 1
	call CRadioManager::ShowUI

 Block40:
	mov ecx,dword ptr [esp+0x58]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret
}
}
// CWvsContext::SendRandomMorphOtherRequest
__SUB_CLASS_THIS(005CCED0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],0
	jne Block2

 Block1:
	mov eax,dword ptr [esp+8]
	mov ecx,dword ptr [esp+4]
	push eax
	push ecx
	call CUIRandomMorphDlg::ShowDlg
	add esp,8

 Block2:
	ret 8
}
}
// FamilyInfo::FamilyInfo
__SUB_CLASS_THIS0(005D8360, __thiscall, 8019,  FamilyInfo, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	xor edi,edi
	mov dword ptr [esi],edi
	mov dword ptr [esi+4],edi
	mov dword ptr [esi+8],edi
	mov dword ptr [esi+0x14],edi
	xor eax,eax
	mov word ptr [esi+0xC],ax
	mov ecx,2
	mov word ptr [esi+0xE],cx
	xor edx,edx
	mov word ptr [esi+0x10],dx
	mov dword ptr [esi+0x18],edi
	lea ecx,[esi+0x20]
	mov dword ptr [esi+0x1C],edi
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],0x1F
	mov dword ptr [ecx+0xC],edi
	call ZMap<long, long, long>::_CalcAutoGrow
	mov dword ptr [esi+0x38],edi
	pop edi
	mov eax,esi
	pop esi
	ret
}
}
// CUISkillChangeConfirm::OnDestroy
__SUB_CLASS_THIS0(005E00F0, __thiscall, 68688,  CUISkillChangeConfirm, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esi+0x8C]
	test ecx,ecx
	je Block3

 Block1:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	push 3
	call edx
	add esi,0x88
	cmp dword ptr [esi+4],0
	je Block3

 Block2:
	push 0
	mov ecx,esi
	call ZRef<CDialog>::_ReleaseRaw
	mov dword ptr [esi+4],0

 Block3:
	pop esi
	ret
}
}
// CWvsContext::ChannelShift
_SUB_EXCEPTION_HANDLER(5DAE80)
__SUB_CLASS_THIS0(005DAE80, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DAE80
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block2

 Block1:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block3

 Block2:
	xor esi,esi

 Block3:
	cmp dword ptr [edi+0x3F9C],0
	je Block8

 Block4:
	lea eax,[esp+0xC]
	push 0xC92
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x20],0
	je Block6

 Block5:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x18],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block6:
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test eax,eax
	je Block23

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x18
	ret

 Block8:
	cmp dword ptr [edi+0x3FA0],0
	je Block13

 Block9:
	lea ecx,[esp+0x10]
	push 0xF7B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x20],1
	je Block11

 Block10:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x14],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block11:
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test eax,eax
	je Block23

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x18
	ret

 Block13:
	test esi,esi
	je Block16

 Block14:
	test byte ptr [esi+0x178],0x10
	je Block16

 Block15:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x20],esp
	push 0x122
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x18
	ret

 Block16:
	push 0xD4
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x10],eax
	mov dword ptr [esp+0x20],2
	test eax,eax
	je Block24

 Block17:
	mov ecx,eax
	call CUIChannelShift::_ctor_default
	test eax,eax
	je Block24

 Block18:
	add eax,8
	je Block24

 Block19:
	lea esi,[eax-8]
	mov dword ptr [esp+0x14],esi
	test esi,esi
	je Block21

 Block20:
	lea eax,[esi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block21:
	mov ecx,esi
	mov dword ptr [esp+0x20],3
	call CDialog::DoModal
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test esi,esi
	je Block23

 Block22:
	push 0
	lea ecx,[esp+0x14]
	call ZRef<CUIChannelShift>::_ReleaseRaw

 Block23:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x18
	ret

 Block24:
	xor esi,esi
	mov dword ptr [esp+0x14],esi
	jmp Block21
}
}
// CWvsContext::RemoveQuestMateName
__SUB_CLASS_THIS(005E0800, __thiscall, 8098,  CWvsContext, void, uint16_t) {
__asm {

 Block0:
	sub esp,8
	push esi
	push edi
	mov edi,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	mov esi,ecx
	test edi,edi
	je Block8

 Block1:
	push ebx
	mov ebx,dword ptr [esp+0x18]
	push ebx
	mov ecx,edi
	call CQuestMan::IsAutoCompletionAlertQuest
	test eax,eax
	je Block7

 Block2:
	push ebp
	lea eax,[esp+0x10]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x10]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	push ebx
	mov ecx,edi
	call CQuestMan::GetCompleteDemand
	mov eax,dword ptr [eax+0x18]
	lea ecx,[esi+0x2148]
	push ecx
	push ebp
	push eax
	push ebx
	mov ecx,edi
	call CQuestMan::CheckCompleteDemand
	pop ebp
	push 0
	test eax,eax
	jne Block5

 Block3:
	lea edx,[esp+0x1C]
	lea edi,[esi+0x4060]
	push edx
	mov ecx,edi
	call ZList<unsigned short>::Find
	test eax,eax
	jne Block7

 Block4:
	mov ecx,edi
	mov dword ptr [esi+0x4074],1
	call ZList<unsigned short>::AddTail_
	mov word ptr [eax],bx
	pop ebx
	pop edi
	pop esi
	add esp,8
	ret 4

 Block5:
	lea eax,[esp+0x1C]
	add esi,0x4060
	push eax
	mov ecx,esi
	call ZList<unsigned short>::Find
	test eax,eax
	je Block7

 Block6:
	push eax
	mov ecx,esi
	call ZList<unsigned short>::RemoveAt

 Block7:
	pop ebx

 Block8:
	pop edi
	pop esi
	add esp,8
	ret 4
}
}
// CWvsContext::GetSkillLevelUpState
__SUB_CLASS_THIS(005D5A40, __thiscall, 8147,  CWvsContext, long, const SKILLENTRY*) {
__asm {

 Block0:
	sub esp,0x10
	push ebx
	push esi
	push edi
	lea eax,[esp+0x14]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x18],0

 Block5:
	mov esi,dword ptr [esp+0x20]
	mov eax,dword ptr [esi+0x68]
	mov dword ptr [esp+0xC],eax
	test eax,eax
	je Block11

 Block6:
	jmp Block8

 Block8:
	lea ecx,[esp+0xC]
	push ecx
	call ZList<GW_SkillRecord>::GetNext
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	add esp,4
	mov esi,eax
	mov edx,dword ptr [esi]
	push 0
	push edx
	push edi
	call CSkillInfo::GetPureSkillLevel
	cmp eax,dword ptr [esi+4]
	jl Block14

 Block9:
	cmp dword ptr [esp+0xC],0
	jne Block8

 Block10:
	mov esi,dword ptr [esp+0x20]

 Block11:
	mov ebx,dword ptr [esi]
	push ebx
	call is_skill_need_master_level
	add esp,4
	test eax,eax
	je Block15

 Block12:
	lea eax,[esp+0x10]
	push eax
	push esi
	lea ecx,[edi+0x53D]
	mov dword ptr [esp+0x14],0
	mov dword ptr [esp+0x18],0
	call ZMap<long, long, long>::GetAt
	lea ecx,[esp+0xC]
	push ecx
	push esi
	lea ecx,[edi+0x56D]
	call ZMap<long, long, long>::GetAt
	mov edx,dword ptr [esp+0xC]
	cmp edx,dword ptr [esp+0x10]
	jg Block15

 Block13:
	pop edi
	pop esi
	or eax,0xFFFFFFFF
	pop ebx
	add esp,0x10
	ret 4

 Block14:
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	add esp,0x10
	ret 4

 Block15:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea eax,[esp+0x20]
	push eax
	push ebx
	push edi
	call CSkillInfo::GetPureSkillLevel
	mov ecx,dword ptr [esp+0x20]
	mov esi,eax
	call SKILLENTRY::GetMaxLevel
	xor ecx,ecx
	cmp esi,eax
	setl cl
	pop edi
	pop esi
	pop ebx
	lea ecx,[ecx+ecx-1]
	mov eax,ecx
	add esp,0x10
	ret 4
}
}
// CWvsContext::MakeOriginalSN
_SUB_EXCEPTION_HANDLER(606DE0)
__SUB_CLASS_THIS(00606DE0, __thiscall, 8215,  CWvsContext, void, ZMap<long,long,long>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_606DE0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	xor ebx,ebx
	mov dword ptr [esp+0x10],ebx
	add ecx,0x3F7C
	push ecx
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x3C],ebx
	call ZArray<ZRef<CS_COMMODITY>>::operator=
	mov byte ptr [esp+0x14],bl
	mov eax,dword ptr [esp+0x14]
	push eax
	lea ecx,[esp+0x14]
	push ecx
	call ZSortHelper<ZRef<CS_COMMODITY>, PriceMoreFunc>::call_1
	add esp,8
	push 0x64
	lea ecx,[esp+0x1C]
	int 3// TODO: 	mov dword ptr [esp+0x1C],offset ZMap<ZXString<char>, long, ZXString<char>>::`vftable'
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x24],0x1F
	mov dword ptr [esp+0x28],ebx
	call ZMap<ZXString<char>, long, ZXString<char>>::_CalcAutoGrow
	mov edi,dword ptr [esp+0x40]
	mov byte ptr [esp+0x38],1
	xor esi,esi

 Block1:
	mov eax,dword ptr [esp+0x10]
	cmp eax,ebx
	je Block11

 Block2:
	cmp esi,dword ptr [eax-4]
	jae Block11

 Block3:
	mov edx,dword ptr [eax+esi*8+4]
	lea ecx,[eax+esi*8+4]
	cmp dword ptr [edx+0x24],ebx
	je Block5

 Block4:
	mov ecx,edx
	lea eax,[ecx+0xC]
	push eax
	push eax
	mov ecx,edi
	call ZMap<long, long, long>::Insert
	inc esi
	jmp Block1

 Block5:
	mov dword ptr [esp+0x40],ebx
	mov eax,dword ptr [eax+esi*8+4]
	lea ecx,[eax+0x10]
	mov byte ptr [esp+0x38],2
	call TSecType<long>::GetData
	mov edx,dword ptr [esp+0x10]
	mov ecx,dword ptr [edx+esi*8+4]
	mov edx,dword ptr [ecx+0x1C]
	mov ecx,dword ptr [ecx+0x2C]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x4C]
	push offset _S_10DDD
	push eax
	call ZXString<char>::Format
	add esp,0x14
	lea ecx,[esp+0x14]
	push ecx
	lea edx,[esp+0x44]
	push edx
	lea ecx,[esp+0x20]
	call ZMap<ZXString<char>, long, ZXString<char>>::GetAt
	test eax,eax
	je Block7

 Block6:
	mov eax,dword ptr [esp+0x10]
	mov eax,dword ptr [eax+esi*8+4]
	lea ecx,[esp+0x14]
	push ecx
	jmp Block8

 Block7:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+esi*8+4]
	add eax,0xC
	push eax
	lea eax,[esp+0x44]
	push eax
	lea ecx,[esp+0x20]
	call ZMap<ZXString<char>, long, ZXString<char>>::Insert
	mov ecx,dword ptr [esp+0x10]
	mov eax,dword ptr [ecx+esi*8+4]
	lea edx,[eax+0xC]
	push edx

 Block8:
	add eax,0xC
	push eax
	mov ecx,edi
	call ZMap<long, long, long>::Insert
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0x38],1
	cmp eax,ebx
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	inc esi
	jmp Block1

 Block11:
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x38],bl
	int 3// TODO: 	mov dword ptr [esp+0x18],offset ZMap<ZXString<char>, long, ZXString<char>>::`vftable'
	call ZMap<ZXString<char>, long, ZXString<char>>::RemoveAll
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	call ZArray<ZRef<CS_COMMODITY>>::RemoveAll
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x2C
	ret 4
}
}
// CWvsContext::OnMonsterBookSetCover
__SUB_CLASS_THIS(005CFA70, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	call CInPacket::Decode4
	push eax
	call CUserLocal::SetMonsterBookCover
	mov ecx,dword ptr [TSingleton<CUIMonsterBook>::ms_pInstance]
	add esp,4
	test ecx,ecx
	je Block2

 Block1:
	call CUIMonsterBook::UpdateUI

 Block2:
	ret 4
}
}
// CWvsContext::OnClassCompetitionAuthkeyUpdate
_SUB_EXCEPTION_HANDLER(5E4000)
__SUB_CLASS_THIS(005E4000, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E4000
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [ebp+8]
	lea eax,[ebp-0x14]
	push eax
	call CInPacket::DecodeStr
	mov ecx,dword ptr [ebp-0x14]
	push 0
	push 0
	push 0xFFFFFFFF
	push ecx
	push 0
	push 0
	mov dword ptr [ebp-4],0
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edx,dword ptr [ebp-0x14]
	mov edi,esp
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push edx
	push 0
	push 0
	call MultiByteToWideChar
	push edi
	lea ecx,[esi+0x3824]
	call ZXString<unsigned short>::AssignCStr
	call timeGetTime
	mov dword ptr [esi+0x3828],eax
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	lea esp,[ebp-0x20]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 4
}
}
// GUILDDATA::GUILDDATA
_SUB_EXCEPTION_HANDLER(5E5750)
__SUB_CLASS_THIS0(005E5750, __thiscall, 45440,  GUILDDATA, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E5750
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0xC],esi
	xor edi,edi
	mov dword ptr [esi+4],edi
	mov dword ptr [esp+0x18],edi
	mov dword ptr [esi+8],edi
	mov dword ptr [esi+0xC],edi
	mov dword ptr [esi+0x10],edi
	mov dword ptr [esi+0x1E],edi
	lea ecx,[esi+0x2E]
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, GUILDDATA::SKILLENTRY, long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],0x1F
	mov dword ptr [ecx+0xC],edi
	call ZMap<long, GUILDDATA::SKILLENTRY, long>::_CalcAutoGrow
	mov dword ptr [esi+0x46],edi
	mov ecx,esi
	mov byte ptr [esp+0x18],6
	call GUILDDATA::Clear
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::ShowUI
__SUB_CLASS_THIS(005D6D30, __thiscall, 8084,  CWvsContext, void, int32_t) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov esi,ecx
	cmp dword ptr [esi+0x3F28],edi
	je Block117

 Block1:
	mov eax,dword ptr [esi+0x3F54]
	push ebx
	xor ebx,ebx
	mov dword ptr [esi+0x3F28],edi
	mov dword ptr [esp+0x10],eax
	cmp eax,ebx
	je Block5

 Block2:
	jmp Block4

 Block4:
	lea eax,[esp+0x10]
	push edi
	push eax
	call ZList<ZRef<CUIQuestTimer>>::GetNext
	mov ecx,dword ptr [eax+4]
	add esp,4
	call CUIQuestTimer::SetVisible
	cmp dword ptr [esp+0x10],ebx
	jne Block4

 Block5:
	mov ecx,dword ptr [TSingleton<CUINoticePremium>::ms_pInstance]
	cmp ecx,ebx
	je Block7

 Block6:
	push edi
	call CUINoticePremium::SetVisible

 Block7:
	cmp edi,ebx
	je Block15

 Block8:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	jne Block10

 Block9:
	call TSingleton<CUIStatusBar>::CreateInstance

 Block10:
	mov ecx,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	cmp ecx,ebx
	je Block12

 Block11:
	call CUIMiniMap::ToggleMap

 Block12:
	cmp dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance],ebx
	jne Block14

 Block13:
	call TSingleton<CUIQuestAlarm>::CreateInstance

 Block14:
	mov ecx,esi
	call CWvsContext::CheckOpBoardHasNew
	pop ebx
	pop edi
	pop esi
	ret 4

 Block15:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp ecx,ebx
	je Block18

 Block16:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp eax,ebx
	je Block18

 Block17:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block18:
	mov ecx,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	cmp ecx,ebx
	je Block20

 Block19:
	call CUIMiniMap::ToggleMap

 Block20:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp ecx,ebx
	je Block23

 Block21:
	call CWnd::Destroy
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp ecx,ebx
	je Block23

 Block22:
	mov edx,dword ptr [ecx+8]
	mov eax,dword ptr [edx]
	add ecx,8
	push 1
	call eax

 Block23:
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp ecx,ebx
	je Block26

 Block24:
	call CWnd::Destroy
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp ecx,ebx
	je Block26

 Block25:
	mov edx,dword ptr [ecx+8]
	mov eax,dword ptr [edx]
	add ecx,8
	push 1
	call eax

 Block26:
	mov ecx,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	cmp ecx,ebx
	je Block29

 Block27:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	cmp eax,ebx
	je Block29

 Block28:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block29:
	mov ecx,dword ptr [TSingleton<CUIMessenger>::ms_pInstance]
	cmp ecx,ebx
	je Block32

 Block30:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMessenger>::ms_pInstance]
	cmp eax,ebx
	je Block32

 Block31:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block32:
	mov ecx,dword ptr [TSingleton<CUIAntiMacro>::ms_pInstance]
	cmp ecx,ebx
	je Block35

 Block33:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIAntiMacro>::ms_pInstance]
	cmp eax,ebx
	je Block35

 Block34:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block35:
	mov ecx,dword ptr [TSingleton<CUIAdminAntiMacro>::ms_pInstance]
	cmp ecx,ebx
	je Block38

 Block36:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIAdminAntiMacro>::ms_pInstance]
	cmp eax,ebx
	je Block38

 Block37:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block38:
	mov ecx,dword ptr [TSingleton<CUIInitialQuiz>::ms_pInstance]
	cmp ecx,ebx
	je Block41

 Block39:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIInitialQuiz>::ms_pInstance]
	cmp eax,ebx
	je Block41

 Block40:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block41:
	mov ecx,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	cmp ecx,ebx
	je Block44

 Block42:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	cmp eax,ebx
	je Block44

 Block43:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block44:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp ecx,ebx
	je Block47

 Block45:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp eax,ebx
	je Block47

 Block46:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block47:
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp ecx,ebx
	je Block50

 Block48:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp eax,ebx
	je Block50

 Block49:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block50:
	mov ecx,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	cmp ecx,ebx
	je Block53

 Block51:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	cmp eax,ebx
	je Block53

 Block52:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block53:
	mov ecx,dword ptr [TSingleton<CUIMonsterCarnival>::ms_pInstance]
	cmp ecx,ebx
	je Block56

 Block54:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMonsterCarnival>::ms_pInstance]
	cmp eax,ebx
	je Block56

 Block55:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block56:
	mov ecx,dword ptr [TSingleton<CUIEnergyBar>::ms_pInstance]
	cmp ecx,ebx
	je Block59

 Block57:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIEnergyBar>::ms_pInstance]
	cmp eax,ebx
	je Block59

 Block58:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block59:
	mov ecx,dword ptr [TSingleton<CUIPartyHP>::ms_pInstance]
	cmp ecx,ebx
	je Block62

 Block60:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIPartyHP>::ms_pInstance]
	cmp eax,ebx
	je Block62

 Block61:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block62:
	mov ecx,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	cmp ecx,ebx
	je Block65

 Block63:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	cmp eax,ebx
	je Block65

 Block64:
	mov edx,dword ptr [eax+8]
	lea ecx,[eax+8]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block65:
	mov ecx,dword ptr [esi+0x3E34]
	cmp ecx,ebx
	je Block68

 Block66:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E34],ebx
	lea edi,[esi+0x3E30]
	je Block68

 Block67:
	push ebx
	mov ecx,edi
	call ZRef<CUIItem>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block68:
	mov ecx,dword ptr [esi+0x3E3C]
	cmp ecx,ebx
	je Block71

 Block69:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E3C],ebx
	lea edi,[esi+0x3E38]
	je Block71

 Block70:
	push ebx
	mov ecx,edi
	call ZRef<CUIEquip>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block71:
	mov ecx,dword ptr [esi+0x3E44]
	cmp ecx,ebx
	je Block74

 Block72:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E44],ebx
	lea edi,[esi+0x3E40]
	je Block74

 Block73:
	push ebx
	mov ecx,edi
	call ZRef<CUIStat>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block74:
	mov ecx,dword ptr [esi+0x3E4C]
	cmp ecx,ebx
	je Block77

 Block75:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E4C],ebx
	lea edi,[esi+0x3E48]
	je Block77

 Block76:
	push ebx
	mov ecx,edi
	call ZRef<CUISkill>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block77:
	mov ecx,dword ptr [esi+0x3E5C]
	cmp ecx,ebx
	je Block80

 Block78:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E5C],ebx
	lea edi,[esi+0x3E58]
	je Block80

 Block79:
	push ebx
	mov ecx,edi
	call ZRef<CUIKeyConfig>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block80:
	mov ecx,dword ptr [esi+0x3E64]
	cmp ecx,ebx
	je Block83

 Block81:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E64],ebx
	lea edi,[esi+0x3E60]
	je Block83

 Block82:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserList>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block83:
	mov ecx,dword ptr [esi+0x3E6C]
	cmp ecx,ebx
	je Block86

 Block84:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E6C],ebx
	lea edi,[esi+0x3E68]
	je Block86

 Block85:
	push ebx
	mov ecx,edi
	call ZRef<CUIQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block86:
	mov ecx,dword ptr [esi+0x3E74]
	cmp ecx,ebx
	je Block89

 Block87:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E74],ebx
	lea edi,[esi+0x3E70]
	je Block89

 Block88:
	push ebx
	mov ecx,edi
	call ZRef<CUIMedalQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block89:
	mov ecx,dword ptr [esi+0x3E7C]
	cmp ecx,ebx
	je Block92

 Block90:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E7C],ebx
	lea edi,[esi+0x3E78]
	je Block92

 Block91:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block92:
	mov ecx,dword ptr [esi+0x3EB4]
	cmp ecx,ebx
	je Block95

 Block93:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EB4],ebx
	lea edi,[esi+0x3EB0]
	je Block95

 Block94:
	push ebx
	mov ecx,edi
	call ZRef<CUIMonsterBook>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block95:
	mov ecx,dword ptr [esi+0x3EA4]
	cmp ecx,ebx
	je Block98

 Block96:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EA4],ebx
	lea edi,[esi+0x3EA0]
	je Block98

 Block97:
	push ebx
	mov ecx,edi
	call ZRef<CUIEnergyBar>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block98:
	mov ecx,dword ptr [esi+0x3EBC]
	cmp ecx,ebx
	je Block101

 Block99:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EBC],ebx
	lea edi,[esi+0x3EB8]
	je Block101

 Block100:
	push ebx
	mov ecx,edi
	call ZRef<CUIPartySearch>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block101:
	mov ecx,dword ptr [esi+0x3EC4]
	cmp ecx,ebx
	je Block104

 Block102:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EC4],ebx
	lea edi,[esi+0x3EC0]
	je Block104

 Block103:
	push ebx
	mov ecx,edi
	call ZRef<CUIItemMaker>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block104:
	mov ecx,dword ptr [esi+0x3ED4]
	cmp ecx,ebx
	je Block107

 Block105:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3ED4],ebx
	lea edi,[esi+0x3ED0]
	je Block107

 Block106:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamily>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block107:
	mov ecx,dword ptr [esi+0x3EDC]
	cmp ecx,ebx
	je Block110

 Block108:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EDC],ebx
	lea edi,[esi+0x3ED8]
	je Block110

 Block109:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamilyChart>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block110:
	mov ecx,dword ptr [esi+0x3EEC]
	cmp ecx,ebx
	je Block113

 Block111:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EEC],ebx
	lea edi,[esi+0x3EE8]
	je Block113

 Block112:
	push ebx
	mov ecx,edi
	call ZRef<CUIOpBoardState>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block113:
	mov ecx,dword ptr [esi+0x3EF4]
	cmp ecx,ebx
	je Block116

 Block114:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EF4],ebx
	lea edi,[esi+0x3EF0]
	je Block116

 Block115:
	push ebx
	mov ecx,edi
	call ZRef<CUIDragonBox>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block116:
	mov byte ptr [esi+0x3EF8],bl
	call CUtilDlg::ForcedRet
	call CUtilDlgEx::ForcedRet
	pop ebx

 Block117:
	pop edi
	pop esi
	ret 4
}
}
// GUILDDATA::GetCount
__SUB_CLASS_THIS0(000F3EC0, __thiscall, 45444,  GUILDDATA, long) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0xC]
	test eax,eax
	jne Block2

 Block1:
	ret

 Block2:
	mov eax,dword ptr [eax-4]
	ret
}
}
// CWvsContext::SendFollowCharacterRequest
_SUB_EXCEPTION_HANDLER(5F9530)
__SUB_CLASS_THIS(005F9530, __thiscall, 8258,  CWvsContext, void, unsigned long, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F9530
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov edi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test edi,edi
	je Block14

 Block1:
	mov ebx,dword ptr [esp+0x34]
	test ebx,ebx
	je Block12

 Block2:
	mov ecx,edi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block14

 Block3:
	push 1
	mov ecx,edi
	call CUserLocal::CheckRidingVehicle
	test eax,eax
	jne Block14

 Block4:
	cmp dword ptr [edi+0x5D0],eax
	jne Block11

 Block5:
	cmp dword ptr [edi+0x5E4],eax
	jne Block11

 Block6:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push ebx
	call CUserPool::GetUser
	mov esi,eax
	test esi,esi
	je Block14

 Block7:
	mov eax,dword ptr [esi+0x5F8]
	push eax
	call is_vehicle
	add esp,4
	test eax,eax
	jne Block10

 Block8:
	cmp dword ptr [esi+0x5D0],eax
	jne Block10

 Block9:
	cmp dword ptr [esi+0x5E4],eax
	je Block12

 Block10:
	push 0
	push 3
	mov ecx,edi
	call CUserLocal::FollowCharacterFailedMsg
	jmp Block14

 Block11:
	mov ecx,ebp
	call CWvsContext::AddChatMorphedMsg
	jmp Block14

 Block12:
	call timeGetTime
	mov ecx,eax
	sub ecx,dword ptr [ebp+0x3D94]
	cmp ecx,0x3E8
	jl Block14

 Block13:
	push 0x86
	lea ecx,[esp+0x18]
	mov dword ptr [ebp+0x3D94],eax
	call COutPacket::_ctor_1
	push ebx
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x30],0
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x38]
	push edx
	lea ecx,[esp+0x18]
	call COutPacket::Encode1
	mov eax,dword ptr [esp+0x3C]
	push eax
	lea ecx,[esp+0x18]
	call COutPacket::Encode1
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block14:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 0xC
}
}
// CWvsContext::SendMapTransferRequest
_SUB_EXCEPTION_HANDLER(5F3B90)
__SUB_CLASS_THIS(005F3B90, __thiscall, 8264,  CWvsContext, void, long, unsigned long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F3B90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	push 0x72
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	mov esi,dword ptr [esp+0x28]
	push esi
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x24],0
	call COutPacket::Encode1
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+0xC]
	call COutPacket::Encode1
	test esi,esi
	jne Block2

 Block1:
	mov ecx,dword ptr [esp+0x2C]
	push ecx
	lea ecx,[esp+0xC]
	call COutPacket::Encode4

 Block2:
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+8]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x1C
	ret 0xC
}
}
// CWvsContext::SetTopFadeWnd
_SUB_EXCEPTION_HANDLER(5F9BB0)
__SUB_CLASS_THIS(005F9BB0, __thiscall, 8284,  CWvsContext, void, NakedParam<ZRef<CUIFadeYesNo>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5F9BB0
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov edi,dword ptr [esp+0x20]
	mov dword ptr [esp+0x14],0
	test edi,edi
	je Block19

 Block1:
	xor edx,edx
	lea esi,[ecx+0x3F1C]
	mov edi,edi

 Block2:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block11

 Block3:
	cmp edx,dword ptr [eax-4]
	jae Block11

 Block4:
	cmp dword ptr [eax+edx*8+4],edi
	je Block6

 Block5:
	inc edx
	jmp Block2

 Block6:
	mov ecx,eax
	lea edx,[ecx+edx*8]
	push edx
	mov ecx,esi
	call ZArray<ZRef<CUIFadeYesNo>>::RemoveAt
	push 0xFFFFFFFF
	mov ecx,esi
	call ZArray<ZRef<CUIFadeYesNo>>::InsertBefore
	mov esi,eax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block8

 Block7:
	add eax,0xC
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block8:
	cmp dword ptr [esi+4],0
	je Block10

 Block9:
	push 0
	mov ecx,esi
	call ZRef<CUIFadeYesNo>::_ReleaseRaw
	mov dword ptr [esi+4],0

 Block10:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+4],eax
	mov edi,dword ptr [esp+0x20]

 Block11:
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test edi,edi
	je Block19

 Block12:
	add edi,0xC
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block19

 Block13:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block15

 Block14:
	add eax,8
	jmp Block16

 Block15:
	xor eax,eax

 Block16:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block19

 Block17:
	lea ecx,[eax+8]
	test ecx,ecx
	je Block19

 Block18:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block19:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CWvsContext::ReleaseRefs
__SUB_CLASS_THIS0(005D49E0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebx
	push ebp
	mov ebp,dword ptr [ZImports::_InterlockedDecrement]
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x3DD4]
	push edi
	test eax,eax
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block4:
	mov dword ptr [esi+0x3DD4],0

 Block5:
	mov eax,dword ptr [esi+0x3DDC]
	test eax,eax
	je Block10

 Block6:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block9

 Block7:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block9

 Block8:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block9:
	mov dword ptr [esi+0x3DDC],0

 Block10:
	mov eax,dword ptr [esi+0x3DE4]
	test eax,eax
	je Block15

 Block11:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block14

 Block12:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block14

 Block13:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block14:
	mov dword ptr [esi+0x3DE4],0

 Block15:
	mov eax,dword ptr [esi+0x3DEC]
	test eax,eax
	je Block20

 Block16:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block19

 Block17:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block19

 Block18:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block19:
	mov dword ptr [esi+0x3DEC],0

 Block20:
	mov eax,dword ptr [esi+0x3DF4]
	test eax,eax
	je Block25

 Block21:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block24

 Block22:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block24

 Block23:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block24:
	mov dword ptr [esi+0x3DF4],0

 Block25:
	mov eax,dword ptr [esi+0x3DFC]
	test eax,eax
	je Block30

 Block26:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block29

 Block27:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block29

 Block28:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block29:
	mov dword ptr [esi+0x3DFC],0

 Block30:
	mov eax,dword ptr [esi+0x3E04]
	test eax,eax
	je Block35

 Block31:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block34

 Block32:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block34

 Block33:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block34:
	mov dword ptr [esi+0x3E04],0

 Block35:
	mov eax,dword ptr [esi+0x3E0C]
	test eax,eax
	je Block40

 Block36:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block39

 Block37:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block39

 Block38:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block39:
	mov dword ptr [esi+0x3E0C],0

 Block40:
	mov eax,dword ptr [esi+0x3E14]
	test eax,eax
	je Block45

 Block41:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block44

 Block42:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block44

 Block43:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block44:
	mov dword ptr [esi+0x3E14],0

 Block45:
	mov eax,dword ptr [esi+0x3E1C]
	test eax,eax
	je Block50

 Block46:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block49

 Block47:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block49

 Block48:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block49:
	mov dword ptr [esi+0x3E1C],0

 Block50:
	mov eax,dword ptr [esi+0x3E24]
	test eax,eax
	je Block55

 Block51:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block54

 Block52:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block54

 Block53:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block54:
	mov dword ptr [esi+0x3E24],0

 Block55:
	mov eax,dword ptr [esi+0x3E2C]
	test eax,eax
	je Block60

 Block56:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call ebp
	test eax,eax
	jne Block59

 Block57:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block59

 Block58:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block59:
	mov dword ptr [esi+0x3E2C],0

 Block60:
	mov eax,dword ptr [esi+0x37C0]
	xor edi,edi
	cmp eax,edi
	je Block62

 Block61:
	mov dword ptr [esi+0x37C0],edi
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block62:
	mov eax,dword ptr [esi+0x37C4]
	cmp eax,edi
	je Block64

 Block63:
	mov dword ptr [esi+0x37C4],edi
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block64:
	pop edi
	pop esi
	pop ebp
	pop ebx
	ret
}
}
// CWvsContext::IsTopFadeWnd
__SUB_CLASS_THIS(005F33C0, __thiscall, 8290,  CWvsContext, int32_t, NakedParam<ZRef<CUIFadeYesNo>>) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x3F1C]
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [eax-4]
	test ecx,ecx
	jne Block3

 Block2:
	xor eax,eax
	jmp Block4

 Block3:
	lea eax,[eax+ecx*8-8]

 Block4:
	push esi
	push eax
	call ZArray<ZRef<CUIFadeYesNo>>::GetAt
	mov ecx,eax
	mov eax,dword ptr [esp+0x10]
	xor edx,edx
	add esp,4
	cmp eax,dword ptr [ecx+4]
	sete dl
	mov esi,edx
	test eax,eax
	je Block6

 Block5:
	push 0
	lea ecx,[esp+0xC]
	call ZRef<CUIFadeYesNo>::_ReleaseRaw

 Block6:
	mov eax,esi
	pop esi
	ret 8
}
}
// CWvsContext::OnLeaveGame
__SUB_CLASS_THIS0(005E7840, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push ebx
	push esi
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	xor ebx,ebx
	cmp ecx,ebx
	je Block2

 Block1:
	call CSequencedKeyMan::Clear

 Block2:
	mov eax,dword ptr [esi+0x3E5C]
	cmp eax,ebx
	je Block4

 Block3:
	mov dword ptr [eax+0x11D0],1

 Block4:
	mov ecx,dword ptr [esi+0x3E34]
	push edi
	cmp ecx,ebx
	je Block7

 Block5:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E34],ebx
	lea edi,[esi+0x3E30]
	je Block7

 Block6:
	push ebx
	mov ecx,edi
	call ZRef<CUIItem>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block7:
	mov ecx,dword ptr [esi+0x3E3C]
	cmp ecx,ebx
	je Block10

 Block8:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E3C],ebx
	lea edi,[esi+0x3E38]
	je Block10

 Block9:
	push ebx
	mov ecx,edi
	call ZRef<CUIEquip>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block10:
	mov ecx,dword ptr [esi+0x3E44]
	cmp ecx,ebx
	je Block13

 Block11:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E44],ebx
	lea edi,[esi+0x3E40]
	je Block13

 Block12:
	push ebx
	mov ecx,edi
	call ZRef<CUIStat>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block13:
	mov ecx,dword ptr [esi+0x3E4C]
	cmp ecx,ebx
	je Block16

 Block14:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E4C],ebx
	lea edi,[esi+0x3E48]
	je Block16

 Block15:
	push ebx
	mov ecx,edi
	call ZRef<CUISkill>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block16:
	mov ecx,dword ptr [esi+0x3E54]
	cmp ecx,ebx
	je Block19

 Block17:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E54],ebx
	lea edi,[esi+0x3E50]
	je Block19

 Block18:
	push ebx
	mov ecx,edi
	call ZRef<CUISkillEx>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block19:
	mov ecx,dword ptr [esi+0x3E5C]
	cmp ecx,ebx
	je Block22

 Block20:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E5C],ebx
	lea edi,[esi+0x3E58]
	je Block22

 Block21:
	push ebx
	mov ecx,edi
	call ZRef<CUIKeyConfig>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block22:
	mov ecx,dword ptr [esi+0x3E64]
	cmp ecx,ebx
	je Block25

 Block23:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E64],ebx
	lea edi,[esi+0x3E60]
	je Block25

 Block24:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserList>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block25:
	mov ecx,dword ptr [esi+0x3E6C]
	cmp ecx,ebx
	je Block28

 Block26:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E6C],ebx
	lea edi,[esi+0x3E68]
	je Block28

 Block27:
	push ebx
	mov ecx,edi
	call ZRef<CUIQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block28:
	mov ecx,dword ptr [esi+0x3E74]
	cmp ecx,ebx
	je Block31

 Block29:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E74],ebx
	lea edi,[esi+0x3E70]
	je Block31

 Block30:
	push ebx
	mov ecx,edi
	call ZRef<CUIMedalQuestInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block31:
	mov ecx,dword ptr [esi+0x3E7C]
	cmp ecx,ebx
	je Block34

 Block32:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E7C],ebx
	lea edi,[esi+0x3E78]
	je Block34

 Block33:
	push ebx
	mov ecx,edi
	call ZRef<CUIUserInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block34:
	mov ecx,dword ptr [esi+0x3EBC]
	cmp ecx,ebx
	je Block37

 Block35:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EBC],ebx
	lea edi,[esi+0x3EB8]
	je Block37

 Block36:
	push ebx
	mov ecx,edi
	call ZRef<CUIPartySearch>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block37:
	mov ecx,dword ptr [esi+0x37BC]
	cmp ecx,ebx
	je Block40

 Block38:
	call CWnd::Destroy
	cmp dword ptr [esi+0x37BC],ebx
	lea edi,[esi+0x37B8]
	je Block40

 Block39:
	push ebx
	mov ecx,edi
	call ZRef<CPartySearch_RemoCon>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block40:
	mov ecx,dword ptr [esi+0x3F6C]
	cmp ecx,ebx
	je Block43

 Block41:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F6C],ebx
	lea edi,[esi+0x3F68]
	je Block43

 Block42:
	push ebx
	mov ecx,edi
	call ZRef<CClock>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block43:
	mov ecx,dword ptr [esi+0x3EA4]
	cmp ecx,ebx
	je Block46

 Block44:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EA4],ebx
	lea edi,[esi+0x3EA0]
	je Block46

 Block45:
	push ebx
	mov ecx,edi
	call ZRef<CUIEnergyBar>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block46:
	mov ecx,dword ptr [esi+0x3EB4]
	cmp ecx,ebx
	je Block49

 Block47:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EB4],ebx
	lea edi,[esi+0x3EB0]
	je Block49

 Block48:
	push ebx
	mov ecx,edi
	call ZRef<CUIMonsterBook>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block49:
	mov ecx,dword ptr [esi+0x3E8C]
	cmp ecx,ebx
	je Block52

 Block50:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E8C],ebx
	lea edi,[esi+0x3E88]
	je Block52

 Block51:
	push ebx
	mov ecx,edi
	call ZRef<CUIGuildBBS>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block52:
	mov ecx,dword ptr [esi+0x3E94]
	cmp ecx,ebx
	je Block55

 Block53:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3E94],ebx
	lea edi,[esi+0x3E90]
	je Block55

 Block54:
	push ebx
	mov ecx,edi
	call ZRef<CAvatarMegaphone>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block55:
	mov ecx,dword ptr [esi+0x3F10]
	cmp ecx,ebx
	je Block58

 Block56:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F10],ebx
	lea edi,[esi+0x3F0C]
	je Block58

 Block57:
	push ebx
	mov ecx,edi
	call ZRef<CUIAccountMoreInfo>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block58:
	mov ecx,dword ptr [esi+0x3F18]
	cmp ecx,ebx
	je Block61

 Block59:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F18],ebx
	lea edi,[esi+0x3F14]
	je Block61

 Block60:
	push ebx
	mov ecx,edi
	call ZRef<CUIFindFriend>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block61:
	mov ecx,dword ptr [esi+0x3EC4]
	cmp ecx,ebx
	je Block64

 Block62:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EC4],ebx
	lea edi,[esi+0x3EC0]
	je Block64

 Block63:
	push ebx
	mov ecx,edi
	call ZRef<CUIItemMaker>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block64:
	mov ecx,dword ptr [esi+0x3F24]
	cmp ecx,ebx
	je Block67

 Block65:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F24],ebx
	lea edi,[esi+0x3F20]
	je Block67

 Block66:
	push ebx
	mov ecx,edi
	call ZRef<CNoticeQuestProgress>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block67:
	mov ecx,dword ptr [esi+0x3ECC]
	cmp ecx,ebx
	je Block70

 Block68:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3ECC],ebx
	lea edi,[esi+0x3EC8]
	je Block70

 Block69:
	push ebx
	mov ecx,edi
	call ZRef<CUIRanking>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block70:
	mov ecx,dword ptr [esi+0x3ED4]
	cmp ecx,ebx
	je Block73

 Block71:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3ED4],ebx
	lea edi,[esi+0x3ED0]
	je Block73

 Block72:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamily>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block73:
	mov ecx,dword ptr [esi+0x3EDC]
	cmp ecx,ebx
	je Block76

 Block74:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EDC],ebx
	lea edi,[esi+0x3ED8]
	je Block76

 Block75:
	push ebx
	mov ecx,edi
	call ZRef<CUIFamilyChart>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block76:
	mov ecx,dword ptr [esi+0x3EE4]
	cmp ecx,ebx
	je Block79

 Block77:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EE4],ebx
	lea edi,[esi+0x3EE0]
	je Block79

 Block78:
	push ebx
	mov ecx,edi
	call ZRef<CUIOperatorBoard>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block79:
	mov ecx,dword ptr [esi+0x3EEC]
	cmp ecx,ebx
	je Block82

 Block80:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EEC],ebx
	lea edi,[esi+0x3EE8]
	je Block82

 Block81:
	push ebx
	mov ecx,edi
	call ZRef<CUIOpBoardState>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block82:
	mov ecx,dword ptr [esi+0x3F04]
	cmp ecx,ebx
	je Block85

 Block83:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F04],ebx
	lea edi,[esi+0x3F00]
	je Block85

 Block84:
	push ebx
	mov ecx,edi
	call ZRef<CUIBattleRecord>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block85:
	mov ecx,dword ptr [esi+0x3EF4]
	cmp ecx,ebx
	je Block88

 Block86:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3EF4],ebx
	lea edi,[esi+0x3EF0]
	je Block88

 Block87:
	push ebx
	mov ecx,edi
	call ZRef<CUIDragonBox>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block88:
	mov ecx,dword ptr [esi+0x3EAC]
	mov byte ptr [esi+0x3EF8],bl
	mov dword ptr [esi+0x3EFC],ebx
	call CUIRaiseManager::DestroyWindows
	mov ecx,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	cmp ecx,ebx
	je Block91

 Block89:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMiniMap>::ms_pInstance]
	cmp eax,ebx
	je Block91

 Block90:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block91:
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp ecx,ebx
	je Block94

 Block92:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp eax,ebx
	je Block94

 Block93:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block94:
	mov ecx,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	cmp ecx,ebx
	je Block97

 Block95:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIRevive>::ms_pInstance]
	cmp eax,ebx
	je Block97

 Block96:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block97:
	mov ecx,dword ptr [TSingleton<CUIMessenger>::ms_pInstance]
	cmp ecx,ebx
	je Block100

 Block98:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMessenger>::ms_pInstance]
	cmp eax,ebx
	je Block100

 Block99:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block100:
	mov ecx,dword ptr [TSingleton<CUIAntiMacro>::ms_pInstance]
	cmp ecx,ebx
	je Block103

 Block101:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIAntiMacro>::ms_pInstance]
	cmp eax,ebx
	je Block103

 Block102:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block103:
	mov ecx,dword ptr [TSingleton<CUIAdminAntiMacro>::ms_pInstance]
	cmp ecx,ebx
	je Block106

 Block104:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIAdminAntiMacro>::ms_pInstance]
	cmp eax,ebx
	je Block106

 Block105:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block106:
	mov ecx,dword ptr [TSingleton<CUIInitialQuiz>::ms_pInstance]
	cmp ecx,ebx
	je Block109

 Block107:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIInitialQuiz>::ms_pInstance]
	cmp eax,ebx
	je Block109

 Block108:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block109:
	mov ecx,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	cmp ecx,ebx
	je Block112

 Block110:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	cmp eax,ebx
	je Block112

 Block111:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block112:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp ecx,ebx
	je Block115

 Block113:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp eax,ebx
	je Block115

 Block114:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block115:
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp ecx,ebx
	je Block118

 Block116:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp eax,ebx
	je Block118

 Block117:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block118:
	mov ecx,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	cmp ecx,ebx
	je Block121

 Block119:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	cmp eax,ebx
	je Block121

 Block120:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block121:
	mov ecx,dword ptr [TSingleton<CUIMonsterCarnival>::ms_pInstance]
	cmp ecx,ebx
	je Block124

 Block122:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIMonsterCarnival>::ms_pInstance]
	cmp eax,ebx
	je Block124

 Block123:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block124:
	mov ecx,dword ptr [TSingleton<CUIEnergyBar>::ms_pInstance]
	cmp ecx,ebx
	je Block127

 Block125:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIEnergyBar>::ms_pInstance]
	cmp eax,ebx
	je Block127

 Block126:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block127:
	mov ecx,dword ptr [TSingleton<CUIPartyHP>::ms_pInstance]
	cmp ecx,ebx
	je Block130

 Block128:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIPartyHP>::ms_pInstance]
	cmp eax,ebx
	je Block130

 Block129:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block130:
	mov ecx,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	cmp ecx,ebx
	je Block133

 Block131:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIWebEvent>::ms_pInstance]
	cmp eax,ebx
	je Block133

 Block132:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block133:
	mov eax,dword ptr [TSingleton<CScriptMan>::ms_pInstance]
	cmp eax,ebx
	je Block138

 Block134:
	mov ecx,dword ptr [eax+0xC]
	mov edi,eax
	cmp ecx,ebx
	je Block136

 Block135:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x10]
	call edx

 Block136:
	mov ecx,dword ptr [edi+0x14]
	cmp ecx,ebx
	je Block138

 Block137:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x10]
	call edx

 Block138:
	mov ecx,dword ptr [TSingleton<CCakePieEvent>::ms_pInstance]
	cmp ecx,ebx
	je Block140

 Block139:
	call CCakePieEvent::CloseUI_ItemInfo

 Block140:
	lea ecx,[esi+0x35D4]
	call CTemporaryStatView::Clear
	mov ecx,dword ptr [TSingleton<CUIScreenMsg>::ms_pInstance]
	cmp ecx,ebx
	je Block142

 Block141:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block142:
	mov ecx,esi
	call CWvsContext::ClearFadeWnd
	mov ecx,esi
	call CWvsContext::ClearQuestTimer
	lea ecx,[esi+0x3F2C]
	call ZList<GW_Memo>::RemoveAll
	mov ecx,dword ptr [TSingleton<CDamageMeter>::ms_pInstance]
	cmp ecx,ebx
	je Block144

 Block143:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block144:
	lea ecx,[esi+0x4220]
	call ZList<CWvsContext::ITEMMSG>::RemoveAll
	mov dword ptr [esi+0x3790],ebx
	mov dword ptr [esi+0x378C],ebx
	mov dword ptr [esi+0x3600],ebx
	mov dword ptr [esi+0x2030],ebx
	mov eax,dword ptr [esi+0x2050]
	cmp eax,ebx
	je Block146

 Block145:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esi+0x2050],ebx

 Block146:
	mov ecx,esi
	mov dword ptr [esi+0x205C],ebx
	mov dword ptr [esi+0x3F98],ebx
	call CWvsContext::ReleaseRefs
	mov eax,dword ptr [esi+0x20CC]
	cmp eax,ebx
	je Block151

 Block147:
	push ebp
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block150

 Block148:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp edi,ebx
	je Block150

 Block149:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block150:
	mov dword ptr [esi+0x20CC],ebx
	pop ebp

 Block151:
	lea ecx,[esi+0x37C8]
	mov dword ptr [esi+0x20B4],ebx
	mov dword ptr [esi+0x3604],ebx
	call GUILDDATA::Clear
	lea ecx,[esi+0x3834]
	call ALLIANCEDATA::Clear
	lea ecx,[esi+0x384C]
	call ZArray<GUILDDATA>::RemoveAll
	push offset _S___3
	lea ecx,[esi+0x3814]
	mov dword ptr [esi+0x20B8],ebx
	mov dword ptr [esi+0x3868],ebx
	mov dword ptr [esi+0x3818],ebx
	call ZXString<unsigned short>::AssignCStr
	push offset _S___3
	lea ecx,[esi+0x381C]
	mov dword ptr [esi+0x3820],ebx
	call ZXString<unsigned short>::AssignCStr
	push offset _S___3
	lea ecx,[esi+0x3824]
	mov dword ptr [esi+0x3828],ebx
	call ZXString<unsigned short>::AssignCStr
	push ebx
	push offset _S___3
	push ebx
	lea edi,[esi+0x382C]
	push ebx
	mov ecx,edi
	mov dword ptr [esi+0x3830],ebx
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push ebx
	mov ecx,edi
	call ZXString<unsigned short>::ReleaseBuffer
	mov dword ptr [esi+0x3850],ebx
	mov dword ptr [esi+0x3854],ebx
	lea ecx,[esi+0x412C]
	mov dword ptr [esi+0x40D8],ebx
	mov byte ptr [esi+0x40DC],bl
	mov dword ptr [esi+0x40E0],ebx
	mov dword ptr [esi+0x40E4],ebx
	mov dword ptr [esi+0x40E8],ebx
	call ZMap<unsigned long, ZRef<ZList<_FILETIME>>, unsigned long>::RemoveAll
	mov ecx,offset CUIQuestInfo::ms_lQuestRead
	mov dword ptr [esi+0x4144],ebx
	mov dword ptr [esi+0x3F9C],ebx
	call ZList<unsigned short>::RemoveAll
	mov ecx,esi
	call CWvsContext::StopPartySearch
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	pop edi
	cmp ecx,ebx
	je Block153

 Block152:
	push ebx
	call CRadioManager::Stop

 Block153:
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	call CConfig::SaveCharacter
	mov ecx,offset CUserLocal::ms_anTutors
	call ZArray<long>::RemoveAll
	pop esi
	pop ebx
	jmp  CNpcTemplate::Unload
}
}
// CWvsContext::GetWebBoardAuthKey
_SUB_EXCEPTION_HANDLER(4DCCF0)
__SUB_CLASS_THIS(004DCCF0, __thiscall, 8190,  CWvsContext, ZXString<unsigned short>*, ZXString<unsigned short>*, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4DCCF0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	xor ebx,ebx
	mov dword ptr [esp+0xC],ebx
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	ja Block2

 Block1:
	lea eax,[ecx+eax*4+0x382C]
	jmp Block3

 Block2:
	push 0
	push offset _S___3
	push 0
	push 0
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x34],ebx
	call ZXString<unsigned short>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	lea ecx,[esp+0x28]
	call ZXString<unsigned short>::ReleaseBuffer
	mov ebx,1
	lea eax,[esp+0x24]
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0xC],ebx

 Block3:
	mov esi,dword ptr [esp+0x20]
	push eax
	mov ecx,esi
	mov dword ptr [esi],0
	call ZXString<unsigned short>::op_assign
	or ebx,2
	mov dword ptr [esp+0x18],0
	test bl,1
	je Block6

 Block4:
	mov eax,dword ptr [esp+0x24]
	and ebx,0xFFFFFFFE
	mov dword ptr [esp+0xC],ebx
	test eax,eax
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block6:
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x10
	ret 8
}
}
// COpenGatePool::OnOpenGateCreated
_SUB_EXCEPTION_HANDLER(28BFD0)
__SUB_CLASS_THIS(0028BFD0, __thiscall, 51994,  COpenGatePool, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_28BFD0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x50
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x64]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	mov eax,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	mov ecx,dword ptr [eax+8]
	lea edx,[esp+0x1C]
	push edx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	xor eax,eax
	mov dword ptr [esp+0x40],eax
	mov esi,dword ptr [esp+0x74]
	mov ecx,esi
	mov dword ptr [esp+0x6C],eax
	call CInPacket::Decode1
	mov ecx,esi
	movzx edi,al
	call CInPacket::Decode4
	mov ecx,esi
	mov ebp,eax
	call CInPacket::Decode2
	mov ecx,esi
	movsx ebx,ax
	call CInPacket::Decode2
	cwde
	mov ecx,esi
	mov dword ptr [esp+0x30],eax
	call CInPacket::Decode1
	movzx ecx,al
	mov dword ptr [esp+0x74],ecx
	mov ecx,esi
	call CInPacket::Decode4
	lea ecx,[esp+0x3C]
	mov dword ptr [esp+0x1C],eax
	call ZRef<COpenGatePool::OPENGATE>::_Alloc
	mov esi,dword ptr [esp+0x40]
	mov edx,dword ptr [esp+0x30]
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esi],edi
	mov dword ptr [esi+8],ebp
	mov dword ptr [esi+0xC],ebx
	mov dword ptr [esi+0x10],edx
	xor ebp,ebp
	mov dword ptr [esi+0x24],ebp
	mov dword ptr [esi+0x14],eax
	push 1
	mov dword ptr [esp+0x18],ebp
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push 0x7FFFFFFF
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	sub edx,5
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov edi,eax
	cmp edi,ebp
	jne Block4

 Block3:
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov edi,eax
	mov eax,dword ptr [esi+0x10]
	mov dword ptr [esp+0x14],eax

 Block4:
	cmp dword ptr [esi],0
	jne Block28

 Block5:
	mov edi,dword ptr [edi+0x2C]
	imul edi,0x7530
	push 0
	push 0xFF
	sub edi,0x3FFFB1DF
	push edi
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	mov dword ptr [eax],0
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	mov dword ptr [eax],0
	lea eax,[esp+0x3C]
	push 0xAC4
	push eax
	mov byte ptr [esp+0x90],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x88],3
	push 0
	push eax
	lea ecx,[esp+0x40]
	push ecx
	mov byte ptr [esp+0x94],4
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block10

 Block6:
	mov dword ptr [esi+0x18],eax
	test eax,eax
	je Block8

 Block7:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block8:
	test edi,edi
	je Block10

 Block9:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block10:
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block12

 Block11:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block12:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x6C],0
	test eax,eax
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block14:
	call timeGetTime
	mov edi,dword ptr [ZImports::_VariantInit]
	mov dword ptr [esi+0x20],eax
	lea eax,[esp+0x44]
	push eax
	call edi
	lea ecx,[esp+0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block16

 Block15:
	push eax
	call _com_issue_error

 Block16:
	lea edx,[esp+0x2C]
	push edx
	mov byte ptr [esp+0x70],5
	call edi
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block18

 Block17:
	push eax
	call _com_issue_error

 Block18:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x6C],6
	test ecx,ecx
	jne Block20

 Block19:
	push 0x80004003
	call _com_issue_error

 Block20:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x30]
	push eax
	push 0
	call IWzGr2DLayer::Animate
	mov ebx,dword ptr [ZImports::_VariantClear]
	mov edi,8
	mov byte ptr [esp+0x6C],5
	cmp word ptr [esp+0x2C],di
	jne Block23

 Block21:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	test eax,eax
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea edx,[esp+0x2C]
	push edx
	call ebx

 Block24:
	mov byte ptr [esp+0x6C],0
	cmp word ptr [esp+0x44],di
	jne Block27

 Block25:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block105

 Block26:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block105

 Block27:
	lea ecx,[esp+0x44]
	push ecx
	call ebx
	jmp Block105

 Block28:
	mov dword ptr [esp+0x30],0
	cmp dword ptr [esp+0x74],0
	mov ecx,dword ptr [esp+0x18]
	mov byte ptr [esp+0x6C],7
	je Block30

 Block29:
	lea edx,[esp+0x2C]
	push edx
	add ecx,0x30
	jmp Block31

 Block30:
	lea eax,[esp+0x2C]
	push eax
	add ecx,4

 Block31:
	lea eax,[esi+8]
	push eax
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	mov ebp,dword ptr [esp+0x30]
	push 0
	push 0xFF
	test ebp,ebp
	je Block78

 Block32:
	mov eax,dword ptr [edi+0x2C]
	imul eax,0x7530
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	mov ecx,dword ptr [esi+0x10]
	mov edx,dword ptr [esi+0xC]
	push ecx
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],0
	lea eax,[esp+0x38]
	push 0xAC7
	push eax
	mov byte ptr [esp+0x90],9
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x88],0xA
	push 0
	push eax
	lea ecx,[esp+0x44]
	push ecx
	mov byte ptr [esp+0x94],0xB
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block37

 Block33:
	mov dword ptr [esi+0x18],eax
	test eax,eax
	je Block35

 Block34:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block35:
	test edi,edi
	je Block37

 Block36:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block37:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block39

 Block38:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block39:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x6C],7
	test eax,eax
	je Block41

 Block40:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block41:
	lea eax,[esp+0x54]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block43

 Block42:
	push eax
	call _com_issue_error

 Block43:
	lea edx,[esp+0x44]
	mov bl,0xC
	push edx
	mov byte ptr [esp+0x70],bl
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x44]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block45

 Block44:
	push eax
	call _com_issue_error

 Block45:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x6C],0xD
	test ecx,ecx
	jne Block47

 Block46:
	push 0x80004003
	call _com_issue_error

 Block47:
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x48]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x6C],bl
	mov ebx,dword ptr [ZImports::_VariantClear]
	cmp word ptr [esp+0x44],di
	jne Block50

 Block48:
	mov eax,dword ptr [esp+0x4C]
	xor ecx,ecx
	mov word ptr [esp+0x44],cx
	test eax,eax
	je Block51

 Block49:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block51

 Block50:
	lea edx,[esp+0x44]
	push edx
	call ebx

 Block51:
	mov byte ptr [esp+0x6C],7
	cmp word ptr [esp+0x54],di
	jne Block54

 Block52:
	xor eax,eax
	mov word ptr [esp+0x54],ax
	mov eax,dword ptr [esp+0x5C]
	test eax,eax
	je Block55

 Block53:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block54:
	lea ecx,[esp+0x54]
	push ecx
	call ebx

 Block55:
	mov eax,dword ptr [ebp+0x10]
	mov ecx,dword ptr [ebp+0xC]
	push 1
	push 0x7FFFFFFF
	lea edx,[esp+0x1C]
	push edx
	sub eax,5
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test eax,eax
	jne Block57

 Block56:
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,dword ptr [ebp+0x10]
	mov dword ptr [esp+0x14],ecx

 Block57:
	mov eax,dword ptr [eax+0x2C]
	imul eax,0x7530
	push 0
	push 0xFF
	sub eax,0x3FFFB1DF
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	mov edx,dword ptr [ebp+0x10]
	mov eax,dword ptr [ebp+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x38]
	push 0xAC7
	push ecx
	mov byte ptr [esp+0x90],0xF
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x88],0x10
	push 0
	push eax
	lea edx,[esp+0x44]
	push edx
	mov byte ptr [esp+0x94],0x11
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [ebp+0x18]
	add esp,0x28
	cmp edi,eax
	je Block62

 Block58:
	mov dword ptr [ebp+0x18],eax
	test eax,eax
	je Block60

 Block59:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block60:
	test edi,edi
	je Block62

 Block61:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block62:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block64

 Block63:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block64:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x6C],7
	test eax,eax
	je Block66

 Block65:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block66:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x44]
	push ecx
	call edi
	lea edx,[esp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block68

 Block67:
	push eax
	call _com_issue_error

 Block68:
	lea eax,[esp+0x54]
	mov bl,0x12
	push eax
	mov byte ptr [esp+0x70],bl
	call edi
	lea ecx,[esp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block70

 Block69:
	push eax
	call _com_issue_error

 Block70:
	mov ecx,dword ptr [ebp+0x18]
	mov byte ptr [esp+0x6C],0x13
	test ecx,ecx
	jne Block72

 Block71:
	push 0x80004003
	call _com_issue_error

 Block72:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x58]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x6C],bl
	cmp word ptr [esp+0x54],di
	jne Block75

 Block73:
	mov eax,dword ptr [esp+0x5C]
	xor ecx,ecx
	mov word ptr [esp+0x54],cx
	test eax,eax
	je Block76

 Block74:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block76

 Block75:
	lea edx,[esp+0x54]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block76:
	mov byte ptr [esp+0x6C],7
	cmp word ptr [esp+0x44],di
	je Block98

 Block77:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block101

 Block78:
	mov edi,dword ptr [edi+0x2C]
	imul edi,0x7530
	sub edi,0x3FFFB1DF
	push edi
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],0
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [esi+0xC]
	push edx
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x38]
	push 0xAC5
	push ecx
	mov byte ptr [esp+0x90],0x15
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x88],0x16
	push 0
	push eax
	lea edx,[esp+0x44]
	push edx
	mov byte ptr [esp+0x94],0x17
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x18]
	add esp,0x28
	cmp edi,eax
	je Block83

 Block79:
	mov dword ptr [esi+0x18],eax
	test eax,eax
	je Block81

 Block80:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block81:
	test edi,edi
	je Block83

 Block82:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block83:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block85

 Block84:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block85:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x6C],7
	test eax,eax
	je Block87

 Block86:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block87:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x44]
	push ecx
	call edi
	lea edx,[esp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block89

 Block88:
	push eax
	call _com_issue_error

 Block89:
	lea eax,[esp+0x54]
	mov bl,0x18
	push eax
	mov byte ptr [esp+0x70],bl
	call edi
	lea ecx,[esp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block91

 Block90:
	push eax
	call _com_issue_error

 Block91:
	mov ecx,dword ptr [esi+0x18]
	mov byte ptr [esp+0x6C],0x19
	test ecx,ecx
	jne Block93

 Block92:
	push 0x80004003
	call _com_issue_error

 Block93:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x58]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov edi,8
	mov byte ptr [esp+0x6C],bl
	mov ebx,dword ptr [ZImports::_VariantClear]
	cmp word ptr [esp+0x54],di
	jne Block96

 Block94:
	mov eax,dword ptr [esp+0x5C]
	xor ecx,ecx
	mov word ptr [esp+0x54],cx
	test eax,eax
	je Block97

 Block95:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block97

 Block96:
	lea edx,[esp+0x54]
	push edx
	call ebx

 Block97:
	mov byte ptr [esp+0x6C],7
	cmp word ptr [esp+0x44],di
	jne Block100

 Block98:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block101

 Block99:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block101

 Block100:
	lea ecx,[esp+0x44]
	push ecx
	call ebx

 Block101:
	mov dword ptr [esi+0x24],1
	mov byte ptr [esp+0x6C],0
	test ebp,ebp
	je Block105

 Block102:
	lea edi,[ebp-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block105

 Block103:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block105

 Block104:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block105:
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	sub esp,8
	mov eax,esp
	mov dword ptr [eax+4],esi
	add esi,0xFFFFFFF0
	cmp dword ptr [esp+0x7C],0
	mov dword ptr [esp+0x7C],esp
	je Block107

 Block106:
	lea ecx,[esi+4]
	push ecx
	call ebx
	mov ecx,dword ptr [esp+0x20]
	call COpenGatePool::AddOpenGate1
	jmp Block108

 Block107:
	lea edx,[esi+4]
	push edx
	call ebx
	mov ecx,dword ptr [esp+0x20]
	call COpenGatePool::AddOpenGate2

 Block108:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x70],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block111

 Block109:
	push edi
	call ebx
	test esi,esi
	je Block111

 Block110:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block111:
	mov ecx,dword ptr [esp+0x64]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x5C
	ret 4
}
}
// CWvsContext::IsExist
__SUB_CLASS_THIS(005F3150, __thiscall, 8212,  CWvsContext, long, long) {
__asm {

 Block0:
	push ecx
	push ebx
	push edi
	mov edi,dword ptr [esp+0x10]
	mov eax,0x431BDE83
	imul edi
	sar edx,0x12
	mov ebx,edx
	shr ebx,0x1F
	add ebx,edx
	lea eax,[ebx-1]
	cmp eax,4
	ja Block28

 Block1:
	push ebp
	mov ebp,dword ptr [ecx+0x20CC]
	mov eax,dword ptr [ebp+ebx*4+0x501]
	test eax,eax
	je Block3

 Block2:
	mov eax,dword ptr [eax-4]

 Block3:
	dec eax
	push esi
	mov dword ptr [esp+0x10],eax
	cmp ebx,1
	jne Block19

 Block4:
	mov edi,ebx
	lea esi,[ebp+0x2E5]

 Block5:
	mov eax,dword ptr [esi-0x1E0]
	test eax,eax
	je Block7

 Block6:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [esp+0x18]
	je Block25

 Block7:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block9

 Block8:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [esp+0x18]
	je Block26

 Block9:
	inc edi
	add esi,8
	cmp edi,0x3B
	jle Block5

 Block10:
	xor esi,esi
	lea edi,[ebp+0x4BD]

 Block11:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block13

 Block12:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [esp+0x18]
	je Block27

 Block13:
	inc esi
	add edi,8
	cmp esi,4
	jl Block11

 Block14:
	xor esi,esi
	lea edi,[ebp+0x4DD]
	mov edi,edi

 Block15:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block17

 Block16:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [esp+0x18]
	je Block27

 Block17:
	inc esi
	add edi,8
	cmp esi,5
	jl Block15

 Block18:
	mov edi,dword ptr [esp+0x18]

 Block19:
	mov esi,1
	cmp dword ptr [esp+0x10],esi
	jl Block24

 Block20:
	lea esp,[esp]

 Block21:
	mov ecx,dword ptr [ebp+ebx*4+0x501]
	mov eax,dword ptr [ecx+esi*8+4]
	test eax,eax
	je Block23

 Block22:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	cmp eax,edi
	je Block27

 Block23:
	inc esi
	cmp esi,dword ptr [esp+0x10]
	jle Block21

 Block24:
	pop esi
	pop ebp
	pop edi
	xor eax,eax
	pop ebx
	pop ecx
	ret 4

 Block25:
	pop esi
	pop ebp
	mov eax,edi
	pop edi
	pop ebx
	pop ecx
	ret 4

 Block26:
	pop esi
	pop ebp
	mov eax,edi
	pop edi
	neg eax
	pop ebx
	pop ecx
	ret 4

 Block27:
	mov eax,esi
	pop esi
	pop ebp
	pop edi
	pop ebx
	pop ecx
	ret 4

 Block28:
	pop edi
	xor eax,eax
	pop ebx
	pop ecx
	ret 4
}
}
// CWvsContext::SendPartyWanted
_SUB_EXCEPTION_HANDLER(610100)
__SUB_CLASS_THIS(00610100, __thiscall, 8270,  CWvsContext, void, unsigned long, unsigned long, unsigned long, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_610100
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0x10A
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+8]
	mov dword ptr [esp+0x20],0
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x28]
	push ecx
	lea ecx,[esp+8]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+8]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+8]
	call COutPacket::Encode4
	lea ecx,[esp+4]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret 0x10
}
}
// CWvsContext::StartPartyMemberSearch
__SUB_CLASS_THIS0(005DAB40, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CUIPartySearch>::ms_pInstance]
	test ecx,ecx
	je Block2

 Block1:
	pop esi
	jmp  CUIPartySearch::StartSearch

 Block2:
	mov ecx,esi
	mov dword ptr [esi+0x37A8],1
	call CWvsContext::ShowPartySearch_Remocon_Searching
	mov eax,dword ptr [esi+0x37A4]
	mov ecx,dword ptr [esi+0x37A0]
	mov edx,dword ptr [esi+0x379C]
	push eax
	mov eax,dword ptr [esi+0x3798]
	push ecx
	push edx
	push eax
	mov ecx,esi
	call CWvsContext::SendPartyWanted
	pop esi
	ret
}
}
// GUILDDATA::Decode
_SUB_EXCEPTION_HANDLER(FB760)
__SUB_CLASS_THIS(000FB760, __thiscall, 45446,  GUILDDATA, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_FB760
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [esp+0x38]
	mov ecx,esi
	call CInPacket::Decode4
	mov dword ptr [edi],eax
	lea eax,[esp+0x38]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	push eax
	lea ecx,[edi+4]
	mov dword ptr [esp+0x34],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x38]
	or ebp,0xFFFFFFFF
	mov dword ptr [esp+0x30],ebp
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	lea ebx,[edi+8]
	mov dword ptr [esp+0x38],5
	lea esp,[esp]

 Block3:
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,esi
	call CInPacket::DecodeStr
	push eax
	push ebp
	mov ecx,ebx
	mov dword ptr [esp+0x38],1
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x30],ebp
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	sub dword ptr [esp+0x38],1
	jne Block3

 Block6:
	mov ecx,esi
	call CInPacket::Decode1
	movzx ebx,al
	lea edx,[esp+0x38]
	push edx
	lea ebp,[edi+0xC]
	push ebx
	mov ecx,ebp
	call ZArray<unsigned long>::_Alloc
	lea eax,[esp+0x38]
	push eax
	lea ecx,[edi+0x10]
	push ebx
	call ZArray<GUILDMEMBER>::_Alloc
	test ebx,ebx
	jle Block8

 Block7:
	mov edx,dword ptr [ebp]
	lea ecx,[ebx*4]
	push ecx
	push edx
	mov ecx,esi
	call CInPacket::DecodeBuffer
	imul ebx,0x25
	mov eax,dword ptr [edi+0x10]
	push ebx
	push eax
	mov ecx,esi
	call CInPacket::DecodeBuffer

 Block8:
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [edi+0x14],eax
	call CInPacket::Decode2
	mov ecx,esi
	mov word ptr [edi+0x18],ax
	call CInPacket::Decode1
	mov ecx,esi
	mov byte ptr [edi+0x1A],al
	call CInPacket::Decode2
	mov ecx,esi
	mov word ptr [edi+0x1B],ax
	call CInPacket::Decode1
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,esi
	mov byte ptr [edi+0x1D],al
	call CInPacket::DecodeStr
	push eax
	lea ecx,[edi+0x1E]
	mov dword ptr [esp+0x34],2
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x38]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [edi+0x22],eax
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [edi+0x26],eax
	call CInPacket::Decode1
	movzx edx,al
	lea ebx,[edi+0x2E]
	mov ecx,ebx
	mov dword ptr [edi+0x2A],edx
	call ZMap<long, GUILDDATA::SKILLENTRY, long>::RemoveAll
	lea ebp,[edi+0x46]
	mov ecx,ebp
	call ZArray<long>::RemoveAll
	mov ecx,esi
	call CInPacket::Decode2
	movzx eax,ax
	test eax,eax
	jle Block15

 Block11:
	mov dword ptr [esp+0x38],eax

 Block12:
	mov ecx,esi
	call CInPacket::Decode4
	mov edi,eax
	mov dword ptr [esp+0x14],edi
	mov dword ptr [esp+0x22],0
	push esi
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x34],3
	call GUILDDATA::SKILLENTRY::Decode
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebx
	call ZMap<long, GUILDDATA::SKILLENTRY, long>::Insert
	push 0xFFFFFFFF
	mov ecx,ebp
	call ZArray<long>::InsertBefore
	mov dword ptr [eax],edi
	mov eax,dword ptr [esp+0x22]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test eax,eax
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	sub dword ptr [esp+0x38],1
	jne Block12

 Block15:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 4
}
}
// CWvsContext::GetQuestItemID
__SUB_CLASS_THIS(005F4650, __thiscall, 8307,  CWvsContext, long, uint16_t, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push eax
	call CQuestMan::GetCompleteDemand
	test eax,eax
	je Block6

 Block1:
	mov edx,dword ptr [esp+8]
	cmp edx,1
	jl Block6

 Block2:
	mov ecx,dword ptr [eax+0x74]
	test ecx,ecx
	je Block4

 Block3:
	mov ecx,dword ptr [ecx-4]

 Block4:
	cmp edx,ecx
	ja Block6

 Block5:
	lea ecx,[edx+edx*2]
	mov edx,dword ptr [eax+0x74]
	mov eax,dword ptr [edx+ecx*4-0xC]
	ret 8

 Block6:
	xor eax,eax
	ret 8
}
}
// CUIStatChange::SetOption
__SUB_CLASS_THIS(005CC730, __thiscall, 68507,  CUIStatChange, void, unsigned long, unsigned long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov edx,dword ptr [esp+8]
	mov dword ptr [ecx+0xC8],eax
	mov dword ptr [ecx+0xCC],edx
	ret 8
}
}
// CWvsContext::OnUpdateGMBoard
_SUB_EXCEPTION_HANDLER(5E03C0)
__SUB_CLASS_THIS(005E03C0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E03C0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov edi,dword ptr [esp+0x24]
	mov ebx,dword ptr [eax+0x64]
	mov ecx,edi
	call CInPacket::Decode4
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,edi
	mov dword ptr [esi+0x3EFC],eax
	call CInPacket::DecodeStr
	xor edi,edi
	push eax
	lea ecx,[esi+0x3F08]
	mov dword ptr [esp+0x20],edi
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	cmp eax,edi
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov eax,dword ptr [esi+0x3EFC]
	cmp ebx,eax
	jge Block8

 Block3:
	cmp eax,edi
	je Block8

 Block4:
	push 0xFFFFFFFF
	push 0x1D
	mov ecx,esi
	call CWvsContext::UI_Open
	lea edx,[esp+0x10]
	push 0x147B
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x1C],1
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],edi
	je Block6

 Block5:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push edi
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],edi
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 8
	push eax
	call CUIStatusBar::ChatLogAdd

 Block6:
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	cmp eax,edi
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret 4
}
}
// CWvsContext::PushStackForTab
__SUB_CLASS_THIS(0036AD50, __thiscall, 8401,  CWvsContext, void, CUIWnd*) {
__asm {

 Block0:
	push esi
	mov esi,dword ptr [esp+8]
	xor eax,eax
	add ecx,0x40A0
	lea ecx,[ecx]

 Block1:
	mov edx,dword ptr [ecx]
	test edx,edx
	je Block6

 Block2:
	cmp eax,dword ptr [edx-4]
	jae Block6

 Block3:
	cmp dword ptr [edx+eax*4],esi
	je Block5

 Block4:
	inc eax
	jmp Block1

 Block5:
	lea eax,[edx+eax*4]
	pop esi
	mov dword ptr [esp+4],eax
	jmp  ZArray<CUIWnd *>::RemoveAt

 Block6:
	pop esi
	ret 4
}
}
// CWvsContext::OpenBook
_SUB_EXCEPTION_HANDLER(5DA850)
__SUB_CLASS_THIS(005DA850, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DA850
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	cmp dword ptr [TSingleton<CBookDlg>::ms_pInstance],0
	jne Block3

 Block1:
	call TSingleton<CBookDlg>::CreateInstance
	lea eax,[esp+4]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x14],0
	call play_ui_sound
	mov eax,dword ptr [esp+8]
	add esp,4
	mov dword ptr [esp+0x10],0xFFFFFFFF
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block3:
	mov ecx,dword ptr [esp+0x18]
	push ecx
	mov ecx,dword ptr [TSingleton<CBookDlg>::ms_pInstance]
	call CBookDlg::SetBookItem
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x10
	ret 4
}
}
// CWvsContext::OnQuestProgressUpdated
_SUB_EXCEPTION_HANDLER(5FA500)
__SUB_CLASS_THIS(005FA500, __thiscall, 8277,  CWvsContext, void, uint16_t, long, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5FA500
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x1C]
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push edi
	mov dword ptr [esp+0x18],0
	call CQuestMan::SetRecentlyUpdatedQuest
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [esi+0x3F24]
	push eax
	push edi
	call CNoticeQuestProgress::OnQuestProgressUpdated_Item
	jmp Block3

 Block2:
	push ecx
	mov ecx,esp
	lea eax,[esp+0x28]
	mov dword ptr [esp+0x20],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esi+0x3F24]
	push edi
	call CNoticeQuestProgress::OnQuestProgressUpdated_Mob

 Block3:
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 0xC
}
}
// CWvsContext::CFriend::IsDataTwisted
__SUB_CLASS_THIS0(006102C0, __thiscall, 8443,  CWvsContext::CFriend, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [ecx]
	test eax,eax
	jne Block2

 Block1:
	xor edx,edx
	jmp Block3

 Block2:
	mov edx,dword ptr [eax-4]

 Block3:
	mov eax,dword ptr [ecx+4]
	test eax,eax
	je Block5

 Block4:
	mov eax,dword ptr [eax-4]

 Block5:
	cmp edx,eax
	jne Block18

 Block6:
	mov eax,dword ptr [ecx+4]
	test eax,eax
	jne Block8

 Block7:
	xor edx,edx
	jmp Block9

 Block8:
	mov edx,dword ptr [eax-4]

 Block9:
	test eax,eax
	je Block11

 Block10:
	mov eax,dword ptr [eax-4]

 Block11:
	cmp edx,eax
	jne Block18

 Block12:
	mov eax,dword ptr [ecx+4]
	test eax,eax
	je Block14

 Block13:
	mov eax,dword ptr [eax-4]

 Block14:
	mov ecx,dword ptr [ecx+8]
	test ecx,ecx
	je Block16

 Block15:
	mov ecx,dword ptr [ecx-4]

 Block16:
	cmp eax,ecx
	jne Block18

 Block17:
	xor eax,eax
	ret

 Block18:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::LoadFriend
	mov eax,1
	ret
}
}
// CWvsContext::GetActionRndMan
__SUB_CLASS_THIS0(00503320, __thiscall, 8316,  CWvsContext, CRand32&) {
__asm {

 Block0:
	lea eax,[ecx+0x3DA0]
	ret
}
}
// ALLIANCEDATA::operator=
__SUB_CLASS_THIS(0060D080, __thiscall, 45426,  ALLIANCEDATA, ALLIANCEDATA&, const ALLIANCEDATA&) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov eax,dword ptr [edi]
	mov esi,ecx
	lea ecx,[edi+4]
	push ecx
	lea ecx,[esi+4]
	mov dword ptr [esi],eax
	call ZXString<char>::op_assign
	lea edx,[edi+8]
	push edx
	lea ecx,[esi+8]
	call ZArray<ZXString<char>>::operator=
	lea eax,[edi+0xC]
	push eax
	lea ecx,[esi+0xC]
	call ZArray<unsigned long>::operator=
	mov ecx,dword ptr [edi+0x10]
	mov dword ptr [esi+0x10],ecx
	add edi,0x14
	push edi
	lea ecx,[esi+0x14]
	call ZXString<char>::op_assign
	pop edi
	mov eax,esi
	pop esi
	ret 4
}
}
// CWvsContext::OnGameStageChanged
_SUB_EXCEPTION_HANDLER(5E6760)
__SUB_CLASS_THIS0(005E6760, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6760
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	lea ecx,[esi+0x3E28]
	call ZRef<CPortalList>::_Alloc
	lea ecx,[esi+0x3DD0]
	call ZRef<CUserPool>::_Alloc
	lea ecx,[esi+0x3DD8]
	call ZRef<CSummonedPool>::_Alloc
	lea ecx,[esi+0x3DE0]
	call ZRef<CMobPool>::_Alloc
	lea ecx,[esi+0x3DE8]
	call ZRef<CNpcPool>::_Alloc
	lea ecx,[esi+0x3DF0]
	call ZRef<CEmployeePool>::_Alloc
	lea ecx,[esi+0x3DF8]
	call ZRef<CDropPool>::_Alloc
	lea ecx,[esi+0x3E00]
	call ZRef<CMessageBoxPool>::_Alloc
	lea ecx,[esi+0x3E08]
	call ZRef<CAffectedAreaPool>::_Alloc
	lea ecx,[esi+0x3E10]
	call ZRef<CTownPortalPool>::_Alloc
	lea ecx,[esi+0x3E18]
	call ZRef<COpenGatePool>::_Alloc
	lea ecx,[esi+0x3E20]
	call ZRef<CReactorPool>::_Alloc
	xor edi,edi
	lea ecx,[esi+0x3D38]
	push edi
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D44]
	push edi
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D50]
	push edi
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D5C]
	push edi
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D68]
	push edi
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D74]
	push edi
	call TSecType<long>::SetData
	mov dword ptr [esi+0x3D80],edi
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp ecx,edi
	je Block3

 Block1:
	push edi
	call CUIStatusBar::SetProblem
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp ecx,edi
	je Block3

 Block2:
	push 0x1388
	push edi
	push edi
	call CUIStatusBar::SetItemMsg

 Block3:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp ecx,edi
	je Block6

 Block4:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	cmp eax,edi
	je Block6

 Block5:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block6:
	mov ecx,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp ecx,edi
	je Block9

 Block7:
	call CWnd::Destroy
	mov eax,dword ptr [TSingleton<CUIShopScanner>::ms_pInstance]
	cmp eax,edi
	je Block9

 Block8:
	lea ecx,[eax+8]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block9:
	cmp dword ptr [esi+0x3850],edi
	jne Block20

 Block10:
	cmp dword ptr [TSingleton<CUIMiniMap>::ms_pInstance],edi
	jne Block14

 Block11:
	push 0xD1C
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x10],eax
	mov dword ptr [esp+0x1C],edi
	cmp eax,edi
	je Block13

 Block12:
	push esi
	mov ecx,eax
	call CUIMiniMap::_ctor_0

 Block13:
	mov dword ptr [esp+0x1C],0xFFFFFFFF

 Block14:
	call TSingleton<CUIStatusBar>::CreateInstance
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	cmp dword ptr [ecx+0x1804],2
	jne Block16

 Block15:
	push 1
	call CUIStatusBar::SetChatType

 Block16:
	call TSingleton<CUIScreenMsg>::CreateInstance
	mov ecx,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	cmp ecx,edi
	je Block19

 Block17:
	mov ebx,ecx
	cmp dword ptr [ecx+0xB84],edi
	je Block20

 Block18:
	call CWnd::Destroy
	mov ecx,ebx
	call CUIQuestAlarm::Create
	jmp Block20

 Block19:
	call TSingleton<CUIQuestAlarm>::CreateInstance

 Block20:
	mov ecx,dword ptr [TSingleton<CScriptMan>::ms_pInstance]
	call CScriptMan::Init
	call timeGetTime
	mov ebx,eax
	mov dword ptr [esi+0x20B8],edi
	call get_update_time
	mov dword ptr [esi+0x20BC],eax
	lea eax,[ebx-0x493E0]
	mov dword ptr [esi+0x3D84],eax
	mov dword ptr [esi+0x3DCC],eax
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::IsLoadFlash
	mov dword ptr [esi+0x3FF4],edi
	test eax,eax
	je Block22

 Block21:
	mov dword ptr [esi+0x3FF0],1
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret

 Block22:
	mov dword ptr [esi+0x3FF0],edi
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret
}
}
// CWvsContext::RunMapTransferItem
_SUB_EXCEPTION_HANDLER(5E11C0)
__SUB_CLASS_THIS(005E11C0, __thiscall, 8313,  CWvsContext, int32_t, COutPacket&, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E11C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov eax,dword ptr [eax+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	jne Block2

 Block1:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	push 0x19C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	test eax,eax
	jne Block23

 Block2:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block5

 Block4:
	xor esi,esi

 Block5:
	push 0
	mov ecx,esi
	call CField::IsEventMap
	test eax,eax
	jne Block14

 Block6:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block8

 Block7:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block9

 Block8:
	xor esi,esi

 Block9:
	test byte ptr [esi+0x178],0x40
	jne Block14

 Block10:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block12

 Block11:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block13

 Block12:
	xor esi,esi

 Block13:
	test byte ptr [esi+0x178],2
	je Block15

 Block14:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xBB1
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	test eax,eax
	jne Block23

 Block15:
	push 0x120
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x24],0
	test eax,eax
	je Block24

 Block16:
	mov edx,dword ptr [esp+0x30]
	push edx
	mov ecx,eax
	call CUIMapTransfer::_ctor_0
	test eax,eax
	je Block24

 Block17:
	lea edi,[eax+8]
	test edi,edi
	je Block24

 Block18:
	add edi,0xFFFFFFF8
	mov dword ptr [esp+0x18],edi
	test edi,edi
	je Block20

 Block19:
	lea eax,[edi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block20:
	mov ecx,edi
	mov dword ptr [esp+0x24],1
	call CDialog::DoModal
	cmp eax,1
	je Block25

 Block21:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test edi,edi
	je Block23

 Block22:
	push 0
	lea ecx,[esp+0x18]
	call ZRef<CUIMapTransfer>::_ReleaseRaw

 Block23:
	xor eax,eax
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret 8

 Block24:
	xor edi,edi
	mov dword ptr [esp+0x18],edi
	jmp Block20

 Block25:
	lea ecx,[esp+0x10]
	push ecx
	lea esi,[ebx+0x3F94]
	push esi
	mov ecx,edi
	call CUIMapTransfer::GetResult
	mov eax,dword ptr [esi]
	test eax,eax
	je Block28

 Block26:
	cmp byte ptr [eax],0
	je Block28

 Block27:
	mov ebx,dword ptr [esp+0x2C]
	push 1
	mov ecx,ebx
	call COutPacket::Encode1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push esi
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,ebx
	call COutPacket::EncodeStr
	jmp Block31

 Block28:
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block31

 Block29:
	cmp eax,0x3B9AC9FF
	je Block31

 Block30:
	mov esi,dword ptr [esp+0x2C]
	push 0
	mov ecx,esi
	call COutPacket::Encode1
	mov edx,dword ptr [esp+0x10]
	push edx
	mov ecx,esi
	call COutPacket::Encode4

 Block31:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test edi,edi
	je Block33

 Block32:
	push 0
	lea ecx,[esp+0x18]
	call ZRef<CUIMapTransfer>::_ReleaseRaw

 Block33:
	mov eax,1
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret 8
}
}
// CTownPortalPool::AddTownPortal
_SUB_EXCEPTION_HANDLER(362B50)
__SUB_CLASS_THIS(00362B50, __thiscall, 51719,  CTownPortalPool, void, NakedParam<ZRef<CTownPortalPool::TOWNPORTAL>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_362B50
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	lea ecx,[esi+0x1C]
	mov dword ptr [esp+0x14],0
	call ZList<ZRef<CTownPortalPool::TOWNPORTAL>>::AddTail_
	mov edi,eax
	lea eax,[esp+0x1C]
	push eax
	mov ecx,edi
	call ZRef<CTownPortalPool::TOWNPORTAL>::op_assign_copy
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [ecx+4],edi
	mov eax,dword ptr [esp+0x20]
	lea edx,[esp+0x1C]
	push edx
	add eax,8
	push eax
	lea ecx,[esi+4]
	call ZMap<unsigned long, ZRef<CTownPortalPool::TOWNPORTAL>, unsigned long>::Insert
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CUISkillDec::OnButtonClicked
__SUB_CLASS_THIS(00452C80, __thiscall, 68557,  CUISkillDec, void, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	mov esi,ecx
	lea ecx,[eax-0x7DA]
	cmp ecx,3
	ja Block3

 Block1:
	add eax,0xFFFFF826
	push eax
	mov ecx,esi
	call CUISkillDec::OnSkillDecButton

 Block2:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x34]
	push 1
	mov ecx,esi
	call eax
	pop esi
	ret 4

 Block3:
	cmp eax,1
	je Block2

 Block4:
	cmp eax,2
	jne Block6

 Block5:
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x34]
	mov ecx,esi
	call eax
	pop esi
	ret 4

 Block6:
	cmp eax,8
	jne Block8

 Block7:
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x34]
	mov ecx,esi
	call eax

 Block8:
	pop esi
	ret 4
}
}
// CWvsContext::ShowPartySearch_Remocon_Layer
_SUB_EXCEPTION_HANDLER(5CFB40)
__SUB_CLASS_THIS(005CFB40, __thiscall, 8167,  CWvsContext, void, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5CFB40
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x48
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x5C]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov dword ptr [esp+0x14],ebp
	cmp dword ptr [esp+0x6C],0
	mov esi,dword ptr [ZImports::_VariantInit]
	jne Block37

 Block1:
	lea eax,[esp+0x2C]
	push eax
	call esi
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block3

 Block2:
	push eax
	call _com_issue_error

 Block3:
	cmp dword ptr [esp+0x70],0
	mov dword ptr [esp+0x64],0
	je Block5

 Block4:
	call get_update_time
	add eax,0x12C
	jmp Block6

 Block5:
	xor eax,eax

 Block6:
	mov edx,3
	mov word ptr [esp+0x1C],dx
	mov dword ptr [esp+0x24],eax
	mov ecx,dword ptr [ebp+0x37C4]
	mov bl,1
	mov byte ptr [esp+0x64],bl
	test ecx,ecx
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	lea eax,[esp+0x6C]
	push eax
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x64],2
	test ecx,ecx
	jne Block10

 Block9:
	push 0x80004003
	call _com_issue_error

 Block10:
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x20]
	push eax
	push 0
	push 0xFF
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x6C]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block12

 Block11:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block12:
	mov edi,8
	mov byte ptr [esp+0x64],0
	cmp word ptr [esp+0x1C],di
	jne Block15

 Block13:
	xor eax,eax
	mov word ptr [esp+0x1C],ax
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block16

 Block14:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block16

 Block15:
	lea ecx,[esp+0x1C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block16:
	mov dword ptr [esp+0x64],0xFFFFFFFF
	cmp word ptr [esp+0x2C],di
	jne Block19

 Block17:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block20

 Block18:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block20

 Block19:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block20:
	lea ecx,[esp+0x1C]
	push ecx
	call esi
	lea edx,[esp+0x1C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block22

 Block21:
	push eax
	call _com_issue_error

 Block22:
	lea eax,[esp+0x2C]
	push eax
	mov dword ptr [esp+0x68],3
	call esi
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block24

 Block23:
	push eax
	call _com_issue_error

 Block24:
	mov ecx,dword ptr [ebp+0x37C0]
	mov bl,4
	mov byte ptr [esp+0x64],bl
	test ecx,ecx
	jne Block26

 Block25:
	push 0x80004003
	call _com_issue_error

 Block26:
	lea edx,[esp+0x70]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x64],5
	test ecx,ecx
	jne Block28

 Block27:
	push 0x80004003
	call _com_issue_error

 Block28:
	lea eax,[esp+0x1C]
	push eax
	lea edx,[esp+0x30]
	push edx
	push 0
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x70]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block30

 Block29:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block30:
	mov byte ptr [esp+0x64],3
	cmp word ptr [esp+0x2C],di
	jne Block33

 Block31:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block34:
	mov dword ptr [esp+0x64],0xFFFFFFFF
	cmp word ptr [esp+0x1C],di
	jne Block36

 Block35:
	mov eax,dword ptr [esp+0x24]
	xor edx,edx
	mov word ptr [esp+0x1C],dx
	jmp Block72

 Block36:
	lea eax,[esp+0x1C]
	push eax
	call dword ptr [ZImports::_VariantClear]
	jmp Block75

 Block37:
	lea ecx,[esp+0x1C]
	push ecx
	call esi
	lea edx,[esp+0x1C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block39

 Block38:
	push eax
	call _com_issue_error

 Block39:
	cmp dword ptr [esp+0x70],0
	mov dword ptr [esp+0x64],6
	je Block41

 Block40:
	call get_update_time
	add eax,0x12C
	jmp Block42

 Block41:
	xor eax,eax

 Block42:
	mov ecx,3
	mov word ptr [esp+0x2C],cx
	mov dword ptr [esp+0x34],eax
	mov ecx,dword ptr [ebp+0x37C0]
	mov bl,7
	mov byte ptr [esp+0x64],bl
	test ecx,ecx
	jne Block44

 Block43:
	push 0x80004003
	call _com_issue_error

 Block44:
	lea edx,[esp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x64],8
	test ecx,ecx
	jne Block46

 Block45:
	push 0x80004003
	call _com_issue_error

 Block46:
	lea eax,[esp+0x1C]
	push eax
	lea edx,[esp+0x30]
	push edx
	push 0
	push 0xFF
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x6C]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block48

 Block47:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block48:
	mov ebp,dword ptr [ZImports::_VariantClear]
	mov edi,8
	mov byte ptr [esp+0x64],6
	cmp word ptr [esp+0x2C],di
	jne Block51

 Block49:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block52

 Block50:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block52

 Block51:
	lea ecx,[esp+0x2C]
	push ecx
	call ebp

 Block52:
	mov dword ptr [esp+0x64],0xFFFFFFFF
	cmp word ptr [esp+0x1C],di
	jne Block55

 Block53:
	mov eax,dword ptr [esp+0x24]
	xor edx,edx
	mov word ptr [esp+0x1C],dx
	test eax,eax
	je Block56

 Block54:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block56

 Block55:
	lea eax,[esp+0x1C]
	push eax
	call ebp

 Block56:
	lea ecx,[esp+0x4C]
	push ecx
	call esi
	lea edx,[esp+0x4C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block58

 Block57:
	push eax
	call _com_issue_error

 Block58:
	lea eax,[esp+0x3C]
	push eax
	mov dword ptr [esp+0x68],9
	call esi
	lea ecx,[esp+0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block60

 Block59:
	push eax
	call _com_issue_error

 Block60:
	mov edx,dword ptr [esp+0x14]
	mov ecx,dword ptr [edx+0x37C4]
	mov bl,0xA
	mov byte ptr [esp+0x64],bl
	test ecx,ecx
	jne Block62

 Block61:
	push 0x80004003
	call _com_issue_error

 Block62:
	lea eax,[esp+0x18]
	push eax
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x64],0xB
	test ecx,ecx
	jne Block64

 Block63:
	push 0x80004003
	call _com_issue_error

 Block64:
	lea edx,[esp+0x4C]
	push edx
	lea eax,[esp+0x40]
	push eax
	push 0
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block66

 Block65:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block66:
	mov byte ptr [esp+0x64],9
	cmp word ptr [esp+0x3C],di
	jne Block69

 Block67:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	test eax,eax
	je Block70

 Block68:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block70

 Block69:
	lea ecx,[esp+0x3C]
	push ecx
	call ebp

 Block70:
	mov dword ptr [esp+0x64],0xFFFFFFFF
	cmp word ptr [esp+0x4C],di
	jne Block74

 Block71:
	mov eax,dword ptr [esp+0x54]
	xor edx,edx
	mov word ptr [esp+0x4C],dx

 Block72:
	test eax,eax
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea eax,[esp+0x4C]
	push eax
	call ebp

 Block75:
	mov ecx,dword ptr [esp+0x5C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret 8
}
}
// CWvsContext::ShowPartySearch_Remocon_Searching
_SUB_EXCEPTION_HANDLER(5DA9A0)
__SUB_CLASS_THIS0(005DA9A0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DA9A0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x37BC],0
	jne Block7

 Block1:
	push 0x80
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+8],eax
	mov dword ptr [esp+0x14],0
	test eax,eax
	je Block3

 Block2:
	mov ecx,eax
	call CPartySearch_RemoCon::_ctor_default
	jmp Block4

 Block3:
	xor eax,eax

 Block4:
	push eax
	lea ecx,[esi+0x37B8]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZRef<CPartySearch_RemoCon>::op_assign_ptr
	push 1
	push 1
	mov ecx,esi
	call CWvsContext::ShowPartySearch_Remocon_Layer
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	test ecx,ecx
	je Block8

 Block5:
	cmp dword ptr [ecx+8],0
	je Block8

 Block6:
	push 0
	call CRadioManager::ShowUI
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	push 1
	call CRadioManager::ShowUI
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret

 Block7:
	push 0
	push 1
	call CWvsContext::ShowPartySearch_Remocon_Layer

 Block8:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::GetPartyMemberByName
_SUB_EXCEPTION_HANDLER(60B9F0)
__SUB_CLASS_THIS(0060B9F0, __thiscall, 8159,  CWvsContext, unsigned long, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_60B9F0
	mov eax,dword ptr fs:[0]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	xor edi,edi
	mov dword ptr [esp+0x1C],edi
	cmp dword ptr [ebx+0x37C8],edi
	jne Block2

 Block1:
	mov eax,dword ptr [esp+0x24]
	cmp eax,edi
	jmp Block13

 Block2:
	mov ebp,dword ptr [ebx+0x37D4]
	xor esi,esi

 Block3:
	test ebp,ebp
	jne Block5

 Block4:
	xor eax,eax
	jmp Block6

 Block5:
	mov eax,dword ptr [ebp-4]

 Block6:
	cmp esi,eax
	jge Block12

 Block7:
	mov eax,dword ptr [ebx+0x37D8]
	add eax,edi
	push eax
	lea ecx,[esp+0x28]
	call ZXString<char>::Compare
	test eax,eax
	je Block9

 Block8:
	inc esi
	add edi,0x25
	jmp Block3

 Block9:
	mov eax,dword ptr [esp+0x24]
	mov ecx,ebp
	mov esi,dword ptr [ecx+esi*4]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov eax,esi
	jmp Block16

 Block12:
	mov eax,dword ptr [esp+0x24]
	test eax,eax

 Block13:
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block15:
	xor eax,eax

 Block16:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC
	ret 4
}
}
// CWvsContext::SendSortItemRequest
_SUB_EXCEPTION_HANDLER(5D5C60)
__SUB_CLASS_THIS(005D5C60, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D5C60
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x2C]
	lea eax,[edi-1]
	cmp eax,4
	ja Block5

 Block1:
	cmp dword ptr [esi+0x20B8],0
	jne Block5

 Block2:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block5

 Block3:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block5

 Block4:
	push 0x4C
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0xC]
	push edx
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x10]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block5:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 4
}
}
// CWvsContext::ShowPartySearch_Remocon_Holding
_SUB_EXCEPTION_HANDLER(5DAA70)
__SUB_CLASS_THIS0(005DAA70, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DAA70
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x37BC],0
	jne Block7

 Block1:
	push 0x80
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+8],eax
	mov dword ptr [esp+0x14],0
	test eax,eax
	je Block3

 Block2:
	mov ecx,eax
	call CPartySearch_RemoCon::_ctor_default
	jmp Block4

 Block3:
	xor eax,eax

 Block4:
	push eax
	lea ecx,[esi+0x37B8]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZRef<CPartySearch_RemoCon>::op_assign_ptr
	push 1
	push 0
	mov ecx,esi
	call CWvsContext::ShowPartySearch_Remocon_Layer
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	test ecx,ecx
	je Block8

 Block5:
	cmp dword ptr [ecx+8],0
	je Block8

 Block6:
	push 0
	call CRadioManager::ShowUI
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	push 1
	call CRadioManager::ShowUI
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret

 Block7:
	push 0
	push 0
	call CWvsContext::ShowPartySearch_Remocon_Layer

 Block8:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::OnSessionValue
_SUB_EXCEPTION_HANDLER(5E41B0)
__SUB_CLASS_THIS(005E41B0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E41B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov dword ptr [esp+0x24],ebp
	xor ebx,ebx
	mov dword ptr [esp+0x1C],ebx
	mov esi,dword ptr [esp+0x40]
	lea eax,[esp+0x18]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x3C],ebx
	call CInPacket::DecodeStr
	lea edx,[esp+0x40]
	push 0x11D9
	push edx
	mov byte ptr [esp+0x40],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebx
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	cmp esi,ebx
	je Block4

 Block3:
	mov eax,dword ptr [esp+0x14]
	push eax
	call _atoi
	add esp,4
	mov dword ptr [ebp+0x40D0],eax
	jmp Block44

 Block4:
	lea ecx,[esp+0x40]
	push 0x14F2
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebx
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	cmp esi,ebx
	je Block8

 Block7:
	mov edx,dword ptr [esp+0x14]
	push edx
	call _atoi
	add esp,4
	mov dword ptr [ebp+0x4174],eax
	jmp Block44

 Block8:
	lea eax,[esp+0x40]
	push 0x14F4
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebx
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	cmp esi,ebx
	je Block12

 Block11:
	mov ecx,dword ptr [esp+0x14]
	push ecx
	call _atoi
	add esp,4
	mov dword ptr [ebp+0x4178],eax
	jmp Block44

 Block12:
	lea edx,[esp+0x40]
	push 0x14F1
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebx
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	cmp esi,ebx
	je Block19

 Block15:
	mov eax,dword ptr [esp+0x14]
	push eax
	call _atoi
	add esp,4
	cmp dword ptr [ebp+0x417C],eax
	mov dword ptr [esp+0x40],eax
	jge Block18

 Block16:
	mov edi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp edi,ebx
	je Block18

 Block17:
	mov edx,dword ptr [edi+4]
	mov edx,dword ptr [edx+0x10]
	mov ebp,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	lea esi,[edi+4]
	lea eax,[esp+0x28]
	push eax
	mov ecx,esi
	call edx
	lea ebx,[eax+4]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	call edx
	lea ecx,[edi+0x88]
	mov esi,eax
	call CAvatar::GetHeight
	mov ecx,dword ptr [ebx]
	mov edx,dword ptr [esi]
	sub ecx,eax
	push ecx
	push edx
	mov ecx,ebp
	call CAnimationDisplayer::Effect_Cool
	mov ebp,dword ptr [esp+0x24]
	mov eax,dword ptr [esp+0x40]

 Block18:
	mov dword ptr [ebp+0x417C],eax
	jmp Block44

 Block19:
	lea eax,[esp+0x40]
	push 0x14F6
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebx
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block21:
	cmp esi,ebx
	je Block27

 Block22:
	mov ecx,dword ptr [esp+0x14]
	push ecx
	call _atoi
	mov esi,eax
	add esp,4
	cmp dword ptr [ebp+0x4180],esi
	jge Block26

 Block23:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp ecx,ebx
	je Block26

 Block24:
	push 0xC00614A4
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	mov dword ptr [eax],ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push edx
	mov byte ptr [esp+0x50],2
	call CUser::GetVecCtrl_0
	lea eax,[esp+0x54]
	push 0x14E4
	push eax
	mov byte ptr [esp+0x54],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x4C],4
	push ebx
	mov byte ptr [esp+0x50],5
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	call CAnimationDisplayer::Effect_General
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0x38],1
	cmp eax,ebx
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block26:
	mov dword ptr [ebp+0x4180],esi
	jmp Block44

 Block27:
	lea ecx,[esp+0x28]
	push 0x156A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebx,1
	push eax
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x3C],6
	mov dword ptr [esp+0x20],ebx
	call ZXString<char>::op_eq_0
	test eax,eax
	jne Block29

 Block28:
	lea edx,[esp+0x24]
	push 0x174C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x1C]
	mov ebx,3
	call ZXString<char>::op_eq_0
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block30

 Block29:
	mov byte ptr [esp+0x40],1

 Block30:
	test bl,2
	je Block33

 Block31:
	mov eax,dword ptr [esp+0x24]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x1C],ebx
	test eax,eax
	je Block33

 Block32:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block33:
	mov dword ptr [esp+0x38],1
	test bl,1
	je Block36

 Block34:
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block36

 Block35:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block36:
	cmp byte ptr [esp+0x40],0
	je Block44

 Block37:
	lea eax,[esp+0x40]
	push 0x1ACD
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x40]
	test eax,eax
	je Block39

 Block38:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block39:
	test esi,esi
	je Block41

 Block40:
	mov dword ptr [ebp+0x4184],0
	jmp Block44

 Block41:
	lea ecx,[esp+0x40]
	push 0x1AA2
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::op_eq_0
	mov esi,eax
	mov eax,dword ptr [esp+0x40]
	test eax,eax
	je Block43

 Block42:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block43:
	neg esi
	sbb esi,esi
	and esi,0xFFFFFF02
	add esi,0xFF
	mov dword ptr [ebp+0x4184],esi

 Block44:
	mov eax,dword ptr [ebp+0x41A0]
	lea esi,[ebp+0x41A0]
	test eax,eax
	je Block53

 Block45:
	cmp byte ptr [eax],0
	je Block53

 Block46:
	lea edx,[esp+0x18]
	push edx
	mov ecx,esi
	call ZXString<char>::op_eq_0
	test eax,eax
	je Block53

 Block47:
	lea eax,[esp+0x14]
	lea edi,[ebp+0x41A4]
	push eax
	mov ecx,edi
	call ZXString<char>::op_eq_0
	test eax,eax
	je Block53

 Block48:
	fld qword ptr [ebp+0x41B0]
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	sub esp,0x10
	fstp qword ptr [esp+8]
	fld qword ptr [ebp+0x41A8]
	fstp qword ptr [esp]
	call CUserLocal::OnCollisionCustomImpact
	mov eax,dword ptr [esi]
	test eax,eax
	je Block50

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esi],0

 Block50:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block52

 Block51:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [edi],0

 Block52:
	fldz
	fst qword ptr [ebp+0x41B0]
	fstp qword ptr [ebp+0x41A8]

 Block53:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block55

 Block54:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block56

 Block55:
	xor esi,esi

 Block56:
	push ecx
	mov ecx,esp
	lea edx,[esp+0x18]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea eax,[esp+0x20]
	mov dword ptr [esp+0x2C],esp
	push eax
	mov byte ptr [esp+0x44],7
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x24]
	mov ecx,esi
	mov byte ptr [esp+0x40],1
	call edx
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x38],0
	test eax,eax
	je Block58

 Block57:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block58:
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	test eax,eax
	je Block60

 Block59:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block60:
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x28
	ret 4
}
}
// CWvsContext::OnBonusExpRateChanged
_SUB_EXCEPTION_HANDLER(5DF170)
__SUB_CLASS_THIS(005DF170, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DF170
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov esi,dword ptr [esp+0x34]
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov edi,eax
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [esp+0x14],eax
	call CInPacket::Decode4
	mov ebp,eax
	cmp edi,0x3B
	ja Block12

 Block1:
	test ebp,ebp
	je Block12

 Block2:
	lea eax,[esp+0x1C]
	push eax
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov esi,dword ptr [eax+edi*8+0xFD]
	lea ecx,[esp+0x1C]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	xor ebx,ebx
	cmp esi,ebx
	je Block12

 Block3:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov esi,eax
	cmp esi,ebx
	je Block12

 Block4:
	mov ecx,esi
	call CItemInfo::EQUIPITEM::IsBonusExpItem
	test eax,eax
	je Block12

 Block5:
	mov dword ptr [esp+0x34],ebx
	mov edi,dword ptr [esp+0x14]
	mov dword ptr [esp+0x2C],ebx
	cmp edi,ebx
	jne Block7

 Block6:
	lea ecx,[esp+0x14]
	push 0x11E9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [eax]
	push ebp
	push edx
	push eax
	lea eax,[esp+0x40]
	push eax
	mov byte ptr [esp+0x3C],1
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0x10
	jmp Block8

 Block7:
	lea ecx,[esp+0x18]
	push 0x11EA
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [eax]
	push ebp
	push edi
	push edx
	push eax
	lea eax,[esp+0x44]
	push eax
	mov byte ptr [esp+0x40],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0x14

 Block8:
	mov byte ptr [esp+0x2C],0
	cmp eax,ebx
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	lea ecx,[esp+0x34]
	push 0xC
	push ecx
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x3C]
	add esp,8
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	cmp eax,ebx
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block12:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CWvsContext::RemoveSkillCooltimeOver
__SUB_CLASS_THIS(005CCF80, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	cmp dword ptr [esp+4],0x4FAE6F
	push esi
	mov esi,ecx
	jne Block2

 Block1:
	push 0x4FAA8E
	push 2
	lea ecx,[esi+0x35D4]
	call CTemporaryStatView::ResetTemporary_0

 Block2:
	lea eax,[esp+8]
	push eax
	lea ecx,[esi+0x3FB4]
	call ZMap<long, long, long>::RemoveKey
	pop esi
	ret 4
}
}
// CWvsContext::OpenRaise
__SUB_CLASS_THIS(005CCEF0, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0x406510
	jne Block2

 Block1:
	mov ecx,dword ptr [TSingleton<CCakePieEvent>::ms_pInstance]
	call CCakePieEvent::OpenUI_ItemInfo
	ret 4

 Block2:
	mov ecx,dword ptr [ecx+0x3EAC]
	mov dword ptr [esp+4],eax
	jmp  CUIRaiseManager::OpenWindow
}
}
// CWvsContext::GetGender
__SUB_CLASS_THIS0(0012B0E0, __thiscall, 8107,  CWvsContext, long) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x20CC]
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [eax+0x35]
	push ecx
	add eax,0x33
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	movzx eax,al
	ret

 Block2:
	xor eax,eax
	ret
}
}
// CWvsContext::UI_Open
_SUB_EXCEPTION_HANDLER(5D83F0)
// 9D8E98
static uint8_t _SUB_5D83F0_LOOKUP_TABLE_0[43] = {
0, 1, 2, 3, 24, 4, 5, 24, 24, 24, 6, 24, 24, 24, 24, 24, 
24, 7, 24, 8, 24, 9, 10, 24, 24, 11, 12, 13, 14, 15, 16, 17, 
18, 24, 24, 19, 24, 24, 24, 20, 21, 22, 23, 
};
__SUB_CLASS_THIS(005D83F0, __thiscall, 8086,  CWvsContext, void, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D83F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	mov dword ptr [esp+0x18],ebx
	mov edi,dword ptr [_D_G_PSTAGE+4]
	mov ebp,dword ptr [esp+0x38]
	test edi,edi
	je Block4

 Block1:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block4

 Block2:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,edi
	call edx
	cmp eax,0x16
	jne Block4

 Block3:
	cmp ebp,6
	jne Block152

 Block4:
	cmp ebp,3
	jne Block8

 Block5:
	lea eax,[esp+0x1C]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [eax+0x3D]
	push ecx
	add eax,0x39
	mov ebx,1
	push eax
	mov dword ptr [esp+0x38],0
	mov dword ptr [esp+0x20],ebx
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esp,8
	cmp eax,0x16
	je Block7

 Block6:
	cmp ecx,0x7D1
	jne Block8

 Block7:
	mov byte ptr [esp+0x17],bl
	jmp Block9

 Block8:
	mov byte ptr [esp+0x17],0

 Block9:
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test bl,1
	je Block14

 Block10:
	mov eax,dword ptr [esp+0x20]
	and ebx,0xFFFFFFFE
	mov dword ptr [esp+0x18],ebx
	test eax,eax
	je Block14

 Block11:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block14

 Block12:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block14

 Block13:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block14:
	cmp byte ptr [esp+0x17],0
	je Block16

 Block15:
	mov eax,0x20
	jmp Block17

 Block16:
	mov eax,dword ptr [esp+0x38]
	cmp eax,0x2A
	ja Block150

 Block17:
	movzx ecx,byte ptr [eax+_SUB_5D83F0_LOOKUP_TABLE_0]
	cmp ECX, 0
je Block18
cmp ECX, 1
je Block23
cmp ECX, 2
je Block28
cmp ECX, 3
je Block33
cmp ECX, 4
je Block43
cmp ECX, 5
je Block48
cmp ECX, 6
je Block58
cmp ECX, 7
je Block63
cmp ECX, 8
je Block68
cmp ECX, 9
je Block78
cmp ECX, 10
je Block90
cmp ECX, 11
je Block95
cmp ECX, 12
je Block104
cmp ECX, 13
je Block109
cmp ECX, 14
je Block114
cmp ECX, 15
je Block119
cmp ECX, 16
je Block53
cmp ECX, 17
je Block124
cmp ECX, 18
je Block38
cmp ECX, 19
je Block73
cmp ECX, 20
je Block130
cmp ECX, 21
je Block135
cmp ECX, 22
je Block145
cmp ECX, 23
je Block125
cmp ECX, 24
je Block150


 Block18:
	cmp dword ptr [esi+0x3E34],0
	jne Block150

 Block19:
	push 0xB88
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],1
	test eax,eax
	je Block21

 Block20:
	mov ecx,eax
	call CUIItem::_ctor_default
	jmp Block22

 Block21:
	xor eax,eax

 Block22:
	push eax
	lea ecx,[esi+0x3E30]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIItem>::op_assign_ptr
	jmp Block150

 Block23:
	cmp dword ptr [esi+0x3E3C],0
	jne Block150

 Block24:
	push 0xB5C
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],2
	test eax,eax
	je Block26

 Block25:
	mov ecx,eax
	call CUIEquip::_ctor_default
	jmp Block27

 Block26:
	xor eax,eax

 Block27:
	push eax
	lea ecx,[esi+0x3E38]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIEquip>::op_assign_ptr
	jmp Block150

 Block28:
	cmp dword ptr [esi+0x3E44],0
	jne Block150

 Block29:
	push 0xBC0
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],3
	test eax,eax
	je Block31

 Block30:
	push 0
	mov ecx,eax
	call CUIStat::_ctor_0
	jmp Block32

 Block31:
	xor eax,eax

 Block32:
	push eax
	lea ecx,[esi+0x3E40]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIStat>::op_assign_ptr
	jmp Block150

 Block33:
	cmp dword ptr [esi+0x3E4C],0
	jne Block150

 Block34:
	push 0xBE0
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x38],eax
	mov dword ptr [esp+0x30],4
	test eax,eax
	je Block36

 Block35:
	mov edx,dword ptr [esp+0x3C]
	push edx
	push 0
	mov ecx,eax
	call CUISkill::_ctor_0
	jmp Block37

 Block36:
	xor eax,eax

 Block37:
	push eax
	lea ecx,[esi+0x3E48]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUISkill>::op_assign_ptr
	jmp Block150

 Block38:
	cmp dword ptr [esi+0x3E54],0
	jne Block150

 Block39:
	push 0xBB8
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x38],eax
	mov dword ptr [esp+0x30],5
	test eax,eax
	je Block41

 Block40:
	mov ecx,dword ptr [esp+0x3C]
	push ecx
	push 0
	mov ecx,eax
	call CUISkillEx::_ctor_0
	jmp Block42

 Block41:
	xor eax,eax

 Block42:
	push eax
	lea ecx,[esi+0x3E50]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUISkillEx>::op_assign_ptr
	jmp Block150

 Block43:
	cmp dword ptr [esi+0x3E5C],0
	jne Block150

 Block44:
	push 0x11E8
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],6
	test eax,eax
	je Block46

 Block45:
	mov ecx,eax
	call CUIKeyConfig::_ctor_default
	jmp Block47

 Block46:
	xor eax,eax

 Block47:
	push eax
	lea ecx,[esi+0x3E58]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIKeyConfig>::op_assign_ptr
	jmp Block150

 Block48:
	cmp dword ptr [esi+0x3E6C],0
	jne Block150

 Block49:
	push 0xBD0
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x38],eax
	mov dword ptr [esp+0x30],7
	test eax,eax
	je Block51

 Block50:
	mov edx,dword ptr [esp+0x3C]
	push edx
	mov ecx,eax
	call CUIQuestInfo::_ctor_0
	jmp Block52

 Block51:
	xor eax,eax

 Block52:
	push eax
	lea ecx,[esi+0x3E68]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIQuestInfo>::op_assign_ptr
	jmp Block150

 Block53:
	cmp dword ptr [esi+0x3E74],0
	jne Block150

 Block54:
	push 0x1604
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],8
	test eax,eax
	je Block56

 Block55:
	push 0xFFFFFFFF
	mov ecx,eax
	call CUIMedalQuestInfo::_ctor_0
	jmp Block57

 Block56:
	xor eax,eax

 Block57:
	push eax
	lea ecx,[esi+0x3E70]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIMedalQuestInfo>::op_assign_ptr
	jmp Block150

 Block58:
	cmp dword ptr [esi+0x3E7C],0
	jne Block150

 Block59:
	push 0x16AC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],9
	test eax,eax
	je Block61

 Block60:
	mov ecx,eax
	call CUIUserInfo::_ctor_default
	jmp Block62

 Block61:
	xor eax,eax

 Block62:
	push eax
	lea ecx,[esi+0x3E78]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIUserInfo>::op_assign_ptr
	jmp Block150

 Block63:
	cmp dword ptr [esi+0x3E9C],0
	jne Block150

 Block64:
	push 0x15FC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0xA
	test eax,eax
	je Block66

 Block65:
	mov ecx,eax
	call CUIMonsterCarnival::_ctor_default
	jmp Block67

 Block66:
	xor eax,eax

 Block67:
	push eax
	lea ecx,[esi+0x3E98]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIMonsterCarnival>::op_assign_ptr
	jmp Block150

 Block68:
	cmp dword ptr [esi+0x3EA4],0
	jne Block150

 Block69:
	push 0xB10
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0xB
	test eax,eax
	je Block71

 Block70:
	mov ecx,eax
	call CUIEnergyBar::_ctor_default
	jmp Block72

 Block71:
	xor eax,eax

 Block72:
	push eax
	lea ecx,[esi+0x3EA0]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIEnergyBar>::op_assign_ptr
	jmp Block150

 Block73:
	cmp dword ptr [esi+0x3F04],0
	jne Block150

 Block74:
	push 0x15C8
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0xC
	test eax,eax
	je Block76

 Block75:
	mov ecx,eax
	call CUIBattleRecord::_ctor_default
	jmp Block77

 Block76:
	xor eax,eax

 Block77:
	push eax
	lea ecx,[esi+0x3F00]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIBattleRecord>::op_assign_ptr
	jmp Block150

 Block78:
	cmp dword ptr [esi+0x3EBC],0
	jne Block150

 Block79:
	cmp dword ptr [esi+0x3E64],0
	push 0xB1C
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	je Block86

 Block80:
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x1C],eax
	mov dword ptr [esp+0x30],0xD
	test eax,eax
	je Block82

 Block81:
	mov ecx,dword ptr [esi+0x3E64]
	lea eax,[esp+0x24]
	push eax
	lea edi,[ecx+4]
	lea ebp,[ecx+4]
	call CWnd::GetLayer
	mov dword ptr [esp+0x38],eax
	mov ecx,dword ptr [esp+0x3C]
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x30]
	push ecx
	or ebx,2
	mov ecx,edi
	mov byte ptr [esp+0x34],0xE
	mov dword ptr [esp+0x1C],ebx
	call eax
	mov ecx,dword ptr [esp+0x3C]
	push eax
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getwidth
	mov edx,dword ptr [ebp]
	mov edi,eax
	mov eax,dword ptr [edx+0x2C]
	mov ecx,ebp
	call eax
	mov ecx,dword ptr [esp+0x24]
	add edi,eax
	push edi
	call CUIPartySearch::_ctor_0
	jmp Block83

 Block82:
	xor eax,eax

 Block83:
	push eax
	lea ecx,[esi+0x3EB8]
	mov dword ptr [esp+0x34],0xF
	call ZRef<CUIPartySearch>::op_assign_ptr
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test bl,2
	je Block150

 Block84:
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block150

 Block85:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx
	jmp Block150

 Block86:
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x38],eax
	mov dword ptr [esp+0x30],0x10
	test eax,eax
	je Block88

 Block87:
	mov ecx,dword ptr [esp+0x3C]
	push ecx
	mov ecx,eax
	call CUIPartySearch::_ctor_1
	jmp Block89

 Block88:
	xor eax,eax

 Block89:
	push eax
	lea ecx,[esi+0x3EB8]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIPartySearch>::op_assign_ptr
	jmp Block150

 Block90:
	cmp dword ptr [esi+0x3EC4],0
	jne Block150

 Block91:
	push 0x17EC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x11
	test eax,eax
	je Block93

 Block92:
	mov ecx,eax
	call CUIItemMaker::_ctor_default
	jmp Block94

 Block93:
	xor eax,eax

 Block94:
	push eax
	lea ecx,[esi+0x3EC0]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIItemMaker>::op_assign_ptr
	jmp Block150

 Block95:
	lea edx,[esp+0x1C]
	push edx
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [esp+0x20]
	mov ebx,0x12
	mov ecx,edi
	mov dword ptr [esp+0x30],ebx
	call GW_CharacterStat::_ZtlSecureGet_nJob
	cwde
	push eax
	call is_beginner_job
	add esp,4
	test eax,eax
	je Block99

 Block96:
	mov ecx,edi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	cmp al,0xA
	jae Block99

 Block97:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x50],esp
	push 0x1252
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block98:
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	call ZRef<CharacterData>::~ZRef<CharacterData>
	jmp Block150

 Block99:
	cmp dword ptr [esi+0x3ECC],0
	jne Block98

 Block100:
	push 0xB90
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov byte ptr [esp+0x30],0x13
	test eax,eax
	je Block102

 Block101:
	mov ecx,eax
	call CUIRanking::_ctor_default
	jmp Block103

 Block102:
	xor eax,eax

 Block103:
	push eax
	lea ecx,[esi+0x3EC8]
	mov byte ptr [esp+0x34],bl
	call ZRef<CUIRanking>::op_assign_ptr
	jmp Block98

 Block104:
	cmp dword ptr [esi+0x3ED4],0
	jne Block150

 Block105:
	push 0x1590
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x14
	test eax,eax
	je Block107

 Block106:
	lea ecx,[esi+0x40EC]
	push ecx
	lea edx,[esi+0x40D4]
	push edx
	mov ecx,eax
	call CUIFamily::_ctor_0
	jmp Block108

 Block107:
	xor eax,eax

 Block108:
	push eax
	lea ecx,[esi+0x3ED0]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIFamily>::op_assign_ptr
	jmp Block150

 Block109:
	cmp dword ptr [esi+0x3EDC],0
	jne Block150

 Block110:
	push 0x1608
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x15
	test eax,eax
	je Block112

 Block111:
	mov ecx,eax
	call CUIFamilyChart::_ctor_default
	jmp Block113

 Block112:
	xor eax,eax

 Block113:
	push eax
	lea ecx,[esi+0x3ED8]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIFamilyChart>::op_assign_ptr
	jmp Block150

 Block114:
	cmp dword ptr [esi+0x3EE4],0
	jne Block150

 Block115:
	push 0xB98
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x16
	test eax,eax
	je Block117

 Block116:
	mov ecx,eax
	call CUIOperatorBoard::_ctor_default
	jmp Block118

 Block117:
	xor eax,eax

 Block118:
	push eax
	lea ecx,[esi+0x3EE0]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIOperatorBoard>::op_assign_ptr
	mov eax,dword ptr [esi+0x3EFC]
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov dword ptr [ecx+0x64],eax
	jmp Block150

 Block119:
	cmp dword ptr [esi+0x3EEC],0
	jne Block150

 Block120:
	push 0xB0C
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x17
	test eax,eax
	je Block122

 Block121:
	mov ecx,eax
	call CUIOpBoardState::_ctor_default
	jmp Block123

 Block122:
	xor eax,eax

 Block123:
	push eax
	lea ecx,[esi+0x3EE8]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIOpBoardState>::op_assign_ptr
	mov byte ptr [esi+0x3EF8],1
	jmp Block150

 Block124:
	call TSingleton<CUIWebEvent>::CreateInstance
	jmp Block150

 Block125:
	cmp dword ptr [esi+0x3EF4],0
	jne Block150

 Block126:
	push 0xB20
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x18
	test eax,eax
	je Block128

 Block127:
	mov ecx,eax
	call CUIDragonBox::_ctor_default
	jmp Block129

 Block128:
	xor eax,eax

 Block129:
	push eax
	lea ecx,[esi+0x3EF0]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIDragonBox>::op_assign_ptr
	jmp Block150

 Block130:
	cmp dword ptr [esi+0x3E8C],0
	jne Block150

 Block131:
	push 0xC08
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x19
	test eax,eax
	je Block133

 Block132:
	mov ecx,eax
	call CUIGuildBBS::_ctor_default
	jmp Block134

 Block133:
	xor eax,eax

 Block134:
	push eax
	lea ecx,[esi+0x3E88]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIGuildBBS>::op_assign_ptr
	jmp Block150

 Block135:
	cmp dword ptr [esi+0x3F10],0
	jne Block150

 Block136:
	push 0xC04
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x1A
	test eax,eax
	je Block138

 Block137:
	mov ecx,eax
	call CUIAccountMoreInfo::_ctor_default
	jmp Block139

 Block138:
	xor eax,eax

 Block139:
	push eax
	lea ecx,[esi+0x3F0C]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIAccountMoreInfo>::op_assign_ptr
	mov eax,dword ptr [esi+0x3F10]
	test eax,eax
	je Block141

 Block140:
	add eax,4
	jmp Block142

 Block141:
	xor eax,eax

 Block142:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push eax
	call CWndMan::SetCaptureWnd
	mov esi,dword ptr [esi+0x3F10]
	test esi,esi
	je Block144

 Block143:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	add esi,4
	push esi
	call CWndMan::SetFocus
	jmp Block150

 Block144:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	xor esi,esi
	push esi
	call CWndMan::SetFocus
	jmp Block150

 Block145:
	cmp dword ptr [esi+0x3F18],0
	jne Block150

 Block146:
	push 0xB64
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],0x1B
	test eax,eax
	je Block148

 Block147:
	mov ecx,eax
	call CUIFindFriend::_ctor_default
	jmp Block149

 Block148:
	xor eax,eax

 Block149:
	push eax
	lea ecx,[esi+0x3F14]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUIFindFriend>::op_assign_ptr

 Block150:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test ecx,ecx
	je Block152

 Block151:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x28]
	push 0xFFFFFFFF
	push 3
	call eax

 Block152:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 8
}
}
// CWvsContext::GetFriendByName
_SUB_EXCEPTION_HANDLER(612260)
__SUB_CLASS_THIS(00612260, __thiscall, 8198,  CWvsContext, void, NakedParam<ZXString<char>>, GW_Friend*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_612260
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	push 0
	push 0
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x1C],0
	call ZXString<char>::TrimRight
	mov ecx,eax
	call ZXString<char>::TrimLeft
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block6

 Block1:
	cmp byte ptr [eax],0
	je Block6

 Block2:
	mov edi,dword ptr [esp+0x20]
	test edi,edi
	je Block6

 Block3:
	push ecx
	mov ecx,esp
	lea eax,[esp+0x20]
	mov dword ptr [esp+0x24],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esi+0x3788]
	call CWvsContext::CFriend::FindIndex_1
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	jge Block5

 Block4:
	mov eax,dword ptr [esp+0x1C]
	jmp Block7

 Block5:
	mov ecx,dword ptr [esi+0x3788]
	mov esi,eax
	imul esi,0x27
	add esi,dword ptr [ecx]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,9
	rep movsd
	movsw
	movsb
	jmp Block7

 Block6:
	mov dword ptr [esp+0x14],0xFFFFFFFF

 Block7:
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CWvsContext::OnHourChanged
__SUB_CLASS_THIS(005CFAA0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,dword ptr [esp+8]
	push edi
	mov ecx,esi
	call CInPacket::Decode2
	mov ecx,esi
	movzx edi,ax
	call CInPacket::Decode2
	mov eax,1
	// TODO: 	test byte ptr [`TSimpleSingleton<CDayOfWeek>::GetInstance'::`2'::`local static guard'{2}],al
	jne Block2

 Block1:
	// TODO: 	or dword ptr [`TSimpleSingleton<CDayOfWeek>::GetInstance'::`2'::`local static guard'{2}],eax
	xor eax,eax
	// TODO: 	push offset `dynamic atexit destructor for '`TSimpleSingleton<CDayOfWeek>::GetInstance'::`2'::singleton''
	int 3// TODO: 	mov dword ptr [_D_SINGLETON__1],offset CDayOfWeek::`vftable'
	mov dword ptr [_D_SINGLETON__1+4],eax
	mov dword ptr [_D_SINGLETON__1+8],eax
	call _atexit
	add esp,4

 Block2:
	push edi
	mov ecx,offset _D_SINGLETON__1
	call CDayOfWeek::SetCurrentDay
	pop edi
	pop esi
	ret 4
}
}
// CWvsContext::OnAccountMoreInfo
__SUB_CLASS_THIS(005DBE50, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov esi,ecx
	mov ecx,edi
	call CInPacket::Decode1
	movzx eax,al
	sub eax,0
	je Block7

 Block1:
	sub eax,2
	je Block5

 Block2:
	sub eax,2
	jne Block9

 Block3:
	mov ecx,dword ptr [TSingleton<CUIAccountMoreInfo>::ms_pInstance]
	test ecx,ecx
	je Block9

 Block4:
	push edi
	call CUIAccountMoreInfo::OnSaveAccountMoreInfoResult
	pop edi
	pop esi
	ret 4

 Block5:
	mov ecx,dword ptr [TSingleton<CUIAccountMoreInfo>::ms_pInstance]
	test ecx,ecx
	je Block9

 Block6:
	push edi
	call CUIAccountMoreInfo::OnLoadAccountMoreInfoResult
	pop edi
	pop esi
	ret 4

 Block7:
	push 0xFFFFFFFF
	push 0x28
	mov ecx,esi
	call CWvsContext::UI_Open
	mov eax,dword ptr [TSingleton<CUIAccountMoreInfo>::ms_pInstance]
	test eax,eax
	je Block9

 Block8:
	mov dword ptr [eax+0xC00],1

 Block9:
	pop edi
	pop esi
	ret 4
}
}
// CWvsContext::OnLogoutGift
__SUB_CLASS_THIS(005CCCB0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CUILogoutGift>::ms_pInstance]
	test ecx,ecx
	je Block2

 Block1:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	mov dword ptr [esp+4],1
	jmp edx

 Block2:
	ret 4
}
}
// CWvsContext::ResetAutoQuest
__SUB_CLASS_THIS0(005E8CE0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	sub esp,0x18
	cmp dword ptr [TSingleton<CUserLocal>::ms_pInstance],0
	push esi
	mov esi,ecx
	je Block38

 Block1:
	push ebx
	push ebp
	push edi
	lea ecx,[esi+0x3FF8]
	call ZMap<unsigned short, int, unsigned short>::RemoveAll
	xor edi,edi
	jmp Block3

 Block3:
	mov eax,dword ptr [esi+0x20CC]
	mov eax,dword ptr [eax+edi+0xFD]
	test eax,eax
	je Block5

 Block4:
	push 0
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	push eax
	mov ecx,esi
	call CWvsContext::CheckEquipOnAutoStartQuest

 Block5:
	mov ecx,dword ptr [esi+0x20CC]
	mov eax,dword ptr [ecx+edi+0x2DD]
	test eax,eax
	je Block7

 Block6:
	push 0
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	push eax
	mov ecx,esi
	call CWvsContext::CheckEquipOnAutoStartQuest

 Block7:
	add edi,8
	cmp edi,0x1D8
	jle Block3

 Block8:
	xor edi,edi
	jmp Block10

 Block10:
	mov edx,dword ptr [esi+0x20CC]
	mov eax,dword ptr [edx+edi+0x4BD]
	test eax,eax
	je Block12

 Block11:
	push 0
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	push eax
	mov ecx,esi
	call CWvsContext::CheckEquipOnAutoStartQuest

 Block12:
	add edi,8
	cmp edi,0x20
	jl Block10

 Block13:
	xor edi,edi
	lea ecx,[ecx]

 Block14:
	mov eax,dword ptr [esi+0x20CC]
	mov eax,dword ptr [eax+edi+0x4DD]
	test eax,eax
	je Block16

 Block15:
	push 0
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	push eax
	mov ecx,esi
	call CWvsContext::CheckEquipOnAutoStartQuest

 Block16:
	add edi,8
	cmp edi,0x28
	jl Block14

 Block17:
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [esp+0x24]
	mov ebp,dword ptr [eax+4]
	mov dword ptr [esp+0x14],ebp
	test edi,edi
	je Block22

 Block18:
	add edi,0xFFFFFFF0
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block21

 Block19:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block21

 Block20:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block21:
	mov dword ptr [esp+0x24],0

 Block22:
	add ebp,0x505
	mov dword ptr [esp+0x10],5

 Block23:
	mov eax,dword ptr [ebp]
	test eax,eax
	je Block25

 Block24:
	mov eax,dword ptr [eax-4]

 Block25:
	lea ebx,[eax-1]
	mov edi,1
	cmp ebx,edi
	jl Block31

 Block26:
	jmp Block28

 Block28:
	mov ecx,dword ptr [ebp]
	mov eax,dword ptr [ecx+edi*8+4]
	test eax,eax
	je Block30

 Block29:
	push 0
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	push eax
	mov ecx,esi
	call CWvsContext::CheckInventoryOnAutoStartQuest

 Block30:
	inc edi
	cmp edi,ebx
	jle Block28

 Block31:
	add ebp,4
	sub dword ptr [esp+0x10],1
	jne Block23

 Block32:
	mov ecx,esi
	call CWvsContext::GetCurFieldID
	push eax
	mov ecx,esi
	call CWvsContext::CheckFieldOnAutoStartQuest
	push 0
	mov ecx,esi
	call CWvsContext::CheckNormalAutoStartQuest
	lea ebp,[esi+0x4028]
	mov ecx,ebp
	call ZMap<unsigned short, int, unsigned short>::RemoveAll
	mov edi,dword ptr [esp+0x14]
	mov edx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	add edi,0x6F5
	mov ecx,edi
	mov dword ptr [esp+0x18],edx
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetHeadPosition
	mov dword ptr [esp+0x10],eax
	test eax,eax
	je Block37

 Block33:
	push 0
	lea eax,[esp+0x14]
	push eax
	mov ecx,edi
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetNext
	movzx ebx,word ptr [eax]
	movzx ecx,bx
	lea edx,[esp+0x14]
	mov dword ptr [esp+0x14],ecx
	push edx
	mov ecx,edi
	mov dword ptr [esp+0x20],ebx
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetPos
	test eax,eax
	je Block36

 Block34:
	mov ecx,dword ptr [esp+0x18]
	push ebx
	call CQuestMan::IsAutoCompleteQuest
	test eax,eax
	je Block36

 Block35:
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x1C],1
	call ZMap<unsigned short, int, unsigned short>::Insert

 Block36:
	cmp dword ptr [esp+0x10],0
	jne Block33

 Block37:
	pop edi
	pop ebp
	pop ebx
	mov ecx,esi
	pop esi
	add esp,0x18
	jmp  CWvsContext::UpdateAutoQuestAlertIcon

 Block38:
	pop esi
	add esp,0x18
	ret
}
}
// CUIStatChange::IsUnderMinMP
// 869608
static uint8_t _SUB_469130_LOOKUP_TABLE_0[104] = {
0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 2, 141, 73, 0, 
};
// 86968C
static uint8_t _SUB_469130_LOOKUP_TABLE_1[216] = {
0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 6, 6, 6, 
6, 6, 6, 6, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 3, 3, 
3, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 
6, 6, 5, 5, 5, 141, 73, 0, 
};
// 869778
static uint8_t _SUB_469130_LOOKUP_TABLE_2[113] = {
0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 
4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 
4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 
3, 
};
__SUB_CLASS_THIS(00469130, __thiscall, 68516,  CUIStatChange, int32_t, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,8
	push ebx
	push esi
	push edi
	lea eax,[esp+0xC]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [esp+0x10],0

 Block5:
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	lea edi,[esi+0x39]
	push edi
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esp,8
	cmp eax,0x16
	je Block7

 Block6:
	cmp ecx,0x7D1
	jne Block14

 Block7:
	mov ecx,dword ptr [esi+0x3D]
	push ecx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	mov edx,0x7D1
	add esp,8
	cmp ax,dx
	je Block14

 Block8:
	mov eax,dword ptr [esi+0x3D]
	push eax
	push edi
	mov ebx,0x96
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,0x8A2
	add esp,8
	cmp ax,cx
	jl Block11

 Block9:
	mov edx,dword ptr [esi+0x3D]
	push edx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,0x8A6
	add esp,8
	cmp ax,cx
	jg Block11

 Block10:
	mov edx,dword ptr [esi+0x3D]
	push edx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	cdq
	mov ecx,0xA
	idiv ecx
	add esp,8
	mov ebx,edx
	imul ebx,0x64
	add ebx,0xFA
	jmp Block13

 Block11:
	mov edx,dword ptr [esi+0x3D]
	push edx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,0x8A7
	add esp,8
	cmp ax,cx
	jl Block13

 Block12:
	mov ebx,0x28A

 Block13:
	mov edx,dword ptr [esi+0x35]
	push edx
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	imul eax,0x23
	add esp,8
	lea ecx,[eax+ebx-0x113]
	xor eax,eax
	cmp dword ptr [esp+0x18],ecx
	pop edi
	pop esi
	setl al
	pop ebx
	add esp,8
	ret 4

 Block14:
	mov edx,dword ptr [esi+0x3D]
	push edx
	push edi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	cmp eax,0xCF0
	jg Block22

 Block15:
	cmp eax,0xCEE
	jge Block21

 Block16:
	sub eax,0xC80
	cmp eax,0x64
	ja Block25

 Block17:
	movzx eax,byte ptr [eax+_SUB_469130_LOOKUP_TABLE_0]
	cmp EAX, 0
je Block18
cmp EAX, 1
je Block19
cmp EAX, 2
je Block20
cmp EAX, 3
je Block25


 Block18:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx ecx,al
	imul ecx,0x16
	add ecx,0x2B
	xor eax,eax
	cmp dword ptr [esp+0x18],ecx
	pop edi
	pop esi
	setl al
	pop ebx
	add esp,8
	ret 4

 Block19:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx edx,al
	imul edx,0x16
	add edx,0x8F
	xor eax,eax
	cmp dword ptr [esp+0x18],edx
	pop edi
	pop esi
	setl al
	pop ebx
	add esp,8
	ret 4

 Block20:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea ecx,[eax*8]
	sub ecx,eax
	lea edx,[ecx+ecx+0x17]
	xor eax,eax
	cmp dword ptr [esp+0x18],edx
	pop edi
	pop esi
	setl al
	pop ebx
	add esp,8
	ret 4

 Block21:
	mov eax,dword ptr [esi+0x35]
	push eax
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	lea ecx,[eax*8]
	sub ecx,eax
	add esp,8
	lea edx,[ecx+ecx+0x7B]
	xor eax,eax
	cmp dword ptr [esp+0x18],edx
	pop edi
	pop esi
	setl al
	pop ebx
	add esp,8
	ret 4

 Block22:
	cmp eax,0xDAC
	je Block55

 Block23:
	add eax,0xFFFFF24A
	cmp eax,2
	ja Block25

 Block24:
	mov eax,dword ptr [esi+0x35]
	push eax
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	add esp,8
	lea ecx,[eax+eax*8]
	lea edx,[ecx+ecx+0x53]
	xor eax,eax
	cmp dword ptr [esp+0x18],edx
	pop edi
	pop esi
	setl al
	pop ebx
	add esp,8
	ret 4

 Block25:
	mov eax,dword ptr [esi+0x3D]
	push eax
	push edi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	cdq
	mov ecx,0x3E8
	idiv ecx
	add esp,8
	cmp edx,0x64
	jg Block30

 Block26:
	je Block34

 Block27:
	cmp edx,1
	ja Block54

 Block28:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea edx,[eax+eax*4]
	lea eax,[edx+edx-5]
	cmp dword ptr [esp+0x18],eax
	jge Block54

 Block29:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block30:
	cmp edx,0x190
	jg Block44

 Block31:
	je Block42

 Block32:
	sub edx,0x6E
	cmp edx,0xD4
	ja Block54

 Block33:
	movzx ecx,byte ptr [edx+_SUB_469130_LOOKUP_TABLE_1]
	cmp ECX, 0
je Block34
cmp ECX, 1
je Block36
cmp ECX, 2
je Block38
cmp ECX, 3
je Block40
cmp ECX, 4
je Block42
cmp ECX, 5
je Block46
cmp ECX, 6
je Block54


 Block34:
	mov edx,dword ptr [esi+0x35]
	push edx
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	lea ecx,[eax*4+0x37]
	add esp,8
	cmp dword ptr [esp+0x18],ecx
	jge Block54

 Block35:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block36:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx edx,al
	lea eax,[edx*4+0x9B]
	cmp dword ptr [esp+0x18],eax
	jge Block54

 Block37:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block38:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx ecx,al
	imul ecx,0x16
	dec ecx
	cmp dword ptr [esp+0x18],ecx
	jge Block54

 Block39:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block40:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx edx,al
	imul edx,0x16
	add edx,0x1C1
	cmp dword ptr [esp+0x18],edx
	jge Block54

 Block41:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block42:
	mov eax,dword ptr [esi+0x35]
	push eax
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	lea ecx,[eax*8]
	sub ecx,eax
	lea edx,[ecx+ecx-0xF]
	add esp,8
	cmp dword ptr [esp+0x18],edx
	jge Block54

 Block43:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block44:
	sub edx,0x19A
	cmp edx,0x70
	ja Block54

 Block45:
	movzx eax,byte ptr [edx+_SUB_469130_LOOKUP_TABLE_2]
	cmp EAX, 0
je Block46
cmp EAX, 1
je Block48
cmp EAX, 2
je Block50
cmp EAX, 3
je Block52
cmp EAX, 4
je Block54


 Block46:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea ecx,[eax*8]
	sub ecx,eax
	lea edx,[ecx+ecx+0x87]
	cmp dword ptr [esp+0x18],edx
	jge Block54

 Block47:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block48:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea ecx,[eax*8]
	sub ecx,eax
	lea edx,[ecx+ecx+0x163]
	cmp dword ptr [esp+0x18],edx
	jge Block54

 Block49:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block50:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea eax,[eax+eax*8]
	lea ecx,[eax+eax-0x37]
	cmp dword ptr [esp+0x18],ecx
	jge Block54

 Block51:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block52:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	lea edx,[eax+eax*8]
	lea eax,[edx+edx+0x5F]
	cmp dword ptr [esp+0x18],eax
	jge Block54

 Block53:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4

 Block54:
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	add esp,8
	ret 4

 Block55:
	mov ecx,dword ptr [esi+0x35]
	push ecx
	add esi,0x33
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx eax,al
	lea edx,[eax+eax*8]
	add esp,8
	lea eax,[edx+edx-0x11]
	xor ecx,ecx
	cmp dword ptr [esp+0x18],eax
	pop edi
	setl cl
	pop esi
	pop ebx
	mov eax,ecx
	add esp,8
	ret 4
}
}
// CUIStatChange::IsOverMaxHP
__SUB_CLASS_THIS(004697F0, __thiscall, 68516,  CUIStatChange, int32_t, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,8
	push ebx
	lea eax,[esp+4]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+8]
	test eax,eax
	je Block5

 Block1:
	push esi
	push edi
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	pop edi
	mov dword ptr [esp+0xC],0
	pop esi

 Block5:
	mov ecx,dword ptr [ebx+0x3D]
	push ecx
	add ebx,0x39
	push ebx
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	push edx
	call IncHPVal
	add eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	add esp,0xC
	cmp eax,0x1869F
	setg cl
	pop ebx
	mov eax,ecx
	add esp,8
	ret 4
}
}
// CWvsContext::CheckBoobyTrapPickUpRequest
__SUB_CLASS_THIS(00609670, __thiscall, 8404,  CWvsContext, void, const tagPOINT&) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CDropPool>::ms_pInstance]
	jmp  CDropPool::BoobyTrapCheckPickupItem
}
}
// CUISkillInc::OnChildNotify
__SUB_CLASS_THIS(00458DF0, __thiscall, 68663,  CUISkillInc, void, uint32_t, uint32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	mov edx,dword ptr [esp+8]
	cmp eax,0x7D1
	jne Block4

 Block1:
	cmp edx,0x12C
	jb Block4

 Block2:
	cmp edx,0x130
	ja Block4

 Block3:
	call CUISkillInc::ResetInfo
	ret 0xC

 Block4:
	cmp edx,0x64
	jne Block6

 Block5:
	mov edx,dword ptr [ecx]
	push eax
	mov eax,dword ptr [edx+0x20]
	call eax

 Block6:
	ret 0xC
}
}
// GUILDDATA::SKILLENTRY::Decode
_SUB_EXCEPTION_HANDLER(F8A10)
__SUB_CLASS_THIS(000F8A10, __thiscall, 45404,  GUILDDATA::SKILLENTRY, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_F8A10
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x1C]
	mov ecx,edi
	call CInPacket::Decode2
	mov word ptr [esi],ax
	push 8
	lea eax,[esi+2]
	push eax
	mov ecx,edi
	call CInPacket::DecodeBuffer
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,edi
	call CInPacket::DecodeStr
	push eax
	lea ecx,[esi+0xA]
	mov dword ptr [esp+0x18],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 4
}
}
// CWvsContext::SendRingDropRequest
_SUB_EXCEPTION_HANDLER(5D6810)
__SUB_CLASS_THIS(005D6810, __thiscall, 8092,  CWvsContext, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D6810
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0xA1
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	push 3
	lea ecx,[esp+8]
	mov dword ptr [esp+0x20],0
	call COutPacket::Encode1
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+8]
	call COutPacket::Encode4
	lea ecx,[esp+4]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret 4
}
}
// CWvsContext::OnEnterGame
_SUB_EXCEPTION_HANDLER(5E7110)
__SUB_CLASS_THIS0(005E7110, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E7110
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x6C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x80]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	push 0x17A
	lea eax,[esi+0x3608]
	push ebx
	mov ebp,1
	push eax
	mov dword ptr [esi+0x3604],ebx
	mov dword ptr [esi+0x37C8],ebx
	mov dword ptr [esi+8],ebp
	call _memset
	add esp,0xC
	lea ecx,[esi+0x3E28]
	call ZRef<CPortalList>::_Alloc
	lea ecx,[esi+0x3DD0]
	call ZRef<CUserPool>::_Alloc
	lea ecx,[esi+0x3DD8]
	call ZRef<CSummonedPool>::_Alloc
	lea ecx,[esi+0x3DE0]
	call ZRef<CMobPool>::_Alloc
	lea ecx,[esi+0x3DE8]
	call ZRef<CNpcPool>::_Alloc
	lea ecx,[esi+0x3DF0]
	call ZRef<CEmployeePool>::_Alloc
	lea ecx,[esi+0x3DF8]
	call ZRef<CDropPool>::_Alloc
	lea ecx,[esi+0x3E00]
	call ZRef<CMessageBoxPool>::_Alloc
	lea ecx,[esi+0x3E08]
	call ZRef<CAffectedAreaPool>::_Alloc
	lea ecx,[esi+0x3E10]
	call ZRef<CTownPortalPool>::_Alloc
	lea ecx,[esi+0x3E18]
	call ZRef<COpenGatePool>::_Alloc
	lea ecx,[esi+0x3E20]
	call ZRef<CReactorPool>::_Alloc
	lea ecx,[esi+0x3784]
	call ZRef<CWvsContext::CFriend>::_Alloc
	lea ecx,[esi+0x35D4]
	call CTemporaryStatView::Clear
	lea ecx,[esi+0x2148]
	call SecondaryStat::Clear
	lea ecx,[esi+0x3D38]
	push ebx
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D44]
	push ebx
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D50]
	push ebx
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D5C]
	push ebx
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D68]
	push ebx
	call TSecType<long>::SetData
	lea ecx,[esi+0x3D74]
	push ebx
	call TSecType<long>::SetData
	lea ecx,[esi+0x3FF8]
	mov dword ptr [esi+0x3D80],ebx
	mov dword ptr [esi+0x3DC4],ebx
	call ZMap<unsigned short, int, unsigned short>::RemoveAll
	mov dword ptr [esi+0x20B8],ebx
	call get_update_time
	mov ecx,dword ptr [esi+0x3F6C]
	mov dword ptr [esi+0x20BC],eax
	cmp ecx,ebx
	je Block3

 Block1:
	call CWnd::Destroy
	cmp dword ptr [esi+0x3F6C],ebx
	lea edi,[esi+0x3F68]
	je Block3

 Block2:
	push ebx
	mov ecx,edi
	call ZRef<CClock>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block3:
	mov ecx,dword ptr [TSingleton<CWvsApp>::ms_pInstance]
	mov dword ptr [ecx+0x40],ebp
	mov eax,dword ptr [esi+0x20B4]
	mov ecx,dword ptr [esi+0x205C]
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	call CConfig::LoadCharacter
	cmp dword ptr [TSingleton<CUIMiniMap>::ms_pInstance],ebx
	jne Block7

 Block4:
	push 0xD1C
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x88],ebx
	cmp eax,ebx
	je Block6

 Block5:
	push esi
	mov ecx,eax
	call CUIMiniMap::_ctor_0

 Block6:
	mov dword ptr [esp+0x88],0xFFFFFFFF

 Block7:
	call TSingleton<CUIStatusBar>::CreateInstance
	call TSingleton<CUIScreenMsg>::CreateInstance
	call TSingleton<CUIQuestAlarm>::CreateInstance
	call TSingleton<CDamageMeter>::CreateInstance
	mov ecx,dword ptr [TSingleton<ExpeditionIntermediary>::ms_pInstance]
	cmp ecx,ebx
	je Block9

 Block8:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push ebp
	call eax

 Block9:
	call TSingleton<ExpeditionIntermediary>::CreateInstance
	mov ecx,offset CUIStatusBar::m_aChatLog
	call ZArray<ZRef<CUIStatusBar::CChatLog>>::RemoveAll
	push 0x164
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x88],ebp
	cmp eax,ebx
	je Block11

 Block10:
	mov ecx,eax
	call CNoticeQuestProgress::_ctor_default
	jmp Block12

 Block11:
	xor eax,eax

 Block12:
	mov dword ptr [esp+0x88],0xFFFFFFFF
	cmp eax,ebx
	je Block24

 Block13:
	add eax,8
	cmp eax,ebx
	je Block24

 Block14:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block16

 Block15:
	lea ecx,[edi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block16:
	mov eax,dword ptr [esi+0x3F24]
	mov dword ptr [esi+0x3F24],edi
	mov dword ptr [esp+0x1C],eax
	cmp eax,ebx
	je Block18

 Block17:
	push ebx
	lea ecx,[esp+0x1C]
	call ZRef<CNoticeQuestProgress>::_ReleaseRaw

 Block18:
	mov ecx,dword ptr [TSingleton<CScriptMan>::ms_pInstance]
	call CScriptMan::Init
	lea edx,[esp+0x14]
	push 0x38D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x88],2
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	je Block20

 Block19:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push ebx
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],ebx
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 8
	push eax
	call CUIStatusBar::ChatLogAdd

 Block20:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x88],0xFFFFFFFF
	cmp eax,ebx
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block22:
	lea ecx,[esi+0x3F5C]
	call CTips::Init
	mov ecx,esi
	call CWvsContext::LoadAreaCode
	call timeGetTime
	mov edi,eax
	mov dword ptr [esi+0x20B8],ebx
	call get_update_time
	lea ebp,[edi-0x493E0]
	lea ecx,[esi+0x3FB4]
	mov dword ptr [esi+0x20BC],eax
	mov dword ptr [esi+0x3D84],ebp
	mov dword ptr [esi+0x4144],edi
	call ZMap<long, long, long>::RemoveAll
	xor eax,eax
	mov dword ptr [esi+0x3FCC],ebx
	mov dword ptr [esi+0x3FD0],ebx
	mov dword ptr [esi+0x3FD4],ebx
	mov dword ptr [esi+0x4078],ebx
	mov word ptr [esi+0x407C],ax
	mov dword ptr [esi+0x3DCC],ebp
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::IsLoadFlash
	mov dword ptr [esi+0x3FF4],ebx
	test eax,eax
	je Block25

 Block23:
	mov dword ptr [esi+0x3FF0],1
	jmp Block26

 Block24:
	xor edi,edi
	jmp Block16

 Block25:
	mov dword ptr [esi+0x3FF0],ebx

 Block26:
	cmp dword ptr [esi+0x4090],ebx
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea edi,[esi+0x4090]
	sete al
	cmp al,bl
	je Block48

 Block27:
	lea ecx,[esp+0x30]
	push ecx
	call ebp
	lea edx,[esp+0x30]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block29

 Block28:
	push eax
	call _com_issue_error

 Block29:
	lea eax,[esp+0x20]
	push eax
	mov dword ptr [esp+0x8C],3
	call ebp
	lea ecx,[esp+0x20]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block31

 Block30:
	push eax
	call _com_issue_error

 Block31:
	push ebx
	push ebx
	lea edx,[esp+0x38]
	push edx
	lea eax,[esp+0x2C]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0xABC
	push ecx
	mov byte ptr [esp+0xA4],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0x9C],5
	cmp dword ptr [_D_G_RM],ebx
	jne Block33

 Block32:
	push 0x80004003
	call _com_issue_error

 Block33:
	lea edx,[esp+0x74]
	mov byte ptr [esp+0x9C],4
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x90],6
	call Ztl_variant_t::GetUnknown
	push eax
	mov ecx,edi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,ebx
	jge Block36

 Block34:
	cmp eax,0x80004002
	je Block36

 Block35:
	push eax
	call _com_issue_error

 Block36:
	mov edi,8
	mov byte ptr [esp+0x88],4
	cmp word ptr [esp+0x60],di
	jne Block39

 Block37:
	xor eax,eax
	mov word ptr [esp+0x60],ax
	mov eax,dword ptr [esp+0x68]
	cmp eax,ebx
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block40

 Block39:
	lea ecx,[esp+0x60]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block40:
	mov byte ptr [esp+0x88],3
	cmp word ptr [esp+0x20],di
	jne Block43

 Block41:
	mov eax,dword ptr [esp+0x28]
	xor edx,edx
	mov word ptr [esp+0x20],dx
	cmp eax,ebx
	je Block44

 Block42:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block44

 Block43:
	lea eax,[esp+0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block44:
	mov dword ptr [esp+0x88],0xFFFFFFFF
	cmp word ptr [esp+0x30],di
	jne Block47

 Block45:
	mov eax,dword ptr [esp+0x38]
	xor ecx,ecx
	mov word ptr [esp+0x30],cx
	cmp eax,ebx
	je Block48

 Block46:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block48

 Block47:
	lea edx,[esp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block48:
	cmp dword ptr [esi+0x4094],ebx
	lea edi,[esi+0x4094]
	sete al
	cmp al,bl
	je Block70

 Block49:
	lea eax,[esp+0x50]
	push eax
	call ebp
	lea ecx,[esp+0x50]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	lea edx,[esp+0x40]
	push edx
	mov dword ptr [esp+0x8C],7
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block53

 Block52:
	push eax
	call _com_issue_error

 Block53:
	push ebx
	push ebx
	lea ecx,[esp+0x58]
	push ecx
	lea edx,[esp+0x4C]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	push 0xB66
	push eax
	mov byte ptr [esp+0xA4],8
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0x9C],9
	cmp dword ptr [_D_G_RM],ebx
	jne Block55

 Block54:
	push 0x80004003
	call _com_issue_error

 Block55:
	lea ecx,[esp+0x84]
	push ecx
	mov byte ptr [esp+0xA0],8
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x90],0xA
	call Ztl_variant_t::GetUnknown
	push eax
	mov ecx,edi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,ebx
	jge Block58

 Block56:
	cmp eax,0x80004002
	je Block58

 Block57:
	push eax
	call _com_issue_error

 Block58:
	mov edi,8
	mov byte ptr [esp+0x88],8
	cmp word ptr [esp+0x70],di
	jne Block61

 Block59:
	mov eax,dword ptr [esp+0x78]
	xor edx,edx
	mov word ptr [esp+0x70],dx
	cmp eax,ebx
	je Block62

 Block60:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block62

 Block61:
	lea eax,[esp+0x70]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block62:
	mov byte ptr [esp+0x88],7
	cmp word ptr [esp+0x40],di
	jne Block65

 Block63:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	cmp eax,ebx
	je Block66

 Block64:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block66

 Block65:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block66:
	mov dword ptr [esp+0x88],0xFFFFFFFF
	cmp word ptr [esp+0x50],di
	jne Block69

 Block67:
	xor eax,eax
	mov word ptr [esp+0x50],ax
	mov eax,dword ptr [esp+0x58]
	cmp eax,ebx
	je Block70

 Block68:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block70

 Block69:
	lea ecx,[esp+0x50]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block70:
	cmp dword ptr [esi+0x3604],ebx
	je Block74

 Block71:
	cmp dword ptr [TSingleton<CUIPartyHP>::ms_pInstance],ebx
	jne Block74

 Block72:
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	call CConfig::GetShowPartyHP
	test eax,eax
	je Block74

 Block73:
	call TSingleton<CUIPartyHP>::CreateInstance

 Block74:
	mov ecx,esi
	call CWvsContext::CheckOpBoardHasNew
	mov ecx,esi
	call CWvsContext::SetShowWorthlessQuestFromConfig
	mov ecx,dword ptr [esp+0x80]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x78
	ret
}
}
// CTownPortalPool::TryEnterTownPortal
_SUB_EXCEPTION_HANDLER(3624B0)
__SUB_CLASS_THIS(003624B0, __thiscall, 51714,  CTownPortalPool, void, NakedParam<tagPOINT>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_3624B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x2C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x40]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [ecx+0x28]
	xor ebx,ebx
	mov dword ptr [esp+0x14],ecx
	cmp ecx,ebx
	je Block28

 Block1:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	mov edi,edi

 Block2:
	lea eax,[esp+0x14]
	push eax
	call ZList<ZRef<CTownPortalPool::TOWNPORTAL>>::GetNext
	mov edi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x1C],edi
	cmp edi,ebx
	je Block4

 Block3:
	lea ecx,[edi-0xC]
	push ecx
	call ebp

 Block4:
	mov eax,dword ptr [edi+0x10]
	mov ecx,dword ptr [edi+0xC]
	lea edx,[eax+0x32]
	push edx
	lea edx,[ecx+0x14]
	push edx
	add eax,0xFFFFFFCE
	push eax
	add ecx,0xFFFFFFEC
	push ecx
	lea eax,[esp+0x40]
	push eax
	mov dword ptr [esp+0x5C],ebx
	call SetRect
	mov ecx,dword ptr [esp+0x54]
	mov edx,dword ptr [esp+0x50]
	push ecx
	push edx
	lea eax,[esp+0x38]
	push eax
	call PtInRect
	test eax,eax
	je Block24

 Block5:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov esi,eax
	mov dword ptr [eax+0x20B8],1
	call get_update_time
	push 0x9C
	lea ecx,[esp+0x24]
	mov dword ptr [esi+0x20BC],eax
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x24]
	mov esi,dword ptr [edi+8]
	mov byte ptr [esp+0x48],1
	cmp eax,ebx
	jne Block7

 Block6:
	xor edx,edx
	jmp Block8

 Block7:
	mov edx,dword ptr [eax-4]

 Block8:
	mov ecx,dword ptr [esp+0x28]
	add ecx,4
	cmp ecx,edx
	jbe Block14

 Block9:
	cmp eax,ebx
	jne Block11

 Block10:
	xor eax,eax
	jmp Block12

 Block11:
	mov eax,dword ptr [eax-4]

 Block12:
	add eax,eax
	cmp ecx,eax
	ja Block12

 Block13:
	lea ecx,[esp+0x50]
	push ecx
	push ebx
	push eax
	lea ecx,[esp+0x30]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x24]

 Block14:
	mov edx,dword ptr [esp+0x28]
	mov dword ptr [eax+edx],esi
	mov eax,dword ptr [esp+0x24]
	add dword ptr [esp+0x28],4
	cmp eax,ebx
	jne Block16

 Block15:
	xor edx,edx
	jmp Block17

 Block16:
	mov edx,dword ptr [eax-4]

 Block17:
	mov ecx,dword ptr [esp+0x28]
	inc ecx
	cmp ecx,edx
	jbe Block23

 Block18:
	cmp eax,ebx
	jne Block20

 Block19:
	xor eax,eax
	jmp Block21

 Block20:
	mov eax,dword ptr [eax-4]

 Block21:
	add eax,eax
	cmp ecx,eax
	ja Block21

 Block22:
	lea ecx,[esp+0x50]
	push ecx
	push ebx
	push eax
	lea ecx,[esp+0x30]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x24]

 Block23:
	mov edx,dword ptr [esp+0x28]
	mov byte ptr [eax+edx],bl
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	inc dword ptr [esp+0x28]
	lea eax,[esp+0x20]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0x48],bl
	call ZArray<unsigned char>::RemoveAll

 Block24:
	lea esi,[edi-0x10]
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block27

 Block25:
	push edi
	call ebp
	cmp esi,ebx
	je Block27

 Block26:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block27:
	mov dword ptr [esp+0x1C],ebx
	cmp dword ptr [esp+0x14],ebx
	jne Block2

 Block28:
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x38
	ret 8
}
}
// CUISkillDec::~CUISkillDec
_SUB_EXCEPTION_HANDLER(5EB080)
__SUB_CLASS_THIS0(005EB080, __thiscall, 68553,  CUISkillDec, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5EB080
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x10],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUISkillDec::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUISkillDec::`vftable'{for `IUIMsgHandler'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUISkillDec::`vftable'{for `ZRefCounted'}
	lea ecx,[esi+0xE0]
	mov dword ptr [esp+0x1C],6
	call CLayoutMan::~CLayoutMan
	lea ecx,[esi+0xCC]
	mov byte ptr [esp+0x1C],5
	call ZArray<SKILLROOT>::RemoveAll
	lea edi,[esi+0xC4]
	xor ebx,ebx
	mov byte ptr [esp+0x1C],4
	cmp dword ptr [edi+4],ebx
	je Block2

 Block1:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlButton>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block2:
	push offset ZRef<CCtrlButton>::~ZRef<CCtrlButton>
	push 4
	push 8
	lea eax,[esi+0xA4]
	push eax
	mov byte ptr [esp+0x2C],3
	call __eh_vector_dtor_iterator
	lea edi,[esi+0x9C]
	mov byte ptr [esp+0x1C],2
	cmp dword ptr [edi+4],ebx
	je Block4

 Block3:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlScrollBar>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block4:
	lea edi,[esi+0x94]
	mov byte ptr [esp+0x1C],1
	cmp dword ptr [edi+4],ebx
	je Block6

 Block5:
	push ebx
	mov ecx,edi
	call ZRef<CCtrlTab>::_ReleaseRaw
	mov dword ptr [edi+4],ebx

 Block6:
	lea ecx,[esi+0x90]
	mov byte ptr [esp+0x1C],bl
	call ZArray<long>::RemoveAll
	mov ecx,esi
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call CDialog::~CDialog
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x10
	ret
}
}
// GUILDDATA::RemoveKey
__SUB_CLASS_THIS(0060B730, __thiscall, 45387,  GUILDDATA, void, unsigned long) {
__asm {

 Block0:
	push ebx
	push esi
	push edi
	mov ebx,ecx
	xor edi,edi
	call GUILDDATA::GetCount
	test eax,eax
	jle Block4

 Block1:
	mov ecx,dword ptr [ebx+0xC]
	mov edx,dword ptr [esp+0x10]

 Block2:
	cmp dword ptr [ecx],edx
	je Block7

 Block3:
	inc edi
	add ecx,4
	cmp edi,eax
	jl Block2

 Block4:
	mov esi,dword ptr [esp+0x10]

 Block5:
	mov eax,dword ptr [ebx+0xC]
	lea ecx,[ebx+0xC]
	test eax,eax
	jne Block8

 Block6:
	jmp Block9

 Block7:
	mov esi,edi
	jmp Block5

 Block8:
	mov eax,dword ptr [eax-4]

 Block9:
	cmp edi,eax
	jge Block11

 Block10:
	mov eax,dword ptr [ecx]
	lea edx,[eax+esi*4]
	push edx
	call ZArray<unsigned long>::RemoveAt
	imul esi,0x25
	add esi,dword ptr [ebx+0x10]
	lea ecx,[ebx+0x10]
	push esi
	call ZArray<GUILDMEMBER>::RemoveAt

 Block11:
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CWvsContext::GetSecondaryStat
__SUB_CLASS_THIS0(000FEF50, __thiscall, 8131,  CWvsContext, const SecondaryStat&) {
__asm {

 Block0:
	lea eax,[ecx+0x2148]
	ret
}
}
// CWvsContext::CFriend::FindIndex
__SUB_CLASS_THIS(006108A0, __thiscall, 8451,  CWvsContext::CFriend, long, unsigned long) {
__asm {

 Block0:
	push ebx
	mov ebx,ecx
	call CWvsContext::CFriend::IsDataTwisted
	test eax,eax
	je Block2

 Block1:
	or eax,0xFFFFFFFF
	pop ebx
	ret 4

 Block2:
	push ebp
	mov ebp,dword ptr [esp+0xC]
	push esi
	push edi
	xor edi,edi
	xor esi,esi
	mov edi,edi

 Block3:
	mov ecx,ebx
	call CWvsContext::CFriend::IsDataTwisted
	mov eax,dword ptr [ebx]
	test eax,eax
	jne Block5

 Block4:
	xor ecx,ecx
	jmp Block6

 Block5:
	mov ecx,dword ptr [eax-4]

 Block6:
	cmp edi,ecx
	jge Block10

 Block7:
	cmp dword ptr [esi+eax],ebp
	je Block9

 Block8:
	inc edi
	add esi,0x27
	jmp Block3

 Block9:
	mov eax,edi
	pop edi
	pop esi
	pop ebp
	pop ebx
	ret 4

 Block10:
	pop edi
	pop esi
	pop ebp
	or eax,0xFFFFFFFF
	pop ebx
	ret 4
}
}
// CUIJoyPad::CheckControls
__SUB_CLASS_THIS0(00569580, __thiscall, 13663,  CUIJoyPad, int32_t) {
__asm {

 Block0:
	sub esp,0x30
	push esi
	push 0x30
	lea eax,[esp+8]
	push 0
	push eax
	mov esi,ecx
	call _memset
	add esp,0xC
	lea edx,[esi+0x94]
	xor ecx,ecx
	pop esi

 Block1:
	mov eax,dword ptr [edx]
	mov eax,dword ptr [eax+0x68]
	test eax,eax
	jle Block4

 Block2:
	cmp dword ptr [esp+eax*4-4],0
	lea eax,[esp+eax*4-4]
	jne Block6

 Block3:
	mov dword ptr [eax],1

 Block4:
	inc ecx
	add edx,8
	cmp ecx,0xB
	jl Block1

 Block5:
	mov eax,1
	add esp,0x30
	ret

 Block6:
	xor eax,eax
	add esp,0x30
	ret
}
}
// CUISkillInc::OnButtonClicked
__SUB_CLASS_THIS(00452F70, __thiscall, 68665,  CUISkillInc, void, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	mov esi,ecx
	lea ecx,[eax-0x7DA]
	cmp ecx,3
	ja Block3

 Block1:
	add eax,0xFFFFF826
	push eax
	mov ecx,esi
	call CUISkillInc::OnSkillIncButton

 Block2:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x34]
	push 1
	mov ecx,esi
	call eax
	pop esi
	ret 4

 Block3:
	cmp eax,1
	je Block2

 Block4:
	cmp eax,2
	jne Block6

 Block5:
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x34]
	mov ecx,esi
	call eax
	pop esi
	ret 4

 Block6:
	cmp eax,8
	jne Block8

 Block7:
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x34]
	mov ecx,esi
	call eax

 Block8:
	pop esi
	ret 4
}
}
// CTemporaryStatView::TEMPORARY_STAT::SetLeftUnit
_SUB_EXCEPTION_HANDLER(35DA00)
__SUB_CLASS_THIS(0035DA00, __thiscall, 5821,  CTemporaryStatView::TEMPORARY_STAT, void, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35DA00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x40
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x50]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x60]
	mov edi,dword ptr [esi+0x40]
	mov dword ptr [esi+0x40],eax
	call CTemporaryStatView::TEMPORARY_STAT::UpdateShadowIndex
	mov ecx,dword ptr [esi+0x20]
	mov eax,0xBB8
	cmp ecx,0x4FAA8E
	je Block2

 Block1:
	cmp ecx,0x21612AA
	jne Block3

 Block2:
	mov eax,dword ptr [esi+0x44]

 Block3:
	cmp edi,eax
	jle Block33

 Block4:
	cmp dword ptr [esi+0x40],eax
	jg Block33

 Block5:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x20]
	push ecx
	call edi
	lea edx,[esp+0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block7

 Block6:
	push eax
	call _com_issue_error

 Block7:
	lea eax,[esp+0x10]
	push eax
	mov dword ptr [esp+0x5C],0
	call edi
	lea ecx,[esp+0x10]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block9

 Block8:
	push eax
	call _com_issue_error

 Block9:
	mov ecx,dword ptr [esi+0x2C]
	mov byte ptr [esp+0x58],1
	test ecx,ecx
	jne Block11

 Block10:
	push 0x80004003
	call _com_issue_error

 Block11:
	lea edx,[esp+0x20]
	push edx
	lea eax,[esp+0x14]
	push eax
	push 0x20
	call IWzGr2DLayer::Animate
	mov ebp,8
	mov byte ptr [esp+0x58],0
	cmp word ptr [esp+0x10],bp
	jne Block14

 Block12:
	mov eax,dword ptr [esp+0x18]
	xor ecx,ecx
	mov word ptr [esp+0x10],cx
	test eax,eax
	je Block15

 Block13:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block15

 Block14:
	lea edx,[esp+0x10]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block15:
	mov dword ptr [esp+0x58],0xFFFFFFFF
	cmp word ptr [esp+0x20],bp
	jne Block18

 Block16:
	xor eax,eax
	mov word ptr [esp+0x20],ax
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block19

 Block17:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block19

 Block18:
	lea ecx,[esp+0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block19:
	lea edx,[esp+0x40]
	push edx
	call edi
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block21

 Block20:
	push eax
	call _com_issue_error

 Block21:
	lea ecx,[esp+0x30]
	push ecx
	mov dword ptr [esp+0x5C],2
	call edi
	lea edx,[esp+0x30]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block23

 Block22:
	push eax
	call _com_issue_error

 Block23:
	mov ecx,dword ptr [esi+0x30]
	mov byte ptr [esp+0x58],3
	test ecx,ecx
	jne Block25

 Block24:
	push 0x80004003
	call _com_issue_error

 Block25:
	lea eax,[esp+0x40]
	push eax
	lea edx,[esp+0x34]
	push edx
	push 0x20
	call IWzGr2DLayer::Animate
	mov byte ptr [esp+0x58],2
	cmp word ptr [esp+0x30],bp
	jne Block28

 Block26:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block29

 Block27:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block29

 Block28:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block29:
	mov dword ptr [esp+0x58],0xFFFFFFFF
	cmp word ptr [esp+0x40],bp
	jne Block32

 Block30:
	mov eax,dword ptr [esp+0x48]
	xor edx,edx
	mov word ptr [esp+0x40],dx
	test eax,eax
	je Block33

 Block31:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	mov ecx,dword ptr [esp+0x50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x4C
	ret 4

 Block32:
	lea eax,[esp+0x40]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block33:
	mov ecx,dword ptr [esp+0x50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x4C
	ret 4
}
}
// COpenGatePool::RemoveOpenGate1
_SUB_EXCEPTION_HANDLER(289510)
__SUB_CLASS_THIS(00289510, __thiscall, 51998,  COpenGatePool, void, NakedParam<ZRef<COpenGatePool::OPENGATE>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_289510
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [eax+4]
	push ecx
	lea ecx,[esi+0x1C]
	mov dword ptr [esp+0x18],0
	call ZList<ZRef<COpenGatePool::OPENGATE>>::RemoveAt
	mov edx,dword ptr [esp+0x20]
	add edx,8
	push edx
	lea ecx,[esi+4]
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::RemoveKey
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CUISkillDec::IsEnableSkill
__SUB_CLASS_THIS(00452CE0, __thiscall, 68562,  CUISkillDec, int32_t, const SKILLENTRY*) {
__asm {

 Block0:
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	lea eax,[esp+0x10]
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push eax
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [esp+0x14],0

 Block5:
	mov ecx,dword ptr [esi+0x98]
	mov edi,dword ptr [esp+0x1C]
	mov edx,dword ptr [edi]
	mov ebx,dword ptr [ecx+0x44]
	push edx
	mov ecx,esi
	call CUISkillDec::IsRequiredSkill
	test eax,eax
	jne Block15

 Block6:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push eax
	mov eax,dword ptr [edi]
	push eax
	push ebp
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block15

 Block7:
	mov ecx,dword ptr [ebp+0x3D]
	push ecx
	add ebp,0x39
	push ebp
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	push edx
	call is_extendsp_job
	add esp,0xC
	test eax,eax
	jne Block17

 Block8:
	mov eax,dword ptr [esi+0xDC]
	cmp ebx,eax
	je Block17

 Block9:
	sub eax,1
	je Block16

 Block10:
	sub eax,1
	je Block14

 Block11:
	sub eax,1
	jne Block17

 Block12:
	push 2
	mov ecx,esi
	call CUISkillDec::GetExcessSP
	push 1
	mov ecx,esi
	mov edi,eax
	call CUISkillDec::GetExcessSP
	push 0
	mov ecx,esi
	add edi,eax
	call CUISkillDec::GetExcessSP
	add eax,edi
	test eax,eax
	jg Block17

 Block13:
	pop edi
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	add esp,8
	ret 4

 Block14:
	push 1
	mov ecx,esi
	call CUISkillDec::GetExcessSP
	push 0
	mov ecx,esi
	mov edi,eax
	call CUISkillDec::GetExcessSP
	add edi,eax
	test edi,edi
	jg Block17

 Block15:
	pop edi
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	add esp,8
	ret 4

 Block16:
	push 0
	mov ecx,esi
	call CUISkillDec::GetExcessSP
	test eax,eax
	jle Block15

 Block17:
	pop edi
	pop esi
	pop ebp
	mov eax,1
	pop ebx
	add esp,8
	ret 4
}
}
// CUISkillInc::OnDestroy
__SUB_CLASS_THIS0(005EB270, __thiscall, 68661,  CUISkillInc, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esi+0x8C]
	test ecx,ecx
	je Block3

 Block1:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x34]
	push 3
	call edx
	add esi,0x88
	cmp dword ptr [esi+4],0
	je Block3

 Block2:
	push 0
	mov ecx,esi
	call ZRef<CDialog>::_ReleaseRaw
	mov dword ptr [esi+4],0

 Block3:
	pop esi
	ret
}
}
// CWvsContext::OnNotifyWedding
_SUB_EXCEPTION_HANDLER(5E4CF0)
__SUB_CLASS_THIS(005E4CF0, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E4CF0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call CInPacket::Decode1
	mov bl,al
	lea eax,[esp+0xC]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	xor esi,esi
	mov dword ptr [esp+0x24],0
	mov dword ptr [esp+0x2C],esi
	mov byte ptr [esp+0x24],1
	test bl,bl
	jne Block8

 Block1:
	lea ecx,[esp+0x14]
	push 0x1A3E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,eax
	lea edx,[esp+0x10]
	push 0x14A7
	mov bl,2
	push edx
	mov byte ptr [esp+0x2C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0xC]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x38]
	push eax
	mov byte ptr [esp+0x34],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x20]
	add esp,0x10
	mov byte ptr [esp+0x24],bl
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block3:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x24],1
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block15

 Block6:
	sub esp,8
	mov dword ptr [esp+0x1C],esp

 Block7:
	mov esi,dword ptr [esp+0x34]
	mov eax,esp
	push 0
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],0
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd
	jmp Block16

 Block8:
	cmp bl,1
	jne Block16

 Block9:
	lea ecx,[esp+0x10]
	push 0x1A3C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,eax
	lea edx,[esp+0x14]
	push 0x14A7
	mov bl,4
	push edx
	mov byte ptr [esp+0x2C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0xC]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x38]
	push eax
	mov byte ptr [esp+0x34],5
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0x10
	mov byte ptr [esp+0x24],bl
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x24],1
	test eax,eax
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block15

 Block14:
	sub esp,8
	mov dword ptr [esp+0x20],esp
	jmp Block7

 Block15:
	mov esi,dword ptr [esp+0x2C]

 Block16:
	mov byte ptr [esp+0x24],0
	test esi,esi
	je Block18

 Block17:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CUIJoyPad::SetRet
__SUB_CLASS_THIS(0057A780, __thiscall, 13660,  CUIJoyPad, void, long) {
__asm {

 Block0:
	push ebx
	push esi
	push edi
	mov edi,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov esi,ecx
	call CUIJoyPad::GetJoyPadFromCtrl
	mov ebx,dword ptr [esp+0x10]
	mov eax,ebx
	sub eax,1
	je Block3

 Block1:
	sub eax,1
	jne Block6

 Block2:
	lea eax,[esi+0x100]
	push eax
	mov ecx,edi
	call CConfig::ApplyJoyPad
	jmp Block6

 Block3:
	mov ecx,esi
	call CUIJoyPad::CheckControls
	test eax,eax
	jne Block5

 Block4:
	push eax
	push eax
	push eax
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	push 0x180A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	pop edi
	pop esi
	pop ebx
	ret 4

 Block5:
	lea edx,[esi+0x130]
	push edx
	mov ecx,edi
	call CConfig::ApplyJoyPad
	mov ecx,edi
	call CConfig::SaveGlobal

 Block6:
	cmp dword ptr [esi+0x84],0
	jne Block9

 Block7:
	cmp dword ptr [esi+0x14],0
	mov dword ptr [esi+0x80],ebx
	mov dword ptr [esi+0x84],1
	je Block9

 Block8:
	mov ecx,esi
	call CWnd::Destroy

 Block9:
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CWvsContext::SendFamilyInviteResult
_SUB_EXCEPTION_HANDLER(609C50)
__SUB_CLASS_THIS(00609C50, __thiscall, 8274,  CWvsContext, void, NakedParam<ZXString<char>>, unsigned long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_609C50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	cmp dword ptr [ecx+0x4124],0
	mov dword ptr [esp+0x1C],0
	je Block2

 Block1:
	push 0xAE
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x28]
	push eax
	lea ecx,[esp+8]
	mov byte ptr [esp+0x20],1
	call COutPacket::Encode4
	push ecx
	mov ecx,esp
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	lea ecx,[esp+8]
	call COutPacket::EncodeStr
	mov eax,dword ptr [esp+0x2C]
	push eax
	lea ecx,[esp+8]
	call COutPacket::Encode1
	lea ecx,[esp+4]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov byte ptr [esp+0x1C],0
	call ZArray<unsigned char>::RemoveAll

 Block2:
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret 0xC
}
}
// CWvsContext::CheckEquipOnAutoStartQuest
_SUB_EXCEPTION_HANDLER(5E69D0)
__SUB_CLASS_THIS(005E69D0, __thiscall, 8233,  CWvsContext, int32_t, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E69D0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push ebx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,dword ptr [esp+0x20]
	mov esi,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	test eax,eax
	jle Block6

 Block1:
	push eax
	mov ecx,esi
	call CQuestMan::IsEquipOnAutoStartQuest
	test eax,eax
	je Block6

 Block2:
	cmp dword ptr [esi+0x23C],0
	lea ecx,[esi+0x230]
	je Block6

 Block3:
	mov dword ptr [esp+0xC],0
	lea eax,[esp+0xC]
	push eax
	lea edx,[esp+0x24]
	push edx
	mov dword ptr [esp+0x20],0
	call ZMap<long, ZArray<unsigned short>, long>::GetAt
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	je Block5

 Block4:
	cmp dword ptr [eax-4],0
	jne Block7

 Block5:
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll

 Block6:
	xor eax,eax
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x10
	ret 8

 Block7:
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,ebx
	call CWvsContext::UpdateAutoStartQuestPreStartList
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x10
	ret 8
}
}
// CWvsContext::CheckInventoryOnAutoStartQuest
_SUB_EXCEPTION_HANDLER(5E6AB0)
__SUB_CLASS_THIS(005E6AB0, __thiscall, 8233,  CWvsContext, int32_t, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5E6AB0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	mov dword ptr [esp+8],0
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x14],0
	test eax,eax
	jle Block5

 Block1:
	lea edx,[esp+8]
	push edx
	push eax
	call CQuestMan::GetQuestByItemDemand
	test eax,eax
	je Block5

 Block2:
	mov eax,dword ptr [esp+8]
	test eax,eax
	je Block5

 Block3:
	cmp dword ptr [eax-4],0
	je Block5

 Block4:
	mov eax,dword ptr [esp+0x20]
	push eax
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,edi
	call CWvsContext::UpdateAutoStartQuestPreStartList
	lea ecx,[esp+8]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll
	mov eax,1
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	add esp,0x10
	ret 8

 Block5:
	lea ecx,[esp+8]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	call ZArray<unsigned short>::RemoveAll
	xor eax,eax
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	add esp,0x10
	ret 8
}
}
// CWvsContext::ShowQuestInfoDetail
__SUB_CLASS_THIS(005F0BD0, __thiscall, 8304,  CWvsContext, void, long, uint16_t) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0x10]
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push edi
	call CQuestMan::GetQuestCategory
	mov ecx,esi
	cmp eax,0x33
	jne Block2

 Block1:
	push 0x1E
	call CWvsContext::UI_Close
	push 0xFFFFFFFF
	push 0x1E
	mov ecx,esi
	call CWvsContext::UI_Open
	mov eax,dword ptr [esp+0xC]
	mov ecx,dword ptr [esi+0x3E74]
	push edi
	push eax
	call CUIMedalQuestInfo::ShowQuestInfoDetail
	pop edi
	pop esi
	ret 8

 Block2:
	push 6
	call CWvsContext::UI_Close
	push 0xFFFFFFFF
	push 6
	mov ecx,esi
	call CWvsContext::UI_Open
	mov ecx,dword ptr [esp+0xC]
	push edi
	push ecx
	mov ecx,dword ptr [esi+0x3E6C]
	call CUIQuestInfo::ShowQuestInfoDetail
	pop edi
	pop esi
	ret 8
}
}
// CWvsContext::GetFriendGroups
_SUB_EXCEPTION_HANDLER(612340)
__SUB_CLASS_THIS(00612340, __thiscall, 8206,  CWvsContext, void, ZArray<ZXString<char> >&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_612340
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x28],ebp
	mov dword ptr [esp+0x1C],ebp
	xor edi,edi
	lea esp,[esp]

 Block1:
	mov esi,dword ptr [ebx+0x3788]
	mov ecx,esi
	call CWvsContext::CFriend::IsDataTwisted
	mov esi,dword ptr [esi]
	cmp esi,ebp
	jne Block3

 Block2:
	xor esi,esi
	jmp Block4

 Block3:
	mov esi,dword ptr [esi-4]

 Block4:
	cmp dword ptr [esp+0x1C],esi
	jge Block12

 Block5:
	mov eax,dword ptr [ebx+0x3788]
	mov eax,dword ptr [eax]
	add eax,edi
	lea ecx,[eax+0x16]
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	cmp ecx,ebp
	je Block9

 Block6:
	mov eax,ecx
	lea esi,[eax+1]

 Block7:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block7

 Block8:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push ebp
	push esi
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	mov esi,dword ptr [esp+0x18]

 Block9:
	lea eax,[esp+0x18]
	push eax
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x30],1
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov byte ptr [esp+0x28],0
	cmp esi,ebp
	je Block11

 Block10:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block11:
	inc dword ptr [esp+0x1C]
	add edi,0x27
	jmp Block1

 Block12:
	mov edi,dword ptr [esp+0x14]
	cmp edi,ebp
	jne Block14

 Block13:
	xor eax,eax
	jmp Block15

 Block14:
	mov eax,dword ptr [edi-4]

 Block15:
	lea ecx,[esp+0x30]
	push ecx
	dec eax
	push eax
	lea edx,[esp+0x1C]
	push ebp
	push edx
	call InsertionSortHelper<ZXString<char>, Friend_GroupAscComp_S>::call
	mov ebx,dword ptr [esp+0x40]
	add esp,0x10
	mov ecx,ebx
	call ZArray<ZXString<char>>::RemoveAll
	lea eax,[esp+0x30]
	push 0x189E
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	push 0xFFFFFFFF
	mov ecx,ebx
	mov byte ptr [esp+0x30],2
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x28],0
	cmp eax,ebp
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block17:
	mov dword ptr [esp+0x30],ebp
	mov byte ptr [esp+0x28],3
	mov esi,edi
	jmp Block19

 Block19:
	test edi,edi
	je Block28

 Block20:
	cmp ebp,dword ptr [edi-4]
	jae Block28

 Block21:
	lea ecx,[esp+0x1C]
	push 0x189E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	mov ecx,esi
	call ZXString<char>::op_eq_0
	mov edi,eax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	test edi,edi
	jne Block27

 Block24:
	test ebp,ebp
	jle Block26

 Block25:
	lea edx,[esp+0x30]
	push edx
	mov ecx,esi
	call ZXString<char>::op_eq_0
	test eax,eax
	jne Block27

 Block26:
	push esi
	push 0xFFFFFFFF
	mov ecx,ebx
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	push esi
	lea ecx,[esp+0x34]
	call ZXString<char>::op_assign

 Block27:
	mov edi,dword ptr [esp+0x14]
	inc ebp
	add esi,4
	jmp Block19

 Block28:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x28],0
	test eax,eax
	je Block30

 Block29:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block30:
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<ZXString<char>>::RemoveAll
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 4
}
}
// CWvsContext::SetShowWorthlessQuestFromConfig
__SUB_CLASS_THIS0(005CD290, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	sub esp,0xC
	push esi
	mov esi,ecx
	lea eax,[esp+4]
	push eax
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	lea edx,[esp+0x14]
	push edx
	push 6
	call CConfig::GetUIWndPos
	mov eax,dword ptr [esp+4]
	xor ecx,ecx
	and eax,0xF0000000
	cmp eax,0x10000000
	sete cl
	mov dword ptr [esi+0x4254],ecx
	pop esi
	add esp,0xC
	ret
}
}
// CUISkillInc::CreateSkillIncDlg
__SUB_CLASS_THIS0(005CC830, __thiscall, 68661,  CUISkillInc, void) {
__asm {

 Block0:
	push 1
	push 0
	push 1
	push offset _S_UIUIWINDOW2IMGRE__4
	call CDialog::CreateDlg_2
	ret
}
}
// CTemporaryStatView::TEMPORARY_STAT::~TEMPORARY_STAT
_SUB_EXCEPTION_HANDLER(35F9B0)
__SUB_CLASS_THIS0(0035F9B0, __thiscall, 5822,  CTemporaryStatView::TEMPORARY_STAT, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_35F9B0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	mov eax,dword ptr [esi+0x30]
	mov dword ptr [esp+0x14],0
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	mov eax,dword ptr [esi+0x2C]
	test eax,eax
	je Block4

 Block3:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block4:
	mov eax,dword ptr [esi+0x28]
	test eax,eax
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	int 3// TODO: 	mov dword ptr [esi],offset ZRefCounted::`vftable'
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CWvsContext::UI_OpenRevive
__SUB_CLASS_THIS0(005CC9B0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	cmp dword ptr [esi+0x3D80],0
	jne Block2

 Block1:
	call get_update_time
	mov dword ptr [esi+0x3D80],eax

 Block2:
	pop esi
	ret
}
}
// CUIStatChange::OnCreate
_SUB_EXCEPTION_HANDLER(46A010)
__SUB_CLASS_THIS(0046A010, __thiscall, 68510,  CUIStatChange, void, void*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_46A010
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x1C],1
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x34],ebx
	mov eax,offset _S_UIUIWINDOW2IMGRE__8
	cmp dword ptr [esi+0xC8],ebx
	jne Block2

 Block1:
	mov eax,offset _S_UIUIWINDOW2IMGRE__7

 Block2:
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<unsigned short>::AssignCStr
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],1
	cmp eax,ebx
	je Block4

 Block3:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block5

 Block4:
	xor eax,eax

 Block5:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block13

 Block6:
	add eax,8
	cmp eax,ebx
	je Block13

 Block7:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block9

 Block8:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block9:
	mov eax,dword ptr [esi+0x94]
	mov dword ptr [esi+0x94],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block11

 Block10:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block11:
	mov ecx,dword ptr [esi+0x94]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push 1
	push 0x49
	push 0x88
	push 0x7D0
	push esi
	call edx
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],2
	cmp eax,ebx
	je Block14

 Block12:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block15

 Block13:
	xor edi,edi
	jmp Block9

 Block14:
	xor eax,eax

 Block15:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block23

 Block16:
	add eax,8
	cmp eax,ebx
	je Block23

 Block17:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block19

 Block18:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block19:
	mov eax,dword ptr [esi+0x9C]
	mov dword ptr [esi+0x9C],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block21

 Block20:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block21:
	mov ecx,dword ptr [esi+0x9C]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push 1
	push 0x5B
	push 0x88
	push 0x7D1
	push esi
	call edx
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],3
	cmp eax,ebx
	je Block24

 Block22:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block25

 Block23:
	xor edi,edi
	jmp Block19

 Block24:
	xor eax,eax

 Block25:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block33

 Block26:
	add eax,8
	cmp eax,ebx
	je Block33

 Block27:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block29

 Block28:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block29:
	mov eax,dword ptr [esi+0xA4]
	mov dword ptr [esi+0xA4],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block31

 Block30:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block31:
	mov ecx,dword ptr [esi+0xA4]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push 1
	push 0x74
	push 0x88
	push 0x7D2
	push esi
	call edx
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],4
	cmp eax,ebx
	je Block34

 Block32:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block35

 Block33:
	xor edi,edi
	jmp Block29

 Block34:
	xor eax,eax

 Block35:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block43

 Block36:
	add eax,8
	cmp eax,ebx
	je Block43

 Block37:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block39

 Block38:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block39:
	mov eax,dword ptr [esi+0xAC]
	mov dword ptr [esi+0xAC],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block41

 Block40:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block41:
	mov ecx,dword ptr [esi+0xAC]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push 1
	push 0x86
	push 0x88
	push 0x7D3
	push esi
	call edx
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],5
	cmp eax,ebx
	je Block44

 Block42:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block45

 Block43:
	xor edi,edi
	jmp Block39

 Block44:
	xor eax,eax

 Block45:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block53

 Block46:
	add eax,8
	cmp eax,ebx
	je Block53

 Block47:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block49

 Block48:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block49:
	mov eax,dword ptr [esi+0xB4]
	mov dword ptr [esi+0xB4],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block51

 Block50:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block51:
	mov ecx,dword ptr [esi+0xB4]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push 1
	push 0x98
	push 0x88
	push 0x7D4
	push esi
	call edx
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],6
	cmp eax,ebx
	je Block54

 Block52:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block55

 Block53:
	xor edi,edi
	jmp Block49

 Block54:
	xor eax,eax

 Block55:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block63

 Block56:
	add eax,8
	cmp eax,ebx
	je Block63

 Block57:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block59

 Block58:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block59:
	mov eax,dword ptr [esi+0xBC]
	mov dword ptr [esi+0xBC],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block61

 Block60:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block61:
	mov ecx,dword ptr [esi+0xBC]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push 1
	push 0xAA
	push 0x88
	push 0x7D5
	push esi
	call edx
	push offset _S_UIBASICIMGBTCLOS__1
	lea ecx,[esp+0x2C]
	call ZXString<unsigned short>::AssignCStr
	push 0xADC
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0x34],7
	cmp eax,ebx
	je Block64

 Block62:
	mov ecx,eax
	call CCtrlButton::_ctor_default
	jmp Block65

 Block63:
	xor edi,edi
	jmp Block59

 Block64:
	xor eax,eax

 Block65:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block74

 Block66:
	add eax,8
	cmp eax,ebx
	je Block74

 Block67:
	lea edi,[eax-8]
	cmp edi,ebx
	je Block69

 Block68:
	lea eax,[edi+0xC]
	push eax
	call ebp

 Block69:
	mov eax,dword ptr [esi+0xC4]
	mov dword ptr [esi+0xC4],edi
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block71

 Block70:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CCtrlButton>::_ReleaseRaw

 Block71:
	mov ecx,dword ptr [esi+0xC4]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x28]
	lea eax,[esp+0x1C]
	push eax
	push ebx
	push 6
	push 0x8B
	push 2
	push esi
	call edx
	mov ecx,esi
	call CUIStatChange::SetButtons
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block73

 Block72:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block73:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 4

 Block74:
	xor edi,edi
	jmp Block69
}
}
// CWvsContext::SendChangeSlotPositionRequest
_SUB_EXCEPTION_HANDLER(5D9C10)
__SUB_CLASS_THIS(005D9C10, __thiscall, 8234,  CWvsContext, void, long, long, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D9C10
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	test ecx,ecx
	je Block3

 Block1:
	cmp dword ptr [ecx+0xC],0
	je Block3

 Block2:
	call CMacroSysMan::Stop

 Block3:
	cmp dword ptr [edi+0x20B8],0
	jne Block14

 Block4:
	mov eax,dword ptr [edi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block14

 Block5:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0x1F4
	jl Block14

 Block6:
	mov ebx,dword ptr [esp+0x38]
	test ebx,ebx
	jne Block13

 Block7:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block9

 Block8:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block10

 Block9:
	xor esi,esi

 Block10:
	test dword ptr [esi+0x178],0x400000
	je Block13

 Block11:
	lea ecx,[esp+0x38]
	push 0x11DE
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x30],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x40]
	add esp,8
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block14

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 0x10

 Block13:
	push 0x4D
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	mov esi,1
	mov dword ptr [esp+0x28],esi
	call get_update_time
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x30]
	push edx
	lea ecx,[esp+0x14]
	call COutPacket::Encode1
	mov eax,dword ptr [esp+0x34]
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	push ebx
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	mov ecx,dword ptr [esp+0x3C]
	push ecx
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x10]
	push edx
	call CClientSocket::SendPacket
	mov dword ptr [edi+0x20B8],esi
	call get_update_time
	lea ecx,[esp+0x14]
	mov dword ptr [edi+0x20BC],eax
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block14:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 0x10
}
}
// CWvsContext::SendSkillResetItemUseRequest
_SUB_EXCEPTION_HANDLER(5DE8C0)
__SUB_CLASS_THIS(005DE8C0, __thiscall, 8237,  CWvsContext, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DE8C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x24],esi
	mov eax,0x68DB8BAD
	imul dword ptr [esp+0x4C]
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xFA
	jne Block23

 Block1:
	xor ebp,ebp
	cmp dword ptr [esi+0x20B8],ebp
	jne Block23

 Block2:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block23

 Block3:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0xC8
	jl Block23

 Block4:
	mov ebx,dword ptr [esi+0x20CC]
	cmp ebx,ebp
	je Block23

 Block5:
	lea edi,[ebx+0x53D]
	mov ecx,edi
	mov dword ptr [esp+0x18],ebp
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x20],eax
	cmp eax,ebp
	je Block12

 Block6:
	lea edx,[esp+0x18]
	push edx
	lea eax,[esp+0x24]
	push eax
	mov ecx,edi
	call ZMap<long, long, long>::GetNext
	mov esi,dword ptr [eax]
	mov eax,0x68DB8BAD
	imul esi
	sar edx,0xC
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	imul eax,0x3E8
	mov edx,ecx
	sub edx,eax
	je Block10

 Block7:
	cmp ecx,0x7D1
	je Block10

 Block8:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push esi
	push ebx
	call CSkillInfo::IsSkillVisible
	test eax,eax
	je Block10

 Block9:
	add ebp,dword ptr [esp+0x18]

 Block10:
	cmp dword ptr [esp+0x20],0
	jne Block6

 Block11:
	test ebp,ebp
	jg Block13

 Block12:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x60],esp
	push 0x18D3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block23

 Block13:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x20],eax
	xor esi,esi
	mov dword ptr [esp+0x40],esi
	cmp eax,esi
	je Block24

 Block14:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	cmp eax,esi
	je Block24

 Block15:
	add eax,8
	cmp eax,esi
	je Block24

 Block16:
	add eax,0xFFFFFFF8
	mov dword ptr [esp+0x1C],eax
	cmp eax,esi
	je Block18

 Block17:
	add eax,0xC
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block18:
	lea ecx,[esp+0x14]
	push 0x1948
	mov ebx,1
	push ecx
	mov dword ptr [esp+0x48],ebx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push esi
	push esi
	push esi
	push esi
	push ecx
	mov ecx,esp
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x34],esp
	push edx
	mov byte ptr [esp+0x58],2
	mov dword ptr [ecx],esi
	call ZXString<char>::op_assign
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	jne Block20

 Block19:
	push 0x59
	lea ecx,[esp+0x2C]
	call COutPacket::_ctor_1
	mov byte ptr [esp+0x40],3
	call get_update_time
	push eax
	lea ecx,[esp+0x2C]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x48]
	push eax
	lea ecx,[esp+0x2C]
	call COutPacket::Encode2
	mov ecx,dword ptr [esp+0x4C]
	push ecx
	lea ecx,[esp+0x2C]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x28]
	push edx
	call CClientSocket::SendPacket
	mov ecx,dword ptr [esp+0x24]
	push ebx
	call CWvsContext::SetExclRequestSent
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x40],2
	call ZArray<unsigned char>::RemoveAll

 Block20:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x40],bl
	cmp eax,esi
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block22:
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>

 Block23:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 8

 Block24:
	mov dword ptr [esp+0x1C],esi
	jmp Block18
}
}
// CWvsContext::TryCloseUI
_SUB_EXCEPTION_HANDLER(5D8ED0)
__SUB_CLASS_THIS(005D8ED0, __thiscall, 8399,  CWvsContext, int32_t, CUIWnd*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D8ED0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block97

 Block1:
	lea esi,[eax+4]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x48]
	push offset CUIItem::ms_RTTI_CUIItem
	mov ecx,esi
	call edx
	test eax,eax
	je Block5

 Block2:
	lea eax,[esp+0x20]
	push 0x924
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block4:
	push 0
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIEquip::ms_RTTI_CUIEquip
	mov ecx,esi
	call eax
	test eax,eax
	je Block9

 Block6:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],1
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block8:
	push 1
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block9:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIStat::ms_RTTI_CUIStat
	mov ecx,esi
	call eax
	test eax,eax
	je Block13

 Block10:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],2
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block12:
	push 2
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block13:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUISkill::ms_RTTI_CUISkill
	mov ecx,esi
	call eax
	test eax,eax
	je Block17

 Block14:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],3
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block16:
	push 3
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block17:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUISkillEx::ms_RTTI_CUISkillEx
	mov ecx,esi
	call eax
	test eax,eax
	je Block21

 Block18:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],4
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block20:
	push 0x20
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block21:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIKeyConfig::ms_RTTI_CUIKeyConfig
	mov ecx,esi
	call eax
	test eax,eax
	je Block25

 Block22:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],5
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block24

 Block23:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block24:
	push 5
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block25:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIUserList::ms_RTTI_CUIUserList
	mov ecx,esi
	call eax
	test eax,eax
	je Block29

 Block26:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],6
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block28

 Block27:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block28:
	push 7
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block29:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIQuestInfo::ms_RTTI_CUIQuestInfo
	mov ecx,esi
	call eax
	test eax,eax
	je Block33

 Block30:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],7
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block32

 Block31:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block32:
	push 6
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block33:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIMedalQuestInfo::ms_RTTI_CUIMedalQuestInfo
	mov ecx,esi
	call eax
	test eax,eax
	je Block37

 Block34:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],8
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block36

 Block35:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block36:
	push 0x1E
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block37:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIUserInfo::ms_RTTI_CUIUserInfo
	mov ecx,esi
	call eax
	test eax,eax
	je Block41

 Block38:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],9
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block40

 Block39:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block40:
	push 0xA
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block41:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIPartySearch::ms_RTTI_CUIPartySearch
	mov ecx,esi
	call eax
	test eax,eax
	je Block45

 Block42:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0xA
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block44

 Block43:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block44:
	push 0x15
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block45:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIMonsterBook::ms_RTTI_CUIMonsterBook
	mov ecx,esi
	call eax
	test eax,eax
	je Block49

 Block46:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0xB
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block48

 Block47:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block48:
	push 9
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block49:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIItemMaker::ms_RTTI_CUIItemMaker
	mov ecx,esi
	call eax
	test eax,eax
	je Block53

 Block50:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0xC
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block52

 Block51:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block52:
	push 0x16
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block53:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIRanking::ms_RTTI_CUIRanking
	mov ecx,esi
	call eax
	test eax,eax
	je Block57

 Block54:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0xD
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block56

 Block55:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block56:
	push 0x19
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block57:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIFamily::ms_RTTI_CUIFamily
	mov ecx,esi
	call eax
	test eax,eax
	je Block61

 Block58:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0xE
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block60

 Block59:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block60:
	push 0x1A
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block61:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIFamilyChart::ms_RTTI_CUIFamilyChart
	mov ecx,esi
	call eax
	test eax,eax
	je Block65

 Block62:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0xF
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block64

 Block63:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block64:
	push 0x1B
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block65:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIOperatorBoard::ms_RTTI_CUIOperatorBoard
	mov ecx,esi
	call eax
	test eax,eax
	je Block69

 Block66:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x10
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block68

 Block67:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block68:
	push 0x1C
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block69:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIOpBoardState::ms_RTTI_CUIOpBoardState
	mov ecx,esi
	call eax
	test eax,eax
	je Block73

 Block70:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x11
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block72

 Block71:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block72:
	push 0x1D
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block73:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIWebEvent::ms_RTTI_CUIWebEvent
	mov ecx,esi
	call eax
	test eax,eax
	je Block77

 Block74:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x12
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block76

 Block75:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block76:
	push 0x1F
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block77:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIBattleRecord::ms_RTTI_CUIBattleRecord
	mov ecx,esi
	call eax
	test eax,eax
	je Block81

 Block78:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x13
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block80

 Block79:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block80:
	push 0x23
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block81:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIGuildBBS::ms_RTTI_CUIGuildBBS
	mov ecx,esi
	call eax
	test eax,eax
	je Block85

 Block82:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x14
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block84

 Block83:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block84:
	push 0x27
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block85:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIAccountMoreInfo::ms_RTTI_CUIAccountMoreInfo
	mov ecx,esi
	call eax
	test eax,eax
	je Block89

 Block86:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x15
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block88

 Block87:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block88:
	push 0x28
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block89:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIFindFriend::ms_RTTI_CUIFindFriend
	mov ecx,esi
	call eax
	test eax,eax
	je Block93

 Block90:
	lea ecx,[esp+0x20]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x16
	call play_ui_sound
	mov eax,dword ptr [esp+0x24]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block92

 Block91:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block92:
	push 0x29
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block93:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x48]
	push offset CUIDragonBox::ms_RTTI_CUIDragonBox
	mov ecx,esi
	call eax
	test eax,eax
	je Block97

 Block94:
	lea ecx,[esp+0xC]
	push 0x924
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push eax
	mov dword ptr [esp+0x1C],0x17
	call play_ui_sound
	mov eax,dword ptr [esp+0x10]
	add esp,4
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block96

 Block95:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block96:
	push 0x2A
	mov ecx,edi
	call CWvsContext::UI_Close
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4

 Block97:
	xor eax,eax
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4
}
}
// CWvsContext::CFriend::UpdateFriend
__SUB_CLASS_THIS(006125D0, __thiscall, 8446,  CWvsContext::CFriend, void, CInPacket&, int32_t) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push esi
	mov esi,ecx
	push edi
	mov ecx,ebx
	call CInPacket::Decode4
	push eax
	mov ecx,esi
	call CWvsContext::CFriend::FindIndex_0
	mov edi,eax
	test edi,edi
	jl Block3

 Block1:
	mov eax,dword ptr [esi+4]
	mov ecx,edi
	imul ecx,0x27
	add ecx,dword ptr [esi]
	push ebp
	push ebx
	lea ebp,[eax+edi*4]
	call GW_Friend::Decode
	mov ecx,ebx
	call CInPacket::Decode1
	cmp dword ptr [esp+0x18],0
	movzx ecx,al
	mov dword ptr [ebp],ecx
	pop ebp
	je Block3

 Block2:
	push edi
	mov ecx,esi
	call CWvsContext::CFriend::UpdateBlockedFriend

 Block3:
	pop edi
	pop esi
	pop ebx
	ret 8
}
}
// CWvsContext::OnBridleMobCatchFail
_SUB_EXCEPTION_HANDLER(5D9A80)
__SUB_CLASS_THIS(005D9A80, __thiscall, 8125,  CWvsContext, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D9A80
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call CInPacket::Decode1
	mov ecx,esi
	mov byte ptr [esp+0x2C],al
	call CInPacket::Decode4
	mov ecx,esi
	mov edi,eax
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edi
	call CItemInfo::GetBridleItem
	xor ebx,ebx
	cmp eax,ebx
	je Block3

 Block1:
	mov ecx,dword ptr [eax+0x34]
	cmp ecx,ebx
	je Block3

 Block2:
	mov edx,ecx
	cmp byte ptr [ecx],bl
	jne Block4

 Block3:
	mov edx,offset _S_

 Block4:
	xor esi,esi
	mov dword ptr [esp+0x10],esi
	cmp edx,ebx
	je Block8

 Block5:
	mov eax,edx
	lea esi,[eax+1]

 Block6:
	mov cl,byte ptr [eax]
	inc eax
	cmp cl,bl
	jne Block6

 Block7:
	sub eax,esi
	mov esi,eax
	push esi
	push edx
	push ebx
	push esi
	lea ecx,[esp+0x20]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x14]
	call ZXString<char>::ReleaseBuffer
	mov esi,dword ptr [esp+0x10]

 Block8:
	movzx eax,byte ptr [esp+0x2C]
	sub eax,ebx
	mov dword ptr [esp+0x24],ebx
	je Block14

 Block9:
	sub eax,1
	jne Block19

 Block10:
	cmp esi,ebx
	je Block13

 Block11:
	cmp byte ptr [esi],bl
	je Block13

 Block12:
	lea eax,[esp+0x10]
	push 0xC
	push eax
	call CHATLOG_ADD
	add esp,8
	jmp Block19

 Block13:
	lea ecx,[esp+0x14]
	push 0x110F
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x2C],2
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x1C]
	add esp,8
	jmp Block17

 Block14:
	lea edx,[esp+0x18]
	push 0x110E
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x24],1
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	je Block16

 Block15:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push ebx
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],ebx
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block16:
	mov eax,dword ptr [esp+0x18]

 Block17:
	mov byte ptr [esp+0x24],bl
	cmp eax,ebx
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block19:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	cmp esi,ebx
	je Block21

 Block20:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block21:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret 4
}
}
// CWvsContext::SendStatChangeItemUseRequestByPetQ
_SUB_EXCEPTION_HANDLER(5DE400)
__SUB_CLASS_THIS(005DE400, __thiscall, 8243,  CWvsContext, void, _LARGE_INTEGER, long, long, int32_t, unsigned char, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5DE400
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block2

 Block1:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block3

 Block2:
	xor edi,edi

 Block3:
	test dword ptr [edi+0x178],0x400
	jne Block11

 Block4:
	mov edi,dword ptr [esp+0x3C]
	push 1
	push edi
	mov ecx,esi
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block11

 Block5:
	cmp dword ptr [esi+0x20B8],0
	jne Block11

 Block6:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block11

 Block7:
	mov ebx,dword ptr [esp+0x48]
	call get_update_time
	sub eax,dword ptr [esi+ebx*4+0x20C0]
	cmp eax,0xC8
	jl Block11

 Block8:
	push 0xCB
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	push 8
	lea edx,[esp+0x34]
	push edx
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x30],0
	call COutPacket::EncodeBuffer
	mov eax,dword ptr [esp+0x44]
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode1
	call get_update_time
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x38]
	push ecx
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	push edi
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x10]
	push edx
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	push 0x29
	push edi
	mov dword ptr [esi+ebx*4+0x20C0],eax
	call play_item_sound
	add esp,8
	cmp dword ptr [esp+0x40],0
	je Block10

 Block9:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov dword ptr [eax+0x3AD0],0

 Block10:
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block11:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 0x1C
}
}
// CWvsContext::SendItemOptionUpgradeItemUseRequest
_SUB_EXCEPTION_HANDLER(5D6000)
__SUB_CLASS_THIS(005D6000, __thiscall, 8241,  CWvsContext, void, long, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D6000
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x20B8],0
	jne Block10

 Block1:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block10

 Block2:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jl Block10

 Block3:
	push 0x5F
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x24],0
	call get_update_time
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x2C]
	push edx
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+0x10]
	call COutPacket::Encode2
	mov edi,dword ptr [esp+0x34]
	push edi
	lea ecx,[esp+0x10]
	call COutPacket::Encode1
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	mov dword ptr [esi+0x20BC],eax
	test edi,edi
	je Block9

 Block4:
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	test eax,eax
	je Block7

 Block5:
	mov edx,dword ptr [eax+4]
	lea ecx,[eax+4]
	mov eax,dword ptr [edx+0x48]
	push offset CUIEnchantDlg::ms_RTTI_CUIEnchantDlg
	call eax
	test eax,eax
	je Block7

 Block6:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	jmp Block8

 Block7:
	xor ecx,ecx

 Block8:
	call CUIEnchantDlg::ShowEffect

 Block9:
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block10:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 0xC
}
}
// COpenGatePool::TryEnterOpenGate
_SUB_EXCEPTION_HANDLER(289860)
__SUB_CLASS_THIS(00289860, __thiscall, 51993,  COpenGatePool, int32_t, NakedParam<tagPOINT>, tagPOINT&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_289860
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x60
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x74]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edx,dword ptr [eax+0x3604]
	mov eax,dword ptr [eax+0x20B4]
	mov ebx,dword ptr [ZImports::_InterlockedDecrement]
	mov dword ptr [esp+0x14],eax
	mov eax,dword ptr [ecx+0x28]
	mov dword ptr [esp+0x20],edx
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block28

 Block1:
	lea ecx,[esp+0x1C]
	push ecx
	call ZList<ZRef<COpenGatePool::OPENGATE>>::GetNext
	mov esi,dword ptr [eax+4]
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	xor edi,edi
	add esp,4
	mov dword ptr [esp+0x28],esi
	cmp esi,edi
	je Block3

 Block2:
	lea edx,[esi-0xC]
	push edx
	call ebp

 Block3:
	mov dword ptr [esp+0x7C],edi
	cmp dword ptr [esi+0x24],edi
	je Block22

 Block4:
	mov eax,dword ptr [esi+0x14]
	cmp eax,edi
	je Block11

 Block5:
	cmp eax,dword ptr [esp+0x20]
	je Block10

 Block6:
	mov ecx,dword ptr [esi+8]
	cmp ecx,dword ptr [esp+0x14]
	je Block10

 Block7:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x80],0xFFFFFFFF
	call ebx
	test eax,eax
	jne Block25

 Block8:
	push edi
	call ebp
	test esi,esi
	je Block25

 Block9:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax
	jmp Block25

 Block10:
	cmp eax,edi
	jne Block12

 Block11:
	mov ecx,dword ptr [esp+0x14]
	cmp dword ptr [esi+8],ecx
	jne Block7

 Block12:
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	lea edx,[eax+0x32]
	push edx
	lea edx,[ecx+0x14]
	push edx
	add eax,0xFFFFFFCE
	push eax
	add ecx,0xFFFFFFEC
	push ecx
	lea eax,[esp+0x64]
	push eax
	call SetRect
	mov ecx,dword ptr [esp+0x88]
	mov edx,dword ptr [esp+0x84]
	push ecx
	push edx
	lea eax,[esp+0x5C]
	push eax
	call PtInRect
	test eax,eax
	je Block22

 Block13:
	mov dword ptr [esp+0x30],edi
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	lea edi,[esi+8]
	push edi
	add ecx,0x30
	mov byte ptr [esp+0x84],1
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	test eax,eax
	jne Block19

 Block14:
	mov byte ptr [esp+0x7C],al
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block7

 Block15:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call ebx
	test eax,eax
	jne Block18

 Block16:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block18

 Block17:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block18:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	mov dword ptr [esp+0x30],0
	jmp Block7

 Block19:
	mov ecx,dword ptr [esp+0x14]
	cmp dword ptr [edi],ecx
	mov edi,dword ptr [esp+0x30]
	je Block36

 Block20:
	mov edx,dword ptr [esi+0x14]
	cmp edx,dword ptr [edi+0x14]
	je Block36

 Block21:
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x7C],0
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x7C],0xFFFFFFFF
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>
	jmp Block26

 Block22:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x80],0xFFFFFFFF
	call ebx
	test eax,eax
	jne Block25

 Block23:
	push edi
	call ebp
	test esi,esi
	je Block25

 Block24:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block25:
	mov dword ptr [esp+0x28],0

 Block26:
	cmp dword ptr [esp+0x1C],0
	jne Block1

 Block27:
	mov ecx,dword ptr [esp+0x18]

 Block28:
	mov eax,dword ptr [ecx+0x54]
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block59

 Block29:
	nop

 Block30:
	lea ecx,[esp+0x1C]
	push ecx
	call ZList<ZRef<COpenGatePool::OPENGATE>>::GetNext
	mov esi,dword ptr [eax+4]
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	add esp,4
	mov dword ptr [esp+0x28],esi
	test esi,esi
	je Block32

 Block31:
	lea edx,[esi-0xC]
	push edx
	call ebp

 Block32:
	cmp dword ptr [esi+0x24],0
	mov dword ptr [esp+0x7C],3
	jne Block43

 Block33:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x80],0xFFFFFFFF
	call ebx
	test eax,eax
	jne Block57

 Block34:
	push edi
	call ebp
	test esi,esi
	je Block57

 Block35:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx
	jmp Block57

 Block36:
	mov ecx,dword ptr [edi+0xC]
	mov eax,dword ptr [esp+0x8C]
	mov dword ptr [eax],ecx
	mov edx,dword ptr [edi+0x10]
	push 0x9D
	lea ecx,[esp+0x38]
	mov dword ptr [eax+4],edx
	call COutPacket::_ctor_1
	mov eax,dword ptr [esi+8]
	push eax
	lea ecx,[esp+0x38]
	mov byte ptr [esp+0x80],2
	call COutPacket::Encode4
	movzx ecx,word ptr [esi+0xC]
	push ecx
	lea ecx,[esp+0x38]
	call COutPacket::Encode2
	movzx edx,word ptr [esi+0x10]
	push edx
	lea ecx,[esp+0x38]
	call COutPacket::Encode2
	push 1
	lea ecx,[esp+0x38]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x34]
	push eax
	call CClientSocket::SendPacket
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov ebp,eax
	mov dword ptr [eax+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x38]
	mov dword ptr [ebp+0x20BC],eax
	mov byte ptr [esp+0x7C],1
	call ZArray<unsigned char>::RemoveAll
	add edi,0xFFFFFFF0
	lea ebp,[edi+4]
	push ebp
	mov byte ptr [esp+0x80],0
	call ebx
	test eax,eax
	jne Block39

 Block37:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block39

 Block38:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block39:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x80],0xFFFFFFFF
	call ebx
	test eax,eax
	jne Block42

 Block40:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block42

 Block41:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block42:
	mov eax,1
	jmp Block60

 Block43:
	mov eax,dword ptr [esi+0x14]
	test eax,eax
	je Block47

 Block44:
	cmp eax,dword ptr [esp+0x20]
	je Block46

 Block45:
	mov ecx,dword ptr [esi+8]
	cmp ecx,dword ptr [esp+0x14]
	jne Block53

 Block46:
	test eax,eax
	jne Block48

 Block47:
	mov edx,dword ptr [esp+0x14]
	cmp dword ptr [esi+8],edx
	jne Block33

 Block48:
	mov eax,dword ptr [esi+0x10]
	mov ecx,dword ptr [esi+0xC]
	lea edx,[eax+0x32]
	push edx
	lea edx,[ecx+0x14]
	push edx
	add eax,0xFFFFFFCE
	push eax
	add ecx,0xFFFFFFEC
	push ecx
	lea eax,[esp+0x74]
	push eax
	call SetRect
	mov ecx,dword ptr [esp+0x88]
	mov edx,dword ptr [esp+0x84]
	push ecx
	push edx
	lea eax,[esp+0x6C]
	push eax
	call PtInRect
	test eax,eax
	je Block54

 Block49:
	mov dword ptr [esp+0x30],0
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	lea edi,[esi+8]
	push edi
	add ecx,4
	mov byte ptr [esp+0x84],4
	call ZMap<unsigned long, ZRef<COpenGatePool::OPENGATE>, unsigned long>::GetAt
	test eax,eax
	je Block52

 Block50:
	mov edx,dword ptr [esp+0x14]
	mov eax,dword ptr [esp+0x30]
	cmp dword ptr [edi],edx
	je Block61

 Block51:
	mov ecx,dword ptr [esi+0x14]
	cmp ecx,dword ptr [eax+0x14]
	je Block61

 Block52:
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x7C],3
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>

 Block53:
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x7C],0xFFFFFFFF
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>
	jmp Block58

 Block54:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x80],0xFFFFFFFF
	call ebx
	test eax,eax
	jne Block57

 Block55:
	push edi
	call ebp
	test esi,esi
	je Block57

 Block56:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block57:
	mov dword ptr [esp+0x28],0

 Block58:
	cmp dword ptr [esp+0x1C],0
	jne Block30

 Block59:
	xor eax,eax

 Block60:
	mov ecx,dword ptr [esp+0x74]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x6C
	ret 0xC

 Block61:
	mov edx,dword ptr [eax+0xC]
	mov ecx,dword ptr [esp+0x8C]
	mov dword ptr [ecx],edx
	mov eax,dword ptr [eax+0x10]
	mov dword ptr [ecx+4],eax
	push 0x9D
	lea ecx,[esp+0x48]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [esi+8]
	push ecx
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x80],5
	call COutPacket::Encode4
	movzx edx,word ptr [esi+0xC]
	push edx
	lea ecx,[esp+0x48]
	call COutPacket::Encode2
	movzx eax,word ptr [esi+0x10]
	push eax
	lea ecx,[esp+0x48]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x48]
	call COutPacket::Encode1
	lea ecx,[esp+0x44]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov esi,eax
	mov dword ptr [eax+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x48]
	mov dword ptr [esi+0x20BC],eax
	mov byte ptr [esp+0x7C],4
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x7C],3
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x7C],0xFFFFFFFF
	call ZRef<COpenGatePool::OPENGATE>::~ZRef<COpenGatePool::OPENGATE>
	mov eax,1
	jmp Block60
}
}
// CWvsContext::GetBattleTeamMarkCanvas
_SUB_EXCEPTION_HANDLER(60CC00)
__SUB_CLASS_THIS(0060CC00, __thiscall, 8192,  CWvsContext, _x_com_ptr<IWzCanvas>*, _x_com_ptr<IWzCanvas>*, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_60CC00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x64
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	xor esi,esi
	mov dword ptr [ebp-0x30],esi
	mov eax,dword ptr [ebp+8]
	mov dword ptr [eax],esi
	mov ecx,1
	mov dword ptr [ebp-0x30],ecx
	mov dword ptr [ebp-0x18],esi
	mov eax,dword ptr [ebp+0xC]
	mov dword ptr [ebp-4],ecx
	cmp eax,esi
	jne Block2

 Block1:
	lea ecx,[ebp-0x14]
	push 0x19C9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	lea edx,[ebp-0x18]
	mov byte ptr [ebp-4],2
	push edx
	jmp Block4

 Block2:
	cmp eax,ecx
	jne Block6

 Block3:
	lea eax,[ebp-0x14]
	push 0x19CA
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0x18]
	mov byte ptr [ebp-4],3
	push ecx

 Block4:
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x14]
	add esp,8
	mov byte ptr [ebp-4],1
	cmp eax,esi
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x50]
	push edx
	call edi
	lea eax,[ebp-0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block8

 Block7:
	push eax
	call _com_issue_error

 Block8:
	lea ecx,[ebp-0x40]
	push ecx
	mov byte ptr [ebp-4],4
	call edi
	lea edx,[ebp-0x40]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block10

 Block9:
	push eax
	call _com_issue_error

 Block10:
	mov eax,dword ptr [ebp-0x18]
	push esi
	push esi
	push 0xFFFFFFFF
	push eax
	push esi
	push esi
	mov byte ptr [ebp-4],5
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov eax,dword ptr [ebp-0x18]
	mov esi,esp
	push 0
	push 0
	lea ecx,[ebp-0x50]
	push ecx
	lea edx,[ebp-0x40]
	push edx
	push 0x3FFFFFFF
	push esi
	push 0xFFFFFFFF
	push eax
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x2C],esp
	mov ecx,esp
	push esi
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],6
	jne Block12

 Block11:
	push 0x80004003
	call _com_issue_error

 Block12:
	lea ecx,[ebp-0x70]
	push ecx
	mov byte ptr [ebp-4],5
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],7
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x14]
	mov dword ptr [ebp-0x14],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block15

 Block13:
	cmp eax,0x80004002
	je Block15

 Block14:
	push eax
	call _com_issue_error

 Block15:
	mov esi,8
	mov byte ptr [ebp-4],9
	cmp word ptr [ebp-0x70],si
	jne Block18

 Block16:
	mov eax,dword ptr [ebp-0x68]
	xor edx,edx
	mov word ptr [ebp-0x70],dx
	test eax,eax
	je Block19

 Block17:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block19

 Block18:
	lea eax,[ebp-0x70]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block19:
	mov byte ptr [ebp-4],0xA
	cmp word ptr [ebp-0x40],si
	jne Block22

 Block20:
	mov eax,dword ptr [ebp-0x38]
	xor ecx,ecx
	mov word ptr [ebp-0x40],cx
	test eax,eax
	je Block23

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block22:
	lea edx,[ebp-0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block23:
	mov byte ptr [ebp-4],0xB
	cmp word ptr [ebp-0x50],si
	jne Block26

 Block24:
	xor eax,eax
	mov word ptr [ebp-0x50],ax
	mov eax,dword ptr [ebp-0x48]
	test eax,eax
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea ecx,[ebp-0x50]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block27:
	cmp dword ptr [ebp-0x14],0
	je Block50

 Block28:
	lea edx,[ebp-0x2C]
	push 0x3D0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov esi,dword ptr [ebp+8]
	mov eax,dword ptr [eax]
	push 0
	push esi
	push eax
	mov byte ptr [ebp-4],0xC
	call PcCreate_IWzCanvas
	mov eax,dword ptr [ebp-0x2C]
	add esp,0xC
	mov byte ptr [ebp-4],0xB
	test eax,eax
	je Block30

 Block29:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block30:
	lea eax,[ebp-0x28]
	push eax
	call edi
	lea ecx,[ebp-0x28]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block32

 Block31:
	push eax
	call _com_issue_error

 Block32:
	lea edx,[ebp-0x60]
	push edx
	mov byte ptr [ebp-4],0xD
	call edi
	lea eax,[ebp-0x60]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block34

 Block33:
	push eax
	call _com_issue_error

 Block34:
	mov ecx,dword ptr [esi]
	mov byte ptr [ebp-4],0xE
	test ecx,ecx
	jne Block36

 Block35:
	push 0x80004003
	call _com_issue_error

 Block36:
	lea edx,[ebp-0x28]
	push edx
	lea eax,[ebp-0x60]
	push eax
	push 0x11
	push 0x11
	call IWzCanvas::Create
	mov edi,8
	mov byte ptr [ebp-4],0xD
	cmp word ptr [ebp-0x60],di
	jne Block39

 Block37:
	mov eax,dword ptr [ebp-0x58]
	xor ecx,ecx
	mov word ptr [ebp-0x60],cx
	test eax,eax
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block40

 Block39:
	lea edx,[ebp-0x60]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block40:
	mov byte ptr [ebp-4],0xB
	cmp word ptr [ebp-0x28],di
	jne Block43

 Block41:
	xor eax,eax
	mov word ptr [ebp-0x28],ax
	mov eax,dword ptr [ebp-0x20]
	test eax,eax
	je Block44

 Block42:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block44

 Block43:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block44:
	mov edx,3
	mov word ptr [ebp-0x28],dx
	mov dword ptr [ebp-0x20],0xFF
	mov ecx,dword ptr [esi]
	mov byte ptr [ebp-4],0xF
	test ecx,ecx
	jne Block46

 Block45:
	push 0x80004003
	call _com_issue_error

 Block46:
	mov edx,dword ptr [ebp-0x14]
	lea eax,[ebp-0x28]
	push eax
	push edx
	push 0
	push 0
	call IWzCanvas::Copy
	mov byte ptr [ebp-4],0xB
	cmp word ptr [ebp-0x28],di
	jne Block49

 Block47:
	xor eax,eax
	mov word ptr [ebp-0x28],ax
	mov eax,dword ptr [ebp-0x20]
	test eax,eax
	je Block51

 Block48:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block51

 Block49:
	lea ecx,[ebp-0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block51

 Block50:
	mov esi,dword ptr [ebp+8]

 Block51:
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block53

 Block52:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block53:
	mov eax,dword ptr [ebp-0x18]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block55

 Block54:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block55:
	mov eax,esi
	lea esp,[ebp-0x7C]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 8
}
}
// CWvsContext::AskWhetherUsePamsSong
_SUB_EXCEPTION_HANDLER(5D74F0)
__SUB_CLASS_THIS0(005D74F0, __thiscall, 8080,  CWvsContext, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5D74F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xB4
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xB8]
	mov dword ptr fs:[0],eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+4],0
	call CUIPamsSong::_ctor_default
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0xC0],0
	call CDialog::DoModal
	cmp eax,1
	jne Block2

 Block1:
	mov byte ptr [esp+4],al

 Block2:
	push 0xDC
	lea ecx,[esp+0xC]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+4]
	push eax
	lea ecx,[esp+0xC]
	mov byte ptr [esp+0xC4],1
	call COutPacket::Encode1
	lea ecx,[esp+8]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+0xC]
	mov byte ptr [esp+0xC0],0
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0xC0],0xFFFFFFFF
	call CUIPamsSong::~CUIPamsSong
	mov ecx,dword ptr [esp+0xB8]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0xC0
	ret
}
}
// CWvsContext::IsConnected
__SUB(005F0AF0, __cdecl, 8391,  int32_t, unsigned long, unsigned long) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	mov eax,0x431BDE83
	mul ecx
	sub esp,8
	mov eax,edx
	push esi
	shr eax,0x12
	xor edx,edx
	mov esi,0x64
	div esi
	cmp edx,9
	je Block7

 Block1:
	mov esi,dword ptr [esp+0x14]
	mov eax,0x431BDE83
	mul esi
	mov eax,edx
	push edi
	shr eax,0x12
	xor edx,edx
	mov edi,0x64
	div edi
	pop edi
	cmp edx,9
	je Block7

 Block2:
	mov eax,0xD1B71759
	mul ecx
	shr edx,0xD
	cmp edx,0x4E29
	je Block7

 Block3:
	mov eax,0xD1B71759
	mul esi
	shr edx,0xD
	cmp edx,0x4E29
	je Block7

 Block4:
	mov eax,0x6B5FCA6B
	mul ecx
	lea eax,[esp+4]
	push eax
	lea ecx,[esp+0x14]
	shr edx,0x16
	push ecx
	mov ecx,offset CWvsContext::ms_mAreaCode
	mov dword ptr [esp+0x18],edx
	call ZMap<unsigned long, long, unsigned long>::GetAt
	test eax,eax
	je Block7

 Block5:
	mov eax,0x6B5FCA6B
	mul esi
	shr edx,0x16
	mov dword ptr [esp+0x10],edx
	lea edx,[esp+8]
	push edx
	lea eax,[esp+0x14]
	push eax
	mov ecx,offset CWvsContext::ms_mAreaCode
	call ZMap<unsigned long, long, unsigned long>::GetAt
	test eax,eax
	je Block7

 Block6:
	mov ecx,dword ptr [esp+4]
	xor eax,eax
	cmp ecx,dword ptr [esp+8]
	pop esi
	sete al
	add esp,8
	ret

 Block7:
	xor eax,eax
	pop esi
	add esp,8
	ret
}
}
// CWvsContext::SendConsumeCashItemUseRequest
_SUB_EXCEPTION_HANDLER(5EB3E0)
// 9F0798
static uint8_t _SUB_5EB3E0_LOOKUP_TABLE_0[67] = {
0, 0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
14, 15, 16, 17, 18, 19, 20, 21, 42, 42, 22, 42, 42, 23, 42, 24, 
42, 0, 42, 25, 26, 27, 28, 29, 30, 31, 32, 42, 42, 42, 42, 42, 
42, 33, 34, 42, 35, 12, 36, 37, 42, 42, 42, 38, 19, 19, 39, 40, 
42, 42, 41, 
};
__SUB_CLASS_THIS(005EB3E0, __thiscall, 8245,  CWvsContext, void, long, long, long, NakedParam<ZXString<char>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5EB3E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x224
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x238]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x5C],esi
	xor ebx,ebx
	mov dword ptr [esp+0x14],ebx
	mov edi,dword ptr [_D_G_PSTAGE+4]
	mov dword ptr [esp+0x240],ebx
	cmp edi,ebx
	je Block22

 Block1:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block22

 Block2:
	cmp dword ptr [esi+0x20B8],ebx
	jne Block5

 Block3:
	mov eax,dword ptr [esi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block5

 Block4:
	call get_update_time
	sub eax,dword ptr [esi+0x20BC]
	cmp eax,0x1F4
	jge Block6

 Block5:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x78],esp
	push 0x136
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block22

 Block6:
	push 0x55
	lea ecx,[esp+0x3C]
	call COutPacket::_ctor_1
	mov byte ptr [esp+0x240],1
	call get_update_time
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode4
	mov ebp,dword ptr [esp+0x248]
	push ebp
	lea ecx,[esp+0x3C]
	call COutPacket::Encode2
	mov esi,dword ptr [esp+0x24C]
	push esi
	lea ecx,[esp+0x3C]
	call COutPacket::Encode4
	push esi
	call get_consume_cash_item_type
	mov ecx,eax
	lea eax,[ecx-0xC]
	add esp,4
	mov dword ptr [esp+0x30],ecx
	cmp eax,0x42
	ja Block21

 Block7:
	movzx eax,byte ptr [eax+_SUB_5EB3E0_LOOKUP_TABLE_0]
	cmp EAX, 0
je Block42
cmp EAX, 1
je Block90
cmp EAX, 2
je Block193
cmp EAX, 3
je Block212
cmp EAX, 4
je Block232
cmp EAX, 5
je Block246
cmp EAX, 6
je Block261
cmp EAX, 7
je Block185
cmp EAX, 8
je Block342
cmp EAX, 9
je Block268
cmp EAX, 10
je Block289
cmp EAX, 11
je Block344
cmp EAX, 12
je Block349
cmp EAX, 13
je Block359
cmp EAX, 14
je Block500
cmp EAX, 15
je Block365
cmp EAX, 16
je Block366
cmp EAX, 17
je Block374
cmp EAX, 18
je Block380
cmp EAX, 19
je Block497
cmp EAX, 20
je Block487
cmp EAX, 21
je Block368
cmp EAX, 22
je Block376
cmp EAX, 23
je Block345
cmp EAX, 24
je Block94
cmp EAX, 25
je Block394
cmp EAX, 26
je Block413
cmp EAX, 27
je Block431
cmp EAX, 28
je Block454
cmp EAX, 29
je Block464
cmp EAX, 30
je Block474
cmp EAX, 31
je Block117
cmp EAX, 32
je Block131
cmp EAX, 33
je Block9
cmp EAX, 34
je Block8
cmp EAX, 35
je Block141
cmp EAX, 36
je Block149
cmp EAX, 37
je Block165
cmp EAX, 38
je Block176
cmp EAX, 39
je Block145
cmp EAX, 40
je Block325
cmp EAX, 41
je Block490
cmp EAX, 42
je Block21


 Block8:
	mov ecx,dword ptr [esp+0x250]
	push ecx
	lea ecx,[esp+0x3C]
	call COutPacket::Encode2
	jmp Block497

 Block9:
	push 0xF0
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],2
	cmp eax,ebx
	je Block25

 Block10:
	push esi
	mov ecx,eax
	call CSpeakerWorldDlgEx::_ctor_0
	cmp eax,ebx
	je Block25

 Block11:
	lea esi,[eax+8]
	cmp esi,ebx
	je Block25

 Block12:
	add esi,0xFFFFFFF8
	mov dword ptr [esp+0x58],esi
	cmp esi,ebx
	je Block14

 Block13:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block14:
	mov ecx,esi
	mov byte ptr [esp+0x240],3
	call CDialog::DoModal
	cmp eax,1
	jne Block20

 Block15:
	push offset ZXString<char>::~ZXString<char>
	push offset ZXString<char>::_ctor_default
	push 3
	push 4
	lea eax,[esp+0x58]
	push eax
	call __eh_vector_ctor_iterator
	lea ecx,[esp+0x30]
	push ecx
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x54]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,esi
	mov byte ptr [esp+0x250],4
	call CSpeakerWorldDlgEx::GetResult
	push ebx
	push ebx
	lea ecx,[esp+0x50]
	call ZXString<char>::TrimRight
	mov ecx,eax
	call ZXString<char>::TrimLeft
	mov ecx,eax
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block26

 Block16:
	push ebx
	push ebx
	lea ecx,[esp+0x54]
	call ZXString<char>::TrimRight
	mov ecx,eax
	call ZXString<char>::TrimLeft
	mov ecx,eax
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block26

 Block17:
	push ebx
	push ebx
	lea ecx,[esp+0x58]
	call ZXString<char>::TrimRight
	mov ecx,eax
	call ZXString<char>::TrimLeft
	mov ecx,eax
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block26

 Block18:
	push offset ZXString<char>::~ZXString<char>
	push 3
	push 4
	lea edx,[esp+0x54]
	push edx

 Block19:
	mov byte ptr [esp+0x250],3
	call __eh_vector_dtor_iterator

 Block20:
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],1
	call ZRef<CSpeakerWorldDlgEx>::~ZRef<CSpeakerWorldDlgEx>

 Block21:
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x240],bl
	call ZArray<unsigned char>::RemoveAll

 Block22:
	mov eax,dword ptr [esp+0x254]
	mov dword ptr [esp+0x240],0xFFFFFFFF
	cmp eax,ebx
	je Block24

 Block23:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block24:
	mov ecx,dword ptr [esp+0x238]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x230
	ret 0x10

 Block25:
	xor esi,esi
	mov dword ptr [esp+0x58],esi
	jmp Block14

 Block26:
	mov eax,dword ptr [esp+0x48]
	cmp eax,ebx
	je Block29

 Block27:
	cmp dword ptr [eax-4],0x3C
	jle Block29

 Block28:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x11E
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	push offset ZXString<char>::~ZXString<char>
	push 3
	push 4
	lea ecx,[esp+0x54]
	push ecx
	jmp Block19

 Block29:
	mov eax,dword ptr [esp+0x4C]
	cmp eax,ebx
	je Block32

 Block30:
	cmp dword ptr [eax-4],0x3C
	jle Block32

 Block31:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x11E
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	push offset ZXString<char>::~ZXString<char>
	push 3
	push 4
	lea eax,[esp+0x54]
	push eax
	jmp Block19

 Block32:
	mov eax,dword ptr [esp+0x50]
	cmp eax,ebx
	je Block35

 Block33:
	cmp dword ptr [eax-4],0x3C
	jle Block35

 Block34:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x11E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block18

 Block35:
	lea ecx,[esp+0x50]
	mov edi,3
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block38

 Block36:
	lea ecx,[esp+0x4C]
	mov edi,2
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block38

 Block37:
	mov edi,1

 Block38:
	push edi
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	cmp edi,ebx
	jle Block41

 Block39:
	lea esi,[esp+0x48]

 Block40:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push esi
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	add esi,4
	sub edi,1
	jne Block40

 Block41:
	mov eax,dword ptr [esp+0x30]
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	push offset ZXString<char>::~ZXString<char>
	push 3
	push 4
	lea ecx,[esp+0x54]
	push ecx
	mov byte ptr [esp+0x250],3
	call __eh_vector_dtor_iterator
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],1
	call ZRef<CSpeakerWorldDlgEx>::~ZRef<CSpeakerWorldDlgEx>
	jmp Block497

 Block42:
	mov dword ptr [esp+0x1C],ebx
	mov byte ptr [esp+0x240],5
	cmp ecx,0xD
	je Block65

 Block43:
	cmp ecx,0xC
	je Block65

 Block44:
	cmp ecx,0x2D
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	jne Block55

 Block45:
	push 0xD0
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],8
	cmp eax,ebx
	je Block53

 Block46:
	push 1
	mov ecx,eax
	call CSpeakerWorldDlg::_ctor_0
	cmp eax,ebx
	je Block53

 Block47:
	add eax,8
	cmp eax,ebx
	je Block53

 Block48:
	lea esi,[eax-8]
	mov dword ptr [esp+0x4C],esi
	cmp esi,ebx
	je Block50

 Block49:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block50:
	mov ecx,esi
	mov byte ptr [esp+0x240],9
	call CDialog::DoModal
	cmp eax,1
	je Block54

 Block51:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],5
	call ZRef<CSpeakerWorldDlg>::~ZRef<CSpeakerWorldDlg>
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x240],1
	cmp eax,ebx
	je Block21

 Block52:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block21

 Block53:
	xor esi,esi
	mov dword ptr [esp+0x4C],esi
	jmp Block50

 Block54:
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x20]
	push ecx
	jmp Block72

 Block55:
	push 0xC50
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0xA
	cmp eax,ebx
	je Block63

 Block56:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	cmp eax,ebx
	je Block63

 Block57:
	lea esi,[eax+8]
	cmp esi,ebx
	je Block63

 Block58:
	add esi,0xFFFFFFF8
	mov dword ptr [esp+0x4C],esi
	cmp esi,ebx
	je Block60

 Block59:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block60:
	push ebx
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0x11C
	push eax
	mov byte ptr [esp+0x254],0xB
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebx
	push 3
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push ebx
	push ebx
	push 0x3C
	push ebx
	push ebx
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_STR
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	je Block64

 Block61:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],5
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>

 Block62:
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block63:
	xor esi,esi
	mov dword ptr [esp+0x4C],esi
	jmp Block60

 Block64:
	lea ecx,[esp+0x194]
	push ecx
	mov ecx,esi
	call CUtilDlgEx::GetInputStr_Result
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x244],0xC
	call ZXString<char>::op_assign
	lea ecx,[esp+0x194]
	mov byte ptr [esp+0x240],0xB
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],5
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	jmp Block73

 Block65:
	push 0xD0
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],6
	cmp eax,ebx
	je Block78

 Block66:
	xor edx,edx
	cmp dword ptr [esp+0x30],0xD
	mov ecx,eax
	sete dl
	push edx
	call CSpeakerWorldDlg::_ctor_0
	cmp eax,ebx
	je Block78

 Block67:
	add eax,8
	cmp eax,ebx
	je Block78

 Block68:
	lea esi,[eax-8]
	mov dword ptr [esp+0x4C],esi
	cmp esi,ebx
	je Block70

 Block69:
	lea eax,[esi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block70:
	mov ecx,esi
	mov byte ptr [esp+0x240],7
	call CDialog::DoModal
	cmp eax,1
	jne Block51

 Block71:
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x20]
	push edx

 Block72:
	mov ecx,esi
	call CSpeakerWorldDlg::GetResult
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],5
	call ZRef<CSpeakerWorldDlg>::~ZRef<CSpeakerWorldDlg>

 Block73:
	push ebx
	lea ecx,[esp+0x20]
	call ZXString<char>::Trim
	mov ecx,eax
	call ZXString<char>::IsEmpty
	test eax,eax
	jne Block62

 Block74:
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::_ctor_copy
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0x250],0xD
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	or edi,0xFFFFFFFF
	push edi
	lea ecx,[esp+0x18]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	cmp esi,ebx
	jne Block79

 Block75:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push 0x11D

 Block76:
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block77:
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],5
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x240],bl
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x254]
	mov dword ptr [esp+0x240],edi
	call ZXString<char>::~ZXString<char>
	jmp Block24

 Block78:
	xor esi,esi
	mov dword ptr [esp+0x4C],esi
	jmp Block70

 Block79:
	mov ecx,dword ptr [esp+0x5C]
	lea edx,[esp+0x1B0]
	push edx
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [eax+4]
	mov byte ptr [esp+0x240],0xE
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	cmp al,0xA
	lea ecx,[esp+0x1B0]
	setbe byte ptr [esp+0x63]
	mov byte ptr [esp+0x240],0xD
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp byte ptr [esp+0x63],bl
	je Block81

 Block80:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	push 0xEC9
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],5
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x240],bl
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x254]
	mov dword ptr [esp+0x240],edi
	call ZXString<char>::~ZXString<char>
	jmp Block24

 Block81:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,ebx
	je Block85

 Block82:
	mov eax,dword ptr [eax-4]
	cmp eax,0x50
	jg Block77

 Block83:
	cmp eax,0x3C
	jle Block85

 Block84:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push 0x11E
	jmp Block76

 Block85:
	push ecx
	lea edx,[esp+0x20]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	mov eax,dword ptr [esp+0x30]
	cmp eax,0xD
	je Block87

 Block86:
	cmp eax,0x2D
	jne Block88

 Block87:
	mov eax,dword ptr [esp+0x18]
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1

 Block88:
	mov byte ptr [esp+0x240],5
	lea ecx,[esp+0x14]

 Block89:
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block497

 Block90:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	jne Block93

 Block91:
	push 0xB38
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0xF
	cmp eax,ebx
	je Block500

 Block92:
	push esi
	push ebp
	mov ecx,eax
	call CItemSpeakerDlg::_ctor_0
	jmp Block500

 Block93:
	lea ecx,[esp+0x114]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x10
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x114]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block94:
	cmp esi,0x523EB9
	jne Block97

 Block95:
	push ebx
	push 1
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x78],esp
	push 0xFFFFFFFF
	push offset _S_AREYOUSUREYOUWAN
	call ZXString<char>::CreateFromCharStr
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	jne Block500

 Block96:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_
	call ZXString<char>::CreateFromCharStr
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_
	call ZXString<char>::CreateFromCharStr
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_
	call ZXString<char>::CreateFromCharStr
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_
	call ZXString<char>::CreateFromCharStr
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push 1
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	jmp Block497

 Block97:
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x14],ebx
	push 0xBC
	mov byte ptr [esp+0x244],0x15
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x16
	cmp eax,ebx
	je Block99

 Block98:
	push 1
	push ebx
	mov ecx,eax
	call CUIAvatarMegaphone::_ctor_0
	jmp Block100

 Block99:
	xor eax,eax

 Block100:
	push 1
	push eax
	lea ecx,[esp+0x5C]
	call ZRef<CUIAvatarMegaphone>::_ctor_zero
	mov esi,dword ptr [esp+0x58]
	mov ecx,esi
	mov byte ptr [esp+0x240],0x17
	call CDialog::DoModal
	cmp eax,1
	jne Block103

 Block101:
	lea edx,[esp+0x18]
	push edx
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x30]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	mov ecx,esi
	call CUIAvatarMegaphone::GetText
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [esp+0x2C]
	mov edx,dword ptr [esp+0x28]
	push eax
	mov eax,dword ptr [esp+0x24]
	push ecx
	push edx
	push eax
	lea ecx,[esp+0x24]
	push offset _S_SSSS
	push ecx
	call ZXString<char>::Format
	add esp,0x18
	push ebx
	lea ecx,[esp+0x18]
	call ZXString<char>::Trim
	mov ecx,eax
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block104

 Block102:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x44],esp
	push 0xEB1
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block103:
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x15
	call ZRef<CUIAvatarMegaphone>::~ZRef<CUIAvatarMegaphone>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0x14
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0x13
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0x12
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0x11
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block104:
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebx
	je Block106

 Block105:
	mov ebp,dword ptr [eax-4]
	jmp Block107

 Block106:
	xor ebp,ebp

 Block107:
	mov eax,dword ptr [esp+0x28]
	cmp eax,ebx
	je Block109

 Block108:
	mov edi,dword ptr [eax-4]
	jmp Block110

 Block109:
	xor edi,edi

 Block110:
	mov eax,dword ptr [esp+0x2C]
	cmp eax,ebx
	je Block112

 Block111:
	mov esi,dword ptr [eax-4]
	jmp Block113

 Block112:
	xor esi,esi

 Block113:
	lea eax,[esp+0x28]
	push eax
	lea ecx,[esp+0x174]
	push ecx
	lea ecx,[esp+0x28]
	call ZXString<char>::op_add_1
	lea edx,[esp+0x2C]
	push edx
	lea ecx,[esp+0x16C]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x18
	call ZXString<char>::op_add_1
	lea edx,[esp+0x18]
	push edx
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x19
	call ZXString<char>::op_add_1
	lea ecx,[esp+0x168]
	mov byte ptr [esp+0x240],0x1B
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x170]
	mov byte ptr [esp+0x240],0x1C
	call ZXString<char>::~ZXString<char>
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x2C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x34],eax
	call ZXString<char>::ReleaseBuffer
	cmp dword ptr [esp+0x1C],ebx
	je Block116

 Block114:
	cmp dword ptr [esp+0x30],ebx
	jne Block116

 Block115:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x44],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],0x17
	call ZXString<char>::~ZXString<char>
	jmp Block103

 Block116:
	push ebp
	lea eax,[esp+0x17C]
	push eax
	lea ecx,[esp+0x24]
	call ZXString<char>::Left
	push eax
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0x244],0x1D
	call ZXString<char>::op_assign
	lea ecx,[esp+0x178]
	mov byte ptr [esp+0x240],0x1C
	call ZXString<char>::~ZXString<char>
	push 0xFFFFFFFF
	push ebp
	lea ecx,[esp+0x1A0]
	push ecx
	lea ecx,[esp+0x28]
	call ZXString<char>::Mid
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x244],0x1E
	call ZXString<char>::op_assign
	lea ecx,[esp+0x198]
	mov byte ptr [esp+0x240],0x1C
	call ZXString<char>::~ZXString<char>
	push edi
	lea edx,[esp+0x78]
	push edx
	lea ecx,[esp+0x24]
	call ZXString<char>::Left
	push eax
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x244],0x1F
	call ZXString<char>::op_assign
	lea ecx,[esp+0x74]
	mov byte ptr [esp+0x240],0x1C
	call ZXString<char>::~ZXString<char>
	push 0xFFFFFFFF
	push edi
	lea eax,[esp+0x1AC]
	push eax
	lea ecx,[esp+0x28]
	call ZXString<char>::Mid
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x244],0x20
	call ZXString<char>::op_assign
	lea ecx,[esp+0x1A4]
	mov byte ptr [esp+0x240],0x1C
	call ZXString<char>::~ZXString<char>
	push esi
	lea ecx,[esp+0x80]
	push ecx
	lea ecx,[esp+0x24]
	call ZXString<char>::Left
	push eax
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x244],0x21
	call ZXString<char>::op_assign
	lea ecx,[esp+0x7C]
	mov byte ptr [esp+0x240],0x1C
	call ZXString<char>::~ZXString<char>
	push 0xFFFFFFFF
	push esi
	lea edx,[esp+0x134]
	push edx
	lea ecx,[esp+0x28]
	call ZXString<char>::Mid
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x244],0x22
	call ZXString<char>::op_assign
	lea ecx,[esp+0x12C]
	mov byte ptr [esp+0x240],0x1C
	call ZXString<char>::~ZXString<char>
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::op_assign
	push ecx
	lea edx,[esp+0x24]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x30]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	mov ecx,dword ptr [esp+0x58]
	call CUIAvatarMegaphone::IsCheckWhisper
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	push ebx
	lea ecx,[esp+0x58]
	call ZRef<CUIAvatarMegaphone>::op_assign_zero
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],0x17
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x15
	call ZRef<CUIAvatarMegaphone>::~ZRef<CUIAvatarMegaphone>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0x14
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0x13
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0x12
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0x11
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block497

 Block117:
	push 0xA4
	xor esi,esi
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x23
	cmp eax,ebx
	je Block119

 Block118:
	push 1
	mov ecx,eax
	call CUICancelCharacterCouponRequests::_ctor_0
	jmp Block120

 Block119:
	xor eax,eax

 Block120:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUICancelCharacterCouponRequests>::_ctor_zero
	mov ecx,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x240],0x24
	call CDialog::DoModal
	cmp eax,1
	jne Block129

 Block121:
	push 0xA4
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x25
	cmp eax,ebx
	je Block123

 Block122:
	push ebx
	mov ecx,eax
	call CUICancelCharacterCouponRequests::_ctor_0
	jmp Block124

 Block123:
	xor eax,eax

 Block124:
	push 1
	push eax
	lea ecx,[esp+0x5C]
	call ZRef<CUICancelCharacterCouponRequests>::_ctor_zero
	mov ecx,dword ptr [esp+0x58]
	mov byte ptr [esp+0x240],0x26
	call CDialog::DoModal
	cmp eax,1
	jne Block126

 Block125:
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	jmp Block127

 Block126:
	mov esi,1

 Block127:
	mov byte ptr [esp+0x240],0x24

 Block128:
	lea ecx,[esp+0x54]
	call ZRef<CUICancelCharacterCouponRequests>::~ZRef<CUICancelCharacterCouponRequests>
	cmp esi,ebx
	je Block130

 Block129:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUICancelCharacterCouponRequests>::~ZRef<CUICancelCharacterCouponRequests>
	jmp Block500

 Block130:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUICancelCharacterCouponRequests>::~ZRef<CUICancelCharacterCouponRequests>
	jmp Block497

 Block131:
	push 0xA4
	xor esi,esi
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x27
	cmp eax,ebx
	je Block133

 Block132:
	push 2
	mov ecx,eax
	call CUICancelCharacterCouponRequests::_ctor_0
	jmp Block134

 Block133:
	xor eax,eax

 Block134:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUICancelCharacterCouponRequests>::_ctor_zero
	mov ecx,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x240],0x28
	call CDialog::DoModal
	cmp eax,1
	jne Block129

 Block135:
	push 0xA4
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x29
	cmp eax,ebx
	je Block137

 Block136:
	push ebx
	mov ecx,eax
	call CUICancelCharacterCouponRequests::_ctor_0
	jmp Block138

 Block137:
	xor eax,eax

 Block138:
	push 1
	push eax
	lea ecx,[esp+0x5C]
	call ZRef<CUICancelCharacterCouponRequests>::_ctor_zero
	mov ecx,dword ptr [esp+0x58]
	mov byte ptr [esp+0x240],0x2A
	call CDialog::DoModal
	cmp eax,1
	jne Block140

 Block139:
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	mov byte ptr [esp+0x240],0x28
	jmp Block128

 Block140:
	mov esi,1
	mov byte ptr [esp+0x240],0x28
	jmp Block128

 Block141:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	jne Block144

 Block142:
	push 0xB0C
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x2B
	cmp eax,ebx
	je Block500

 Block143:
	push esi
	push ebp
	mov ecx,eax
	call CUIKarmaDlg::_ctor_0
	jmp Block500

 Block144:
	lea ecx,[esp+0x84]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x2C
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x84]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block145:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	jne Block148

 Block146:
	push 0xB8
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x2D
	cmp eax,ebx
	je Block500

 Block147:
	push ebp
	mov ecx,eax
	call CUIUnreleaseDlg::_ctor_0
	jmp Block500

 Block148:
	lea edx,[esp+0x1AC]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x2E
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x1AC]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block149:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	jne Block164

 Block150:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [ecx+0x20A4]
	mov ecx,dword ptr [ecx+0x20A0]
	mov edx,eax
	sub edx,ecx
	test edx,edx
	jle Block153

 Block151:
	push esi
	call is_character_sale_item
	add esp,4
	test eax,eax
	je Block500

 Block152:
	push 0x318
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x2F
	jmp Block160

 Block153:
	cmp eax,0xF
	jl Block157

 Block154:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x78],esp
	push 0x13C6

 Block155:
	push eax

 Block156:
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block500

 Block157:
	cmp esi,0x52DED8
	jne Block159

 Block158:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x78],esp
	push 0x13C7
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block500

 Block159:
	push 0x318
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x30

 Block160:
	cmp eax,ebx
	je Block162

 Block161:
	push esi
	push ebp
	mov ecx,eax
	call CUICharacterSaleDlg::_ctor_0
	mov esi,eax
	jmp Block163

 Block162:
	xor esi,esi

 Block163:
	mov byte ptr [esp+0x240],1
	call get_field
	mov dword ptr [eax+0x244],esi
	jmp Block500

 Block164:
	lea edx,[esp+0x8C]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x31
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x8C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block165:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x34]
	push eax
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x30],ebx
	mov byte ptr [esp+0x240],0x32
	sete al
	cmp al,bl
	jne Block168

 Block166:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block169

 Block167:
	lea ecx,[esp+0x134]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x33
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x134]
	mov byte ptr [esp+0x240],0x32
	call ZXString<char>::~ZXString<char>

 Block168:
	lea ecx,[esp+0x30]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block169:
	mov edx,dword ptr [TSingleton<CUIItem>::ms_pInstance]
	push 1
	push edx
	lea ecx,[esp+0x50]
	call ZRef<CUIItem>::_ctor_zero
	mov byte ptr [esp+0x240],0x34
	cmp dword ptr [esp+0x4C],ebx
	je Block174

 Block170:
	push 0xB54
	call _operator_new
	mov edi,eax
	add esp,4
	mov dword ptr [esp+0x24],edi
	mov byte ptr [esp+0x240],0x35
	cmp edi,ebx
	je Block172

 Block171:
	push esi
	push ebp
	sub esp,0x10
	lea eax,[esp+0x50]
	mov ecx,esp
	mov dword ptr [esp+0x74],esp
	push eax
	call COutPacket::_ctor_copy
	mov ecx,edi
	call CUIItemUpgrade::_ctor_0
	mov esi,eax
	jmp Block173

 Block172:
	xor esi,esi

 Block173:
	mov byte ptr [esp+0x240],0x34
	call get_field
	mov dword ptr [eax+0x23C],esi

 Block174:
	mov byte ptr [esp+0x240],0x32

 Block175:
	lea ecx,[esp+0x48]
	call ZRef<CUIItem>::~ZRef<CUIItem>
	lea ecx,[esp+0x30]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block176:
	push esi
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x30],ebx
	mov byte ptr [esp+0x240],0x36
	sete al
	cmp al,bl
	jne Block168

 Block177:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block179

 Block178:
	lea edx,[esp+0x94]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x37
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x94]
	mov byte ptr [esp+0x240],0x36
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x30]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block179:
	mov eax,dword ptr [TSingleton<CUIItem>::ms_pInstance]
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIItem>::_ctor_zero
	mov byte ptr [esp+0x240],0x38
	cmp dword ptr [esp+0x4C],ebx
	je Block184

 Block180:
	push 0xB58
	call _operator_new
	mov edi,eax
	add esp,4
	mov dword ptr [esp+0x24],edi
	mov byte ptr [esp+0x240],0x39
	cmp edi,ebx
	je Block182

 Block181:
	mov eax,0x66666667
	imul esi
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea ecx,[eax+eax*4]
	add ecx,ecx
	sub esi,ecx
	push esi
	sub esp,0x10
	lea edx,[esp+0x4C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call COutPacket::_ctor_copy
	mov ecx,edi
	call CUIVega::_ctor_0
	mov esi,eax
	jmp Block183

 Block182:
	xor esi,esi

 Block183:
	mov byte ptr [esp+0x240],0x38
	call get_field
	mov dword ptr [eax+0x248],esi

 Block184:
	mov byte ptr [esp+0x240],0x36
	jmp Block175

 Block185:
	push 0xCC
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x3A
	cmp eax,ebx
	je Block187

 Block186:
	mov ecx,eax
	call CUISendMemo::_ctor_default
	jmp Block188

 Block187:
	xor eax,eax

 Block188:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUISendMemo>::_ctor_zero
	lea ecx,[esp+0x254]
	mov byte ptr [esp+0x240],0x3B
	call ZXString<char>::IsEmpty
	mov esi,dword ptr [esp+0x4C]
	test eax,eax
	jne Block190

 Block189:
	push ecx
	lea eax,[esp+0x258]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	mov ecx,esi
	call CUISendMemo::SetReceiver

 Block190:
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	je Block192

 Block191:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUISendMemo>::~ZRef<CUISendMemo>
	jmp Block500

 Block192:
	mov dword ptr [esp+0x14],ebx
	mov dword ptr [esp+0x30],ebx
	lea ecx,[esp+0x30]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,esi
	mov byte ptr [esp+0x248],0x3D
	call CUISendMemo::GetResult
	push ecx
	lea eax,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x34]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x3C
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0x3B
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUISendMemo>::~ZRef<CUISendMemo>
	jmp Block497

 Block193:
	cmp dword ptr [edi+0x20],ebx
	jne Block197

 Block194:
	mov ecx,edi
	call CMapLoadable::TransientLayer_Exist
	test eax,eax
	jne Block197

 Block195:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,edi
	call edx
	cmp eax,0x3C
	je Block197

 Block196:
	test dword ptr [edi+0x178],0x4000
	je Block198

 Block197:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	push 0x11F
	jmp Block155

 Block198:
	push esi
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x18],ebx
	mov byte ptr [esp+0x240],0x3E
	sete al
	cmp al,bl
	jne Block207

 Block199:
	push 0xC50
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x3F
	cmp eax,ebx
	je Block201

 Block200:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	jmp Block202

 Block201:
	xor eax,eax

 Block202:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUtilDlgEx>::_ctor_zero
	push ebx
	push 1
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x30],esp
	push 0x328
	push edx
	mov byte ptr [esp+0x254],0x40
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,dword ptr [esp+0x58]
	push ebx
	push 3
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push ebx
	push ebx
	push 0x23
	push ebx
	push ebx
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_STR
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	jne Block205

 Block203:
	lea eax,[esp+0x14]
	push eax
	mov ecx,esi
	call CUtilDlgEx::GetInputStr_Result
	push ebx
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x244],0x41
	call ZXString<char>::Trim
	mov ecx,eax
	call ZXString<char>::IsEmpty
	lea ecx,[esp+0x14]
	test eax,eax
	je Block208

 Block204:
	mov byte ptr [esp+0x240],0x40
	call ZXString<char>::~ZXString<char>

 Block205:
	mov byte ptr [esp+0x240],0x3E

 Block206:
	lea ecx,[esp+0x48]
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>

 Block207:
	lea ecx,[esp+0x18]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block208:
	push 1
	push ebx
	push 1
	push 0x400
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x18]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	cmp esi,ebx
	jne Block210

 Block209:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push 0x11D
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x14]
	jmp Block204

 Block210:
	push ecx
	lea edx,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0x40
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0x3E

 Block211:
	lea ecx,[esp+0x48]
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	mov byte ptr [esp+0x240],1
	lea ecx,[esp+0x18]
	jmp Block496

 Block212:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x1C8]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0x1C8]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	push ebx
	mov ecx,esi
	call CharacterData::GetActiveItemSlotPet
	mov esi,eax
	cmp esi,ebx
	je Block500

 Block213:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemName
	lea edi,[esi+0x28]
	push edi
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x244],0x42
	call ZXString<char>::CompareNoCase
	test eax,eax
	je Block215

 Block214:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x329
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	jne Block222

 Block215:
	push 0xC50
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x43
	cmp eax,ebx
	je Block217

 Block216:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	jmp Block218

 Block217:
	xor eax,eax

 Block218:
	push 1
	push eax
	lea ecx,[esp+0x5C]
	call ZRef<CUtilDlgEx>::_ctor_zero
	push ebx
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0x32A
	push eax
	mov byte ptr [esp+0x254],0x44
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,dword ptr [esp+0x64]
	push ebx
	push 3
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push 1
	push ebx
	push 0xC
	push 4
	push ebx
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_STR
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	jne Block221

 Block219:
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	call CUtilDlgEx::GetInputStr_Result
	push ebx
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x244],0x45
	call ZXString<char>::Trim
	mov ecx,eax
	call ZXString<char>::IsEmpty
	lea ecx,[esp+0x1C]
	test eax,eax
	je Block223

 Block220:
	mov byte ptr [esp+0x240],0x44
	call ZXString<char>::~ZXString<char>

 Block221:
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x42
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>

 Block222:
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block223:
	push 1
	push ebx
	push 1
	push 0x400
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	or ebp,0xFFFFFFFF
	push ebp
	lea ecx,[esp+0x20]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	cmp esi,ebx
	jne Block226

 Block224:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x44],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block225:
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],0x44
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x42
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x240],bl
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x254]
	mov dword ptr [esp+0x240],ebp
	call ZXString<char>::~ZXString<char>
	jmp Block24

 Block226:
	push offset _S___2
	push offset _S___7
	lea eax,[esp+0x190]
	push eax
	lea ecx,[esp+0x28]
	call ZXString<char>::ReplaceAll
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x244],0x46
	call ZXString<char>::op_assign
	lea ecx,[esp+0x188]
	mov byte ptr [esp+0x240],0x45
	call ZXString<char>::~ZXString<char>
	mov ecx,dword ptr [esp+0x1C]
	push ecx
	lea ecx,[esp+0x1C]
	call ZXString<char>::CompareNoCase
	test eax,eax
	je Block231

 Block227:
	push edi
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	je Block231

 Block228:
	mov dword ptr [esp+0x30],ebx
	lea edx,[esp+0x9C]
	push 0x32C
	push edx
	mov byte ptr [esp+0x248],0x47
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x1C]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x38]
	push edx
	mov byte ptr [esp+0x24C],0x48
	call ZXString<char>::Format
	add esp,0xC
	lea ecx,[esp+0x9C]
	mov byte ptr [esp+0x240],0x47
	call ZXString<char>::~ZXString<char>
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	lea eax,[esp+0x44]
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push eax
	call ZXString<char>::_ctor_copy
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	je Block230

 Block229:
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x45
	call ZXString<char>::~ZXString<char>
	jmp Block225

 Block230:
	push ecx
	lea edx,[esp+0x20]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x45
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],0x44
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x42
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block497

 Block231:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	push 0x32B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],0x44
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x42
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x240],bl
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x254]
	mov dword ptr [esp+0x240],ebp
	call ZXString<char>::~ZXString<char>
	jmp Block24

 Block232:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block234

 Block233:
	lea ecx,[esp+0x13C]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x49
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x13C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block234:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea edx,[esp+0x18]
	push edx
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x14],ebx
	mov byte ptr [esp+0x240],0x4A
	sete al
	cmp al,bl
	jne Block237

 Block235:
	mov ecx,dword ptr [esp+0x5C]
	call CWvsContext::GetCurFieldID
	mov ecx,eax
	mov eax,0x6B5FCA6B
	imul ecx
	sar edx,0x16
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x5B
	jne Block238

 Block236:
	lea ecx,[esp+0xA4]
	push 0xE62
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x4B
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0xA4]
	mov byte ptr [esp+0x240],0x4A
	call ZXString<char>::~ZXString<char>

 Block237:
	lea ecx,[esp+0x14]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block238:
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x20],ebx
	push 0xD8
	mov byte ptr [esp+0x244],0x4E
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x4F
	cmp eax,ebx
	je Block240

 Block239:
	push esi
	mov ecx,eax
	call CUIHope::_ctor_0
	jmp Block241

 Block240:
	xor eax,eax

 Block241:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIHope>::_ctor_zero
	mov esi,dword ptr [esp+0x4C]
	mov ecx,esi
	mov byte ptr [esp+0x240],0x50
	call CDialog::DoModal
	cmp eax,1
	jne Block244

 Block242:
	lea edx,[esp+0x20]
	push edx
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,esi
	call CUIHope::GetText
	push ebx
	lea ecx,[esp+0x4C]
	call ZRef<CUIHope>::op_assign_zero
	push 0xA
	lea edx,[esp+0x148]
	push edx
	lea ecx,[esp+0x34]
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x28]
	push ecx
	lea edx,[esp+0xB0]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x51
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x1AC]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x52
	call ZXString<char>::op_add_2
	lea edx,[esp+0x20]
	push edx
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x53
	call ZXString<char>::op_add_1
	lea ecx,[esp+0x1A8]
	mov byte ptr [esp+0x240],0x55
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xAC]
	mov byte ptr [esp+0x240],0x56
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x144]
	mov byte ptr [esp+0x240],0x57
	call ZXString<char>::~ZXString<char>
	push ebx
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	cmp esi,ebx
	jne Block245

 Block243:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x44],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0x50
	call ZXString<char>::~ZXString<char>

 Block244:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x4E
	call ZRef<CUIHope>::~ZRef<CUIHope>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0x4D
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0x4C
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0x4A
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block245:
	push ecx
	lea eax,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0x50
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x4E
	call ZRef<CUIHope>::~ZRef<CUIHope>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0x4D
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0x4C
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0x4A
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],1
	lea ecx,[esp+0x14]
	jmp Block496

 Block246:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block248

 Block247:
	lea ecx,[esp+0xB4]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x58
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0xB4]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block248:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp ecx,ebx
	je Block251

 Block249:
	call CUser::GetLocalUserLevel
	cmp eax,0xF
	jg Block251

 Block250:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push 0xFFFFFFFF
	push offset _S_CHARACTERSUNDERL
	call ZXString<char>::CreateFromCharStr
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block500

 Block251:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea edx,[esp+0x1C]
	push edx
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x18],ebx
	mov byte ptr [esp+0x240],0x59
	sete al
	cmp al,bl
	jne Block207

 Block252:
	push 0xC50
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x5A
	cmp eax,ebx
	je Block254

 Block253:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	jmp Block255

 Block254:
	xor eax,eax

 Block255:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUtilDlgEx>::_ctor_zero
	mov dword ptr [esp+0x14],ebx
	push esi
	mov byte ptr [esp+0x244],0x5C
	call is_random_moneybag_item
	add esp,4
	test eax,eax
	je Block257

 Block256:
	lea eax,[esp+0x190]
	push 0x17AE
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0x248],0x5D
	call ZXString<char>::Format
	add esp,8
	lea ecx,[esp+0x190]
	mov byte ptr [esp+0x240],0x5C
	call ZXString<char>::~ZXString<char>
	jmp Block258

 Block257:
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x1AC1
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[esp+0x1F8]
	push eax
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0x24C],0x5E
	call _x_com_ptr<IWzProperty>::op_arrow
	mov ecx,eax
	mov byte ptr [esp+0x24C],0x5C
	call IWzProperty::Getitem
	mov esi,eax
	lea ecx,[esp+0xC0]
	push 0x32D
	push ecx
	mov byte ptr [esp+0x24C],0x5F
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,dword ptr [eax]
	push esi
	mov byte ptr [esp+0x248],0x60
	call get_int32
	push eax
	lea edx,[esp+0x20]
	push edi
	push edx
	call ZXString<char>::Format
	add esp,0x14
	lea ecx,[esp+0xBC]
	mov byte ptr [esp+0x240],0x5F
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1F0]
	mov byte ptr [esp+0x240],0x5C
	call Ztl_variant_t::~Ztl_variant_t

 Block258:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	lea eax,[esp+0x28]
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push eax
	call ZXString<char>::_ctor_copy
	call CUtilDlg::YesNo_0
	add esp,0x14
	mov byte ptr [esp+0x240],0x5B
	lea ecx,[esp+0x14]
	cmp eax,6
	je Block260

 Block259:
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0x59
	jmp Block206

 Block260:
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0x59
	jmp Block211

 Block261:
	cmp dword ptr [edi+0x20],ebx
	jne Block263

 Block262:
	mov ecx,edi
	call CMapLoadable::TransientLayer_Exist
	test eax,eax
	je Block264

 Block263:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x78],esp
	push 0x11F
	push ecx
	jmp Block156

 Block264:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea edx,[esp+0x18]
	push edx
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x14],ebx
	sete al
	cmp al,bl
	jne Block237

 Block265:
	mov dword ptr [esp+0x30],ebx
	lea eax,[esp+0x1A0]
	push 0x5D2
	push eax
	mov byte ptr [esp+0x248],0x62
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edi,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov ecx,eax
	mov byte ptr [esp+0x240],0x63
	call _xbstr_t::op_char_str
	push eax
	push esi
	lea ecx,[esp+0xCC]
	push ecx
	mov ecx,edi
	call CItemInfo::GetItemString
	mov esi,eax
	lea edx,[esp+0x14C]
	push 0x195
	push edx
	mov byte ptr [esp+0x248],0x64
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x38]
	push edx
	mov byte ptr [esp+0x24C],0x65
	call ZXString<char>::Format
	add esp,0xC
	lea ecx,[esp+0x14C]
	mov byte ptr [esp+0x240],0x64
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xC4]
	mov byte ptr [esp+0x240],0x63
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1A0]
	mov byte ptr [esp+0x240],0x62
	call Ztl_bstr_t::~Ztl_bstr_t
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	lea eax,[esp+0x44]
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push eax
	call ZXString<char>::_ctor_copy
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	je Block267

 Block266:
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x61
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block267:
	push 0xFFFFFFFF
	push offset _S___3
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push 0x734
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea edx,[esp+0x20C]
	push edx
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0x250],0x66
	call _x_com_ptr<IWzProperty>::op_arrow
	mov ecx,eax
	mov byte ptr [esp+0x250],0x62
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0x24C],0x67
	call get_string
	add esp,8
	push eax
	lea ecx,[esp+0x28]
	call ZXString<unsigned short>::CreateFromCStr
	lea ecx,[esp+0x200]
	mov byte ptr [esp+0x240],0x69
	call Ztl_variant_t::~Ztl_variant_t
	push offset _D_VTMISSING
	lea ecx,[esp+0x1E4]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[esp+0x1D4]
	mov byte ptr [esp+0x244],0x6A
	call Ztl_variant_t::_ctor_1
	mov edx,dword ptr [esp+0x20]
	push ebx
	push ebx
	lea eax,[esp+0x1E8]
	push eax
	lea ecx,[esp+0x1DC]
	push ecx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push edx
	mov byte ptr [esp+0x258],0x6B
	call Ztl_bstr_t::_ctor_2
	lea eax,[esp+0x224]
	push eax
	mov ecx,offset _D_G_RM
	mov byte ptr [esp+0x258],0x6C
	call _x_com_ptr<IWzResMan>::op_arrow
	mov ecx,eax
	mov byte ptr [esp+0x258],0x6B
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x248],0x6D
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x1C]
	call _x_com_ptr<IWzSound>::CreateFromUnknown
	lea ecx,[esp+0x210]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x1D0]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x1E0]
	mov byte ptr [esp+0x240],0x71
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x18]
	call _x_com_ptr<IWzSound>::op_arrow
	mov ecx,eax
	call IWzSound::Getlength
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode4
	lea ecx,[esp+0x18]
	call _x_com_ptr<IWzSound>::~_x_com_ptr<IWzSound>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0x62
	call ZXString<unsigned short>::~ZXString<unsigned short>
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x61
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],1
	lea ecx,[esp+0x14]
	jmp Block496

 Block268:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block270

 Block269:
	lea ecx,[esp+0xCC]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x72
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0xCC]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block270:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea edx,[esp+0x18]
	push edx
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x14],ebx
	mov byte ptr [esp+0x240],0x73
	sete al
	cmp al,bl
	jne Block237

 Block271:
	mov ecx,dword ptr [esp+0x5C]
	lea eax,[esp+0x1C0]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0x1C0]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx ecx,ax
	push ecx
	call get_job_category
	add esp,4
	test eax,eax
	jl Block237

 Block272:
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx edx,ax
	push edx
	call get_job_category
	add esp,4
	cmp eax,9
	jge Block237

 Block273:
	push 0xE4
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x24],ebx
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x74
	cmp eax,ebx
	je Block275

 Block274:
	mov ecx,eax
	call CUIStatChange::_ctor_default
	jmp Block276

 Block275:
	xor eax,eax

 Block276:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIStatChange>::_ctor_zero
	mov esi,dword ptr [esp+0x4C]
	mov ecx,esi
	mov byte ptr [esp+0x240],0x75
	mov dword ptr [esi+0xC8],ebx
	mov dword ptr [esi+0xCC],ebx
	call CUIStatChange::CreateStatChangeDlg
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	jne Block287

 Block277:
	lea eax,[esp+0x20]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	call CUIStatChange::GetResult
	push 0xE4
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x76
	cmp eax,ebx
	je Block279

 Block278:
	mov ecx,eax
	call CUIStatChange::_ctor_default
	jmp Block280

 Block279:
	xor eax,eax

 Block280:
	push 1
	push eax
	lea ecx,[esp+0x5C]
	call ZRef<CUIStatChange>::_ctor_zero
	mov edx,dword ptr [esp+0x18]
	mov esi,dword ptr [esp+0x58]
	push ebx
	push edx
	mov ecx,esi
	mov byte ptr [esp+0x248],0x77
	call CUIStatChange::SetOption
	mov ecx,esi
	call CUIStatChange::CreateStatChangeDlg
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	jne Block286

 Block281:
	lea eax,[esp+0x20]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	call CUIStatChange::GetResult
	push 0xB0
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x78
	cmp eax,ebx
	je Block283

 Block282:
	mov ecx,eax
	call CUIStatChangeConfirm::_ctor_default
	jmp Block284

 Block283:
	xor eax,eax

 Block284:
	push 1
	push eax
	lea ecx,[esp+0x38]
	call ZRef<CUIStatChangeConfirm>::_ctor_zero
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x18]
	mov esi,dword ptr [esp+0x34]
	push edx
	push eax
	mov ecx,esi
	mov byte ptr [esp+0x248],0x79
	call CUIStatChangeConfirm::SetOption
	mov ecx,esi
	call CUIStatChangeConfirm::CreateStatChangeDlg
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	je Block288

 Block285:
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x77
	call ZRef<CUIStatChangeConfirm>::~ZRef<CUIStatChangeConfirm>

 Block286:
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x75
	call ZRef<CUIStatChange>::~ZRef<CUIStatChange>

 Block287:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x73
	call ZRef<CUIStatChange>::~ZRef<CUIStatChange>
	lea ecx,[esp+0x14]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block288:
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	mov ecx,esi
	call CUIStatChangeConfirm::GetResult
	mov eax,dword ptr [esp+0x20]
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x18]
	push ecx
	lea ecx,[esp+0x3C]
	call COutPacket::Encode4
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x77
	call ZRef<CUIStatChangeConfirm>::~ZRef<CUIStatChangeConfirm>
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x75
	call ZRef<CUIStatChange>::~ZRef<CUIStatChange>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x73
	call ZRef<CUIStatChange>::~ZRef<CUIStatChange>
	mov byte ptr [esp+0x240],1
	lea ecx,[esp+0x14]
	jmp Block496

 Block289:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block291

 Block290:
	lea edx,[esp+0x154]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x7A
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x154]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block291:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x20]
	push eax
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x1C],ebx
	mov byte ptr [esp+0x240],0x7B
	sete al
	cmp al,bl
	jne Block302

 Block292:
	lea ecx,[esp+0x1B8]
	push ecx
	mov ecx,dword ptr [esp+0x60]
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x1B8]
	mov dword ptr [esp+0x14],ebp
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,ebp
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx edx,ax
	push edx
	call get_job_category
	add esp,4
	cmp eax,1
	jl Block302

 Block293:
	mov ecx,ebp
	call GW_CharacterStat::_ZtlSecureGet_nJob
	cwde
	push eax
	call get_job_category
	add esp,4
	cmp eax,9
	jge Block302

 Block294:
	mov eax,0x66666667
	imul esi
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea ecx,[eax+eax*4]
	add ecx,ecx
	sub esi,ecx
	mov ecx,ebp
	dec esi
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx edx,ax
	push edx
	call get_job_level
	add esp,4
	mov ecx,ebp
	mov edi,eax
	call GW_CharacterStat::_ZtlSecureGet_nJob
	cwde
	push eax
	call is_evan_job
	add esp,4
	test eax,eax
	je Block304

 Block295:
	cmp esi,4
	jl Block302

 Block296:
	sub esi,4
	lea ecx,[esi+esi+1]
	cmp edi,ecx
	jl Block302

 Block297:
	push 0xE8
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x7C
	cmp eax,ebx
	je Block299

 Block298:
	mov ecx,eax
	call CUISkillDecEX::_ctor_default
	jmp Block300

 Block299:
	xor eax,eax

 Block300:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUISkillDecEX>::_ctor_zero
	mov edi,dword ptr [esp+0x4C]
	mov ecx,edi
	mov byte ptr [esp+0x240],0x7D
	mov dword ptr [edi+0xE4],esi
	call CUISkillDecEX::CreateSkillDecDlg
	mov ecx,edi
	call CDialog::DoModal
	mov byte ptr [esp+0x240],0x7B
	lea ecx,[esp+0x48]
	cmp eax,1
	je Block303

 Block301:
	call ZRef<CUISkillDecEX>::~ZRef<CUISkillDecEX>

 Block302:
	lea ecx,[esp+0x1C]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block303:
	mov ebp,dword ptr [edi+0xE0]
	mov edi,dword ptr [edi+0xDC]
	mov dword ptr [esp+0x30],ebp
	call ZRef<CUISkillDecEX>::~ZRef<CUISkillDecEX>
	jmp Block311

 Block304:
	lea edx,[esi+1]
	cmp edi,edx
	jl Block302

 Block305:
	push 0xF4
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x7E
	cmp eax,ebx
	je Block307

 Block306:
	mov ecx,eax
	call CUISkillDec::_ctor_default
	jmp Block308

 Block307:
	xor eax,eax

 Block308:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUISkillDec>::_ctor_zero
	mov edi,dword ptr [esp+0x4C]
	mov ecx,edi
	mov byte ptr [esp+0x240],0x7F
	mov dword ptr [edi+0xDC],esi
	call CUISkillDec::CreateSkillDecDlg
	mov ecx,edi
	call CDialog::DoModal
	mov byte ptr [esp+0x240],0x7B
	lea ecx,[esp+0x48]
	cmp eax,1
	je Block310

 Block309:
	call ZRef<CUISkillDec>::~ZRef<CUISkillDec>
	lea ecx,[esp+0x1C]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block310:
	mov ebp,dword ptr [edi+0xD8]
	mov edi,dword ptr [edi+0xD4]
	mov dword ptr [esp+0x30],ebp
	call ZRef<CUISkillDec>::~ZRef<CUISkillDec>

 Block311:
	push 0xDC
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x80
	cmp eax,ebx
	je Block313

 Block312:
	mov ecx,eax
	call CUISkillInc::_ctor_default
	jmp Block314

 Block313:
	xor eax,eax

 Block314:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUISkillInc>::_ctor_zero
	mov ecx,dword ptr [esp+0x14]
	mov byte ptr [esp+0x240],0x81
	call GW_CharacterStat::_ZtlSecureGet_nJob
	cwde
	push eax
	call is_evan_job
	add esp,4
	test eax,eax
	je Block316

 Block315:
	lea ecx,[edi+esi*2]
	push ecx
	jmp Block317

 Block316:
	push esi

 Block317:
	mov esi,dword ptr [esp+0x50]
	push ebp
	mov ecx,esi
	call CUISkillInc::SetOption
	mov ecx,esi
	call CUISkillInc::CreateSkillIncDlg
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	jne Block323

 Block318:
	mov esi,dword ptr [esi+0xCC]
	push 0xCC
	mov dword ptr [esp+0x18],esi
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x82
	cmp eax,ebx
	je Block320

 Block319:
	mov ecx,eax
	call CUISkillChangeConfirm::_ctor_default
	jmp Block321

 Block320:
	xor eax,eax

 Block321:
	push 1
	push eax
	lea ecx,[esp+0x5C]
	call ZRef<CUISkillChangeConfirm>::_ctor_zero
	push esi
	mov esi,dword ptr [esp+0x5C]
	push ebp
	mov ecx,esi
	mov byte ptr [esp+0x248],0x83
	call CUISkillChangeConfirm::SetOption
	mov ecx,esi
	call CUISkillChangeConfirm::CreateSkillChangeConfirmDlg
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	je Block324

 Block322:
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x81
	call ZRef<CUISkillChangeConfirm>::~ZRef<CUISkillChangeConfirm>

 Block323:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x7B
	call ZRef<CUISkillInc>::~ZRef<CUISkillInc>
	lea ecx,[esp+0x1C]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block324:
	lea edx,[esp+0x14]
	push edx
	lea eax,[esp+0x34]
	push eax
	mov ecx,esi
	call CUISkillChangeConfirm::GetResult
	mov ecx,dword ptr [esp+0x14]
	push ecx
	lea ecx,[esp+0x3C]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x30]
	push edx
	lea ecx,[esp+0x3C]
	call COutPacket::Encode4
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0x240],0x81
	call ZRef<CUISkillChangeConfirm>::~ZRef<CUISkillChangeConfirm>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x7B
	call ZRef<CUISkillInc>::~ZRef<CUISkillInc>
	mov byte ptr [esp+0x240],1
	lea ecx,[esp+0x1C]
	jmp Block496

 Block325:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block327

 Block326:
	lea eax,[esp+0xD4]
	push 0x98
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x84
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0xD4]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block327:
	mov ecx,dword ptr [esp+0x5C]
	mov ebp,dword ptr [ecx+0x20CC]
	cmp ebp,ebx
	je Block500

 Block328:
	lea ecx,[ebp+0x53D]
	mov dword ptr [esp+0x14],ebx
	mov dword ptr [esp+0x20],ebx
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x28],eax
	cmp eax,ebx
	je Block334

 Block329:
	lea edx,[esp+0x20]
	push edx
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[ebp+0x53D]
	call ZMap<long, long, long>::GetNext
	mov edi,dword ptr [eax]
	push edi
	call is_novice_skill
	add esp,4
	test eax,eax
	jne Block332

 Block330:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebx
	push edi
	push ebp
	call CSkillInfo::IsSkillVisible
	test eax,eax
	je Block332

 Block331:
	mov ecx,dword ptr [esp+0x20]
	add dword ptr [esp+0x14],ecx

 Block332:
	cmp dword ptr [esp+0x28],ebx
	jne Block329

 Block333:
	cmp dword ptr [esp+0x14],ebx
	jg Block335

 Block334:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x70],esp
	push 0x18D3
	push edx
	jmp Block156

 Block335:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x34]
	push eax
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x30],ebx
	mov byte ptr [esp+0x240],0x85
	sete al
	cmp al,bl
	jne Block168

 Block336:
	push 0xC50
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x86
	cmp eax,ebx
	je Block338

 Block337:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	jmp Block339

 Block338:
	xor eax,eax

 Block339:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUtilDlgEx>::_ctor_zero
	lea ecx,[esp+0x18]
	push 0x1948
	push ecx
	mov byte ptr [esp+0x248],0x87
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	lea edx,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push edx
	mov byte ptr [esp+0x258],0x88
	call ZXString<char>::_ctor_copy
	call CUtilDlg::YesNo_0
	add esp,0x14
	mov byte ptr [esp+0x240],0x87
	lea ecx,[esp+0x18]
	cmp eax,6
	je Block341

 Block340:
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x85
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	lea ecx,[esp+0x30]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block341:
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x85
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	mov byte ptr [esp+0x240],1
	jmp Block495

 Block342:
	mov eax,0x10624DD3
	imul esi
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	xor ecx,ecx
	cmp eax,0x13B0
	setne cl
	lea edx,[esp+0x38]
	mov eax,ecx
	mov ecx,dword ptr [esp+0x5C]
	push eax
	push edx
	call CWvsContext::RunMapTransferItem
	test eax,eax
	jne Block497

 Block343:
	jmp Block500

 Block344:
	mov eax,dword ptr [esp+0x250]
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode2
	jmp Block497

 Block345:
	push esi
	call is_cash_morph_item
	add esp,4
	test eax,eax
	je Block500

 Block346:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	call CUserLocal::IsSit
	test eax,eax
	jne Block500

 Block347:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	add ecx,0x88
	call CAvatar::IsRidingTamedMob
	test eax,eax
	jne Block500

 Block348:
	push 0x29
	push esi
	call play_item_sound
	add esp,8
	jmp Block497

 Block349:
	push esi
	lea ecx,[esp+0x60]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x5C],ebx
	mov byte ptr [esp+0x240],0x89
	sete al
	cmp al,bl
	jne Block352

 Block350:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block353

 Block351:
	lea edx,[esp+0x180]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x8A
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x180]
	mov byte ptr [esp+0x240],0x89
	call ZXString<char>::~ZXString<char>

 Block352:
	lea ecx,[esp+0x5C]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block353:
	mov eax,dword ptr [TSingleton<CUIItem>::ms_pInstance]
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIItem>::_ctor_zero
	mov byte ptr [esp+0x240],0x8B
	cmp dword ptr [esp+0x4C],ebx
	je Block358

 Block354:
	push 0xB2C
	call _operator_new
	mov esi,eax
	add esp,4
	mov dword ptr [esp+0x24],esi
	mov byte ptr [esp+0x240],0x8C
	cmp esi,ebx
	je Block356

 Block355:
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x1ACA
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea edx,[esp+0x230]
	push edx
	lea ecx,[esp+0x68]
	mov byte ptr [esp+0x24C],0x8D
	call _x_com_ptr<IWzProperty>::op_arrow
	mov ecx,eax
	mov byte ptr [esp+0x24C],0x8C
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0x248],0x8E
	mov dword ptr [esp+0x1C],1
	call get_int32
	add esp,8
	push eax
	sub esp,0x10
	lea eax,[esp+0x4C]
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push eax
	call COutPacket::_ctor_copy
	mov ecx,esi
	call CUIItemProtector::_ctor_0

 Block356:
	test byte ptr [esp+0x14],1
	mov dword ptr [esp+0x240],0x8B
	je Block358

 Block357:
	lea ecx,[esp+0x228]
	call Ztl_variant_t::~Ztl_variant_t

 Block358:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x89
	call ZRef<CUIItem>::~ZRef<CUIItem>
	lea ecx,[esp+0x5C]
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block359:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block361

 Block360:
	lea ecx,[esp+0xDC]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x90
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0xDC]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block361:
	mov edx,dword ptr [TSingleton<CUIItem>::ms_pInstance]
	push 1
	push edx
	lea ecx,[esp+0x50]
	call ZRef<CUIItem>::_ctor_zero
	mov byte ptr [esp+0x240],0x91
	cmp dword ptr [esp+0x4C],ebx
	je Block364

 Block362:
	push 0xB58
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x92
	cmp eax,ebx
	je Block364

 Block363:
	push ebx
	push ebx
	push ebx
	push esi
	push ebp
	mov ecx,eax
	call CUIIncubator::_ctor_0

 Block364:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUIItem>::~ZRef<CUIItem>
	jmp Block500

 Block365:
	mov ecx,dword ptr [esp+0x5C]
	lea eax,[esp+0x38]
	push eax
	call CWvsContext::RunShopScanner
	jmp Block500

 Block366:
	mov ecx,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edx,dword ptr [ecx+0x2E44]
	cmp dword ptr [edx+4],ebx
	jne Block497

 Block367:
	lea eax,[esp+0x15C]
	push 0xF01
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x93
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x15C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block368:
	mov edi,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	cmp edi,ebx
	je Block500

 Block369:
	push esi
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemName
	push ebx
	push 1
	push ebx
	push ebx
	lea edx,[esp+0xF4]
	push 0xEFE
	push edx
	mov byte ptr [esp+0x258],0x94
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x78],ebx
	mov ecx,dword ptr [esp+0x40]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x80]
	push edx
	mov byte ptr [esp+0x25C],0x96
	call ZXString<char>::Format
	add esp,8
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push eax
	call ZXString<char>::_ctor_copy
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	lea ecx,[esp+0x68]
	setne byte ptr [esp+0x63]
	mov byte ptr [esp+0x240],0x95
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xE4]
	mov byte ptr [esp+0x240],0x94
	call ZXString<char>::~ZXString<char>
	cmp byte ptr [esp+0x63],bl
	jne Block372

 Block370:
	mov ecx,dword ptr [edi+0x9D]
	mov eax,0x66666667
	imul esi
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea eax,[eax+eax*4]
	add eax,eax
	sub esi,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cdq
	mov ecx,0xA
	idiv ecx
	cmp edx,esi
	jne Block373

 Block371:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x70],esp
	push 0xF00
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block372:
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block373:
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block497

 Block374:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block497

 Block375:
	lea eax,[esp+0x184]
	push 0x98
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x97
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x184]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block376:
	call get_field
	test dword ptr [eax+0x178],0x40000
	je Block378

 Block377:
	lea ecx,[esp+0xEC]
	push 0x121
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x98
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0xEC]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block378:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block497

 Block379:
	lea edx,[esp+0x164]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x99
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x164]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block380:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block382

 Block381:
	lea eax,[esp+0xF4]
	push 0x98
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x9A
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0xF4]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block382:
	call get_field
	cmp dword ptr [eax+0x19C],ebx
	je Block384

 Block383:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x121
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	cmp eax,ebx
	jne Block500

 Block384:
	push 0xC50
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0x9B
	cmp eax,ebx
	je Block386

 Block385:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	jmp Block387

 Block386:
	xor eax,eax

 Block387:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUtilDlgEx>::_ctor_zero
	push ebx
	push 1
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x30],esp
	push 0x59D
	push edx
	mov byte ptr [esp+0x254],0x9C
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,dword ptr [esp+0x58]
	push ebx
	push 3
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push ebx
	push ebx
	push 0x28
	push ebx
	push ebx
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_STR
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	jne Block390

 Block388:
	lea eax,[esp+0x14]
	push eax
	mov ecx,esi
	call CUtilDlgEx::GetInputStr_Result
	push ebx
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x244],0x9D
	call ZXString<char>::Trim
	mov ecx,eax
	call ZXString<char>::IsEmpty
	lea ecx,[esp+0x14]
	test eax,eax
	je Block391

 Block389:
	mov byte ptr [esp+0x240],0x9C
	call ZXString<char>::~ZXString<char>

 Block390:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	jmp Block500

 Block391:
	push ecx
	lea ecx,[esp+0x34]
	call ZXString<char>::_ctor_copy
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x40]
	mov byte ptr [esp+0x250],0x9E
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	cmp esi,ebx
	jne Block393

 Block392:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x70],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x9D
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	jmp Block389

 Block393:
	push ecx
	lea eax,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x9D
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0x9C
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUtilDlgEx>::~ZRef<CUtilDlgEx>
	jmp Block497

 Block394:
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x14],ebx
	push 0xD4
	mov byte ptr [esp+0x244],0xA4
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0xA5
	cmp eax,ebx
	je Block396

 Block395:
	push ebx
	push ebx
	push ebx
	mov ecx,eax
	call CUIMapleTV::_ctor_0
	jmp Block397

 Block396:
	xor eax,eax

 Block397:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIMapleTV>::_ctor_zero
	mov esi,dword ptr [esp+0x4C]
	mov ecx,esi
	mov byte ptr [esp+0x240],0xA6
	call CDialog::DoModal
	cmp eax,1
	jne Block410

 Block398:
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::ConfirmTimeRemaining
	test eax,eax
	je Block410

 Block399:
	lea ecx,[esp+0x14]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x28]
	push eax
	lea ecx,[esp+0x34]
	push ecx
	lea edx,[esp+0x3C]
	push edx
	lea eax,[esp+0x30]
	push eax
	mov ecx,esi
	call CUIMapleTV::GetText
	push ebx
	lea ecx,[esp+0x4C]
	call ZRef<CUIMapleTV>::op_assign_zero
	push 0xA
	lea ecx,[esp+0x178]
	push ecx
	lea ecx,[esp+0x34]
	call ZXString<char>::op_add_2
	lea edx,[esp+0x28]
	push edx
	lea ecx,[esp+0x110]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xA7
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0x70]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xA8
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0x108]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xA9
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x170]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xAA
	call ZXString<char>::op_add_2
	lea edx,[esp+0x18]
	push edx
	lea ecx,[esp+0x100]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xAB
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0x190]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xAC
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x14]
	push ecx
	lea edx,[esp+0x34]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xAD
	call ZXString<char>::op_add_1
	lea ecx,[esp+0x18C]
	mov byte ptr [esp+0x240],0xAF
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xFC]
	mov byte ptr [esp+0x240],0xB0
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x16C]
	mov byte ptr [esp+0x240],0xB1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x104]
	mov byte ptr [esp+0x240],0xB2
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x6C]
	mov byte ptr [esp+0x240],0xB3
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x10C]
	mov byte ptr [esp+0x240],0xB4
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x174]
	mov byte ptr [esp+0x240],0xB5
	call ZXString<char>::~ZXString<char>
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x40]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x3C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block401

 Block400:
	xor esi,esi

 Block401:
	push 0xFFFFFFFF
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x38]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block403

 Block402:
	xor esi,esi

 Block403:
	push 0xFFFFFFFF
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x30]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block405

 Block404:
	xor esi,esi

 Block405:
	push 0xFFFFFFFF
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block407

 Block406:
	xor esi,esi

 Block407:
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	cmp dword ptr [esp+0x30],ebx
	je Block412

 Block408:
	cmp esi,ebx
	jne Block412

 Block409:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x70],esp
	push 0x11D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0xA6
	call ZXString<char>::~ZXString<char>

 Block410:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xA4
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0xA3
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xA2
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xA1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xA0
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0x9F

 Block411:
	lea ecx,[esp+0x2C]
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block412:
	lea ecx,[esp+0x1C]
	call ZXString<char>::IsEmpty
	test eax,eax
	sete cl
	lea ecx,[ecx+ecx+1]
	mov byte ptr [esp+0x24],cl
	mov edx,dword ptr [esp+0x24]
	push edx
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	push ecx
	lea eax,[esp+0x20]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x30]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x24]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0xA6
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xA4
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0xA3
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xA2
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xA1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xA0
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0x9F
	lea ecx,[esp+0x2C]
	jmp Block89

 Block413:
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x14],ebx
	push 0xD4
	mov byte ptr [esp+0x244],0xBB
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0xBC
	cmp eax,ebx
	je Block415

 Block414:
	push ebx
	push 1
	push ebx
	mov ecx,eax
	call CUIMapleTV::_ctor_0
	jmp Block416

 Block415:
	xor eax,eax

 Block416:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIMapleTV>::_ctor_zero
	mov esi,dword ptr [esp+0x4C]
	mov ecx,esi
	mov byte ptr [esp+0x240],0xBD
	call CDialog::DoModal
	cmp eax,1
	jne Block429

 Block417:
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::ConfirmTimeRemaining
	test eax,eax
	je Block429

 Block418:
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x34]
	push eax
	lea ecx,[esp+0x3C]
	push ecx
	lea edx,[esp+0x30]
	push edx
	mov ecx,esi
	call CUIMapleTV::GetText
	push ebx
	lea ecx,[esp+0x4C]
	call ZRef<CUIMapleTV>::op_assign_zero
	push 0xA
	lea eax,[esp+0x84]
	push eax
	lea ecx,[esp+0x34]
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x28]
	push ecx
	lea edx,[esp+0x7C]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xBE
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x74]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xBF
	call ZXString<char>::op_add_2
	lea edx,[esp+0x20]
	push edx
	lea ecx,[esp+0x128]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xC0
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0x180]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xC1
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x120]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xC2
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x1A0]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xC3
	call ZXString<char>::op_add_2
	lea edx,[esp+0x14]
	push edx
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xC4
	call ZXString<char>::op_add_1
	lea ecx,[esp+0x19C]
	mov byte ptr [esp+0x240],0xC6
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x11C]
	mov byte ptr [esp+0x240],0xC7
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x17C]
	mov byte ptr [esp+0x240],0xC8
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x124]
	mov byte ptr [esp+0x240],0xC9
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x70]
	mov byte ptr [esp+0x240],0xCA
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x78]
	mov byte ptr [esp+0x240],0xCB
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x80]
	mov byte ptr [esp+0x240],0xCC
	call ZXString<char>::~ZXString<char>
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x40]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x3C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block420

 Block419:
	xor esi,esi

 Block420:
	push 0xFFFFFFFF
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x38]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block422

 Block421:
	xor esi,esi

 Block422:
	push 0xFFFFFFFF
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x30]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block424

 Block423:
	xor esi,esi

 Block424:
	push 0xFFFFFFFF
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block426

 Block425:
	xor esi,esi

 Block426:
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	cmp dword ptr [esp+0x30],ebx
	je Block430

 Block427:
	cmp esi,ebx
	jne Block430

 Block428:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x70],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0xBD
	call ZXString<char>::~ZXString<char>

 Block429:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xBB
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0xBA
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xB9
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xB8
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xB7
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xB6
	jmp Block411

 Block430:
	push ecx
	lea eax,[esp+0x30]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x24]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0xBD
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xBB
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],0xBA
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xB9
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xB8
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xB7
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xB6
	lea ecx,[esp+0x2C]
	jmp Block89

 Block431:
	mov dword ptr [esp+0x14],ebx
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x18],ebx
	push 0xD4
	mov byte ptr [esp+0x244],0xD2
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x24],eax
	mov byte ptr [esp+0x240],0xD3
	cmp eax,ebx
	je Block433

 Block432:
	push ebx
	push 2
	push ebx
	mov ecx,eax
	call CUIMapleTV::_ctor_0
	jmp Block434

 Block433:
	xor eax,eax

 Block434:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIMapleTV>::_ctor_zero
	mov esi,dword ptr [esp+0x4C]
	mov ecx,esi
	mov byte ptr [esp+0x240],0xD4
	call CDialog::DoModal
	cmp eax,1
	jne Block439

 Block435:
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::ConfirmTimeRemaining
	test eax,eax
	je Block439

 Block436:
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x24]
	push edx
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x28]
	push eax
	mov ecx,esi
	call CUIMapleTV::GetText
	push ebx
	lea ecx,[esp+0x4C]
	call ZRef<CUIMapleTV>::op_assign_zero
	lea ecx,[esp+0x14]
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block441

 Block437:
	lea ecx,[esp+0x5C]
	push 0xFA1
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebx
	push 1
	push ebx
	push ebx
	push ecx
	lea edx,[esp+0x70]
	mov ecx,esp
	mov dword ptr [esp+0x68],esp
	push edx
	mov byte ptr [esp+0x258],0xD5
	call ZXString<char>::_ctor_copy
	call CUtilDlg::Notice
	lea ecx,[esp+0x70]

 Block438:
	add esp,0x14
	mov byte ptr [esp+0x240],0xD4
	call ZXString<char>::~ZXString<char>

 Block439:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xD2
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xD1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xD0
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xCF
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0xCE
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xCD

 Block440:
	lea ecx,[esp+0x1C]
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block441:
	push 0xA
	lea eax,[esp+0xBC]
	push eax
	lea ecx,[esp+0x24]
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0xB4]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xD6
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0xAC]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xD7
	call ZXString<char>::op_add_2
	lea edx,[esp+0x28]
	push edx
	lea ecx,[esp+0xA4]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xD8
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0x9C]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xD9
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0x94]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xDA
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x8C]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xDB
	call ZXString<char>::op_add_2
	lea edx,[esp+0x18]
	push edx
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xDC
	call ZXString<char>::op_add_1
	lea ecx,[esp+0x88]
	mov byte ptr [esp+0x240],0xDE
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x90]
	mov byte ptr [esp+0x240],0xDF
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x98]
	mov byte ptr [esp+0x240],0xE0
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xA0]
	mov byte ptr [esp+0x240],0xE1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xA8]
	mov byte ptr [esp+0x240],0xE2
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xE3
	lea ecx,[esp+0xB0]
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xB8]
	mov byte ptr [esp+0x240],0xE4
	call ZXString<char>::~ZXString<char>
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x40]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x2C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block443

 Block442:
	xor esi,esi

 Block443:
	push 0xFFFFFFFF
	lea ecx,[esp+0x20]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x3C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block445

 Block444:
	xor esi,esi

 Block445:
	push 0xFFFFFFFF
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x38]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block447

 Block446:
	xor esi,esi

 Block447:
	push 0xFFFFFFFF
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x30]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	test eax,eax
	jne Block449

 Block448:
	xor esi,esi

 Block449:
	push 0xFFFFFFFF
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	cmp dword ptr [esp+0x30],ebx
	je Block452

 Block450:
	cmp esi,ebx
	jne Block452

 Block451:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x68],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	lea ecx,[esp+0x44]
	jmp Block438

 Block452:
	push ecx
	lea eax,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x20]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x30]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x24]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0xD4
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xD2
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xD1
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xD0
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xCF
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0xCE
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xCD

 Block453:
	lea ecx,[esp+0x1C]
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x240],1
	call ZXString<char>::~ZXString<char>
	jmp Block497

 Block454:
	mov dword ptr [esp+0x14],ebx
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x18],ebx
	push 0xD4
	mov byte ptr [esp+0x244],0xEA
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x54],eax
	mov byte ptr [esp+0x240],0xEB
	cmp eax,ebx
	je Block456

 Block455:
	push 1
	push ebx
	push ebx
	mov ecx,eax
	call CUIMapleTV::_ctor_0
	jmp Block457

 Block456:
	xor eax,eax

 Block457:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIMapleTV>::_ctor_zero
	mov esi,dword ptr [esp+0x4C]
	mov ecx,esi
	mov byte ptr [esp+0x240],0xEC
	call CDialog::DoModal
	cmp eax,1
	jne Block462

 Block458:
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::ConfirmTimeRemaining
	test eax,eax
	je Block462

 Block459:
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x24]
	push ecx
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x38]
	push eax
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x28]
	push edx
	mov ecx,esi
	call CUIMapleTV::GetText
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x2C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x20]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x3C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x38]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x30]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	push 0xA
	lea eax,[esp+0xF4]
	push eax
	lea ecx,[esp+0x24]
	call ZXString<char>::op_add_2
	mov byte ptr [esp+0x240],0xED
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0xEC]
	push edx
	mov ecx,eax
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0xE4]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xEE
	call ZXString<char>::op_add_2
	lea edx,[esp+0x28]
	push edx
	lea ecx,[esp+0xDC]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xEF
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0xD4]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xF0
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0xCC]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xF1
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0xC4]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xF2
	call ZXString<char>::op_add_2
	lea edx,[esp+0x18]
	push edx
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xF3
	call ZXString<char>::op_add_1
	lea ecx,[esp+0xC0]
	mov byte ptr [esp+0x240],0xF5
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xC8]
	mov byte ptr [esp+0x240],0xF6
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xD0]
	mov byte ptr [esp+0x240],0xF7
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xD8]
	mov byte ptr [esp+0x240],0xF8
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xE0]
	mov byte ptr [esp+0x240],0xF9
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xE8]
	mov byte ptr [esp+0x240],0xFA
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0xF0]
	mov byte ptr [esp+0x240],0xFB
	call ZXString<char>::~ZXString<char>
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x40]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov edi,eax
	call ZXString<char>::ReleaseBuffer
	cmp dword ptr [esp+0x30],ebx
	je Block463

 Block460:
	cmp edi,ebx
	jne Block463

 Block461:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x68],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0xEC
	call ZXString<char>::~ZXString<char>

 Block462:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xEA
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xE9
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xE8
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xE7
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0xE6
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xE5
	jmp Block440

 Block463:
	lea ecx,[esp+0x14]
	call ZXString<char>::IsEmpty
	test eax,eax
	sete al
	mov ecx,esi
	lea eax,[eax+eax+1]
	mov byte ptr [esp+0x24],al
	call CUIMapleTV::IsCheckWhisper
	mov ecx,dword ptr [esp+0x24]
	push ecx
	lea ecx,[esp+0x3C]
	mov esi,eax
	call COutPacket::Encode1
	push esi
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	push ecx
	lea edx,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x20]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x30]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x24]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ebx
	lea ecx,[esp+0x4C]
	call ZRef<CUIMapleTV>::op_assign_zero
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0xEC
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0xEA
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0xE9
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0xE8
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xE7
	lea ecx,[esp+0x28]
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0xE6
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xE5
	jmp Block453

 Block464:
	mov dword ptr [esp+0x14],ebx
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x240],0x100
	mov dword ptr [esp+0x18],ebx
	push 0xD4
	mov byte ptr [esp+0x244],1
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x54],eax
	mov byte ptr [esp+0x240],2
	cmp eax,ebx
	je Block466

 Block465:
	push 1
	push 1
	push ebx
	mov ecx,eax
	call CUIMapleTV::_ctor_0
	jmp Block467

 Block466:
	xor eax,eax

 Block467:
	push 1
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIMapleTV>::_ctor_zero
	mov esi,dword ptr [esp+0x4C]
	mov ecx,esi
	mov byte ptr [esp+0x240],3
	call CDialog::DoModal
	cmp eax,1
	jne Block472

 Block468:
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::ConfirmTimeRemaining
	test eax,eax
	je Block472

 Block469:
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x24]
	push edx
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x28]
	push eax
	mov ecx,esi
	call CUIMapleTV::GetText
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x2C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x20]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x3C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x38]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x30]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	push 0xA
	lea ecx,[esp+0x12C]
	push ecx
	lea ecx,[esp+0x24]
	call ZXString<char>::op_add_2
	mov byte ptr [esp+0x240],4
	lea edx,[esp+0x2C]
	push edx
	lea ecx,[esp+0x124]
	push ecx
	mov ecx,eax
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0x11C]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],5
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x28]
	push ecx
	lea edx,[esp+0x114]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],6
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x10C]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],7
	call ZXString<char>::op_add_2
	lea edx,[esp+0x20]
	push edx
	lea ecx,[esp+0x104]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],8
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0xFC]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],9
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x34]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0xA
	call ZXString<char>::op_add_1
	lea ecx,[esp+0xF8]
	mov byte ptr [esp+0x240],0xC
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x100]
	mov byte ptr [esp+0x240],0xD
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x108]
	mov byte ptr [esp+0x240],0xE
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x110]
	mov byte ptr [esp+0x240],0xF
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x118]
	mov byte ptr [esp+0x240],0x10
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x120]
	mov byte ptr [esp+0x240],0x11
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x128]
	mov byte ptr [esp+0x240],0x12
	call ZXString<char>::~ZXString<char>
	push 1
	push ebx
	push 1
	push 0x400
	lea ecx,[esp+0x40]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov edi,eax
	call ZXString<char>::ReleaseBuffer
	cmp dword ptr [esp+0x30],ebx
	je Block473

 Block470:
	cmp edi,ebx
	jne Block473

 Block471:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x68],esp
	push 0x11D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],3
	call ZXString<char>::~ZXString<char>

 Block472:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],bl
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x240],0xFF
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xFE
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0xFD
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xFC
	jmp Block440

 Block473:
	mov ecx,esi
	call CUIMapleTV::IsCheckWhisper
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	push ecx
	lea edx,[esp+0x20]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x30]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x24]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ebx
	lea ecx,[esp+0x4C]
	call ZRef<CUIMapleTV>::op_assign_zero
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],3
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],1
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],bl
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x240],0xFF
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0xFE
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0xFD
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0xFC
	jmp Block453

 Block474:
	mov dword ptr [esp+0x14],ebx
	mov dword ptr [esp+0x240],0x113
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x20],ebx
	push 0xD4
	mov byte ptr [esp+0x244],0x18
	call _operator_new
	add esp,4
	mov dword ptr [esp+0x54],eax
	mov byte ptr [esp+0x240],0x19
	mov ebp,1
	cmp eax,ebx
	je Block476

 Block475:
	push ebp
	push 2
	push ebx
	mov ecx,eax
	call CUIMapleTV::_ctor_0
	jmp Block477

 Block476:
	xor eax,eax

 Block477:
	push ebp
	push eax
	lea ecx,[esp+0x50]
	call ZRef<CUIMapleTV>::_ctor_zero
	mov edi,dword ptr [esp+0x4C]
	mov ecx,edi
	mov byte ptr [esp+0x240],0x1A
	call CDialog::DoModal
	cmp eax,ebp
	jne Block482

 Block478:
	mov ecx,dword ptr [TSingleton<CMapleTVMan>::ms_pInstance]
	call CMapleTVMan::ConfirmTimeRemaining
	test eax,eax
	je Block482

 Block479:
	lea eax,[esp+0x20]
	push eax
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x34]
	push edx
	lea eax,[esp+0x28]
	push eax
	lea ecx,[esp+0x28]
	push ecx
	lea edx,[esp+0x28]
	push edx
	mov ecx,edi
	call CUIMapleTV::GetText
	push ebp
	push ebx
	push ebp
	push 0x400
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	push ebp
	push ebx
	push ebp
	push 0x400
	lea ecx,[esp+0x2C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x20]
	call ZXString<char>::ReleaseBuffer
	push ebp
	push ebx
	push ebp
	push 0x400
	lea ecx,[esp+0x3C]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	push ebp
	push ebx
	push ebp
	push 0x400
	lea ecx,[esp+0x38]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	push ebp
	push ebx
	push ebp
	push 0x400
	lea ecx,[esp+0x30]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	lea ecx,[esp+0x14]
	call ZXString<char>::IsEmpty
	test eax,eax
	je Block483

 Block480:
	lea eax,[esp+0x5C]
	push 0xFA1
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebx
	push ebp
	push ebx
	push ebx
	push ecx
	lea edx,[esp+0x70]
	mov ecx,esp
	mov dword ptr [esp+0x68],esp
	push edx
	mov byte ptr [esp+0x258],0x1B
	call ZXString<char>::_ctor_copy
	call CUtilDlg::Notice
	lea ecx,[esp+0x70]

 Block481:
	add esp,0x14
	mov byte ptr [esp+0x240],0x1A
	call ZXString<char>::~ZXString<char>

 Block482:
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x18
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0x17
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0x16
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0x15
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],0x14
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0x13
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x240],ebp
	call ZXString<char>::~ZXString<char>
	jmp Block500

 Block483:
	push 0xA
	lea eax,[esp+0x164]
	push eax
	lea ecx,[esp+0x20]
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x15C]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x1C
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x154]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x1D
	call ZXString<char>::op_add_2
	lea edx,[esp+0x2C]
	push edx
	lea ecx,[esp+0x14C]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x1E
	call ZXString<char>::op_add_1
	push 0xA
	lea edx,[esp+0x144]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x1F
	call ZXString<char>::op_add_2
	lea ecx,[esp+0x28]
	push ecx
	lea edx,[esp+0x13C]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x20
	call ZXString<char>::op_add_1
	push 0xA
	lea ecx,[esp+0x134]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x21
	call ZXString<char>::op_add_2
	lea edx,[esp+0x20]
	push edx
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0x248],0x22
	call ZXString<char>::op_add_1
	lea ecx,[esp+0x130]
	mov byte ptr [esp+0x240],0x24
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x138]
	mov byte ptr [esp+0x240],0x25
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x140]
	mov byte ptr [esp+0x240],0x26
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x148]
	mov byte ptr [esp+0x240],0x27
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x150]
	mov byte ptr [esp+0x240],0x28
	call ZXString<char>::~ZXString<char>
	mov byte ptr [esp+0x240],0x29
	lea ecx,[esp+0x158]
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x160]
	mov byte ptr [esp+0x240],0x2A
	call ZXString<char>::~ZXString<char>
	push ebp
	push ebx
	push ebp
	push 0x400
	lea ecx,[esp+0x40]
	call ZXString<char>::GetBuffer
	push eax
	call CCurseProcess::ProcessString
	add esp,0xC
	push 0xFFFFFFFF
	lea ecx,[esp+0x34]
	mov esi,eax
	call ZXString<char>::ReleaseBuffer
	cmp dword ptr [esp+0x30],ebx
	je Block486

 Block484:
	cmp esi,ebx
	jne Block486

 Block485:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x68],esp
	push 0x11D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	lea ecx,[esp+0x44]
	jmp Block481

 Block486:
	mov ecx,edi
	call CUIMapleTV::IsCheckWhisper
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	push ecx
	lea eax,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x20]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x30]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea eax,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push eax
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ecx
	lea edx,[esp+0x24]
	mov ecx,esp
	mov dword ptr [esp+0x58],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	push ebx
	lea ecx,[esp+0x4C]
	call ZRef<CUIMapleTV>::op_assign_zero
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x240],0x1A
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x48]
	mov byte ptr [esp+0x240],0x18
	call ZRef<CUIMapleTV>::~ZRef<CUIMapleTV>
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x240],0x17
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0x240],0x16
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0x240],0x15
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x240],0x14
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x240],0x13
	call ZXString<char>::~ZXString<char>
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x240],ebp
	call ZXString<char>::~ZXString<char>
	jmp Block497

 Block487:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	call CItemInfo::GetAreaBuffItem
	cmp eax,ebx
	je Block500

 Block488:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	mov edi,dword ptr [eax+0x19E8]
	mov ebp,dword ptr [TSingleton<CAffectedAreaPool>::ms_pInstance]
	lea ecx,[eax+4]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x10]
	lea edx,[esp+0x220]
	push edx
	call eax
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	push esi
	push edi
	mov ecx,ebp
	call CAffectedAreaPool::IsUsableAreaBuffItem
	test eax,eax
	jne Block497

 Block489:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x68],esp
	push 0x1300
	jmp Block155

 Block490:
	push esi
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemInfo
	cmp dword ptr [esp+0x30],ebx
	mov dword ptr [esp+0x240],0x12B
	sete al
	cmp al,bl
	jne Block493

 Block491:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block494

 Block492:
	lea edx,[esp+0x64]
	push 0x98
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0x248],0x2C
	call CHATLOG_ADD
	add esp,8
	lea ecx,[esp+0x64]
	mov byte ptr [esp+0x240],0x2B
	call ZXString<char>::~ZXString<char>

 Block493:
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x240],1
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>
	jmp Block500

 Block494:
	mov dword ptr [esp+0x240],1

 Block495:
	lea ecx,[esp+0x30]

 Block496:
	call _x_com_ptr<IWzProperty>::~_x_com_ptr<IWzProperty>

 Block497:
	mov esi,dword ptr [esp+0x5C]
	push ebx
	push 0x1F4
	mov ecx,esi
	call CWvsContext::CanSendExclRequest
	test eax,eax
	jne Block499

 Block498:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x68],esp
	push 0x136
	jmp Block155

 Block499:
	lea ecx,[esp+0x38]
	push ecx
	call SendPacket
	add esp,4
	push 1
	mov ecx,esi
	call CWvsContext::SetExclRequestSent
	lea edx,[esp+0x24]
	push 0x927
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0x64
	push eax
	mov dword ptr [esp+0x248],0x12D
	call play_game_sound
	add esp,8
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x240],1
	call ZXString<unsigned short>::~ZXString<unsigned short>

 Block500:
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x240],bl
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x254]
	mov dword ptr [esp+0x240],0xFFFFFFFF
	call ZXString<char>::~ZXString<char>
	jmp Block24
}
}
