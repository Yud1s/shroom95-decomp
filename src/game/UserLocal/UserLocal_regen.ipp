#include "regen.hpp"
// UserLocal.ipp
#include "UserLocal.hpp"

// CUserLocal::VerticalJump
_SUB_EXCEPTION_HANDLER(50F510)
__SUB_CLASS_THIS0(0050F510, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50F510
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov eax,dword ptr [edi+0x19E4]
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	jmp Block3

 Block2:
	xor eax,eax

 Block3:
	cmp dword ptr [eax+0x1A0],0
	je Block9

 Block4:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x27
	mov ebx,ecx
	call CInputSystem::IsKeyPressed
	mov esi,eax
	neg esi
	sbb esi,esi
	push 0x25
	mov ecx,ebx
	and esi,0x64
	call CInputSystem::IsKeyPressed
	mov ecx,dword ptr [edi+0x640]
	neg eax
	sbb eax,eax
	and cl,1
	and eax,0xFFFFFF9C
	add eax,esi
	movsx edx,cl
	neg edx
	sbb edx,edx
	and edx,0xFFFFFE70
	add edx,0xC8
	add edx,eax
	mov eax,dword ptr [edi+0x19E4]
	mov dword ptr [esp+0x10],edx
	test eax,eax
	je Block6

 Block5:
	lea esi,[eax-0xC]
	jmp Block7

 Block6:
	xor esi,esi

 Block7:
	push 0x18
	mov ecx,esi
	call CVecCtrl::SetMovePathAttribute
	fld qword ptr [__real_c0a1f80000000000]
	sub esp,0x10
	fstp qword ptr [esp+8]
	mov ecx,esi
	fild dword ptr [esp+0x20]
	fstp qword ptr [esp]
	call CVecCtrl::SetImpactNext_0
	push 0xC00614A4
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x1C],esp
	mov dword ptr [eax],0
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x10]
	lea esi,[edi+4]
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x40],0
	call edx
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x10]
	push eax
	lea eax,[esp+0x30]
	push eax
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax]
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x24]
	push 0xAD7
	push ecx
	mov byte ptr [esp+0x50],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov ecx,dword ptr [edi+0x640]
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x48],2
	not ecx
	and ecx,1
	push ecx
	mov byte ptr [esp+0x4C],3
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	call CAnimationDisplayer::Effect_General
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block9:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x28
	ret
}
}
// CUserLocal::OnPacket
__SUB_CLASS_THIS(005340C0, __thiscall, 41360,  CUserLocal, void, long, CInPacket&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	add eax,0xFFFFFF19
	cmp eax,0x2D
	ja Block45

 Block1:
	cmp EAX, 0
je Block5
cmp EAX, 1
je Block2
cmp EAX, 2
je Block3
cmp EAX, 3
je Block4
cmp EAX, 4
je Block45
cmp EAX, 5
je Block6
cmp EAX, 6
je Block7
cmp EAX, 7
je Block8
cmp EAX, 8
je Block9
cmp EAX, 9
je Block10
cmp EAX, 10
je Block11
cmp EAX, 11
je Block12
cmp EAX, 12
je Block13
cmp EAX, 13
je Block45
cmp EAX, 14
je Block15
cmp EAX, 15
je Block16
cmp EAX, 16
je Block17
cmp EAX, 17
je Block19
cmp EAX, 18
je Block45
cmp EAX, 19
je Block22
cmp EAX, 20
je Block23
cmp EAX, 21
je Block24
cmp EAX, 22
je Block25
cmp EAX, 23
je Block26
cmp EAX, 24
je Block27
cmp EAX, 25
je Block28
cmp EAX, 26
je Block29
cmp EAX, 27
je Block18
cmp EAX, 28
je Block20
cmp EAX, 29
je Block21
cmp EAX, 30
je Block30
cmp EAX, 31
je Block31
cmp EAX, 32
je Block32
cmp EAX, 33
je Block33
cmp EAX, 34
je Block34
cmp EAX, 35
je Block41
cmp EAX, 36
je Block35
cmp EAX, 37
je Block36
cmp EAX, 38
je Block37
cmp EAX, 39
je Block38
cmp EAX, 40
je Block39
cmp EAX, 41
je Block40
cmp EAX, 42
je Block42
cmp EAX, 43
je Block43
cmp EAX, 44
je Block44
cmp EAX, 45
je Block14


 Block2:
	mov eax,dword ptr [esp+8]
	push eax
	call CUser::OnEmotion
	ret 8

 Block3:
	mov edx,dword ptr [esp+8]
	push edx
	call CUser::OnEffect
	ret 8

 Block4:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnTeleport
	ret 8

 Block5:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnSitResult
	ret 8

 Block6:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnMesoGive_Succeeded
	ret 8

 Block7:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnMesoGive_Failed
	ret 8

 Block8:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnRandomMesobag_Succeeded
	ret 8

 Block9:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnRandomMesobag_Failed
	ret 8

 Block10:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnFieldFadeInOut
	ret 8

 Block11:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnFieldFadeOutForce
	ret 8

 Block12:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnQuestResult
	ret 8

 Block13:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnNotifyHPDecByField
	ret 8

 Block14:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnSkillCooltimeSet
	ret 8

 Block15:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnBalloonMsg
	ret 8

 Block16:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnPlayEventSound
	ret 8

 Block17:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnPlayMinigameSound
	ret 8

 Block18:
	mov eax,dword ptr [esp+8]
	push eax
	call CUser::OnRandomEmotion
	ret 8

 Block19:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnMakerResult
	ret 8

 Block20:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnResignQuestReturn
	ret 8

 Block21:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnPassMateName
	ret 8

 Block22:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnOpenClassCompetitionPage
	ret 8

 Block23:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnOpenUI
	ret 8

 Block24:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnOpenUIWithOption
	ret 8

 Block25:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnSetDirectionMode
	ret 8

 Block26:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnSetStandAloneMode
	ret 8

 Block27:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnHireTutor
	ret 8

 Block28:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnTutorMsg
	ret 8

 Block29:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnIncComboResponse
	ret 8

 Block30:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnRadioSchedule
	ret 8

 Block31:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnOpenSkillGuide
	ret 8

 Block32:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnNoticeMsg
	ret 8

 Block33:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnChatMsg
	ret 8

 Block34:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnBuffzoneEffect
	ret 8

 Block35:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnDamageMeter
	ret 8

 Block36:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnTimeBombAttack
	ret 8

 Block37:
	mov edx,dword ptr [esp+8]
	push edx
	call CUser::OnPassiveMove
	ret 8

 Block38:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnFollowCharacterFailed
	ret 8

 Block39:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnVengeanceSkillApply
	ret 8

 Block40:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnExJablinApply
	ret 8

 Block41:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnGoToCommoditySN
	ret 8

 Block42:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnAskAPSPEvent
	ret 8

 Block43:
	mov edx,dword ptr [esp+8]
	push edx
	call CUserLocal::OnQuestGuideResult
	ret 8

 Block44:
	mov eax,dword ptr [esp+8]
	push eax
	call CUserLocal::OnDeliveryQuest

 Block45:
	ret 8
}
}
// CUserLocal::SendRepeatEffectRemoveRequest
_SUB_EXCEPTION_HANDLER(509D70)
__SUB_CLASS_THIS0(00509D70, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_509D70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0xDE
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+4]
	push eax
	mov dword ptr [esp+0x20],0
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret
}
}
// CUserLocal::TryDoingSitdownHealing
__SUB_CLASS_THIS0(00503D60, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0xA
	jne Block2

 Block1:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	jmp  CUserPool::DoHealNearHealingRobot

 Block2:
	ret
}
}
// CUserLocal::SetMarriagePairCharacterID
__SUB_CLASS_THIS0(005089B0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0xC
	push ebx
	push ebp
	mov ebp,ecx
	cmp dword ptr [ebp+0x2EB4],0
	push esi
	push edi
	je Block2

 Block1:
	mov eax,dword ptr [ebp+0x19E8]
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push eax
	call CUserPool::OnMarriageRecordRemove

 Block2:
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x10],edx
	test eax,eax
	je Block7

 Block3:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block6

 Block5:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block6:
	mov dword ptr [esp+0x18],0

 Block7:
	mov esi,offset _D_G_ANRINGBODYPART
	xor edi,edi
	lea ebx,[ebx]

 Block8:
	mov eax,dword ptr [esi]
	mov eax,dword ptr [ebx+eax*8+0x3874]
	cmp eax,edi
	je Block13

 Block9:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	cmp eax,0x10FAE3
	je Block15

 Block10:
	cmp eax,0x10FAE6
	je Block15

 Block11:
	cmp eax,0x10FAE7
	je Block15

 Block12:
	cmp eax,0x10FAE9
	je Block15

 Block13:
	add esi,4
	cmp esi,offset _D_G_ANPETABILBODYP
	jl Block8

 Block14:
	mov dword ptr [ebp+0x2EB0],edi
	mov dword ptr [ebp+0x2EB4],edi
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC
	ret

 Block15:
	mov ecx,dword ptr [esp+0x10]
	mov eax,dword ptr [ecx+0x649]
	mov dword ptr [esp+0x10],eax
	cmp eax,edi
	je Block14

 Block16:
	lea edx,[esp+0x10]
	push edx
	call ZList<GW_MarriageRecord>::GetNext
	add esp,4
	cmp dword ptr [ebx+0x2034],edi
	jne Block18

 Block17:
	mov ecx,dword ptr [eax+4]
	mov dword ptr [ebp+0x2EB0],ecx
	mov edx,dword ptr [eax+8]
	jmp Block19

 Block18:
	mov ecx,dword ptr [eax+8]
	mov dword ptr [ebp+0x2EB0],ecx
	mov edx,dword ptr [eax+4]

 Block19:
	mov ecx,dword ptr [ebp+0x2EB0]
	mov dword ptr [ebp+0x2EB4],edx
	mov eax,dword ptr [eax+0xE]
	push eax
	push ebp
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::OnMarriageRecordAdd
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC
	ret
}
}
// CUserLocal::SendBanMapByMobRequest
_SUB_EXCEPTION_HANDLER(508D50)
__SUB_CLASS_THIS(00508D50, __thiscall, 41444,  CUserLocal, void, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_508D50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	push 0x3D
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+8]
	mov dword ptr [esp+0x20],0
	call COutPacket::Encode4
	lea ecx,[esp+4]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret 4
}
}
// _ZtlSecureFuse_char_
__SUB(005035C0, __cdecl, 82350,  char, const char*, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	movzx edx,byte ptr [eax+1]
	movzx ecx,byte ptr [eax]
	mov al,dl
	xor al,cl
	xor ecx,0xBAADF00D
	ror ecx,5
	add ecx,edx
	cmp ecx,dword ptr [esp+8]
	je Block2

 Block1:
	push offset ZException::THROW_INFO
	lea eax,[esp+8]
	push eax
	mov dword ptr [esp+0xC],5
	call _CxxThrowException

 Block2:
	ret
}
}
// CUserLocal::OnFeatureChanged
__SUB_CLASS_THIS0(0051D640, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0xC
	push ebx
	push ebp
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push esi
	push edi
	lea eax,[esp+0x14]
	mov esi,ecx
	push eax
	mov ecx,ebp
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x10],ebx
	test eax,eax
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov ebx,dword ptr [esp+0x10]
	mov dword ptr [esp+0x18],0

 Block5:
	lea edx,[ebp+0x3A50]
	push edx
	lea eax,[ebp+0x3870]
	push eax
	lea ecx,[esi+0x8C]
	push ebx
	call AvatarLook::Load_1
	push 0
	lea ecx,[esi+0x88]
	call CAvatar::NotifyAvatarModified
	mov ecx,esi
	call CUserLocal::SetShoeAttr
	xor edi,edi
	lea esp,[esp]

 Block6:
	mov ecx,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [ecx+edi+4]
	test ecx,ecx
	je Block8

 Block7:
	call CPet::OnValidateStat
	add edi,8
	cmp edi,0x18
	jl Block6

 Block8:
	mov ecx,dword ptr [TSingleton<CUIMessenger>::ms_pInstance]
	test ecx,ecx
	je Block10

 Block9:
	lea eax,[esi+0x8C]
	push eax
	call CUIMessenger::OnSelfAvatarChanged

 Block10:
	mov eax,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	test eax,eax
	je Block14

 Block11:
	mov edx,dword ptr [eax+4]
	lea ecx,[eax+4]
	mov eax,dword ptr [edx+0x48]
	push offset CMiniRoomBaseDlg::ms_RTTI_CMiniRoomBaseDlg
	call eax
	test eax,eax
	je Block14

 Block12:
	mov ecx,dword ptr [TSingleton<CUniqueModeless>::ms_pInstance]
	test ecx,ecx
	je Block14

 Block13:
	lea eax,[esi+0x8C]
	push eax
	call CMiniRoomBaseDlg::OnSelfAvatarChanged

 Block14:
	push ebx
	mov ecx,esi
	call CUserLocal::SetCarryItemEffectForLocal
	mov ecx,esi
	call CUserLocal::SetPairCharacterID
	mov ecx,dword ptr [ebp+0x3600]
	push ecx
	push ebx
	mov ecx,esi
	call CUserLocal::SetActiveEffectItemForLocal
	mov ecx,esi
	call CUserLocal::SetFriendPairCharacterID
	mov ecx,esi
	call CUserLocal::SetMarriagePairCharacterID
	mov ecx,esi
	call CUserLocal::ValidateItemSkill
	pop edi
	mov ecx,esi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC
	jmp  CUserLocal::ValidateSkillBonus
}
}
// CUserLocal::HoldCombo
__SUB_CLASS_THIS(005180E0, __thiscall, 41339,  CUserLocal, void, int32_t) {
__asm {

 Block0:
	cmp dword ptr [esp+4],0
	push esi
	mov esi,ecx
	je Block2

 Block1:
	mov dword ptr [esi+0x4798],1
	call CUserLocal::DrawCombo
	pop esi
	ret 4

 Block2:
	mov dword ptr [esi+0x4798],0
	call get_update_time
	mov dword ptr [esi+0x4794],eax
	pop esi
	ret 4
}
}
// CUserLocal::ApplyAccessoryOption
__SUB_CLASS_THIS(0050EDD0, __thiscall, 41352,  CUserLocal, void, long&, long&, int32_t) {
__asm {

 Block0:
	sub esp,0x10
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebx
	push ebp
	mov ebp,dword ptr [esp+0x24]
	push esi
	push edi
	mov dword ptr [esp+0x10],ecx
	mov dword ptr [esp+0x14],eax
	mov ebx,1
	lea ecx,[ecx]

 Block1:
	cmp ebx,2
	je Block9

 Block2:
	cmp ebx,3
	je Block9

 Block3:
	cmp ebx,4
	je Block9

 Block4:
	cmp ebx,0xC
	je Block9

 Block5:
	cmp ebx,0xD
	je Block9

 Block6:
	cmp ebx,0xF
	je Block9

 Block7:
	cmp ebx,0x10
	je Block9

 Block8:
	cmp ebx,0x11
	jne Block18

 Block9:
	push ebx
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CWvsContext::GetRealEquipSlot
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block14

 Block10:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block13

 Block11:
	mov edx,dword ptr [esp+0x1C]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x1C]
	test ecx,ecx
	je Block13

 Block12:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block13:
	mov dword ptr [esp+0x1C],0

 Block14:
	test edi,edi
	je Block18

 Block15:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x78]
	mov ecx,edi
	call edx
	test eax,eax
	je Block18

 Block16:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block18

 Block17:
	mov ecx,dword ptr [eax+0x68]
	push ecx
	add eax,0x60
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	mov eax,dword ptr [esp+0x2C]
	mov ecx,dword ptr [edi+0x115]
	sar edx,2
	mov esi,edx
	add esp,8
	push ebp
	shr esi,0x1F
	add esi,edx
	mov edx,dword ptr [esp+0x2C]
	push edx
	push eax
	push esi
	push ecx
	lea edx,[edi+0x111]
	push edx
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,dword ptr [esp+0x28]
	cwde
	add esp,8
	push eax
	call CUserLocal::ApplyRecoveryOption
	mov ecx,dword ptr [esp+0x28]
	mov edx,dword ptr [esp+0x24]
	mov eax,dword ptr [edi+0x11D]
	push ebp
	push ecx
	push edx
	push esi
	push eax
	lea ecx,[edi+0x119]
	push ecx
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,dword ptr [esp+0x28]
	movsx edx,ax
	add esp,8
	push edx
	call CUserLocal::ApplyRecoveryOption
	mov eax,dword ptr [esp+0x28]
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [edi+0x125]
	push ebp
	push eax
	push ecx
	push esi
	push edx
	add edi,0x121
	push edi
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,dword ptr [esp+0x28]
	cwde
	add esp,8
	push eax
	call CUserLocal::ApplyRecoveryOption

 Block18:
	inc ebx
	cmp ebx,0x3C
	jl Block1

 Block19:
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x10
	ret 0xC
}
}
// CUserLocal::DoActiveSkill_Prepare
_SUB_EXCEPTION_HANDLER(541710)
__SUB_CLASS_THIS(00541710, __thiscall, 41433,  CUserLocal, int32_t, const SKILLENTRY*, long, uint32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_541710
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x2C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x40]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x50]
	mov edi,dword ptr [eax]
	mov dword ptr [esp+0x1C],edi
	call get_update_time
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [ebx+0x20B8],0
	mov ebp,eax
	mov dword ptr [esp+0x18],ebp
	jne Block10

 Block1:
	mov eax,dword ptr [ebx+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block10

 Block2:
	call get_update_time
	sub eax,dword ptr [ebx+0x20BC]
	cmp eax,0x12C
	jl Block10

 Block3:
	lea edx,[esp+0x28]
	push edx
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [esp+0x2C]
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x14],eax
	test ecx,ecx
	je Block8

 Block4:
	lea ebp,[ecx-0x10]
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block7

 Block5:
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebp,ebp
	je Block7

 Block6:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,ebp
	call edx

 Block7:
	mov eax,dword ptr [esp+0x14]
	mov ebp,dword ptr [esp+0x18]
	mov dword ptr [esp+0x2C],0

 Block8:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	add ebx,0x20D0
	mov dword ptr [esp+0x24],ebx
	push 0
	cmp edi,0x2179951
	jne Block12

 Block9:
	push 0x21612A9
	push eax
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jg Block13

 Block10:
	xor eax,eax

 Block11:
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x38
	ret 0xC

 Block12:
	push edi
	push eax
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block10

 Block13:
	mov eax,0x10624DD3
	imul edi
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cdq
	mov ecx,0xA
	idiv ecx
	test edx,edx
	je Block10

 Block14:
	cmp edx,9
	je Block10

 Block15:
	cmp edi,0x21612A9
	je Block17

 Block16:
	cmp edi,0x2179951
	jne Block19

 Block17:
	cmp dword ptr [esi+0x5EC],0
	jne Block10

 Block18:
	cmp dword ptr [esi+0x5F0],0
	jne Block10

 Block19:
	lea edx,[esp+0x20]
	push edx
	mov ecx,esi
	call CUser::GetVecCtrl_0
	mov ebx,dword ptr [eax]
	test ebx,ebx
	je Block21

 Block20:
	add ebx,0xFFFFFFF4
	jmp Block22

 Block21:
	xor ebx,ebx

 Block22:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block24

 Block23:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block24:
	push edi
	call is_prepare_bomb_skill
	add esp,4
	test eax,eax
	jne Block28

 Block25:
	cmp dword ptr [ebx+0x1A0],eax
	jne Block28

 Block26:
	mov ecx,ebx
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block28

 Block27:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+8]
	mov ecx,ebx
	call edx
	test eax,eax
	je Block10

 Block28:
	cmp edi,0x21612A9
	je Block30

 Block29:
	cmp edi,0x2179951
	jne Block31

 Block30:
	cmp dword ptr [ebx+0x1A0],0
	je Block10

 Block31:
	push edi
	call is_prepare_bomb_skill
	add esp,4
	test eax,eax
	je Block33

 Block32:
	mov ecx,ebx
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	jne Block10

 Block33:
	mov ecx,ebx
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block35

 Block34:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+8]
	mov ecx,ebx
	call edx
	test eax,eax
	je Block36

 Block35:
	mov ecx,ebx
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	jne Block10

 Block36:
	cmp edi,0xD7511E
	jg Block41

 Block37:
	je Block43

 Block38:
	cmp edi,0x423D0B
	je Block43

 Block39:
	cmp edi,0x4F5C6A
	je Block43

 Block40:
	jmp Block45

 Block41:
	cmp edi,0x21612A9
	je Block43

 Block42:
	cmp edi,0x2179951
	jne Block45

 Block43:
	lea eax,[esp+0x20]
	push eax
	lea ecx,[esp+0x20]
	push ecx
	lea ecx,[esi+0x46C4]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block45

 Block44:
	cmp ebp,dword ptr [esp+0x20]
	jl Block10

 Block45:
	cmp edi,0x4DD5CC
	jne Block50

 Block46:
	cmp dword ptr [esi+0x3B44],edi

 Block47:
	jne Block55

 Block48:
	cmp ebp,dword ptr [esi+0x3B60]
	jge Block55

 Block49:
	jmp Block10

 Block50:
	cmp edi,0xE66C4B
	jne Block52

 Block51:
	cmp dword ptr [esi+0x3B44],edi
	jmp Block47

 Block52:
	cmp edi,0x423D0A
	jne Block55

 Block53:
	cmp dword ptr [esi+0x3B44],edi
	jne Block55

 Block54:
	cmp ebp,dword ptr [esi+0x3B60]
	jl Block10

 Block55:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block10

 Block56:
	cmp dword ptr [esi+0x3AD4],0
	jne Block10

 Block57:
	cmp edi,0x312609
	je Block94

 Block58:
	cmp edi,0x2F9F6C
	je Block94

 Block59:
	cmp edi,0x4FAA8C
	je Block94

 Block60:
	cmp edi,0xC80EDA
	je Block94

 Block61:
	cmp edi,0x21612A9
	je Block94

 Block62:
	cmp edi,0x2179951
	je Block94

 Block63:
	cmp edi,0x1F962F1
	je Block94

 Block64:
	cmp edi,0x4F5C6A
	je Block85

 Block65:
	cmp edi,0x4DD5CC
	je Block85

 Block66:
	cmp edi,0xE66C4B
	je Block85

 Block67:
	cmp edi,0xD7511E
	jne Block73

 Block68:
	mov ecx,esi
	call CUserLocal::IsWeaponDisabled
	test eax,eax
	jne Block10

 Block69:
	mov eax,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	add esp,4
	cmp eax,0x2F
	je Block127

 Block70:
	lea edx,[esp+0x50]
	push 0x1127
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],5

 Block71:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x58]
	add esp,8
	mov dword ptr [esp+0x48],0xFFFFFFFF
	test eax,eax
	je Block10

 Block72:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block10

 Block73:
	cmp edi,0x423D0B
	je Block83

 Block74:
	cmp edi,0x423D0A
	je Block83

 Block75:
	cmp edi,0x1F914CD
	jne Block80

 Block76:
	mov eax,dword ptr [esi+0x590]
	mov ebx,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	add esp,4
	push eax
	push ebx
	call get_weapon_type
	mov ecx,dword ptr [esp+0x58]
	add esp,4
	push eax
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block126

 Block77:
	cmp dword ptr [esi+0x58C],eax
	je Block79

 Block78:
	lea eax,[esp+0x50]
	push 0x1127
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],7
	jmp Block71

 Block79:
	lea ecx,[esp+0x50]
	push 0xB4C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],8
	jmp Block71

 Block80:
	mov eax,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	mov ebx,eax
	mov eax,dword ptr [esi+0x590]
	push eax
	call get_weapon_type
	mov edx,dword ptr [esp+0x5C]
	mov ecx,dword ptr [esi+0x5A0]
	push 0
	push edx
	mov ebp,eax
	mov eax,dword ptr [esp+0x60]
	push eax
	push ebx
	push ecx
	call get_random_magic_attack_action
	add esp,0x1C
	test eax,eax
	jge Block122

 Block81:
	mov ecx,dword ptr [esp+0x50]
	push ebp
	push ebx
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block10

 Block82:
	lea edx,[esp+0x50]
	push 0x1127
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],9
	jmp Block71

 Block83:
	mov eax,dword ptr [esi+0x590]
	mov ebx,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	add esp,4
	push eax
	push ebx
	call get_weapon_type
	mov ecx,dword ptr [esp+0x58]
	add esp,4
	push eax
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block122

 Block84:
	lea eax,[esp+0x50]
	push 0x1127
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],6
	jmp Block71

 Block85:
	mov ecx,esi
	call CUserLocal::IsWeaponDisabled
	test eax,eax
	jne Block10

 Block86:
	mov ecx,dword ptr [esp+0x50]
	mov ecx,dword ptr [ecx]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	push eax
	call get_job_category
	mov ebx,eax
	mov eax,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	add esp,8
	cmp ebx,5
	jne Block93

 Block87:
	cmp edi,0x4DD5CC
	je Block89

 Block88:
	cmp edi,0xE66C4B
	jne Block91

 Block89:
	cmp eax,0x27
	je Block91

 Block90:
	cmp eax,0x30
	jne Block93

 Block91:
	cmp edi,0x4F5C6A
	jne Block122

 Block92:
	cmp eax,0x31
	je Block127

 Block93:
	lea ecx,[esp+0x50]
	push 0x1127
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],4
	jmp Block71

 Block94:
	mov ecx,esi
	call CUserLocal::IsWeaponDisabled
	test eax,eax
	jne Block10

 Block95:
	mov edx,dword ptr [esp+0x50]
	mov ecx,dword ptr [edx]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov ebx,edx
	shr ebx,0x1F
	add ebx,edx
	push ebx
	call get_job_category
	mov dword ptr [esp+0x24],eax
	mov eax,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	mov ebp,eax
	add esp,8
	cmp ebp,0x2D
	je Block98

 Block96:
	cmp ebp,0x2E
	je Block98

 Block97:
	cmp ebp,0x31
	jne Block104

 Block98:
	cmp ebx,0x138
	jne Block101

 Block99:
	cmp ebp,0x2E
	je Block104

 Block100:
	jmp Block102

 Block101:
	cmp ebx,0x142
	je Block103

 Block102:
	push ebx
	call is_wildhunter_job
	add esp,4
	test eax,eax
	je Block105

 Block103:
	cmp ebp,0x2D
	jne Block105

 Block104:
	lea eax,[esp+0x50]
	push 0x1127
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],0
	jmp Block71

 Block105:
	mov eax,dword ptr [esi+0x58C]
	push eax
	call is_shooting_weapon
	add esp,4
	test eax,eax
	je Block121

 Block106:
	mov eax,dword ptr [esi+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0xA
	jne Block108

 Block107:
	lea ecx,[esi+0x88]
	call CAvatar::IsRidingWildHunterJaguar
	test eax,eax
	je Block121

 Block108:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	jne Block122

 Block109:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nSoulArrow_
	test eax,eax
	jne Block122

 Block110:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nSpiritJavelin_
	test eax,eax
	jne Block122

 Block111:
	mov ecx,dword ptr [esp+0x54]
	mov edx,dword ptr [esp+0x50]
	push eax
	push eax
	push eax
	push ecx
	push edx
	mov ecx,esi
	call CUserLocal::GetProperBulletPosition
	test eax,eax
	jne Block122

 Block112:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	or edi,0xFFFFFFFF
	cmp eax,edi
	jg Block121

 Block113:
	mov eax,dword ptr [esp+0x20]
	cmp eax,3
	jne Block115

 Block114:
	lea eax,[esp+0x50]
	push 0xB4F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],1
	jmp Block119

 Block115:
	cmp eax,4
	jne Block117

 Block116:
	lea ecx,[esp+0x50]
	push 0xB50
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],2
	jmp Block119

 Block117:
	cmp eax,5
	jne Block121

 Block118:
	lea edx,[esp+0x50]
	push 0xB49
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x48],3

 Block119:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x58]
	add esp,8
	mov dword ptr [esp+0x48],edi
	test eax,eax
	je Block121

 Block120:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block121:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::TryDoingMeleeAttack
	jmp Block10

 Block122:
	cmp edi,0x404139
	jne Block125

 Block123:
	mov ecx,dword ptr [esp+0x14]
	call GW_CharacterStat::_ZtlSecureGet_nHP
	mov ecx,dword ptr [esp+0x24]
	mov ebx,eax
	imul ebx,0x64
	call BasicStat::_ZtlSecureGet_nMHP
	mov ecx,eax
	mov eax,ebx
	cdq
	idiv ecx
	cmp eax,0x32
	jl Block127

 Block124:
	jmp Block10

 Block125:
	cmp edi,0x1F914CD
	jne Block127

 Block126:
	mov edx,dword ptr [esp+0x54]
	mov eax,dword ptr [esp+0x50]
	push edx
	push eax
	mov ecx,esi
	call CUserLocal::FindSwallowMob
	test eax,eax
	je Block10

 Block127:
	push edi
	mov dword ptr [esi+0x3AD4],edi
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block145

 Block128:
	cmp dword ptr [esi+0x4690],0
	jne Block145

 Block129:
	call get_update_time
	mov ecx,dword ptr [esp+0x58]
	mov dword ptr [esi+0x4688],eax
	mov dword ptr [esi+0x4690],1
	mov dword ptr [esi+0x4694],ecx
	cmp edi,0x2F9F6C
	je Block138

 Block130:
	cmp edi,0x4FAA8C
	je Block138

 Block131:
	cmp edi,0xC80EDA
	je Block138

 Block132:
	cmp edi,0x1518A28
	je Block138

 Block133:
	cmp edi,0x151FF59
	je Block138

 Block134:
	cmp edi,0x21612A9
	je Block138

 Block135:
	cmp edi,0x2179951
	je Block138

 Block136:
	cmp edi,0x1F962F1
	je Block138

 Block137:
	mov edx,dword ptr [esi+0x3AD4]
	push edx
	mov ecx,esi
	call CUserLocal::CreateKeyDownBar
	jmp Block140

 Block138:
	mov eax,dword ptr [esi+0x4698]
	test eax,eax
	je Block140

 Block139:
	mov dword ptr [esi+0x4698],0
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block140:
	cmp dword ptr [esi+0x2EAC],0
	je Block145

 Block141:
	push ecx
	mov ecx,dword ptr [esp+0x54]
	mov edx,dword ptr [ecx+0x28]
	mov eax,esp
	mov dword ptr [esp+0x5C],esp
	push edx
	push eax
	call get_action_name_from_code
	add esp,8
	call get_dragon_action_code_from_name
	add esp,4
	test eax,eax
	jl Block143

 Block142:
	cmp eax,0x1D
	jl Block144

 Block143:
	xor eax,eax

 Block144:
	mov ecx,dword ptr [esi+0x2EAC]
	mov edx,dword ptr [ecx+0xAC]
	push edx
	push eax
	call CDragon::SetAttackAction
	mov ecx,dword ptr [esi+0x2EAC]
	push edi
	call CDragon::CreateKeyDownBar

 Block145:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [eax+0x13DC]
	call TemporaryStatBase<long>::GetValue
	mov ebx,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nFrozen_
	push eax
	mov ecx,esi
	call CUser::GetAuraBooster
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [ebx]
	push eax
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nBooster_
	push eax
	lea ebx,[esi+0x88]
	push 0
	mov ecx,ebx
	call CAvatar::_ZtlSecureGet_m_nWeaponAttackSpeed
	push eax
	call get_attack_speed_degree
	add esp,0x18
	mov ebp,eax
	cmp edi,0x1F914CD
	jne Block147

 Block146:
	mov eax,0xFB
	jmp Block148

 Block147:
	mov ecx,dword ptr [esp+0x50]
	mov eax,dword ptr [ecx+0x28]

 Block148:
	mov edx,dword ptr [ebx]
	mov edx,dword ptr [edx+0x14]
	mov dword ptr [esi+0x644],eax
	mov eax,dword ptr [esi+0x4690]
	push eax
	push 0x64
	push ebp
	mov ecx,ebx
	call edx
	mov dword ptr [esi+0x63C],0x1388
	call get_update_time
	mov dword ptr [esi+0x3AD8],eax
	call get_update_time
	mov dword ptr [esi+0x3ADC],eax
	mov eax,dword ptr [esi+0x3AD4]
	push eax
	call is_keydown_skill
	add esp,4
	test eax,eax
	jne Block150

 Block149:
	mov ecx,ebx
	call CAvatar::GetActionInfo
	mov ecx,dword ptr [eax+8]
	add dword ptr [esi+0x3AD8],ecx

 Block150:
	mov eax,dword ptr [esp+0x50]
	mov edx,dword ptr [esi+0x4690]
	push 0
	push 0
	push ebp
	push eax
	mov ecx,esi
	mov dword ptr [esi+0x3AE0],edx
	call CUser::ShowSkillPrepare
	cmp edi,0x4F5C6A
	je Block152

 Block151:
	cmp edi,0xD7511E
	jne Block153

 Block152:
	push edi
	call get_cool_time
	add eax,dword ptr [esp+0x1C]
	add esp,4
	lea ecx,[esp+0x50]
	push ecx
	lea edx,[esp+0x20]
	push edx
	lea ecx,[esi+0x46C4]
	mov dword ptr [esp+0x58],eax
	call ZMap<long, long, long>::Insert

 Block153:
	push 0x69
	lea ecx,[esp+0x34]
	call COutPacket::_ctor_1
	push edi
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x4C],0xA
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x54]
	push eax
	lea ecx,[esp+0x34]
	call COutPacket::Encode1
	mov cx,word ptr [esi+0x644]
	mov eax,dword ptr [esi+0x640]
	mov edx,0x7FFF
	shl eax,0xF
	and cx,dx
	or ax,cx
	movzx eax,ax
	push eax
	lea ecx,[esp+0x34]
	call COutPacket::Encode2
	push ebp
	lea ecx,[esp+0x34]
	call COutPacket::Encode1
	cmp edi,0x1F914CD
	jne Block155

 Block154:
	mov ecx,dword ptr [esi+0x47E4]
	push ecx
	lea ecx,[esp+0x34]
	call COutPacket::Encode4

 Block155:
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x30]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x48],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov eax,1
	jmp Block11
}
}
// CUserLocal::ApplyInvicibleOption
_SUB_EXCEPTION_HANDLER(509490)
__SUB_CLASS_THIS(00509490, __thiscall, 41350,  CUserLocal, void, long, long, long&, long&, long&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_509490
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x24]
	mov ecx,dword ptr [TSingleton<CItemOptionInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x10]
	push eax
	call CItemOptionInfo::GetItemOption
	mov ecx,dword ptr [esp+0x10]
	test ecx,ecx
	je Block9

 Block1:
	mov eax,dword ptr [esp+0x28]
	imul eax,0xE0
	add eax,dword ptr [ecx+0xC]
	cmp esi,0x4F8E
	je Block3

 Block2:
	cmp esi,0x769E
	jne Block4

 Block3:
	mov edx,dword ptr [eax+4]
	mov edi,dword ptr [esp+0x2C]
	imul edx,0x3E8
	mov dword ptr [edi],edx

 Block4:
	cmp esi,0x76A3
	jne Block6

 Block5:
	mov edx,dword ptr [eax]
	mov esi,dword ptr [esp+0x30]
	mov dword ptr [esi],edx
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [esp+0x34]
	imul eax,0x3E8
	mov dword ptr [edx],eax

 Block6:
	lea esi,[ecx-0x10]
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block9

 Block7:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block9

 Block8:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block9:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret 0x14
}
}
// CUserLocal::TryDoingBodyAttack
_SUB_EXCEPTION_HANDLER(530710)
__SUB_CLASS_THIS(00530710, __thiscall, 41400,  CUserLocal, int32_t, const SKILLENTRY*, long, CMob*, NakedParam<tagPOINT>) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_530710
	mov eax,dword ptr fs:[0]
	push eax
	mov eax,0x20E0
	call __chkstk
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [ebp-0x2090],ecx
	mov dword ptr [ebp-0x207C],0
	call TSingleton<CWvsContext>::GetInstance
	mov dword ptr [ebp-0x28],eax
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::IsUserGM
	test eax,eax
	je Block2

 Block1:
	push 0x97
	lea eax,[ebp-0x177C]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x2094],eax
	mov ecx,dword ptr [ebp-0x2094]
	mov dword ptr [ebp-0x2098],ecx
	mov dword ptr [ebp-4],0
	push 0xC
	mov edx,dword ptr [ebp-0x2098]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x177C]
	call ZXString<char>::~ZXString<char>
	xor eax,eax
	jmp Block120

 Block2:
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetActionRndMan
	push eax
	lea ecx,[ebp-0x188]
	call ActionRandMan::_ctor_0
	mov dword ptr [ebp-4],1
	lea ecx,[ebp-0x188]
	call ActionRandMan::GetRandom
	mov dword ptr [ebp-0x24],eax
	cmp dword ptr [ebp+8],0
	je Block4

 Block3:
	mov eax,dword ptr [ebp+8]
	mov ecx,dword ptr [eax]
	mov dword ptr [ebp-0x209C],ecx
	jmp Block5

 Block4:
	mov dword ptr [ebp-0x209C],0

 Block5:
	mov edx,dword ptr [ebp-0x209C]
	mov dword ptr [ebp-0x180],edx
	lea eax,[ebp-0x1784]
	push eax
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x20A0],eax
	mov ecx,dword ptr [ebp-0x20A0]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x48],eax
	lea ecx,[ebp-0x1784]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [ebp-0x48]
	mov dword ptr [ebp-0x60],ecx
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetBasicStat
	mov dword ptr [ebp-0xAB0],eax
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetSecondaryStat
	mov dword ptr [ebp-0x1A4],eax
	call get_update_time
	mov dword ptr [ebp-0x104],eax
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::IsDead
	test eax,eax
	je Block7

 Block6:
	mov dword ptr [ebp-0x1788],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x188]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1788]
	jmp Block120

 Block7:
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov dword ptr [ebp-0x1A0],eax
	mov ecx,dword ptr [ebp-0x1A0]
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	je Block9

 Block8:
	mov dword ptr [ebp-0x178C],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x188]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x178C]
	jmp Block120

 Block9:
	mov edx,dword ptr [ebp-0x180]
	push edx
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	jne Block13

 Block10:
	lea eax,[ebp-0xAB4]
	push eax
	lea ecx,[ebp-0x180]
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x46C4
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block13

 Block11:
	mov edx,dword ptr [ebp-0x104]
	cmp edx,dword ptr [ebp-0xAB4]
	jge Block13

 Block12:
	mov dword ptr [ebp-0x1790],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x188]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1790]
	jmp Block120

 Block13:
	mov eax,dword ptr [ebp-0x2090]
	mov ecx,dword ptr [eax+0x5A0]
	mov dword ptr [ebp-0x17C],ecx
	mov dword ptr [ebp-0x68],1
	mov dword ptr [ebp-0x164],1
	mov edx,dword ptr [ebp+0x10]
	mov dword ptr [ebp-0x160],edx
	mov dword ptr [ebp-0x15C],0
	push 0x34
	push 0
	lea eax,[ebp-0x158]
	push eax
	call _memset
	add esp,0xC
	mov ecx,dword ptr [ebp-0x180]
	mov dword ptr [ebp-0x20A4],ecx
	cmp dword ptr [ebp-0x20A4],0x1EA20AB
	je Block15

 Block14:
	jmp Block20

 Block15:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0xED4]
	call SKILLLEVELDATA::_ctor_0
	mov byte ptr [ebp-4],2
	lea eax,[ebp-0xD08]
	push eax
	lea ecx,[ebp-0x5C]
	push ecx
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea edx,[ebp-0x1798]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov eax,dword ptr [ebp-0x2090]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x17A0]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov eax,dword ptr [ebp-0x2090]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	lea edx,[ebp-0x5C]
	push edx
	call adjust_rect
	add esp,0x10
	lea ecx,[ebp-0xED4]
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x164],eax
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov eax,dword ptr [ebp-0x164]
	push eax
	lea ecx,[ebp-0x160]
	push ecx
	lea edx,[ebp-0x5C]
	push edx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0x68],eax
	mov dword ptr [ebp-0xED8],0
	jmp Block17

 Block16:
	mov eax,dword ptr [ebp-0xED8]
	add eax,1
	mov dword ptr [ebp-0xED8],eax

 Block17:
	mov ecx,dword ptr [ebp-0xED8]
	cmp ecx,dword ptr [ebp-0x68]
	jge Block19

 Block18:
	push 0
	mov edx,dword ptr [ebp-0x68]
	push edx
	call get_rand_0
	add esp,8
	lea eax,[ebp+eax*4-0x160]
	push eax
	mov ecx,dword ptr [ebp-0xED8]
	lea edx,[ebp+ecx*4-0x160]
	push edx
	call _zswap_cmob_ptr
	add esp,8
	jmp Block16

 Block19:
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0xED4]
	call SKILLLEVELDATA::~SKILLLEVELDATA
	jmp Block22

 Block20:
	mov eax,dword ptr [ebp-0x180]
	push eax
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	je Block22

 Block21:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x12FC]
	call SKILLLEVELDATA::_ctor_0
	mov byte ptr [ebp-4],3
	lea edx,[ebp-0x1130]
	push edx
	lea eax,[ebp-0x5C]
	push eax
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea ecx,[ebp-0x17A8]
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov edx,dword ptr [ebp-0x2090]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x17B0]
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov edx,dword ptr [ebp-0x2090]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0x5C]
	push ecx
	call adjust_rect
	add esp,0x10
	lea ecx,[ebp-0x12FC]
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x164],eax
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp-0x164]
	push edx
	lea eax,[ebp-0x160]
	push eax
	lea ecx,[ebp-0x5C]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0x68],eax
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x12FC]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block22:
	lea edx,[ebp-0x17B8]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov eax,dword ptr [ebp-0x2090]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x17C0]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov eax,dword ptr [ebp-0x2090]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x3BA4
	call CAntiRepeat::TryRepeat
	test eax,eax
	jne Block24

 Block23:
	mov dword ptr [ebp-0x17C4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x188]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x17C4]
	jmp Block120

 Block24:
	mov dword ptr [ebp-0x20],0
	mov dword ptr [ebp-0x19C],0
	mov dword ptr [ebp-0xF8],0
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::SetAlertMode
	mov edx,dword ptr [ebp-0x180]
	push edx
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	jne Block26

 Block25:
	mov eax,dword ptr [ebp-0x104]
	add eax,0x3E8
	mov dword ptr [ebp-0x17C8],eax
	lea ecx,[ebp-0x17C8]
	push ecx
	lea edx,[ebp-0x180]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt

 Block26:
	mov dword ptr [ebp-0x100],1
	push 0xF
	mov eax,dword ptr [ebp-0x100]
	push eax
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x124],eax
	mov dword ptr [ebp-0x1300],0
	jmp Block28

 Block27:
	mov ecx,dword ptr [ebp-0x1300]
	add ecx,1
	mov dword ptr [ebp-0x1300],ecx

 Block28:
	mov edx,dword ptr [ebp-0x1300]
	cmp edx,dword ptr [ebp-0x68]
	jge Block34

 Block29:
	mov eax,dword ptr [ebp-0x1300]
	imul eax,0x98
	lea ecx,[ebp+eax-0xAAC]
	mov dword ptr [ebp-0x1304],ecx
	push 0x98
	push 0
	mov edx,dword ptr [ebp-0x1304]
	push edx
	call _memset
	add esp,0xC
	mov eax,dword ptr [ebp-0x1304]
	mov ecx,dword ptr [ebp-0x1300]
	mov edx,dword ptr [ebp+ecx*4-0x160]
	mov dword ptr [eax],edx
	push 0
	mov eax,dword ptr [ebp-0x1304]
	mov ecx,dword ptr [eax]
	call CMob::GetCurrentAction
	mov ecx,dword ptr [ebp-0x1304]
	mov dword ptr [ecx+8],eax
	mov edx,dword ptr [ebp-0x1304]
	mov ecx,dword ptr [edx]
	call CMob::GetCurrentFrameIndex
	mov ecx,dword ptr [ebp-0x1304]
	mov dword ptr [ecx+0xC],eax
	mov edx,dword ptr [ebp-0x1304]
	mov ecx,dword ptr [edx]
	call CMob::GetRandomHitAction
	mov ecx,dword ptr [ebp-0x1304]
	mov dword ptr [ecx+4],eax
	cmp dword ptr [ebp-0x180],0x1EA20AB
	je Block32

 Block30:
	mov edx,dword ptr [ebp-0x180]
	push edx
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	jne Block32

 Block31:
	lea eax,[ebp+0x14]
	mov dword ptr [ebp-0x20A8],eax
	jmp Block33

 Block32:
	sub esp,0x10
	mov ecx,esp
	mov edx,dword ptr [ebp-0x5C]
	mov dword ptr [ecx],edx
	mov eax,dword ptr [ebp-0x58]
	mov dword ptr [ecx+4],eax
	mov edx,dword ptr [ebp-0x54]
	mov dword ptr [ecx+8],edx
	mov eax,dword ptr [ebp-0x50]
	mov dword ptr [ecx+0xC],eax
	lea ecx,[ebp-0x17D4]
	push ecx
	mov edx,dword ptr [ebp-0x1304]
	mov ecx,dword ptr [edx]
	call CMob::GetHitPoint
	mov dword ptr [ebp-0x20A8],eax

 Block33:
	mov eax,dword ptr [ebp-0x20A8]
	mov dword ptr [ebp-0x17CC],eax
	mov ecx,dword ptr [ebp-0x17CC]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [ecx+4]
	mov ecx,dword ptr [ebp-0x1304]
	mov dword ptr [ecx+0x90],edx
	mov dword ptr [ecx+0x94],eax
	jmp Block27

 Block34:
	mov dword ptr [ebp-0x34],0
	mov dword ptr [ebp-0x120],0
	mov dword ptr [ebp-0x1C],0
	mov dword ptr [ebp-0xFC],0
	mov dword ptr [ebp-0x44],0
	mov dword ptr [ebp-0x30],0
	mov dword ptr [ebp-0x18],0
	push 0xB
	lea edx,[ebp-0x17DC]
	push edx
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x20AC],eax
	mov ecx,dword ptr [ebp-0x20AC]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x16C],eax
	lea ecx,[ebp-0x17DC]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x16C],0
	je Block38

 Block35:
	mov eax,dword ptr [ebp-0x16C]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x16C]
	mov eax,dword ptr [edx+0x78]
	call eax
	test eax,eax
	je Block38

 Block36:
	mov ecx,dword ptr [ebp-0x16C]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0x1308],eax
	cmp dword ptr [ebp-0x1308],0
	je Block38

 Block37:
	mov ecx,dword ptr [ebp-0x1308]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0x130C],eax
	lea edx,[ebp-0x18]
	push edx
	lea eax,[ebp-0x30]
	push eax
	lea ecx,[ebp-0x44]
	push ecx
	lea edx,[ebp-0xFC]
	push edx
	lea eax,[ebp-0x1C]
	push eax
	mov ecx,dword ptr [ebp-0x130C]
	push ecx
	mov ecx,dword ptr [ebp-0x16C]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x18]
	push eax
	lea ecx,[ebp-0x30]
	push ecx
	lea edx,[ebp-0x44]
	push edx
	lea eax,[ebp-0xFC]
	push eax
	lea ecx,[ebp-0x1C]
	push ecx
	mov edx,dword ptr [ebp-0x130C]
	push edx
	mov ecx,dword ptr [ebp-0x16C]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x18]
	push ecx
	lea edx,[ebp-0x30]
	push edx
	lea eax,[ebp-0x44]
	push eax
	lea ecx,[ebp-0xFC]
	push ecx
	lea edx,[ebp-0x1C]
	push edx
	mov eax,dword ptr [ebp-0x130C]
	push eax
	mov ecx,dword ptr [ebp-0x16C]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	call CUserLocal::ApplyWeaponOption

 Block38:
	push 0xA
	lea edx,[ebp-0x17E4]
	push edx
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x20B0],eax
	mov ecx,dword ptr [ebp-0x20B0]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x178],eax
	lea ecx,[ebp-0x17E4]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x178],0
	je Block43

 Block39:
	mov ecx,dword ptr [ebp-0x178]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call is_blade
	add esp,4
	test eax,eax
	je Block43

 Block40:
	mov eax,dword ptr [ebp-0x178]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x178]
	mov eax,dword ptr [edx+0x78]
	call eax
	test eax,eax
	je Block43

 Block41:
	mov ecx,dword ptr [ebp-0x178]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0x1310],eax
	cmp dword ptr [ebp-0x1310],0
	je Block43

 Block42:
	mov ecx,dword ptr [ebp-0x1310]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0x1314],eax
	lea edx,[ebp-0x18]
	push edx
	lea eax,[ebp-0x30]
	push eax
	lea ecx,[ebp-0x44]
	push ecx
	lea edx,[ebp-0xFC]
	push edx
	lea eax,[ebp-0x1C]
	push eax
	mov ecx,dword ptr [ebp-0x1314]
	push ecx
	mov ecx,dword ptr [ebp-0x178]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x18]
	push eax
	lea ecx,[ebp-0x30]
	push ecx
	lea edx,[ebp-0x44]
	push edx
	lea eax,[ebp-0xFC]
	push eax
	lea ecx,[ebp-0x1C]
	push ecx
	mov edx,dword ptr [ebp-0x1314]
	push edx
	mov ecx,dword ptr [ebp-0x178]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x18]
	push ecx
	lea edx,[ebp-0x30]
	push edx
	lea eax,[ebp-0x44]
	push eax
	lea ecx,[ebp-0xFC]
	push ecx
	lea edx,[ebp-0x1C]
	push edx
	mov eax,dword ptr [ebp-0x1314]
	push eax
	mov ecx,dword ptr [ebp-0x178]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	call CUserLocal::ApplyWeaponOption

 Block43:
	lea ecx,[ebp-0x1C4]
	call ZArray<unsigned long>::_ctor_default
	mov byte ptr [ebp-4],4
	lea edx,[ebp-0x1C4]
	push edx
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetOnlinePartyMemberID
	mov dword ptr [ebp-0x1C0],0
	mov dword ptr [ebp-0x40],0
	mov ecx,dword ptr [ebp-0x2090]
	call CUser::GetPhase
	push eax
	lea eax,[ebp-0x1C0]
	push eax
	lea ecx,[ebp-0x17EC]
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov edx,dword ptr [ebp-0x2090]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov ecx,dword ptr [eax+4]
	push ecx
	mov edx,dword ptr [eax]
	push edx
	lea eax,[ebp-0x1C4]
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	call CUser::GetCharacterId
	push eax
	call TSingleton<CAffectedAreaPool>::GetInstance
	mov ecx,eax
	call CAffectedAreaPool::GetAr01AreaPAD
	mov dword ptr [ebp-0x3C],eax
	mov ecx,dword ptr [ebp-0x2090]
	call CUser::GetPhase
	push eax
	lea ecx,[ebp-0x40]
	push ecx
	lea edx,[ebp-0x17F4]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov eax,dword ptr [ebp-0x2090]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	mov edx,dword ptr [eax]
	push edx
	lea eax,[ebp-0x1C4]
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	call CUser::GetCharacterId
	push eax
	call TSingleton<CAffectedAreaPool>::GetInstance
	mov ecx,eax
	call CAffectedAreaPool::GetAr01AreaMAD
	mov dword ptr [ebp-0x11C],eax
	mov dword ptr [ebp-0x1300],0
	jmp Block45

 Block44:
	mov ecx,dword ptr [ebp-0x1300]
	add ecx,1
	mov dword ptr [ebp-0x1300],ecx

 Block45:
	mov edx,dword ptr [ebp-0x1300]
	cmp edx,dword ptr [ebp-0x68]
	jge Block54

 Block46:
	mov eax,dword ptr [ebp-0x1300]
	imul eax,0x98
	lea ecx,[ebp+eax-0xAAC]
	mov dword ptr [ebp-0x1318],ecx
	cmp dword ptr [ebp-0x180],0x1EA20AB
	je Block48

 Block47:
	mov edx,dword ptr [ebp-0x180]
	push edx
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	je Block49

 Block48:
	mov eax,dword ptr [ebp-0x11C]
	push eax
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetDragonFuryDamage
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x68]
	push ecx
	mov edx,dword ptr [ebp-0x18]
	push edx
	mov eax,dword ptr [ebp-0x30]
	push eax
	mov ecx,dword ptr [ebp-0x44]
	push ecx
	mov edx,dword ptr [ebp-0xFC]
	push edx
	mov eax,dword ptr [ebp-0x1C]
	push eax
	mov ecx,dword ptr [ebp-0x1318]
	add ecx,0x54
	push ecx
	mov edx,dword ptr [ebp-0x1318]
	add edx,0x18
	push edx
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	mov edx,dword ptr [ebp-0x20]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov eax,dword ptr [ebp-0x100]
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x4848
	push ecx
	mov edx,dword ptr [ebp-0x2090]
	add edx,0x4840
	sub esp,8
	mov ecx,esp
	mov dword ptr [ebp-0x17F8],esp
	push edx
	call ZRef<PassiveSkillData>::_ctor_copy
	mov dword ptr [ebp-0x20B4],eax
	mov eax,dword ptr [ebp-0x20B4]
	mov dword ptr [ebp-0x20B8],eax
	mov byte ptr [ebp-4],5
	mov ecx,dword ptr [ebp-0x1318]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	push eax
	mov edx,dword ptr [ebp-0x1318]
	mov ecx,dword ptr [edx]
	call CMob::GetMobStat
	push eax
	mov eax,dword ptr [ebp-0x1318]
	mov ecx,dword ptr [eax]
	call CMob::GetMobID
	push eax
	mov ecx,dword ptr [ebp-0x1A4]
	push ecx
	mov edx,dword ptr [ebp-0xAB0]
	push edx
	mov eax,dword ptr [ebp-0x48]
	push eax
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetCalcDamage
	mov byte ptr [ebp-4],4
	mov ecx,eax
	call CalcDamage::MDamage_1
	jmp Block50

 Block49:
	push 0
	mov ecx,dword ptr [ebp-0x34]
	push ecx
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetDarkForceDamage
	push eax
	push 0
	mov edx,dword ptr [ebp-0x3C]
	push edx
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetDragonFuryDamage
	push eax
	mov eax,dword ptr [ebp-0x18]
	push eax
	mov ecx,dword ptr [ebp-0x30]
	push ecx
	mov edx,dword ptr [ebp-0x44]
	push edx
	mov eax,dword ptr [ebp-0xFC]
	push eax
	mov ecx,dword ptr [ebp-0x1C]
	push ecx
	mov edx,dword ptr [ebp-0x1318]
	add edx,0x54
	push edx
	mov eax,dword ptr [ebp-0x1318]
	add eax,0x18
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	push 0
	mov eax,dword ptr [ebp-0x20]
	push eax
	push 3
	push 0
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov ecx,dword ptr [ebp-0x124]
	push ecx
	mov edx,dword ptr [ebp-0x100]
	push edx
	mov eax,dword ptr [ebp-0x2090]
	add eax,0x4848
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x4840
	sub esp,8
	mov edx,esp
	mov dword ptr [ebp-0x17FC],esp
	push ecx
	mov ecx,edx
	call ZRef<PassiveSkillData>::_ctor_copy
	mov dword ptr [ebp-0x20BC],eax
	mov eax,dword ptr [ebp-0x20BC]
	mov dword ptr [ebp-0x20C0],eax
	mov byte ptr [ebp-4],6
	mov ecx,dword ptr [ebp-0x1318]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	push eax
	mov edx,dword ptr [ebp-0x1318]
	mov ecx,dword ptr [edx]
	call CMob::GetMobStat
	push eax
	mov eax,dword ptr [ebp-0x1318]
	mov ecx,dword ptr [eax]
	call CMob::GetMobID
	push eax
	mov ecx,dword ptr [ebp-0x1A4]
	push ecx
	mov edx,dword ptr [ebp-0xAB0]
	push edx
	mov eax,dword ptr [ebp-0x48]
	push eax
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::GetCalcDamage
	mov byte ptr [ebp-4],4
	mov ecx,eax
	call CalcDamage::PDamage_3

 Block50:
	cmp dword ptr [ebp+8],0
	je Block53

 Block51:
	mov ecx,dword ptr [ebp-0x120]
	push ecx
	mov edx,dword ptr [ebp-0x1318]
	add edx,0x18
	push edx
	mov eax,dword ptr [ebp-0x1300]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::AdjustDamageDecRate
	test eax,eax
	je Block53

 Block52:
	mov edx,dword ptr [ebp-0x1300]
	add edx,1
	mov dword ptr [ebp-0x68],edx
	jmp Block54

 Block53:
	jmp Block44

 Block54:
	push 0
	lea eax,[ebp-0xAAC]
	push eax
	mov ecx,dword ptr [ebp-0x68]
	push ecx
	mov edx,dword ptr [ebp-0x20]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp-0x60]
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx ecx,al
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	lea ecx,[ebp-0xF4]
	call CSkill_HitAni::_ctor_0
	mov byte ptr [ebp-4],7
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,0x88
	call CAvatar::IsLeft
	mov dword ptr [ebp-0x2C],eax
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	call CSkillInfo::IsMobChaseAttack
	add esp,8
	mov dword ptr [ebp-0x168],eax
	call get_update_time
	mov dword ptr [ebp-0x38],eax
	mov dword ptr [ebp-0x1300],0
	jmp Block56

 Block55:
	mov edx,dword ptr [ebp-0x1300]
	add edx,1
	mov dword ptr [ebp-0x1300],edx

 Block56:
	mov eax,dword ptr [ebp-0x1300]
	cmp eax,dword ptr [ebp-0x68]
	jge Block83

 Block57:
	mov ecx,dword ptr [ebp-0x1300]
	imul ecx,0x98
	lea edx,[ebp+ecx-0xAAC]
	mov dword ptr [ebp-0x131C],edx
	mov eax,dword ptr [ebp-0x180]
	push eax
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	je Block59

 Block58:
	mov ecx,dword ptr [ebp-0x131C]
	mov edx,dword ptr [ebp-0xF8]
	mov dword ptr [ecx+0x10],edx
	jmp Block60

 Block59:
	push 0x118
	mov eax,dword ptr [ebp-0x1300]
	imul eax,0x46
	push eax
	call _zmin_long
	add esp,8
	add eax,dword ptr [ebp-0xF8]
	mov ecx,dword ptr [ebp-0x131C]
	mov dword ptr [ecx+0x10],eax

 Block60:
	mov dword ptr [ebp-0x1324],0
	jmp Block62

 Block61:
	mov edx,dword ptr [ebp-0x1324]
	add edx,1
	mov dword ptr [ebp-0x1324],edx

 Block62:
	mov eax,dword ptr [ebp-0x1324]
	cmp eax,dword ptr [ebp-0x124]
	jge Block79

 Block63:
	mov dword ptr [ebp-0x132C],1
	mov ecx,dword ptr [ebp+8]
	cmp dword ptr [ecx],0x217E76B
	jne Block67

 Block64:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1764]
	call SKILLLEVELDATA::_ctor_0
	mov byte ptr [ebp-4],8
	push 0
	push 0x65
	call get_rand_0
	add esp,8
	mov esi,eax
	lea ecx,[ebp-0x1764]
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	cmp esi,eax
	ja Block66

 Block65:
	mov dword ptr [ebp-0x132C],2

 Block66:
	mov byte ptr [ebp-4],7
	lea ecx,[ebp-0x1764]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block67:
	mov dword ptr [ebp-0x1338],0
	mov dword ptr [ebp-0x1334],0
	mov eax,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nFixedDamage
	mov dword ptr [ebp-0x1330],eax
	cmp dword ptr [ebp-0x1330],0
	jle Block70

 Block68:
	mov ecx,dword ptr [ebp-0x1324]
	mov edx,dword ptr [ebp-0x131C]
	cmp dword ptr [edx+ecx*4+0x18],0
	jle Block70

 Block69:
	mov eax,dword ptr [ebp-0x1324]
	mov ecx,dword ptr [ebp-0x131C]
	mov edx,dword ptr [ebp-0x1330]
	mov dword ptr [ecx+eax*4+0x18],edx

 Block70:
	mov eax,dword ptr [ebp-0x180]
	push eax
	mov ecx,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block72

 Block71:
	mov edx,dword ptr [ebp-0x1324]
	mov eax,dword ptr [ebp-0x131C]
	mov dword ptr [eax+edx*4+0x18],0

 Block72:
	mov ecx,dword ptr [ebp-0x1324]
	mov edx,dword ptr [ebp-0x131C]
	mov eax,dword ptr [edx+ecx*4+0x18]
	mov dword ptr [ebp-0x1340],eax
	push 0
	lea ecx,[ebp-0x1340]
	push ecx
	push 1
	mov edx,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	mov eax,dword ptr [ebp-0x48]
	push eax
	call CItemInfo::CheckDamageModifiedByEquipUpgrade
	add esp,0x14
	test eax,eax
	je Block74

 Block73:
	mov ecx,dword ptr [ebp-0x1324]
	mov edx,dword ptr [ebp-0x131C]
	mov eax,dword ptr [ebp-0x1340]
	mov dword ptr [edx+ecx*4+0x18],eax

 Block74:
	mov ecx,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nWeaponID
	mov dword ptr [ebp-0x133C],eax
	lea edx,[ebp-0x1804]
	push edx
	call TSingleton<CWvsContext>::GetInstance
	mov ecx,eax
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x20C4],eax
	mov ecx,dword ptr [ebp-0x20C4]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x1328],eax
	lea ecx,[ebp-0x1804]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp dword ptr [ebp-0x133C],0
	je Block77

 Block75:
	mov ecx,dword ptr [ebp-0x1328]
	add ecx,0x151
	call ZRef<GW_ItemSlotBase>::op_arrow
	add eax,0xC
	mov ecx,eax
	call TSecType<long>::op_t
	cmp dword ptr [ebp-0x133C],eax
	je Block77

 Block76:
	mov eax,dword ptr [ebp-0x1324]
	mov ecx,dword ptr [ebp-0x131C]
	mov dword ptr [ecx+eax*4+0x18],0
	mov edx,dword ptr [ebp-0x1334]
	push edx
	push 0
	mov eax,dword ptr [ebp-0x1338]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x132C]
	push ecx
	mov edx,dword ptr [ebp-0x168]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x1808],esp
	mov ecx,dword ptr [ebp-0x1300]
	push ecx
	push eax
	lea ecx,[ebp-0xF4]
	call CSkill_HitAni::operator()
	mov dword ptr [ebp-0x20C8],eax
	mov edx,dword ptr [ebp-0x131C]
	mov eax,dword ptr [edx+0x94]
	push eax
	mov ecx,dword ptr [edx+0x90]
	push ecx
	mov edx,dword ptr [ebp-0x1324]
	push edx
	mov eax,dword ptr [ebp-0x1324]
	mov ecx,dword ptr [ebp-0x131C]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0x1324]
	mov ecx,dword ptr [ebp-0x131C]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	mov eax,dword ptr [ebp-0x2C]
	push eax
	mov ecx,dword ptr [ebp-0x131C]
	mov edx,dword ptr [ecx+4]
	push edx
	mov eax,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [ebp-0x104]
	add ecx,dword ptr [eax+0x10]
	push ecx
	mov edx,dword ptr [ebp-0x180]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	call CUser::GetCharacterId
	push eax
	mov eax,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [eax]
	call CMob::AddDamageInfo
	jmp Block78

 Block77:
	mov ecx,dword ptr [ebp-0x1334]
	push ecx
	push 0
	mov edx,dword ptr [ebp-0x1338]
	push edx
	push 0
	mov eax,dword ptr [ebp-0x132C]
	push eax
	mov ecx,dword ptr [ebp-0x168]
	push ecx
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x180C],esp
	mov eax,dword ptr [ebp-0x1300]
	push eax
	push edx
	lea ecx,[ebp-0xF4]
	call CSkill_HitAni::operator()
	mov dword ptr [ebp-0x20CC],eax
	mov ecx,dword ptr [ebp-0x131C]
	mov edx,dword ptr [ecx+0x94]
	push edx
	mov eax,dword ptr [ecx+0x90]
	push eax
	mov ecx,dword ptr [ebp-0x1324]
	push ecx
	mov edx,dword ptr [ebp-0x1324]
	mov eax,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [eax+edx*4+0x54]
	push ecx
	mov edx,dword ptr [ebp-0x1324]
	mov eax,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [eax+edx*4+0x18]
	push ecx
	mov edx,dword ptr [ebp-0x2C]
	push edx
	mov eax,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [eax+4]
	push ecx
	mov edx,dword ptr [ebp-0x131C]
	mov eax,dword ptr [ebp-0x104]
	add eax,dword ptr [edx+0x10]
	push eax
	mov ecx,dword ptr [ebp-0x180]
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	call CUser::GetCharacterId
	push eax
	mov edx,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [edx]
	call CMob::AddDamageInfo

 Block78:
	jmp Block61

 Block79:
	mov eax,dword ptr [ebp-0x20]
	push eax
	mov ecx,dword ptr [ebp-0x180]
	push ecx
	mov edx,dword ptr [ebp-0x100]
	push edx
	mov eax,dword ptr [ebp-0x68]
	push eax
	mov ecx,dword ptr [ebp-0x38]
	push ecx
	mov edx,dword ptr [ebp-0x131C]
	mov ecx,dword ptr [edx]
	call CMob::GetMobStat
	push eax
	push 3
	call CalcDamage::GetCounterDamage
	add esp,0x1C
	mov dword ptr [ebp-0x1320],eax
	cmp dword ptr [ebp-0x1320],0
	je Block82

 Block80:
	mov ecx,dword ptr [ebp-0x28]
	call CWvsContext::IsAdminAccount
	test eax,eax
	jne Block82

 Block81:
	mov eax,dword ptr [ebp-0x1320]
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	call CUserLocal::ShowCounterDamage

 Block82:
	jmp Block55

 Block83:
	push 0x5F
	mov ecx,dword ptr [ebp-0x20]
	imul ecx,0x18
	add ecx,offset ActionData::m_saCharacterActions+12
	push ecx
	call GETCRC32Svr_long
	add esp,8
	mov dword ptr [ebp-0x6C],eax
	mov dword ptr [ebp-0x174],0
	jmp Block85

 Block85:
	mov dword ptr [ebp-0x1AC],0x19DEA1BD
	mov dword ptr [ebp-0x10],0xBE02FF0A
	push 0
	lea edx,[ebp-0x10]
	push edx
	lea eax,[ebp-0x1BC]
	push eax
	call DR_check
	add esp,0xC
	mov dword ptr [ebp-0x170],eax
	push 0x32
	lea ecx,[ebp-0x118]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],9
	call get_field
	mov ecx,eax
	call CField::GetFieldKey
	movzx ecx,al
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1BC]
	not edx
	push edx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1B8]
	not eax
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x68]
	shl ecx,4
	or ecx,dword ptr [ebp-0x124]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1B4]
	not edx
	push edx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1B0]
	not eax
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x180]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x48]
	movzx eax,byte ptr [edx+0x539]
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	push 0
	mov ecx,dword ptr [ebp-0x1BC]
	push ecx
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0x64],eax
	mov edx,dword ptr [ebp-0x64]
	push edx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	push 0
	push 0
	push 0
	mov eax,dword ptr [ebp-0x64]
	push eax
	push 4
	lea ecx,[ebp-0x170]
	push ecx
	call CCrc32::GetCrc32
	add esp,0x18
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	cmp dword ptr [ebp+8],0
	je Block87

 Block86:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1C28]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x20D0],eax
	mov eax,dword ptr [ebp-0x20D0]
	mov dword ptr [ebp-0x20D4],eax
	mov byte ptr [ebp-4],0xA
	mov ecx,dword ptr [ebp-0x207C]
	or ecx,1
	mov dword ptr [ebp-0x207C],ecx
	mov ecx,dword ptr [ebp-0x20D4]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x20D8],eax
	jmp Block88

 Block87:
	mov dword ptr [ebp-0x20D8],0

 Block88:
	mov edx,dword ptr [ebp-0x20D8]
	mov dword ptr [ebp-0x4C],edx
	mov dword ptr [ebp-4],9
	mov eax,dword ptr [ebp-0x207C]
	and eax,1
	je Block90

 Block89:
	and dword ptr [ebp-0x207C],0xFFFFFFFE
	lea ecx,[ebp-0x1C28]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block90:
	cmp dword ptr [ebp+8],0
	je Block92

 Block91:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x2044]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x20DC],eax
	mov edx,dword ptr [ebp-0x20DC]
	mov dword ptr [ebp-0x20E0],edx
	mov byte ptr [ebp-4],0xB
	mov eax,dword ptr [ebp-0x207C]
	or eax,2
	mov dword ptr [ebp-0x207C],eax
	mov ecx,dword ptr [ebp-0x20E0]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x20E4],eax
	jmp Block93

 Block92:
	mov dword ptr [ebp-0x20E4],0

 Block93:
	mov ecx,dword ptr [ebp-0x20E4]
	mov dword ptr [ebp-0x108],ecx
	mov dword ptr [ebp-4],9
	mov edx,dword ptr [ebp-0x207C]
	and edx,2
	je Block95

 Block94:
	and dword ptr [ebp-0x207C],0xFFFFFFFD
	lea ecx,[ebp-0x2044]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block95:
	mov eax,dword ptr [ebp-0x4C]
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x108]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x2C]
	shl edx,0xF
	mov eax,dword ptr [ebp-0x20]
	and eax,0x7FFF
	or edx,eax
	push edx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	mov ecx,dword ptr [ebp-0x6C]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	movzx edx,byte ptr [ebp-0x17C]
	push edx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	movzx eax,byte ptr [ebp-0x19C]
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	mov ecx,dword ptr [ebp-0x38]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	cmp dword ptr [ebp-0x180],0x1EA20AB
	je Block98

 Block96:
	mov edx,dword ptr [ebp-0x180]
	push edx
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	jne Block98

 Block97:
	mov eax,dword ptr [ebp-0x1C0]
	mov dword ptr [ebp-0x20E8],eax
	jmp Block99

 Block98:
	mov ecx,dword ptr [ebp-0x40]
	mov dword ptr [ebp-0x20E8],ecx

 Block99:
	mov edx,dword ptr [ebp-0x20E8]
	push edx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	jmp Block101

 Block101:
	lea eax,[ebp-0x198]
	push eax
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov edx,dword ptr [ebp-0x2090]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov dword ptr [ebp-0x18C],0
	mov dword ptr [ebp-0x190],0x7FFFFFFF
	mov dword ptr [ebp-0x1300],0
	jmp Block103

 Block102:
	mov eax,dword ptr [ebp-0x1300]
	add eax,1
	mov dword ptr [ebp-0x1300],eax

 Block103:
	mov ecx,dword ptr [ebp-0x1300]
	cmp ecx,dword ptr [ebp-0x68]
	jge Block119

 Block104:
	mov edx,dword ptr [ebp-0x1300]
	imul edx,0x98
	lea eax,[ebp+edx-0xAAC]
	mov dword ptr [ebp-0x1768],eax
	lea ecx,[ebp-0x1770]
	push ecx
	mov edx,dword ptr [ebp-0x1768]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [ecx]
	add ecx,4
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [ebp-0x1770]
	sub ecx,dword ptr [ebp-0x198]
	mov dword ptr [ebp-0x1A8],ecx
	mov edx,dword ptr [ebp-0x176C]
	sub edx,dword ptr [ebp-0x194]
	mov dword ptr [ebp-0x14],edx
	mov eax,dword ptr [ebp-0x1A8]
	imul eax,dword ptr [ebp-0x1A8]
	mov ecx,dword ptr [ebp-0x14]
	imul ecx,dword ptr [ebp-0x14]
	add eax,ecx
	mov dword ptr [ebp-0x1774],eax
	mov edx,dword ptr [ebp-0x1774]
	cmp edx,dword ptr [ebp-0x190]
	jge Block106

 Block105:
	mov eax,dword ptr [ebp-0x1774]
	mov dword ptr [ebp-0x190],eax
	mov ecx,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [ecx]
	call CMob::GetMobID
	mov dword ptr [ebp-0x18C],eax

 Block106:
	mov edx,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [edx]
	call CMob::GetMobID
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1768]
	movzx ecx,byte ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [edx]
	call CMob::IsLeft
	shl eax,7
	mov ecx,dword ptr [ebp-0x1768]
	mov edx,dword ptr [ecx+8]
	and edx,0x7F
	or eax,edx
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp-0x1768]
	movzx ecx,byte ptr [eax+0xC]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [edx]
	call CMob::GetCurTemplate
	test eax,eax
	je Block109

 Block107:
	mov eax,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov esi,eax
	mov ecx,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [ecx]
	call CMob::GetCurTemplate
	cmp esi,eax
	je Block109

 Block108:
	mov dword ptr [ebp-0x20EC],1
	jmp Block110

 Block109:
	mov dword ptr [ebp-0x20EC],0

 Block110:
	mov esi,dword ptr [ebp-0x20EC]
	shl esi,7
	mov edx,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [edx]
	call CMob::GetCalcDamageStatIndex
	and eax,0x7F
	or esi,eax
	push esi
	lea ecx,[ebp-0x118]
	call COutPacket::Encode1
	lea eax,[ebp-0x204C]
	push eax
	mov ecx,dword ptr [ebp-0x1768]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [eax]
	add ecx,4
	mov edx,dword ptr [edx+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	lea edx,[ebp-0x2054]
	push edx
	mov eax,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1768]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	lea edx,[ebp-0x205C]
	push edx
	mov eax,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1768]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	lea edx,[ebp-0x2064]
	push edx
	mov eax,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1768]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	mov edx,dword ptr [ebp-0x1768]
	movzx eax,word ptr [edx+0x10]
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	mov dword ptr [ebp-0x1778],0
	jmp Block112

 Block111:
	mov ecx,dword ptr [ebp-0x1778]
	add ecx,1
	mov dword ptr [ebp-0x1778],ecx

 Block112:
	mov edx,dword ptr [ebp-0x1778]
	cmp edx,dword ptr [ebp-0x124]
	jge Block118

 Block113:
	mov eax,dword ptr [ebp-0x1778]
	mov ecx,dword ptr [ebp-0x1768]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	call TSingleton<CDamageMeter>::IsInstantiated
	test eax,eax
	je Block115

 Block114:
	mov eax,dword ptr [ebp-0x1778]
	mov ecx,dword ptr [ebp-0x1768]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CDamageMeter>::GetInstance
	mov ecx,eax
	call CDamageMeter::AddDamageInfo

 Block115:
	call TSingleton<CBattleRecordMan>::IsInstantiated
	test eax,eax
	je Block117

 Block116:
	push 0
	mov eax,dword ptr [ebp-0x1778]
	mov ecx,dword ptr [ebp-0x1768]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0x1778]
	mov ecx,dword ptr [ebp-0x1768]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CBattleRecordMan>::GetInstance
	mov ecx,eax
	call CBattleRecordMan::SetBattleDamageInfo

 Block117:
	jmp Block111

 Block118:
	mov eax,dword ptr [ebp-0x1768]
	mov ecx,dword ptr [eax]
	call CMob::GetCrc
	push eax
	lea ecx,[ebp-0x118]
	call COutPacket::Encode4
	jmp Block102

 Block119:
	mov ecx,dword ptr [ebp-0x18C]
	push ecx
	mov ecx,dword ptr [ebp-0x2090]
	call CUser::SetTargetID
	lea edx,[ebp-0x206C]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov eax,dword ptr [ebp-0x2090]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	lea edx,[ebp-0x2074]
	push edx
	mov ecx,dword ptr [ebp-0x2090]
	add ecx,4
	mov eax,dword ptr [ebp-0x2090]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x118]
	call COutPacket::Encode2
	lea edx,[ebp-0x118]
	push edx
	call SendPacket
	add esp,4
	lea ecx,[ebp-0x188]
	call ActionRandMan::PreventRollback
	mov dword ptr [ebp-0x2078],1
	mov byte ptr [ebp-4],7
	lea ecx,[ebp-0x118]
	call COutPacket::~COutPacket
	mov byte ptr [ebp-4],4
	lea ecx,[ebp-0xF4]
	call CSkill_HitAni::~CSkill_HitAni
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x1C4]
	call ZArray<unsigned long>::~ZArray<unsigned long>
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x188]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x2078]

 Block120:
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	mov esp,ebp
	pop ebp
	ret 0x14
}
}
// CUserLocal::OnKey
_SUB_EXCEPTION_HANDLER(5369F0)
__SUB_CLASS_THIS(005369F0, __thiscall, 41357,  CUserLocal, void, uint32_t, uint32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5369F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [eax+0x3850]
	test eax,eax
	jne Block102

 Block1:
	mov edi,dword ptr [esp+0x50]
	mov edx,dword ptr [ebp+4]
	mov edx,dword ptr [edx+0x10]
	lea ebx,[ebp+4]
	lea eax,[esp+0x1C]
	shr edi,0x10
	push eax
	mov ecx,ebx
	and edi,0xFF
	call edx
	mov ecx,dword ptr [eax]
	mov dword ptr [ebp+0x4680],ecx
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [ebp]
	mov dword ptr [ebp+0x4684],edx
	mov edx,dword ptr [eax+8]
	mov ecx,ebp
	call edx
	mov ecx,dword ptr [eax+0x944]
	push ecx
	add eax,0x93C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov esi,dword ptr [esp+0x54]
	add esp,8
	test eax,eax
	je Block11

 Block2:
	cmp esi,0x25
	jne Block4

 Block3:
	mov esi,0x27
	jmp Block10

 Block4:
	cmp esi,0x27
	jne Block6

 Block5:
	mov esi,0x25
	jmp Block10

 Block6:
	cmp esi,0x26
	jne Block8

 Block7:
	mov esi,0x28
	jmp Block10

 Block8:
	cmp esi,0x28
	jne Block11

 Block9:
	mov esi,0x26

 Block10:
	mov dword ptr [esp+0x4C],esi

 Block11:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+8]
	mov ecx,ebp
	call eax
	mov ecx,dword ptr [eax+0xD2C]
	push ecx
	add eax,0xD24
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block17

 Block12:
	mov eax,dword ptr [ebp+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	je Block17

 Block13:
	cmp esi,0x25
	je Block16

 Block14:
	cmp esi,0x27
	je Block16

 Block15:
	cmp esi,0x28
	jne Block17

 Block16:
	call get_update_time
	mov dword ptr [ebp+0x4674],eax

 Block17:
	test dword ptr [esp+0x50],0x80000000
	jne Block79

 Block18:
	lea ecx,[ebp+0x3BD8]
	call CUIToolTip::ClearToolTip
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	push 1
	push edi
	call CSequencedKeyMan::Process
	test eax,eax
	jne Block102

 Block19:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[eax+0x2044]
	call TSecType<unsigned char>::GetData
	test al,al
	jns Block58

 Block20:
	mov esi,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	mov ecx,dword ptr [esi+0x2C]
	sub ecx,dword ptr [esi+0x24]
	add esi,0x24
	add ecx,0xBF
	mov eax,0x2AAAAAAB
	imul ecx
	mov ecx,dword ptr [esi+0xC]
	sub ecx,dword ptr [esi+4]
	sar edx,5
	mov edi,edx
	add ecx,0x8F
	shr edi,0x1F
	add edi,edx
	mov eax,0x38E38E39
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov edx,dword ptr [ebx]
	mov edx,dword ptr [edx+0x10]
	mov dword ptr [esp+0x1C],eax
	lea eax,[esp+0x2C]
	push eax
	mov ecx,ebx
	call edx
	mov ecx,dword ptr [eax]
	sub ecx,dword ptr [esi]
	mov eax,0x2AAAAAAB
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov ecx,0
	sets cl
	dec edi
	dec ecx
	and eax,ecx
	cmp eax,edi
	mov dword ptr [esp+0x14],eax
	jl Block22

 Block21:
	mov dword ptr [esp+0x14],edi

 Block22:
	mov edx,dword ptr [ebx]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x2C]
	push eax
	mov ecx,ebx
	call edx
	mov ecx,dword ptr [eax+4]
	sub ecx,dword ptr [esi+4]
	mov eax,0x38E38E39
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov ecx,0
	sets cl
	dec ecx
	and eax,ecx
	mov ecx,dword ptr [esp+0x1C]
	dec ecx
	cmp eax,ecx
	mov dword ptr [esp+0x1C],ecx
	jge Block24

 Block23:
	mov dword ptr [esp+0x18],eax
	jmp Block25

 Block24:
	mov edx,ecx
	mov dword ptr [esp+0x18],edx

 Block25:
	cmp dword ptr [esp+0x4C],0x70
	jne Block38

 Block26:
	xor eax,eax
	cmp dword ptr [ebp+0x46E8],eax
	push 0x97
	sete al
	lea ecx,[esp+0x30]
	mov dword ptr [ebp+0x46E8],eax
	call COutPacket::_ctor_1
	push 0x12
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x48],0
	call COutPacket::Encode1
	push 1
	lea ecx,[esp+0x30]
	call COutPacket::Encode1
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	cmp dword ptr [ebp+0x46E8],0
	jne Block37

 Block27:
	mov edx,dword ptr [ebx]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x1C]
	push eax
	mov ecx,ebx
	call edx
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push 1
	push 0x7FFFFFFF
	push 0
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test eax,eax
	jne Block32

 Block28:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	push edx
	push eax
	call CWvsPhysicalSpace2D::GetFootholdClosest
	mov ecx,eax
	test ecx,ecx
	jne Block31

 Block29:
	push eax
	push eax
	push eax
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x60],esp
	push 0xABD
	push ecx
	mov dword ptr [ebp+0x46E8],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block30:
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x44],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	jmp Block102

 Block31:
	mov edx,dword ptr [ecx+0x14]
	mov eax,dword ptr [ecx+0xC]
	add eax,edx
	cdq
	sub eax,edx
	mov esi,eax
	sar esi,1
	mov dword ptr [esp+0x1C],esi
	mov eax,dword ptr [ecx+0x10]
	mov ecx,dword ptr [ecx+0x18]
	add eax,ecx
	cdq
	sub eax,edx
	sar eax,1
	mov dword ptr [esp+0x20],eax
	jmp Block33

 Block32:
	mov eax,dword ptr [esp+0x20]
	mov esi,dword ptr [esp+0x1C]

 Block33:
	mov ecx,dword ptr [ebp+0x19E4]
	test ecx,ecx
	je Block35

 Block34:
	add ecx,0xFFFFFFF4
	jmp Block36

 Block35:
	xor ecx,ecx

 Block36:
	mov edi,dword ptr [ebp+0x640]
	mov edx,dword ptr [ecx]
	push 0
	push edi
	push 0
	push 0
	add eax,0xFFFFFFF6
	push eax
	mov eax,dword ptr [edx+4]
	push esi
	push 1
	call eax
	jmp Block30

 Block37:
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x44],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block38:
	cmp dword ptr [ebp+0x46E8],0
	je Block58

 Block39:
	mov eax,dword ptr [esp+0x4C]
	add eax,0xFFFFFFDB
	cmp eax,3
	ja Block49

 Block40:
	cmp EAX, 0
je Block41
cmp EAX, 1
je Block45
cmp EAX, 2
je Block43
cmp EAX, 3
je Block47


 Block41:
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	je Block102

 Block42:
	dec ecx
	jmp Block50

 Block43:
	mov ecx,dword ptr [esp+0x14]
	cmp ecx,edi
	je Block102

 Block44:
	inc ecx
	jmp Block50

 Block45:
	mov edx,dword ptr [esp+0x18]
	test edx,edx
	je Block102

 Block46:
	mov ecx,dword ptr [esp+0x14]
	dec edx
	jmp Block51

 Block47:
	mov edx,dword ptr [esp+0x18]
	cmp edx,dword ptr [esp+0x1C]
	je Block102

 Block48:
	mov ecx,dword ptr [esp+0x14]
	inc edx
	jmp Block51

 Block49:
	mov ecx,dword ptr [esp+0x14]

 Block50:
	mov edx,dword ptr [esp+0x18]

 Block51:
	mov eax,dword ptr [esi+8]
	mov edi,dword ptr [esi]
	lea ecx,[ecx+ecx*2]
	shl ecx,6
	sub eax,0x14
	lea edi,[ecx+edi+0x60]
	cmp edi,eax
	jl Block53

 Block52:
	mov edi,eax

 Block53:
	mov eax,dword ptr [esi+0xC]
	mov ecx,dword ptr [esi+4]
	lea edx,[edx+edx*8]
	shl edx,4
	sub eax,0x14
	lea esi,[edx+ecx+0x48]
	cmp esi,eax
	jl Block55

 Block54:
	mov esi,eax

 Block55:
	push esi
	push edi
	lea ecx,[ebp+0x19E4]
	call _x_com_ptr<IWzVector2D>::op_arrow
	mov ecx,eax
	call IWzShape2D::Move
	push 0x2C
	lea ecx,[esp+0x20]
	call COutPacket::_ctor_1
	push 0
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x48],1
	call COutPacket::Encode4
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode4
	call get_field
	mov dl,byte ptr [eax+0x168]
	mov byte ptr [esp+0x4C],dl
	mov eax,dword ptr [esp+0x4C]
	push eax
	lea ecx,[esp+0x20]
	call COutPacket::Encode1
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode4
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode4
	call get_field
	mov eax,dword ptr [eax+0xD68]
	push eax
	lea ecx,[esp+0x20]
	call COutPacket::Encode4
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode4
	push 0
	push 0
	push 0
	push 0
	lea ecx,[esp+0x60]
	push 4
	push ecx
	mov dword ptr [esp+0x68],0
	call CCrc32::GetCrc32
	add esp,0x18
	push eax
	lea ecx,[esp+0x20]
	call COutPacket::Encode4
	mov edx,dword ptr [ebx]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x2C]
	push eax
	mov ecx,ebx
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	mov edx,dword ptr [ebx]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x2C]
	push eax
	mov ecx,ebx
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 1
	lea ecx,[esp+0x20]
	call COutPacket::Encode1
	push 3
	lea ecx,[esp+0x20]
	call COutPacket::Encode1
	push edi
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push esi
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode1
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	mov ecx,dword ptr [TSingleton<CClientOptMan>::ms_pInstance]
	push 2
	call CClientOptMan::GetOpt
	test eax,eax
	je Block57

 Block56:
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2

 Block57:
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode1
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	push 0
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x44],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	jmp Block102

 Block58:
	mov ecx,dword ptr [esp+0x4C]
	mov eax,ecx
	sub eax,0x25
	je Block66

 Block59:
	sub eax,1
	je Block64

 Block60:
	sub eax,1
	je Block66

 Block61:
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::MonsterCarnivalDlgKeyHook
	test eax,eax
	jne Block102

 Block62:
	mov esi,dword ptr [esp+0x50]
	push esi
	mov ecx,ebp
	call CUserLocal::UseFuncKeyMapped
	test eax,eax
	je Block102

 Block63:
	push esi
	mov ecx,ebp
	call CUserLocal::CheckBoobyTrapPickUpRequest
	jmp Block102

 Block64:
	cmp dword ptr [ebp+0x2E98],0
	jne Block102

 Block65:
	mov ecx,ebp
	call CUserLocal::HandleUpKeyDown
	jmp Block102

 Block66:
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	xor esi,esi
	cmp ecx,esi
	je Block69

 Block67:
	cmp dword ptr [ecx+0xC],esi
	je Block69

 Block68:
	call CMacroSysMan::Stop

 Block69:
	mov ecx,ebp
	call CUserLocal::IsSit
	test eax,eax
	je Block71

 Block70:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0x1F4
	call CWvsContext::SendGetUpFromChairRequest

 Block71:
	cmp dword ptr [ebp+0x2E98],esi
	je Block75

 Block72:
	lea edx,[esp+0x4C]
	push 0x16D8
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x4C],2
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x54]
	add esp,8
	mov dword ptr [esp+0x44],0xFFFFFFFF
	cmp eax,esi
	je Block74

 Block73:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block74:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 1
	push esi
	push esi
	call CWvsContext::SendFollowCharacterRequest

 Block75:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [eax+0x3D98],esi
	je Block77

 Block76:
	mov dword ptr [eax+0x3D98],esi

 Block77:
	cmp dword ptr [ebp+0x46E4],esi
	je Block102

 Block78:
	mov dword ptr [ebp+0x46E4],esi
	jmp Block102

 Block79:
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	push 0
	push edi
	call CSequencedKeyMan::Process
	sub esi,0x25
	je Block81

 Block80:
	sub esi,2
	jne Block93

 Block81:
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	test ecx,ecx
	je Block84

 Block82:
	cmp dword ptr [ecx+0xC],0
	je Block84

 Block83:
	call CMacroSysMan::Stop

 Block84:
	mov ecx,ebp
	call CUserLocal::IsDashing
	test eax,eax
	je Block93

 Block85:
	mov ecx,ebp
	call CUser::GetDashingSkill
	mov esi,eax
	push esi
	mov ecx,ebp
	call CUserLocal::SendSkillCancelRequest
	cmp esi,0x41EEE8
	jne Block93

 Block86:
	push 0x51
	lea ecx,[ebp+0x88]
	call CAvatar::SetOneTimeAction
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	call CUser::GetVecCtrl_0
	mov esi,dword ptr [eax]
	test esi,esi
	je Block88

 Block87:
	add esi,0xFFFFFFF4
	jmp Block89

 Block88:
	xor esi,esi

 Block89:
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	je Block91

 Block90:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block91:
	push 0x12
	mov ecx,esi
	call CVecCtrl::SetMovePathAttribute
	fld qword ptr [__real_3fd999999999999a]
	push 0xFFFFFFFF
	fstp qword ptr [esi+0x2E8]
	push ecx
	lea eax,[ebp+0x1960]
	mov ecx,esp
	mov dword ptr [esp+0x54],esp
	push eax
	mov dword ptr [esi+0x2E4],0x190
	call _x_com_ptr<IWzGr2DLayer>::_ctor_copy
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x5C],3
	call CUser::GetVecCtrl_0
	lea edx,[esp+0x28]
	push 0x1686
	push edx
	mov byte ptr [esp+0x60],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov ecx,dword ptr [ebp+0x640]
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x58],5
	not ecx
	and ecx,1
	push ecx
	mov byte ptr [esp+0x5C],6
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	call CAnimationDisplayer::Effect_General
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x44],0xFFFFFFFF
	test eax,eax
	je Block93

 Block92:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block93:
	mov eax,dword ptr [esp+0x50]
	push eax
	mov ecx,ebp
	call CUserLocal::UseFuncKeyMappedUpKey
	mov eax,dword ptr [ebp+0x4694]
	cmp eax,0x36
	je Block95

 Block94:
	cmp eax,0x2A
	jne Block98

 Block95:
	cmp edi,0x36
	je Block97

 Block96:
	cmp edi,0x2A
	jne Block98

 Block97:
	mov edi,eax

 Block98:
	cmp dword ptr [ebp+0x4690],0
	je Block102

 Block99:
	test eax,eax
	je Block102

 Block100:
	cmp eax,edi
	jne Block102

 Block101:
	mov ecx,ebp
	call CUserLocal::OnKeyDownSkillEnd

 Block102:
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret 8
}
}
// CUserLocal::GetCharacterLevel
__SUB_CLASS_THIS0(005072A0, __thiscall, 41323,  CUserLocal, unsigned char) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,8
	push ebx
	lea eax,[esp+4]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+8]
	test eax,eax
	je Block5

 Block1:
	push esi
	push edi
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	pop edi
	mov dword ptr [esp+0xC],0
	pop esi

 Block5:
	mov ecx,dword ptr [ebx+0x35]
	push ecx
	add ebx,0x33
	push ebx
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	pop ebx
	add esp,8
	ret
}
}
// CUserLocal::UpdateMonsterBookInfo
_SUB_EXCEPTION_HANDLER(508E20)
__SUB0(00508E20, __cdecl, 41382,  void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_508E20
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x10]
	push esi
	mov dword ptr [esp+0x20],0
	call CMonsterBookAccessor::UpdateInfo
	add esp,4
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test esi,esi
	je Block4

 Block1:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret
}
}
// CUserLocal::RedrawGuildNameTag
_SUB_EXCEPTION_HANDLER(5152F0)
__SUB_CLASS_THIS0(005152F0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5152F0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	mov ecx,edi
	call CWvsContext::GetGuildName
	push eax
	lea ecx,[esi+0x19F0]
	mov dword ptr [esp+0x1C],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov cx,word ptr [edi+0x37E0]
	mov word ptr [esi+0x19F8],cx
	mov dx,word ptr [edi+0x37E3]
	mov word ptr [esi+0x19FC],dx
	mov al,byte ptr [edi+0x37E2]
	mov byte ptr [esi+0x19FA],al
	mov cl,byte ptr [edi+0x37E5]
	mov byte ptr [esi+0x19FE],cl
	mov ecx,esi
	call CUser::DrawNameTags
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret
}
}
// CUserLocal::TryRegisterSparkAttack
__SUB_CLASS_THIS(0050D370, __thiscall, 41411,  CUserLocal, void, ATTACKINFO&, long) {
__asm {

 Block0:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,8
	push esi
	mov esi,ecx
	mov ecx,dword ptr [eax+0x2C7C]
	push ecx
	add eax,0x2C74
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block2

 Block1:
	push edi
	mov edi,dword ptr [esp+0x14]
	mov edx,dword ptr [edi]
	push edx
	lea ecx,[esi+0x3BC4]
	call ZRef<CMob>::op_assign_ptr
	mov edi,dword ptr [edi]
	mov eax,dword ptr [edi+4]
	mov eax,dword ptr [eax+0x10]
	lea ecx,[edi+4]
	lea edx,[esp+8]
	push edx
	call eax
	mov ecx,dword ptr [eax]
	mov dword ptr [esi+0x3BCC],ecx
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esi+0x3BD0],edx
	mov dword ptr [esi+0x3BD4],eax
	pop edi

 Block2:
	pop esi
	add esp,8
	ret 8
}
}
// CUserLocal::OnTemporaryStatChanged
__SUB_CLASS_THIS(00505320, __thiscall, 41376,  CUserLocal, void, NakedParam<MY_UINT128>, long, int32_t) {
__asm {

 Block0:
	sub esp,0x10
	push ebx
	push ebp
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov ebx,ecx
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+8]
	push esi
	push edi
	call edx
	mov esi,eax
	push offset _D_CTS_ENERGYCHARGE
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esp+0x2C]
	call MY_UINT128::operator&
	mov ecx,eax
	call MY_UINT128::op_bool
	test al,al
	je Block10

 Block1:
	mov edi,dword ptr [esi+0x13BC]
	lea esi,[edi+0x18]
	mov ecx,esi
	call ZFatalSection::Lock
	test esi,esi
	je Block4

 Block2:
	add dword ptr [esi+4],0xFFFFFFFF
	jne Block4

 Block3:
	mov dword ptr [esi],0

 Block4:
	cmp dword ptr [edi+0xC],0
	mov ecx,ebp
	jne Block6

 Block5:
	push 0x13
	call CWvsContext::UI_Close
	jmp Block10

 Block6:
	push 0xFFFFFFFF
	push 0x13
	call CWvsContext::UI_Open
	mov ecx,esi
	call ZFatalSection::Lock
	test esi,esi
	je Block9

 Block7:
	add dword ptr [esi+4],0xFFFFFFFF
	jne Block9

 Block8:
	mov dword ptr [esi],0

 Block9:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	mov esi,dword ptr [TSingleton<CUIEnergyBar>::ms_pInstance]
	mov ecx,edi
	call eax
	mov ecx,dword ptr [edi+0xC]
	push eax
	push ecx
	mov ecx,esi
	call CUIEnergyBar::SetEnergy

 Block10:
	push offset _D_CTS_RIDEVEHICLE__1
	lea edx,[esp+0x14]
	push edx
	lea ecx,[esp+0x2C]
	call MY_UINT128::operator&
	mov ecx,eax
	call MY_UINT128::op_bool
	test al,al
	je Block12

 Block11:
	mov eax,dword ptr [ebx+0x471C]
	sub eax,1
	mov ecx,0
	sets cl
	dec ecx
	and eax,ecx
	mov dword ptr [ebx+0x471C],eax

 Block12:
	mov edx,dword ptr [esp+0x38]
	mov eax,dword ptr [esp+0x34]
	push edx
	push eax
	sub esp,0x10
	mov ecx,esp
	push 0x80
	lea edx,[esp+0x40]
	push edx
	call MY_UINT128::_ctor_2
	mov ecx,ebx
	call CUser::OnTemporaryStatChanged
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x10
	ret 0x18
}
}
// CUserLocal::OnSkillCooltimeSet
__SUB_CLASS_THIS(00508B90, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	sub esp,8
	push ebx
	push esi
	mov esi,dword ptr [esp+0x14]
	push edi
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov edi,eax
	call CInPacket::Decode2
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx eax,ax
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,ebx
	mov dword ptr [esp+0x1C],eax
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block5

 Block1:
	push ebp
	lea esi,[eax-0x10]
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	pop ebp

 Block5:
	mov eax,dword ptr [esp+0x18]
	test ax,ax
	je Block9

 Block6:
	movzx esi,ax
	call dword ptr [ZImports::_timeGetTime]
	mov ecx,esi
	imul ecx,0x3E8
	add eax,ecx
	cmp edi,0x4FAE6F
	jne Block8

 Block7:
	mov eax,esi

 Block8:
	push eax
	push edi
	mov ecx,ebx
	call CWvsContext::SetSkillCooltimeOver
	pop edi
	pop esi
	pop ebx
	add esp,8
	ret 4

 Block9:
	push edi
	mov ecx,ebx
	call CWvsContext::RemoveSkillCooltimeOver
	pop edi
	pop esi
	pop ebx
	add esp,8
	ret 4
}
}
// CUserLocal::OnNotifyHPDecByField
__SUB_CLASS_THIS(0050FED0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push esi
	push 0
	mov esi,ecx
	mov ecx,dword ptr [esp+0xC]
	push 0
	call CInPacket::Decode4
	push eax
	mov ecx,esi
	call CUserLocal::TryConsumePetHP
	pop esi
	ret 4
}
}
// CUserLocal::TryDoingMeleeAttack
_SUB_EXCEPTION_HANDLER(51E780)
// 9259E8
static uint8_t _SUB_51E780_LOOKUP_TABLE_0[12] = {
0, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 
};
__SUB_CLASS_THIS(0051E780, __thiscall, 41394,  CUserLocal, int32_t, const SKILLENTRY*, long, long*, long, unsigned long, long, CGrenade*, long, int32_t, long, long, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_51E780
	mov eax,dword ptr fs:[0]
	push eax
	mov eax,0x1D8C
	call __chkstk
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [ebp-0x1BA8],ecx
	mov dword ptr [ebp-0x1B44],0
	mov eax,dword ptr [_D__S4]
	and eax,1
	jne Block2

 Block1:
	mov ecx,dword ptr [_D__S4]
	or ecx,1
	mov dword ptr [_D__S4],ecx
	mov dword ptr [ebp-4],0
	push 0xF462D
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkill
	mov dword ptr [_D_S_PWARRIOUSLASHB],eax
	mov dword ptr [ebp-4],0xFFFFFFFF

 Block2:
	mov edx,dword ptr [_D__S4]
	and edx,2
	jne Block4

 Block3:
	mov eax,dword ptr [_D__S4]
	or eax,2
	mov dword ptr [_D__S4],eax
	mov dword ptr [ebp-4],1
	push 0xA7DCAB
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkill
	mov dword ptr [_D_S_PSOULMASTERSLA],eax
	mov dword ptr [ebp-4],0xFFFFFFFF

 Block4:
	call TSingleton<CWvsContext>::GetInstance
	mov dword ptr [ebp-0x30],eax
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::IsUserGM
	test eax,eax
	je Block6

 Block5:
	push 0x97
	lea ecx,[ebp-0xC7C]
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BAC],eax
	mov edx,dword ptr [ebp-0x1BAC]
	mov dword ptr [ebp-0x1BB0],edx
	mov dword ptr [ebp-4],2
	push 0xC
	mov eax,dword ptr [ebp-0x1BB0]
	push eax
	call CHATLOG_ADD
	add esp,8
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0xC7C]
	call ZXString<char>::~ZXString<char>
	xor eax,eax
	jmp Block957

 Block6:
	cmp dword ptr [ebp+8],0
	je Block8

 Block7:
	mov ecx,dword ptr [ebp+8]
	mov edx,dword ptr [ecx]
	mov dword ptr [ebp-0x1BB4],edx
	jmp Block9

 Block8:
	mov dword ptr [ebp-0x1BB4],0

 Block9:
	mov eax,dword ptr [ebp-0x1BB4]
	mov dword ptr [ebp-0x1B0],eax
	cmp dword ptr [ebp+0x10],0
	je Block11

 Block10:
	mov ecx,dword ptr [ebp+0x10]
	mov dword ptr [ecx],0x41

 Block11:
	lea edx,[ebp-0xC84]
	push edx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x1BB8],eax
	mov ecx,dword ptr [ebp-0x1BB8]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x54],eax
	lea ecx,[ebp-0xC84]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,dword ptr [ebp-0x54]
	mov dword ptr [ebp-0x74],eax
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetBasicStat
	mov dword ptr [ebp-0xAF0],eax
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetSecondaryStat
	mov dword ptr [ebp-0x1DC],eax
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_nWeaponCharge_
	neg eax
	sbb eax,eax
	neg eax
	mov dword ptr [ebp-0x1C0],eax
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_nSpark_
	neg eax
	sbb eax,eax
	neg eax
	mov dword ptr [ebp-0x2C],eax
	mov dword ptr [ebp-0x50],0
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetActionRndMan
	push eax
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::_ctor_0
	mov dword ptr [ebp-4],3
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::GetRandom
	mov dword ptr [ebp-0x28],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	call get_weapon_type
	add esp,4
	mov dword ptr [ebp-0x1D8],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetSubWeaponItemID
	push eax
	call get_weapon_type
	add esp,4
	mov dword ptr [ebp-0x148],eax
	call get_update_time
	mov dword ptr [ebp-0x120],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsDead
	test eax,eax
	je Block13

 Block12:
	mov dword ptr [ebp-0xC88],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xC88]
	jmp Block957

 Block13:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov dword ptr [ebp-0x1D4],eax
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	call is_throw_bomb_skill
	add esp,4
	test eax,eax
	jne Block16

 Block14:
	mov ecx,dword ptr [ebp-0x1D4]
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	je Block16

 Block15:
	mov dword ptr [ebp-0xC8C],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xC8C]
	jmp Block957

 Block16:
	mov ecx,dword ptr [ebp-0x1D4]
	call CVecCtrl::IsOnFoothold
	test eax,eax
	jne Block68

 Block17:
	mov edx,dword ptr [ebp-0x1D4]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1D4]
	mov edx,dword ptr [eax+8]
	call edx
	test eax,eax
	jne Block68

 Block18:
	cmp dword ptr [ebp-0x1B0],0x14011E
	je Block67

 Block19:
	cmp dword ptr [ebp-0x1B0],0x406849
	je Block67

 Block20:
	cmp dword ptr [ebp-0x1B0],0x111AEE
	je Block67

 Block21:
	cmp dword ptr [ebp-0x1B0],0x12A18F
	je Block67

 Block22:
	cmp dword ptr [ebp-0x1B0],0x14282B
	je Block67

 Block23:
	cmp dword ptr [ebp-0x1B0],0x41EEE9
	je Block67

 Block24:
	cmp dword ptr [ebp-0x1B0],0x4E23EC
	je Block67

 Block25:
	cmp dword ptr [ebp-0x1B0],0x4DFCDE
	je Block67

 Block26:
	cmp dword ptr [ebp-0x1B0],0xE6935B
	je Block67

 Block27:
	cmp dword ptr [ebp-0x1B0],0x4DD5CA
	je Block67

 Block28:
	cmp dword ptr [ebp-0x1B0],0x4FAA8B
	je Block67

 Block29:
	cmp dword ptr [ebp-0x1B0],0x4E23E9
	je Block67

 Block30:
	cmp dword ptr [ebp-0x1B0],0x4E23ED
	je Block67

 Block31:
	cmp dword ptr [ebp-0x1B0],0x4E23EF
	je Block67

 Block32:
	cmp dword ptr [ebp-0x1B0],0xE6935C
	je Block67

 Block33:
	cmp dword ptr [ebp-0x1B0],0x3F1
	je Block67

 Block34:
	cmp dword ptr [ebp-0x1B0],0x989A71
	je Block67

 Block35:
	cmp dword ptr [ebp-0x1B0],0x13130F1
	je Block67

 Block36:
	cmp dword ptr [ebp-0x1B0],0x1315801
	je Block67

 Block37:
	cmp dword ptr [ebp-0x1B0],0x1C9C771
	je Block67

 Block38:
	cmp dword ptr [ebp-0x1B0],0x3FC
	je Block67

 Block39:
	cmp dword ptr [ebp-0x1B0],0x989A7C
	je Block67

 Block40:
	cmp dword ptr [ebp-0x1B0],0x13130FC
	je Block67

 Block41:
	cmp dword ptr [ebp-0x1B0],0x131580C
	je Block67

 Block42:
	cmp dword ptr [ebp-0x1B0],0x1C9C77C
	je Block67

 Block43:
	cmp dword ptr [ebp-0x1B0],0x1406F42
	je Block67

 Block44:
	cmp dword ptr [ebp-0x1B0],0x141F5E1
	je Block67

 Block45:
	cmp dword ptr [ebp-0x1B0],0x1421CF7
	je Block67

 Block46:
	cmp dword ptr [ebp-0x1B0],0x1421CF8
	je Block67

 Block47:
	cmp dword ptr [ebp-0x1B0],0x1424409
	je Block67

 Block48:
	cmp dword ptr [ebp-0x1B0],0x142440A
	je Block67

 Block49:
	cmp dword ptr [ebp-0x1B0],0x141F5E2
	je Block67

 Block50:
	cmp dword ptr [ebp-0x1B0],0x1312D0E
	je Block67

 Block51:
	cmp dword ptr [ebp-0x1B0],0x1312D0F
	je Block67

 Block52:
	cmp dword ptr [ebp-0x1B0],0x41C7DB
	je Block67

 Block53:
	cmp dword ptr [ebp-0x1B0],0x41EEE8
	je Block67

 Block54:
	cmp dword ptr [ebp-0x1B0],0x4215F8
	je Block67

 Block55:
	cmp dword ptr [ebp-0x1B0],0x423D0C
	je Block67

 Block56:
	cmp dword ptr [ebp-0x1B0],0x1E84BEF
	je Block67

 Block57:
	cmp dword ptr [ebp-0x1B0],0x1E84BF0
	je Block67

 Block58:
	cmp dword ptr [ebp-0x1B0],0x1E84BF1
	je Block67

 Block59:
	cmp dword ptr [ebp-0x1B0],0x1E84BF2
	je Block67

 Block60:
	cmp dword ptr [ebp-0x1B0],0x1E84BF3
	je Block67

 Block61:
	cmp dword ptr [ebp-0x1B0],0x217E76C
	je Block67

 Block62:
	cmp dword ptr [ebp-0x1B0],0x1F93BDA
	je Block67

 Block63:
	cmp dword ptr [ebp-0x1B0],0x21612AB
	je Block67

 Block64:
	cmp dword ptr [ebp-0x1B0],0x111AE9
	je Block67

 Block65:
	cmp dword ptr [ebp-0x1B0],0x142829
	je Block67

 Block66:
	cmp dword ptr [ebp-0x1B0],0x2F9B8A
	jne Block68

 Block67:
	mov dword ptr [ebp-0xC90],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xC90]
	jmp Block957

 Block68:
	call get_field
	mov ecx,eax
	call CField::IsUnableToUseSkill
	test eax,eax
	je Block94

 Block69:
	cmp dword ptr [ebp-0x1B0],0x40413A
	je Block93

 Block70:
	cmp dword ptr [ebp-0x1B0],0x406849
	je Block93

 Block71:
	cmp dword ptr [ebp-0x1B0],0x111AEE
	je Block93

 Block72:
	cmp dword ptr [ebp-0x1B0],0x12A18F
	je Block93

 Block73:
	cmp dword ptr [ebp-0x1B0],0x14282B
	je Block93

 Block74:
	cmp dword ptr [ebp-0x1B0],0x41EEE9
	je Block93

 Block75:
	cmp dword ptr [ebp-0x1B0],0x3EE1B0
	je Block93

 Block76:
	cmp dword ptr [ebp-0x1B0],0x4DD5CA
	je Block93

 Block77:
	cmp dword ptr [ebp-0x1B0],0x4DD5CC
	je Block93

 Block78:
	cmp dword ptr [ebp-0x1B0],0xE66C4B
	je Block93

 Block79:
	cmp dword ptr [ebp-0x1B0],0x4E23ED
	je Block93

 Block80:
	cmp dword ptr [ebp-0x1B0],0x141F5E2
	je Block93

 Block81:
	cmp dword ptr [ebp-0x1B0],0x1421CF3
	je Block93

 Block82:
	cmp dword ptr [ebp-0x1B0],0x1421CF6
	je Block93

 Block83:
	cmp dword ptr [ebp-0x1B0],0x41C7DB
	je Block93

 Block84:
	cmp dword ptr [ebp-0x1B0],0x4215F8
	je Block93

 Block85:
	cmp dword ptr [ebp-0x1B0],0x4215FD
	je Block93

 Block86:
	cmp dword ptr [ebp-0x1B0],0x4215FC
	je Block93

 Block87:
	cmp dword ptr [ebp-0x1B0],0x423D0A
	je Block93

 Block88:
	cmp dword ptr [ebp-0x1B0],0x1F93BDA
	je Block93

 Block89:
	cmp dword ptr [ebp-0x1B0],0x21612AB
	je Block93

 Block90:
	cmp dword ptr [ebp-0x1B0],0x111AE9
	je Block93

 Block91:
	cmp dword ptr [ebp-0x1B0],0x142829
	je Block93

 Block92:
	cmp dword ptr [ebp-0x1B0],0x2F9B8A
	jne Block94

 Block93:
	mov dword ptr [ebp-0xC94],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xC94]
	jmp Block957

 Block94:
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x120]
	cmp ecx,dword ptr [eax+0x3B60]
	jge Block108

 Block95:
	cmp dword ptr [ebp-0x1B0],0x111AEE
	je Block107

 Block96:
	cmp dword ptr [ebp-0x1B0],0x12A18F
	je Block107

 Block97:
	cmp dword ptr [ebp-0x1B0],0x14282B
	je Block107

 Block98:
	cmp dword ptr [ebp-0x1B0],0x4DD5CA
	je Block107

 Block99:
	cmp dword ptr [ebp-0x1B0],0x4DD5CC
	je Block107

 Block100:
	cmp dword ptr [ebp-0x1B0],0xE66C4B
	je Block107

 Block101:
	cmp dword ptr [ebp-0x1B0],0x4215FD
	je Block107

 Block102:
	cmp dword ptr [ebp-0x1B0],0x41C7DB
	je Block107

 Block103:
	cmp dword ptr [ebp-0x1B0],0x4215F8
	je Block107

 Block104:
	cmp dword ptr [ebp-0x1B0],0x423D0A
	je Block107

 Block105:
	cmp dword ptr [ebp-0x1B0],0x21612AB
	je Block107

 Block106:
	cmp dword ptr [ebp-0x1B0],0x1F93BDA
	jne Block108

 Block107:
	mov dword ptr [ebp-0xC98],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xC98]
	jmp Block957

 Block108:
	cmp dword ptr [ebp-0x1B0],0x40684F
	jne Block111

 Block109:
	mov edx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [edx+0x2ED4],0
	je Block111

 Block110:
	mov dword ptr [ebp-0xC9C],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xC9C]
	jmp Block957

 Block111:
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	call is_throw_bomb_skill
	add esp,4
	test eax,eax
	jne Block115

 Block112:
	lea ecx,[ebp-0xAF4]
	push ecx
	lea edx,[ebp-0x1B0]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x46C4
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block115

 Block113:
	mov eax,dword ptr [ebp-0x120]
	cmp eax,dword ptr [ebp-0xAF4]
	jge Block115

 Block114:
	mov dword ptr [ebp-0xCA0],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCA0]
	jmp Block957

 Block115:
	cmp dword ptr [ebp-0x1B0],0x40413A
	je Block119

 Block116:
	cmp dword ptr [ebp+0x14],0x406849
	je Block119

 Block117:
	cmp dword ptr [ebp-0x1B0],0x4DFCDE
	je Block119

 Block118:
	cmp dword ptr [ebp-0x1B0],0xE6935B
	jne Block121

 Block119:
	lea ecx,[ebp-0x144]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::IsTeleportSkillAvailable
	test eax,eax
	jne Block121

 Block120:
	mov dword ptr [ebp-0xCA4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCA4]
	jmp Block957

 Block121:
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ecx+0x5A0]
	mov dword ptr [ebp-0x1A4],edx
	cmp dword ptr [ebp+0x14],0x406849
	jne Block123

 Block122:
	mov dword ptr [ebp-0x24],0x4F
	jmp Block205

 Block123:
	cmp dword ptr [ebp-0x1B0],0x10F3E2
	je Block125

 Block124:
	cmp dword ptr [ebp-0x1B0],0xA98A5C
	jne Block133

 Block125:
	cmp dword ptr [ebp-0x1D8],0x1E
	je Block127

 Block126:
	cmp dword ptr [ebp-0x1D8],0x1F
	jne Block128

 Block127:
	mov dword ptr [ebp-0x24],0x55
	jmp Block132

 Block128:
	cmp dword ptr [ebp-0x1D8],0x28
	je Block130

 Block129:
	cmp dword ptr [ebp-0x1D8],0x29
	jne Block131

 Block130:
	mov dword ptr [ebp-0x24],0x56
	jmp Block132

 Block131:
	push 0x1127
	lea eax,[ebp-0xCA8]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BBC],eax
	mov ecx,dword ptr [ebp-0x1BBC]
	mov dword ptr [ebp-0x1BC0],ecx
	mov byte ptr [ebp-4],4
	push 0xC
	mov edx,dword ptr [ebp-0x1BC0]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0xCA8]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0xCAC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCAC]
	jmp Block957

 Block132:
	jmp Block205

 Block133:
	cmp dword ptr [ebp-0x1B0],0x140119
	jne Block140

 Block134:
	cmp dword ptr [ebp-0x1D8],0x2B
	jne Block136

 Block135:
	mov dword ptr [ebp-0x24],0x49
	jmp Block139

 Block136:
	cmp dword ptr [ebp-0x1D8],0x2C
	jne Block138

 Block137:
	mov dword ptr [ebp-0x24],0x48
	jmp Block139

 Block138:
	push 0x1127
	lea eax,[ebp-0xCB0]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BC4],eax
	mov ecx,dword ptr [ebp-0x1BC4]
	mov dword ptr [ebp-0x1BC8],ecx
	mov byte ptr [ebp-4],5
	push 0xC
	mov edx,dword ptr [ebp-0x1BC8]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0xCB0]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0xCB4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCB4]
	jmp Block957

 Block139:
	jmp Block205

 Block140:
	cmp dword ptr [ebp-0x1B0],0x111AF0
	jne Block149

 Block141:
	cmp dword ptr [ebp-0x1D8],0x1E
	je Block147

 Block142:
	cmp dword ptr [ebp-0x1D8],0x1F
	je Block147

 Block143:
	cmp dword ptr [ebp-0x1D8],0x28
	je Block147

 Block144:
	cmp dword ptr [ebp-0x1D8],0x29
	je Block147

 Block145:
	push 0x1127
	lea eax,[ebp-0xCB8]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BCC],eax
	mov ecx,dword ptr [ebp-0x1BCC]
	mov dword ptr [ebp-0x1BD0],ecx
	mov byte ptr [ebp-4],6
	push 0xC
	mov edx,dword ptr [ebp-0x1BD0]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0xCB8]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0xCBC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCBC]
	jmp Block957

 Block147:
	mov dword ptr [ebp-0x24],0x57

 Block148:
	jmp Block205

 Block149:
	cmp dword ptr [ebp-0x1B0],0x12A193
	jne Block151

 Block150:
	mov dword ptr [ebp-0x24],0x58
	jmp Block205

 Block151:
	cmp dword ptr [ebp-0x1B0],0x12A191
	jne Block153

 Block152:
	mov dword ptr [ebp-0x24],0x5E
	jmp Block205

 Block153:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetMoveAction
	push eax
	call get_action_from_act_dir
	add esp,4
	cmp eax,5
	jne Block161

 Block154:
	cmp dword ptr [ebp+0x20],0
	jne Block161

 Block155:
	cmp dword ptr [ebp-0x1B0],0x2F9B8A
	je Block161

 Block156:
	cmp dword ptr [ebp+8],0
	jne Block159

 Block157:
	cmp dword ptr [ebp-0x1A4],0
	je Block159

 Block158:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetRidingVehicle
	push eax
	push 0x29
	call pronstab_action_convert_for_jaguar
	add esp,8
	mov dword ptr [ebp-0x1BD4],eax
	jmp Block160

 Block159:
	mov dword ptr [ebp-0x1BD4],0xFFFFFFFF

 Block160:
	mov eax,dword ptr [ebp-0x1BD4]
	mov dword ptr [ebp-0x24],eax
	jmp Block205

 Block161:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsSuperMan
	test eax,eax
	je Block168

 Block162:
	cmp dword ptr [ebp+8],0
	jne Block168

 Block163:
	cmp dword ptr [ebp-0x1D8],0x27
	je Block168

 Block164:
	cmp dword ptr [ebp-0x1D8],0x30
	je Block168

 Block165:
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_rMorph_
	cmp eax,0xC80EDD
	jne Block167

 Block166:
	cmp dword ptr [ebp-0x1D8],0x2D
	je Block168

 Block167:
	push 0x1127
	lea ecx,[ebp-0xCC0]
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BD8],eax
	mov edx,dword ptr [ebp-0x1BD8]
	mov dword ptr [ebp-0x1BDC],edx
	mov byte ptr [ebp-4],7
	push 0xC
	mov eax,dword ptr [ebp-0x1BDC]
	push eax
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0xCC0]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x24],0xFFFFFFFF
	jmp Block205

 Block168:
	mov ecx,dword ptr [ebp-0x54]
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx ecx,ax
	push ecx
	push 0x42B
	call get_novice_skill_as_race
	add esp,8
	cmp dword ptr [ebp-0x1B0],eax
	jne Block173

 Block169:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsAttackableMorphed
	test eax,eax
	jne Block171

 Block170:
	push 0xDF0
	lea edx,[ebp-0xCC4]
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BE0],eax
	mov eax,dword ptr [ebp-0x1BE0]
	mov dword ptr [ebp-0x1BE4],eax
	mov byte ptr [ebp-4],8
	push 0xC
	mov ecx,dword ptr [ebp-0x1BE4]
	push ecx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0xCC4]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x24],0xFFFFFFFF
	jmp Block172

 Block171:
	mov dword ptr [ebp-0x24],0x11

 Block172:
	jmp Block205

 Block173:
	mov ecx,dword ptr [ebp-0x54]
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx edx,ax
	push edx
	push 0x42A
	call get_novice_skill_as_race
	add esp,8
	cmp dword ptr [ebp-0x1B0],eax
	jne Block178

 Block174:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsAttackableMorphed
	test eax,eax
	jne Block176

 Block175:
	push 0xDF0
	lea eax,[ebp-0xCC8]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BE8],eax
	mov ecx,dword ptr [ebp-0x1BE8]
	mov dword ptr [ebp-0x1BEC],ecx
	mov byte ptr [ebp-4],9
	push 0xC
	mov edx,dword ptr [ebp-0x1BEC]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0xCC8]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x24],0xFFFFFFFF
	jmp Block177

 Block176:
	mov dword ptr [ebp-0x24],0x10

 Block177:
	jmp Block205

 Block178:
	cmp dword ptr [ebp-0x1B0],0
	jne Block182

 Block179:
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block182

 Block180:
	cmp dword ptr [ebp-0x1D8],0x2C
	jne Block182

 Block181:
	mov eax,dword ptr [ebp-0x28]
	xor edx,edx
	mov ecx,3
	div ecx
	add edx,0x91
	mov dword ptr [ebp-0x24],edx
	jmp Block201

 Block182:
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+0x40]
	call edx
	push eax
	call is_bmage_job
	add esp,4
	test eax,eax
	je Block198

 Block183:
	mov eax,dword ptr [ebp-0x1B0]
	mov dword ptr [ebp-0x1BF0],eax
	cmp dword ptr [ebp-0x1BF0],0x1E9D288
	jg Block187

 Block184:
	cmp dword ptr [ebp-0x1BF0],0x1E9D288
	je Block191

 Block185:
	mov ecx,dword ptr [ebp-0x1BF0]
	sub ecx,0x1E84BE8
	mov dword ptr [ebp-0x1BF0],ecx
	cmp dword ptr [ebp-0x1BF0],0xB
	ja Block196

 Block186:
	mov edx,dword ptr [ebp-0x1BF0]
	movzx eax,byte ptr [edx+_SUB_51E780_LOOKUP_TABLE_0]
	cmp EAX, 0
je Block190
cmp EAX, 1
je Block194
cmp EAX, 2
je Block195
cmp EAX, 3
je Block196


 Block187:
	cmp dword ptr [ebp-0x1BF0],0x1E9F99A
	je Block192

 Block188:
	cmp dword ptr [ebp-0x1BF0],0x1EA20AA
	je Block193

 Block189:
	jmp Block196

 Block190:
	mov dword ptr [ebp-0x24],0x19
	jmp Block197

 Block191:
	mov dword ptr [ebp-0x24],0x1A
	jmp Block197

 Block192:
	mov dword ptr [ebp-0x24],0x1B
	jmp Block197

 Block193:
	mov dword ptr [ebp-0x24],0x1C
	jmp Block197

 Block194:
	mov dword ptr [ebp-0x24],0x1D
	jmp Block197

 Block195:
	mov dword ptr [ebp-0x24],0x1E
	jmp Block197

 Block196:
	mov ecx,dword ptr [ebp-0x28]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1D8]
	push ecx
	mov edx,dword ptr [ebp-0x1A4]
	push edx
	call get_random_melee_attack_action
	add esp,0x14
	mov dword ptr [ebp-0x24],eax

 Block197:
	jmp Block201

 Block198:
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	call is_able_notweapon_skill
	add esp,4
	test eax,eax
	je Block200

 Block199:
	mov dword ptr [ebp-0x24],0
	jmp Block201

 Block200:
	mov ecx,dword ptr [ebp-0x28]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1D8]
	push ecx
	mov edx,dword ptr [ebp-0x1A4]
	push edx
	call get_random_melee_attack_action
	add esp,0x14
	mov dword ptr [ebp-0x24],eax

 Block201:
	cmp dword ptr [ebp-0x24],0
	jl Block204

 Block202:
	cmp dword ptr [ebp+8],0
	je Block205

 Block203:
	mov eax,dword ptr [ebp-0x148]
	push eax
	mov ecx,dword ptr [ebp-0x1D8]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block205

 Block204:
	push 0x1127
	lea edx,[ebp-0xCCC]
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1BF4],eax
	mov eax,dword ptr [ebp-0x1BF4]
	mov dword ptr [ebp-0x1BF8],eax
	mov byte ptr [ebp-4],0xA
	push 0xC
	mov ecx,dword ptr [ebp-0x1BF8]
	push ecx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0xCCC]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0xCD0],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCD0]
	jmp Block957

 Block205:
	cmp dword ptr [ebp-0x24],0
	jge Block207

 Block206:
	mov dword ptr [ebp-0xCD4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCD4]
	jmp Block957

 Block207:
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_nFrozen_
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetAuraBooster
	push eax
	push 4
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::operator[]
	mov ecx,eax
	call TemporaryStatBase<long>::GetValue
	mov edx,dword ptr [eax]
	push edx
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_nBooster_
	push eax
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::_ZtlSecureGet_m_nWeaponAttackSpeed
	push eax
	call get_attack_speed_degree
	add esp,0x18
	mov dword ptr [ebp-0x1D0],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	mov dword ptr [ebp-0x3C],eax
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov edx,dword ptr [ebp-0x1DC]
	push edx
	mov eax,dword ptr [ebp-0x54]
	push eax
	call get_weapon_mastery
	add esp,0x1C
	mov dword ptr [ebp-0x70],eax
	cmp dword ptr [ebp+8],0
	je Block212

 Block208:
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsFinalAttack
	test eax,eax
	je Block212

 Block209:
	mov ecx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [ecx+0x3B00],0xF462D
	je Block211

 Block210:
	mov edx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [edx+0x3B00],0xA7DCAB
	jne Block212

 Block211:
	mov dword ptr [ebp-0x1BFC],1
	jmp Block213

 Block212:
	mov dword ptr [ebp-0x1BFC],0

 Block213:
	mov eax,dword ptr [ebp-0x1BFC]
	mov dword ptr [ebp-0x13C],eax
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_nShadowPartner_
	neg eax
	sbb eax,eax
	neg eax
	mov dword ptr [ebp-0x1BC],eax
	call get_field
	test eax,eax
	je Block216

 Block214:
	call get_field
	mov dword ptr [ebp-0x1C00],eax
	mov ecx,dword ptr [ebp-0x1C00]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C00]
	mov eax,dword ptr [edx+0x1C]
	call eax
	cmp eax,0x20
	jne Block216

 Block215:
	mov dword ptr [ebp-0x1BC],0

 Block216:
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	call eax
	movzx ecx,al
	push ecx
	mov edx,dword ptr [ebp-0x70]
	push edx
	mov eax,dword ptr [ebp-0x1BA8]
	add eax,0x5B0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0xCD8],esp
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1C04],eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	lea eax,[ebp-0x6C]
	push eax
	call CUser::GetAfterimageUOL
	add esp,0x18
	mov dword ptr [ebp-0x1C08],eax
	mov byte ptr [ebp-4],0xB
	lea ecx,[ebp-0x6C]
	call _xbstr_t::length
	test eax,eax
	jne Block219

 Block217:
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	call is_able_notweapon_skill
	add esp,4
	test eax,eax
	jne Block219

 Block218:
	mov dword ptr [ebp-0xCDC],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCDC]
	jmp Block957

 Block219:
	mov edx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [edx+0x3AD4],0x2F9F6C
	je Block235

 Block220:
	mov eax,dword ptr [ebp-0x1BA8]
	cmp dword ptr [eax+0x3AD4],0x4FAA8C
	je Block235

 Block221:
	mov ecx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [ecx+0x3AD4],0xC80EDA
	je Block235

 Block222:
	cmp dword ptr [ebp-0x1B0],0x21612A9
	je Block235

 Block223:
	cmp dword ptr [ebp-0x1B0],0x2179951
	je Block235

 Block224:
	cmp dword ptr [ebp-0x1B0],0x1F962F1
	je Block235

 Block225:
	cmp dword ptr [ebp-0x1B0],0x2F9B8A
	je Block235

 Block226:
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+0x3AD4]
	push eax
	call is_throw_bomb_skill
	add esp,4
	test eax,eax
	jne Block235

 Block227:
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	call is_throw_bomb_skill
	add esp,4
	test eax,eax
	jne Block235

 Block228:
	cmp dword ptr [ebp+8],0
	je Block230

 Block229:
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsFinalAttack
	test eax,eax
	jne Block235

 Block230:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsOnPlayingOneTimeAction
	test eax,eax
	je Block235

 Block231:
	cmp dword ptr [ebp+8],0
	je Block233

 Block232:
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsFinalAttack
	test eax,eax
	jne Block234

 Block233:
	mov dword ptr [ebp-0xCE0],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xCE0]
	jmp Block957

 Block234:
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+0x44]
	call edx
	push 0
	push 0x64
	push 6
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+0x88]
	mov eax,dword ptr [edx+0x14]
	call eax

 Block235:
	mov dword ptr [ebp-0x7C],0
	mov dword ptr [ebp-0x190],1
	cmp dword ptr [ebp+8],0
	je Block238

 Block236:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1100]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x1C0C],eax
	mov edx,dword ptr [ebp-0x1C0C]
	mov dword ptr [ebp-0x1C10],edx
	mov byte ptr [ebp-4],0xC
	mov eax,dword ptr [ebp-0x1B44]
	or eax,1
	mov dword ptr [ebp-0x1B44],eax
	mov ecx,dword ptr [ebp-0x1C10]
	add ecx,0x1CC
	push ecx
	call IsRectEmpty
	add esp,4
	test eax,eax
	jne Block238

 Block237:
	mov dword ptr [ebp-0x1C14],1
	jmp Block239

 Block238:
	mov dword ptr [ebp-0x1C14],0

 Block239:
	mov dl,byte ptr [ebp-0x1C14]
	mov byte ptr [ebp-0xCE1],dl
	mov dword ptr [ebp-4],0xB
	mov eax,dword ptr [ebp-0x1B44]
	and eax,1
	je Block241

 Block240:
	and dword ptr [ebp-0x1B44],0xFFFFFFFE
	lea ecx,[ebp-0x1100]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block241:
	movzx ecx,byte ptr [ebp-0xCE1]
	test ecx,ecx
	je Block264

 Block242:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x190],eax
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[ebp-0x68]
	push ecx
	call SECRECT::ToRect
	add esp,8
	cmp dword ptr [ebp-0x1B0],0x127A7A
	jne Block246

 Block243:
	mov dword ptr [ebp-0xB04],0
	lea edx,[ebp-0xB04]
	push edx
	push 0x129DAA
	mov eax,dword ptr [ebp-0x54]
	push eax
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkillLevel_0
	mov dword ptr [ebp-0xB00],eax
	cmp dword ptr [ebp-0xB04],0
	je Block246

 Block244:
	cmp dword ptr [ebp-0xB00],0
	je Block246

 Block245:
	mov ecx,dword ptr [ebp-0xB00]
	push ecx
	mov ecx,dword ptr [ebp-0xB04]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x190],eax

 Block246:
	lea edx,[ebp-0xAFC]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [ebp-0x1C18],ecx
	cmp dword ptr [ebp-0x1C18],0x4F5C6A
	jg Block251

 Block247:
	cmp dword ptr [ebp-0x1C18],0x4F5C6A
	je Block253

 Block248:
	cmp dword ptr [ebp-0x1C18],0x41EEEA
	je Block253

 Block249:
	cmp dword ptr [ebp-0x1C18],0x423D0B
	je Block256

 Block250:
	jmp Block258

 Block251:
	cmp dword ptr [ebp-0x1C18],0xD7511E
	je Block253

 Block252:
	jmp Block258

 Block253:
	cmp dword ptr [ebp+0x20],0
	je Block255

 Block254:
	lea edx,[ebp-0x1108]
	push edx
	mov eax,dword ptr [ebp+0x20]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp+0x20]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	mov dword ptr [ebp-0xAFC],ecx
	mov dword ptr [ebp-0xAF8],edx

 Block255:
	jmp Block258

 Block256:
	cmp dword ptr [ebp+0x28],0
	je Block258

 Block257:
	mov eax,dword ptr [ebp+0x2C]
	mov dword ptr [ebp-0xAFC],eax
	mov ecx,dword ptr [ebp+0x30]
	mov dword ptr [ebp-0xAF8],ecx

 Block258:
	xor edx,edx
	cmp dword ptr [ebp-0x3C],0
	sete dl
	push edx
	mov eax,dword ptr [ebp-0xAF8]
	push eax
	mov ecx,dword ptr [ebp-0xAFC]
	push ecx
	lea edx,[ebp-0x68]
	push edx
	call adjust_rect
	add esp,0x10
	cmp dword ptr [ebp-0x1B0],0x4DFCDE
	je Block260

 Block259:
	cmp dword ptr [ebp-0x1B0],0xE6935B
	jne Block263

 Block260:
	cmp dword ptr [ebp-0x3C],0
	je Block262

 Block261:
	mov eax,dword ptr [ebp-0x144]
	sub eax,0x1E
	mov dword ptr [ebp-0x68],eax
	jmp Block263

 Block262:
	mov ecx,dword ptr [ebp-0x144]
	add ecx,0x1E
	mov dword ptr [ebp-0x60],ecx

 Block263:
	push 0
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp+0x18]
	push edx
	push 0
	mov eax,dword ptr [ebp-0x190]
	push eax
	lea ecx,[ebp-0x18C]
	push ecx
	lea edx,[ebp-0x68]
	push edx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0x7C],eax
	jmp Block332

 Block264:
	cmp dword ptr [ebp-0x1B0],0x12A191
	je Block266

 Block265:
	mov eax,dword ptr [ebp-0x24]
	mov dword ptr [ebp-0x1C1C],eax
	jmp Block267

 Block266:
	mov dword ptr [ebp-0x1C1C],0x11

 Block267:
	lea ecx,[ebp-0x68]
	push ecx
	mov edx,dword ptr [ebp-0x1C1C]
	push edx
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x110C],esp
	lea eax,[ebp-0x6C]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1C20],eax
	call TSingleton<CActionMan>::GetInstance
	mov ecx,eax
	call CActionMan::GetMeleeAttackRange
	cmp dword ptr [ebp+0x10],0
	je Block269

 Block268:
	mov ecx,dword ptr [ebp-0x60]
	sub ecx,1
	push ecx
	mov edx,dword ptr [ebp-0x68]
	push edx
	push 0xFFFFFFBF
	call _zmax_long
	add esp,8
	push eax
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x68],eax
	mov eax,dword ptr [ebp-0x68]
	neg eax
	mov ecx,dword ptr [ebp+0x10]
	mov dword ptr [ecx],eax

 Block269:
	cmp dword ptr [ebp-0x3C],0
	jne Block271

 Block270:
	mov edx,dword ptr [ebp-0x5C]
	push edx
	mov eax,dword ptr [ebp-0x68]
	neg eax
	push eax
	mov ecx,dword ptr [ebp-0x64]
	push ecx
	mov edx,dword ptr [ebp-0x60]
	neg edx
	push edx
	lea eax,[ebp-0x68]
	push eax
	call SetRect

 Block271:
	cmp dword ptr [ebp-0x1B0],0xF462D
	je Block277

 Block272:
	cmp dword ptr [ebp-0x1B0],0xA7DCAB
	je Block277

 Block273:
	cmp dword ptr [ebp-0x1B0],0x10F3DD
	je Block277

 Block274:
	cmp dword ptr [ebp-0x1B0],0x127A7A
	je Block277

 Block275:
	cmp dword ptr [ebp-0x1B0],0xA98A5B
	je Block277

 Block276:
	cmp dword ptr [ebp-0x13C],0
	je Block302

 Block277:
	mov dword ptr [ebp-0xB18],0
	mov dword ptr [ebp-0xB1C],0
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_cygnus_job
	add esp,4
	test eax,eax
	je Block283

 Block278:
	push 0
	push 0xA7DCAB
	mov ecx,dword ptr [ebp-0x54]
	push ecx
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkillLevel_0
	mov dword ptr [ebp-0xB18],eax
	cmp dword ptr [ebp-0x1B0],0xA7DCAB
	je Block280

 Block279:
	cmp dword ptr [ebp-0x13C],0
	je Block281

 Block280:
	mov edx,dword ptr [ebp-0xB18]
	push edx
	mov ecx,dword ptr [_D_S_PSOULMASTERSLA]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nRange
	mov dword ptr [ebp-0xB1C],eax
	jmp Block282

 Block281:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nRange
	mov dword ptr [ebp-0xB1C],eax

 Block282:
	jmp Block287

 Block283:
	push 0
	push 0xF462D
	mov ecx,dword ptr [ebp-0x54]
	push ecx
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkillLevel_0
	mov dword ptr [ebp-0xB18],eax
	cmp dword ptr [ebp-0x1B0],0xF462D
	je Block285

 Block284:
	cmp dword ptr [ebp-0x13C],0
	je Block286

 Block285:
	mov edx,dword ptr [ebp-0xB18]
	push edx
	mov ecx,dword ptr [_D_S_PWARRIOUSLASHB]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nRange
	mov dword ptr [ebp-0xB1C],eax
	jmp Block287

 Block286:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nRange
	mov dword ptr [ebp-0xB1C],eax

 Block287:
	mov ecx,dword ptr [ebp-0x68]
	mov dword ptr [ebp-0xB14],ecx
	mov edx,dword ptr [ebp-0x64]
	mov dword ptr [ebp-0xB10],edx
	mov eax,dword ptr [ebp-0x60]
	mov dword ptr [ebp-0xB0C],eax
	mov ecx,dword ptr [ebp-0x5C]
	mov dword ptr [ebp-0xB08],ecx
	push 0
	lea edx,[ebp-0x1114]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x111C]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	lea edx,[ebp-0xB14]
	push edx
	call adjust_rect
	add esp,0x10
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 1
	lea eax,[ebp-0x18C]
	push eax
	lea ecx,[ebp-0xB14]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	cmp eax,1
	jne Block301

 Block288:
	cmp dword ptr [ebp-0x3C],0
	je Block290

 Block289:
	mov edx,dword ptr [ebp-0xB1C]
	neg edx
	push edx
	mov eax,dword ptr [ebp-0x68]
	push eax
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x68],eax
	jmp Block291

 Block290:
	mov ecx,dword ptr [ebp-0xB1C]
	push ecx
	mov edx,dword ptr [ebp-0x60]
	push edx
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0x60],eax

 Block291:
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_cygnus_job
	add esp,4
	test eax,eax
	je Block297

 Block292:
	cmp dword ptr [ebp-0x1B0],0xA7DCAB
	je Block294

 Block293:
	cmp dword ptr [ebp-0x13C],0
	je Block295

 Block294:
	mov ecx,dword ptr [ebp-0xB18]
	push ecx
	mov ecx,dword ptr [_D_S_PSOULMASTERSLA]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x190],eax
	jmp Block296

 Block295:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x190],eax

 Block296:
	jmp Block301

 Block297:
	cmp dword ptr [ebp-0x1B0],0xF462D
	je Block299

 Block298:
	cmp dword ptr [ebp-0x13C],0
	je Block300

 Block299:
	mov eax,dword ptr [ebp-0xB18]
	push eax
	mov ecx,dword ptr [_D_S_PWARRIOUSLASHB]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x190],eax
	jmp Block301

 Block300:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x190],eax

 Block301:
	jmp Block308

 Block302:
	cmp dword ptr [ebp+8],0
	je Block304

 Block303:
	push 1
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	push eax
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0x190],eax
	jmp Block308

 Block304:
	cmp dword ptr [ebp-0x1B0],0
	jne Block308

 Block305:
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block308

 Block306:
	cmp dword ptr [ebp-0x1D8],0x2C
	jne Block308

 Block307:
	mov ecx,dword ptr [ebp-0x54]
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	cdq
	mov ecx,0x14
	idiv ecx
	add eax,2
	mov dword ptr [ebp-0x190],eax

 Block308:
	lea edx,[ebp-0x1124]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x112C]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	lea edx,[ebp-0x68]
	push edx
	call OffsetRect
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov eax,dword ptr [ebp-0x190]
	push eax
	lea ecx,[ebp-0x18C]
	push ecx
	lea edx,[ebp-0x68]
	push edx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0x7C],eax
	cmp dword ptr [ebp+0x10],0
	je Block332

 Block309:
	cmp dword ptr [ebp-0x7C],0
	jne Block311

 Block310:
	mov dword ptr [ebp-0x1130],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1130]
	jmp Block957

 Block311:
	mov eax,dword ptr [ebp-0x1BA8]
	cmp dword ptr [eax+0x3AD4],0x4FAA8C
	jne Block314

 Block312:
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x120]
	sub edx,dword ptr [ecx+0x46A4]
	cmp edx,0x64
	jle Block314

 Block313:
	mov dword ptr [ebp-0x1C24],1
	jmp Block315

 Block314:
	mov dword ptr [ebp-0x1C24],0

 Block315:
	mov eax,dword ptr [ebp-0x1C24]
	mov dword ptr [ebp-0xB24],eax
	cmp dword ptr [ebp-0xB24],0
	je Block317

 Block316:
	mov dword ptr [ebp-0x1134],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1134]
	jmp Block957

 Block317:
	mov ecx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [ecx+0x3AD4],0x2F9F6C
	je Block319

 Block318:
	mov edx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [edx+0x3AD4],0xC80EDA
	jne Block321

 Block319:
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x120]
	sub ecx,dword ptr [eax+0x46A0]
	cmp ecx,0x64
	jle Block321

 Block320:
	mov dword ptr [ebp-0x1C28],1
	jmp Block322

 Block321:
	mov dword ptr [ebp-0x1C28],0

 Block322:
	mov edx,dword ptr [ebp-0x1C28]
	mov dword ptr [ebp-0xB20],edx
	cmp dword ptr [ebp-0xB20],0
	je Block324

 Block323:
	mov dword ptr [ebp-0x1138],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1138]
	jmp Block957

 Block324:
	mov eax,dword ptr [ebp-0x1BA8]
	cmp dword ptr [eax+0x3AD4],0x21612A9
	je Block326

 Block325:
	mov ecx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [ecx+0x3AD4],0x2179951
	jne Block327

 Block326:
	mov dword ptr [ebp-0x113C],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x113C]
	jmp Block957

 Block327:
	cmp dword ptr [ebp+0x24],0x4C4F2B
	je Block329

 Block328:
	cmp dword ptr [ebp+0x24],0x4F7F90
	jne Block330

 Block329:
	mov dword ptr [ebp-0x1140],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1140]
	jmp Block957

 Block330:
	mov edx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [edx+0x3AD4],0x312609
	jne Block332

 Block331:
	mov dword ptr [ebp-0x1144],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1144]
	jmp Block957

 Block332:
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_nEnrage_
	test eax,eax
	je Block334

 Block333:
	mov eax,dword ptr [ebp-0x7C]
	push eax
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_nEnrage_
	cdq
	mov ecx,0x64
	idiv ecx
	push edx
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x7C],eax

 Block334:
	cmp dword ptr [ebp-0x7C],0
	jne Block346

 Block335:
	cmp dword ptr [ebp-0x1B0],0x40413A
	je Block342

 Block336:
	cmp dword ptr [ebp-0x1B0],0x4DFCDC
	je Block342

 Block337:
	cmp dword ptr [ebp-0x1B0],0xE69359
	je Block342

 Block338:
	cmp dword ptr [ebp-0x1B0],0x4E23EF
	je Block342

 Block339:
	cmp dword ptr [ebp-0x1B0],0xE6935C
	je Block342

 Block340:
	cmp dword ptr [ebp-0x1B0],0x423D0D
	je Block342

 Block341:
	cmp dword ptr [ebp-0x1B0],0x1F93BDA
	jne Block346

 Block342:
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ebp-0x1C2C],edx
	cmp dword ptr [ebp-0x1C2C],0x1F93BDA
	je Block344

 Block343:
	jmp Block345

 Block344:
	push 0x18EF
	lea eax,[ebp-0x1148]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1C30],eax
	mov ecx,dword ptr [ebp-0x1C30]
	mov dword ptr [ebp-0x1C34],ecx
	mov byte ptr [ebp-4],0xD
	push 0xC
	mov edx,dword ptr [ebp-0x1C34]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],0xB
	lea ecx,[ebp-0x1148]
	call ZXString<char>::~ZXString<char>

 Block345:
	mov dword ptr [ebp-0x114C],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x114C]
	jmp Block957

 Block346:
	lea eax,[ebp-0x1154]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x115C]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x3BA4
	call CAntiRepeat::TryRepeat
	test eax,eax
	jne Block348

 Block347:
	mov dword ptr [ebp-0x1160],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1160]
	jmp Block957

 Block348:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetMechanicMode
	cmp eax,0x217C05C
	je Block351

 Block349:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetMechanicMode
	cmp eax,0x217E76D
	je Block351

 Block350:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetMechanicMode
	cmp eax,0x217E775
	jne Block353

 Block351:
	cmp dword ptr [ebp-0x1B0],0x217994C
	je Block353

 Block352:
	mov dword ptr [ebp-0x1164],0
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1164]
	jmp Block957

 Block353:
	mov ecx,dword ptr [ebp-0x24]
	imul ecx,0x18
	add ecx,offset ActionData::m_saCharacterActions
	mov dword ptr [ebp-0x20],ecx
	mov dword ptr [ebp-0x110],0
	mov edx,dword ptr [ebp-0x1B0]
	push edx
	call is_throw_bomb_skill
	add esp,4
	test eax,eax
	jne Block378

 Block354:
	cmp dword ptr [ebp-0x1B0],0x2F9B8A
	je Block378

 Block355:
	lea ecx,[ebp-0x6C]
	call _xbstr_t::length
	test eax,eax
	je Block378

 Block356:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	mov edx,dword ptr [ebp-0x1D0]
	push edx
	mov eax,dword ptr [ebp-0x24]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::SetAttackAction
	cmp dword ptr [ebp-0x1B0],0x4DFCDE
	je Block358

 Block357:
	cmp dword ptr [ebp-0x1B0],0xE6935B
	jne Block359

 Block358:
	mov dword ptr [ebp-0x110],0x366
	jmp Block368

 Block359:
	cmp dword ptr [ebp-0x1B0],0x4E23EC
	jne Block361

 Block360:
	mov dword ptr [ebp-0x110],0
	jmp Block368

 Block361:
	cmp dword ptr [ebp-0x1B0],0x4215FD
	jne Block367

 Block362:
	mov dword ptr [ebp-0xB28],0
	jmp Block364

 Block363:
	mov ecx,dword ptr [ebp-0xB28]
	add ecx,1
	mov dword ptr [ebp-0xB28],ecx

 Block364:
	mov edx,dword ptr [ebp+8]
	mov eax,dword ptr [ebp-0xB28]
	cmp eax,dword ptr [edx+0x50]
	jg Block366

 Block365:
	mov ecx,dword ptr [ebp-0xB28]
	push ecx
	mov ecx,dword ptr [ebp-0x20]
	add ecx,0x14
	call ZArray<ACTIONDATA::PIECE>::GetAt
	mov edx,dword ptr [ebp-0x110]
	add edx,dword ptr [eax+8]
	mov dword ptr [ebp-0x110],edx
	jmp Block363

 Block366:
	jmp Block368

 Block367:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetActionInfo
	mov ecx,dword ptr [ebp-0x20]
	mov edx,dword ptr [ecx+0x10]
	imul edx,dword ptr [eax+8]
	mov ecx,dword ptr [ebp-0x20]
	mov eax,edx
	cdq
	idiv dword ptr [ecx+0xC]
	mov dword ptr [ebp-0x110],eax

 Block368:
	cmp dword ptr [ebp-0x24],0x39
	je Block377

 Block369:
	cmp dword ptr [ebp+8],0
	je Block371

 Block370:
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsFinalAttack
	test eax,eax
	jne Block377

 Block371:
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+0x40]
	call edx
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block373

 Block372:
	cmp dword ptr [ebp+8],0
	je Block377

 Block373:
	cmp dword ptr [ebp-0x1C0],0
	je Block375

 Block374:
	mov ecx,dword ptr [ebp-0x1DC]
	call SecondaryStat::_ZtlSecureGet_rWeaponCharge_
	mov dword ptr [ebp-0x1C38],eax
	jmp Block376

 Block375:
	mov dword ptr [ebp-0x1C38],0

 Block376:
	mov eax,dword ptr [ebp-0x1C38]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetSubWeaponItemID
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1168],esp
	lea edx,[ebp-0x6C]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1C3C],eax
	mov eax,dword ptr [ebp-0x24]
	push eax
	mov ecx,dword ptr [ebp-0x3C]
	push ecx
	mov edx,dword ptr [ebp-0x120]
	add edx,dword ptr [ebp-0x110]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::RegisterAfterimage

 Block377:
	jmp Block379

 Block378:
	mov dword ptr [ebp-0x110],0x78

 Block379:
	cmp dword ptr [ebp-0x1B0],0x40684F
	jne Block382

 Block380:
	mov eax,dword ptr [ebp-0x20]
	mov ecx,dword ptr [ebp-0x120]
	add ecx,dword ptr [eax+0xC]
	mov edx,dword ptr [ebp-0x1BA8]
	mov dword ptr [edx+0x2ED4],ecx
	mov eax,dword ptr [ebp-0x1BA8]
	cmp dword ptr [eax+0x2ED4],0
	jne Block382

 Block381:
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ecx+0x2ED4]
	add edx,1
	mov eax,dword ptr [ebp-0x1BA8]
	mov dword ptr [eax+0x2ED4],edx

 Block382:
	cmp dword ptr [ebp-0x1B0],0x3F1
	je Block392

 Block383:
	cmp dword ptr [ebp-0x1B0],0x989A71
	je Block392

 Block384:
	cmp dword ptr [ebp-0x1B0],0x13130F1
	je Block392

 Block385:
	cmp dword ptr [ebp-0x1B0],0x1315801
	je Block392

 Block386:
	cmp dword ptr [ebp-0x1B0],0x1C9C771
	je Block392

 Block387:
	cmp dword ptr [ebp-0x1B0],0x3FC
	je Block392

 Block388:
	cmp dword ptr [ebp-0x1B0],0x989A7C
	je Block392

 Block389:
	cmp dword ptr [ebp-0x1B0],0x13130FC
	je Block392

 Block390:
	cmp dword ptr [ebp-0x1B0],0x131580C
	je Block392

 Block391:
	cmp dword ptr [ebp-0x1B0],0x1C9C77C
	jne Block394

 Block392:
	mov ecx,dword ptr [ebp-0x20]
	mov edx,dword ptr [ebp-0x120]
	add edx,dword ptr [ecx+0xC]
	mov eax,dword ptr [ebp-0x1BA8]
	mov dword ptr [eax+0x2ED8],edx
	mov ecx,dword ptr [ebp-0x1BA8]
	cmp dword ptr [ecx+0x2ED8],0
	jne Block394

 Block393:
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+0x2ED8]
	add eax,1
	mov ecx,dword ptr [ebp-0x1BA8]
	mov dword ptr [ecx+0x2ED8],eax

 Block394:
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ebp-0x1C40],edx
	cmp dword ptr [ebp-0x1C40],0x3EE1B0
	jg Block403

 Block395:
	cmp dword ptr [ebp-0x1C40],0x3EE1B0
	je Block410

 Block396:
	cmp dword ptr [ebp-0x1C40],0x142829
	jg Block401

 Block397:
	cmp dword ptr [ebp-0x1C40],0x142829
	je Block410

 Block398:
	cmp dword ptr [ebp-0x1C40],0
	je Block416

 Block399:
	cmp dword ptr [ebp-0x1C40],0x111AE9
	je Block410

 Block400:
	jmp Block419

 Block401:
	cmp dword ptr [ebp-0x1C40],0x2F9B8A
	je Block411

 Block402:
	jmp Block419

 Block403:
	cmp dword ptr [ebp-0x1C40],0x4E23EF
	jg Block408

 Block404:
	cmp dword ptr [ebp-0x1C40],0x4E23EF
	je Block410

 Block405:
	cmp dword ptr [ebp-0x1C40],0x423D0D
	je Block415

 Block406:
	cmp dword ptr [ebp-0x1C40],0x4E23ED
	je Block410

 Block407:
	jmp Block419

 Block408:
	cmp dword ptr [ebp-0x1C40],0xE6935C
	je Block410

 Block409:
	jmp Block419

 Block410:
	mov eax,dword ptr [ebp-0x20]
	mov esi,dword ptr [ebp-0x120]
	add esi,dword ptr [eax+0xC]
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	call get_cool_time
	add esp,4
	add esi,eax
	mov dword ptr [ebp-0x116C],esi
	lea edx,[ebp-0x116C]
	push edx
	lea eax,[ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt
	jmp Block419

 Block411:
	cmp dword ptr [ebp-0x7C],0
	je Block413

 Block412:
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	call get_cool_time
	add esp,4
	mov dword ptr [ebp-0x1C44],eax
	jmp Block414

 Block413:
	mov dword ptr [ebp-0x1C44],0

 Block414:
	mov edx,dword ptr [ebp-0x20]
	mov eax,dword ptr [ebp-0x120]
	add eax,dword ptr [edx+0xC]
	add eax,dword ptr [ebp-0x1C44]
	mov dword ptr [ebp-0x1170],eax
	lea ecx,[ebp-0x1170]
	push ecx
	lea edx,[ebp-0x1B0]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt
	jmp Block419

 Block415:
	mov eax,dword ptr [ebp-0x20]
	mov ecx,dword ptr [ebp-0x120]
	add ecx,dword ptr [eax+0xC]
	mov edx,dword ptr [ebp-0x7C]
	neg edx
	sbb edx,edx
	and edx,0x190
	add ecx,edx
	mov dword ptr [ebp-0x1174],ecx
	mov dword ptr [ebp-0x1178],0x3D0CEB
	lea eax,[ebp-0x1174]
	push eax
	lea ecx,[ebp-0x1178]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt
	jmp Block419

 Block416:
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+0x40]
	call edx
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block419

 Block417:
	cmp dword ptr [ebp-0x1D8],0x2C
	jne Block419

 Block418:
	mov eax,dword ptr [ebp-0x20]
	mov ecx,dword ptr [eax+0xC]
	mov edx,dword ptr [ebp-0x120]
	lea eax,[edx+ecx+0x190]
	mov dword ptr [ebp-0x117C],eax
	mov dword ptr [ebp-0x1180],0
	lea ecx,[ebp-0x117C]
	push ecx
	lea edx,[ebp-0x1180]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt

 Block419:
	cmp dword ptr [ebp+8],0
	je Block452

 Block420:
	mov eax,dword ptr [ebp-0x1B0]
	mov dword ptr [ebp-0x1C48],eax
	cmp dword ptr [ebp-0x1C48],0xA9634A
	jg Block430

 Block421:
	cmp dword ptr [ebp-0x1C48],0xA9634A
	je Block450

 Block422:
	cmp dword ptr [ebp-0x1C48],0x423D0B
	jg Block427

 Block423:
	cmp dword ptr [ebp-0x1C48],0x423D0B
	je Block439

 Block424:
	cmp dword ptr [ebp-0x1C48],0x406849
	je Block443

 Block425:
	cmp dword ptr [ebp-0x1C48],0x41EEEA
	je Block438

 Block426:
	jmp Block451

 Block427:
	cmp dword ptr [ebp-0x1C48],0x4DFCDE
	je Block437

 Block428:
	cmp dword ptr [ebp-0x1C48],0x4F5C6A
	je Block438

 Block429:
	jmp Block451

 Block430:
	cmp dword ptr [ebp-0x1C48],0x1F93BDA
	jg Block435

 Block431:
	cmp dword ptr [ebp-0x1C48],0x1F93BDA
	je Block447

 Block432:
	cmp dword ptr [ebp-0x1C48],0xD7511E
	je Block438

 Block433:
	cmp dword ptr [ebp-0x1C48],0xE6935B
	je Block437

 Block434:
	jmp Block451

 Block435:
	cmp dword ptr [ebp-0x1C48],0x217994C
	je Block450

 Block436:
	jmp Block451

 Block437:
	lea ecx,[ebp-0x1188]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	sub eax,dword ptr [ebp-0x144]
	push eax
	call abs_0
	add esp,4
	cdq
	mov ecx,0x37
	idiv ecx
	sub eax,2
	mov dword ptr [ebp-0xB2C],eax
	push 0
	mov edx,dword ptr [ebp-0xB2C]
	push edx
	push 0
	mov eax,dword ptr [ebp-0x1D0]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillEffect
	jmp Block452

 Block438:
	push 0
	push 0
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+0x20]
	push ecx
	push 0x320
	mov edx,dword ptr [ebp+8]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillSpecialEffect
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2B
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	call play_skill_sound
	add esp,0xC
	jmp Block452

 Block439:
	cmp dword ptr [ebp+0x2C],0
	jne Block442

 Block440:
	cmp dword ptr [ebp+0x30],0
	jne Block442

 Block441:
	mov dword ptr [ebp+0x2C],1
	mov dword ptr [ebp+0x30],1

 Block442:
	mov edx,dword ptr [ebp+0x30]
	push edx
	mov eax,dword ptr [ebp+0x2C]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+0x20]
	push edx
	push 0x320
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillSpecialEffect
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2B
	mov edx,dword ptr [ebp-0x1B0]
	push edx
	call play_skill_sound
	add esp,0xC
	jmp Block452

 Block443:
	cmp dword ptr [ebp+0x14],0
	jne Block445

 Block444:
	push 0
	push 0x7FFFFFFF
	push 0
	push 6
	push 1
	push 0x3D0CEB
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkill
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillEffect
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2A
	push 0x3D0CEB
	call play_skill_sound
	add esp,0xC
	push 0x3D0CEB
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::SendSkillCancelRequest
	push 0
	push 0x7FFFFFFF
	push 0
	mov ecx,dword ptr [ebp-0x1D0]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillEffect
	jmp Block446

 Block445:
	push 0
	push 0
	push 0
	push 0
	push 0x320
	mov ecx,dword ptr [ebp+8]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillSpecialEffect

 Block446:
	jmp Block452

 Block447:
	push 0x190E
	lea edx,[ebp-0xB30]
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov byte ptr [ebp-4],0xE
	lea ecx,[ebp-0xB30]
	call ZXString<unsigned short>::IsEmpty
	test eax,eax
	jne Block449

 Block448:
	push 0xC00614A4
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x118C],esp
	push 0
	call _x_com_ptr<IWzGr2DLayer>::_ctor_zero
	mov dword ptr [ebp-0x1C4C],eax
	mov eax,dword ptr [ebp-0x1C4C]
	mov dword ptr [ebp-0x1C50],eax
	mov byte ptr [ebp-4],0xF
	lea ecx,[ebp-0x1194]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x119C]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x11A0],esp
	push 0
	call _x_com_ptr<IWzVector2D>::_ctor_zero
	mov dword ptr [ebp-0x1C54],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea ecx,[ebp-0xB30]
	call ZXString<unsigned short>::op_c_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],0xE
	mov ecx,eax
	call CAnimationDisplayer::Effect_General

 Block449:
	push 0
	push 0x7FFFFFFF
	push 0
	mov ecx,dword ptr [ebp-0x1D0]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillEffect
	mov byte ptr [ebp-4],0xB
	lea ecx,[ebp-0xB30]
	call ZXString<unsigned short>::~ZXString<unsigned short>
	jmp Block452

 Block450:
	jmp Block452

 Block451:
	push 0
	push 0x7FFFFFFF
	push 0
	mov ecx,dword ptr [ebp-0x1D0]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::ShowSkillEffect

 Block452:
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [ebp-0x1C58],ecx
	cmp dword ptr [ebp-0x1C58],0x423D0C
	je Block454

 Block453:
	jmp Block455

 Block454:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea eax,[ebp-0xB40]
	push eax
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea ecx,[ebp-0x11A8]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x11B0]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0xB40]
	push ecx
	call adjust_rect
	add esp,0x10
	lea edx,[ebp-0x11B4]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetTileUOL
	mov dword ptr [ebp-0x1C5C],eax
	mov eax,dword ptr [ebp-0x1C5C]
	mov dword ptr [ebp-0x1C60],eax
	mov byte ptr [ebp-4],0x10
	push 0
	push 0xFF
	push 0x80
	push 0x5DC
	push 0x578
	lea ecx,[ebp-0xB40]
	push ecx
	mov ecx,dword ptr [ebp-0x1C60]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFootHoldAnimation
	mov byte ptr [ebp-4],0xB
	lea ecx,[ebp-0x11B4]
	call Ztl_bstr_t::~Ztl_bstr_t

 Block455:
	cmp dword ptr [ebp-0x1B0],0x10F3E0
	je Block471

 Block456:
	cmp dword ptr [ebp-0x1B0],0x14011E
	je Block471

 Block457:
	cmp dword ptr [ebp-0x1B0],0x895829
	je Block471

 Block458:
	cmp dword ptr [ebp-0x1B0],0x217994B
	je Block471

 Block459:
	cmp dword ptr [ebp-0x1B0],0x3F1
	je Block471

 Block460:
	cmp dword ptr [ebp-0x1B0],0x989A71
	je Block471

 Block461:
	cmp dword ptr [ebp-0x1B0],0x13130F1
	je Block471

 Block462:
	cmp dword ptr [ebp-0x1B0],0x1315801
	je Block471

 Block463:
	cmp dword ptr [ebp-0x1B0],0x1C9C771
	je Block471

 Block464:
	cmp dword ptr [ebp-0x1B0],0x3FC
	je Block471

 Block465:
	cmp dword ptr [ebp-0x1B0],0x989A7C
	je Block471

 Block466:
	cmp dword ptr [ebp-0x1B0],0x13130FC
	je Block471

 Block467:
	cmp dword ptr [ebp-0x1B0],0x131580C
	je Block471

 Block468:
	cmp dword ptr [ebp-0x1B0],0x1C9C77C
	je Block471

 Block469:
	cmp dword ptr [ebp-0x1B0],0x4215FB
	je Block471

 Block470:
	cmp dword ptr [ebp-0x1B0],0x1F962EA
	jne Block495

 Block471:
	cmp dword ptr [ebp-0x1B0],0x10F3E0
	je Block474

 Block472:
	cmp dword ptr [ebp-0x1B0],0x1F962EA
	je Block474

 Block473:
	mov dword ptr [ebp-0x1C64],0
	jmp Block475

 Block474:
	mov dword ptr [ebp-0x1C64],1

 Block475:
	mov edx,dword ptr [ebp-0x1C64]
	mov dword ptr [ebp-0xB44],edx
	cmp dword ptr [ebp-0xB44],0
	je Block477

 Block476:
	fld qword ptr [__real_402e000000000000]
	fstp qword ptr [ebp-0x1C6C]
	jmp Block478

 Block477:
	fld qword ptr [__real_4039000000000000]
	fstp qword ptr [ebp-0x1C6C]

 Block478:
	fld qword ptr [__real_4079000000000000]
	fdiv qword ptr [ebp-0x1C6C]
	fstp qword ptr [ebp-0xB4C]
	push 0
	push 0
	mov eax,dword ptr [ebp-0x110]
	push eax
	mov ecx,dword ptr [ebp-0xB44]
	push ecx
	sub esp,8
	fld qword ptr [ebp-0xB4C]
	fstp qword ptr [esp]
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::Effect_Tremble
	cmp dword ptr [ebp-0x1B0],0x3F1
	je Block483

 Block479:
	cmp dword ptr [ebp-0x1B0],0x989A71
	je Block483

 Block480:
	cmp dword ptr [ebp-0x1B0],0x13130F1
	je Block483

 Block481:
	cmp dword ptr [ebp-0x1B0],0x1315801
	je Block483

 Block482:
	cmp dword ptr [ebp-0x1B0],0x1C9C771
	jne Block484

 Block483:
	push 0xFF
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetLayerZ
	sub eax,0x64
	push eax
	push 0x208
	push 0xC80
	push 0x2D0
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFadeInOutAnimation

 Block484:
	cmp dword ptr [ebp-0x1B0],0x3F1
	je Block494

 Block485:
	cmp dword ptr [ebp-0x1B0],0x989A71
	je Block494

 Block486:
	cmp dword ptr [ebp-0x1B0],0x13130F1
	je Block494

 Block487:
	cmp dword ptr [ebp-0x1B0],0x1315801
	je Block494

 Block488:
	cmp dword ptr [ebp-0x1B0],0x1C9C771
	je Block494

 Block489:
	cmp dword ptr [ebp-0x1B0],0x3FC
	je Block494

 Block490:
	cmp dword ptr [ebp-0x1B0],0x989A7C
	je Block494

 Block491:
	cmp dword ptr [ebp-0x1B0],0x13130FC
	je Block494

 Block492:
	cmp dword ptr [ebp-0x1B0],0x131580C
	je Block494

 Block493:
	cmp dword ptr [ebp-0x1B0],0x1C9C77C
	jne Block495

 Block494:
	push 0xFF
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetLayerZ
	sub eax,0x64
	push eax
	push 0x208
	push 0xC80
	push 0x2D0
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFadeInOutAnimation

 Block495:
	mov dword ptr [ebp-0x11C],1
	cmp dword ptr [ebp+8],0
	jne Block498

 Block496:
	cmp dword ptr [ebp-0x1A4],0xA
	jne Block498

 Block497:
	mov dword ptr [ebp-0x11C],2

 Block498:
	cmp dword ptr [ebp+8],0
	je Block501

 Block499:
	cmp dword ptr [ebp+0x14],0x406849
	je Block501

 Block500:
	push 1
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nAttackCount
	push eax
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0x11C],eax

 Block501:
	cmp dword ptr [ebp-0x1B0],0x140119
	jne Block506

 Block502:
	mov dword ptr [ebp-0xB50],0
	lea eax,[ebp-0xB50]
	push eax
	push 0x142446
	mov ecx,dword ptr [ebp-0x54]
	push ecx
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkillLevel_0
	mov dword ptr [ebp-0xB54],eax
	cmp dword ptr [ebp-0xB50],0
	je Block506

 Block503:
	cmp dword ptr [ebp-0xB54],0
	je Block506

 Block504:
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetDarkForceDamage
	test eax,eax
	je Block506

 Block505:
	mov edx,dword ptr [ebp-0xB54]
	push edx
	mov ecx,dword ptr [ebp-0xB50]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nY
	add eax,dword ptr [ebp-0x11C]
	mov dword ptr [ebp-0x11C],eax

 Block506:
	cmp dword ptr [ebp-0x1BC],0
	je Block509

 Block507:
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	call is_mirror_excepted_skill
	add esp,4
	test eax,eax
	jne Block509

 Block508:
	mov dword ptr [ebp-0x1C70],2
	jmp Block510

 Block509:
	mov dword ptr [ebp-0x1C70],1

 Block510:
	mov ecx,dword ptr [ebp-0x1C70]
	mov dword ptr [ebp-0x150],ecx
	push 0xF
	mov edx,dword ptr [ebp-0x11C]
	imul edx,dword ptr [ebp-0x150]
	push edx
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x14C],eax
	mov dword ptr [ebp-0xB58],0
	jmp Block512

 Block511:
	mov eax,dword ptr [ebp-0xB58]
	add eax,1
	mov dword ptr [ebp-0xB58],eax

 Block512:
	mov ecx,dword ptr [ebp-0xB58]
	cmp ecx,dword ptr [ebp-0x7C]
	jge Block514

 Block513:
	mov edx,dword ptr [ebp-0xB58]
	imul edx,0x98
	lea eax,[ebp+edx-0xAEC]
	mov dword ptr [ebp-0xB5C],eax
	push 0x98
	push 0
	mov ecx,dword ptr [ebp-0xB5C]
	push ecx
	call _memset
	add esp,0xC
	mov edx,dword ptr [ebp-0xB5C]
	mov eax,dword ptr [ebp-0xB58]
	mov ecx,dword ptr [ebp+eax*4-0x18C]
	mov dword ptr [edx],ecx
	push 0
	mov edx,dword ptr [ebp-0xB5C]
	mov ecx,dword ptr [edx]
	call CMob::GetCurrentAction
	mov ecx,dword ptr [ebp-0xB5C]
	mov dword ptr [ecx+8],eax
	mov edx,dword ptr [ebp-0xB5C]
	mov ecx,dword ptr [edx]
	call CMob::GetCurrentFrameIndex
	mov ecx,dword ptr [ebp-0xB5C]
	mov dword ptr [ecx+0xC],eax
	mov edx,dword ptr [ebp-0xB5C]
	mov ecx,dword ptr [edx]
	call CMob::GetRandomHitAction
	mov ecx,dword ptr [ebp-0xB5C]
	mov dword ptr [ecx+4],eax
	sub esp,0x10
	mov edx,esp
	mov eax,dword ptr [ebp-0x68]
	mov dword ptr [edx],eax
	mov ecx,dword ptr [ebp-0x64]
	mov dword ptr [edx+4],ecx
	mov eax,dword ptr [ebp-0x60]
	mov dword ptr [edx+8],eax
	mov ecx,dword ptr [ebp-0x5C]
	mov dword ptr [edx+0xC],ecx
	lea edx,[ebp-0x11BC]
	push edx
	mov eax,dword ptr [ebp-0xB5C]
	mov ecx,dword ptr [eax]
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0xB5C]
	mov dword ptr [eax+0x90],ecx
	mov dword ptr [eax+0x94],edx
	jmp Block511

 Block514:
	cmp dword ptr [ebp-0x1B0],0x40413C
	je Block517

 Block515:
	cmp dword ptr [ebp-0x1B0],0xE6935E
	je Block517

 Block516:
	mov ecx,dword ptr [ebp-0x7C]
	push ecx
	lea edx,[ebp-0xAEC]
	push edx
	xor eax,eax
	cmp dword ptr [ebp-0x3C],0
	sete al
	push eax
	call sort_attackInfo_by_distance
	add esp,0xC

 Block517:
	mov dword ptr [ebp-0x38],0
	mov ecx,dword ptr [ebp-0x74]
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx ecx,ax
	cmp ecx,0x7A
	jne Block520

 Block518:
	mov dword ptr [ebp-0xB60],0
	lea edx,[ebp-0xB60]
	push edx
	push 0x129DAA
	mov eax,dword ptr [ebp-0x54]
	push eax
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkillLevel_0
	mov dword ptr [ebp-0xB64],eax
	cmp dword ptr [ebp-0xB64],0
	je Block520

 Block519:
	mov ecx,dword ptr [ebp-0xB64]
	push ecx
	mov ecx,dword ptr [ebp-0xB60]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nDamage
	mov dword ptr [ebp-0x38],eax

 Block520:
	mov dword ptr [ebp-0x1C],0
	mov dword ptr [ebp-0x118],0
	mov dword ptr [ebp-0x4C],0
	mov dword ptr [ebp-0x34],0
	mov dword ptr [ebp-0x18],0
	push 0xB
	lea edx,[ebp-0x11C4]
	push edx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x1C74],eax
	mov ecx,dword ptr [ebp-0x1C74]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x198],eax
	lea ecx,[ebp-0x11C4]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x198],0
	je Block524

 Block521:
	mov eax,dword ptr [ebp-0x198]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x198]
	mov eax,dword ptr [edx+0x78]
	call eax
	test eax,eax
	je Block524

 Block522:
	mov ecx,dword ptr [ebp-0x198]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0xB68],eax
	cmp dword ptr [ebp-0xB68],0
	je Block524

 Block523:
	mov ecx,dword ptr [ebp-0xB68]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0xB6C],eax
	lea edx,[ebp-0x18]
	push edx
	lea eax,[ebp-0x34]
	push eax
	lea ecx,[ebp-0x4C]
	push ecx
	lea edx,[ebp-0x118]
	push edx
	lea eax,[ebp-0x1C]
	push eax
	mov ecx,dword ptr [ebp-0xB6C]
	push ecx
	mov ecx,dword ptr [ebp-0x198]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x18]
	push eax
	lea ecx,[ebp-0x34]
	push ecx
	lea edx,[ebp-0x4C]
	push edx
	lea eax,[ebp-0x118]
	push eax
	lea ecx,[ebp-0x1C]
	push ecx
	mov edx,dword ptr [ebp-0xB6C]
	push edx
	mov ecx,dword ptr [ebp-0x198]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x18]
	push ecx
	lea edx,[ebp-0x34]
	push edx
	lea eax,[ebp-0x4C]
	push eax
	lea ecx,[ebp-0x118]
	push ecx
	lea edx,[ebp-0x1C]
	push edx
	mov eax,dword ptr [ebp-0xB6C]
	push eax
	mov ecx,dword ptr [ebp-0x198]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::ApplyWeaponOption

 Block524:
	push 0xA
	lea edx,[ebp-0x11CC]
	push edx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x1C78],eax
	mov ecx,dword ptr [ebp-0x1C78]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x1A0],eax
	lea ecx,[ebp-0x11CC]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x1A0],0
	je Block529

 Block525:
	mov ecx,dword ptr [ebp-0x1A0]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call is_blade
	add esp,4
	test eax,eax
	je Block529

 Block526:
	mov eax,dword ptr [ebp-0x1A0]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1A0]
	mov eax,dword ptr [edx+0x78]
	call eax
	test eax,eax
	je Block529

 Block527:
	mov ecx,dword ptr [ebp-0x1A0]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0xB70],eax
	cmp dword ptr [ebp-0xB70],0
	je Block529

 Block528:
	mov ecx,dword ptr [ebp-0xB70]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0xB74],eax
	lea edx,[ebp-0x18]
	push edx
	lea eax,[ebp-0x34]
	push eax
	lea ecx,[ebp-0x4C]
	push ecx
	lea edx,[ebp-0x118]
	push edx
	lea eax,[ebp-0x1C]
	push eax
	mov ecx,dword ptr [ebp-0xB74]
	push ecx
	mov ecx,dword ptr [ebp-0x1A0]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x18]
	push eax
	lea ecx,[ebp-0x34]
	push ecx
	lea edx,[ebp-0x4C]
	push edx
	lea eax,[ebp-0x118]
	push eax
	lea ecx,[ebp-0x1C]
	push ecx
	mov edx,dword ptr [ebp-0xB74]
	push edx
	mov ecx,dword ptr [ebp-0x1A0]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x18]
	push ecx
	lea edx,[ebp-0x34]
	push edx
	lea eax,[ebp-0x4C]
	push eax
	lea ecx,[ebp-0x118]
	push ecx
	lea edx,[ebp-0x1C]
	push edx
	mov eax,dword ptr [ebp-0xB74]
	push eax
	mov ecx,dword ptr [ebp-0x1A0]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::ApplyWeaponOption

 Block529:
	lea ecx,[ebp-0x200]
	call ZArray<unsigned long>::_ctor_default
	mov byte ptr [ebp-4],0x11
	lea edx,[ebp-0x200]
	push edx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetOnlinePartyMemberID
	mov dword ptr [ebp-0x1FC],0
	mov dword ptr [ebp-0x48],0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetPhase
	push eax
	lea eax,[ebp-0x1FC]
	push eax
	lea ecx,[ebp-0x11D4]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov ecx,dword ptr [eax+4]
	push ecx
	mov edx,dword ptr [eax]
	push edx
	lea eax,[ebp-0x200]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetCharacterId
	push eax
	call TSingleton<CAffectedAreaPool>::GetInstance
	mov ecx,eax
	call CAffectedAreaPool::GetAr01AreaPAD
	mov dword ptr [ebp-0x44],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetPhase
	push eax
	lea ecx,[ebp-0x48]
	push ecx
	lea edx,[ebp-0x11DC]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	mov edx,dword ptr [eax]
	push edx
	lea eax,[ebp-0x200]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetCharacterId
	push eax
	call TSingleton<CAffectedAreaPool>::GetInstance
	mov ecx,eax
	call CAffectedAreaPool::GetAr01AreaMAD
	mov dword ptr [ebp-0x138],eax
	mov dword ptr [ebp-0x1B8],0
	mov dword ptr [ebp-0xB58],0
	jmp Block531

 Block530:
	mov ecx,dword ptr [ebp-0xB58]
	add ecx,1
	mov dword ptr [ebp-0xB58],ecx

 Block531:
	mov edx,dword ptr [ebp-0xB58]
	cmp edx,dword ptr [ebp-0x7C]
	jge Block592

 Block532:
	mov eax,dword ptr [ebp-0xB58]
	imul eax,0x98
	lea ecx,[ebp+eax-0xAEC]
	mov dword ptr [ebp-0xB7C],ecx
	cmp dword ptr [ebp-0x1B0],0x12A193
	jne Block538

 Block533:
	mov dword ptr [ebp-0xB80],0
	jmp Block535

 Block534:
	mov edx,dword ptr [ebp-0xB80]
	add edx,1
	mov dword ptr [ebp-0xB80],edx

 Block535:
	mov eax,dword ptr [ebp-0xB80]
	cmp eax,dword ptr [ebp-0x11C]
	jge Block537

 Block536:
	mov ecx,dword ptr [ebp-0xB80]
	mov edx,dword ptr [ebp-0xB7C]
	mov dword ptr [edx+ecx*4+0x18],1
	jmp Block534

 Block537:
	jmp Block553

 Block538:
	mov eax,dword ptr [ebp-0x1B0]
	mov dword ptr [ebp-0x1C7C],eax
	cmp dword ptr [ebp-0x1C7C],0x1E9D288
	jg Block544

 Block539:
	cmp dword ptr [ebp-0x1C7C],0x1E9D288
	je Block547

 Block540:
	cmp dword ptr [ebp-0x1C7C],0x1E84BE8
	je Block547

 Block541:
	cmp dword ptr [ebp-0x1C7C],0x1E84BEE
	jle Block548

 Block542:
	cmp dword ptr [ebp-0x1C7C],0x1E84BF3
	jle Block547

 Block543:
	jmp Block548

 Block544:
	cmp dword ptr [ebp-0x1C7C],0x1E9F99A
	je Block547

 Block545:
	cmp dword ptr [ebp-0x1C7C],0x1EA20AA
	je Block547

 Block546:
	jmp Block548

 Block547:
	mov ecx,dword ptr [ebp-0x138]
	push ecx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetDragonFuryDamage
	push eax
	mov edx,dword ptr [ebp+0x1C]
	push edx
	mov eax,dword ptr [ebp-0x7C]
	add eax,dword ptr [ebp-0x1B8]
	push eax
	mov ecx,dword ptr [ebp-0x18]
	push ecx
	mov edx,dword ptr [ebp-0x34]
	push edx
	mov eax,dword ptr [ebp-0x4C]
	push eax
	mov ecx,dword ptr [ebp-0x118]
	push ecx
	mov edx,dword ptr [ebp-0x1C]
	push edx
	mov eax,dword ptr [ebp-0xB7C]
	add eax,0x54
	push eax
	mov ecx,dword ptr [ebp-0xB7C]
	add ecx,0x18
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x24]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov edx,dword ptr [ebp-0x11C]
	push edx
	mov eax,dword ptr [ebp-0x1BA8]
	add eax,0x4848
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x4840
	sub esp,8
	mov edx,esp
	mov dword ptr [ebp-0x11E0],esp
	push ecx
	mov ecx,edx
	call ZRef<PassiveSkillData>::_ctor_copy
	mov dword ptr [ebp-0x1C80],eax
	mov eax,dword ptr [ebp-0x1C80]
	mov dword ptr [ebp-0x1C84],eax
	mov byte ptr [ebp-4],0x12
	mov ecx,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	push eax
	mov edx,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [edx]
	call CMob::GetMobStat
	push eax
	mov eax,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [eax]
	call CMob::GetMobID
	push eax
	mov ecx,dword ptr [ebp-0x1DC]
	push ecx
	mov edx,dword ptr [ebp-0xAF0]
	push edx
	mov eax,dword ptr [ebp-0x54]
	push eax
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetCalcDamage
	mov byte ptr [ebp-4],0x11
	mov ecx,eax
	call CalcDamage::MDamage_1
	jmp Block553

 Block548:
	mov ecx,dword ptr [ebp-0x74]
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx ecx,ax
	push ecx
	call is_admin_job
	add esp,4
	test eax,eax
	jne Block551

 Block549:
	mov ecx,dword ptr [ebp-0x74]
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx edx,ax
	push edx
	call is_magic_attack_action
	add esp,4
	test eax,eax
	jne Block551

 Block550:
	mov dword ptr [ebp-0x1C88],0
	jmp Block552

 Block551:
	mov dword ptr [ebp-0x1C88],1

 Block552:
	mov eax,dword ptr [ebp-0x1C88]
	push eax
	mov ecx,dword ptr [ebp-0x38]
	push ecx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetDarkForceDamage
	push eax
	mov edx,dword ptr [ebp+0x1C]
	push edx
	mov eax,dword ptr [ebp-0x44]
	push eax
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetDragonFuryDamage
	push eax
	mov ecx,dword ptr [ebp-0x18]
	push ecx
	mov edx,dword ptr [ebp-0x34]
	push edx
	mov eax,dword ptr [ebp-0x4C]
	push eax
	mov ecx,dword ptr [ebp-0x118]
	push ecx
	mov edx,dword ptr [ebp-0x1C]
	push edx
	mov eax,dword ptr [ebp-0xB7C]
	add eax,0x54
	push eax
	mov ecx,dword ptr [ebp-0xB7C]
	add ecx,0x18
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1BC]
	push ecx
	mov edx,dword ptr [ebp-0x24]
	push edx
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov eax,dword ptr [ebp-0x14C]
	push eax
	mov ecx,dword ptr [ebp-0x11C]
	push ecx
	mov edx,dword ptr [ebp-0x1BA8]
	add edx,0x4848
	push edx
	mov eax,dword ptr [ebp-0x1BA8]
	add eax,0x4840
	sub esp,8
	mov ecx,esp
	mov dword ptr [ebp-0x11E4],esp
	push eax
	call ZRef<PassiveSkillData>::_ctor_copy
	mov dword ptr [ebp-0x1C8C],eax
	mov ecx,dword ptr [ebp-0x1C8C]
	mov dword ptr [ebp-0x1C90],ecx
	mov byte ptr [ebp-4],0x13
	mov edx,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	push eax
	mov eax,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [eax]
	call CMob::GetMobStat
	push eax
	mov ecx,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [ecx]
	call CMob::GetMobID
	push eax
	mov edx,dword ptr [ebp-0x1DC]
	push edx
	mov eax,dword ptr [ebp-0xAF0]
	push eax
	mov ecx,dword ptr [ebp-0x54]
	push ecx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetCalcDamage
	mov byte ptr [ebp-4],0x11
	mov ecx,eax
	call CalcDamage::PDamage_3

 Block553:
	cmp dword ptr [ebp+8],0
	je Block556

 Block554:
	mov edx,dword ptr [ebp-0x13C]
	push edx
	mov eax,dword ptr [ebp-0xB7C]
	add eax,0x18
	push eax
	mov ecx,dword ptr [ebp-0xB58]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::AdjustDamageDecRate
	test eax,eax
	je Block556

 Block555:
	mov eax,dword ptr [ebp-0xB58]
	add eax,1
	mov dword ptr [ebp-0x7C],eax
	jmp Block592

 Block556:
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	call is_damage_shared_skill
	add esp,4
	test eax,eax
	je Block564

 Block557:
	cmp dword ptr [ebp-0x7C],1
	jle Block564

 Block558:
	mov edx,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [edx]
	call CMob::GetMobStat
	cmp dword ptr [eax+0xA0],0
	je Block560

 Block559:
	mov eax,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [eax]
	call CMob::GetMobStat
	cmp dword ptr [eax+0xA4],0x1424406
	je Block564

 Block560:
	mov dword ptr [ebp-0xB84],0
	jmp Block562

 Block561:
	mov ecx,dword ptr [ebp-0xB84]
	add ecx,1
	mov dword ptr [ebp-0xB84],ecx

 Block562:
	mov edx,dword ptr [ebp-0xB84]
	cmp edx,dword ptr [ebp-0x11C]
	jge Block564

 Block563:
	mov eax,dword ptr [ebp-0x7C]
	sub eax,1
	mov dword ptr [ebp-0x1C94],eax
	fild dword ptr [ebp-0x1C94]
	mov ecx,dword ptr [ebp-0xAF0]
	fstp qword ptr [ebp-0x1C9C]
	call BasicStat::_ZtlSecureGet_nLevel
	mov dword ptr [ebp-0x1CA0],eax
	fild dword ptr [ebp-0x1CA0]
	fdiv qword ptr [__real_4024000000000000]
	fadd qword ptr [__real_4034000000000000]
	fmul qword ptr [ebp-0x1C9C]
	fdiv qword ptr [__real_4059000000000000]
	fld1
	faddp st(1),st(0)
	fidiv dword ptr [ebp-0x7C]
	mov ecx,dword ptr [ebp-0xB84]
	mov edx,dword ptr [ebp-0xB7C]
	fimul dword ptr [edx+ecx*4+0x18]
	call __ftol2_sse
	mov ecx,dword ptr [ebp-0xB84]
	mov edx,dword ptr [ebp-0xB7C]
	mov dword ptr [edx+ecx*4+0x18],eax
	jmp Block561

 Block564:
	cmp dword ptr [ebp-0x1BC],0
	je Block566

 Block565:
	mov eax,dword ptr [ebp-0x14C]
	cdq
	sub eax,edx
	sar eax,1
	mov dword ptr [ebp-0x1CA4],eax
	jmp Block567

 Block566:
	mov eax,dword ptr [ebp-0x14C]
	mov dword ptr [ebp-0x1CA4],eax

 Block567:
	mov ecx,dword ptr [ebp-0x1CA4]
	mov dword ptr [ebp-0xB78],ecx

 Block568:
	cmp dword ptr [ebp-0x1A4],0xA
	jne Block591

 Block569:
	cmp dword ptr [ebp-0xB78],1
	jle Block591

 Block570:
	mov edx,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nMaxHP
	mov ecx,dword ptr [ebp-0xB7C]
	cmp dword ptr [ecx+0x18],eax
	je Block572

 Block571:
	mov edx,dword ptr [ebp-0xB7C]
	cmp dword ptr [edx+0x18],0xF423F
	jne Block573

 Block572:
	jmp Block591

 Block573:
	cmp dword ptr [ebp+8],0
	je Block577

 Block574:
	mov eax,dword ptr [ebp+8]
	mov ecx,dword ptr [eax]
	push ecx
	call get_skill_root_from_skill
	add esp,4
	cdq
	mov ecx,0xA
	idiv ecx
	cmp eax,0x2B
	je Block577

 Block575:
	mov edx,dword ptr [ebp+8]
	mov eax,dword ptr [edx]
	push eax
	call get_skill_root_from_skill
	add esp,4
	cmp eax,0x384
	je Block577

 Block576:
	jmp Block591

 Block577:
	push 0xB
	lea ecx,[ebp-0x11EC]
	push ecx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x1CA8],eax
	mov ecx,dword ptr [ebp-0x1CA8]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0xB88],eax
	lea ecx,[ebp-0x11EC]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	push 0xA
	lea edx,[ebp-0x11F4]
	push edx
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x1CAC],eax
	mov ecx,dword ptr [ebp-0x1CAC]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0xB8C],eax
	lea ecx,[ebp-0x11F4]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0xB88],0
	je Block589

 Block578:
	cmp dword ptr [ebp-0xB8C],0
	je Block589

 Block579:
	mov ecx,dword ptr [ebp-0xB88]
	add ecx,0x49
	call GW_ItemSlotEquipBase::_ZtlSecureGet_niPAD
	movsx esi,ax
	mov ecx,dword ptr [ebp-0xB8C]
	add ecx,0x49
	call GW_ItemSlotEquipBase::_ZtlSecureGet_niPAD
	cwde
	add esi,eax
	test esi,esi
	jle Block589

 Block580:
	mov ecx,dword ptr [ebp-0xB88]
	add ecx,0x49
	call GW_ItemSlotEquipBase::_ZtlSecureGet_niPAD
	movsx ecx,ax
	mov dword ptr [ebp-0x1CB0],ecx
	fild dword ptr [ebp-0x1CB0]
	mov ecx,dword ptr [ebp-0xB88]
	add ecx,0x49
	fstp qword ptr [ebp-0x1CB8]
	call GW_ItemSlotEquipBase::_ZtlSecureGet_niPAD
	movsx esi,ax
	mov ecx,dword ptr [ebp-0xB8C]
	add ecx,0x49
	call GW_ItemSlotEquipBase::_ZtlSecureGet_niPAD
	movsx edx,ax
	add esi,edx
	mov dword ptr [ebp-0x1CBC],esi
	fild dword ptr [ebp-0x1CBC]
	fdivr qword ptr [ebp-0x1CB8]
	fstp qword ptr [ebp-0xB94]
	fld1
	fsub qword ptr [ebp-0xB94]
	fstp qword ptr [ebp-0xB9C]
	mov dword ptr [ebp-0xBA0],0
	jmp Block582

 Block581:
	mov eax,dword ptr [ebp-0xBA0]
	add eax,1
	mov dword ptr [ebp-0xBA0],eax

 Block582:
	mov ecx,dword ptr [ebp-0xBA0]
	cmp ecx,dword ptr [ebp-0x14C]
	jge Block589

 Block583:
	mov edx,dword ptr [ebp-0xBA0]
	mov eax,dword ptr [ebp-0xB7C]
	mov ecx,dword ptr [eax+edx*4+0x18]
	mov dword ptr [ebp-0xBA4],ecx
	mov edx,dword ptr [ebp-0xBA0]
	and edx,0x80000001
	jns Block585

 Block584:
	dec edx
	or edx,0xFFFFFFFE
	inc edx

 Block585:
	test edx,edx
	jne Block587

 Block586:
	fild dword ptr [ebp-0xBA4]
	fmul qword ptr [ebp-0xB94]
	call __ftol2_sse
	mov ecx,dword ptr [ebp-0xBA0]
	mov edx,dword ptr [ebp-0xB7C]
	mov dword ptr [edx+ecx*4+0x18],eax
	jmp Block588

 Block587:
	fild dword ptr [ebp-0xBA4]
	fmul qword ptr [ebp-0xB9C]
	call __ftol2_sse
	mov ecx,dword ptr [ebp-0xBA0]
	mov edx,dword ptr [ebp-0xB7C]
	mov dword ptr [edx+ecx*4+0x18],eax

 Block588:
	jmp Block581

 Block589:
	jmp Block591

 Block591:
	jmp Block530

 Block592:
	push 0
	lea eax,[ebp-0xAEC]
	push eax
	mov ecx,dword ptr [ebp-0x7C]
	push ecx
	mov edx,dword ptr [ebp-0x24]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp-0x74]
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx ecx,al
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::_ctor_0
	mov byte ptr [ebp-4],0x14
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	call CSkillInfo::IsMobChaseAttack
	add esp,8
	mov dword ptr [ebp-0x194],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetKnockbockProp
	mov dword ptr [ebp-0x1F8],eax
	mov dword ptr [ebp-0x114],0
	call get_update_time
	mov dword ptr [ebp-0x40],eax
	mov dword ptr [ebp-0xB58],0
	jmp Block594

 Block593:
	mov edx,dword ptr [ebp-0xB58]
	add edx,1
	mov dword ptr [ebp-0xB58],edx

 Block594:
	mov eax,dword ptr [ebp-0xB58]
	cmp eax,dword ptr [ebp-0x7C]
	jge Block748

 Block595:
	mov ecx,dword ptr [ebp-0xB58]
	imul ecx,0x98
	lea edx,[ebp+ecx-0xAEC]
	mov dword ptr [ebp-0xBA8],edx
	cmp dword ptr [ebp-0x1B0],0x40413C
	jne Block597

 Block596:
	mov eax,dword ptr [ebp-0xB58]
	neg eax
	sbb eax,eax
	and eax,0x118
	add eax,dword ptr [ebp-0x110]
	mov ecx,dword ptr [ebp-0xBA8]
	mov dword ptr [ecx+0x10],eax
	jmp Block600

 Block597:
	cmp dword ptr [ebp-0x1B0],0x21612AB
	jne Block599

 Block598:
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [ebp-0x110]
	mov dword ptr [edx+0x10],eax
	jmp Block600

 Block599:
	push 0x118
	mov ecx,dword ptr [ebp-0xB58]
	imul ecx,0x46
	push ecx
	call _zmin_long
	add esp,8
	add eax,dword ptr [ebp-0x110]
	mov edx,dword ptr [ebp-0xBA8]
	mov dword ptr [edx+0x10],eax

 Block600:
	mov dword ptr [ebp-0xBB0],0
	jmp Block602

 Block601:
	mov eax,dword ptr [ebp-0xBB0]
	add eax,1
	mov dword ptr [ebp-0xBB0],eax

 Block602:
	mov ecx,dword ptr [ebp-0xBB0]
	cmp ecx,dword ptr [ebp-0x14C]
	jge Block743

 Block603:
	mov dword ptr [ebp-0xBB8],1
	mov dword ptr [ebp-0xBC8],0
	mov dword ptr [ebp-0xBD0],0
	mov dword ptr [ebp-0xBC4],0
	cmp dword ptr [ebp-0x1B0],0x111AEE
	je Block613

 Block604:
	cmp dword ptr [ebp-0x1B0],0x12A18F
	je Block613

 Block605:
	cmp dword ptr [ebp-0x1B0],0x14282B
	je Block613

 Block606:
	cmp dword ptr [ebp-0x1B0],0x41EEE9
	je Block613

 Block607:
	cmp dword ptr [ebp-0x1B0],0x4DD5CA
	je Block613

 Block608:
	cmp dword ptr [ebp-0x1B0],0x4DD5CC
	je Block613

 Block609:
	cmp dword ptr [ebp-0x1B0],0xE66C4B
	je Block613

 Block610:
	cmp dword ptr [ebp-0x1B0],0x4215FD
	je Block613

 Block611:
	cmp dword ptr [ebp-0x1B0],0x423D0A
	je Block613

 Block612:
	cmp dword ptr [ebp-0x1B0],0x21612AB
	jne Block624

 Block613:
	cmp dword ptr [ebp-0x1B0],0x4DD5CA
	jne Block615

 Block614:
	mov dword ptr [ebp-0xBB8],8
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_right
	mov esi,eax
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::GetHalfWidth
	add esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	lea ecx,[esi+eax+0x19]
	neg ecx
	mov dword ptr [ebp-0xBDC],ecx
	jmp Block620

 Block615:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	mov esi,eax
	neg esi
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::GetHalfWidth
	add esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	lea ecx,[esi+eax+0x2D]
	mov dword ptr [ebp-0xBDC],ecx
	cmp dword ptr [ebp-0x1B0],0x4DD5CC
	je Block618

 Block616:
	cmp dword ptr [ebp-0x1B0],0xE66C4B
	je Block618

 Block617:
	cmp dword ptr [ebp-0x1B0],0x423D0A
	jne Block619

 Block618:
	mov dword ptr [ebp-0xBB8],9
	jmp Block620

 Block619:
	xor edx,edx
	cmp dword ptr [ebp-0x1B0],0x21612AB
	setne dl
	add edx,5
	mov dword ptr [ebp-0xBB8],edx

 Block620:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	test eax,eax
	je Block622

 Block621:
	mov eax,dword ptr [ebp-0xBDC]
	neg eax
	mov dword ptr [ebp-0x1CC0],eax
	jmp Block623

 Block622:
	mov ecx,dword ptr [ebp-0xBDC]
	mov dword ptr [ebp-0x1CC0],ecx

 Block623:
	lea edx,[ebp-0x11FC]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	add ecx,dword ptr [ebp-0x1CC0]
	mov dword ptr [ebp-0xBC8],ecx
	jmp Block680

 Block624:
	cmp dword ptr [ebp-0x1B0],0x141F5E2
	jne Block629

 Block625:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	mov esi,eax
	neg esi
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::GetHalfWidth
	add esi,eax
	mov dword ptr [ebp-0xBE0],esi
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	test eax,eax
	je Block627

 Block626:
	mov ecx,dword ptr [ebp-0xBE0]
	neg ecx
	mov dword ptr [ebp-0x1CC4],ecx
	jmp Block628

 Block627:
	mov edx,dword ptr [ebp-0xBE0]
	mov dword ptr [ebp-0x1CC4],edx

 Block628:
	lea eax,[ebp-0x1204]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	add eax,dword ptr [ebp-0x1CC4]
	mov dword ptr [ebp-0xBC8],eax
	mov dword ptr [ebp-0xBB8],6
	jmp Block680

 Block629:
	cmp dword ptr [ebp-0x1B0],0x1421CF3
	je Block632

 Block630:
	cmp dword ptr [ebp-0x1B0],0x4215FC
	je Block632

 Block631:
	cmp dword ptr [ebp-0x1B0],0x217994B
	jne Block639

 Block632:
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	call CMob::IsBossMob
	test eax,eax
	jne Block638

 Block633:
	mov edx,dword ptr [ebp-0xBB0]
	mov eax,dword ptr [ebp-0xBA8]
	cmp dword ptr [eax+edx*4+0x18],0
	jle Block638

 Block634:
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	call CMob::GetMoveAbility
	cmp eax,1
	je Block636

 Block635:
	mov edx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [edx]
	call CMob::GetMoveAbility
	cmp eax,3
	jne Block638

 Block636:
	call get_field
	mov ecx,eax
	call CField::IsSwimmingMap
	test eax,eax
	jne Block638

 Block637:
	mov dword ptr [ebp-0xBB8],0xB

 Block638:
	jmp Block680

 Block639:
	cmp dword ptr [ebp-0x1B0],0x3EE1B0
	jne Block647

 Block640:
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::IsBossMob
	test eax,eax
	jne Block646

 Block641:
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	cmp dword ptr [edx+ecx*4+0x18],0
	jle Block646

 Block642:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nRange
	mov esi,eax
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	call CMob::GetHalfWidth
	add esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	add esi,eax
	mov dword ptr [ebp-0xBE4],esi
	lea edx,[ebp-0x120C]
	push edx
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x10]
	call eax
	mov esi,eax
	lea ecx,[ebp-0x1214]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov ecx,dword ptr [esi]
	xor edx,edx
	cmp ecx,dword ptr [eax]
	setl dl
	mov dword ptr [ebp-0xBC4],edx
	mov dword ptr [ebp-0xBB8],7
	cmp dword ptr [ebp-0xBC4],0
	je Block644

 Block643:
	mov eax,dword ptr [ebp-0xBE4]
	neg eax
	mov dword ptr [ebp-0x1CC8],eax
	jmp Block645

 Block644:
	mov ecx,dword ptr [ebp-0xBE4]
	mov dword ptr [ebp-0x1CC8],ecx

 Block645:
	lea edx,[ebp-0x121C]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	add ecx,dword ptr [ebp-0x1CC8]
	mov dword ptr [ebp-0xBC8],ecx

 Block646:
	jmp Block680

 Block647:
	cmp dword ptr [ebp-0x1B0],0x1421CF6
	jne Block655

 Block648:
	mov edx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [edx]
	call CMob::IsBossMob
	test eax,eax
	jne Block654

 Block649:
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,dword ptr [ebp-0xBA8]
	cmp dword ptr [ecx+eax*4+0x18],0
	jle Block654

 Block650:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nRange
	mov esi,eax
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::GetHalfWidth
	add esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	add esi,eax
	mov dword ptr [ebp-0xBE8],esi
	lea ecx,[ebp-0x1224]
	push ecx
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	add ecx,4
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov esi,eax
	lea ecx,[ebp-0x122C]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov ecx,dword ptr [esi]
	xor edx,edx
	cmp ecx,dword ptr [eax]
	setl dl
	mov dword ptr [ebp-0xBC4],edx
	mov dword ptr [ebp-0xBB8],7
	cmp dword ptr [ebp-0xBC4],0
	je Block652

 Block651:
	mov eax,dword ptr [ebp-0xBE8]
	neg eax
	mov dword ptr [ebp-0x1CCC],eax
	jmp Block653

 Block652:
	mov ecx,dword ptr [ebp-0xBE8]
	mov dword ptr [ebp-0x1CCC],ecx

 Block653:
	lea edx,[ebp-0x1234]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	add ecx,dword ptr [ebp-0x1CCC]
	mov dword ptr [ebp-0xBC8],ecx

 Block654:
	jmp Block680

 Block655:
	cmp dword ptr [ebp-0x1B0],0x4E23ED
	je Block658

 Block656:
	cmp dword ptr [ebp-0x1B0],0x111AE9
	je Block658

 Block657:
	cmp dword ptr [ebp-0x1B0],0x142829
	jne Block660

 Block658:
	mov edx,dword ptr [ebp-0xBB0]
	mov eax,dword ptr [ebp-0xBA8]
	cmp dword ptr [eax+edx*4+0x18],0
	jle Block660

 Block659:
	mov dword ptr [ebp-0xBB8],3
	lea ecx,[ebp-0x123C]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	mov dword ptr [ebp-0xBC8],eax
	lea ecx,[ebp-0x1244]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	mov dword ptr [ebp-0xBD0],eax
	jmp Block680

 Block660:
	cmp dword ptr [ebp-0x1B0],0x4E23EF
	je Block662

 Block661:
	cmp dword ptr [ebp-0x1B0],0xE6935C
	jne Block663

 Block662:
	mov dword ptr [ebp-0xBB8],0xA
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFFE
	add eax,1
	mov ecx,dword ptr [ebp-0xBB0]
	// TODO: 	imul eax,dword ptr [ecx*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+192]
	mov dword ptr [ebp-0xBC8],eax
	lea edx,[ebp-0x124C]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	mov dword ptr [ebp-0xBD0],ecx
	jmp Block680

 Block663:
	cmp dword ptr [ebp-0x1B0],0x423D0D
	jne Block665

 Block664:
	mov dword ptr [ebp-0xBB8],0xC
	jmp Block680

 Block665:
	cmp dword ptr [ebp-0x1B0],0x2F9B8A
	jne Block673

 Block666:
	mov edx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [edx]
	call CMob::IsBossMob
	test eax,eax
	jne Block672

 Block667:
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,dword ptr [ebp-0xBA8]
	cmp dword ptr [ecx+eax*4+0x18],0
	jle Block672

 Block668:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_right
	mov esi,eax
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::GetHalfWidth
	add esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	add esi,eax
	mov dword ptr [ebp-0xBEC],esi
	lea ecx,[ebp-0x1254]
	push ecx
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	add ecx,4
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov esi,eax
	lea ecx,[ebp-0x125C]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov ecx,dword ptr [esi]
	xor edx,edx
	cmp ecx,dword ptr [eax]
	setl dl
	mov dword ptr [ebp-0xBC4],edx
	mov dword ptr [ebp-0xBB8],7
	cmp dword ptr [ebp-0xBC4],0
	je Block670

 Block669:
	mov eax,dword ptr [ebp-0xBEC]
	neg eax
	mov dword ptr [ebp-0x1CD0],eax
	jmp Block671

 Block670:
	mov ecx,dword ptr [ebp-0xBEC]
	mov dword ptr [ebp-0x1CD0],ecx

 Block671:
	lea edx,[ebp-0x1264]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	add ecx,dword ptr [ebp-0x1CD0]
	mov dword ptr [ebp-0xBC8],ecx

 Block672:
	jmp Block680

 Block673:
	push 0
	push 0x64
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0xBF0],eax
	push 0
	push 0x64
	mov edx,dword ptr [ebp-0x1F8]
	push edx
	call _zmin_long
	add esp,8
	push eax
	call _zmax_long
	add esp,8
	xor ecx,ecx
	cmp dword ptr [ebp-0xBF0],eax
	setl cl
	mov dword ptr [ebp-0xBF4],ecx
	mov edx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [edx]
	call CMob::GetPushedDamage
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	cmp dword ptr [edx+ecx*4+0x18],eax
	jl Block676

 Block674:
	cmp dword ptr [ebp-0xBF4],0
	je Block676

 Block675:
	mov dword ptr [ebp-0xBB8],2
	jmp Block680

 Block676:
	cmp dword ptr [ebp-0xBF4],0
	je Block680

 Block677:
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::IsBossMob
	test eax,eax
	jne Block680

 Block678:
	mov ecx,dword ptr [ebp-0xBF0]
	cmp ecx,dword ptr [ebp-0x114]
	jge Block680

 Block679:
	mov dword ptr [ebp-0xBB8],2

 Block680:
	mov edx,dword ptr [ebp-0xB58]
	push edx
	lea eax,[ebp-0xBCC]
	push eax
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::operator()
	mov byte ptr [ebp-4],0x15
	mov dword ptr [ebp-0xBBC],0
	cmp dword ptr [ebp-0x1B0],0x406849
	jne Block684

 Block681:
	mov eax,dword ptr [ebp-0xBB0]
	cdq
	idiv dword ptr [ebp-0x150]
	cmp edx,1
	je Block683

 Block682:
	mov eax,dword ptr [ebp-0xBB0]
	cdq
	idiv dword ptr [ebp-0x150]
	mov ecx,dword ptr [ebp-0xBA8]
	mov edx,dword ptr [ecx+0x10]
	// TODO: 	add edx,dword ptr [eax*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+180]
	mov eax,dword ptr [ebp-0xBA8]
	mov dword ptr [eax+0x10],edx

 Block683:
	jmp Block720

 Block684:
	cmp dword ptr [ebp-0x1B0],0x40684F
	jne Block688

 Block685:
	mov eax,dword ptr [ebp-0xBB0]
	cdq
	idiv dword ptr [ebp-0x150]
	cmp edx,1
	je Block687

 Block686:
	mov eax,dword ptr [ebp-0xBB0]
	cdq
	idiv dword ptr [ebp-0x150]
	sub eax,1
	neg eax
	sbb eax,eax
	and eax,0xFFFFFEE8
	add eax,0x168
	mov ecx,dword ptr [ebp-0xBA8]
	add eax,dword ptr [ecx+0x10]
	mov edx,dword ptr [ebp-0xBA8]
	mov dword ptr [edx+0x10],eax

 Block687:
	jmp Block720

 Block688:
	cmp dword ptr [ebp-0x1B0],0x10F3E2
	je Block691

 Block689:
	cmp dword ptr [ebp-0x1B0],0x111AF0
	je Block691

 Block690:
	cmp dword ptr [ebp-0x1B0],0xA98A5C
	jne Block698

 Block691:
	cmp dword ptr [ebp-0x1D8],0x1E
	je Block693

 Block692:
	cmp dword ptr [ebp-0x1D8],0x1F
	jne Block694

 Block693:
	mov eax,dword ptr [ebp-0xBB0]
	sub eax,1
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFB0
	add eax,0xA0
	mov ecx,dword ptr [ebp-0xBA8]
	add eax,dword ptr [ecx+0x10]
	mov edx,dword ptr [ebp-0xBA8]
	mov dword ptr [edx+0x10],eax
	jmp Block697

 Block694:
	cmp dword ptr [ebp-0x1D8],0x28
	je Block696

 Block695:
	cmp dword ptr [ebp-0x1D8],0x29
	jne Block697

 Block696:
	mov eax,dword ptr [ebp-0xBB0]
	sub eax,1
	neg eax
	sbb eax,eax
	and eax,0xFFFFFF60
	add eax,0xF0
	mov ecx,dword ptr [ebp-0xBA8]
	add eax,dword ptr [ecx+0x10]
	mov edx,dword ptr [ebp-0xBA8]
	mov dword ptr [edx+0x10],eax

 Block697:
	jmp Block720

 Block698:
	cmp dword ptr [ebp-0x1B0],0x4DD5CB
	jne Block700

 Block699:
	mov eax,dword ptr [ebp-0xBB0]
	sub eax,1
	neg eax
	sbb eax,eax
	and eax,0xFFFFFEF2
	add eax,0x15E
	mov ecx,dword ptr [ebp-0xBA8]
	mov dword ptr [ecx+0x10],eax
	mov edx,dword ptr [ebp-0xBB0]
	push edx
	lea eax,[ebp-0x1268]
	push eax
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::operator()
	mov dword ptr [ebp-0x1CD4],eax
	mov ecx,dword ptr [ebp-0x1CD4]
	push ecx
	lea ecx,[ebp-0xBCC]
	call Ztl_bstr_t::op_assign
	lea ecx,[ebp-0x1268]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block720

 Block700:
	cmp dword ptr [ebp-0x1B0],0x4E23EC
	jne Block702

 Block701:
	mov edx,dword ptr [ebp-0x1D0]
	add edx,0xA
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,edx
	// TODO: 	imul ecx,dword ptr [eax*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+148]
	mov eax,ecx
	cdq
	and edx,0xF
	add eax,edx
	sar eax,4
	mov dword ptr [ebp-0xBBC],eax
	jmp Block720

 Block702:
	cmp dword ptr [ebp-0x1B0],0x4E23EF
	je Block704

 Block703:
	cmp dword ptr [ebp-0x1B0],0xE6935C
	jne Block705

 Block704:
	mov edx,dword ptr [ebp-0x14C]
	push edx
	mov eax,dword ptr [ebp-0xBB0]
	push eax
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetDamageDelay
	mov dword ptr [ebp-0x110],eax
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [ebp-0x110]
	mov dword ptr [edx+0x10],eax
	jmp Block720

 Block705:
	cmp dword ptr [ebp+8],0
	jne Block710

 Block706:
	cmp dword ptr [ebp-0x1A4],0xA
	jne Block710

 Block707:
	mov ecx,dword ptr [ebp-0xBB0]
	and ecx,0x80000001
	jns Block709

 Block708:
	dec ecx
	or ecx,0xFFFFFFFE
	inc ecx

 Block709:
	neg ecx
	sbb ecx,ecx
	and ecx,0xF0
	mov dword ptr [ebp-0xBBC],ecx
	jmp Block720

 Block710:
	cmp dword ptr [ebp-0x1B0],0x1F93BDE
	jne Block712

 Block711:
	mov edx,dword ptr [ebp-0x1D0]
	add edx,0xA
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,edx
	// TODO: 	imul ecx,dword ptr [eax*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+132]
	mov eax,ecx
	cdq
	and edx,0xF
	add eax,edx
	sar eax,4
	mov dword ptr [ebp-0xBBC],eax
	jmp Block720

 Block712:
	cmp dword ptr [ebp-0x1B0],0x1E84BE8
	jne Block714

 Block713:
	mov edx,dword ptr [ebp-0x1D0]
	add edx,0xA
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,edx
	// TODO: 	imul ecx,dword ptr [eax*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+120]
	mov eax,ecx
	cdq
	and edx,0xF
	add eax,edx
	sar eax,4
	mov dword ptr [ebp-0xBBC],eax
	jmp Block720

 Block714:
	cmp dword ptr [ebp-0x1B0],0x1E9D288
	jne Block716

 Block715:
	mov edx,dword ptr [ebp-0x1D0]
	add edx,0xA
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,edx
	// TODO: 	imul ecx,dword ptr [eax*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+104]
	mov eax,ecx
	cdq
	and edx,0xF
	add eax,edx
	sar eax,4
	mov dword ptr [ebp-0xBBC],eax
	jmp Block720

 Block716:
	cmp dword ptr [ebp-0x1B0],0x1E9F99A
	jne Block718

 Block717:
	mov edx,dword ptr [ebp-0x1D0]
	add edx,0xA
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,edx
	// TODO: 	imul ecx,dword ptr [eax*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+84]
	mov eax,ecx
	cdq
	and edx,0xF
	add eax,edx
	sar eax,4
	mov dword ptr [ebp-0xBBC],eax
	jmp Block720

 Block718:
	cmp dword ptr [ebp-0x1B0],0x1EA20AA
	jne Block720

 Block719:
	mov edx,dword ptr [ebp-0x1D0]
	add edx,0xA
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,edx
	// TODO: 	imul ecx,dword ptr [eax*4+CRepairDurabilityDlg::`vftable'{for `IGObj'}+60]
	mov eax,ecx
	cdq
	and edx,0xF
	add eax,edx
	sar eax,4
	mov dword ptr [ebp-0xBBC],eax

 Block720:
	mov edx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nFixedDamage
	mov dword ptr [ebp-0xBC0],eax
	cmp dword ptr [ebp-0xBC0],0
	jle Block734

 Block721:
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,dword ptr [ebp-0xBA8]
	cmp dword ptr [ecx+eax*4+0x18],0
	jle Block734

 Block722:
	cmp dword ptr [ebp-0x1A4],0xA
	jne Block733

 Block723:
	cmp dword ptr [ebp-0x14C],1
	jle Block733

 Block724:
	mov edx,dword ptr [ebp-0xBB0]
	and edx,0x80000001
	jns Block726

 Block725:
	dec edx
	or edx,0xFFFFFFFE
	inc edx

 Block726:
	test edx,edx
	jne Block728

 Block727:
	mov eax,dword ptr [ebp-0xBC0]
	imul eax,7
	cdq
	mov ecx,0xA
	idiv ecx
	mov edx,dword ptr [ebp-0xBB0]
	mov ecx,dword ptr [ebp-0xBA8]
	mov dword ptr [ecx+edx*4+0x18],eax
	jmp Block729

 Block728:
	mov eax,dword ptr [ebp-0xBC0]
	imul eax,3
	cdq
	mov ecx,0xA
	idiv ecx
	mov edx,dword ptr [ebp-0xBB0]
	mov ecx,dword ptr [ebp-0xBA8]
	mov dword ptr [ecx+edx*4+0x18],eax

 Block729:
	mov edx,dword ptr [ebp-0xBB0]
	mov eax,dword ptr [ebp-0xBA8]
	cmp dword ptr [eax+edx*4+0x18],0
	jne Block731

 Block730:
	mov dword ptr [ebp-0x1CD8],1
	jmp Block732

 Block731:
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx+ecx*4+0x18]
	mov dword ptr [ebp-0x1CD8],eax

 Block732:
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [ebp-0x1CD8]
	mov dword ptr [edx+ecx*4+0x18],eax
	jmp Block734

 Block733:
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [ebp-0xBC0]
	mov dword ptr [edx+ecx*4+0x18],eax

 Block734:
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	mov edx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block736

 Block735:
	mov eax,dword ptr [ebp-0xBB0]
	mov ecx,dword ptr [ebp-0xBA8]
	mov dword ptr [ecx+eax*4+0x18],0

 Block736:
	mov edx,dword ptr [ebp-0xBB0]
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax+edx*4+0x18]
	mov dword ptr [ebp-0xBD8],ecx
	push 0
	lea edx,[ebp-0xBD8]
	push edx
	push 1
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	mov ecx,dword ptr [ebp-0x54]
	push ecx
	call CItemInfo::CheckDamageModifiedByEquipUpgrade
	add esp,0x14
	test eax,eax
	je Block738

 Block737:
	mov edx,dword ptr [ebp-0xBB0]
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ebp-0xBD8]
	mov dword ptr [eax+edx*4+0x18],ecx

 Block738:
	mov edx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nWeaponID
	mov dword ptr [ebp-0xBD4],eax
	lea eax,[ebp-0x1270]
	push eax
	call TSingleton<CWvsContext>::GetInstance
	mov ecx,eax
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x1CDC],eax
	mov ecx,dword ptr [ebp-0x1CDC]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0xBB4],eax
	lea ecx,[ebp-0x1270]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp dword ptr [ebp-0xBD4],0
	je Block741

 Block739:
	mov ecx,dword ptr [ebp-0xBB4]
	add ecx,0x151
	call ZRef<GW_ItemSlotBase>::op_arrow
	add eax,0xC
	mov ecx,eax
	call TSecType<long>::op_t
	cmp dword ptr [ebp-0xBD4],eax
	je Block741

 Block740:
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov dword ptr [edx+ecx*4+0x18],0
	mov eax,dword ptr [ebp-0xBC4]
	push eax
	mov ecx,dword ptr [ebp-0xBD0]
	push ecx
	mov edx,dword ptr [ebp-0xBC8]
	push edx
	push 0
	mov eax,dword ptr [ebp-0xBB8]
	push eax
	mov ecx,dword ptr [ebp-0x194]
	push ecx
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1274],esp
	lea edx,[ebp-0xBCC]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1CE0],eax
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax+0x94]
	push ecx
	mov edx,dword ptr [eax+0x90]
	push edx
	mov eax,dword ptr [ebp-0xBB0]
	push eax
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx+ecx*4+0x54]
	push eax
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx+ecx*4+0x18]
	push eax
	mov ecx,dword ptr [ebp-0x3C]
	push ecx
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx+4]
	push eax
	mov ecx,dword ptr [ebp-0xBA8]
	mov edx,dword ptr [ebp-0x120]
	add edx,dword ptr [ecx+0x10]
	add edx,dword ptr [ebp-0xBBC]
	push edx
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetCharacterId
	push eax
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	call CMob::AddDamageInfo
	jmp Block742

 Block741:
	mov edx,dword ptr [ebp-0xBC4]
	push edx
	mov eax,dword ptr [ebp-0xBD0]
	push eax
	mov ecx,dword ptr [ebp-0xBC8]
	push ecx
	push 0
	mov edx,dword ptr [ebp-0xBB8]
	push edx
	mov eax,dword ptr [ebp-0x194]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1278],esp
	lea edx,[ebp-0xBCC]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1CE4],eax
	mov eax,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [eax+0x94]
	push ecx
	mov edx,dword ptr [eax+0x90]
	push edx
	mov eax,dword ptr [ebp-0xBB0]
	push eax
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx+ecx*4+0x54]
	push eax
	mov ecx,dword ptr [ebp-0xBB0]
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx+ecx*4+0x18]
	push eax
	mov ecx,dword ptr [ebp-0x3C]
	push ecx
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx+4]
	push eax
	mov ecx,dword ptr [ebp-0xBA8]
	mov edx,dword ptr [ebp-0x120]
	add edx,dword ptr [ecx+0x10]
	add edx,dword ptr [ebp-0xBBC]
	push edx
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetCharacterId
	push eax
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	call CMob::AddDamageInfo

 Block742:
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0xBCC]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block601

 Block743:
	mov edx,dword ptr [ebp-0x24]
	push edx
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x14C]
	push ecx
	mov edx,dword ptr [ebp-0x7C]
	push edx
	mov eax,dword ptr [ebp-0x40]
	push eax
	mov ecx,dword ptr [ebp-0xBA8]
	mov ecx,dword ptr [ecx]
	call CMob::GetMobStat
	push eax
	push 0
	call CalcDamage::GetCounterDamage
	add esp,0x1C
	mov dword ptr [ebp-0xBAC],eax
	cmp dword ptr [ebp-0xBAC],0
	je Block747

 Block744:
	cmp dword ptr [ebp+0x14],0
	jne Block747

 Block745:
	mov ecx,dword ptr [ebp-0x30]
	call CWvsContext::IsAdminAccount
	test eax,eax
	jne Block747

 Block746:
	mov edx,dword ptr [ebp-0xBAC]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::ShowCounterDamage

 Block747:
	mov eax,dword ptr [ebp-0x24]
	push eax
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	mov edx,dword ptr [ebp-0x14C]
	push edx
	mov eax,dword ptr [ebp-0x7C]
	push eax
	mov ecx,dword ptr [ebp-0x40]
	push ecx
	mov edx,dword ptr [ebp-0xBA8]
	mov eax,dword ptr [edx]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::TryDoingItemSkill
	jmp Block593

 Block748:
	push 0x5F
	mov ecx,dword ptr [ebp-0x24]
	imul ecx,0x18
	add ecx,offset ActionData::m_saCharacterActions+12
	push ecx
	call GETCRC32Svr_long
	add esp,8
	mov dword ptr [ebp-0x80],eax
	jmp Block750

 Block750:
	mov dword ptr [ebp-0x1E4],0x19DEA1BD
	mov dword ptr [ebp-0x10],0xBE02FF0A
	push 0
	lea edx,[ebp-0x10]
	push edx
	lea eax,[ebp-0x1F4]
	push eax
	call DR_check
	add esp,0xC
	mov dword ptr [ebp-0x19C],eax
	push 0x2F
	lea ecx,[ebp-0x134]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],0x16
	call get_field
	mov ecx,eax
	call CField::GetFieldKey
	movzx ecx,al
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1F4]
	not edx
	push edx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1F0]
	not eax
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x7C]
	shl ecx,4
	or ecx,dword ptr [ebp-0x14C]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1EC]
	not edx
	push edx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1E8]
	not eax
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x1B0]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x54]
	movzx eax,byte ptr [edx+0x539]
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	push 0
	mov ecx,dword ptr [ebp-0x1F4]
	push ecx
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0x78],eax
	mov edx,dword ptr [ebp-0x78]
	push edx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	push 0
	push 0
	push 0
	mov eax,dword ptr [ebp-0x78]
	push eax
	push 4
	lea ecx,[ebp-0x19C]
	push ecx
	call CCrc32::GetCrc32
	add esp,0x18
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	cmp dword ptr [ebp+8],0
	je Block752

 Block751:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1694]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x1CE8],eax
	mov eax,dword ptr [ebp-0x1CE8]
	mov dword ptr [ebp-0x1CEC],eax
	mov byte ptr [ebp-4],0x17
	mov ecx,dword ptr [ebp-0x1B44]
	or ecx,2
	mov dword ptr [ebp-0x1B44],ecx
	mov ecx,dword ptr [ebp-0x1CEC]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x1CF0],eax
	jmp Block753

 Block752:
	mov dword ptr [ebp-0x1CF0],0

 Block753:
	mov edx,dword ptr [ebp-0x1CF0]
	mov dword ptr [ebp-0x58],edx
	mov dword ptr [ebp-4],0x16
	mov eax,dword ptr [ebp-0x1B44]
	and eax,2
	je Block755

 Block754:
	and dword ptr [ebp-0x1B44],0xFFFFFFFD
	lea ecx,[ebp-0x1694]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block755:
	cmp dword ptr [ebp+8],0
	je Block757

 Block756:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1AB0]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x1CF4],eax
	mov edx,dword ptr [ebp-0x1CF4]
	mov dword ptr [ebp-0x1CF8],edx
	mov byte ptr [ebp-4],0x18
	mov eax,dword ptr [ebp-0x1B44]
	or eax,4
	mov dword ptr [ebp-0x1B44],eax
	mov ecx,dword ptr [ebp-0x1CF8]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x1CFC],eax
	jmp Block758

 Block757:
	mov dword ptr [ebp-0x1CFC],0

 Block758:
	mov ecx,dword ptr [ebp-0x1CFC]
	mov dword ptr [ebp-0x124],ecx
	mov dword ptr [ebp-4],0x16
	mov edx,dword ptr [ebp-0x1B44]
	and edx,4
	je Block760

 Block759:
	and dword ptr [ebp-0x1B44],0xFFFFFFFB
	lea ecx,[ebp-0x1AB0]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block760:
	mov eax,dword ptr [ebp-0x58]
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x124]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x1B0]
	push edx
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block762

 Block761:
	mov eax,dword ptr [ebp+0x1C]
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4

 Block762:
	mov ecx,dword ptr [ebp-0x2C]
	shl ecx,7
	xor edx,edx
	cmp dword ptr [ebp+0x14],0
	setne dl
	shl edx,5
	or ecx,edx
	mov eax,dword ptr [ebp-0x50]
	shl eax,4
	or ecx,eax
	mov edx,dword ptr [ebp-0x1BC]
	shl edx,3
	or ecx,edx
	or ecx,dword ptr [ebp-0x13C]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp-0x3C]
	shl eax,0xF
	mov ecx,dword ptr [ebp-0x24]
	and ecx,0x7FFF
	or eax,ecx
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	mov edx,dword ptr [ebp-0x80]
	push edx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	movzx eax,byte ptr [ebp-0x1A4]
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	movzx ecx,byte ptr [ebp-0x1D0]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x40]
	push edx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	call get_skill_root_from_skill
	add esp,4
	push eax
	call is_bmage_job
	add esp,4
	test eax,eax
	je Block764

 Block763:
	mov ecx,dword ptr [ebp-0x48]
	mov dword ptr [ebp-0x1D00],ecx
	jmp Block765

 Block764:
	mov edx,dword ptr [ebp-0x1FC]
	mov dword ptr [ebp-0x1D00],edx

 Block765:
	mov eax,dword ptr [ebp-0x1D00]
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	jmp Block767

 Block767:
	lea ecx,[ebp-0x1CC]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov dword ptr [ebp-0x1B4],0
	mov dword ptr [ebp-0x1C4],0x7FFFFFFF
	mov dword ptr [ebp-0xB58],0
	jmp Block769

 Block768:
	mov eax,dword ptr [ebp-0xB58]
	add eax,1
	mov dword ptr [ebp-0xB58],eax

 Block769:
	mov ecx,dword ptr [ebp-0xB58]
	cmp ecx,dword ptr [ebp-0x7C]
	jge Block785

 Block770:
	mov edx,dword ptr [ebp-0xB58]
	imul edx,0x98
	lea eax,[ebp+edx-0xAEC]
	mov dword ptr [ebp-0xBF8],eax
	lea ecx,[ebp-0xC00]
	push ecx
	mov edx,dword ptr [ebp-0xBF8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [ecx]
	add ecx,4
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [ebp-0xC00]
	sub ecx,dword ptr [ebp-0x1CC]
	mov dword ptr [ebp-0x1E0],ecx
	mov edx,dword ptr [ebp-0xBFC]
	sub edx,dword ptr [ebp-0x1C8]
	mov dword ptr [ebp-0x14],edx
	mov eax,dword ptr [ebp-0x1E0]
	imul eax,dword ptr [ebp-0x1E0]
	mov ecx,dword ptr [ebp-0x14]
	imul ecx,dword ptr [ebp-0x14]
	add eax,ecx
	mov dword ptr [ebp-0xC04],eax
	mov edx,dword ptr [ebp-0xC04]
	cmp edx,dword ptr [ebp-0x1C4]
	jge Block772

 Block771:
	mov eax,dword ptr [ebp-0xC04]
	mov dword ptr [ebp-0x1C4],eax
	mov ecx,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [ecx]
	call CMob::GetMobID
	mov dword ptr [ebp-0x1B4],eax

 Block772:
	mov edx,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [edx]
	call CMob::GetMobID
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0xBF8]
	movzx ecx,byte ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [edx]
	call CMob::IsLeft
	shl eax,7
	mov ecx,dword ptr [ebp-0xBF8]
	mov edx,dword ptr [ecx+8]
	and edx,0x7F
	or eax,edx
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp-0xBF8]
	movzx ecx,byte ptr [eax+0xC]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [edx]
	call CMob::GetCurTemplate
	test eax,eax
	je Block775

 Block773:
	mov eax,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov esi,eax
	mov ecx,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [ecx]
	call CMob::GetCurTemplate
	cmp esi,eax
	je Block775

 Block774:
	mov dword ptr [ebp-0x1D04],1
	jmp Block776

 Block775:
	mov dword ptr [ebp-0x1D04],0

 Block776:
	mov esi,dword ptr [ebp-0x1D04]
	shl esi,7
	mov edx,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [edx]
	call CMob::GetCalcDamageStatIndex
	and eax,0x7F
	or esi,eax
	push esi
	lea ecx,[ebp-0x134]
	call COutPacket::Encode1
	lea eax,[ebp-0x1AB8]
	push eax
	mov ecx,dword ptr [ebp-0xBF8]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [eax]
	add ecx,4
	mov edx,dword ptr [edx+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	lea edx,[ebp-0x1AC0]
	push edx
	mov eax,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0xBF8]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	lea edx,[ebp-0x1AC8]
	push edx
	mov eax,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0xBF8]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	lea edx,[ebp-0x1AD0]
	push edx
	mov eax,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0xBF8]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	mov edx,dword ptr [ebp-0xBF8]
	movzx eax,word ptr [edx+0x10]
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	mov dword ptr [ebp-0xC08],0
	jmp Block778

 Block777:
	mov ecx,dword ptr [ebp-0xC08]
	add ecx,1
	mov dword ptr [ebp-0xC08],ecx

 Block778:
	mov edx,dword ptr [ebp-0xC08]
	cmp edx,dword ptr [ebp-0x14C]
	jge Block784

 Block779:
	mov eax,dword ptr [ebp-0xC08]
	mov ecx,dword ptr [ebp-0xBF8]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	call TSingleton<CDamageMeter>::IsInstantiated
	test eax,eax
	je Block781

 Block780:
	mov eax,dword ptr [ebp-0xC08]
	mov ecx,dword ptr [ebp-0xBF8]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CDamageMeter>::GetInstance
	mov ecx,eax
	call CDamageMeter::AddDamageInfo

 Block781:
	call TSingleton<CBattleRecordMan>::IsInstantiated
	test eax,eax
	je Block783

 Block782:
	push 0
	mov eax,dword ptr [ebp-0xC08]
	mov ecx,dword ptr [ebp-0xBF8]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0xC08]
	mov ecx,dword ptr [ebp-0xBF8]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CBattleRecordMan>::GetInstance
	mov ecx,eax
	call CBattleRecordMan::SetBattleDamageInfo

 Block783:
	jmp Block777

 Block784:
	mov eax,dword ptr [ebp-0xBF8]
	mov ecx,dword ptr [eax]
	call CMob::GetCrc
	push eax
	lea ecx,[ebp-0x134]
	call COutPacket::Encode4
	jmp Block768

 Block785:
	mov ecx,dword ptr [ebp-0x1B4]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::SetTargetID
	lea edx,[ebp-0x1AD8]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	lea edx,[ebp-0x1AE0]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov eax,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	cmp dword ptr [ebp-0x1B0],0xD7511E
	jne Block788

 Block786:
	cmp dword ptr [ebp+0x20],0
	je Block788

 Block787:
	lea edx,[ebp-0x1AE8]
	push edx
	mov eax,dword ptr [ebp+0x20]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp+0x20]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2
	lea edx,[ebp-0x1AF0]
	push edx
	mov eax,dword ptr [ebp+0x20]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp+0x20]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x134]
	call COutPacket::Encode2

 Block788:
	lea edx,[ebp-0x134]
	push edx
	call SendPacket
	add esp,4
	cmp dword ptr [ebp+8],0
	je Block794

 Block789:
	cmp dword ptr [ebp+0x14],0
	jne Block794

 Block790:
	mov eax,dword ptr [ebp+8]
	cmp dword ptr [eax+0xC],4
	je Block792

 Block791:
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetActionInfo
	mov eax,dword ptr [eax+8]
	sub eax,dword ptr [ebp-0x110]
	cdq
	mov ecx,3
	idiv ecx
	add eax,dword ptr [ebp-0x110]
	push eax
	mov edx,dword ptr [ebp-0x1B0]
	push edx
	mov eax,dword ptr [ebp+8]
	add eax,0x58
	push eax
	mov ecx,dword ptr [ebp-0x54]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::TryRegisterFinalAttack
	jmp Block794

 Block792:
	cmp dword ptr [ebp-0x7C],0
	jle Block794

 Block793:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::GetMobID
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::GetActionInfo
	mov edx,dword ptr [eax+8]
	push edx
	mov eax,dword ptr [ebp-0x1B0]
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::TryRegisterSerialAttack

 Block794:
	cmp dword ptr [ebp-0x2C],0
	je Block798

 Block795:
	cmp dword ptr [ebp-0x1B0],0xE6935E
	je Block798

 Block796:
	cmp dword ptr [ebp-0x7C],0
	je Block798

 Block797:
	mov ecx,dword ptr [ebp-0x40]
	push ecx
	lea edx,[ebp-0xAEC]
	push edx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::TryRegisterSparkAttack

 Block798:
	cmp dword ptr [ebp-0x1B0],0x40413A
	jne Block800

 Block799:
	push 0xC00614A4
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1AF4],esp
	push 0
	call _x_com_ptr<IWzGr2DLayer>::_ctor_zero
	mov dword ptr [ebp-0x1D08],eax
	mov eax,dword ptr [ebp-0x1D08]
	mov dword ptr [ebp-0x1D0C],eax
	mov byte ptr [ebp-4],0x19
	lea ecx,[ebp-0x1AFC]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x1B04]
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,4
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1B08],esp
	push 0
	call _x_com_ptr<IWzVector2D>::_ctor_zero
	mov dword ptr [ebp-0x1D10],eax
	mov ecx,dword ptr [ebp-0x1D10]
	mov dword ptr [ebp-0x1D14],ecx
	mov byte ptr [ebp-4],0x1A
	push 0xB2B
	lea edx,[ebp-0x1B0C]
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [ebp-0x1D18],eax
	mov eax,dword ptr [ebp-0x1D18]
	mov dword ptr [ebp-0x1D1C],eax
	mov byte ptr [ebp-4],0x1B
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	mov ecx,dword ptr [ebp-0x1D1C]
	call ZXString<unsigned short>::op_c_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],0x1C
	mov ecx,eax
	call CAnimationDisplayer::Effect_General
	mov byte ptr [ebp-4],0x16
	lea ecx,[ebp-0x1B0C]
	call ZXString<unsigned short>::~ZXString<unsigned short>
	push 0
	push 0
	push 0
	push 3
	push 0x7FFFFFFF
	push 0x3E8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x1960
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x1B10],esp
	push ecx
	mov ecx,edx
	call _x_com_ptr<IWzGr2DLayer>::_ctor_copy
	mov dword ptr [ebp-0x1D20],eax
	mov eax,dword ptr [ebp-0x1D20]
	mov dword ptr [ebp-0x1D24],eax
	mov byte ptr [ebp-4],0x1D
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1B14],esp
	push ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUser::GetVecCtrl_0
	mov dword ptr [ebp-0x1D28],eax
	mov edx,dword ptr [ebp-0x1D28]
	mov dword ptr [ebp-0x1D2C],edx
	mov byte ptr [ebp-4],0x1E
	push 0xB2C
	lea eax,[ebp-0x1B18]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [ebp-0x1D30],eax
	mov ecx,dword ptr [ebp-0x1D30]
	mov dword ptr [ebp-0x1D34],ecx
	mov byte ptr [ebp-4],0x1F
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	mov ecx,dword ptr [ebp-0x1D34]
	call ZXString<unsigned short>::op_c_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],0x20
	mov ecx,eax
	call CAnimationDisplayer::Effect_SkillUse
	mov byte ptr [ebp-4],0x16
	lea ecx,[ebp-0x1B18]
	call ZXString<unsigned short>::~ZXString<unsigned short>

 Block800:
	cmp dword ptr [ebp+0x14],0x406849
	jne Block802

 Block801:
	push 0x406849
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2B
	push 0x406849
	call play_skill_sound
	add esp,0xC

 Block802:
	cmp dword ptr [ebp+0x14],0x423D0D
	jne Block804

 Block803:
	push 0x423D0D
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2B
	push 0x423D0D
	call play_skill_sound
	add esp,0xC

 Block804:
	cmp dword ptr [ebp-0x1B0],0x40413A
	je Block806

 Block805:
	cmp dword ptr [ebp+0x14],0x406849
	jne Block810

 Block806:
	mov edx,dword ptr [ebp-0x1BA8]
	mov dword ptr [edx+0x3B24],1
	mov eax,dword ptr [ebp-0x1BA8]
	mov dword ptr [eax+0x3B28],0
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x144]
	mov dword ptr [ecx+0x3B2C],edx
	mov eax,dword ptr [ebp-0x140]
	mov dword ptr [ecx+0x3B30],eax
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x120]
	mov dword ptr [ecx+0x3B34],edx
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [eax+0x3B34]
	add ecx,1
	mov edx,dword ptr [ebp-0x1BA8]
	mov dword ptr [edx+0x3B38],ecx
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov dword ptr [ebp-0xC0C],eax
	cmp dword ptr [ebp-0x1B0],0x40413A
	jne Block808

 Block807:
	push 6
	mov ecx,dword ptr [ebp-0xC0C]
	call CVecCtrl::SetMovePathAttribute
	jmp Block810

 Block808:
	cmp dword ptr [ebp+0x14],0x406849
	jne Block810

 Block809:
	push 7
	mov ecx,dword ptr [ebp-0xC0C]
	call CVecCtrl::SetMovePathAttribute

 Block810:
	cmp dword ptr [ebp-0x1B0],0x111AEE
	je Block813

 Block811:
	cmp dword ptr [ebp-0x1B0],0x12A18F
	je Block813

 Block812:
	cmp dword ptr [ebp-0x1B0],0x14282B
	jne Block821

 Block813:
	cmp dword ptr [ebp-0x7C],0
	jle Block821

 Block814:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [eax+0x3B44],ecx
	cmp dword ptr [ebp-0x3C],0
	je Block816

 Block815:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D38],eax
	jmp Block817

 Block816:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D38],eax

 Block817:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	mov ecx,dword ptr [ebp-0x1D38]
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	cmp dword ptr [ebp-0x3C],0
	je Block819

 Block818:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D3C],eax
	jmp Block820

 Block819:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D3C],eax

 Block820:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0xB4
	mov ecx,dword ptr [ebp-0x1D3C]
	push ecx
	push 2
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov edx,dword ptr [ebp-0x120]
	add edx,0x6EA
	mov eax,dword ptr [ebp-0x1BA8]
	mov dword ptr [eax+0x3B60],edx
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block821:
	cmp dword ptr [ebp-0x1B0],0x21612AB
	jne Block827

 Block822:
	cmp dword ptr [ebp-0x7C],0
	jle Block827

 Block823:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	cmp dword ptr [ebp-0x3C],0
	je Block825

 Block824:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,3
	add eax,edx
	sar eax,2
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D40],eax
	jmp Block826

 Block825:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,3
	add eax,edx
	sar eax,2
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D40],eax

 Block826:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x276
	mov edx,dword ptr [ebp-0x1D40]
	push edx
	push 2
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov eax,dword ptr [ebp-0x120]
	add eax,0x384
	mov ecx,dword ptr [ebp-0x1BA8]
	mov dword ptr [ecx+0x3B60],eax
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block827:
	cmp dword ptr [ebp-0x1B0],0x41EEE9
	jne Block832

 Block828:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [ebp-0x1B0]
	mov dword ptr [edx+0x3B44],eax
	mov dword ptr [ebp-0xC10],0xC69620
	mov ecx,dword ptr [ebp-0xC10]
	mov edx,dword ptr [ecx+0xC]
	sub edx,0x1E0
	mov dword ptr [ebp-0xC18],edx
	mov dword ptr [ebp-0xC14],0x1E0
	mov eax,dword ptr [ebp-0xC18]
	cdq
	mov ecx,0x1E
	idiv ecx
	sub eax,1
	mov dword ptr [ebp-0xC1C],eax
	cmp dword ptr [ebp-0x3C],0
	je Block830

 Block829:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC1C]
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D44],eax
	jmp Block831

 Block830:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC1C]
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D44],eax

 Block831:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	mov ecx,dword ptr [ebp-0xC18]
	push ecx
	mov edx,dword ptr [ebp-0x1D44]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	mov eax,dword ptr [ebp-0xC14]
	push eax
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0x120]
	add ecx,dword ptr [ebp-0xC18]
	mov edx,dword ptr [ebp-0xC14]
	lea eax,[ecx+edx+0x78]
	mov ecx,dword ptr [ebp-0x1BA8]
	mov dword ptr [ecx+0x3B60],eax
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block832:
	cmp dword ptr [ebp-0x1B0],0x41C7DB
	jne Block850

 Block833:
	cmp dword ptr [ebp-0x7C],0
	jle Block850

 Block834:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [ebp-0x1B0]
	mov dword ptr [edx+0x3B44],eax
	push 0x41C7DB
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::GetSkillLevel
	mov dword ptr [ebp-0xC24],eax
	mov dword ptr [ebp-0xC20],0
	mov dword ptr [ebp-0xC44],1
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1B34],esp
	push offset _S_
	call Ztl_bstr_t::_ctor_1
	mov dword ptr [ebp-0x1D48],eax
	push 0
	push 0
	lea ecx,[ebp-0x1B30]
	call ACTIONDATA::_ctor_1
	mov dword ptr [ebp-0x1D4C],eax
	mov ecx,dword ptr [ebp-0x1D4C]
	mov dword ptr [ebp-0x1D50],ecx
	mov byte ptr [ebp-4],0x21
	mov edx,dword ptr [ebp-0x1D50]
	push edx
	lea ecx,[ebp-0xC3C]
	call ACTIONDATA::_ctor_0
	mov byte ptr [ebp-4],0x22
	lea eax,[ebp-0xC3C]
	mov dword ptr [ebp-0xC40],eax
	mov byte ptr [ebp-4],0x23
	lea ecx,[ebp-0x1B30]
	call ACTIONDATA::~ACTIONDATA
	cmp dword ptr [ebp-0xC24],0
	jle Block837

 Block835:
	cmp dword ptr [ebp-0xC24],0xB
	jge Block837

 Block836:
	push 0xC6A058
	mov ecx,dword ptr [ebp-0xC40]
	call ACTIONDATA::operator=
	jmp Block840

 Block837:
	cmp dword ptr [ebp-0xC24],0xA
	jle Block840

 Block838:
	cmp dword ptr [ebp-0xC24],0x15
	jge Block840

 Block839:
	push 0xC6A070
	mov ecx,dword ptr [ebp-0xC40]
	call ACTIONDATA::operator=

 Block840:
	cmp dword ptr [ebp-0xC24],0xA
	jle Block842

 Block841:
	mov ecx,dword ptr [ebp-0xC40]
	mov edx,dword ptr [ecx+0xC]
	sub edx,0x96
	mov dword ptr [ebp-0xC20],edx
	jmp Block843

 Block842:
	mov eax,dword ptr [ebp-0xC40]
	mov ecx,dword ptr [eax+0xC]
	mov dword ptr [ebp-0xC20],ecx

 Block843:
	mov eax,dword ptr [ebp-0xC20]
	cdq
	mov ecx,0x1E
	idiv ecx
	sub eax,1
	mov dword ptr [ebp-0xC44],eax
	cmp dword ptr [ebp-0x3C],0
	je Block845

 Block844:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC44]
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D54],eax
	jmp Block846

 Block845:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC44]
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D54],eax

 Block846:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	mov ecx,dword ptr [ebp-0xC20]
	push ecx
	mov edx,dword ptr [ebp-0x1D54]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	cmp dword ptr [ebp-0xC24],0xA
	jle Block848

 Block847:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor eax,eax
	cmp dword ptr [ebp-0x3C],0
	sete al
	lea eax,[eax*8-4]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov ecx,dword ptr [ebp-0x3C]
	neg ecx
	sbb ecx,ecx
	and ecx,0
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor edx,edx
	cmp dword ptr [ebp-0x3C],0
	sete dl
	lea edx,[edx*4-2]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov eax,dword ptr [ebp-0x3C]
	neg eax
	sbb eax,eax
	and eax,0
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor ecx,ecx
	cmp dword ptr [ebp-0x3C],0
	sete cl
	lea ecx,[ecx+ecx-1]
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	jmp Block849

 Block848:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x96
	mov edx,dword ptr [ebp-0x3C]
	neg edx
	sbb edx,edx
	and edx,0
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem

 Block849:
	mov eax,dword ptr [ebp-0xC20]
	mov ecx,dword ptr [ebp-0x120]
	lea edx,[ecx+eax+0x1FE]
	mov eax,dword ptr [ebp-0x1BA8]
	mov dword ptr [eax+0x3B60],edx
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser
	mov byte ptr [ebp-4],0x16
	lea ecx,[ebp-0xC3C]
	call ACTIONDATA::~ACTIONDATA

 Block850:
	cmp dword ptr [ebp-0x1B0],0x423D0A
	jne Block862

 Block851:
	cmp dword ptr [ebp-0x7C],0
	jle Block862

 Block852:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	mov dword ptr [ebp-0xC4C],0xC6A160
	mov dword ptr [ebp-0xC54],0x96
	mov eax,dword ptr [ebp-0xC4C]
	mov ecx,dword ptr [eax+0xC]
	sub ecx,dword ptr [ebp-0xC54]
	mov dword ptr [ebp-0xC50],ecx
	mov eax,dword ptr [ebp-0xC54]
	cdq
	mov ecx,0x1E
	idiv ecx
	sub eax,1
	mov dword ptr [ebp-0xC58],eax
	cmp dword ptr [ebp-0x3C],0
	je Block854

 Block853:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC58]
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D58],eax
	jmp Block855

 Block854:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC58]
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D58],eax

 Block855:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	mov ecx,dword ptr [ebp-0xC54]
	push ecx
	mov edx,dword ptr [ebp-0x1D58]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov dword ptr [ebp-0xC48],8

 Block856:
	cmp dword ptr [ebp-0xC54],0
	jle Block861

 Block857:
	cmp dword ptr [ebp-0x3C],0
	je Block859

 Block858:
	mov eax,dword ptr [ebp-0xC48]
	neg eax
	mov dword ptr [ebp-0x1D5C],eax
	jmp Block860

 Block859:
	mov ecx,dword ptr [ebp-0xC48]
	mov dword ptr [ebp-0x1D5C],ecx

 Block860:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov edx,dword ptr [ebp-0x1D5C]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov eax,dword ptr [ebp-0xC48]
	sub eax,2
	push eax
	push 0
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0xC48],eax
	mov ecx,dword ptr [ebp-0xC54]
	sub ecx,0x3C
	mov dword ptr [ebp-0xC54],ecx
	jmp Block856

 Block861:
	mov edx,dword ptr [ebp-0x120]
	add edx,dword ptr [ebp-0xC54]
	add edx,dword ptr [ebp-0xC50]
	mov eax,dword ptr [ebp-0x1BA8]
	mov dword ptr [eax+0x3B60],edx
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block862:
	cmp dword ptr [ebp-0x1B0],0x4215F8
	jne Block868

 Block863:
	cmp dword ptr [ebp-0x7C],0
	jle Block868

 Block864:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	mov dword ptr [ebp-0xC60],0xC6A088
	mov eax,dword ptr [ebp-0xC60]
	mov ecx,dword ptr [eax+0xC]
	sub ecx,0x96
	mov dword ptr [ebp-0xC5C],ecx
	mov eax,dword ptr [ebp-0xC5C]
	cdq
	mov ecx,0x1E
	idiv ecx
	sub eax,1
	mov dword ptr [ebp-0xC64],eax
	cmp dword ptr [ebp-0x3C],0
	je Block866

 Block865:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC64]
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D60],eax
	jmp Block867

 Block866:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	idiv dword ptr [ebp-0xC64]
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D60],eax

 Block867:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	mov ecx,dword ptr [ebp-0xC5C]
	push ecx
	mov edx,dword ptr [ebp-0x1D60]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor eax,eax
	cmp dword ptr [ebp-0x3C],0
	sete al
	lea eax,[eax*8-4]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov ecx,dword ptr [ebp-0x3C]
	neg ecx
	sbb ecx,ecx
	and ecx,0
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor edx,edx
	cmp dword ptr [ebp-0x3C],0
	sete dl
	lea edx,[edx*4-2]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov eax,dword ptr [ebp-0x3C]
	neg eax
	sbb eax,eax
	and eax,0
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor ecx,ecx
	cmp dword ptr [ebp-0x3C],0
	sete cl
	lea ecx,[ecx+ecx-1]
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov edx,dword ptr [ebp-0xC5C]
	mov eax,dword ptr [ebp-0x120]
	lea ecx,[eax+edx+0x1FE]
	mov edx,dword ptr [ebp-0x1BA8]
	mov dword ptr [edx+0x3B60],ecx
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block868:
	cmp dword ptr [ebp-0x1B0],0x4215FD
	jne Block879

 Block869:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [eax+0x3B44],ecx
	cmp dword ptr [ebp-0x3C],0
	je Block871

 Block870:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	mov esi,eax
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	sub esi,eax
	mov eax,esi
	cdq
	mov ecx,9
	idiv ecx
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D64],eax
	jmp Block872

 Block871:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	mov esi,eax
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	sub esi,eax
	mov eax,esi
	cdq
	mov ecx,9
	idiv ecx
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D64],eax

 Block872:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x10E
	mov edx,dword ptr [ebp-0x1D64]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	cmp dword ptr [ebp-0x3C],0
	je Block874

 Block873:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	cdq
	mov ecx,5
	idiv ecx
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D68],eax
	jmp Block875

 Block874:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	cdq
	mov ecx,5
	idiv ecx
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D68],eax

 Block875:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x96
	mov edx,dword ptr [ebp-0x1D68]
	push edx
	push 2
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1F4
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov eax,dword ptr [ebp-0x120]
	add eax,0x780
	mov ecx,dword ptr [ebp-0x1BA8]
	mov dword ptr [ecx+0x3B60],eax
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser
	mov dword ptr [ebp-0xC68],0
	jmp Block877

 Block876:
	mov edx,dword ptr [ebp-0xC68]
	add edx,1
	mov dword ptr [ebp-0xC68],edx

 Block877:
	mov eax,dword ptr [ebp-0xC68]
	cmp eax,dword ptr [ebp-0x7C]
	jge Block879

 Block878:
	push 0xFFFFFFFF
	lea ecx,[ebp-0x1B3C]
	push ecx
	mov edx,dword ptr [ebp-0xC68]
	imul edx,0x98
	mov eax,dword ptr [ebp+edx-0xAEC]
	mov ecx,dword ptr [ebp-0xC68]
	imul ecx,0x98
	mov ecx,dword ptr [ebp+ecx-0xAEC]
	add ecx,4
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	push eax
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x3B64
	call ZArray<tagPOINT>::Insert
	jmp Block876

 Block879:
	cmp dword ptr [ebp-0x1B0],0x4DD5CC
	je Block881

 Block880:
	cmp dword ptr [ebp-0x1B0],0xE66C4B
	jne Block883

 Block881:
	cmp dword ptr [ebp-0x7C],0
	jle Block883

 Block882:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov eax,dword ptr [ebp-0x3C]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFF26
	add eax,0x6D
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov ecx,dword ptr [ebp-0x3C]
	neg ecx
	sbb ecx,ecx
	and ecx,0xFFFFFFEE
	add ecx,9
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov edx,dword ptr [ebp-0x3C]
	neg edx
	sbb edx,edx
	and edx,0xFFFFFFF4
	add edx,6
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor eax,eax
	cmp dword ptr [ebp-0x3C],0
	sete al
	lea eax,[eax*8-4]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor ecx,ecx
	cmp dword ptr [ebp-0x3C],0
	sete cl
	lea ecx,[ecx*4-2]
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0xF0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov edx,dword ptr [ebp-0x120]
	add edx,0x604
	mov eax,dword ptr [ebp-0x1BA8]
	mov dword ptr [eax+0x3B60],edx
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block883:
	cmp dword ptr [ebp-0x1B0],0x4DD5CA
	jne Block886

 Block884:
	cmp dword ptr [ebp-0x7C],0
	jle Block886

 Block885:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov eax,dword ptr [ebp-0x3C]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFF10
	add eax,0x78
	neg eax
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov ecx,dword ptr [ebp-0x3C]
	neg ecx
	sbb ecx,ecx
	and ecx,0xFFFFFFF4
	add ecx,6
	neg ecx
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor edx,edx
	cmp dword ptr [ebp-0x3C],0
	sete dl
	lea edx,[edx*4-2]
	neg edx
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	xor eax,eax
	cmp dword ptr [ebp-0x3C],0
	sete al
	lea eax,[eax+eax-1]
	neg eax
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0x120]
	add ecx,0x3C0
	mov edx,dword ptr [ebp-0x1BA8]
	mov dword ptr [edx+0x3B60],ecx
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block886:
	cmp dword ptr [ebp-0x1B0],0x4E23EF
	je Block888

 Block887:
	cmp dword ptr [ebp-0x1B0],0xE6935C
	jne Block893

 Block888:
	cmp dword ptr [ebp-0x7C],0
	jle Block893

 Block889:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [eax+0x3B44],ecx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x2D0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsPosFixed
	test eax,eax
	je Block891

 Block890:
	mov dword ptr [ebp-0x1D6C],0
	jmp Block892

 Block891:
	mov edx,dword ptr [ebp-0x3C]
	neg edx
	sbb edx,edx
	and edx,0xFFFFFFE4
	add edx,0xE
	mov dword ptr [ebp-0x1D6C],edx

 Block892:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov eax,dword ptr [ebp-0x1D6C]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x4CE
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block893:
	cmp dword ptr [ebp-0x1B0],0x1406F42
	je Block895

 Block894:
	cmp dword ptr [ebp-0x1B0],0x1312D0E
	jne Block901

 Block895:
	cmp dword ptr [ebp-0x7C],0
	jle Block901

 Block896:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsRisingByToss
	test eax,eax
	jne Block901

 Block897:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0xF0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsPosFixed
	test eax,eax
	je Block899

 Block898:
	mov dword ptr [ebp-0x1D70],0
	jmp Block900

 Block899:
	mov eax,dword ptr [ebp-0x3C]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFE2
	add eax,0xF
	mov dword ptr [ebp-0x1D70],eax

 Block900:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov ecx,dword ptr [ebp-0x1D70]
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block901:
	cmp dword ptr [ebp-0x1B0],0x141F5E1
	je Block903

 Block902:
	cmp dword ptr [ebp-0x1B0],0x1312D0F
	jne Block909

 Block903:
	cmp dword ptr [ebp-0x7C],0
	jle Block909

 Block904:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsRisingByToss
	test eax,eax
	jne Block909

 Block905:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [ebp-0x1B0]
	mov dword ptr [edx+0x3B44],eax
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x96
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsPosFixed
	test eax,eax
	je Block907

 Block906:
	mov dword ptr [ebp-0x1D74],0
	jmp Block908

 Block907:
	mov ecx,dword ptr [ebp-0x3C]
	neg ecx
	sbb ecx,ecx
	and ecx,0xFFFFFFE2
	add ecx,0xF
	mov dword ptr [ebp-0x1D74],ecx

 Block908:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov edx,dword ptr [ebp-0x1D74]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block909:
	cmp dword ptr [ebp-0x1B0],0x1421CF7
	jne Block916

 Block910:
	cmp dword ptr [ebp-0x7C],0
	jle Block916

 Block911:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsRisingByToss
	test eax,eax
	jne Block916

 Block912:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [eax+0x3B44],ecx
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsPosFixed
	test eax,eax
	je Block914

 Block913:
	mov dword ptr [ebp-0x1D78],0
	jmp Block915

 Block914:
	mov edx,dword ptr [ebp-0x3C]
	neg edx
	sbb edx,edx
	and edx,0xFFFFFFE2
	add edx,0xF
	mov dword ptr [ebp-0x1D78],edx

 Block915:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov eax,dword ptr [ebp-0x1D78]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem

 Block916:
	cmp dword ptr [ebp-0x1B0],0x1421CF8
	jne Block923

 Block917:
	cmp dword ptr [ebp-0x7C],0
	jle Block923

 Block918:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsRisingByToss
	test eax,eax
	jne Block923

 Block919:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x96
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsPosFixed
	test eax,eax
	je Block921

 Block920:
	mov dword ptr [ebp-0x1D7C],0
	jmp Block922

 Block921:
	mov eax,dword ptr [ebp-0x3C]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFE2
	add eax,0xF
	mov dword ptr [ebp-0x1D7C],eax

 Block922:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov ecx,dword ptr [ebp-0x1D7C]
	push ecx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block923:
	cmp dword ptr [ebp-0x1B0],0x1424409
	jne Block930

 Block924:
	cmp dword ptr [ebp-0x7C],0
	jle Block930

 Block925:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsRisingByToss
	test eax,eax
	jne Block930

 Block926:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov edx,dword ptr [ebp-0x1BA8]
	mov eax,dword ptr [ebp-0x1B0]
	mov dword ptr [edx+0x3B44],eax
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsPosFixed
	test eax,eax
	je Block928

 Block927:
	mov dword ptr [ebp-0x1D80],0
	jmp Block929

 Block928:
	mov ecx,dword ptr [ebp-0x3C]
	neg ecx
	sbb ecx,ecx
	and ecx,0xFFFFFFE2
	add ecx,0xF
	mov dword ptr [ebp-0x1D80],ecx

 Block929:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov edx,dword ptr [ebp-0x1D80]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem

 Block930:
	cmp dword ptr [ebp-0x1B0],0x142440A
	jne Block937

 Block931:
	cmp dword ptr [ebp-0x7C],0
	jle Block937

 Block932:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsRisingByToss
	test eax,eax
	jne Block937

 Block933:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [eax+0x3B44],ecx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x96
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsPosFixed
	test eax,eax
	je Block935

 Block934:
	mov dword ptr [ebp-0x1D84],0
	jmp Block936

 Block935:
	mov edx,dword ptr [ebp-0x3C]
	neg edx
	sbb edx,edx
	and edx,0xFFFFFFE2
	add edx,0xF
	mov dword ptr [ebp-0x1D84],edx

 Block936:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E
	mov eax,dword ptr [ebp-0x1D84]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block937:
	cmp dword ptr [ebp-0x1B0],0x141F5E2
	jne Block947

 Block938:
	cmp dword ptr [ebp-0x7C],0
	jle Block947

 Block939:
	mov ecx,dword ptr [ebp-0xAEC]
	call CMob::IsRisingByToss
	test eax,eax
	jne Block947

 Block940:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov ecx,dword ptr [ebp-0x1BA8]
	mov edx,dword ptr [ebp-0x1B0]
	mov dword ptr [ecx+0x3B44],edx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x3C
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	cmp dword ptr [ebp-0x3C],0
	je Block942

 Block941:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D88],eax
	jmp Block943

 Block942:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D88],eax

 Block943:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x5A
	mov edx,dword ptr [ebp-0x1D88]
	push edx
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	cmp dword ptr [ebp-0x3C],0
	je Block945

 Block944:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D8C],eax
	jmp Block946

 Block945:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	cdq
	and edx,7
	add eax,edx
	sar eax,3
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D8C],eax

 Block946:
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0xB4
	mov edx,dword ptr [ebp-0x1D8C]
	push edx
	push 2
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block947:
	cmp dword ptr [ebp-0x1B0],0x1F93BDA
	jne Block956

 Block948:
	cmp dword ptr [ebp-0x7C],0
	jle Block956

 Block949:
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::BeRushValid
	mov eax,dword ptr [ebp-0x1BA8]
	mov ecx,dword ptr [ebp-0x1B0]
	mov dword ptr [eax+0x3B44],ecx
	sub esp,8
	fldz
	fstp qword ptr [esp]
	push 0x1E0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov dword ptr [ebp-0xC78],0x14
	cmp dword ptr [ebp-0x3C],0
	je Block951

 Block950:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	shl eax,1
	cdq
	idiv dword ptr [ebp-0xC78]
	push eax
	call abs_0
	add esp,4
	neg eax
	mov dword ptr [ebp-0x1D90],eax
	jmp Block952

 Block951:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	mov ecx,eax
	call SECRECT::_ZtlSecureGet_left
	shl eax,1
	cdq
	idiv dword ptr [ebp-0xC78]
	push eax
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D90],eax

 Block952:
	mov ecx,dword ptr [ebp-0x1D90]
	mov dword ptr [ebp-0xC6C],ecx
	cmp dword ptr [ebp-0x3C],0
	je Block954

 Block953:
	fild dword ptr [ebp-0xC6C]
	fidiv dword ptr [ebp-0xC78]
	sub esp,8
	fstp qword ptr [esp]
	call abs_1
	add esp,8
	fchs
	fstp qword ptr [ebp-0x1D98]
	jmp Block955

 Block954:
	fild dword ptr [ebp-0xC6C]
	fidiv dword ptr [ebp-0xC78]
	sub esp,8
	fstp qword ptr [esp]
	call abs_1
	add esp,8
	fstp qword ptr [ebp-0x1D98]

 Block955:
	fld qword ptr [ebp-0x1D98]
	fchs
	fstp qword ptr [ebp-0xC74]
	sub esp,8
	fld qword ptr [ebp-0xC74]
	fstp qword ptr [esp]
	push 0x348
	mov edx,dword ptr [ebp-0xC6C]
	push edx
	push 3
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::AddRushElem
	mov eax,dword ptr [ebp-0x120]
	add eax,0x528
	mov ecx,dword ptr [ebp-0x1BA8]
	mov dword ptr [ecx+0x3B60],eax
	push 8
	mov ecx,dword ptr [ebp-0x1BA8]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::SetMovePathAttribute
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::CheckPassenser

 Block956:
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::PreventRollback
	mov edx,dword ptr [ebp-0x1BA8]
	mov dword ptr [edx+0x3B74],1
	mov ecx,dword ptr [ebp-0x1BA8]
	call CUserLocal::SetPetsAngry
	mov dword ptr [ebp-0x1B40],1
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x134]
	call COutPacket::~COutPacket
	mov byte ptr [ebp-4],0x11
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::~CSkill_HitAni
	mov byte ptr [ebp-4],0xB
	lea ecx,[ebp-0x200]
	call ZArray<unsigned long>::~ZArray<unsigned long>
	mov byte ptr [ebp-4],3
	lea ecx,[ebp-0x6C]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1AC]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1B40]

 Block957:
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	mov esp,ebp
	pop ebp
	ret 0x30
}
}
// CUserLocal::SetFriendPairCharacterID
__SUB_CLASS_THIS0(00508810, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0x14
	push ebx
	mov ebx,ecx
	mov eax,dword ptr [ebx+0x2F08]
	or eax,dword ptr [ebx+0x2F0C]
	push esi
	push edi
	je Block2

 Block1:
	lea ecx,[ebx+0x2F00]
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::OnFriendRecordRemove

 Block2:
	push ebp
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x1C]
	push edx
	mov ecx,ebp
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x10],eax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block7

 Block3:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block6

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block6:
	mov dword ptr [esp+0x20],0

 Block7:
	xor eax,eax
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x18],eax
	mov edi,offset _D_G_ANRINGBODYPART
	jmp Block9

 Block9:
	mov ecx,dword ptr [edi]
	mov esi,dword ptr [ebp+ecx*8+0x3A54]
	test esi,esi
	je Block12

 Block10:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x2B78
	jne Block12

 Block11:
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea edx,[eax+eax*4]
	add edx,edx
	sub ecx,edx
	cmp ecx,2
	jle Block20

 Block12:
	add edi,4
	cmp edi,offset _D_G_ANPETABILBODYP
	jl Block9

 Block13:
	mov esi,dword ptr [esp+0x10]

 Block14:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+0x621]
	mov dword ptr [esp+0x10],eax
	pop ebp
	test eax,eax
	je Block19

 Block15:
	mov edi,edi

 Block16:
	lea eax,[esp+0xC]
	push eax
	call ZList<GW_FriendRecord>::GetNext
	mov ecx,dword ptr [eax+0x11]
	mov edi,dword ptr [esp+0x14]
	add esp,4
	cmp ecx,edi
	jne Block18

 Block17:
	mov ecx,dword ptr [eax+0x15]
	mov edx,dword ptr [esp+0x14]
	cmp ecx,edx
	je Block21

 Block18:
	cmp dword ptr [esp+0xC],0
	jne Block16

 Block19:
	xor eax,eax
	pop edi
	pop esi
	mov dword ptr [ebx+0x2F00],eax
	mov dword ptr [ebx+0x2F04],eax
	mov dword ptr [ebx+0x2F08],eax
	mov dword ptr [ebx+0x2F0C],eax
	pop ebx
	add esp,0x14
	ret

 Block20:
	mov ecx,dword ptr [esi+0x1C]
	mov eax,dword ptr [esi+0x18]
	mov dword ptr [esp+0x18],ecx
	lea ecx,[esi+0xC]
	mov dword ptr [esp+0x14],eax
	call TSecType<long>::GetData
	mov esi,eax
	jmp Block14

 Block21:
	lea ecx,[ebx+0x2F00]
	mov dword ptr [ecx],edi
	mov dword ptr [ecx+4],edx
	mov edx,dword ptr [eax+0x19]
	push esi
	mov dword ptr [ebx+0x2F08],edx
	mov eax,dword ptr [eax+0x1D]
	push ebx
	mov dword ptr [ebx+0x2F0C],eax
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::OnFriendRecordAdd
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret
}
}
// CUserLocal::TryConsumePetMP
_SUB_EXCEPTION_HANDLER(50DBC0)
__SUB_CLASS_THIS(0050DBC0, __thiscall, 41419,  CUserLocal, void, long, int32_t, unsigned char) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50DBC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x14],ebx
	cmp dword ptr [ebx+0x3AD0],0
	je Block40

 Block1:
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x24]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block6

 Block2:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block5

 Block3:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block5

 Block4:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block5:
	mov ebx,dword ptr [esp+0x14]
	mov dword ptr [esp+0x28],0

 Block6:
	mov ecx,dword ptr [ebx+0x2E44]
	mov eax,dword ptr [ecx+4]
	test eax,eax
	je Block40

 Block7:
	mov edx,dword ptr [eax+0x178]
	push edx
	add eax,0x170
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	je Block40

 Block8:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+8]
	mov ecx,ebx
	call edx
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block40

 Block9:
	mov edx,dword ptr [ebp+0x81]
	push edx
	lea eax,[ebp+0x79]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esi+0x2144]
	push ecx
	add esi,0x213C
	push esi
	mov edi,eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	mov eax,edi
	sub eax,dword ptr [esp+0x4C]
	add esp,0x10
	imul eax,0x64
	cdq
	idiv ecx
	mov edx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov ecx,dword ptr [edx+0x8C]
	lea ecx,[ecx+ecx*4]
	test ecx,ecx
	je Block11

 Block10:
	cmp eax,ecx
	jl Block12

 Block11:
	cmp dword ptr [esp+0x40],0
	je Block40

 Block12:
	mov eax,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	mov eax,dword ptr [eax+0x3C4]
	mov dword ptr [esp+0x3C],eax
	test eax,eax
	je Block40

 Block13:
	xor esi,esi
	mov edi,edi

 Block14:
	mov ecx,dword ptr [ebx+0x2E44]
	mov ecx,dword ptr [ecx+esi*8+4]
	test ecx,ecx
	je Block40

 Block15:
	call CPet::CanConsumeMP
	test eax,eax
	jne Block18

 Block16:
	inc esi
	cmp esi,3
	jl Block14

 Block17:
	jmp Block40

 Block18:
	mov edx,dword ptr [ebx+0x2E44]
	mov esi,dword ptr [edx+esi*8+4]
	mov dword ptr [esp+0x18],esi
	test esi,esi
	je Block40

 Block19:
	mov eax,dword ptr [ebp+0x509]
	test eax,eax
	je Block21

 Block20:
	mov eax,dword ptr [eax-4]

 Block21:
	lea esi,[eax-1]
	mov edi,1
	cmp esi,edi
	mov dword ptr [esp+0x40],esi
	jl Block34

 Block22:
	lea ecx,[ecx]

 Block23:
	push edi
	push 2
	lea eax,[esp+0x24]
	push eax
	mov ecx,ebp
	call CharacterData::GetItem
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block28

 Block24:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block27

 Block25:
	mov ecx,dword ptr [esp+0x20]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x20]
	test ecx,ecx
	je Block27

 Block26:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block27:
	mov dword ptr [esp+0x20],0

 Block28:
	test ebx,ebx
	je Block32

 Block29:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	mov esi,dword ptr [esp+0x3C]
	cmp eax,esi
	jne Block31

 Block30:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+4]
	mov ecx,ebx
	call eax
	test eax,eax
	je Block41

 Block31:
	mov esi,dword ptr [esp+0x40]

 Block32:
	inc edi
	cmp edi,esi
	jle Block23

 Block33:
	mov ebx,dword ptr [esp+0x14]

 Block34:
	inc dword ptr [ebx+0x4858]
	cmp dword ptr [ebx+0x4858],3
	jg Block36

 Block35:
	push 5
	mov ecx,ebx
	call CUser::PetAutoSpeaking

 Block36:
	lea ecx,[esp+0x3C]
	push 0xD8A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	xor esi,esi
	mov dword ptr [esp+0x34],esi
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],esi
	je Block38

 Block37:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x48],esp
	push esi
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],esi
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block38:
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,esi
	je Block40

 Block39:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block40:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 0xC

 Block41:
	test edi,edi
	je Block33

 Block42:
	mov ecx,dword ptr [esp+0x44]
	mov eax,dword ptr [esp+0x18]
	mov edx,dword ptr [eax+0xA4]
	mov eax,dword ptr [eax+0xA0]
	push 1
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 1
	push esi
	push edi
	push edx
	push eax
	call CWvsContext::SendStatChangeItemUseRequestByPetQ
	jmp Block40
}
}
// CUserLocal::SetMonsterBookCover
__SUB(00508DD0, __cdecl, 41377,  void, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,8
	push esi
	push edi
	lea eax,[esp+8]
	push eax
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [esp+0xC]
	mov ecx,dword ptr [esp+0x14]
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	mov dword ptr [eax+0x6E9],ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block3

 Block1:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block3

 Block2:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block3:
	pop edi
	pop esi
	add esp,8
	ret
}
}
// CUserLocal::IsWeaponDisabled
_SUB_EXCEPTION_HANDLER(50D700)
__SUB_CLASS_THIS0(0050D700, __thiscall, 41375,  CUserLocal, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50D700
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x1C]
	lea eax,[ecx+0x3870]
	push edx
	mov dword ptr [esp+0x18],eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block4:
	mov dword ptr [esp+0x20],0

 Block5:
	cmp dword ptr [ebx+0x155],0
	jne Block13

 Block6:
	mov eax,dword ptr [ebp+0x88]
	mov edx,dword ptr [eax+4]
	lea ecx,[ebp+0x88]
	call edx
	test eax,eax
	jne Block13

 Block7:
	call timeGetTime
	sub eax,dword ptr [ebp+0x4664]
	cmp eax,0x7D0
	jbe Block12

 Block8:
	lea eax,[esp+0x14]
	push 0x18B5
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x34],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x1C]

 Block9:
	add esp,8
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	call timeGetTime
	mov dword ptr [ebp+0x4664],eax

 Block12:
	mov eax,1
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret

 Block13:
	mov ecx,dword ptr [esp+0x14]
	cmp dword ptr [ecx+0x5C],0
	jne Block17

 Block14:
	mov edx,dword ptr [ebp+0x88]
	mov eax,dword ptr [edx+4]
	lea ecx,[ebp+0x88]
	call eax
	test eax,eax
	jne Block17

 Block15:
	call timeGetTime
	sub eax,dword ptr [ebp+0x4664]
	cmp eax,0x7D0
	jbe Block12

 Block16:
	lea ecx,[esp+0x18]
	push 0xB4B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x34],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x20]
	jmp Block9

 Block17:
	xor eax,eax
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret
}
}
// CUserLocal::ApplyDefenseOption
_SUB_EXCEPTION_HANDLER(50E950)
__SUB_CLASS_THIS(0050E950, __thiscall, 41346,  CUserLocal, void, long&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50E950
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x58
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x6C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x2C],ecx
	xor ebx,ebx
	int 3// TODO: 	mov edi,offset ZMap<long, long, long>::`vftable'
	mov esi,0x1F
	push 0x64
	lea ecx,[esp+0x58]
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x58],edi
	mov dword ptr [esp+0x5C],ebx
	mov dword ptr [esp+0x60],esi
	mov dword ptr [esp+0x64],ebx
	call ZMap<long, long, long>::_CalcAutoGrow
	push 0x64
	lea ecx,[esp+0x40]
	mov dword ptr [esp+0x78],ebx
	mov dword ptr [esp+0x40],edi
	mov dword ptr [esp+0x44],ebx
	mov dword ptr [esp+0x48],esi
	mov dword ptr [esp+0x4C],ebx
	call ZMap<long, long, long>::_CalcAutoGrow
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov byte ptr [esp+0x74],1
	mov dword ptr [esp+0x30],eax
	mov ebp,1

 Block1:
	cmp ebp,1
	je Block9

 Block2:
	cmp ebp,5
	je Block9

 Block3:
	cmp ebp,6
	je Block9

 Block4:
	cmp ebp,7
	je Block9

 Block5:
	cmp ebp,8
	je Block9

 Block6:
	cmp ebp,9
	je Block9

 Block7:
	cmp ebp,0xA
	je Block9

 Block8:
	cmp ebp,0x32
	jne Block41

 Block9:
	push ebp
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,dword ptr [esp+0x38]
	call CWvsContext::GetRealEquipSlot
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x38]
	cmp eax,ebx
	je Block14

 Block10:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block13

 Block11:
	mov edx,dword ptr [esp+0x38]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x38]
	cmp ecx,ebx
	je Block13

 Block12:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block13:
	mov dword ptr [esp+0x38],ebx

 Block14:
	cmp edi,ebx
	je Block41

 Block15:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x78]
	mov ecx,edi
	call edx
	test eax,eax
	je Block41

 Block16:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebx
	je Block41

 Block17:
	mov ecx,dword ptr [eax+0x68]
	push ecx
	add eax,0x60
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov esi,edx
	add esp,8
	shr esi,0x1F
	add esi,edx
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x24]
	push eax
	mov eax,dword ptr [edi+0x115]
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x24]
	push edx
	push esi
	push eax
	lea ecx,[edi+0x111]
	push ecx
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,dword ptr [esp+0x48]
	movsx edx,ax
	add esp,8
	push edx
	call CUserLocal::ApplyIgnoreDAMOption
	cmp dword ptr [esp+0x18],ebx
	jle Block21

 Block18:
	lea eax,[esp+0x24]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x5C]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block20

 Block19:
	mov edx,dword ptr [esp+0x24]
	add dword ptr [esp+0x14],edx

 Block20:
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x5C]
	call ZMap<long, long, long>::Insert

 Block21:
	cmp dword ptr [esp+0x20],ebx
	jle Block25

 Block22:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x24]
	push eax
	lea ecx,[esp+0x44]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block24

 Block23:
	mov ecx,dword ptr [esp+0x28]
	add dword ptr [esp+0x1C],ecx

 Block24:
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x24]
	push eax
	lea ecx,[esp+0x44]
	call ZMap<long, long, long>::Insert

 Block25:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x24]
	push edx
	mov edx,dword ptr [edi+0x11D]
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x24]
	push ecx
	push esi
	push edx
	lea eax,[edi+0x119]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	add esp,8
	push ecx
	mov ecx,dword ptr [esp+0x44]
	call CUserLocal::ApplyIgnoreDAMOption
	cmp dword ptr [esp+0x18],ebx
	jle Block29

 Block26:
	lea edx,[esp+0x24]
	push edx
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x5C]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block28

 Block27:
	mov ecx,dword ptr [esp+0x24]
	add dword ptr [esp+0x14],ecx

 Block28:
	lea edx,[esp+0x14]
	push edx
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x5C]
	call ZMap<long, long, long>::Insert

 Block29:
	cmp dword ptr [esp+0x20],ebx
	jle Block33

 Block30:
	lea ecx,[esp+0x28]
	push ecx
	lea edx,[esp+0x24]
	push edx
	lea ecx,[esp+0x44]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block32

 Block31:
	mov eax,dword ptr [esp+0x28]
	add dword ptr [esp+0x1C],eax

 Block32:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x24]
	push edx
	lea ecx,[esp+0x44]
	call ZMap<long, long, long>::Insert

 Block33:
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,dword ptr [edi+0x125]
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x24]
	push eax
	push esi
	push ecx
	add edi,0x121
	push edi
	call _ZtlSecureFuseHelper<short>::call
	mov ecx,dword ptr [esp+0x48]
	movsx edx,ax
	add esp,8
	push edx
	call CUserLocal::ApplyIgnoreDAMOption
	cmp dword ptr [esp+0x18],ebx
	jle Block37

 Block34:
	lea eax,[esp+0x24]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x5C]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block36

 Block35:
	mov edx,dword ptr [esp+0x24]
	add dword ptr [esp+0x14],edx

 Block36:
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x5C]
	call ZMap<long, long, long>::Insert

 Block37:
	cmp dword ptr [esp+0x20],ebx
	jle Block41

 Block38:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x24]
	push eax
	lea ecx,[esp+0x44]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block40

 Block39:
	mov ecx,dword ptr [esp+0x28]
	add dword ptr [esp+0x1C],ecx

 Block40:
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x24]
	push eax
	lea ecx,[esp+0x44]
	call ZMap<long, long, long>::Insert

 Block41:
	inc ebp
	cmp ebp,0x3C
	jl Block1

 Block42:
	lea ecx,[esp+0x54]
	call ZMap<long, long, long>::GetHeadPosition
	mov edi,dword ptr [esp+0x7C]
	mov dword ptr [esp+0x2C],eax
	cmp eax,ebx
	je Block46

 Block43:
	lea ecx,[esp+0x7C]
	push ecx
	lea edx,[esp+0x30]
	push edx
	lea ecx,[esp+0x5C]
	mov dword ptr [esp+0x84],ebx
	call ZMap<long, long, long>::GetNext
	mov esi,dword ptr [eax]
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x65
	div ecx
	cmp edx,esi
	ja Block45

 Block44:
	mov edx,dword ptr [esp+0x7C]
	sub dword ptr [edi],edx

 Block45:
	cmp dword ptr [esp+0x2C],ebx
	jne Block43

 Block46:
	lea ecx,[esp+0x3C]
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x2C],eax
	cmp eax,ebx
	je Block50

 Block47:
	lea eax,[esp+0x7C]
	push eax
	lea ecx,[esp+0x30]
	push ecx
	lea ecx,[esp+0x44]
	mov dword ptr [esp+0x84],ebx
	call ZMap<long, long, long>::GetNext
	mov esi,dword ptr [eax]
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x65
	div ecx
	cmp edx,esi
	ja Block49

 Block48:
	mov ecx,dword ptr [edi]
	mov edx,ecx
	imul edx,dword ptr [esp+0x7C]
	mov eax,0x51EB851F
	imul edx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	sub ecx,eax
	mov dword ptr [edi],ecx

 Block49:
	cmp dword ptr [esp+0x2C],ebx
	jne Block47

 Block50:
	cmp dword ptr [esp+0x60],ebx
	ja Block52

 Block51:
	cmp dword ptr [esp+0x48],ebx
	jbe Block54

 Block52:
	cmp dword ptr [edi],ebx
	jg Block54

 Block53:
	mov dword ptr [edi],1

 Block54:
	int 3// TODO: 	mov esi,offset ZMap<long, long, long>::`vftable'
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x74],bl
	mov dword ptr [esp+0x3C],esi
	call ZMap<long, long, long>::RemoveAll
	lea ecx,[esp+0x54]
	mov dword ptr [esp+0x74],0xFFFFFFFF
	mov dword ptr [esp+0x54],esi
	call ZMap<long, long, long>::RemoveAll
	mov ecx,dword ptr [esp+0x6C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x64
	ret 4
}
}
// CUserLocal::TryDoingItemSkill
_SUB_EXCEPTION_HANDLER(507A70)
__SUB_CLASS_THIS(00507A70, __thiscall, 41440,  CUserLocal, void, CMob*, long, long, long, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_507A70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x48
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x5C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	mov dword ptr [esp+0x14],0
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	test ecx,ecx
	je Block2

 Block1:
	lea eax,[esp+0x34]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x30]
	mov ebx,1
	jmp Block3

 Block2:
	xor esi,esi
	mov dword ptr [esp+0x30],esi
	lea eax,[esp+0x2C]
	lea ebx,[esi+2]

 Block3:
	mov eax,dword ptr [eax+4]
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	mov dword ptr [esp+0x30],eax
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ebp

 Block5:
	mov dword ptr [esp+0x64],1
	test bl,2
	je Block10

 Block6:
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x14],ebx
	test esi,esi
	je Block10

 Block7:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block10

 Block8:
	push edi
	call ebp
	test esi,esi
	je Block10

 Block9:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block10:
	mov byte ptr [esp+0x64],2
	test bl,1
	je Block16

 Block11:
	mov esi,dword ptr [esp+0x38]
	test esi,esi
	je Block16

 Block12:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block15

 Block13:
	push edi
	call ebp
	test esi,esi
	je Block15

 Block14:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block15:
	mov dword ptr [esp+0x38],0

 Block16:
	cmp dword ptr [esp+0x30],0
	je Block48

 Block17:
	mov ecx,dword ptr [esp+0x18]
	mov eax,dword ptr [ecx+0x4764]
	xor esi,esi
	mov dword ptr [esp+0x14],eax
	test eax,eax
	je Block45

 Block18:
	mov ebx,dword ptr [esp+0x70]
	mov edx,dword ptr [esp+0x74]
	mov ebp,ebx
	add ebx,edx
	add ebx,dword ptr [esp+0x7C]
	jmp Block20

 Block19:
	mov esi,dword ptr [esp+0x74]

 Block20:
	lea eax,[esp+0x14]
	inc esi
	push eax
	mov dword ptr [esp+0x78],esi
	add ebx,4
	add ebp,0x10
	call ZList<ZRef<CItemInfo::ItemSkill>>::GetNext
	mov edi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x28],edi
	test edi,edi
	je Block22

 Block21:
	lea ecx,[edi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block22:
	mov byte ptr [esp+0x64],3
	test edi,edi
	je Block43

 Block23:
	lea ecx,[esp+0x3C]
	call CRand32::_ctor_default
	mov edx,dword ptr [esp+0x70]
	mov eax,dword ptr [esp+0x80]
	add esi,edx
	add esi,dword ptr [esp+0x78]
	lea ecx,[esp+0x54]
	push ecx
	lea ecx,[esp+0x80]
	lea esi,[esi+eax+0xA]
	call ZSynchronizedHelper<ZFatalSection>::_ctor_0
	mov eax,dword ptr [esp+0x7C]
	mov dword ptr [esp+0x3C],ebp
	mov dword ptr [esp+0x48],ebp
	mov dword ptr [esp+0x40],ebx
	mov dword ptr [esp+0x4C],ebx
	mov dword ptr [esp+0x44],esi
	mov dword ptr [esp+0x50],esi
	add dword ptr [eax+4],0xFFFFFFFF
	jne Block25

 Block24:
	mov dword ptr [eax],0

 Block25:
	lea ecx,[esp+0x3C]
	call CRand32::Random
	xor edx,edx
	mov ecx,0x64
	div ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov dword ptr [esp+0x18],edx
	test ecx,ecx
	je Block39

 Block26:
	mov edx,dword ptr [edi]
	push edx
	call CSkillInfo::GetItemSkill
	test eax,eax
	je Block39

 Block27:
	mov ecx,dword ptr [eax+4]
	test ecx,ecx
	jne Block29

 Block28:
	xor edx,edx
	jmp Block30

 Block29:
	mov edx,dword ptr [ecx-4]

 Block30:
	mov ecx,dword ptr [edi+4]
	cmp ecx,edx
	jg Block39

 Block31:
	test ecx,ecx
	jle Block39

 Block32:
	mov eax,dword ptr [eax+4]
	mov esi,dword ptr [eax+ecx*8-4]
	lea eax,[eax+ecx*8-8]
	mov dword ptr [esp+0x20],esi
	test esi,esi
	je Block34

 Block33:
	lea ecx,[esi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block34:
	mov edx,dword ptr [esp+0x18]
	cmp dword ptr [esi+0xC],edx
	mov byte ptr [esp+0x64],4
	jg Block36

 Block35:
	mov byte ptr [esp+0x64],3
	lea ecx,[esp+0x1C]
	jmp Block37

 Block36:
	mov eax,dword ptr [esp+0x30]
	mov ecx,dword ptr [eax+0x81]
	push ecx
	add eax,0x79
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp dword ptr [esi],eax
	mov byte ptr [esp+0x64],3
	lea ecx,[esp+0x1C]
	jle Block38

 Block37:
	call ZRef<ITEMSKILLLEVELDATA>::~ZRef<ITEMSKILLLEVELDATA>
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0x64],2
	call ZRef<CItemInfo::ItemSkill>::~ZRef<CItemInfo::ItemSkill>
	jmp Block43

 Block38:
	call ZRef<ITEMSKILLLEVELDATA>::~ZRef<ITEMSKILLLEVELDATA>

 Block39:
	lea esi,[edi-0x10]
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x68],2
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block42

 Block40:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block42

 Block41:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block42:
	mov dword ptr [esp+0x28],0

 Block43:
	cmp dword ptr [esp+0x14],0
	jne Block19

 Block44:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]

 Block45:
	mov esi,dword ptr [esp+0x30]
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x68],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block48

 Block46:
	push edi
	call ebp
	test esi,esi
	je Block48

 Block47:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block48:
	mov ecx,dword ptr [esp+0x5C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret 0x18
}
}
// CUserLocal::DrawCombo
_SUB_EXCEPTION_HANDLER(517040)
__SUB_CLASS_THIS0(00517040, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_517040
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1AC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C0]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x34],ecx
	mov ecx,dword ptr [ecx+0x4790]
	xor ebp,ebp
	cmp ecx,ebp
	jle Block211

 Block1:
	cmp ecx,0xC8
	mov dword ptr [esp+0x40],ebp
	jl Block3

 Block2:
	mov dword ptr [esp+0x40],3
	jmp Block7

 Block3:
	cmp ecx,0x64
	jl Block5

 Block4:
	mov dword ptr [esp+0x40],2
	jmp Block7

 Block5:
	cmp ecx,0x1E
	jl Block7

 Block6:
	mov dword ptr [esp+0x40],1

 Block7:
	xor ebx,ebx
	or edi,0xFFFFFFFF
	xor esi,esi

 Block8:
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea edx,[eax+eax*4]
	add edx,edx
	sub ecx,edx
	inc ebx
	mov dword ptr [esp+esi*4+0x88],ecx
	mov ecx,eax
	cmp edi,0xFFFFFFFF
	jne Block11

 Block9:
	cmp dword ptr [esp+esi*4+0x88],ebp
	jle Block11

 Block10:
	mov edi,esi

 Block11:
	cmp ecx,ebp
	je Block13

 Block12:
	inc esi
	cmp esi,5
	jl Block8

 Block13:
	mov dword ptr [esp+0x68],ebx
	mov dword ptr [esp+0x64],edi
	mov dword ptr [esp+0x3C],ebp
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 2
	lea eax,[esp+0x64]
	push eax
	mov dword ptr [esp+0x1D0],ebp
	call CWndMan::GetOrgWindow
	lea ecx,[esp+0x48]
	push 0x3D2
	push ecx
	mov byte ptr [esp+0x1D0],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov esi,dword ptr [esp+0x34]
	mov eax,dword ptr [eax]
	push ebp
	add esi,0x479C
	push esi
	push eax
	mov byte ptr [esp+0x1D4],2
	call PcCreate_IWzVector2D
	mov eax,dword ptr [esp+0x54]
	add esp,0xC
	mov byte ptr [esp+0x1C8],1
	cmp eax,ebp
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block15:
	lea edx,[esp+0x48]
	push 0x3D2
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov ebp,dword ptr [esp+0x34]
	mov eax,dword ptr [eax]
	push 0
	add ebp,0x47A0
	push ebp
	push eax
	mov byte ptr [esp+0x1D4],3
	call PcCreate_IWzVector2D
	mov eax,dword ptr [esp+0x54]
	add esp,0xC
	mov byte ptr [esp+0x1C8],1
	test eax,eax
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block17:
	mov edi,dword ptr [esp+0x60]
	mov eax,0xD
	mov word ptr [esp+0x4C],ax
	mov dword ptr [esp+0x54],edi
	test edi,edi
	je Block19

 Block18:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+4]
	push edi
	call edx

 Block19:
	mov esi,dword ptr [esi]
	mov byte ptr [esp+0x1C8],4
	test esi,esi
	jne Block21

 Block20:
	push 0x80004003
	call _com_issue_error

 Block21:
	mov edx,dword ptr [esp+0x4C]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x60]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x68]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push esi
	call eax
	test eax,eax
	jge Block23

 Block22:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push esi
	push eax
	call _com_issue_errorex

 Block23:
	cmp word ptr [esp+0x4C],8
	mov byte ptr [esp+0x1C8],1
	jne Block26

 Block24:
	mov eax,dword ptr [esp+0x54]
	xor ecx,ecx
	mov word ptr [esp+0x4C],cx
	test eax,eax
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea edx,[esp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block27:
	mov eax,0xD
	mov word ptr [esp+0x4C],ax
	mov dword ptr [esp+0x54],edi
	test edi,edi
	je Block29

 Block28:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+4]
	push edi
	call edx

 Block29:
	mov esi,dword ptr [ebp]
	mov byte ptr [esp+0x1C8],5
	test esi,esi
	jne Block31

 Block30:
	push 0x80004003
	call _com_issue_error

 Block31:
	mov edx,dword ptr [esp+0x4C]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x60]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x68]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push esi
	call eax
	test eax,eax
	jge Block33

 Block32:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push esi
	push eax
	call _com_issue_errorex

 Block33:
	cmp word ptr [esp+0x4C],8
	mov byte ptr [esp+0x1C8],1
	jne Block36

 Block34:
	mov eax,dword ptr [esp+0x54]
	xor ecx,ecx
	mov word ptr [esp+0x4C],cx
	test eax,eax
	je Block37

 Block35:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block37

 Block36:
	lea edx,[esp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block37:
	xor ebp,ebp
	test ebx,ebx
	jle Block92

 Block38:
	mov eax,ebx
	and eax,0x80000001
	jns Block40

 Block39:
	dec eax
	or eax,0xFFFFFFFE
	inc eax

 Block40:
	mov ebx,dword ptr [esp+0x34]
	mov dword ptr [esp+0x7C],eax
	add ebx,0x47A8
	mov dword ptr [esp+0x48],0xFFFFFFCE
	nop

 Block41:
	mov eax,dword ptr [ebx]
	test eax,eax
	je Block43

 Block42:
	mov dword ptr [ebx],0
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block43:
	mov eax,dword ptr [esp+ebp*4+0x88]
	mov ecx,dword ptr [esp+0x40]
	push eax
	push ecx
	lea edx,[esp+0x44]
	push offset _S_EFFECTBASICEFFIM__7
	push edx
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [esp+0x44]
	add esp,0x10
	cmp ebp,dword ptr [esp+0x64]
	jg Block45

 Block44:
	add eax,0x47A0
	jmp Block46

 Block45:
	add eax,0x479C

 Block46:
	mov edi,dword ptr [eax]
	mov dword ptr [esp+0x84],edi
	test edi,edi
	je Block48

 Block47:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+4]
	push edi
	call ecx

 Block48:
	mov eax,ebp
	and eax,0x80000001
	mov byte ptr [esp+0x1C8],6
	jns Block50

 Block49:
	dec eax
	or eax,0xFFFFFFFE
	inc eax

 Block50:
	sub eax,dword ptr [esp+0x7C]
	mov edx,dword ptr [esp+0x48]
	push 0
	neg eax
	push 0xFF
	sbb eax,eax
	push 0xC006156C
	push ecx
	and eax,0xFFFFFFFC
	add eax,0xA9
	mov dword ptr [esp+0x54],esp
	mov ecx,esp
	push eax
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [ecx],0
	mov dword ptr [esp+0x60],esp
	mov dword ptr [eax],edi
	test edi,edi
	je Block52

 Block51:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+4]
	push edi
	call ecx

 Block52:
	mov edx,dword ptr [esp+0x58]
	push 0
	push edx
	lea eax,[esp+0xA4]
	push eax
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov esi,dword ptr [ebx]
	add esp,0x28
	cmp esi,eax
	je Block57

 Block53:
	mov dword ptr [ebx],eax
	test eax,eax
	je Block55

 Block54:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block55:
	test esi,esi
	je Block57

 Block56:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block57:
	mov eax,dword ptr [esp+0x80]
	test eax,eax
	je Block59

 Block58:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block59:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x6C]
	push ecx
	call esi
	lea edx,[esp+0x6C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block104

 Block60:
	lea eax,[esp+0x4C]
	push eax
	mov byte ptr [esp+0x1CC],7
	call esi
	lea ecx,[esp+0x4C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block104

 Block61:
	mov esi,dword ptr [ebx]
	mov byte ptr [esp+0x1C8],8
	test esi,esi
	je Block20

 Block62:
	mov ecx,dword ptr [esp+0x6C]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x110]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x80]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x84]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x88]
	mov dword ptr [eax+0xC],ecx
	mov ecx,dword ptr [esp+0x5C]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x70]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x74]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x78]
	push 0
	push esi
	mov dword ptr [eax+0xC],ecx
	call edx
	test eax,eax
	jge Block64

 Block63:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block64:
	mov esi,8
	mov byte ptr [esp+0x1C8],7
	cmp word ptr [esp+0x4C],si
	jne Block67

 Block65:
	xor eax,eax
	mov word ptr [esp+0x4C],ax
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block68

 Block66:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block68

 Block67:
	lea ecx,[esp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block68:
	mov byte ptr [esp+0x1C8],6
	cmp word ptr [esp+0x6C],si
	jne Block71

 Block69:
	mov eax,dword ptr [esp+0x74]
	xor edx,edx
	mov word ptr [esp+0x6C],dx
	test eax,eax
	je Block72

 Block70:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block72

 Block71:
	lea eax,[esp+0x6C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block72:
	mov ecx,dword ptr [esp+0x34]
	cmp dword ptr [ecx+0x4798],0
	jne Block88

 Block73:
	lea edx,[esp+0x24]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x24]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block104

 Block74:
	mov byte ptr [esp+0x1C8],9
	call get_update_time
	add eax,0x1388
	mov ecx,3
	mov word ptr [esp+0x14],cx
	mov dword ptr [esp+0x1C],eax
	mov ecx,dword ptr [ebx]
	mov byte ptr [esp+0x1C8],0xA
	test ecx,ecx
	je Block20

 Block75:
	lea edx,[esp+0x38]
	push edx
	call IWzGr2DLayer::Getalpha
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x1C8],0xB
	test esi,esi
	je Block20

 Block76:
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x38]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x3C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x40]
	mov dword ptr [eax+0xC],edx
	mov edx,dword ptr [esp+0x24]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x38]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x3C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x40]
	push 0
	push 0
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x90]
	push esi
	call eax
	test eax,eax
	jge Block78

 Block77:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push esi
	push eax
	call _com_issue_errorex

 Block78:
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0x1C8],0xA
	test eax,eax
	je Block80

 Block79:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block80:
	mov esi,8
	mov byte ptr [esp+0x1C8],9
	cmp word ptr [esp+0x14],si
	jne Block83

 Block81:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block84

 Block82:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block84

 Block83:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block84:
	mov byte ptr [esp+0x1C8],6
	cmp word ptr [esp+0x24],si
	jne Block87

 Block85:
	mov eax,dword ptr [esp+0x2C]
	xor edx,edx
	mov word ptr [esp+0x24],dx
	test eax,eax
	je Block88

 Block86:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block88

 Block87:
	lea eax,[esp+0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block88:
	mov byte ptr [esp+0x1C8],1
	test edi,edi
	je Block90

 Block89:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block90:
	sub dword ptr [esp+0x48],0x17
	inc ebp
	add ebx,4
	cmp ebp,dword ptr [esp+0x68]
	jl Block41

 Block91:
	mov edi,dword ptr [esp+0x60]

 Block92:
	mov ecx,dword ptr [esp+0x34]
	mov eax,dword ptr [ecx+0x47A4]
	test eax,eax
	je Block94

 Block93:
	mov dword ptr [ecx+0x47A4],0
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block94:
	mov eax,dword ptr [esp+0x40]
	push eax
	lea ecx,[esp+0x40]
	push offset _S_EFFECTBASICEFFIM__6
	push ecx
	call ZXString<unsigned short>::Format
	add esp,0xC
	push 0
	push 0xFF
	push 0xC006156C
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x54],esp
	push 0xB4
	push 0xFFFFFFCE
	push ecx
	mov dword ptr [eax],0
	mov eax,esp
	mov dword ptr [esp+0x60],esp
	mov dword ptr [eax],edi
	test edi,edi
	je Block96

 Block95:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+4]
	push edi
	call eax

 Block96:
	mov ecx,dword ptr [esp+0x58]
	push 0
	push ecx
	lea edx,[esp+0x5C]
	push edx
	call CAnimationDisplayer::LoadLayer_1
	mov ecx,dword ptr [esp+0x5C]
	mov eax,dword ptr [eax]
	mov esi,dword ptr [ecx+0x47A4]
	add esp,0x28
	cmp esi,eax
	je Block101

 Block97:
	mov dword ptr [ecx+0x47A4],eax
	test eax,eax
	je Block99

 Block98:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block99:
	test esi,esi
	je Block101

 Block100:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block101:
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block103

 Block102:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block103:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block105

 Block104:
	push eax
	call _com_issue_error

 Block105:
	lea eax,[esp+0x24]
	mov bl,0xC
	push eax
	mov byte ptr [esp+0x1CC],bl
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block107

 Block106:
	push eax
	call _com_issue_error

 Block107:
	mov ebp,dword ptr [esp+0x34]
	mov esi,dword ptr [ebp+0x47A4]
	mov byte ptr [esp+0x1C8],0xD
	test esi,esi
	jne Block109

 Block108:
	push 0x80004003
	call _com_issue_error

 Block109:
	mov ecx,dword ptr [esp+0x14]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x110]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr [eax+0xC],ecx
	mov ecx,dword ptr [esp+0x34]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x4C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x50]
	push 0
	push esi
	mov dword ptr [eax+0xC],ecx
	call edx
	test eax,eax
	jge Block111

 Block110:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block111:
	mov esi,8
	mov byte ptr [esp+0x1C8],bl
	cmp word ptr [esp+0x24],si
	jne Block114

 Block112:
	xor eax,eax
	mov word ptr [esp+0x24],ax
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block115

 Block113:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block115

 Block114:
	lea ecx,[esp+0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block115:
	mov byte ptr [esp+0x1C8],1
	cmp word ptr [esp+0x14],si
	jne Block118

 Block116:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block119

 Block117:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block119

 Block118:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block119:
	cmp dword ptr [ebp+0x4798],0
	jne Block138

 Block120:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block122

 Block121:
	push eax
	call _com_issue_error

 Block122:
	mov byte ptr [esp+0x1C8],0xE
	call get_update_time
	add eax,0x1388
	mov ecx,3
	mov word ptr [esp+0x24],cx
	mov dword ptr [esp+0x2C],eax
	mov ecx,dword ptr [ebp+0x47A4]
	mov bl,0xF
	mov byte ptr [esp+0x1C8],bl
	test ecx,ecx
	jne Block124

 Block123:
	push 0x80004003
	call _com_issue_error

 Block124:
	lea edx,[esp+0x38]
	push edx
	call IWzGr2DLayer::Getalpha
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x1C8],0x10
	test esi,esi
	jne Block126

 Block125:
	push 0x80004003
	call _com_issue_error

 Block126:
	mov edx,dword ptr [esp+0x14]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x28]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [eax+0xC],edx
	mov edx,dword ptr [esp+0x34]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x48]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x4C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x50]
	push 0
	push 0
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x90]
	push esi
	call eax
	test eax,eax
	jge Block128

 Block127:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push esi
	push eax
	call _com_issue_errorex

 Block128:
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0x1C8],bl
	test eax,eax
	je Block130

 Block129:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block130:
	mov esi,8
	mov byte ptr [esp+0x1C8],0xE
	cmp word ptr [esp+0x24],si
	jne Block133

 Block131:
	xor eax,eax
	mov word ptr [esp+0x24],ax
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block134

 Block132:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block134

 Block133:
	lea ecx,[esp+0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block134:
	mov byte ptr [esp+0x1C8],1
	cmp word ptr [esp+0x14],si
	jne Block137

 Block135:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block138

 Block136:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block138

 Block137:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block138:
	cmp dword ptr [esp+0x40],2
	jg Block141

 Block139:
	cmp dword ptr [ebp+0x4798],0
	jne Block141

 Block140:
	fldz
	mov dword ptr [esp+0x9C],edi
	fst qword ptr [esp+0xA4]
	fst qword ptr [esp+0xAC]
	fstp qword ptr [esp+0xB4]
	fld qword ptr [__real_4024000000000000]
	fstp qword ptr [esp+0xBC]
	call get_update_time
	fldz
	fst qword ptr [esp+0xD4]
	mov dword ptr [esp+0xC4],eax
	fld qword ptr [__real_4010000000000000]
	mov dword ptr [esp+0xCC],edi
	fstp qword ptr [esp+0xDC]
	fstp qword ptr [esp+0xE4]
	fld qword ptr [__real_4024000000000000]
	fstp qword ptr [esp+0xEC]
	call get_update_time
	fldz
	add eax,0x32
	fst qword ptr [esp+0x104]
	mov dword ptr [esp+0xF4],eax
	fst qword ptr [esp+0x10C]
	mov dword ptr [esp+0xFC],edi
	fst qword ptr [esp+0x114]
	fstp qword ptr [esp+0x11C]
	call get_update_time
	fldz
	fst qword ptr [esp+0x134]
	add eax,0x12C
	fst qword ptr [esp+0x13C]
	mov dword ptr [esp+0x124],eax
	fstp qword ptr [esp+0x144]
	mov dword ptr [esp+0x12C],edi
	fld qword ptr [__real_4024000000000000]
	fstp qword ptr [esp+0x14C]
	call get_update_time
	fldz
	fst qword ptr [esp+0x164]
	mov dword ptr [esp+0x154],eax
	fld qword ptr [__real_4024000000000000]
	mov dword ptr [esp+0x15C],edi
	fst qword ptr [esp+0x16C]
	fstp qword ptr [esp+0x17C]
	fstp qword ptr [esp+0x174]
	call get_update_time
	fldz
	add eax,0x32
	fst qword ptr [esp+0x194]
	mov dword ptr [esp+0x184],eax
	fst qword ptr [esp+0x19C]
	mov dword ptr [esp+0x18C],edi
	fst qword ptr [esp+0x1A4]
	fstp qword ptr [esp+0x1AC]
	call get_update_time
	add eax,0x12C
	lea ecx,[esp+0x9C]
	push ecx
	mov dword ptr [esp+0x1B8],eax
	mov eax,dword ptr [ebp+0x479C]
	push 3
	push eax
	call raw_InvokeFly
	mov eax,dword ptr [ebp+0x47A0]
	lea edx,[esp+0x138]
	push edx
	push 3
	push eax
	call raw_InvokeFly
	add esp,0x18

 Block141:
	mov eax,dword ptr [ebp+0x4790]
	cmp eax,0x1E
	je Block144

 Block142:
	cmp eax,0x64
	je Block144

 Block143:
	cmp eax,0xC8
	jne Block207

 Block144:
	xor ecx,ecx
	xor edi,edi
	sub eax,0x1E
	je Block149

 Block145:
	sub eax,0x46
	je Block148

 Block146:
	sub eax,0x64
	jne Block151

 Block147:
	mov ecx,0x1424406
	lea edi,[ecx+1]
	jmp Block151

 Block148:
	mov ecx,0x1421CF4
	jmp Block150

 Block149:
	mov ecx,0x141F5E4

 Block150:
	mov edi,0x141F5E5

 Block151:
	mov ebp,dword ptr [esp+0x34]
	push ecx
	mov ecx,ebp
	call CUserLocal::GetSkillLevel
	test eax,eax
	jle Block179

 Block152:
	mov eax,dword ptr [ebp+0x47BC]
	test eax,eax
	je Block154

 Block153:
	mov dword ptr [ebp+0x47BC],0
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block154:
	mov eax,dword ptr [esp+0x40]
	push eax
	lea ecx,[esp+0x40]
	push offset _S_EFFECTBASICEFFIM__5
	push ecx
	call ZXString<unsigned short>::Format
	add esp,0xC
	push 0
	push 0xFF
	push 0xC006156C
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x54],esp
	push 0xD7
	push 0
	push ecx
	mov ecx,dword ptr [esp+0x7C]
	mov dword ptr [eax],0
	mov eax,esp
	mov dword ptr [esp+0x60],esp
	mov dword ptr [eax],ecx
	test ecx,ecx
	je Block156

 Block155:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+4]
	push ecx
	call eax

 Block156:
	mov ecx,dword ptr [esp+0x58]
	push 0
	push ecx
	lea edx,[esp+0x5C]
	push edx
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov esi,dword ptr [ebp+0x47BC]
	add esp,0x28
	cmp esi,eax
	je Block161

 Block157:
	mov dword ptr [ebp+0x47BC],eax
	test eax,eax
	je Block159

 Block158:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block159:
	test esi,esi
	je Block161

 Block160:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block161:
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block163

 Block162:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block163:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block165

 Block164:
	push eax
	call _com_issue_error

 Block165:
	lea eax,[esp+0x24]
	mov bl,0x11
	push eax
	mov byte ptr [esp+0x1CC],bl
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block167

 Block166:
	push eax
	call _com_issue_error

 Block167:
	mov esi,dword ptr [ebp+0x47BC]
	mov byte ptr [esp+0x1C8],0x12
	test esi,esi
	jne Block169

 Block168:
	push 0x80004003
	call _com_issue_error

 Block169:
	mov ecx,dword ptr [esp+0x14]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x110]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr [eax+0xC],ecx
	mov ecx,dword ptr [esp+0x34]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x4C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x50]
	push 0
	push esi
	mov dword ptr [eax+0xC],ecx
	call edx
	test eax,eax
	jge Block171

 Block170:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block171:
	mov esi,8
	mov byte ptr [esp+0x1C8],bl
	cmp word ptr [esp+0x24],si
	jne Block174

 Block172:
	xor eax,eax
	mov word ptr [esp+0x24],ax
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block175

 Block173:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block175

 Block174:
	lea ecx,[esp+0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block175:
	mov byte ptr [esp+0x1C8],1
	cmp word ptr [esp+0x14],si
	jne Block178

 Block176:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block179

 Block177:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block179

 Block178:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block179:
	push edi
	mov ecx,ebp
	call CUserLocal::GetSkillLevel
	test eax,eax
	jle Block207

 Block180:
	mov eax,dword ptr [ebp+0x47C0]
	test eax,eax
	je Block182

 Block181:
	mov dword ptr [ebp+0x47C0],0
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block182:
	mov eax,dword ptr [esp+0x40]
	push eax
	lea ecx,[esp+0x40]
	push offset _S_EFFECTBASICEFFIM__4
	push ecx
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp+0x47BC]
	add esp,0xC
	push 0
	neg eax
	push 0xFF
	sbb eax,eax
	push 0xC006156C
	push ecx
	and eax,0x23
	mov ecx,esp
	add eax,0xD7
	mov dword ptr [esp+0x54],esp
	push eax
	push 0
	push ecx
	mov dword ptr [ecx],0
	mov ecx,dword ptr [esp+0x7C]
	mov eax,esp
	mov dword ptr [esp+0x60],esp
	mov dword ptr [eax],ecx
	test ecx,ecx
	je Block184

 Block183:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+4]
	push ecx
	call eax

 Block184:
	mov ecx,dword ptr [esp+0x58]
	push 0
	push ecx
	lea edx,[esp+0x5C]
	push edx
	call CAnimationDisplayer::LoadLayer_1
	mov eax,dword ptr [eax]
	mov esi,dword ptr [ebp+0x47C0]
	add esp,0x28
	cmp esi,eax
	je Block189

 Block185:
	mov dword ptr [ebp+0x47C0],eax
	test eax,eax
	je Block187

 Block186:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block187:
	test esi,esi
	je Block189

 Block188:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block189:
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block191

 Block190:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block191:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block193

 Block192:
	push eax
	call _com_issue_error

 Block193:
	lea eax,[esp+0x24]
	mov bl,0x13
	push eax
	mov byte ptr [esp+0x1CC],bl
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block195

 Block194:
	push eax
	call _com_issue_error

 Block195:
	mov esi,dword ptr [ebp+0x47C0]
	mov byte ptr [esp+0x1C8],0x14
	test esi,esi
	jne Block197

 Block196:
	push 0x80004003
	call _com_issue_error

 Block197:
	mov ecx,dword ptr [esp+0x14]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x110]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr [eax+0xC],ecx
	mov ecx,dword ptr [esp+0x34]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x4C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x50]
	push 0
	push esi
	mov dword ptr [eax+0xC],ecx
	call edx
	test eax,eax
	jge Block199

 Block198:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block199:
	mov esi,8
	mov byte ptr [esp+0x1C8],bl
	cmp word ptr [esp+0x24],si
	jne Block202

 Block200:
	xor eax,eax
	mov word ptr [esp+0x24],ax
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block203

 Block201:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block203

 Block202:
	lea ecx,[esp+0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block203:
	mov byte ptr [esp+0x1C8],1
	cmp word ptr [esp+0x14],si
	jne Block206

 Block204:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block207

 Block205:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block207

 Block206:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block207:
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0x1C8],0
	test eax,eax
	je Block209

 Block208:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block209:
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x1C8],0xFFFFFFFF
	test eax,eax
	je Block211

 Block210:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block211:
	mov ecx,dword ptr [esp+0x1C0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::OnSummonedCreated
_SUB_EXCEPTION_HANDLER(50D590)
__SUB_CLASS_THIS(0050D590, __thiscall, 41365,  CUserLocal, void, NakedParam<ZRef<CSummoned>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50D590
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov ecx,dword ptr [esp+0x34]
	xor edi,edi
	mov dword ptr [esp+0x28],edi
	cmp ecx,edi
	je Block10

 Block1:
	mov eax,dword ptr [ecx+0xC0]
	cmp eax,0xC80EDC
	mov esi,dword ptr [ecx+0xC8]
	jg Block11

 Block2:
	je Block6

 Block3:
	cmp eax,0x2F785A
	je Block6

 Block4:
	cmp eax,0x30FEFA
	je Block6

 Block5:
	cmp eax,0x423D0E
	jne Block8

 Block6:
	lea eax,[ecx+4]
	mov ecx,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	push eax
	push 1
	call CMobPool::LetMobChasePuppet

 Block7:
	mov ecx,dword ptr [esp+0x34]

 Block8:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test ecx,ecx
	je Block10

 Block9:
	push 0
	lea ecx,[esp+0x34]
	call ZRef<CSummoned>::_ReleaseRaw

 Block10:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret 8

 Block11:
	cmp eax,0x1F93BDB
	je Block6

 Block12:
	cmp eax,0x217C05A
	jne Block8

 Block13:
	mov ecx,ebp
	call CUserLocal::GetTeslaCoilCount
	cmp eax,3
	jne Block7

 Block14:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x217C05A
	call CSkillInfo::GetSkill
	push esi
	mov ecx,eax
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov ebx,eax
	lea eax,[esp+0x18]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0x18]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x217E381
	push esi
	mov dword ptr [esp+0x20],edi
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	je Block17

 Block15:
	test eax,eax
	je Block17

 Block16:
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nY
	mov edi,eax

 Block17:
	mov ecx,ebx
	call SKILLLEVELDATA::_ZtlSecureGet_nY
	mov esi,eax
	imul esi,0x3E8
	mov ecx,esi
	imul ecx,edi
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esi,eax
	call get_update_time
	add eax,esi
	push eax
	mov ecx,ebp
	call CUserLocal::ChangeTeslaCoilEndTime
	jmp Block7
}
}
// CUserLocal::SetNewYearCardPairCharacterID
__SUB_CLASS_THIS0(00508AF0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,8
	push ebp
	push edi
	mov edi,ecx
	mov eax,dword ptr [edi+0x19E8]
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push eax
	call CUserPool::OnNewYearCardRecordRemoveAll
	lea ecx,[esp+8]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	je Block5

 Block1:
	push ebx
	push esi
	lea esi,[eax-0x10]
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	pop esi
	mov dword ptr [esp+0x10],0
	pop ebx

 Block5:
	mov eax,dword ptr [ebp+0x635]
	mov dword ptr [esp+8],eax
	test eax,eax
	je Block7

 Block6:
	lea ecx,[esp+8]
	push ecx
	call ZList<GW_NewYearCardRecord>::GetNext
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	add esp,4
	push edx
	push edi
	call CUserPool::OnNewYearCardRecordAdd
	cmp dword ptr [esp+8],0
	jne Block6

 Block7:
	pop edi
	pop ebp
	add esp,8
	ret
}
}
// CUserLocal::ApplyAllSkillLevelUP
_SUB_EXCEPTION_HANDLER(5090F0)
__SUB_CLASS_THIS(005090F0, __thiscall, 41341,  CUserLocal, void, long, long, long&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5090F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemOptionInfo>::ms_pInstance]
	call CItemOptionInfo::GetItemOption
	mov ecx,dword ptr [esp+0x10]
	test ecx,ecx
	je Block6

 Block1:
	mov eax,dword ptr [esp+0x28]
	imul eax,0xE0
	add eax,dword ptr [ecx+0xC]
	mov eax,dword ptr [eax+0x88]
	test eax,eax
	je Block3

 Block2:
	mov edx,dword ptr [esp+0x2C]
	add dword ptr [edx],eax

 Block3:
	lea esi,[ecx-0x10]
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block6

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block6:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret 0xC
}
}
// CUserLocal::OnDeliveryQuest
_SUB_EXCEPTION_HANDLER(50EF60)
__SUB_CLASS_THIS(0050EF60, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50EF60
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	xor ebx,ebx
	mov esi,eax
	mov dword ptr [eax+0x20B8],ebx
	call get_update_time
	mov dword ptr [esi+0x20BC],eax
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov ebp,eax
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	push esi
	mov edi,eax
	call CQuestMan::DecodeDisallowedDeliveryList
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edi
	lea eax,[esp+0x18]
	push eax
	call CItemInfo::GetItemInfo
	mov ecx,dword ptr [esp+0x14]
	cmp ecx,ebx
	sete al
	mov dword ptr [esp+0x24],ebx
	cmp al,bl
	je Block3

 Block1:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	cmp ecx,ebx
	je Block14

 Block2:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+8]
	push ecx
	call eax
	jmp Block14

 Block3:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],ebx
	je Block10

 Block4:
	lea ecx,[esp+0x2C]
	push 0x98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x24],1
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	je Block6

 Block5:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push ebx
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],ebx
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block6:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x24],bl
	cmp eax,ebx
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	cmp eax,ebx
	je Block14

 Block9:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax
	jmp Block14

 Block10:
	push 0xF4
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x2C],eax
	mov byte ptr [esp+0x24],2
	cmp eax,ebx
	je Block12

 Block11:
	push edi
	push ebp
	mov ecx,eax
	call CUIQuestDelivery::_ctor_0

 Block12:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	cmp eax,ebx
	je Block14

 Block13:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block14:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 4
}
}
// CUserLocal::ClearCombo
__SUB_CLASS_THIS0(00505660, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	push esi
	mov esi,ecx
	xor ebp,ebp
	cmp dword ptr [esi+0x4798],ebp
	jne Block11

 Block1:
	mov dword ptr [esi+0x4790],ebp
	call get_update_time
	mov dword ptr [esi+0x4794],eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x40]
	mov ecx,esi
	call edx
	sub eax,0x7D0
	neg eax
	sbb eax,eax
	and eax,0xF422F
	add eax,0x1312D11
	push eax
	mov ecx,esi
	call CUserLocal::SendSkillCancelRequest
	mov eax,dword ptr [esi+0x47A4]
	cmp eax,ebp
	je Block3

 Block2:
	mov dword ptr [esi+0x47A4],ebp
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block3:
	push ebx
	push edi
	lea edi,[esi+0x47A8]
	mov ebx,5
	lea esp,[esp]

 Block4:
	mov eax,dword ptr [edi]
	cmp eax,ebp
	je Block6

 Block5:
	mov dword ptr [edi],ebp
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block6:
	add edi,4
	sub ebx,1
	jne Block4

 Block7:
	mov eax,dword ptr [esi+0x47BC]
	pop edi
	pop ebx
	cmp eax,ebp
	je Block9

 Block8:
	mov dword ptr [esi+0x47BC],ebp
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block9:
	mov eax,dword ptr [esi+0x47C0]
	cmp eax,ebp
	je Block11

 Block10:
	mov dword ptr [esi+0x47C0],ebp
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block11:
	pop esi
	pop ebp
	ret
}
}
// CUserLocal::SetMoveAction
__SUB_CLASS_THIS(00503CE0, __thiscall, 41330,  CUserLocal, void, long, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+8]
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esp+8]
	push eax
	push ecx
	mov ecx,esi
	call CUser::SetMoveAction
	mov eax,dword ptr [esi+0x195C]
	test eax,eax
	je Block2

 Block1:
	mov edx,dword ptr [esi+0x5B8]
	mov dword ptr [eax+0x1CC],edx
	pop esi
	ret 8

 Block2:
	mov ecx,dword ptr [esi+0x5B8]
	xor eax,eax
	mov dword ptr [eax+0x1D8],ecx
	pop esi
	ret 8
}
}
// CUserLocal::OnSetDead
__SUB_CLASS_THIS(00503FC0, __thiscall, 41339,  CUserLocal, void, int32_t) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,dword ptr [esp+0xC]
	mov esi,ecx
	test edi,edi
	je Block3

 Block1:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::UI_OpenRevive
	mov eax,dword ptr [esi+0x46C0]
	test eax,eax
	je Block3

 Block2:
	push eax
	call stop_skill_sound
	add esp,4
	mov dword ptr [esi+0x46C0],0

 Block3:
	push edi
	mov ecx,esi
	call CUser::OnSetDead
	pop edi
	pop esi
	ret 4
}
}
// CUserLocal::DoActiveSkill_Flying
_SUB_EXCEPTION_HANDLER(53CEC0)
__SUB_CLASS_THIS(0053CEC0, __thiscall, 41436,  CUserLocal, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_53CEC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [edi+0x20B8],0
	jne Block10

 Block1:
	mov eax,dword ptr [edi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block10

 Block2:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0x12C
	jl Block10

 Block3:
	lea ebx,[esi+0x88]
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block10

 Block4:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block6

 Block5:
	lea ecx,[eax-0xC]
	jmp Block7

 Block6:
	xor ecx,ecx

 Block7:
	call CVecCtrlUser::IsPermitMapFlyingSkill
	test eax,eax
	jne Block11

 Block8:
	lea edx,[esp+0x34]
	push 0x1128
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x34],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x3C]
	add esp,8
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	xor eax,eax
	jmp Block22

 Block11:
	mov ecx,esi
	call CUser::IsOnLadderOrRope
	test eax,eax
	jne Block10

 Block12:
	push 0x67
	lea ecx,[esp+0x18]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x2C],1
	call get_update_time
	push eax
	lea ecx,[esp+0x18]
	call COutPacket::Encode4
	mov ebp,dword ptr [esp+0x34]
	push ebp
	lea ecx,[esp+0x18]
	call COutPacket::Encode4
	push 1
	lea ecx,[esp+0x18]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x14]
	push eax
	call CClientSocket::SendPacket
	mov dword ptr [edi+0x20B8],1
	call get_update_time
	mov dword ptr [edi+0x20BC],eax
	mov ecx,dword ptr [esi+0x5F8]
	push ecx
	call is_vehicle
	add esp,4
	test eax,eax
	je Block20

 Block13:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block15

 Block14:
	lea ecx,[eax-0xC]
	jmp Block16

 Block15:
	xor ecx,ecx

 Block16:
	cmp dword ptr [ecx+0x1A0],0
	je Block21

 Block17:
	test eax,eax
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	mov dword ptr [eax+0x200],1
	jmp Block21

 Block19:
	xor eax,eax
	mov dword ptr [eax+0x200],1
	jmp Block21

 Block20:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x14]
	push 0
	push 0x64
	push 6
	mov ecx,ebx
	mov dword ptr [esi+0x644],0x110
	call eax

 Block21:
	mov ecx,esi
	call CUserLocal::CheckPassenser
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebp
	call CSkillInfo::GetSkill
	push 0
	push 0x7FFFFFFF
	push 0
	push 6
	push 1
	push eax
	mov ecx,esi
	call CUser::ShowSkillEffect
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov eax,1

 Block22:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CUserLocal::SetPassiveSkillData
_SUB_EXCEPTION_HANDLER(5185A0)
__SUB_CLASS_THIS(005185A0, __thiscall, 41484,  CUserLocal, void, const SKILLENTRY*, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5185A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov ebx,dword ptr [esp+0x38]
	xor edi,edi
	cmp ebx,edi
	je Block32

 Block1:
	mov eax,dword ptr [esp+0x3C]
	cmp eax,edi
	jle Block32

 Block2:
	push eax
	mov ecx,ebx
	call SKILLENTRY::GetLevelData
	mov esi,eax
	mov ecx,dword ptr [esi+0x228]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x220]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add dword ptr [ecx],eax
	mov ecx,dword ptr [esi+0x234]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x22C]
	push edx
	mov dword ptr [esp+0x4C],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x4C]
	add dword ptr [ecx+4],eax
	add esp,0x10
	cmp dword ptr [ebx+0x1F0],edi
	je Block4

 Block3:
	cmp dword ptr [ebx+0x10],2
	jne Block5

 Block4:
	mov ecx,dword ptr [esi+0x240]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x238]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add esp,8
	add dword ptr [ecx+8],eax

 Block5:
	cmp dword ptr [ebx+0x1F0],edi
	je Block7

 Block6:
	cmp dword ptr [ebx+0x10],2
	jne Block8

 Block7:
	mov ecx,dword ptr [esi+0x24C]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x244]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add esp,8
	add dword ptr [ecx+0xC],eax

 Block8:
	mov ecx,dword ptr [esi+0x264]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x25C]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add dword ptr [ecx+0x10],eax
	mov ecx,dword ptr [esi+0x270]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x268]
	push edx
	mov dword ptr [esp+0x4C],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x4C]
	add dword ptr [ecx+0x14],eax
	add esp,0x10
	cmp dword ptr [ebx+0x1F0],edi
	je Block10

 Block9:
	cmp dword ptr [ebx+0x10],2
	jne Block11

 Block10:
	mov ecx,dword ptr [esi+0x27C]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x274]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add esp,8
	add dword ptr [ecx+0x18],eax

 Block11:
	mov ecx,dword ptr [esi+0x288]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x280]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add dword ptr [ecx+0x1C],eax
	mov ecx,dword ptr [esi+0x294]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x28C]
	push edx
	mov dword ptr [esp+0x4C],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x4C]
	add dword ptr [ecx+0x20],eax
	mov ecx,dword ptr [esi+0x2A0]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x298]
	push edx
	mov dword ptr [esp+0x54],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x54]
	add dword ptr [ecx+0x24],eax
	mov ecx,dword ptr [esi+0x2AC]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x2A4]
	push edx
	mov dword ptr [esp+0x5C],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x5C]
	add dword ptr [ecx+0x28],eax
	mov ecx,dword ptr [esi+0x2B8]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x2B0]
	push edx
	mov dword ptr [esp+0x64],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x64]
	add dword ptr [ecx+0x2C],eax
	add esp,0x28
	cmp dword ptr [ebx+0x1F0],edi
	je Block13

 Block12:
	cmp dword ptr [ebx+0x10],2
	jne Block14

 Block13:
	mov ecx,dword ptr [esi+0x2C4]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x2BC]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add esp,8
	add dword ptr [ecx+0x30],eax

 Block14:
	cmp dword ptr [ebx+0x1F0],edi
	je Block16

 Block15:
	cmp dword ptr [ebx+0x10],2
	jne Block17

 Block16:
	mov ecx,dword ptr [esi+0x2D0]
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x2C8]
	push edx
	mov dword ptr [esp+0x44],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x44]
	add esp,8
	add dword ptr [ecx+0x34],eax

 Block17:
	cmp dword ptr [ebx+0x1F0],edi
	je Block19

 Block18:
	cmp dword ptr [ebx+0x10],2
	jne Block20

 Block19:
	mov eax,dword ptr [esi+0x2DC]
	mov ebx,dword ptr [ebp+0x4844]
	push eax
	lea ecx,[esi+0x2D4]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	add dword ptr [ebx+0x38],eax

 Block20:
	mov edx,dword ptr [esi+0x2E8]
	mov ebx,dword ptr [ebp+0x4844]
	push edx
	lea eax,[esi+0x2E0]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x3C],eax
	mov ecx,dword ptr [esi+0x2F4]
	mov ebx,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x2EC]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x40],eax
	mov eax,dword ptr [esi+0x300]
	mov ebx,dword ptr [ebp+0x4844]
	push eax
	lea ecx,[esi+0x2F8]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x44],eax
	mov edx,dword ptr [esi+0x330]
	mov ebx,dword ptr [ebp+0x4844]
	lea eax,[esi+0x328]
	push edx
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x48],eax
	mov eax,dword ptr [esi+0x33C]
	mov ebx,dword ptr [ebp+0x4844]
	push eax
	lea ecx,[esi+0x334]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x4C],eax
	mov edx,dword ptr [esi+0x348]
	mov ebx,dword ptr [ebp+0x4844]
	push edx
	lea eax,[esi+0x340]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x50],eax
	mov ecx,dword ptr [esi+0x354]
	mov ebx,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x34C]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x54],eax
	mov eax,dword ptr [esi+0x360]
	mov ebx,dword ptr [ebp+0x4844]
	push eax
	lea ecx,[esi+0x358]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x58],eax
	mov edx,dword ptr [esi+0x36C]
	mov ebx,dword ptr [ebp+0x4844]
	add esp,0x40
	push edx
	lea eax,[esi+0x364]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x5C],eax
	mov ecx,dword ptr [esi+0x378]
	mov ebx,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x370]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x60],eax
	mov eax,dword ptr [esi+0x384]
	mov ebx,dword ptr [ebp+0x4844]
	push eax
	lea ecx,[esi+0x37C]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x64],eax
	mov edx,dword ptr [esi+0x390]
	mov ebx,dword ptr [ebp+0x4844]
	push edx
	lea eax,[esi+0x388]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x68],eax
	mov ecx,dword ptr [esi+0x39C]
	mov ebx,dword ptr [ebp+0x4844]
	push ecx
	lea edx,[esi+0x394]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x6C],eax
	mov eax,dword ptr [esi+0x3A8]
	mov ebx,dword ptr [ebp+0x4844]
	push eax
	lea ecx,[esi+0x3A0]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add dword ptr [ebx+0x70],eax
	mov eax,dword ptr [esp+0x68]
	add esp,0x30
	cmp dword ptr [eax+0x1F0],edi
	je Block32

 Block21:
	lea ebx,[eax+0x1E4]
	mov ecx,ebx
	mov dword ptr [esp+0x3C],ebx
	call ZMap<long, ZRef<AdditionPsd>, long>::GetHeadPosition
	mov dword ptr [esp+0x38],eax
	cmp eax,edi
	je Block32

 Block22:
	jmp Block25

 Block24:
	mov ebx,dword ptr [esp+0x3C]
	xor edi,edi

 Block25:
	mov dword ptr [esp+0x24],edi
	lea edx,[esp+0x20]
	push edx
	lea eax,[esp+0x3C]
	push eax
	mov ecx,ebx
	mov dword ptr [esp+0x38],edi
	call ZMap<long, ZRef<AdditionPsd>, long>::GetNext
	mov ecx,dword ptr [eax]
	mov dword ptr [esp+0x14],ecx
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x1C],edi
	call ZRef<AdditionPsd>::_Alloc
	mov edx,dword ptr [esi+0x240]
	push edx
	lea eax,[esi+0x238]
	push eax
	mov byte ptr [esp+0x38],1
	call _ZtlSecureFuseHelper<long>::call
	mov ebx,dword ptr [esp+0x2C]
	mov ecx,dword ptr [ebx]
	add ecx,eax
	xor eax,eax
	cmp ecx,edi
	mov edi,dword ptr [esp+0x24]
	setle al
	dec eax
	and eax,ecx
	mov dword ptr [edi],eax
	mov eax,dword ptr [esi+0x24C]
	push eax
	lea eax,[esi+0x244]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebx+4]
	add ecx,eax
	xor eax,eax
	test ecx,ecx
	setle al
	dec eax
	and eax,ecx
	mov dword ptr [edi+4],eax
	mov ecx,dword ptr [esi+0x27C]
	push ecx
	lea eax,[esi+0x274]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebx+8]
	add ecx,eax
	xor eax,eax
	test ecx,ecx
	setle al
	dec eax
	and eax,ecx
	mov dword ptr [edi+8],eax
	mov edx,dword ptr [esi+0x2C4]
	push edx
	lea eax,[esi+0x2BC]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebx+0xC]
	add ecx,eax
	xor eax,eax
	test ecx,ecx
	setle al
	dec eax
	and eax,ecx
	mov dword ptr [edi+0xC],eax
	mov eax,dword ptr [esi+0x2D0]
	push eax
	lea eax,[esi+0x2C8]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebx+0x10]
	add ecx,eax
	xor eax,eax
	test ecx,ecx
	setle al
	dec eax
	and eax,ecx
	mov dword ptr [edi+0x10],eax
	mov ecx,dword ptr [esi+0x2DC]
	push ecx
	lea eax,[esi+0x2D4]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebx+0x14]
	add ecx,eax
	xor eax,eax
	test ecx,ecx
	setle al
	dec eax
	and eax,ecx
	mov dword ptr [edi+0x14],eax
	mov edx,dword ptr [esi+0x330]
	push edx
	lea eax,[esi+0x328]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebx+0x18]
	add ecx,eax
	xor eax,eax
	add esp,0x38
	test ecx,ecx
	setle al
	lea edx,[esp+0x14]
	dec eax
	and eax,ecx
	lea ecx,[esp+0x18]
	mov dword ptr [edi+0x18],eax
	mov eax,dword ptr [ebp+0x4844]
	push ecx
	push edx
	lea ecx,[eax+0x74]
	call ZMap<long, ZRef<AdditionPsd>, long>::Insert
	add edi,0xFFFFFFF0
	lea eax,[edi+4]
	push eax
	mov byte ptr [esp+0x34],0
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block28

 Block26:
	lea eax,[edi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block28

 Block27:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block28:
	add ebx,0xFFFFFFF0
	lea edi,[ebx+4]
	push edi
	mov dword ptr [esp+0x20],0
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block31

 Block29:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebx,ebx
	je Block31

 Block30:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,ebx
	call edx

 Block31:
	cmp dword ptr [esp+0x38],0
	mov dword ptr [esp+0x24],0
	jne Block24

 Block32:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 8
}
}
// CUserLocal::DoActiveSkill_StatChange
_SUB_EXCEPTION_HANDLER(543C20)
__SUB_CLASS_THIS(00543C20, __thiscall, 41435,  CUserLocal, int32_t, const SKILLENTRY*, long, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_543C20
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x4C0
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x4D4]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x18],ebx
	mov edi,dword ptr [esp+0x4E4]
	xor esi,esi
	mov dword ptr [esp+0x14],esi
	mov eax,dword ptr [edi]
	cmp eax,0x1527488
	je Block7

 Block1:
	cmp eax,0x151FF5B
	je Block7

 Block2:
	cmp eax,0x151B139
	je Block7

 Block3:
	cmp eax,0x1516319
	je Block7

 Block4:
	cmp eax,0x151D84B
	je Block7

 Block5:
	cmp eax,0x1524D78
	je Block7

 Block6:
	cmp eax,0x152748B
	jne Block16

 Block7:
	mov eax,dword ptr [ebx+0x58C]
	push 0xFFFFFFFF
	push eax
	call get_weapon_type
	add esp,4
	push eax
	mov ecx,edi
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block16

 Block8:
	lea ecx,[esp+0x1C]
	push 0x1127
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x4DC],esi
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],esi
	je Block10

 Block9:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push esi
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],esi
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block10:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,esi

 Block11:
	mov dword ptr [esp+0x4DC],0xFFFFFFFF

 Block12:
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	xor eax,eax

 Block15:
	mov ecx,dword ptr [esp+0x4D4]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x4CC
	ret 0xC

 Block16:
	mov eax,dword ptr [edi]
	mov ebp,1
	cmp eax,0x3EE1AC
	je Block28

 Block17:
	cmp eax,0x40684C
	je Block28

 Block18:
	cmp eax,0x4C4F2D
	je Block28

 Block19:
	cmp eax,0xE4E5AB
	je Block28

 Block20:
	cmp eax,0x41EEE8
	je Block28

 Block21:
	cmp eax,0x4FAA8E
	je Block28

 Block22:
	cmp eax,0x1EA20AB
	je Block28

 Block23:
	cmp eax,0x417
	je Block28

 Block24:
	cmp eax,0x989A97
	je Block28

 Block25:
	cmp eax,0x1313117
	je Block28

 Block26:
	cmp eax,0x1315827
	je Block28

 Block27:
	push eax
	call is_event_vehicle_skill
	add esp,4
	test eax,eax
	je Block36

 Block28:
	lea edx,[esp+0x20]
	push edx
	mov ecx,ebx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	mov dword ptr [esp+0x4DC],ebp
	mov dword ptr [esp+0x14],ebp
	cmp eax,esi
	je Block30

 Block29:
	lea esi,[eax-0xC]

 Block30:
	mov eax,dword ptr [esi+0x1BC]
	push eax
	lea ebp,[esi+0x1B4]
	push ebp
	call _ZtlSecureFuseHelper<CLadderOrRope *>::call
	add esp,8
	test eax,eax
	je Block32

 Block31:
	mov ecx,dword ptr [esi+0x1BC]
	push ecx
	push ebp
	call _ZtlSecureFuseHelper<CLadderOrRope *>::call
	add esp,8
	cmp dword ptr [eax+4],0
	jne Block37

 Block32:
	lea edx,[esp+0x1C]
	push edx
	mov ecx,ebx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	mov dword ptr [esp+0x4DC],2
	mov dword ptr [esp+0x14],3
	test eax,eax
	je Block34

 Block33:
	lea ecx,[eax-0xC]
	jmp Block35

 Block34:
	xor ecx,ecx

 Block35:
	call CVecCtrl::IsOnRope
	test eax,eax
	jne Block37

 Block36:
	xor bl,bl
	jmp Block38

 Block37:
	mov bl,1

 Block38:
	test byte ptr [esp+0x14],2
	mov dword ptr [esp+0x4DC],1
	je Block41

 Block39:
	mov eax,dword ptr [esp+0x1C]
	and dword ptr [esp+0x14],0xFFFFFFFD
	test eax,eax
	je Block41

 Block40:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block41:
	or esi,0xFFFFFFFF
	test byte ptr [esp+0x14],1
	mov dword ptr [esp+0x4DC],esi
	je Block44

 Block42:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block44

 Block43:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block44:
	test bl,bl
	jne Block14

 Block45:
	mov eax,dword ptr [edi]
	cmp eax,0x1F78E29
	je Block47

 Block46:
	cmp eax,0x21612AA
	jne Block54

 Block47:
	mov ebx,dword ptr [esp+0x18]
	mov eax,dword ptr [ebx+0x19E4]
	test eax,eax
	je Block49

 Block48:
	add eax,0xFFFFFFF4
	jmp Block50

 Block49:
	xor eax,eax

 Block50:
	cmp dword ptr [eax+0x1A0],0
	jne Block55

 Block51:
	mov ecx,ebx
	call CUser::IsOnLadderOrRope
	test eax,eax
	jne Block55

 Block52:
	mov ecx,ebx
	call CUser::IsSwimOrFly
	test eax,eax
	jne Block55

 Block53:
	jmp Block14

 Block54:
	mov ebx,dword ptr [esp+0x18]

 Block55:
	mov eax,dword ptr [edi]
	cmp eax,0x4C4F2D
	je Block58

 Block56:
	cmp eax,0xE4E5AB
	je Block58

 Block57:
	cmp eax,0x41EEE8
	jne Block59

 Block58:
	lea ecx,[ebx+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,esi
	jg Block14

 Block59:
	mov eax,dword ptr [edi]
	cmp eax,0x417
	je Block63

 Block60:
	cmp eax,0x989A97
	je Block63

 Block61:
	cmp eax,0x1313117
	je Block63

 Block62:
	cmp eax,0x1315827
	jne Block64

 Block63:
	lea ecx,[ebx+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,esi
	jg Block14

 Block64:
	mov eax,dword ptr [edi]
	cmp eax,0x4DFCDD
	je Block76

 Block65:
	cmp eax,0x4E23EB
	je Block76

 Block66:
	cmp eax,0xE6935A
	je Block76

 Block67:
	cmp eax,0xC80EDD
	je Block76

 Block68:
	cmp eax,0x4C4F2D
	je Block76

 Block69:
	cmp eax,0xE4E5AB
	je Block76

 Block70:
	cmp eax,0x3D0CEB
	je Block76

 Block71:
	cmp eax,0xD5A36B
	je Block76

 Block72:
	cmp eax,0x417
	je Block76

 Block73:
	cmp eax,0x989A97
	je Block76

 Block74:
	cmp eax,0x1313117
	je Block76

 Block75:
	cmp eax,0x1315827
	jne Block78

 Block76:
	call get_field
	test byte ptr [eax+0x178],2
	je Block78

 Block77:
	lea eax,[esp+0x20]
	push 0x389
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x4E4],3
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x28]
	add esp,8
	mov dword ptr [esp+0x4DC],esi
	test eax,eax
	jmp Block12

 Block78:
	cmp dword ptr [edi],0xC7E7CE
	jne Block80

 Block79:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	mov ecx,ebx
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nWindWalk_
	test eax,eax
	jg Block14

 Block80:
	cmp dword ptr [edi],0x1C9C769
	jne Block82

 Block81:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	mov ecx,ebx
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nSneak_
	test eax,eax
	jg Block14

 Block82:
	call get_update_time
	cmp dword ptr [edi],0x3D0CEB
	mov esi,eax
	jne Block85

 Block83:
	lea ecx,[esp+0x20]
	push ecx
	push edi
	lea ecx,[ebx+0x46C4]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block85

 Block84:
	cmp esi,dword ptr [esp+0x20]
	jl Block14

 Block85:
	mov ebx,dword ptr [esp+0x4E8]
	mov esi,dword ptr [esp+0x18]
	xor eax,eax
	or ebp,0xFFFFFFFF
	test byte ptr [esp+0x4EC],2
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x1C],eax
	je Block87

 Block86:
	lea edx,[esp+0x14]
	push edx
	push ebx
	push edi
	mov ecx,esi
	call CUserLocal::FindParty
	mov dword ptr [esp+0x1C],eax

 Block87:
	test byte ptr [esp+0x4EC],4
	je Block94

 Block88:
	mov ecx,dword ptr [esp+0x4E4]
	push ebx
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[esp+0xBC]
	call SKILLLEVELDATA::_ctor_0
	lea eax,[esp+0x284]
	push eax
	lea ecx,[esp+0x2C]
	push ecx
	mov dword ptr [esp+0x4E4],4
	call SECRECT::ToRect
	mov edi,dword ptr [esp+0x20]
	mov esi,dword ptr [edi+0x640]
	mov edx,dword ptr [edi+4]
	mov edx,dword ptr [edx+0x10]
	add edi,4
	add esp,8
	lea eax,[esp+0x20]
	push eax
	mov ecx,edi
	call edx
	not esi
	and esi,1
	mov ebp,eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	push esi
	lea ecx,[esp+0x3C]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebp]
	push eax
	push ecx
	lea edx,[esp+0x34]
	push edx
	call adjust_rect
	mov esi,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	add esp,0x10
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	lea ecx,[esp+0xD0]
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	sub eax,dword ptr [esp+0x2C]
	lea ecx,[esp+0x40]
	push eax
	lea eax,[esp+0x5C]
	push eax
	push ecx
	mov ecx,esi
	call CMobPool::FindHitMobInRect
	mov ebp,eax
	xor esi,esi
	test ebp,ebp
	jle Block93

 Block89:
	mov eax,dword ptr [esp+esi*4+0x40]
	mov edx,dword ptr [eax+0x170]
	push edx
	add eax,0x168
	push eax
	call _ZtlSecureFuseHelper<unsigned long>::call
	mov dword ptr [esp+esi*4+0x84],eax
	mov eax,dword ptr [esp+0x4EC]
	mov eax,dword ptr [eax]
	add esp,8
	cmp eax,0x3EE1AC
	je Block91

 Block90:
	cmp eax,0x40684C
	jne Block92

 Block91:
	mov ecx,dword ptr [esp+esi*4+0x40]
	push 0
	push edi
	push 1
	call CMob::ChaseTarget

 Block92:
	inc esi
	cmp esi,ebp
	jl Block89

 Block93:
	lea ecx,[esp+0xB8]
	mov dword ptr [esp+0x4DC],0xFFFFFFFF
	call SKILLLEVELDATA::~SKILLLEVELDATA
	mov edi,dword ptr [esp+0x4E4]
	mov esi,dword ptr [esp+0x18]

 Block94:
	cmp dword ptr [edi],0x3EE1AE
	jne Block97

 Block95:
	push ebx
	push edi
	mov ecx,esi
	call CUserLocal::GetSpiritJavelinItemID
	test eax,eax
	jne Block98

 Block96:
	lea ecx,[esp+0x18]
	push 0xB48
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x4E4],5
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x20]
	add esp,8
	test eax,eax
	jmp Block11

 Block97:
	mov eax,dword ptr [esp+0x20]

 Block98:
	push 0
	push eax
	mov eax,dword ptr [esp+0x24]
	lea edx,[esp+0x84]
	push edx
	push ebp
	push eax
	push ebx
	push edi
	mov ecx,esi
	call CUserLocal::SendSkillUseRequest
	test eax,eax
	je Block14

 Block99:
	mov ecx,dword ptr [edi]
	push ecx
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	jne Block101

 Block100:
	push eax
	push 0x7FFFFFFF
	push eax
	push 6
	push ebx
	push edi
	mov ecx,esi
	call CUser::ShowSkillEffect

 Block101:
	mov edx,dword ptr [edi]
	push edx
	call is_vehicle_skill
	add esp,4
	test eax,eax
	je Block105

 Block102:
	cmp dword ptr [esi+0x471C],0
	jne Block104

 Block103:
	call get_update_time
	mov dword ptr [esi+0x4720],eax

 Block104:
	inc dword ptr [esi+0x471C]

 Block105:
	mov eax,1
	jmp Block15
}
}
// CUserLocal::CheckApplyExJablin
__SUB_CLASS_THIS(00509BF0, __thiscall, 41401,  CUserLocal, int32_t, const SKILLENTRY*, long) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push esi
	push edi
	mov esi,ecx
	test ebx,ebx
	je Block2

 Block1:
	mov edi,dword ptr [ebx]
	jmp Block3

 Block2:
	xor edi,edi

 Block3:
	cmp dword ptr [esi+0x484C],0
	je Block11

 Block4:
	push 0x3EDDCA
	call CUserLocal::GetSkillLevel
	test eax,eax
	jg Block6

 Block5:
	pop edi
	mov dword ptr [esi+0x484C],0
	pop esi
	xor eax,eax
	pop ebx
	ret 8

 Block6:
	mov eax,dword ptr [esp+0x14]
	push eax
	call is_shoot_action
	add esp,4
	test eax,eax
	je Block11

 Block7:
	test edi,edi
	jne Block9

 Block8:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	ret 8

 Block9:
	push edi
	call is_shoot_skill_not_consuming_bullet
	add esp,4
	test eax,eax
	jne Block11

 Block10:
	push ebx
	call is_shoot_skill_not_showing_bullet
	add esp,4
	test eax,eax
	je Block8

 Block11:
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	ret 8
}
}
// ActionRandMan::ActionRandMan
__SUB_CLASS_THIS(00503330, __thiscall, 24069,  ActionRandMan, void, CRand32&) {
__asm {

 Block0:
	mov eax,ecx
	mov ecx,dword ptr [esp+4]
	mov dword ptr [eax],1
	mov dword ptr [eax+4],ecx
	ret 4
}
}
// CUserLocal::AddRushElem
__SUB_CLASS_THIS(0050F6A0, __thiscall, 41457,  CUserLocal, void, CUserLocal::RUSH::RUSHELEM::RUSHSTYLE, long, long, double) {
__asm {

 Block0:
	add ecx,0x3B4C
	call ZList<CUserLocal::RUSH::RUSHELEM>::AddTail_
	fild dword ptr [esp+8]
	mov ecx,dword ptr [esp+4]
	mov edx,dword ptr [esp+8]
	fstp qword ptr [eax+0x10]
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0xC]
	fld qword ptr [esp+0x10]
	fstp qword ptr [eax+0x18]
	mov dword ptr [eax+8],edx
	mov dword ptr [eax+4],ecx
	ret 0x14
}
}
// get_stance_skill_id
__SUB(005031D0, __cdecl, 82340,  long, const long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0x840
	jg Block9

 Block1:
	je Block8

 Block2:
	sub eax,0x70
	je Block7

 Block3:
	sub eax,0xA
	je Block6

 Block4:
	sub eax,0xA
	jne Block13

 Block5:
	mov eax,0x14282A
	ret

 Block6:
	mov eax,0x12A18A
	ret

 Block7:
	mov eax,0x111AEA
	ret

 Block8:
	mov eax,0x14247EB
	ret

 Block9:
	cmp eax,0xC8C
	je Block14

 Block10:
	cmp eax,0xCED
	jle Block13

 Block11:
	cmp eax,0xCF0
	jg Block13

 Block12:
	mov eax,0x1F914CE
	ret

 Block13:
	xor eax,eax
	ret

 Block14:
	mov eax,0x1EA20AD
	ret
}
}
// sort_attackInfo_by_distance
__SUB(00504A50, __cdecl, 82364,  void, int32_t, ATTACKINFO*, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	sub esp,0xAC
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	mov dword ptr [esp+0xA8],eax
	mov ecx,dword ptr [ebp+0x10]
	push ebx
	mov ebx,dword ptr [ebp+0xC]
	push esi
	push edi
	test ecx,ecx
	jle Block12

 Block1:
	mov esi,1
	mov dword ptr [esp+0x10],esi
	add ebx,0x98
	mov dword ptr [esp+0xC],ecx
	mov edi,edi

 Block2:
	cmp esi,ecx
	jge Block11

 Block3:
	mov edx,ecx
	mov eax,ebx
	sub edx,esi

 Block4:
	cmp dword ptr [ebp+8],0
	mov esi,dword ptr [ebx-8]
	je Block7

 Block5:
	cmp esi,dword ptr [eax+0x90]
	jg Block8

 Block6:
	jmp Block9

 Block7:
	cmp esi,dword ptr [eax+0x90]
	jge Block9

 Block8:
	mov ecx,0x26
	lea esi,[ebx-0x98]
	lea edi,[esp+0x18]
	rep movsd
	mov ecx,0x26
	mov esi,eax
	lea edi,[ebx-0x98]
	rep movsd
	mov ecx,0x26
	lea esi,[esp+0x18]
	mov edi,eax
	rep movsd
	mov ecx,dword ptr [ebp+0x10]

 Block9:
	add eax,0x98
	sub edx,1
	jne Block4

 Block10:
	mov esi,dword ptr [esp+0x10]

 Block11:
	inc esi
	add ebx,0x98
	sub dword ptr [esp+0xC],1
	mov dword ptr [esp+0x10],esi
	jne Block2

 Block12:
	mov ecx,dword ptr [esp+0xB4]
	pop edi
	pop esi
	pop ebx
	xor ecx,esp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::TryRegisterTeleport
_SUB_EXCEPTION_HANDLER(513690)
__SUB_CLASS_THIS(00513690, __thiscall, 41405,  CUserLocal, int32_t, const SKILLENTRY*, long, const char*, const char*, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_513690
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x84
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x98]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor edi,edi
	cmp dword ptr [esp+0xA8],edi
	je Block15

 Block1:
	cmp dword ptr [esp+0xAC],edi
	jle Block15

 Block2:
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[ebx+0x2038]
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block5

 Block3:
	mov ebx,dword ptr [ebx+0x209C]
	cmp ebx,edi
	jne Block5

 Block4:
	call get_field
	test byte ptr [eax+0x178],2
	jne Block115

 Block5:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block115

 Block6:
	mov ecx,esi
	call CUserLocal::IsAttract
	test eax,eax
	jne Block115

 Block7:
	lea ebx,[esi+0x88]
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	mov ebp,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x40]
	mov ecx,esi
	call edx
	push eax
	call is_evan_job
	add esp,4
	test eax,eax
	je Block15

 Block8:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jle Block15

 Block9:
	cmp ebp,0xA2
	je Block15

 Block10:
	cmp ebp,0xA9
	je Block15

 Block11:
	cmp ebp,0xA3
	je Block15

 Block12:
	cmp ebp,0xB2
	je Block15

 Block13:
	cmp ebp,0xA8
	je Block15

 Block14:
	cmp ebp,0xAB
	jne Block115

 Block15:
	call get_update_time
	mov ebx,eax
	mov eax,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	mov dword ptr [esp+0x3C],ebx
	mov dword ptr [esp+0x2C],eax
	cmp dword ptr [esi+0x3B24],edi
	jne Block115

 Block16:
	cmp dword ptr [esi+0x3B34],edi
	je Block18

 Block17:
	mov ecx,dword ptr [esi+0x3B38]
	sub ecx,ebx
	test ecx,ecx
	jg Block115

 Block18:
	mov eax,dword ptr [esi+0x19E4]
	cmp eax,edi
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	jmp Block21

 Block20:
	xor eax,eax

 Block21:
	mov dword ptr [esp+0x50],eax
	cmp dword ptr [esp+0xB8],edi
	jne Block23

 Block22:
	cmp dword ptr [eax+0x1A0],edi
	je Block115

 Block23:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x54]
	push edx
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x54]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov dword ptr [esp+0x18],eax
	mov eax,dword ptr [esp+0xB4]
	mov dword ptr [esp+0x30],edi
	mov dword ptr [esp+0x38],edi
	cmp eax,edi
	je Block28

 Block24:
	mov ecx,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	push eax
	call CPortalList::FindPortalByName
	mov dword ptr [esp+0x24],eax
	cmp eax,edi
	je Block115

 Block25:
	mov edi,dword ptr [eax+0x10]
	mov ebp,dword ptr [eax+0xC]
	mov ecx,dword ptr [esp+0x2C]
	push 1
	push 0x7FFFFFFF
	push 0
	sub edi,0xA
	push edi
	push ebp
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test eax,eax
	je Block115

 Block26:
	cmp dword ptr [esp+0xB0],0
	je Block110

 Block27:
	push 0x71
	lea ecx,[esp+0x44]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0xA0],0
	call get_field
	mov cl,byte ptr [eax+0x168]
	mov byte ptr [esp+0x18],cl
	mov edx,dword ptr [esp+0x18]
	push edx
	lea ecx,[esp+0x44]
	call COutPacket::Encode1
	mov eax,dword ptr [esp+0xB0]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push 0xFFFFFFFF
	push eax
	call ZXString<char>::CreateFromCharStr
	lea ecx,[esp+0x44]
	call COutPacket::EncodeStr
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	lea ebx,[esi+4]
	lea eax,[esp+0x54]
	push eax
	mov ecx,ebx
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[esp+0x44]
	call COutPacket::Encode2
	mov edx,dword ptr [ebx]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x54]
	push eax
	mov ecx,ebx
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[esp+0x44]
	call COutPacket::Encode2
	mov ebx,dword ptr [esp+0x24]
	movzx ecx,word ptr [ebx+0xC]
	push ecx
	lea ecx,[esp+0x44]
	call COutPacket::Encode2
	movzx edx,word ptr [ebx+0x10]
	push edx
	lea ecx,[esp+0x44]
	call COutPacket::Encode2
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x40]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0x44]
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	jmp Block109

 Block28:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	call CInputSystem::IsJoystickEnabled
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	test eax,eax
	jne Block30

 Block29:
	push 0x27
	mov ebx,ecx
	call CInputSystem::IsKeyPressed
	mov edi,eax
	neg edi
	sbb edi,edi
	push 0x25
	mov ecx,ebx
	neg edi
	call CInputSystem::IsKeyPressed
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	neg eax
	sbb eax,eax
	add eax,edi
	push 0x28
	mov dword ptr [esp+0x28],eax
	mov ebx,ecx
	call CInputSystem::IsKeyPressed
	mov edi,eax
	neg edi
	sbb edi,edi
	push 0x26
	mov ecx,ebx
	neg edi
	call CInputSystem::IsKeyPressed
	neg eax
	sbb eax,eax
	add eax,edi
	jmp Block45

 Block30:
	push 0x25
	call CInputSystem::IsKeyPressed
	test eax,eax
	jne Block33

 Block31:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 2
	call CInputSystem::IsJoyBtnPressed
	test eax,eax
	jne Block33

 Block32:
	xor ebx,ebx
	jmp Block34

 Block33:
	or ebx,0xFFFFFFFF

 Block34:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x27
	call CInputSystem::IsKeyPressed
	test eax,eax
	jne Block36

 Block35:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 3
	call CInputSystem::IsJoyBtnPressed
	test eax,eax
	je Block37

 Block36:
	mov eax,1

 Block37:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	add eax,ebx
	push 0x26
	mov dword ptr [esp+0x28],eax
	call CInputSystem::IsKeyPressed
	test eax,eax
	jne Block40

 Block38:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push edi
	call CInputSystem::IsJoyBtnPressed
	test eax,eax
	jne Block40

 Block39:
	xor ebx,ebx
	jmp Block41

 Block40:
	or ebx,0xFFFFFFFF

 Block41:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x28
	call CInputSystem::IsKeyPressed
	test eax,eax
	jne Block43

 Block42:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 1
	call CInputSystem::IsJoyBtnPressed
	test eax,eax
	je Block44

 Block43:
	mov eax,1

 Block44:
	add eax,ebx

 Block45:
	mov ecx,dword ptr [esp+0xAC]
	push ecx
	mov ecx,dword ptr [esp+0xAC]
	mov dword ptr [esp+0x18],eax
	call SKILLENTRY::GetLevelData
	mov edx,dword ptr [eax+0x204]
	push edx
	add eax,0x1FC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x20]
	add esp,8
	mov ebx,eax
	lea eax,[esp+0x20]
	push eax
	push 0x20361F
	push ebp
	mov dword ptr [esp+0x2C],0
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	jg Block49

 Block46:
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push 0x21BCBF
	push ebp
	mov dword ptr [esp+0x2C],0
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	jg Block49

 Block47:
	mov ecx,dword ptr [esp+0x18]
	lea edx,[esp+0x20]
	push edx
	push 0x23435F
	push ebp
	mov dword ptr [esp+0x2C],0
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	jg Block49

 Block48:
	mov ecx,dword ptr [esp+0x18]
	lea eax,[esp+0x20]
	push eax
	push 0x1E9F9A2
	push ebp
	mov dword ptr [esp+0x2C],0
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	jle Block59

 Block49:
	mov ecx,dword ptr [esp+0x20]
	test ecx,ecx
	je Block59

 Block50:
	push edi
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	mov ebp,eax
	test ebp,ebp
	jne Block52

 Block51:
	lea ebp,[eax+0x64]
	jmp Block53

 Block52:
	jle Block54

 Block53:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nTeleportMasteryOn_
	test eax,eax
	jg Block55

 Block54:
	xor ebp,ebp

 Block55:
	mov ecx,dword ptr [esp+0x20]
	push edi
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	add ebx,eax
	cmp ebx,0xA
	jg Block57

 Block56:
	mov ebx,0xA

 Block57:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x64
	div ecx
	inc edx
	cmp edx,ebp
	ja Block59

 Block58:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [edx]
	mov dword ptr [esp+0x30],1
	mov dword ptr [esp+0x38],eax

 Block59:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x944]
	push ecx
	add eax,0x93C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block61

 Block60:
	mov edx,dword ptr [esp+0x24]
	mov eax,dword ptr [esp+0x14]
	neg edx
	neg eax
	mov dword ptr [esp+0x24],edx
	mov dword ptr [esp+0x14],eax

 Block61:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[esi+4]
	lea eax,[esp+0x54]
	push eax
	call edx
	mov ebp,dword ptr [eax]
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x24]
	mov ecx,ebx
	imul ebx,dword ptr [esp+0x14]
	imul ecx,eax
	add ecx,ebp
	mov dword ptr [esp+0x34],ebx
	add ebx,edi
	mov dword ptr [esp+0x18],ecx
	test eax,eax
	je Block67

 Block62:
	mov eax,ecx
	cmp eax,ebp
	mov ecx,ebp
	jl Block64

 Block63:
	mov ecx,eax

 Block64:
	cmp ebp,eax
	jge Block66

 Block65:
	mov eax,ebp

 Block66:
	push ebx
	push ecx
	lea edx,[edi-0x41]
	push edx
	push eax
	jmp Block73

 Block67:
	cmp dword ptr [esp+0x14],0
	je Block115

 Block68:
	cmp ebx,edi
	mov ecx,edi
	jl Block70

 Block69:
	mov ecx,ebx

 Block70:
	cmp edi,ebx
	mov eax,edi
	jl Block72

 Block71:
	mov eax,ebx

 Block72:
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	add ecx,0x14
	push ecx
	add eax,0xFFFFFFBF
	push eax
	lea edx,[ebp-0x14]
	push edx

 Block73:
	lea eax,[esp+0x50]
	push eax
	call SetRect
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0xF
	lea ecx,[esp+0x78]
	push ecx
	mov ecx,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	lea edx,[esp+0x60]
	push edx
	call CMobPool::FindHitMobInRect
	test eax,eax
	je Block79

 Block74:
	xor ecx,ecx
	test eax,eax
	jle Block79

 Block75:
	nop

 Block76:
	mov edx,dword ptr [esp+ecx*4+0x5C]
	test edx,edx
	je Block78

 Block77:
	mov edx,dword ptr [edx+0x174]
	cmp dword ptr [edx+0x2A4],0
	jne Block115

 Block78:
	inc ecx
	cmp ecx,eax
	jl Block76

 Block79:
	cmp dword ptr [esp+0x24],0
	je Block88

 Block80:
	mov ebp,dword ptr [esp+0x18]
	push 1
	lea eax,[edi+0x50]
	push eax
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,dword ptr [esp+0x38]
	push edi
	push ebp
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov ecx,dword ptr [esp+0x2C]
	lea edx,[edi-0x50]
	push edx
	mov ebx,eax
	lea eax,[esp+0x28]
	push eax
	push edi
	push ebp
	call CWvsPhysicalSpace2D::GetFootholdAbove
	test ebx,ebx
	je Block86

 Block81:
	test eax,eax
	je Block85

 Block82:
	mov ecx,dword ptr [esp+0x18]
	mov eax,dword ptr [esp+0x24]
	mov edx,edi
	mov ebx,ecx
	sub edx,eax
	sub ebx,edi
	cmp ebx,edx
	jle Block84

 Block83:
	lea edi,[eax-1]
	jmp Block107

 Block84:
	lea edi,[ecx-1]
	jmp Block107

 Block85:
	mov edi,dword ptr [esp+0x18]
	dec edi
	jmp Block107

 Block86:
	test eax,eax
	je Block115

 Block87:
	mov edi,dword ptr [esp+0x24]
	dec edi
	jmp Block107

 Block88:
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block115

 Block89:
	mov dword ptr [esp+0x28],0
	mov dword ptr [esp+0xA0],1
	jge Block93

 Block90:
	push 1
	push 0x7FFFFFFF
	lea eax,[esp+0x1C]
	push eax
	push ebx
	mov ebx,dword ptr [esp+0x3C]
	push ebp
	mov ecx,ebx
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	push eax
	lea ecx,[esp+0x28]
	call ZRef<CStaticFoothold>::op_assign_ptr
	cmp dword ptr [esp+0x14],edi
	je Block105

 Block91:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x18]
	lea ecx,[edi-1]
	mov dword ptr [esp+0x18],ecx
	lea ecx,[esi+4]
	mov dword ptr [esp+0x2C],ebp
	call eax
	push eax
	mov eax,dword ptr [esp+0x18]
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x34]
	push edx
	dec eax
	push eax
	push ebp
	mov ecx,ebx
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	je Block105

 Block92:
	mov dword ptr [esp+0x14],edi
	jmp Block105

 Block93:
	test eax,eax
	jle Block113

 Block94:
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,esi
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	test eax,eax
	je Block96

 Block95:
	lea edi,[eax-0xC]
	jmp Block97

 Block96:
	xor edi,edi

 Block97:
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	je Block99

 Block98:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block99:
	mov eax,dword ptr [edi+0x1A0]
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block101

 Block100:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block101:
	mov edi,dword ptr [esp+0x2C]
	push 0x80000000
	lea ecx,[esp+0x18]
	push ecx
	push ebx
	push ebp
	mov ecx,edi
	mov byte ptr [esp+0xB0],2
	call CWvsPhysicalSpace2D::GetFootholdAbove
	push eax
	lea ecx,[esp+0x28]
	call ZRef<CStaticFoothold>::op_assign_ptr
	cmp dword ptr [esp+0x28],0
	je Block103

 Block102:
	mov edx,dword ptr [esp+0x1C]
	cmp dword ptr [esp+0x28],edx
	jne Block104

 Block103:
	mov eax,dword ptr [esp+0x34]
	push 1
	add eax,ebx
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push ebx
	push ebp
	mov ecx,edi
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	push eax
	lea ecx,[esp+0x28]
	call ZRef<CStaticFoothold>::op_assign_ptr

 Block104:
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xA0],1
	call ZRef<CStaticFoothold>::~ZRef<CStaticFoothold>

 Block105:
	cmp dword ptr [esp+0x28],0
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	lea ecx,[esp+0x24]
	je Block114

 Block106:
	mov edi,dword ptr [esp+0x14]
	dec edi
	call ZRef<CStaticFoothold>::~ZRef<CStaticFoothold>

 Block107:
	mov edx,dword ptr [esp+0xAC]
	mov ebx,dword ptr [esp+0xA8]
	push 0
	push 0
	push 0
	push 0xFFFFFFFF
	push 0
	push edx
	push ebx
	mov ecx,esi
	call CUserLocal::SendSkillUseRequest
	test eax,eax
	je Block115

 Block108:
	mov eax,dword ptr [esp+0xAC]
	push 0
	push 0x7FFFFFFF
	push 0
	push 6
	push eax
	push ebx
	mov ecx,esi
	call CUser::ShowSkillEffect

 Block109:
	mov ebx,dword ptr [esp+0x3C]

 Block110:
	mov eax,dword ptr [esp+0x38]
	mov edx,dword ptr [esp+0x30]
	xor ecx,ecx
	cmp dword ptr [esp+0xB4],ecx
	push 0xC00614A4
	setne cl
	mov dword ptr [esi+0x3B34],ebx
	mov dword ptr [esi+0x3B40],eax
	add ebx,0x78
	mov dword ptr [esi+0x3B24],1
	mov dword ptr [esi+0x3B2C],ebp
	mov dword ptr [esi+0x3B30],edi
	push ecx
	mov eax,esp
	mov dword ptr [esi+0x3B28],ecx
	mov dword ptr [esi+0x3B38],ebx
	mov dword ptr [esi+0x3B3C],edx
	mov dword ptr [esp+0x40],esp
	mov dword ptr [eax],0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0xB8],3
	call CUser::GetVecCtrl_0
	lea edx,[esp+0x48]
	push 0x8AC
	push edx
	mov byte ptr [esp+0xBC],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xB4],5
	push 0
	mov byte ptr [esp+0xB8],6
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	call CAnimationDisplayer::Effect_General
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	test eax,eax
	je Block112

 Block111:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block112:
	mov ecx,dword ptr [esp+0x50]
	push 4
	call CVecCtrl::SetMovePathAttribute
	push 1
	push 1
	mov ecx,esi
	call CUser::SetSetItemBackground
	mov ecx,esi
	call CUserLocal::CheckPassenser
	mov eax,1
	jmp Block116

 Block113:
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	lea ecx,[esp+0x24]

 Block114:
	call ZRef<CStaticFoothold>::~ZRef<CStaticFoothold>

 Block115:
	xor eax,eax

 Block116:
	mov ecx,dword ptr [esp+0x98]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x90
	ret 0x14
}
}
// CUserLocal::TryDoingFlyingRush
__SUB_CLASS_THIS0(0050BC10, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0x54
	push ebx
	push ebp
	push esi
	mov ebx,ecx
	call get_update_time
	lea esi,[ebx+0x88]
	mov ecx,esi
	call CAvatar::GetOneTimeAction
	mov edx,dword ptr [ebx+0x3B44]
	xor ecx,ecx
	cmp eax,0xFFFFFFFF
	setg cl
	push edx
	imul ecx,0x974
	lea ebp,[ecx+esi+0x5C0]
	mov dword ptr [esp+0x30],ebp
	call is_jump_rush_skill
	add esp,4
	xor esi,esi
	test eax,eax
	je Block5

 Block1:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,esi
	je Block3

 Block2:
	lea ecx,[eax-0xC]
	jmp Block4

 Block3:
	xor ecx,ecx

 Block4:
	call CVecCtrl::IsFreeFalling
	test eax,eax
	jne Block13

 Block5:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,esi
	je Block7

 Block6:
	lea ecx,[eax-0xC]
	jmp Block8

 Block7:
	xor ecx,ecx

 Block8:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+8]
	call edx
	test eax,eax
	jne Block13

 Block9:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,esi
	je Block11

 Block10:
	lea ecx,[eax-0xC]
	jmp Block12

 Block11:
	xor ecx,ecx

 Block12:
	call CVecCtrl::IsSwimming
	mov dword ptr [esp+0x30],esi
	test eax,eax
	je Block14

 Block13:
	mov dword ptr [esp+0x30],1

 Block14:
	cmp dword ptr [ebx+0x3B48],esi
	je Block171

 Block15:
	cmp dword ptr [ebx+0x3B54],esi
	je Block20

 Block16:
	jmp Block18

 Block18:
	mov eax,dword ptr [ebx+0x3B58]
	cmp dword ptr [eax+4],esi
	jg Block23

 Block19:
	mov edx,dword ptr [ebx+0x3B58]
	lea ecx,[ebx+0x3B4C]
	push edx
	call ZList<CUserLocal::RUSH::RUSHELEM>::RemoveAt
	cmp dword ptr [ebx+0x3B54],esi
	jne Block18

 Block20:
	cmp dword ptr [ebp+0x10],esi
	je Block22

 Block21:
	mov dword ptr [ebp+0x10],esi
	mov dword ptr [ebp+4],esi
	mov dword ptr [ebp+0x18],esi

 Block22:
	mov dword ptr [ebx+0x3B48],esi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret

 Block23:
	mov eax,dword ptr [ebx+0x3B44]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edi
	push eax
	call CSkillInfo::GetSkill
	mov edi,dword ptr [eax+0x50]
	mov edx,dword ptr [ebx+4]
	mov edx,dword ptr [edx+0x10]
	mov esi,dword ptr [ebx+0x3B58]
	lea ecx,[ebx+4]
	mov dword ptr [esp+0x44],eax
	lea eax,[esp+0x4C]
	push eax
	call edx
	cmp dword ptr [ebp],edi
	jg Block30

 Block24:
	mov eax,dword ptr [ebx+0x19E4]
	test eax,eax
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	jmp Block27

 Block26:
	xor eax,eax

 Block27:
	mov ecx,dword ptr [esp+0x50]
	mov edx,dword ptr [esp+0x4C]
	lea esi,[eax+0xC]
	mov eax,dword ptr [esi]
	mov eax,dword ptr [eax+0x40]
	push ecx
	push edx
	push esi
	call eax
	test eax,eax
	jge Block29

 Block28:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block29:
	mov ecx,dword ptr [esp+0x4C]
	lea esi,[ebx+0x1984]
	push ecx
	lea ecx,[esi+0xC]
	call TSecType<long>::SetData
	mov edx,dword ptr [esp+0x50]
	push edx
	mov ecx,esi
	call TSecType<long>::SetData
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret

 Block30:
	mov eax,dword ptr [esi+8]
	add dword ptr [esi+4],0xFFFFFFE2
	lea ebp,[esi+8]
	mov dword ptr [esp+0x48],ebp
	mov dword ptr [esp+0x2C],eax
	test eax,eax
	je Block170

 Block31:
	mov edi,dword ptr [esi]
	mov eax,dword ptr [esp+0x4C]
	mov ecx,dword ptr [esp+0x50]
	mov edx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	mov dword ptr [esp+0x5C],eax
	mov dword ptr [esp+0x60],ecx
	mov dword ptr [esp+0x28],edx
	cmp edi,2
	jne Block33

 Block32:
	fild dword ptr [esp+0x2C]
	fmul qword ptr [__real_3fe999999999999a]
	call __ftol2_sse
	mov dword ptr [ebp],eax

 Block33:
	cmp edi,3
	jne Block35

 Block34:
	fld qword ptr [esi+0x18]
	fadd qword ptr [esi+0x10]
	fst qword ptr [esi+0x10]
	call __ftol2_sse
	mov dword ptr [ebp],eax

 Block35:
	mov ecx,dword ptr [esp+0x4C]
	add ecx,dword ptr [ebp]
	mov dword ptr [esp+0x4C],ecx
	mov eax,dword ptr [ebp]
	cmp eax,0x1E
	jge Block38

 Block36:
	mov esi,dword ptr [esi]
	cmp esi,2
	je Block38

 Block37:
	mov dword ptr [esp+0x24],0x1E
	cmp esi,3
	jne Block39

 Block38:
	mov dword ptr [esp+0x24],eax

 Block39:
	mov eax,dword ptr [esp+0x24]
	mov ebp,dword ptr [esp+0x28]
	cdq
	mov edi,eax
	mov eax,dword ptr [esp+0x50]
	xor edi,edx
	sub edi,edx
	push 1
	lea edx,[edi+eax]
	push edx
	lea edx,[esp+0x20]
	push edx
	push eax
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x40],edi
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov esi,eax
	mov eax,dword ptr [esp+0x50]
	mov ecx,eax
	sub ecx,edi
	push ecx
	lea edx,[esp+0x20]
	push edx
	push eax
	mov eax,dword ptr [esp+0x58]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x20],esi
	call CWvsPhysicalSpace2D::GetFootholdAbove
	mov ebp,eax
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x20],0
	test esi,esi
	jne Block41

 Block40:
	mov eax,dword ptr [esp+0x50]

 Block41:
	mov ecx,dword ptr [esp+0x4C]
	push 1
	push 0x7FFFFFFF
	push 0
	add eax,2
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x3C]
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test ebp,ebp
	jne Block43

 Block42:
	test esi,esi
	je Block72

 Block43:
	mov ecx,dword ptr [ebx+0x3B64]
	test ecx,ecx
	je Block108

 Block44:
	cmp dword ptr [ecx-4],0
	je Block108

 Block45:
	test eax,eax
	je Block108

 Block46:
	mov ecx,dword ptr [esp+0x18]
	xor esi,esi
	jmp Block48

 Block48:
	mov eax,dword ptr [ebx+0x3B64]
	test eax,eax
	je Block109

 Block49:
	cmp esi,dword ptr [eax-4]
	jae Block109

 Block50:
	test ebp,ebp
	je Block53

 Block51:
	mov eax,dword ptr [ebp+0x38]
	lea ecx,[eax+0x30]
	call TSecType<int>::GetData
	test eax,eax
	jne Block108

 Block52:
	mov ecx,dword ptr [esp+0x18]

 Block53:
	cmp dword ptr [esp+0x10],0
	je Block56

 Block54:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+0x38]
	lea ecx,[eax+0x30]
	call TSecType<int>::GetData
	test eax,eax
	jne Block108

 Block55:
	mov ecx,dword ptr [esp+0x18]

 Block56:
	mov eax,dword ptr [ebx+0x640]
	and eax,1
	je Block58

 Block57:
	mov ebp,dword ptr [esp+0x4C]
	mov edi,dword ptr [esp+0x24]
	mov edx,dword ptr [ebx+0x3B64]
	add edi,ebp
	cmp edi,dword ptr [edx+esi*8]
	mov ebp,dword ptr [esp+0x14]
	mov edi,dword ptr [esp+0x2C]
	jle Block68

 Block58:
	test eax,eax
	jne Block60

 Block59:
	mov edx,dword ptr [esp+0x4C]
	sub edx,dword ptr [esp+0x24]
	mov eax,dword ptr [ebx+0x3B64]
	cmp edx,dword ptr [eax+esi*8]
	mov ebp,dword ptr [esp+0x14]
	jge Block68

 Block60:
	test ebp,ebp
	je Block64

 Block61:
	mov eax,dword ptr [ebx+0x3B64]
	mov eax,dword ptr [eax+esi*8+4]
	cmp eax,dword ptr [esp+0x1C]
	jle Block64

 Block62:
	sub eax,dword ptr [esp+0x1C]
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,edi
	jle Block64

 Block63:
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x20],1

 Block64:
	cmp dword ptr [esp+0x10],0
	je Block67

 Block65:
	mov edx,dword ptr [ebx+0x3B64]
	mov eax,dword ptr [edx+esi*8+4]
	cmp eax,ecx
	jle Block67

 Block66:
	sub eax,ecx
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,edi
	jg Block69

 Block67:
	cmp dword ptr [esp+0x20],0
	jne Block109

 Block68:
	inc esi
	jmp Block48

 Block69:
	mov dword ptr [esp+0x10],0
	mov dword ptr [esp+0x20],1

 Block70:
	test ebp,ebp
	jne Block118

 Block71:
	cmp dword ptr [esp+0x10],ebp
	jne Block167

 Block72:
	cmp dword ptr [esp+0x34],0
	je Block167

 Block73:
	mov ecx,dword ptr [ebx+0x3B44]
	push ecx
	call is_jump_rush_skill
	add esp,4
	test eax,eax
	je Block78

 Block74:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x34]
	push edx
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0x34]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,dword ptr [ebx+0x3B44]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	xor ebp,ebp
	push ebp
	push eax
	push esi
	call CSkillInfo::GetSkillLevel_0
	mov esi,eax
	cmp esi,ebp
	jle Block113

 Block75:
	mov dword ptr [esp+0x34],ebp
	mov dword ptr [esp+0x38],ebp
	mov dword ptr [esp+0x3C],ebp
	mov dword ptr [esp+0x40],ebp
	mov ebp,dword ptr [esp+0x44]
	push esi
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[esp+0x38]
	push ecx
	call SECRECT::ToRect
	add esp,8
	push esi
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	mov edx,dword ptr [esp+0x40]
	sub edx,dword ptr [esp+0x38]
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x44],edx
	fild dword ptr [esp+0x44]
	sub ecx,eax
	sub ecx,dword ptr [esp+0x34]
	mov edx,dword ptr [esp+0x48]
	mov dword ptr [esp+0x44],ecx
	fild dword ptr [esp+0x44]
	fdivp st(1),st(0)
	fimul dword ptr [edx]
	call __ftol2_sse
	cdq
	xor eax,edx
	sub eax,edx
	lea ecx,[edi+edi-2]
	cmp eax,ecx
	jl Block77

 Block76:
	mov eax,ecx

 Block77:
	add dword ptr [esp+0x50],eax

 Block78:
	mov eax,dword ptr [esp+0x50]
	mov esi,dword ptr [esp+0x28]
	push 1
	lea ecx,[edi+eax]
	push ecx
	lea edx,[esp+0x20]
	push edx
	push eax
	mov eax,dword ptr [esp+0x5C]
	push eax
	mov ecx,esi
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov dword ptr [esp+0x10],eax
	mov eax,dword ptr [esp+0x50]
	mov ecx,eax
	sub ecx,edi
	push ecx
	lea edx,[esp+0x20]
	push edx
	push eax
	mov eax,dword ptr [esp+0x58]
	push eax
	mov ecx,esi
	call CWvsPhysicalSpace2D::GetFootholdAbove
	cmp dword ptr [esp+0x10],0
	mov ebp,eax
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x14],ebp
	jne Block80

 Block79:
	mov eax,dword ptr [esp+0x50]

 Block80:
	mov ecx,dword ptr [esp+0x4C]
	push 1
	push 0x7FFFFFFF
	push 0
	add eax,2
	push eax
	push ecx
	mov ecx,esi
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test ebp,ebp
	jne Block82

 Block81:
	cmp dword ptr [esp+0x10],ebp
	je Block117

 Block82:
	mov ecx,dword ptr [ebx+0x3B64]
	test ecx,ecx
	je Block126

 Block83:
	cmp dword ptr [ecx-4],0
	je Block126

 Block84:
	test eax,eax
	je Block126

 Block85:
	mov ecx,dword ptr [esp+0x18]
	xor esi,esi
	jmp Block87

 Block87:
	mov eax,dword ptr [ebx+0x3B64]
	test eax,eax
	je Block127

 Block88:
	cmp esi,dword ptr [eax-4]
	jae Block127

 Block89:
	test ebp,ebp
	je Block92

 Block90:
	mov eax,dword ptr [ebp+0x38]
	lea ecx,[eax+0x30]
	call TSecType<int>::GetData
	test eax,eax
	jne Block126

 Block91:
	mov ecx,dword ptr [esp+0x18]

 Block92:
	cmp dword ptr [esp+0x10],0
	je Block95

 Block93:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+0x38]
	lea ecx,[eax+0x30]
	call TSecType<int>::GetData
	test eax,eax
	jne Block126

 Block94:
	mov ecx,dword ptr [esp+0x18]

 Block95:
	mov eax,dword ptr [ebx+0x640]
	and eax,1
	je Block97

 Block96:
	mov ebp,dword ptr [esp+0x4C]
	mov edi,dword ptr [esp+0x24]
	mov edx,dword ptr [ebx+0x3B64]
	add edi,ebp
	cmp edi,dword ptr [edx+esi*8]
	mov ebp,dword ptr [esp+0x14]
	mov edi,dword ptr [esp+0x2C]
	jle Block107

 Block97:
	test eax,eax
	jne Block99

 Block98:
	mov edx,dword ptr [esp+0x4C]
	sub edx,dword ptr [esp+0x24]
	mov eax,dword ptr [ebx+0x3B64]
	cmp edx,dword ptr [eax+esi*8]
	mov ebp,dword ptr [esp+0x14]
	jge Block107

 Block99:
	test ebp,ebp
	je Block103

 Block100:
	mov eax,dword ptr [ebx+0x3B64]
	mov eax,dword ptr [eax+esi*8+4]
	cmp eax,dword ptr [esp+0x1C]
	jle Block103

 Block101:
	sub eax,dword ptr [esp+0x1C]
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,edi
	jle Block103

 Block102:
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x20],1

 Block103:
	cmp dword ptr [esp+0x10],0
	je Block106

 Block104:
	mov edx,dword ptr [ebx+0x3B64]
	mov eax,dword ptr [edx+esi*8+4]
	cmp eax,ecx
	jle Block106

 Block105:
	sub eax,ecx
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,edi
	jg Block116

 Block106:
	cmp dword ptr [esp+0x20],0
	jne Block127

 Block107:
	inc esi
	jmp Block87

 Block108:
	mov ecx,dword ptr [esp+0x18]

 Block109:
	cmp dword ptr [esp+0x10],0
	je Block70

 Block110:
	test ebp,ebp
	je Block129

 Block111:
	mov eax,dword ptr [esp+0x50]
	mov edx,dword ptr [esp+0x1C]
	mov esi,eax
	mov edi,ecx
	sub esi,edx
	sub edi,eax
	cmp edi,esi
	jle Block129

 Block112:
	dec edx
	mov dword ptr [esp+0x50],edx
	jmp Block119

 Block113:
	mov eax,dword ptr [esp+0x30]
	cmp dword ptr [eax+0x10],ebp
	je Block115

 Block114:
	mov dword ptr [eax+0x10],ebp
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+0x18],ebp

 Block115:
	pop edi
	pop esi
	mov dword ptr [ebx+0x3B48],ebp
	pop ebp
	pop ebx
	add esp,0x54
	ret

 Block116:
	mov dword ptr [esp+0x10],0
	mov dword ptr [esp+0x20],1

 Block117:
	test ebp,ebp
	je Block119

 Block118:
	mov eax,dword ptr [esp+0x1C]
	dec eax
	mov dword ptr [esp+0x50],eax

 Block119:
	mov ecx,dword ptr [esp+0x4C]
	mov edx,dword ptr [esp+0x50]
	xor edi,edi
	mov dword ptr [esp+0x54],ecx
	mov dword ptr [esp+0x58],edx
	cmp dword ptr [esp+0x20],edi
	jne Block130

 Block120:
	mov eax,dword ptr [ebx+4]
	mov edx,dword ptr [eax+0x18]
	lea ecx,[ebx+4]
	call edx
	mov edx,dword ptr [esp+0x60]
	mov esi,dword ptr [esp+0x28]
	push eax
	lea eax,[esp+0x5C]
	push eax
	mov eax,dword ptr [esp+0x64]
	lea ecx,[esp+0x5C]
	push ecx
	push edx
	push eax
	mov ecx,esi
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	jne Block131

 Block121:
	cmp dword ptr [esp+0x10],edi
	jne Block131

 Block122:
	cmp ebp,edi
	jne Block131

 Block123:
	mov eax,dword ptr [esp+0x30]
	cmp dword ptr [eax+0x10],edi
	je Block125

 Block124:
	mov dword ptr [eax+0x10],edi
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+0x18],edi

 Block125:
	mov dword ptr [ebx+0x3B48],edi
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret

 Block126:
	mov ecx,dword ptr [esp+0x18]

 Block127:
	cmp dword ptr [esp+0x10],0
	je Block117

 Block128:
	jmp Block110

 Block129:
	dec ecx
	mov dword ptr [esp+0x50],ecx
	jmp Block119

 Block130:
	mov esi,dword ptr [esp+0x28]

 Block131:
	mov eax,dword ptr [esp+0x4C]
	cmp eax,dword ptr [esi+0x24]
	jl Block135

 Block132:
	mov ecx,dword ptr [esi+0x2C]
	dec ecx
	cmp eax,ecx
	jg Block135

 Block133:
	mov eax,dword ptr [esp+0x50]
	cmp eax,dword ptr [esi+0x28]
	jl Block135

 Block134:
	mov edx,dword ptr [esi+0x30]
	dec edx
	cmp eax,edx
	jle Block137

 Block135:
	cmp dword ptr [esp+0x10],edi
	jne Block137

 Block136:
	cmp ebp,edi
	je Block123

 Block137:
	mov eax,dword ptr [ebx+0x3B44]
	cmp eax,0x1E84BE8
	jg Block151

 Block138:
	je Block158

 Block139:
	cmp eax,0x141F5E2
	jg Block145

 Block140:
	cmp eax,0x141F5E1
	jge Block148

 Block141:
	cmp eax,0x1312D0E
	jl Block163

 Block142:
	cmp eax,0x1312D0F
	jle Block148

 Block143:
	cmp eax,0x1406F42
	je Block148

 Block144:
	jmp Block163

 Block145:
	cmp eax,0x142440A
	jg Block163

 Block146:
	cmp eax,0x1424409
	jge Block148

 Block147:
	add eax,0xFEBDE309
	cmp eax,1
	ja Block163

 Block148:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,edi
	je Block150

 Block149:
	lea ecx,[eax-0xC]
	push 0xF
	jmp Block162

 Block150:
	xor ecx,ecx
	push 0xF
	jmp Block162

 Block151:
	cmp eax,0x1E9F99A
	jg Block157

 Block152:
	je Block158

 Block153:
	cmp eax,0x1E84BEF
	jl Block163

 Block154:
	cmp eax,0x1E84BF3
	jle Block158

 Block155:
	cmp eax,0x1E9D288
	je Block158

 Block156:
	jmp Block163

 Block157:
	cmp eax,0x1EA20AA
	jne Block163

 Block158:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,edi
	je Block160

 Block159:
	lea ecx,[eax-0xC]
	jmp Block161

 Block160:
	xor ecx,ecx

 Block161:
	push 0x13

 Block162:
	call CVecCtrl::SetMovePathAttribute

 Block163:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,edi
	je Block165

 Block164:
	add eax,0xFFFFFFF4
	jmp Block166

 Block165:
	xor eax,eax

 Block166:
	mov ecx,dword ptr [esp+0x50]
	mov edx,dword ptr [esp+0x4C]
	push ecx
	push edx
	lea ecx,[eax+0xC]
	call IWzShape2D::Move
	mov eax,dword ptr [esp+0x4C]
	lea esi,[ebx+0x1984]
	push eax
	lea ecx,[esi+0xC]
	call TSecType<long>::SetData
	mov ecx,dword ptr [esp+0x50]
	push ecx
	mov ecx,esi
	call TSecType<long>::SetData
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret

 Block167:
	mov eax,dword ptr [esp+0x30]
	xor ecx,ecx
	cmp dword ptr [eax+0x10],ecx
	je Block169

 Block168:
	mov dword ptr [eax+0x10],ecx
	mov dword ptr [eax+4],ecx
	mov dword ptr [eax+0x18],ecx

 Block169:
	mov dword ptr [ebx+0x3B48],ecx

 Block170:
	pop edi

 Block171:
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret
}
}
// CUserLocal::OnRevive
__SUB_CLASS_THIS0(00504010, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::UI_CloseRevive
	mov ecx,esi
	pop esi
	jmp  CUser::OnRevive
}
}
// CUserLocal::GetMonsterCardCheckListSize
__SUB_CLASS_THIS(00504210, __thiscall, 41363,  CUserLocal, long, long) {
__asm {

 Block0:
	push ecx
	lea eax,[esp]
	push eax
	lea edx,[esp+0xC]
	push edx
	add ecx,0x4740
	mov dword ptr [esp+8],0
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp]
	pop ecx
	ret 4
}
}
// CUserLocal::GetShoeAttr
_SUB_EXCEPTION_HANDLER(50A840)
__SUB_CLASS_THIS0(0050A840, __thiscall, 41387,  CUserLocal, const ZRef<CAttrShoe>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50A840
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x10],0
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esi+0x2038]
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block17

 Block1:
	mov esi,dword ptr [esi+0x209C]
	test esi,esi
	jne Block17

 Block2:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block5

 Block4:
	xor esi,esi

 Block5:
	test byte ptr [esi+0x178],2
	je Block17

 Block6:
	push 0x90
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov esi,eax
	mov dword ptr [esp+0x10],esi
	mov dword ptr [esp+0x20],0
	test esi,esi
	je Block11

 Block7:
	mov eax,dword ptr [edi+0x19E0]
	test eax,eax
	je Block9

 Block8:
	lea ecx,[eax-0xC]
	jmp Block10

 Block9:
	xor ecx,ecx

 Block10:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+8]
	call edx
	push eax
	mov ecx,esi
	call CAttrShoe::_ctor_0
	mov esi,eax
	jmp Block12

 Block11:
	xor esi,esi

 Block12:
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	mov dword ptr [esp+0x20],0xFFFFFFFF
	mov dword ptr [esp+0x14],esi
	test esi,esi
	je Block14

 Block13:
	lea eax,[esi+4]
	push eax
	call ebx

 Block14:
	mov edi,dword ptr [esp+0x28]
	mov dword ptr [edi+4],esi
	test esi,esi
	je Block16

 Block15:
	add esi,4
	push esi
	call ebx

 Block16:
	lea ecx,[esp+0x10]
	call ZRef<CAttrShoe>::~ZRef<CAttrShoe>
	mov eax,edi
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret 4

 Block17:
	mov eax,dword ptr [edi+0x3B78]
	mov esi,dword ptr [esp+0x28]
	mov dword ptr [esi+4],eax
	test eax,eax
	je Block19

 Block18:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block19:
	mov eax,esi
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret 4
}
}
// CDualKeyChecker::PushAndPopMsg
__SUB_CLASS_THIS(005119F0, __thiscall, 42476,  CDualKeyChecker, void, CDualKeyChecker::KeyMsg&) {
__asm {

 Block0:
	push edi
	mov edi,ecx
	cmp dword ptr [edi+0x10],0
	je Block2

 Block1:
	push esi
	lea esi,[edi+8]
	mov ecx,esi
	call ZList<CDualKeyChecker::KeyMsg>::AddTail_
	mov ecx,dword ptr [esp+0xC]
	mov edx,dword ptr [ecx]
	mov dword ptr [eax],edx
	mov edx,dword ptr [ecx+4]
	mov dword ptr [eax+4],edx
	mov eax,dword ptr [edi+0x14]
	mov edx,dword ptr [eax]
	mov dword ptr [ecx],edx
	mov eax,dword ptr [eax+4]
	mov dword ptr [ecx+4],eax
	mov ecx,dword ptr [esi+0xC]
	push ecx
	mov ecx,esi
	call ZList<CDualKeyChecker::KeyMsg>::RemoveAt
	pop esi

 Block2:
	pop edi
	ret 4
}
}
// CUserLocal::ApplyEmotionOption
_SUB_EXCEPTION_HANDLER(5091A0)
__SUB_CLASS_THIS(005091A0, __thiscall, 41342,  CUserLocal, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5091A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemOptionInfo>::ms_pInstance]
	call CItemOptionInfo::GetItemOption
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x1C],0
	test eax,eax
	je Block20

 Block1:
	mov esi,dword ptr [esp+0x28]
	imul esi,0xE0
	add esi,dword ptr [eax+0xC]
	cmp dword ptr [esi+0xDC],0
	je Block16

 Block2:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x65
	div ecx
	cmp edx,dword ptr [esi]
	ja Block15

 Block3:
	xor eax,eax
	cmp dword ptr [esi+0xC8],eax
	jle Block5

 Block4:
	lea eax,[ecx-0x60]

 Block5:
	cmp dword ptr [esi+0xCC],0
	jle Block7

 Block6:
	mov eax,0xA

 Block7:
	cmp dword ptr [esi+0xD0],0
	jle Block9

 Block8:
	mov eax,0x11

 Block9:
	cmp dword ptr [esi+0xD4],0
	jle Block11

 Block10:
	mov eax,0xF

 Block11:
	cmp dword ptr [esi+0xD8],0
	jle Block13

 Block12:
	mov eax,0xE
	jmp Block14

 Block13:
	test eax,eax
	jle Block15

 Block14:
	mov edx,dword ptr [esi+4]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	imul edx,0x3E8
	push edx
	push 1
	push eax
	call CWvsContext::SendEmotionChange

 Block15:
	mov eax,dword ptr [esp+0x10]

 Block16:
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test eax,eax
	je Block20

 Block17:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block20

 Block18:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block20

 Block19:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block20:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret 8
}
}
// GetShootRange0
__SUB(00503230, __cdecl, 82341,  long, long, long, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	cmp eax,0x1F914CF
	jg Block6

 Block1:
	je Block5

 Block2:
	cmp eax,0x1F78E28
	je Block12

 Block3:
	cmp eax,0x1F914C9
	jne Block8

 Block4:
	mov eax,0x27
	ret

 Block5:
	mov eax,0x46
	ret

 Block6:
	cmp eax,0x1F93BD9
	je Block12

 Block7:
	cmp eax,0x1F962ED
	je Block11

 Block8:
	cmp dword ptr [esp+0xC],0
	je Block10

 Block9:
	xor eax,eax
	ret

 Block10:
	mov eax,dword ptr [esp+8]
	ret

 Block11:
	mov eax,0x16
	ret

 Block12:
	mov eax,0x41
	ret
}
}
// CUserLocal::PreprocessOnKey
__SUB_CLASS_THIS(005199A0, __thiscall, 41356,  CUserLocal, int32_t, uint32_t&, uint32_t&) {
__asm {

 Block0:
	sub esp,8
	push ebx
	mov ebx,dword ptr [esp+0x14]
	push esi
	push edi
	mov edi,dword ptr [esp+0x18]
	mov eax,dword ptr [edi]
	mov esi,ecx
	mov ecx,dword ptr [ebx]
	lea edx,[esp+0xC]
	mov dword ptr [esp+0x10],ecx
	push edx
	lea ecx,[esi+0x4774]
	mov dword ptr [esp+0x10],eax
	call CDualKeyChecker::Check
	cmp eax,2
	jne Block3

 Block1:
	mov ecx,esi
	call CUserLocal::ProcessDualKey
	test eax,eax
	je Block4

 Block2:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 8

 Block3:
	cmp eax,1
	je Block2

 Block4:
	mov eax,dword ptr [esp+0xC]
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr [edi],eax
	pop edi
	pop esi
	mov dword ptr [ebx],ecx
	xor eax,eax
	pop ebx
	add esp,8
	ret 8
}
}
// CUserLocal::CBalloonMsg::Init
_SUB_EXCEPTION_HANDLER(51BBB0)
__SUB_CLASS_THIS(0051BBB0, __thiscall, 42725,  CUserLocal::CBalloonMsg, void, ZXString<char>&, long, long, long, long, NakedParam<_x_com_ptr<IWzVector2D>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_51BBB0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xD8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xEC]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x6C],ecx
	lea eax,[esp+0x63]
	push eax
	xor ebx,ebx
	push 0xC
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0xFC],ebx
	mov dword ptr [esp+0x34],ebx
	call ZArray<_x_com_ptr<IWzFont>>::_Alloc
	mov byte ptr [esp+0xF4],1
	xor esi,esi
	jmp Block2

 Block2:
	lea ecx,[esp+0x28]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [esp+0x2C]
	mov eax,dword ptr [eax]
	push ebx
	lea ecx,[esi+edx]
	push ecx
	push eax
	mov byte ptr [esp+0x100],2
	call PcCreate_IWzFont
	mov eax,dword ptr [esp+0x34]
	add esp,0xC
	mov byte ptr [esp+0xF4],1
	cmp eax,ebx
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block4:
	add esi,4
	cmp esi,0x30
	jl Block2

 Block5:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x14]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block7

 Block6:
	push eax
	call _com_issue_error

 Block7:
	lea ecx,[esp+0x14]
	push ecx
	push 0xFF000000
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	push edx
	mov byte ptr [esp+0x10C],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x104],4
	cmp ecx,ebx
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	mov byte ptr [esp+0x104],3
	call IWzFont::Create
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],1
	jne Block12

 Block10:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	cmp eax,ebx
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block13:
	lea eax,[esp+0x28]
	push 0x5B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xF4],5
	cmp eax,ebx
	je Block15

 Block14:
	mov ebp,dword ptr [eax]
	jmp Block16

 Block15:
	xor ebp,ebp

 Block16:
	mov ecx,8
	mov word ptr [esp+0x14],cx
	cmp ebp,ebx
	jne Block18

 Block17:
	xor esi,esi
	jmp Block23

 Block18:
	mov eax,ebp
	lea edx,[eax+2]
	lea ebx,[ebx]

 Block19:
	mov cx,word ptr [eax]
	add eax,2
	cmp cx,bx
	jne Block19

 Block20:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	cmp esi,ebx
	jne Block22

 Block21:
	xor esi,esi
	jmp Block23

 Block22:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block23:
	mov dword ptr [esp+0x1C],esi
	cmp esi,ebx
	jne Block26

 Block24:
	cmp ebp,ebx
	je Block26

 Block25:
	push 0x8007000E
	call _com_issue_error

 Block26:
	lea eax,[esp+0x14]
	push eax
	push 0xFF000000
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,6
	push ecx
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [edx+4]
	mov byte ptr [esp+0x104],7
	test ecx,ecx
	jne Block28

 Block27:
	push 0x80004003
	call _com_issue_error

 Block28:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	mov edi,8
	mov byte ptr [esp+0xF4],5
	cmp word ptr [esp+0x14],di
	jne Block31

 Block29:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block32

 Block30:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block32

 Block31:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block32:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xF4],1
	test eax,eax
	je Block40

 Block33:
	mov esi,eax
	add eax,8
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block40

 Block34:
	test esi,esi
	je Block40

 Block35:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block37

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block37:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block39

 Block38:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block39:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block40:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x14]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block42

 Block41:
	push eax
	call _com_issue_error

 Block42:
	lea ecx,[esp+0x14]
	push ecx
	push 0xFFFF0000
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	push edx
	mov byte ptr [esp+0x10C],8
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax+8]
	mov byte ptr [esp+0x104],9
	test ecx,ecx
	jne Block44

 Block43:
	push 0x80004003
	call _com_issue_error

 Block44:
	mov byte ptr [esp+0x104],8
	call IWzFont::Create
	mov byte ptr [esp+0xF4],1
	cmp word ptr [esp+0x14],di
	jne Block47

 Block45:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block48

 Block46:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block48

 Block47:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block48:
	lea eax,[esp+0x28]
	push 0x5B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xF4],0xA
	test eax,eax
	je Block50

 Block49:
	mov ebp,dword ptr [eax]
	jmp Block51

 Block50:
	xor ebp,ebp

 Block51:
	mov word ptr [esp+0x14],di
	test ebp,ebp
	jne Block53

 Block52:
	xor esi,esi
	jmp Block57

 Block53:
	mov eax,ebp
	lea edx,[eax+2]

 Block54:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block54

 Block55:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea ecx,[edi+edi+6]
	push ecx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block57

 Block56:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block57:
	mov dword ptr [esp+0x1C],esi
	test esi,esi
	jne Block60

 Block58:
	test ebp,ebp
	je Block60

 Block59:
	push 0x8007000E
	call _com_issue_error

 Block60:
	lea edx,[esp+0x14]
	push edx
	push 0xFFFF0000
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0xB
	push eax
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ecx+0xC]
	mov byte ptr [esp+0x104],0xC
	test ecx,ecx
	jne Block62

 Block61:
	push 0x80004003
	call _com_issue_error

 Block62:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	mov edi,8
	mov byte ptr [esp+0xF4],0xA
	cmp word ptr [esp+0x14],di
	jne Block65

 Block63:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block66

 Block64:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block66

 Block65:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block66:
	mov esi,dword ptr [esp+0x28]
	mov byte ptr [esp+0xF4],1
	test esi,esi
	je Block74

 Block67:
	lea ecx,[esi+8]
	push ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block74

 Block68:
	test esi,esi
	je Block74

 Block69:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block71

 Block70:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block71:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block73

 Block72:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block73:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block74:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x14]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block76

 Block75:
	push eax
	call _com_issue_error

 Block76:
	lea ecx,[esp+0x14]
	push ecx
	push 0xFF00FF00
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	push edx
	mov byte ptr [esp+0x10C],0xD
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax+0x10]
	mov byte ptr [esp+0x104],0xE
	test ecx,ecx
	jne Block78

 Block77:
	push 0x80004003
	call _com_issue_error

 Block78:
	mov byte ptr [esp+0x104],0xD
	call IWzFont::Create
	mov byte ptr [esp+0xF4],1
	cmp word ptr [esp+0x14],di
	jne Block81

 Block79:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block82

 Block80:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block82

 Block81:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block82:
	lea eax,[esp+0x28]
	push 0x5B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xF4],0xF
	test eax,eax
	je Block84

 Block83:
	mov ebp,dword ptr [eax]
	jmp Block85

 Block84:
	xor ebp,ebp

 Block85:
	mov word ptr [esp+0x14],di
	test ebp,ebp
	jne Block87

 Block86:
	xor esi,esi
	jmp Block91

 Block87:
	mov eax,ebp
	lea edx,[eax+2]

 Block88:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block88

 Block89:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea ecx,[edi+edi+6]
	push ecx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block91

 Block90:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block91:
	mov dword ptr [esp+0x1C],esi
	test esi,esi
	jne Block94

 Block92:
	test ebp,ebp
	je Block94

 Block93:
	push 0x8007000E
	call _com_issue_error

 Block94:
	lea edx,[esp+0x14]
	push edx
	push 0xFF00FF00
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0x10
	push eax
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ecx+0x14]
	mov byte ptr [esp+0x104],0x11
	test ecx,ecx
	jne Block96

 Block95:
	push 0x80004003
	call _com_issue_error

 Block96:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],0xF
	jne Block99

 Block97:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block100

 Block98:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block100

 Block99:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block100:
	mov esi,dword ptr [esp+0x28]
	mov byte ptr [esp+0xF4],1
	test esi,esi
	je Block108

 Block101:
	lea ecx,[esi+8]
	push ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block108

 Block102:
	test esi,esi
	je Block108

 Block103:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block105

 Block104:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block105:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block107

 Block106:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block107:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block108:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x14]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block110

 Block109:
	push eax
	call _com_issue_error

 Block110:
	lea ecx,[esp+0x14]
	push ecx
	push 0xFF0000FF
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0x12
	push edx
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax+0x18]
	mov byte ptr [esp+0x104],0x13
	test ecx,ecx
	jne Block112

 Block111:
	push 0x80004003
	call _com_issue_error

 Block112:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],1
	jne Block115

 Block113:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block116

 Block114:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block116

 Block115:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block116:
	lea eax,[esp+0x28]
	push 0x5B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xF4],0x14
	test eax,eax
	je Block118

 Block117:
	mov ebp,dword ptr [eax]
	jmp Block119

 Block118:
	xor ebp,ebp

 Block119:
	mov ecx,8
	mov word ptr [esp+0x14],cx
	test ebp,ebp
	jne Block121

 Block120:
	xor esi,esi
	jmp Block125

 Block121:
	mov eax,ebp
	lea edx,[eax+2]
	nop

 Block122:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block122

 Block123:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block125

 Block124:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block125:
	mov dword ptr [esp+0x1C],esi
	test esi,esi
	jne Block128

 Block126:
	test ebp,ebp
	je Block128

 Block127:
	push 0x8007000E
	call _com_issue_error

 Block128:
	lea eax,[esp+0x14]
	push eax
	push 0xFF0000FF
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0x15
	push ecx
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [edx+0x1C]
	mov byte ptr [esp+0x104],0x16
	test ecx,ecx
	jne Block130

 Block129:
	push 0x80004003
	call _com_issue_error

 Block130:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],0x14
	jne Block133

 Block131:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block134

 Block132:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block134

 Block133:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block134:
	mov esi,dword ptr [esp+0x28]
	mov byte ptr [esp+0xF4],1
	test esi,esi
	je Block142

 Block135:
	lea edx,[esi+8]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block142

 Block136:
	test esi,esi
	je Block142

 Block137:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block139

 Block138:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block139:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block141

 Block140:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block141:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block142:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x14]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block144

 Block143:
	push eax
	call _com_issue_error

 Block144:
	lea edx,[esp+0x14]
	push edx
	push 0xFFFFFFFF
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0x17
	push eax
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ecx+0x20]
	mov byte ptr [esp+0x104],0x18
	test ecx,ecx
	jne Block146

 Block145:
	push 0x80004003
	call _com_issue_error

 Block146:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],1
	jne Block149

 Block147:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block150

 Block148:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block150

 Block149:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block150:
	lea ecx,[esp+0x28]
	push 0x5B0
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xF4],0x19
	test eax,eax
	je Block152

 Block151:
	mov ebp,dword ptr [eax]
	jmp Block153

 Block152:
	xor ebp,ebp

 Block153:
	mov edx,8
	mov word ptr [esp+0x14],dx
	test ebp,ebp
	jne Block155

 Block154:
	xor esi,esi
	jmp Block159

 Block155:
	mov eax,ebp
	lea edx,[eax+2]
	lea esp,[esp]

 Block156:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block156

 Block157:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea eax,[edi+edi+6]
	push eax
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block159

 Block158:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block159:
	mov dword ptr [esp+0x1C],esi
	test esi,esi
	jne Block162

 Block160:
	test ebp,ebp
	je Block162

 Block161:
	push 0x8007000E
	call _com_issue_error

 Block162:
	lea ecx,[esp+0x14]
	push ecx
	push 0xFFFFFFFF
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0x1A
	push edx
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax+0x24]
	mov byte ptr [esp+0x104],0x1B
	test ecx,ecx
	jne Block164

 Block163:
	push 0x80004003
	call _com_issue_error

 Block164:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],0x19
	jne Block167

 Block165:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block168

 Block166:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block168

 Block167:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block168:
	mov esi,dword ptr [esp+0x28]
	mov byte ptr [esp+0xF4],1
	test esi,esi
	je Block176

 Block169:
	lea eax,[esi+8]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block176

 Block170:
	test esi,esi
	je Block176

 Block171:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block173

 Block172:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block173:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block175

 Block174:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block175:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block176:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block178

 Block177:
	push eax
	call _com_issue_error

 Block178:
	lea eax,[esp+0x14]
	push eax
	push 0xFF51378C
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0x1C
	push ecx
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [edx+0x28]
	mov byte ptr [esp+0x104],0x1D
	test ecx,ecx
	jne Block180

 Block179:
	push 0x80004003
	call _com_issue_error

 Block180:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],1
	jne Block183

 Block181:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block184

 Block182:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block184

 Block183:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block184:
	lea edx,[esp+0x28]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xF4],0x1E
	test eax,eax
	je Block186

 Block185:
	mov ebp,dword ptr [eax]
	jmp Block187

 Block186:
	xor ebp,ebp

 Block187:
	mov eax,8
	mov word ptr [esp+0x14],ax
	test ebp,ebp
	jne Block189

 Block188:
	xor esi,esi
	jmp Block193

 Block189:
	mov eax,ebp
	lea edx,[eax+2]
	lea esp,[esp]

 Block190:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block190

 Block191:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea ecx,[edi+edi+6]
	push ecx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block193

 Block192:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block193:
	mov dword ptr [esp+0x1C],esi
	test esi,esi
	jne Block196

 Block194:
	test ebp,ebp
	je Block196

 Block195:
	push 0x8007000E
	call _com_issue_error

 Block196:
	lea edx,[esp+0x14]
	push edx
	push 0xFF51378C
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0x1A25
	mov bl,0x1F
	push eax
	mov byte ptr [esp+0x10C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ecx+0x2C]
	xor ebp,ebp
	mov byte ptr [esp+0x104],0x20
	cmp ecx,ebp
	jne Block198

 Block197:
	push 0x80004003
	call _com_issue_error

 Block198:
	mov byte ptr [esp+0x104],bl
	call IWzFont::Create
	mov ebx,8
	mov byte ptr [esp+0xF4],0x1E
	cmp word ptr [esp+0x14],bx
	jne Block201

 Block199:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	cmp eax,ebp
	je Block202

 Block200:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block202

 Block201:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block202:
	mov esi,dword ptr [esp+0x28]
	mov byte ptr [esp+0xF4],1
	cmp esi,ebp
	je Block210

 Block203:
	lea ecx,[esi+8]
	push ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	cmp eax,ebp
	jne Block210

 Block204:
	cmp esi,ebp
	je Block210

 Block205:
	mov eax,dword ptr [esi]
	cmp eax,ebp
	je Block207

 Block206:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block207:
	mov eax,dword ptr [esi+4]
	cmp eax,ebp
	je Block209

 Block208:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block209:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block210:
	mov dword ptr [esp+0x30],ebp
	push 0x14
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0xF8],0x21
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov esi,eax
	cmp esi,ebp
	je Block212

 Block211:
	fild dword ptr [esp+0x100]
	xor eax,eax
	mov dword ptr [esi+4],eax
	mov dword ptr [esi+8],eax
	fsub qword ptr [__real_4024000000000000]
	int 3// TODO: 	mov dword ptr [esi],offset CTextAnalyzer::`vftable'
	call __ftol2_sse
	mov dword ptr [esi+0x10],eax
	mov dword ptr [esi+0xC],ebp
	jmp Block213

 Block212:
	xor esi,esi

 Block213:
	mov dword ptr [esp+0x28],esi
	mov dword ptr [esp+0xE8],esi
	cmp esi,ebp
	je Block215

 Block214:
	lea edx,[esi+4]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block215:
	mov edx,dword ptr [esp+0xFC]
	push ebp
	push ebp
	push ebp
	lea eax,[esp+0x38]
	push eax
	lea ecx,[esp+0x40]
	push ecx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x3C],esp
	push edx
	mov byte ptr [esp+0x110],0x22
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	mov ecx,esi
	call CTextAnalyzer::AnalyzeText
	mov eax,dword ptr [esp+0x30]
	cmp eax,ebp
	jne Block217

 Block216:
	xor ecx,ecx
	jmp Block218

 Block217:
	mov ecx,dword ptr [eax-4]

 Block218:
	mov esi,dword ptr [eax+0xC]
	mov edx,ecx
	shl edx,4
	add edx,ecx
	lea edi,[eax+edx*4-0x44]
	cmp esi,ebp
	jne Block220

 Block219:
	push 0x80004003
	call _com_issue_error

 Block220:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x14]
	lea ecx,[esp+0x3C]
	push ecx
	push esi
	mov dword ptr [esp+0x44],ebp
	call edx
	cmp eax,ebp
	jge Block222

 Block221:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block222:
	mov edi,dword ptr [edi+8]
	mov esi,dword ptr [ZImports::_VariantInit]
	inc edi
	imul edi,dword ptr [esp+0x3C]
	lea eax,[esp+0x80]
	add edi,0x14
	push eax
	mov dword ptr [esp+0x68],edi
	call esi
	lea ecx,[esp+0x80]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block224

 Block223:
	push eax
	call _com_issue_error

 Block224:
	lea edx,[esp+0xA0]
	push edx
	mov byte ptr [esp+0xF8],0x23
	call esi
	lea eax,[esp+0xA0]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block226

 Block225:
	push eax
	call _com_issue_error

 Block226:
	mov ecx,dword ptr [_D_G_GR]
	mov byte ptr [esp+0xF4],0x24
	cmp ecx,ebp
	jne Block228

 Block227:
	push 0x80004003
	call _com_issue_error

 Block228:
	lea edx,[esp+0x80]
	push edx
	mov edx,dword ptr [esp+0x104]
	lea eax,[esp+0xA4]
	push eax
	push 0xA
	add edi,0x10
	push edi
	push edx
	push ebp
	push ebp
	lea eax,[esp+0x84]
	push eax
	call IWzGr2D::CreateLayer
	mov byte ptr [esp+0xF4],0x26
	cmp word ptr [esp+0xA0],bx
	jne Block231

 Block229:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	cmp eax,ebp
	je Block232

 Block230:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block232

 Block231:
	lea edx,[esp+0xA0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block232:
	mov byte ptr [esp+0xF4],0x27
	cmp word ptr [esp+0x80],bx
	jne Block235

 Block233:
	xor eax,eax
	mov word ptr [esp+0x80],ax
	mov eax,dword ptr [esp+0x88]
	cmp eax,ebp
	je Block236

 Block234:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block236

 Block235:
	lea ecx,[esp+0x80]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block236:
	mov eax,dword ptr [esp+0x110]
	mov ebp,dword ptr [esp+0x68]
	test eax,eax
	je Block244

 Block237:
	mov edx,0xD
	mov word ptr [esp+0x40],dx
	mov dword ptr [esp+0x48],eax
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx
	mov byte ptr [esp+0xF4],0x28
	test ebp,ebp
	jne Block239

 Block238:
	push 0x80004003
	call _com_issue_error

 Block239:
	mov edx,dword ptr [esp+0x40]
	mov ecx,dword ptr [ebp]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x54]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x58]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x5C]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push ebp
	call eax
	test eax,eax
	jge Block241

 Block240:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push ebp
	push eax
	call _com_issue_errorex

 Block241:
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0xF4],0x27
	jne Block247

 Block242:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	test eax,eax
	je Block244

 Block243:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block244:
	mov edi,dword ptr [ZImports::_VariantClear]

 Block245:
	lea eax,[esp+0x14]
	push eax
	call esi
	lea ecx,[esp+0x14]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block248

 Block246:
	push eax
	call _com_issue_error

 Block247:
	mov edi,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0x40]
	push edx
	call edi
	jmp Block245

 Block248:
	lea edx,[esp+0x40]
	mov bl,0x29
	push edx
	mov byte ptr [esp+0xF8],bl
	call esi
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block250

 Block249:
	push eax
	call _com_issue_error

 Block250:
	mov byte ptr [esp+0xF4],0x2A
	test ebp,ebp
	jne Block252

 Block251:
	push 0x80004003
	call _com_issue_error

 Block252:
	mov edx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ebp]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x28]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [eax+0xC],edx
	mov edx,dword ptr [esp+0x50]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x68]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x6C]
	push 0
	push 0
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x90]
	push ebp
	call eax
	test eax,eax
	jge Block254

 Block253:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push ebp
	push eax
	call _com_issue_errorex

 Block254:
	mov esi,8
	mov byte ptr [esp+0xF4],bl
	cmp word ptr [esp+0x40],si
	jne Block257

 Block255:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	test eax,eax
	je Block258

 Block256:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block258

 Block257:
	lea edx,[esp+0x40]
	push edx
	call edi

 Block258:
	mov byte ptr [esp+0xF4],0x27
	cmp word ptr [esp+0x14],si
	jne Block261

 Block259:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block262

 Block260:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block262

 Block261:
	lea ecx,[esp+0x14]
	push ecx
	call edi

 Block262:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0xE0]
	push 0xFFFFFFFF
	push ebp
	call eax
	test eax,eax
	jge Block264

 Block263:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebp
	push eax
	call _com_issue_errorex

 Block264:
	mov eax,dword ptr [TSingleton<CUserLocal>::ms_pInstance]
	test eax,eax
	je Block275

 Block265:
	lea ecx,[esp+0x54]
	push ecx
	lea ecx,[eax+0x88]
	call CAvatar::GetLayerUnderFace
	mov eax,dword ptr [eax]
	mov bl,0x2B
	mov edx,0xD
	mov byte ptr [esp+0xF4],bl
	mov word ptr [esp+0x14],dx
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block267

 Block266:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block267:
	mov edx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ebp]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x28]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0xFC]
	push ebp
	mov byte ptr [esp+0x108],0x2C
	call eax
	test eax,eax
	jge Block269

 Block268:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebp
	push eax
	call _com_issue_errorex

 Block269:
	mov byte ptr [esp+0xF4],bl
	cmp word ptr [esp+0x14],si
	jne Block272

 Block270:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block273

 Block271:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block273

 Block272:
	lea edx,[esp+0x14]
	push edx
	call edi

 Block273:
	mov eax,dword ptr [esp+0x54]
	mov byte ptr [esp+0xF4],0x27
	test eax,eax
	je Block275

 Block274:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block275:
	mov eax,3
	mov word ptr [esp+0x40],ax
	mov dword ptr [esp+0x48],0
	lea ecx,[esp+0x40]
	push ecx
	lea edx,[esp+0x40]
	push edx
	mov ecx,ebp
	mov byte ptr [esp+0xFC],0x2D
	call IWzGr2DLayer::Getcanvas
	mov byte ptr [esp+0xF4],0x2F
	cmp word ptr [esp+0x40],si
	jne Block278

 Block276:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block279

 Block277:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block279

 Block278:
	lea ecx,[esp+0x40]
	push ecx
	call edi

 Block279:
	mov edx,dword ptr [esp+0x64]
	mov esi,dword ptr [esp+0x100]
	mov edi,dword ptr [esp+0x3C]
	push edx
	push esi
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	mov dword ptr [eax],edi
	test edi,edi
	je Block281

 Block280:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+4]
	push edi
	call ecx

 Block281:
	call make_balloon
	mov ebx,dword ptr [ZImports::_VariantInit]
	add esp,0x14
	lea edx,[esp+0x90]
	push edx
	call ebx
	lea eax,[esp+0x90]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block283

 Block282:
	push eax
	call _com_issue_error

 Block283:
	lea ecx,[esp+0x70]
	push ecx
	mov byte ptr [esp+0xF8],0x30
	call ebx
	lea edx,[esp+0x70]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block285

 Block284:
	push eax
	call _com_issue_error

 Block285:
	push 0
	push 0
	lea eax,[esp+0x98]
	push eax
	lea ecx,[esp+0x7C]
	push ecx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0xC9D
	mov bl,0x31
	push edx
	mov byte ptr [esp+0x110],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [esp+0x108],0x32
	jne Block287

 Block286:
	push 0x80004003
	call _com_issue_error

 Block287:
	lea eax,[esp+0xE4]
	mov byte ptr [esp+0x108],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0xFC],0x33
	call Ztl_variant_t::GetUnknown
	xor ebx,ebx
	mov dword ptr [esp+0x54],ebx
	test eax,eax
	je Block291

 Block288:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x50]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	test eax,eax
	setl bl
	dec ebx
	and ebx,dword ptr [esp+0x50]
	mov dword ptr [esp+0x54],ebx
	test eax,eax
	jge Block291

 Block289:
	cmp eax,0x80004002
	je Block291

 Block290:
	push eax
	call _com_issue_error

 Block291:
	cmp word ptr [esp+0xD0],8
	mov byte ptr [esp+0xF4],0x35
	jne Block294

 Block292:
	mov eax,dword ptr [esp+0xD8]
	xor ecx,ecx
	mov word ptr [esp+0xD0],cx
	test eax,eax
	je Block295

 Block293:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block295

 Block294:
	lea edx,[esp+0xD0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block295:
	cmp word ptr [esp+0x70],8
	mov byte ptr [esp+0xF4],0x36
	jne Block298

 Block296:
	xor eax,eax
	mov word ptr [esp+0x70],ax
	mov eax,dword ptr [esp+0x78]
	test eax,eax
	je Block299

 Block297:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block299

 Block298:
	lea ecx,[esp+0x70]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block299:
	cmp word ptr [esp+0x90],8
	mov byte ptr [esp+0xF4],0x37
	jne Block302

 Block300:
	mov eax,dword ptr [esp+0x98]
	xor edx,edx
	mov word ptr [esp+0x90],dx
	test eax,eax
	je Block303

 Block301:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block303

 Block302:
	lea eax,[esp+0x90]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block303:
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push 0x5A9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0x100],0x38
	test ebx,ebx
	jne Block305

 Block304:
	push 0x80004003
	call _com_issue_error

 Block305:
	lea edx,[esp+0xCC]
	push edx
	mov ecx,ebx
	mov byte ptr [esp+0x104],0x37
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0xFC],0x39
	call Ztl_variant_t::GetUnknown
	xor ebx,ebx
	mov dword ptr [esp+0x50],ebx
	test eax,eax
	je Block309

 Block306:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x38]
	push edx
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push eax
	mov eax,dword ptr [ecx]
	call eax
	test eax,eax
	setl bl
	dec ebx
	and ebx,dword ptr [esp+0x38]
	mov dword ptr [esp+0x50],ebx
	test eax,eax
	jge Block309

 Block307:
	cmp eax,0x80004002
	je Block309

 Block308:
	push eax
	call _com_issue_error

 Block309:
	cmp word ptr [esp+0xC0],8
	mov byte ptr [esp+0xF4],0x3B
	jne Block312

 Block310:
	mov eax,dword ptr [esp+0xC8]
	xor ecx,ecx
	mov word ptr [esp+0xC0],cx
	test eax,eax
	je Block313

 Block311:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block313

 Block312:
	lea edx,[esp+0xC0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block313:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x14]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block315

 Block314:
	push eax
	call _com_issue_error

 Block315:
	mov byte ptr [esp+0xF4],0x3C
	test edi,edi
	jne Block317

 Block316:
	push 0x80004003
	call _com_issue_error

 Block317:
	mov edx,dword ptr [esp+0x14]
	mov ecx,dword ptr [esp+0x18]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x2C]
	add esi,0x14
	mov dword ptr [esp+0x48],esi
	fild dword ptr [esp+0x48]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0x30]
	fmul qword ptr [__real_3fe6666660000000]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x74]
	add edx,0xFFFFFFF7
	fsub qword ptr [__real_4030000000000000]
	push ebx
	push edx
	mov dword ptr [eax+0xC],ecx
	call __ftol2_sse
	push eax
	mov eax,dword ptr [edi]
	mov eax,dword ptr [eax+0x80]
	push edi
	call eax
	test eax,eax
	jge Block319

 Block318:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block319:
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xF4],0x3B
	jne Block322

 Block320:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block323

 Block321:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block323

 Block322:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block323:
	mov esi,dword ptr [esp+0x30]
	xor edi,edi
	mov dword ptr [esp+0x34],edi
	xor ebx,ebx
	mov dword ptr [esp+0x58],edi
	mov eax,edi

 Block324:
	test esi,esi
	je Block349

 Block325:
	cmp eax,dword ptr [esi-4]
	jae Block349

 Block326:
	mov ecx,dword ptr [esp+0x58]
	cmp dword ptr [ecx+esi+0x30],0
	je Block348

 Block327:
	xor edx,edx
	cmp edi,eax
	jg Block330

 Block328:
	mov eax,dword ptr [esp+0x34]
	sub eax,edi
	lea ecx,[ebx+esi+0x20]
	inc eax

 Block329:
	add edx,dword ptr [ecx]
	add ecx,0x44
	sub eax,1
	jne Block329

 Block330:
	mov eax,dword ptr [esp+0x100]
	sub eax,edx
	cdq
	sub eax,edx
	sar eax,1
	cmp edi,dword ptr [esp+0x34]
	mov dword ptr [esp+0x24],eax
	mov dword ptr [esp+0x38],edi
	jg Block347

 Block331:
	mov esi,ebx

 Block332:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0xB0]
	push edx
	call edi
	lea eax,[esp+0xB0]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block6

 Block333:
	lea ecx,[esp+0x14]
	push ecx
	mov byte ptr [esp+0xF8],0x3D
	call edi
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block6

 Block334:
	lea eax,[esp+0xB0]
	push eax
	mov eax,dword ptr [esp+0x34]
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,dword ptr [esi+eax+0xC]
	mov eax,dword ptr [esi+eax+0x10]
	push ecx
	push ecx
	mov dword ptr [esp+0xF0],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x108],0x3E
	call _xbstr_t::_ctor_0
	mov edx,dword ptr [esp+0x40]
	mov edi,dword ptr [esi+edx+0xC]
	lea ebp,[esi+edx]
	mov byte ptr [esp+0x104],0x3F
	test edi,edi
	je Block8

 Block335:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x14]
	lea ecx,[esp+0x6C]
	push ecx
	push edi
	mov dword ptr [esp+0x74],0
	call edx
	test eax,eax
	jge Block337

 Block336:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push edi
	push eax
	call _com_issue_errorex

 Block337:
	mov eax,dword ptr [ebp+8]
	imul eax,dword ptr [esp+0x6C]
	mov ecx,dword ptr [esp+0x40]
	mov edx,dword ptr [esi+ecx+0x18]
	add edx,dword ptr [esp+0x34]
	mov ecx,dword ptr [esp+0x4C]
	add eax,0xA
	push eax
	push edx
	mov byte ptr [esp+0x10C],0x3E
	call IWzCanvas::DrawTextA
	mov edi,8
	mov byte ptr [esp+0xF4],0x3D
	cmp word ptr [esp+0x14],di
	jne Block340

 Block338:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block341

 Block339:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block341

 Block340:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block341:
	mov byte ptr [esp+0xF4],0x3B
	cmp word ptr [esp+0xB0],di
	jne Block344

 Block342:
	mov eax,dword ptr [esp+0xB8]
	xor edx,edx
	mov word ptr [esp+0xB0],dx
	test eax,eax
	je Block345

 Block343:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block345

 Block344:
	lea eax,[esp+0xB0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block345:
	mov eax,dword ptr [esp+0x38]
	inc eax
	add esi,0x44
	cmp eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0x38],eax
	jle Block332

 Block346:
	mov esi,dword ptr [esp+0x30]

 Block347:
	mov edi,dword ptr [esp+0x34]
	mov ebx,dword ptr [esp+0x58]
	mov ebp,dword ptr [esp+0x68]
	mov eax,dword ptr [esp+0x34]
	inc edi
	add ebx,0x44

 Block348:
	inc eax
	add dword ptr [esp+0x58],0x44
	mov dword ptr [esp+0x34],eax
	jmp Block324

 Block349:
	fild dword ptr [esp+0x108]
	mov ecx,dword ptr [esp+0x10C]
	fild dword ptr [esp+0x100]
	sub ecx,dword ptr [esp+0x64]
	mov esi,dword ptr [ebp]
	push ecx
	fmul qword ptr [__real_3fe0000000000000]
	fsubp st(1),st(0)
	call __ftol2_sse
	mov edx,dword ptr [esi+0x44]
	push eax
	push ebp
	call edx
	test eax,eax
	jge Block351

 Block350:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push ebp
	push eax
	call _com_issue_errorex

 Block351:
	mov edi,dword ptr [esp+0x6C]
	mov esi,dword ptr [edi]
	cmp esi,ebp
	je Block354

 Block352:
	mov dword ptr [edi],ebp
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+4]
	push ebp
	call ecx
	test esi,esi
	je Block354

 Block353:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block354:
	call get_update_time
	add eax,dword ptr [esp+0x104]
	mov byte ptr [esp+0xF4],0x37
	mov dword ptr [edi+4],eax
	mov eax,dword ptr [esp+0x50]
	test eax,eax
	je Block356

 Block355:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block356:
	mov eax,dword ptr [esp+0x54]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0xF8],0x2F
	call edx
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0xF8],0x27
	call edx
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	mov byte ptr [esp+0xF8],0x22
	call ecx
	mov edi,dword ptr [esp+0x28]
	mov byte ptr [esp+0xF4],0x21
	test edi,edi
	je Block359

 Block357:
	lea esi,[edi+4]
	push esi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block359

 Block358:
	push esi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block359:
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0xF4],1
	call ZArray<CT_INFO>::RemoveAll
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0xF4],0
	call ZArray<_x_com_ptr<IWzFont>>::RemoveAll
	mov eax,dword ptr [esp+0x110]
	mov dword ptr [esp+0xF4],0xFFFFFFFF
	test eax,eax
	je Block361

 Block360:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block361:
	mov ecx,dword ptr [esp+0xEC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xE4
	ret 0x18
}
}
// CUserLocal::OnNoticeMsg
_SUB_EXCEPTION_HANDLER(5181D0)
__SUB_CLASS_THIS(005181D0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5181D0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [esp+0x18]
	lea eax,[esp+0x18]
	push eax
	call CInPacket::DecodeStr
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	lea edx,[esp+0x2C]
	mov dword ptr [esp+0x18],esp
	push edx
	mov dword ptr [esp+0x28],0
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	call CUtilDlg::Notice
	mov eax,dword ptr [esp+0x2C]
	add esp,0x14
	mov dword ptr [esp+0x10],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x10
	ret 4
}
}
// CUserLocal::FallDown
__SUB_CLASS_THIS0(00505D90, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	cmp dword ptr [ecx+0x3B68],0
	je Block5

 Block1:
	mov eax,dword ptr [ecx+0x19E4]
	mov dword ptr [ecx+0x3B68],0
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	jmp Block4

 Block3:
	xor eax,eax

 Block4:
	mov ecx,dword ptr [ecx+0x3B6C]
	mov dword ptr [eax+0x20C],ecx
	push 0xB
	mov ecx,eax
	mov dword ptr [eax+0x208],1
	call CVecCtrl::SetMovePathAttribute

 Block5:
	ret
}
}
// CUserLocal::GetSpiritJavelinItemID
__SUB_CLASS_THIS(00507850, __thiscall, 41338,  CUserLocal, long, const SKILLENTRY*, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	sub esp,0x3C
	push ebx
	push esi
	mov esi,dword ptr [ebp+8]
	push edi
	test esi,esi
	je Block29

 Block1:
	mov ecx,dword ptr [ecx+0x58C]
	push ecx
	call get_weapon_type
	add esp,4
	cmp eax,0x2F
	jne Block29

 Block2:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x38]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x38]
	mov dword ptr [esp+0x18],edi
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,esi
	call SKILLENTRY::GetLevelData
	mov edx,dword ptr [eax+0x144]
	push edx
	add eax,0x13C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov dword ptr [esp+0x2C],eax
	test eax,eax
	jle Block29

 Block3:
	mov eax,dword ptr [edi+0x509]
	test eax,eax
	je Block5

 Block4:
	mov eax,dword ptr [eax-4]

 Block5:
	dec eax
	mov esi,1
	cmp eax,esi
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x24],0
	mov dword ptr [esp+0x20],esi
	jl Block28

 Block6:
	jmp Block8

 Block7:
	mov edi,dword ptr [esp+0x18]

 Block8:
	push esi
	push 2
	lea eax,[esp+0x38]
	push eax
	mov ecx,edi
	call CharacterData::GetItem
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0x1C],ebx
	test eax,eax
	je Block13

 Block9:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block12

 Block10:
	mov ecx,dword ptr [esp+0x34]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x34]
	test ecx,ecx
	je Block12

 Block11:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block12:
	mov dword ptr [esp+0x34],0

 Block13:
	test ebx,ebx
	je Block25

 Block14:
	lea edi,[ebx+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0xCF
	jne Block25

 Block15:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x20]
	mov ecx,ebx
	call eax
	test eax,eax
	jle Block25

 Block16:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	push eax
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block25

 Block17:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x20]
	mov ecx,ebx
	call eax
	lea edi,[esi+1]
	cmp edi,dword ptr [esp+0x14]
	mov dword ptr [esp+0x10],eax
	jg Block24

 Block18:
	push edi
	push 2
	lea ecx,[esp+0x48]
	push ecx
	mov ecx,dword ptr [esp+0x24]
	call CharacterData::GetItem
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0x40]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	test esi,esi
	je Block22

 Block19:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	lea ecx,[ebx+0xC]
	mov dword ptr [esp+0x28],eax
	call TSecType<long>::GetData
	mov ecx,dword ptr [esp+0x28]
	cmp eax,ecx
	jne Block21

 Block20:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x20]
	mov ecx,esi
	call eax
	add dword ptr [esp+0x10],eax

 Block21:
	mov ebx,dword ptr [esp+0x1C]

 Block22:
	inc edi
	cmp edi,dword ptr [esp+0x14]
	jle Block18

 Block23:
	mov esi,dword ptr [esp+0x20]

 Block24:
	mov ecx,dword ptr [esp+0x10]
	cmp ecx,dword ptr [esp+0x2C]
	jge Block27

 Block25:
	inc esi
	cmp esi,dword ptr [esp+0x14]
	mov dword ptr [esp+0x20],esi
	jle Block7

 Block26:
	mov eax,dword ptr [esp+0x24]
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret 8

 Block27:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	mov dword ptr [esp+0x24],eax

 Block28:
	mov eax,dword ptr [esp+0x24]
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret 8

 Block29:
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	mov esp,ebp
	pop ebp
	ret 8
}
}
// CUserLocal::OnChatMsg
_SUB_EXCEPTION_HANDLER(518300)
__SUB_CLASS_THIS(00518300, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_518300
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x20]
	mov ecx,esi
	call CInPacket::Decode2
	movzx edi,ax
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],esi
	je Block2

 Block1:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x14],esp
	push esi
	movzx ecx,di
	push 0xFFFFFFFF
	mov dword ptr [eax+4],esi
	mov edx,dword ptr [esp+0x30]
	push ecx
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push edx
	call CUIStatusBar::ChatLogAdd

 Block2:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	cmp eax,esi
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4
}
}
// CUserLocal::OnPlayMinigameSound
_SUB_EXCEPTION_HANDLER(516E10)
__SUB_CLASS_THIS(00516E10, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_516E10
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [esp+0x1C]
	lea eax,[esp+8]
	push eax
	call CInPacket::DecodeStr
	mov eax,dword ptr [eax]
	push 0xFFFFFFFF
	push eax
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x1C],0
	mov dword ptr [esp+0x24],0
	call ZXString<unsigned short>::AssignCharStr
	mov eax,dword ptr [esp+8]
	mov byte ptr [esp+0x14],2
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov esi,dword ptr [esp+0x1C]
	push 0x64
	push esi
	call play_minigame_sound
	add esp,8
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block4

 Block3:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<unsigned short>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret 4
}
}
// CUserLocal::SetMonsterCardCount
_SUB_EXCEPTION_HANDLER(516EC0)
__SUB(00516EC0, __cdecl, 41379,  void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_516EC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [esp+0x28]
	mov edx,dword ptr [esp+0x24]
	mov esi,dword ptr [esp+0x10]
	push ecx
	push edx
	push esi
	mov dword ptr [esp+0x28],0
	call CMonsterBookAccessor::SetCount
	add esp,0xC
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test esi,esi
	je Block4

 Block1:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block4:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret
}
}
// CUserLocal::TryRegisterFinalAttack
__SUB_CLASS_THIS(00504E00, __thiscall, 41407,  CUserLocal, void, const CharacterData&, const ZArray<ZArray<long> >&, long, long) {
__asm {

 Block0:
	sub esp,0x14
	push ebx
	push ebp
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x58C]
	push edi
	push eax
	mov dword ptr [esp+0x1C],esi
	call get_weapon_type
	mov ecx,dword ptr [esp+0x30]
	xor ebx,ebx
	add esp,4
	mov dword ptr [esp+0x1C],eax
	mov dword ptr [esp+0x14],ebx
	call ZArray<ZArray<long>>::GetCount
	test eax,eax
	jbe Block14

 Block1:
	mov eax,dword ptr [esp+0x2C]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+ebx*4]
	mov edi,dword ptr [edx]
	lea esi,[ecx+ebx*4]
	mov ecx,dword ptr [esp+0x28]
	lea eax,[esp+0x10]
	push eax
	push edi
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov dword ptr [esp+0x2C],edi
	mov dword ptr [esp+0x1C],0
	call CSkillInfo::GetSkillLevel_0
	mov ebp,eax
	test ebp,ebp
	jle Block12

 Block2:
	cmp edi,0xA9634A
	jne Block4

 Block3:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edx,dword ptr [eax+0x2CA0]
	push edx
	add eax,0x2C98
	jmp Block6

 Block4:
	cmp edi,0xC7E7CA
	jne Block7

 Block5:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov ecx,dword ptr [eax+0x2CC4]
	push ecx
	add eax,0x2CBC

 Block6:
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block12

 Block7:
	mov ecx,esi
	mov ebx,1
	call ZArray<long>::GetCount
	cmp eax,ebx
	jbe Block11

 Block8:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [esp+0x1C]
	cmp eax,dword ptr [edx+ebx*4]
	jne Block10

 Block9:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x65
	div ecx
	mov ecx,dword ptr [esp+0x10]
	push ebp
	mov edi,edx
	call SKILLENTRY::GetLevelData
	mov edx,dword ptr [eax+0x114]
	push edx
	add eax,0x10C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp edi,eax
	jbe Block15

 Block10:
	mov ecx,esi
	inc ebx
	call ZArray<long>::GetCount
	cmp ebx,eax
	jb Block8

 Block11:
	mov ebx,dword ptr [esp+0x14]

 Block12:
	mov ecx,dword ptr [esp+0x2C]
	inc ebx
	mov dword ptr [esp+0x14],ebx
	call ZArray<ZArray<long>>::GetCount
	cmp ebx,eax
	jb Block1

 Block13:
	mov esi,dword ptr [esp+0x18]

 Block14:
	pop edi
	mov dword ptr [esi+0x3B04],0
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 0x10

 Block15:
	mov esi,dword ptr [esp+0x18]
	mov eax,dword ptr [esp+0x30]
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	mov dword ptr [esi+0x3B00],eax
	mov eax,dword ptr [esi]
	mov dword ptr [esi+0x3B04],ecx
	mov dword ptr [esi+0x3B08],edx
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [eax+0x5B4]
	push ecx
	add eax,0x5AC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp eax,0xC80EDD
	jne Block17

 Block16:
	call get_update_time
	pop edi
	mov dword ptr [esi+0x3B0C],eax
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 0x10

 Block17:
	call get_update_time
	add eax,dword ptr [esp+0x34]
	pop edi
	mov dword ptr [esi+0x3B0C],eax
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 0x10
}
}
// CUserLocal::SetAttractMove
__SUB_CLASS_THIS(0050DEB0, __thiscall, 41329,  CUserLocal, void, long&, long&) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	call edx
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	dec eax
	add esp,8
	cmp eax,6
	ja Block8

 Block1:
	cmp EAX, 0
je Block2
cmp EAX, 1
je Block3
cmp EAX, 2
je Block7
cmp EAX, 3
je Block4
cmp EAX, 4
je Block8
cmp EAX, 5
je Block5
cmp EAX, 6
je Block6


 Block2:
	mov edx,dword ptr [esp+8]
	mov dword ptr [edx],0xFFFFFFFF
	pop esi
	ret 8

 Block3:
	mov eax,dword ptr [esp+8]
	mov dword ptr [eax],1
	pop esi
	ret 8

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr [ecx],1
	pop esi
	ret 8

 Block5:
	mov edx,dword ptr [esp+8]
	push 1
	mov ecx,esi
	mov dword ptr [edx],0xFFFFFFFF
	call CUserLocal::Jump
	pop esi
	ret 8

 Block6:
	mov eax,dword ptr [esp+8]
	mov dword ptr [eax],1

 Block7:
	push 1
	mov ecx,esi
	call CUserLocal::Jump

 Block8:
	pop esi
	ret 8
}
}
// CUserLocal::ProcessDualKey
_SUB_EXCEPTION_HANDLER(50A6F0)
__SUB_CLASS_THIS0(0050A6F0, __thiscall, 41375,  CUserLocal, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50A6F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x26
	call CInputSystem::IsKeyPressed
	test eax,eax
	je Block9

 Block1:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [eax+0x419C]
	test eax,eax
	jne Block4

 Block2:
	mov edx,dword ptr [esi]
	push eax
	push eax
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	push 0x3F1

 Block3:
	call get_novice_skill_as_race
	add esp,8
	push eax
	mov ecx,esi
	call CUserLocal::DoActiveSkill
	mov eax,1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret

 Block4:
	lea ecx,[esp+8]
	push 0x18C0
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [esp+0x18],0
	je Block6

 Block5:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x14],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block6:
	mov eax,dword ptr [esp+8]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	xor eax,eax
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret

 Block9:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x25
	call CInputSystem::IsKeyPressed
	test eax,eax
	je Block11

 Block10:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	push 0
	push 0
	mov ecx,esi
	call eax
	push eax
	push 0x3F2
	jmp Block3

 Block11:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x27
	call CInputSystem::IsKeyPressed
	test eax,eax
	je Block8

 Block12:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	push 0
	push 0
	mov ecx,esi
	call eax
	push eax
	push 0x3F3
	jmp Block3
}
}
// CUserLocal::CalcBuffDefenseAttr
__SUB_CLASS_THIS(00504120, __thiscall, 41473,  CUserLocal, long, char, long) {
__asm {

 Block0:
	movsx eax,byte ptr [esp+4]
	push esi
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	dec eax
	add esi,0x2148
	cmp eax,3
	ja Block8

 Block1:
	cmp EAX, 0
je Block2
cmp EAX, 1
je Block3
cmp EAX, 2
je Block4
cmp EAX, 3
je Block5


 Block2:
	mov eax,dword ptr [esi+0xA78]
	push eax
	lea ecx,[esi+0xA74]
	push ecx
	call _ZtlSecureFuseHelper<char>::call
	add esp,8
	xor edx,edx
	cmp al,0x49
	jmp Block6

 Block3:
	mov eax,dword ptr [esi+0xA78]
	push eax
	lea ecx,[esi+0xA74]
	push ecx
	call _ZtlSecureFuseHelper<char>::call
	add esp,8
	xor edx,edx
	cmp al,0x46
	jmp Block6

 Block4:
	mov eax,dword ptr [esi+0xA78]
	push eax
	lea ecx,[esi+0xA74]
	push ecx
	call _ZtlSecureFuseHelper<char>::call
	add esp,8
	xor edx,edx
	cmp al,0x4C
	jmp Block6

 Block5:
	mov eax,dword ptr [esi+0xA78]
	push eax
	lea ecx,[esi+0xA74]
	push ecx
	call _ZtlSecureFuseHelper<char>::call
	add esp,8
	xor edx,edx
	cmp al,0x53

 Block6:
	sete dl
	mov eax,edx
	test eax,eax
	je Block8

 Block7:
	mov eax,dword ptr [esi+0xA84]
	push eax
	add esi,0xA7C
	push esi
	call _ZtlSecureFuseHelper<long>::call
	mov esi,dword ptr [esp+0x14]
	mov ecx,eax
	imul ecx,esi
	mov eax,0xAE147AE1
	imul ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add esp,8
	add ecx,edx
	add esi,ecx
	mov eax,esi
	pop esi
	ret 8

 Block8:
	mov esi,dword ptr [esp+0xC]
	mov eax,esi
	pop esi
	ret 8
}
}
// CUserLocal::ResetOneTimeAction
__SUB_CLASS_THIS0(005071F0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	mov dword ptr [ecx+0x3B04],0
	add ecx,0x88
	or eax,0xFFFFFFFF
	push 1
	mov dword ptr [ecx+0x5BC],eax
	mov dword ptr [ecx+0x5A8],eax
	call CAvatar::ClearActionLayer
	ret
}
}
// CUserLocal::OnSetStandAloneMode
__SUB_CLASS_THIS(00505550, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	call CInPacket::Decode1
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx eax,al
	cmp dword ptr [ecx+0x3854],eax
	je Block2

 Block1:
	mov dword ptr [ecx+0x3854],eax

 Block2:
	ret 4
}
}
// CUserLocal::CheckReactor_Collision
__SUB_CLASS_THIS0(00503D20, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	call get_update_time
	mov ecx,eax
	sub ecx,dword ptr [esi+0x4860]
	cmp ecx,0x3E8
	jl Block3

 Block1:
	mov dword ptr [esi+0x4860],eax
	mov ecx,dword ptr [TSingleton<CReactorPool>::ms_pInstance]
	test ecx,ecx
	je Block3

 Block2:
	add esi,0x4864
	push esi
	call CReactorPool::FindTouchReactorAroundLocalUser

 Block3:
	pop esi
	ret
}
}
// CUserLocal::OnMesoGive_Failed
__SUB_CLASS_THIS(0050D530, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push ecx
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x14],esp
	push 0x32F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x18
	ret 4
}
}
// CUserLocal::GetOnDashSkill
__SUB_CLASS_THIS0(00503450, __thiscall, 41325,  CUserLocal, long) {
__asm {

 Block0:
	call CUser::GetDashingSkill
	sub eax,0x41EEE8
	neg eax
	sbb eax,eax
	and eax,0xFFBE1117
	add eax,0x41EEE9
	ret
}
}
// CUserLocal::OnQuestResult
_SUB_EXCEPTION_HANDLER(514080)
__SUB_CLASS_THIS(00514080, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x74]
	sub esp,0x74
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_514080
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x134
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x70],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov edi,dword ptr [ebp+0x7C]
	mov ecx,edi
	mov dword ptr [ebp+0x58],0
	call CInPacket::Decode1
	movzx eax,al
	add eax,0xFFFFFFFA
	cmp eax,0xC
	ja Block208

 Block1:
	cmp EAX, 0
je Block190
cmp EAX, 1
je Block193
cmp EAX, 2
je Block196
cmp EAX, 3
je Block197
cmp EAX, 4
je Block2
cmp EAX, 5
je Block185
cmp EAX, 6
je Block65
cmp EAX, 7
je Block187
cmp EAX, 8
je Block208
cmp EAX, 9
je Block188
cmp EAX, 10
je Block189
cmp EAX, 11
je Block201
cmp EAX, 12
je Block207


 Block2:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[ebp-0xD0]
	push eax
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [eax+4]
	mov dword ptr [ebp+0x44],ecx
	lea ecx,[ebp-0xD0]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,edi
	call CInPacket::Decode2
	movzx esi,ax
	mov ecx,edi
	mov dword ptr [ebp+0x4C],esi
	call CInPacket::Decode4
	mov ecx,dword ptr [ebp+0x44]
	mov dword ptr [ebp+0x64],eax
	movzx edx,si
	lea eax,[ebp+0x48]
	push eax
	add ecx,0x6F5
	mov ebx,1
	mov dword ptr [ebp+0x48],edx
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetPos
	test eax,eax
	je Block4

 Block3:
	xor ebx,ebx

 Block4:
	xor eax,eax
	mov dword ptr [ebp+0x60],eax
	lea ecx,[ebp+0x1C]
	push 0xCD9
	push ecx
	mov dword ptr [ebp-4],eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	movzx edx,si
	push ebx
	push edx
	push eax
	lea eax,[ebp+0x60]
	push eax
	mov byte ptr [ebp-4],1
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x1C]
	add esp,0x10
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	push offset _D_VTMISSING
	lea ecx,[ebp-0x100]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[ebp-0xE0]
	mov byte ptr [ebp-4],2
	call Ztl_variant_t::_ctor_1
	mov ebx,dword ptr [ebp+0x60]
	push 0
	push 0
	push 0xFFFFFFFF
	push ebx
	push 0
	push 0
	mov byte ptr [ebp-4],3
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov eax,esp
	push 0
	push 0
	lea ecx,[ebp-0x100]
	push ecx
	lea edx,[ebp-0xE0]
	push edx
	push 0xFFFFFFFF
	push eax
	push ebx
	call ZStrUtil::_Conv_0
	add esp,8
	mov dword ptr [ebp+0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],4
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	lea eax,[ebp-0x120]
	mov byte ptr [ebp-4],3
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x58]
	call _x_com_ptr<IWzProperty>::CreateFromUnknown
	lea ecx,[ebp-0x120]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[ebp-0xE0]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[ebp-0x100]
	mov byte ptr [ebp-4],9
	call Ztl_variant_t::~Ztl_variant_t
	mov ebx,dword ptr [ebp+0x58]
	test ebx,ebx
	sete al
	test al,al
	sete al
	test al,al
	je Block59

 Block9:
	xor edi,edi
	mov dword ptr [ebp+0x6C],edi
	mov byte ptr [ebp-4],0xA
	cmp ebx,edi
	jne Block11

 Block10:
	push 0x80004003
	call _com_issue_error

 Block11:
	lea ecx,[ebp+0x10]
	push ecx
	mov ecx,ebx
	call IWzProperty::Get_NewEnum
	push eax
	lea ecx,[ebp+0x5C]
	mov byte ptr [ebp-4],0xB
	call _x_com_ptr<IEnumVARIANT>::CreateFromUnknownComPtr
	mov eax,dword ptr [ebp+0x10]
	mov byte ptr [ebp-4],0xD
	cmp eax,edi
	je Block13

 Block12:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block13:
	lea ecx,[ebp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	mov eax,dword ptr [ebp+0x5C]
	mov byte ptr [ebp-4],0xE
	mov dword ptr [ebp+0x44],edi
	cmp eax,edi
	je Block7

 Block14:
	lea ebx,[ebx]

 Block15:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0xC]
	lea ecx,[ebp+0x44]
	push ecx
	lea ecx,[ebp+0x30]
	push ecx
	push 1
	push eax
	call edx
	test eax,eax
	jne Block29

 Block16:
	mov eax,dword ptr [ebp+0x38]
	push ecx
	mov dword ptr [ebp+0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea ecx,[ebp-0x50]
	push ecx
	mov byte ptr [ebp-4],0xF
	mov ecx,ebx
	mov byte ptr [ebp-4],0xE
	call IWzProperty::Getitem
	cmp word ptr [eax],8
	mov byte ptr [ebp-4],0x10
	jne Block18

 Block17:
	mov eax,dword ptr [eax+8]
	jmp Block19

 Block18:
	mov eax,offset _S___3

 Block19:
	push 0xFFFFFFFF
	push eax
	lea ecx,[ebp+0x68]
	mov dword ptr [ebp+0x68],edi
	call ZXString<char>::AssignWideStr
	cmp word ptr [ebp-0x50],8
	mov byte ptr [ebp-4],0x12
	jne Block22

 Block20:
	mov eax,dword ptr [ebp-0x48]
	xor edx,edx
	mov word ptr [ebp-0x50],dx
	cmp eax,edi
	je Block23

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block22:
	lea eax,[ebp-0x50]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block23:
	mov esi,dword ptr [ebp+0x68]
	cmp esi,edi
	je Block26

 Block24:
	cmp byte ptr [esi],0
	je Block26

 Block25:
	lea ecx,[ebp+0x68]
	push ecx
	push 0xFFFFFFFF
	lea ecx,[ebp+0x6C]
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign

 Block26:
	mov byte ptr [ebp-4],0xE
	cmp esi,edi
	je Block28

 Block27:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block28:
	lea ecx,[ebp+0x30]
	call _xvariant_t::Clear
	mov eax,dword ptr [ebp+0x5C]
	jmp Block15

 Block29:
	mov eax,dword ptr [ebp+0x6C]
	xor edi,edi
	mov ebx,eax

 Block30:
	test eax,eax
	je Block54

 Block31:
	cmp edi,dword ptr [eax-4]
	jae Block54

 Block32:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [ebp+0x40],eax
	mov byte ptr [ebp-4],0x13
	test eax,eax
	je Block40

 Block33:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	test eax,eax
	je Block40

 Block34:
	add eax,8
	je Block40

 Block35:
	lea esi,[eax-8]
	mov dword ptr [ebp+0x54],esi
	test esi,esi
	je Block37

 Block36:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block37:
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x40],esp
	push ebx
	mov byte ptr [ebp-4],0x14
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp+0x64]
	push eax
	push 0
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	mov ecx,dword ptr [ebp+0x6C]
	mov eax,dword ptr [ecx-4]
	dec eax
	cmp edi,eax
	sbb edx,edx
	xor eax,eax
	neg edx
	test edi,edi
	setg al
	push edx
	mov ecx,esi
	push eax
	call CUtilDlgEx::SetUtilDlgEx_TEXT
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	sub eax,0x2000
	mov byte ptr [ebp-4],0xE
	je Block41

 Block38:
	sub eax,1
	jne Block46

 Block39:
	inc edi
	add ebx,4
	jmp Block42

 Block40:
	xor esi,esi
	mov dword ptr [ebp+0x54],esi
	jmp Block37

 Block41:
	dec edi
	sub ebx,4

 Block42:
	test esi,esi
	je Block44

 Block43:
	push 0
	lea ecx,[ebp+0x50]
	call ZRef<CUtilDlgEx>::_ReleaseRaw
	mov dword ptr [ebp+0x54],0

 Block44:
	test edi,edi
	jl Block54

 Block45:
	mov eax,dword ptr [ebp+0x6C]
	jmp Block30

 Block46:
	test esi,esi
	je Block48

 Block47:
	push 0
	lea ecx,[ebp+0x50]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block48:
	cmp word ptr [ebp+0x30],8
	mov byte ptr [ebp-4],0xD
	jne Block51

 Block49:
	mov eax,dword ptr [ebp+0x38]
	xor ecx,ecx
	mov word ptr [ebp+0x30],cx
	test eax,eax
	je Block52

 Block50:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block52

 Block51:
	lea edx,[ebp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block52:
	mov eax,dword ptr [ebp+0x5C]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [ebp-4],0xA
	call edx
	lea ecx,[ebp+0x6C]
	mov byte ptr [ebp-4],9
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [ebp+0x58]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [ebp-4],0
	call edx
	mov eax,dword ptr [ebp+0x60]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block209

 Block53:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block209

 Block54:
	cmp word ptr [ebp+0x30],8
	mov byte ptr [ebp-4],0xD
	jne Block57

 Block55:
	xor eax,eax
	mov word ptr [ebp+0x30],ax
	mov eax,dword ptr [ebp+0x38]
	test eax,eax
	je Block58

 Block56:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block58

 Block57:
	lea ecx,[ebp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block58:
	mov eax,dword ptr [ebp+0x5C]
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	mov byte ptr [ebp-4],0xA
	call eax
	lea ecx,[ebp+0x6C]
	mov byte ptr [ebp-4],9
	call ZArray<ZXString<char>>::RemoveAll
	mov edi,dword ptr [ebp+0x7C]
	mov esi,dword ptr [ebp+0x4C]

 Block59:
	push 0
	push ecx
	mov ebx,esp
	mov dword ptr [ebp+0x40],esp
	push 0
	push offset _S_
	push 0
	push 0
	mov ecx,ebx
	mov dword ptr [ebx],0
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	mov ecx,ebx
	call ZXString<char>::ReleaseBuffer
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push esi
	push 0
	push 7
	call CWvsContext::DeleteFadeWnd_1
	mov ecx,edi
	call CInPacket::Decode2
	movzx eax,ax
	test ax,ax
	je Block61

 Block60:
	mov ecx,dword ptr [ebp+0x64]
	push 0
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push eax
	call CWvsContext::StartQuest

 Block61:
	mov eax,dword ptr [ebp+0x58]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block63

 Block62:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block63:
	mov eax,dword ptr [ebp+0x60]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block208

 Block64:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block208

 Block65:
	lea ecx,[ebp-0xC8]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	lea ecx,[ebp-0xC8]
	mov dword ptr [ebp+0x44],ebx
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,edi
	call CInPacket::Decode2
	movzx esi,ax
	movzx edx,si
	lea eax,[ebp+0x4C]
	xor edi,edi
	push eax
	lea ecx,[ebx+0x6F5]
	mov dword ptr [ebp+0x48],edi
	mov dword ptr [ebp+0x4C],edx
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetPos
	test eax,eax
	je Block67

 Block66:
	mov edi,1
	mov dword ptr [ebp+0x48],edi

 Block67:
	mov dword ptr [ebp+0x5C],0
	lea ecx,[ebp+0x14]
	push 0xCA8
	push ecx
	mov dword ptr [ebp-4],0x15
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	movzx ecx,si
	push edi
	push ecx
	push eax
	lea edx,[ebp+0x5C]
	push edx
	mov byte ptr [ebp-4],0x16
	mov dword ptr [ebp+0x40],ecx
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp+0x14]
	add esp,0x10
	mov byte ptr [ebp-4],0x15
	test eax,eax
	je Block69

 Block68:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block69:
	push offset _D_VTMISSING
	lea ecx,[ebp-0xF0]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[ebp-0x110]
	mov byte ptr [ebp-4],0x17
	call Ztl_variant_t::_ctor_1
	mov edi,dword ptr [ebp+0x5C]
	push 0
	push 0
	lea eax,[ebp-0xF0]
	push eax
	lea ecx,[ebp-0x110]
	push ecx
	push ecx
	mov dword ptr [ebp+0x4C],esp
	mov ecx,esp
	mov bl,0x18
	push edi
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0x19
	jne Block71

 Block70:
	push 0x80004003
	call _com_issue_error

 Block71:
	lea edx,[ebp-0x140]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x1A
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x60]
	call _x_com_ptr<IWzProperty>::CreateFromUnknown
	lea ecx,[ebp-0x140]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[ebp-0x110]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[ebp-0xF0]
	call Ztl_variant_t::~Ztl_variant_t
	mov esi,dword ptr [ebp+0x60]
	test esi,esi
	sete al
	test al,al
	je Block76

 Block72:
	mov byte ptr [ebp-4],0x15
	test esi,esi
	je Block74

 Block73:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block74:
	mov dword ptr [ebp-4],0xFFFFFFFF
	test edi,edi
	je Block208

 Block75:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<unsigned short>::_Release
	add esp,4
	jmp Block208

 Block76:
	xor edi,edi
	mov dword ptr [ebp+0x6C],edi
	xor eax,eax
	xor ebx,ebx
	mov byte ptr [ebp-4],0x1F
	mov dword ptr [ebp-0x40],eax
	mov dword ptr [ebp-0x3C],eax
	mov dword ptr [ebp-0x38],eax
	mov dword ptr [ebp-0x34],eax
	mov dword ptr [ebp-0x30],eax
	mov dword ptr [ebp+0x64],ebx
	cmp esi,edi
	je Block7

 Block77:
	mov edi,edi

 Block78:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0x20]
	lea eax,[ebp+0x68]
	push eax
	push esi
	mov dword ptr [ebp+0x68],edi
	call ecx
	cmp eax,edi
	jge Block80

 Block79:
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push esi
	push eax
	call _com_issue_errorex

 Block80:
	cmp ebx,dword ptr [ebp+0x68]
	jae Block143

 Block81:
	mov eax,0x20
	call __chkstk
	mov eax,esp
	push edi
	push edi
	push 0xA
	push eax
	push ebx
	call __itow
	add esp,8
	mov dword ptr [ebp+0x4C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea edx,[ebp-0xB0]
	mov byte ptr [ebp-4],0x20
	push edx
	mov ecx,esi
	mov byte ptr [ebp-4],0x1F
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x21
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x68]
	mov dword ptr [ebp+0x68],edi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,edi
	jge Block83

 Block82:
	cmp eax,0x80004002
	jne Block148

 Block83:
	cmp word ptr [ebp-0xB0],8
	mov byte ptr [ebp-4],0x23
	jne Block86

 Block84:
	xor eax,eax
	mov word ptr [ebp-0xB0],ax
	mov eax,dword ptr [ebp-0xA8]
	cmp eax,edi
	je Block87

 Block85:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block87

 Block86:
	lea ecx,[ebp-0xB0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block87:
	mov edi,dword ptr [ebp+0x68]
	test edi,edi
	sete al
	test al,al
	jne Block91

 Block88:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x4C],esp
	push 0x1AA6
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [ebp-4],0x24
	test edi,edi
	je Block7

 Block89:
	lea eax,[ebp-0x90]
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],0x23
	call IWzProperty::Getitem
	or dword ptr [ebp+0x58],1
	push eax
	mov byte ptr [ebp-4],0x25
	call get_int32
	add esp,8
	test eax,eax
	jle Block91

 Block90:
	xor bl,bl
	jmp Block92

 Block91:
	mov bl,1

 Block92:
	test byte ptr [ebp+0x58],1
	mov dword ptr [ebp-4],0x23
	je Block97

 Block93:
	and dword ptr [ebp+0x58],0xFFFFFFFE
	cmp word ptr [ebp-0x90],8
	jne Block96

 Block94:
	mov eax,dword ptr [ebp-0x88]
	xor ecx,ecx
	mov word ptr [ebp-0x90],cx
	test eax,eax
	je Block97

 Block95:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block97

 Block96:
	lea edx,[ebp-0x90]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block97:
	test bl,bl
	je Block100

 Block98:
	mov byte ptr [ebp-4],0x1F
	test edi,edi
	je Block142

 Block99:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx
	inc dword ptr [ebp+0x64]
	mov ebx,dword ptr [ebp+0x64]
	xor edi,edi
	jmp Block78

 Block100:
	mov ebx,dword ptr [ebp+0x44]
	mov edx,dword ptr [ebx+0x3D]
	push edx
	lea esi,[ebx+0x39]
	push esi
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [ebp+0x4C],eax
	mov eax,dword ptr [ebx+0x3D]
	push eax
	push esi
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	add esp,0x10
	cmp ecx,0x7D1
	jne Block102

 Block101:
	mov dword ptr [ebp+0x38],0x20000
	mov dword ptr [ebp+0x3C],0
	jmp Block103

 Block102:
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	mov eax,1
	xor edx,edx
	call __allshl
	mov dword ptr [ebp+0x38],eax
	mov dword ptr [ebp+0x3C],edx

 Block103:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x54],esp
	push 0xCAA
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [ebp-4],0x26
	test edi,edi
	je Block7

 Block104:
	lea edx,[ebp-0xC0]
	push edx
	mov ecx,edi
	mov byte ptr [ebp-4],0x23
	call IWzProperty::Getitem
	push eax
	mov byte ptr [ebp-4],0x27
	call get_int32
	mov esi,8
	add esp,8
	mov ebx,eax
	mov byte ptr [ebp-4],0x23
	cmp word ptr [ebp-0xC0],si
	jne Block107

 Block105:
	xor eax,eax
	mov word ptr [ebp-0xC0],ax
	mov eax,dword ptr [ebp-0xB8]
	test eax,eax
	je Block108

 Block106:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block108

 Block107:
	lea ecx,[ebp-0xC0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block108:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x54],esp
	push 0x191C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[ebp-0x70]
	mov byte ptr [ebp-4],0x28
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],0x23
	call IWzProperty::Getitem
	push eax
	mov byte ptr [ebp-4],0x29
	call get_int32
	add esp,8
	mov edi,eax
	mov byte ptr [ebp-4],0x23
	cmp word ptr [ebp-0x70],si
	jne Block111

 Block109:
	mov eax,dword ptr [ebp-0x68]
	xor ecx,ecx
	mov word ptr [ebp-0x70],cx
	test eax,eax
	je Block112

 Block110:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block112

 Block111:
	lea edx,[ebp-0x70]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block112:
	xor esi,esi
	xor eax,eax
	or esi,ebx
	or edi,eax
	mov ecx,esi
	or ecx,edi
	jne Block114

 Block113:
	or esi,0xFFFFFFFF
	or edi,0xFFFFFFFF

 Block114:
	push 2
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x54],esp
	push 0x1AB2
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [ebp+0x68]
	lea eax,[ebp-0x80]
	mov byte ptr [ebp-4],0x2A
	push eax
	mov byte ptr [ebp-4],0x23
	call IWzProperty::Getitem
	push eax
	mov byte ptr [ebp-4],0x2B
	call get_int32
	add esp,8
	cmp word ptr [ebp-0x80],8
	mov ebx,eax
	mov byte ptr [ebp-4],0x23
	jne Block117

 Block115:
	mov eax,dword ptr [ebp-0x78]
	xor ecx,ecx
	mov word ptr [ebp-0x80],cx
	test eax,eax
	je Block118

 Block116:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block118

 Block117:
	lea edx,[ebp-0x80]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block118:
	and esi,dword ptr [ebp+0x38]
	and edi,dword ptr [ebp+0x3C]
	or esi,edi
	jne Block120

 Block119:
	cmp dword ptr [ebp+0x4C],9
	jne Block122

 Block120:
	cmp ebx,2
	je Block123

 Block121:
	mov eax,dword ptr [ebp+0x44]
	movzx ecx,byte ptr [eax+0x11]
	cmp ebx,ecx
	je Block123

 Block122:
	mov eax,dword ptr [ebp+0x68]
	mov edx,dword ptr [eax]
	push eax
	jmp Block141

 Block123:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x54],esp
	push 0x965
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edi,dword ptr [ebp+0x68]
	lea edx,[ebp-0x130]
	mov byte ptr [ebp-4],0x2C
	push edx
	mov ecx,edi
	mov byte ptr [ebp-4],0x23
	call IWzProperty::Getitem
	push eax
	mov byte ptr [ebp-4],0x2D
	call get_int32
	mov ecx,eax
	mov eax,0x431BDE83
	imul ecx
	sar edx,0x12
	mov esi,edx
	shr esi,0x1F
	add esp,8
	lea ecx,[ebp-0x130]
	add esi,edx
	mov byte ptr [ebp-4],0x23
	call Ztl_variant_t::~Ztl_variant_t
	cmp dword ptr [ebp+esi*4-0x40],0
	jne Block140

 Block124:
	mov eax,dword ptr [ebp+0x6C]
	mov dword ptr [ebp+esi*4-0x40],1
	test eax,eax
	je Block132

 Block125:
	cmp byte ptr [eax],0
	je Block129

 Block126:
	lea eax,[ebp+0xC]
	push 0xCDD
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x6C]
	mov byte ptr [ebp-4],0x2E
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [ebp+0xC]
	mov byte ptr [ebp-4],0x23
	test eax,eax
	je Block128

 Block127:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block128:
	mov eax,dword ptr [ebp+0x6C]

 Block129:
	test eax,eax
	je Block132

 Block130:
	cmp byte ptr [eax],0
	je Block132

 Block131:
	push offset _S___2
	lea ecx,[ebp+0x6C]
	call ZXString<char>::op_add_assign_t_1

 Block132:
	dec esi
	cmp esi,3
	ja Block140

 Block133:
	cmp ESI, 0
je Block134
cmp ESI, 1
je Block135
cmp ESI, 2
je Block136
cmp ESI, 3
je Block137


 Block134:
	lea ecx,[ebp+4]
	push 0xA
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x6C]
	mov byte ptr [ebp-4],0x2F
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [ebp+4]
	jmp Block138

 Block135:
	lea edx,[ebp+0x20]
	push 0x1A87
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x6C]
	mov byte ptr [ebp-4],0x30
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [ebp+0x20]
	jmp Block138

 Block136:
	lea eax,[ebp+8]
	push 0xB
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x6C]
	mov byte ptr [ebp-4],0x31
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [ebp+8]
	jmp Block138

 Block137:
	lea ecx,[ebp+0x18]
	push 0x1A38
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp+0x6C]
	mov byte ptr [ebp-4],0x32
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [ebp+0x18]

 Block138:
	mov byte ptr [ebp-4],0x23
	test eax,eax
	je Block140

 Block139:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block140:
	mov edx,dword ptr [edi]
	push edi

 Block141:
	mov eax,dword ptr [edx+8]
	mov byte ptr [ebp-4],0x1F
	call eax
	mov esi,dword ptr [ebp+0x60]

 Block142:
	inc dword ptr [ebp+0x64]
	mov ebx,dword ptr [ebp+0x64]
	xor edi,edi
	jmp Block78

 Block143:
	mov dword ptr [ebp+0x68],edi
	lea ecx,[ebp]
	push 0xCDC
	push ecx
	mov byte ptr [ebp-4],0x33
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [ebp+0x6C]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[ebp+0x68]
	push eax
	mov byte ptr [ebp-4],0x34
	call ZXString<char>::Format
	mov eax,dword ptr [ebp]
	add esp,0xC
	mov byte ptr [ebp-4],0x33
	cmp eax,edi
	je Block145

 Block144:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block145:
	lea ecx,[ebp+0x28]
	push 0xCA7
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [ebp+0x48]
	mov ecx,dword ptr [ebp+0x40]
	mov eax,dword ptr [eax]
	push edx
	push ecx
	push eax
	lea edx,[ebp+0x5C]
	push edx
	mov byte ptr [ebp-4],0x35
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp+0x28]
	add esp,0x10
	mov byte ptr [ebp-4],0x33
	cmp eax,edi
	je Block147

 Block146:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block147:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x2C]
	push eax
	call esi
	lea ecx,[ebp-0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block149

 Block148:
	push eax
	call _com_issue_error

 Block149:
	lea edx,[ebp-0x1C]
	push edx
	mov byte ptr [ebp-4],0x36
	call esi
	lea eax,[ebp-0x1C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block151

 Block150:
	push eax
	call _com_issue_error

 Block151:
	mov eax,dword ptr [ebp+0x5C]
	push edi
	push edi
	lea ecx,[ebp-0x2C]
	push ecx
	lea edx,[ebp-0x1C]
	push edx
	push ecx
	mov dword ptr [ebp+0x54],esp
	mov ecx,esp
	mov bl,0x37
	push eax
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [ebp-4],0x38
	cmp dword ptr [_D_G_RM],edi
	jne Block153

 Block152:
	push 0x80004003
	call _com_issue_error

 Block153:
	lea ecx,[ebp-0xA0]
	push ecx
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x39
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x60]
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,edi
	jge Block156

 Block154:
	cmp eax,0x80004002
	je Block156

 Block155:
	push eax
	call _com_issue_error

 Block156:
	cmp word ptr [ebp-0xA0],8
	mov byte ptr [ebp-4],bl
	jne Block163

 Block157:
	mov eax,dword ptr [ebp-0x98]
	xor edx,edx
	mov word ptr [ebp-0xA0],dx
	cmp eax,edi
	je Block159

 Block158:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block159:
	mov edi,dword ptr [ZImports::_VariantClear]

 Block160:
	mov esi,8
	mov byte ptr [ebp-4],0x36
	cmp word ptr [ebp-0x1C],si
	jne Block164

 Block161:
	mov eax,dword ptr [ebp-0x14]
	xor ecx,ecx
	mov word ptr [ebp-0x1C],cx
	test eax,eax
	je Block165

 Block162:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block165

 Block163:
	mov edi,dword ptr [ZImports::_VariantClear]
	lea eax,[ebp-0xA0]
	push eax
	call edi
	jmp Block160

 Block164:
	lea edx,[ebp-0x1C]
	push edx
	call edi

 Block165:
	mov byte ptr [ebp-4],0x33
	cmp word ptr [ebp-0x2C],si
	jne Block168

 Block166:
	xor eax,eax
	mov word ptr [ebp-0x2C],ax
	mov eax,dword ptr [ebp-0x24]
	test eax,eax
	je Block169

 Block167:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block169

 Block168:
	lea ecx,[ebp-0x2C]
	push ecx
	call edi

 Block169:
	mov ebx,dword ptr [ebp+0x60]
	test ebx,ebx
	je Block177

 Block170:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x54],esp
	push 0xCDE
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[ebp-0x60]
	mov byte ptr [ebp-4],0x3A
	push eax
	mov ecx,ebx
	mov byte ptr [ebp-4],0x33
	call IWzProperty::Getitem
	push eax
	mov byte ptr [ebp-4],0x3B
	call get_int32
	add esp,8
	cmp word ptr [ebp-0x60],8
	mov esi,eax
	mov byte ptr [ebp-4],0x33
	jne Block173

 Block171:
	mov eax,dword ptr [ebp-0x58]
	xor ecx,ecx
	mov word ptr [ebp-0x60],cx
	test eax,eax
	je Block174

 Block172:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block174

 Block173:
	lea edx,[ebp-0x60]
	push edx
	call edi

 Block174:
	test esi,esi
	jge Block177

 Block175:
	lea eax,[ebp+0x24]
	push 0x11C8
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [ebp+0x68]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[ebp+0x68]
	push edx
	mov byte ptr [ebp-4],0x3C
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x24]
	add esp,0xC
	mov byte ptr [ebp-4],0x33
	test eax,eax
	je Block177

 Block176:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block177:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	lea eax,[ebp+0x68]
	mov dword ptr [ebp+0x54],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	call CUtilDlg::Notice
	mov eax,dword ptr [ebp+0x68]
	add esp,0x14
	mov byte ptr [ebp-4],0x1F
	test eax,eax
	je Block179

 Block178:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block179:
	mov eax,dword ptr [ebp+0x6C]
	mov byte ptr [ebp-4],0x1E
	test eax,eax
	je Block181

 Block180:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block181:
	mov byte ptr [ebp-4],0x15
	test ebx,ebx
	je Block183

 Block182:
	mov ecx,dword ptr [ebx]
	mov edx,dword ptr [ecx+8]
	push ebx
	call edx

 Block183:
	mov eax,dword ptr [ebp+0x5C]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block208

 Block184:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4
	jmp Block208

 Block185:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x54],esp
	push 0xCDA

 Block186:
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block208

 Block187:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x54],esp
	push 0x1A8B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block208

 Block188:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x54],esp
	push 0xD97
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block208

 Block189:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x54],esp
	push 0xD98
	jmp Block186

 Block190:
	mov ecx,edi
	call CInPacket::Decode2
	movzx eax,ax
	movzx ebx,ax
	test ebx,ebx
	jle Block208

 Block191:
	mov ecx,edi
	call CInPacket::Decode2
	mov ecx,edi
	movzx esi,ax
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	push eax
	push esi
	call CWvsContext::AddQuestTimer
	sub ebx,1
	jne Block191

 Block192:
	jmp Block208

 Block193:
	mov ecx,edi
	call CInPacket::Decode2
	movzx eax,ax
	movzx esi,ax
	test esi,esi
	jle Block208

 Block194:
	mov ecx,edi
	call CInPacket::Decode2
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx eax,ax
	push 0
	push eax
	call CWvsContext::RemoveQuestTimer
	sub esi,1
	jne Block194

 Block195:
	jmp Block208

 Block196:
	mov ecx,edi
	call CInPacket::Decode2
	mov ecx,edi
	movzx esi,ax
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 1
	push eax
	push esi
	call CWvsContext::AddQuestTimer
	jmp Block208

 Block197:
	mov ecx,edi
	call CInPacket::Decode2
	movzx eax,ax
	test eax,eax
	jle Block208

 Block198:
	mov esi,eax

 Block199:
	mov ecx,edi
	call CInPacket::Decode2
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx eax,ax
	push 1
	push eax
	call CWvsContext::RemoveQuestTimer
	sub esi,1
	jne Block199

 Block200:
	jmp Block208

 Block201:
	mov ecx,edi
	call CInPacket::Decode2
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx esi,ax
	push 0
	push esi
	call CWvsContext::RemoveQuestTimer
	mov dword ptr [ebp+0x64],0
	push esi
	lea ecx,[ebp+0x48]
	push ecx
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	mov dword ptr [ebp-4],0x3D
	call CQuestMan::GetQuestName
	lea edx,[ebp+0x2C]
	push 0x1015
	mov bl,0x3E
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [ebp+0x48]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[ebp+0x64]
	push edx
	mov byte ptr [ebp-4],0x3F
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x2C]
	add esp,0xC
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block203

 Block202:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block203:
	lea eax,[ebp+0x64]
	push 7
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [ebp+0x48]
	add esp,8
	mov byte ptr [ebp-4],0x3D
	test eax,eax
	je Block205

 Block204:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block205:
	mov eax,dword ptr [ebp+0x64]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block208

 Block206:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block208

 Block207:
	mov ecx,edi
	call CInPacket::Decode2
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx eax,ax
	push 0
	push eax
	call CWvsContext::ResetQuestTimer

 Block208:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	call CWvsContext::CheckNewQuestAvailable

 Block209:
	lea esp,[ebp-0x150]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x70]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x74
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CUserLocal::OnGoToCommoditySN
__SUB_CLASS_THIS(00505760, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [ecx+0x40CC],eax
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [esp+4],0
	jmp  CWvsContext::SendMigrateToShopRequest
}
}
// CUserLocal::GetFieldID
__SUB_CLASS_THIS0(005042D0, __thiscall, 41327,  CUserLocal, unsigned long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	jmp  CWvsContext::GetCurFieldID
}
}
// CUserLocal::GetDCRect
_SUB_EXCEPTION_HANDLER(5050A0)
__SUB_CLASS_THIS(005050A0, __thiscall, 41422,  CUserLocal, void, tagRECT&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5050A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ebp,dword ptr [esp+0x3C]
	push ebp
	call SetRectEmpty
	xor ebx,ebx
	cmp dword ptr [edi+0x46F0],ebx
	sete al
	cmp al,bl
	jne Block39

 Block1:
	mov ecx,dword ptr [edi+0x46F0]
	cmp ecx,ebx
	jne Block3

 Block2:
	push 0x80004003
	call _com_issue_error

 Block3:
	lea eax,[esp+0x1C]
	push eax
	call IWzVector2D::Getorigin
	cmp word ptr [esp+0x1C],8
	jne Block6

 Block4:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	cmp eax,ebx
	je Block7

 Block5:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block7

 Block6:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block7:
	mov ecx,dword ptr [edi+0x46F0]
	cmp ecx,ebx
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	lea eax,[esp+0x14]
	push eax
	call IWzGr2DLayer::Getlt
	mov esi,dword ptr [eax]
	mov dword ptr [esp+0x34],ebx
	cmp esi,ebx
	jne Block11

 Block10:
	push 0x80004003
	call _com_issue_error

 Block11:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x20]
	lea edx,[esp+0x3C]
	push edx
	push esi
	mov dword ptr [esp+0x44],ebx
	call eax
	cmp eax,ebx
	jge Block13

 Block12:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block13:
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr [ebp],ecx
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block15

 Block14:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block15:
	mov ecx,dword ptr [edi+0x46F0]
	cmp ecx,ebx
	jne Block17

 Block16:
	push 0x80004003
	call _com_issue_error

 Block17:
	lea edx,[esp+0x14]
	push edx
	call IWzGr2DLayer::Getlt
	mov esi,dword ptr [eax]
	mov dword ptr [esp+0x34],1
	cmp esi,ebx
	jne Block19

 Block18:
	push 0x80004003
	call _com_issue_error

 Block19:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x28]
	lea ecx,[esp+0x3C]
	push ecx
	push esi
	mov dword ptr [esp+0x44],ebx
	call edx
	cmp eax,ebx
	jge Block21

 Block20:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block21:
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [ebp+4],eax
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block23

 Block22:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block23:
	mov ecx,dword ptr [edi+0x46F0]
	cmp ecx,ebx
	jne Block25

 Block24:
	push 0x80004003
	call _com_issue_error

 Block25:
	lea eax,[esp+0x14]
	push eax
	call IWzGr2DLayer::Getrb
	mov esi,dword ptr [eax]
	mov dword ptr [esp+0x34],2
	cmp esi,ebx
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x20]
	lea edx,[esp+0x3C]
	push edx
	push esi
	mov dword ptr [esp+0x44],ebx
	call eax
	cmp eax,ebx
	jge Block29

 Block28:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block29:
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr [ebp+8],ecx
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block31

 Block30:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block31:
	mov ecx,dword ptr [edi+0x46F0]
	cmp ecx,ebx
	jne Block33

 Block32:
	push 0x80004003
	call _com_issue_error

 Block33:
	lea edx,[esp+0x18]
	push edx
	call IWzGr2DLayer::Getrb
	mov esi,dword ptr [eax]
	mov dword ptr [esp+0x34],3
	cmp esi,ebx
	jne Block35

 Block34:
	push 0x80004003
	call _com_issue_error

 Block35:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x28]
	lea ecx,[esp+0x3C]
	push ecx
	push esi
	mov dword ptr [esp+0x44],ebx
	call edx
	cmp eax,ebx
	jge Block37

 Block36:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block37:
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [ebp+0xC],eax
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block39

 Block38:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block39:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 4
}
}
// CUserLocal::OnFieldFadeInOut
__SUB_CLASS_THIS(00505790, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push ebx
	push ebp
	push esi
	mov esi,dword ptr [esp+0x10]
	push edi
	mov edi,ecx
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov ebx,eax
	call CInPacket::Decode4
	mov ecx,esi
	mov ebp,eax
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [esp+0x14],eax
	call CInPacket::Decode4
	mov esi,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	lea ecx,[edi+0x88]
	call CAvatar::GetLayerZ
	sub eax,2
	push eax
	mov eax,dword ptr [esp+0x1C]
	push eax
	push ebp
	push ebx
	mov ecx,esi
	call CAnimationDisplayer::RegisterFadeInOutAnimation
	pop edi
	pop esi
	pop ebp
	pop ebx
	ret 4
}
}
// CUserLocal::OnPetActivated
_SUB_EXCEPTION_HANDLER(50FB90)
__SUB_CLASS_THIS(0050FB90, __thiscall, 41362,  CUserLocal, long, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50FB90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x38]
	mov ecx,edi
	call CInPacket::Decode1
	movzx ebx,al
	mov dword ptr [esp+0x14],ebx
	cmp ebx,2
	ja Block42

 Block1:
	mov ecx,edi
	call CInPacket::Decode1
	test al,al
	je Block8

 Block2:
	mov ecx,edi
	call CInPacket::Decode1
	xor ecx,ecx
	test al,al
	setne cl
	mov eax,ecx
	test eax,eax
	je Block4

 Block3:
	push 0
	push ebx
	mov ecx,esi
	call CUser::SetActivePet

 Block4:
	push 0x248
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x38],eax
	mov dword ptr [esp+0x30],5
	test eax,eax
	je Block6

 Block5:
	mov ecx,eax
	call CPet::_ctor_default
	jmp Block7

 Block6:
	xor eax,eax

 Block7:
	push eax
	push ebx
	mov ecx,esi
	mov dword ptr [esp+0x38],0xFFFFFFFF
	call CUser::SetActivePet
	mov edx,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [edx+ebx*8+4]
	push edi
	push esi
	call CPet::Init_1
	mov eax,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [eax+ebx*8+4]
	call CPet::UpdatePetAbility
	jmp Block22

 Block8:
	push 0
	push ebx
	mov ecx,esi
	call CUser::SetActivePet
	xor ebp,ebp
	mov dword ptr [esp+0x38],ebp
	mov ebx,6
	mov ecx,edi
	mov dword ptr [esp+0x30],ebx
	call CInPacket::Decode1
	movzx eax,al
	dec eax
	cmp eax,3
	ja Block19

 Block9:
	cmp EAX, 0
je Block10
cmp EAX, 1
je Block11
cmp EAX, 2
je Block12
cmp EAX, 3
je Block13


 Block10:
	lea ecx,[esp+0x18]
	push 0x18C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x34],7
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]
	jmp Block14

 Block11:
	lea edx,[esp+0x1C]
	push 0x18D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x34],8
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	jmp Block14

 Block12:
	lea eax,[esp+0x20]
	push 0x18E
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x34],9
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x20]
	jmp Block14

 Block13:
	lea ecx,[esp+0x24]
	push 0x18A9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0x34],0xA
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x24]

 Block14:
	mov byte ptr [esp+0x30],bl
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov ebp,dword ptr [esp+0x38]
	test ebp,ebp
	je Block19

 Block17:
	cmp dword ptr [ebp-4],0
	je Block19

 Block18:
	lea edx,[esp+0x38]
	push 0xC
	push edx
	call CHATLOG_ADD
	add esp,8

 Block19:
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test ebp,ebp
	je Block21

 Block20:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block21:
	mov ebx,dword ptr [esp+0x14]

 Block22:
	push 1
	lea ecx,[esi+0x88]
	call CAvatar::NotifyAvatarModified
	mov eax,dword ptr [esi+0x2E44]
	mov eax,dword ptr [eax+4]
	test eax,eax
	je Block35

 Block23:
	mov ecx,dword ptr [eax+0x16C]
	push ecx
	add eax,0x164
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	je Block29

 Block24:
	mov ecx,dword ptr [TSingleton<CUIPetEquip>::ms_pInstance]
	test ecx,ecx
	je Block29

 Block25:
	mov eax,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	test eax,eax
	je Block27

 Block26:
	mov eax,dword ptr [eax+0x3C0]
	jmp Block28

 Block27:
	xor eax,eax

 Block28:
	push 0
	push 0
	push eax
	call CUIPetEquip::SetPetConsumeItem

 Block29:
	mov edx,dword ptr [esi+0x2E44]
	mov eax,dword ptr [edx+4]
	mov ecx,dword ptr [eax+0x178]
	push ecx
	add eax,0x170
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	je Block35

 Block30:
	mov ecx,dword ptr [TSingleton<CUIPetEquip>::ms_pInstance]
	test ecx,ecx
	je Block35

 Block31:
	mov eax,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	test eax,eax
	je Block33

 Block32:
	mov eax,dword ptr [eax+0x3C4]
	jmp Block34

 Block33:
	xor eax,eax

 Block34:
	push 0
	push 0
	push eax
	call CUIPetEquip::SetPetConsumeMPItem

 Block35:
	mov eax,dword ptr [esi+0x2E44]
	cmp dword ptr [eax+0x14],0
	je Block37

 Block36:
	mov ecx,dword ptr [eax+4]
	push 5
	call CPet::SetPositionContext
	mov edx,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [edx+0xC]
	push 3
	call CPet::SetPositionContext
	mov eax,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [eax+0x14]
	push 4
	call CPet::SetPositionContext
	mov eax,ebx
	jmp Block43

 Block37:
	cmp dword ptr [eax+0xC],0
	je Block39

 Block38:
	mov ecx,dword ptr [eax+4]
	push 1
	call CPet::SetPositionContext
	mov ecx,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [ecx+0xC]
	push 2
	call CPet::SetPositionContext
	mov eax,ebx
	jmp Block43

 Block39:
	mov eax,dword ptr [eax+4]
	test eax,eax
	je Block41

 Block40:
	push 0
	mov ecx,eax
	call CPet::SetPositionContext

 Block41:
	mov eax,ebx
	jmp Block43

 Block42:
	or eax,0xFFFFFFFF

 Block43:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 4
}
}
// CUserLocal::SetPairCharacterID
__SUB_CLASS_THIS0(00508680, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0x14
	push ebx
	mov ebx,ecx
	mov eax,dword ptr [ebx+0x2E80]
	or eax,dword ptr [ebx+0x2E84]
	push esi
	push edi
	je Block2

 Block1:
	lea ecx,[ebx+0x2E78]
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::OnCoupleRecordRemove

 Block2:
	push ebp
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x1C]
	push edx
	mov ecx,ebp
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x10],eax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block7

 Block3:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block6

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block6:
	mov dword ptr [esp+0x20],0

 Block7:
	xor eax,eax
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x18],eax
	mov edi,offset _D_G_ANRINGBODYPART
	jmp Block9

 Block9:
	mov ecx,dword ptr [edi]
	mov esi,dword ptr [ebp+ecx*8+0x3A54]
	test esi,esi
	je Block12

 Block10:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x2B70
	jne Block12

 Block11:
	cmp ecx,0x10F7C0
	jne Block20

 Block12:
	add edi,4
	cmp edi,offset _D_G_ANPETABILBODYP
	jl Block9

 Block13:
	mov esi,dword ptr [esp+0x10]

 Block14:
	mov eax,dword ptr [esp+0x10]
	mov eax,dword ptr [eax+0x60D]
	mov dword ptr [esp+0x10],eax
	pop ebp
	test eax,eax
	je Block19

 Block15:
	lea esp,[esp]

 Block16:
	lea ecx,[esp+0xC]
	push ecx
	call ZList<GW_CoupleRecord>::GetNext
	mov edx,dword ptr [eax+0x11]
	mov edi,dword ptr [esp+0x14]
	add esp,4
	cmp edx,edi
	jne Block18

 Block17:
	mov ecx,dword ptr [eax+0x15]
	mov edx,dword ptr [esp+0x14]
	cmp ecx,edx
	je Block21

 Block18:
	cmp dword ptr [esp+0xC],0
	jne Block16

 Block19:
	xor eax,eax
	pop edi
	pop esi
	mov dword ptr [ebx+0x2E78],eax
	mov dword ptr [ebx+0x2E7C],eax
	mov dword ptr [ebx+0x2E80],eax
	mov dword ptr [ebx+0x2E84],eax
	pop ebx
	add esp,0x14
	ret

 Block20:
	mov ecx,dword ptr [esi+0x18]
	mov edx,dword ptr [esi+0x1C]
	mov dword ptr [esp+0x14],ecx
	lea ecx,[esi+0xC]
	mov dword ptr [esp+0x18],edx
	call TSecType<long>::GetData
	mov esi,eax
	jmp Block14

 Block21:
	lea ecx,[ebx+0x2E78]
	mov dword ptr [ecx],edi
	mov dword ptr [ecx+4],edx
	mov edx,dword ptr [eax+0x19]
	push esi
	mov dword ptr [ebx+0x2E80],edx
	mov eax,dword ptr [eax+0x1D]
	push ebx
	mov dword ptr [ebx+0x2E84],eax
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::OnCoupleRecordAdd
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret
}
}
// CUserLocal::TalkToNpc
_SUB_EXCEPTION_HANDLER(5321F0)
__SUB_CLASS_THIS(005321F0, __thiscall, 41429,  CUserLocal, void, NakedParam<ZRef<CNpc>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5321F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x4690],0
	mov dword ptr [esp+0x28],0
	je Block2

 Block1:
	call CUserLocal::OnKeyDownSkillEnd

 Block2:
	mov ecx,dword ptr [esp+0x34]
	mov eax,dword ptr [ecx+0xC4]
	test eax,eax
	je Block5

 Block3:
	cmp dword ptr [eax-4],0
	je Block5

 Block4:
	call CNpc::ShowQuestList
	jmp Block6

 Block5:
	push 0x3F
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	mov eax,dword ptr [esp+0x34]
	mov eax,dword ptr [eax+0xA4]
	push eax
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x2C],1
	call COutPacket::Encode4
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	add esi,4
	lea eax,[esp+8]
	push eax
	mov ecx,esi
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+8]
	push eax
	mov ecx,esi
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[esp+0x14]
	call COutPacket::Encode2
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x28],0
	call ZArray<unsigned char>::RemoveAll

 Block6:
	cmp dword ptr [esp+0x34],0
	mov dword ptr [esp+0x28],0xFFFFFFFF
	je Block8

 Block7:
	push 0
	lea ecx,[esp+0x34]
	call ZRef<CNpc>::_ReleaseRaw

 Block8:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x24
	ret 8
}
}
// CUserLocal::UseFuncKeyMappedUpKey
__SUB_CLASS_THIS(00507F00, __thiscall, 41389,  CUserLocal, int32_t, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	sub esp,8
	push ebx
	push esi
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	shr eax,0x10
	push edi
	and eax,0xFF
	mov edi,ecx
	mov ecx,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	push eax
	call CFuncKeyMappedMan::FuncKeyMapped
	mov ebx,eax
	cmp byte ptr [ebx],0
	jne Block2

 Block1:
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	add esp,8
	ret 4

 Block2:
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [esp+0x10]
	test eax,eax
	je Block7

 Block3:
	push ebp
	lea esi,[eax-0x10]
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block6

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block6:
	pop ebp

 Block7:
	cmp byte ptr [ebx],5
	jne Block18

 Block8:
	mov eax,dword ptr [ebx+1]
	sub eax,0x34
	je Block16

 Block9:
	sub eax,1
	jne Block18

 Block10:
	mov ecx,dword ptr [edi+0x3BA0]
	push ecx
	lea edx,[edi+0x3B98]
	push edx
	mov dword ptr [edi+0x4808],eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	jne Block18

 Block11:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x28
	call CInputSystem::IsKeyPressed
	mov esi,eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+8]
	mov ecx,edi
	call edx
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nReverseInput_
	test eax,eax
	je Block13

 Block12:
	xor eax,eax
	test esi,esi
	sete al
	mov esi,eax

 Block13:
	test esi,esi
	jne Block18

 Block14:
	mov ecx,edi
	call CUser::IsOnFoothold
	test eax,eax
	jne Block18

 Block15:
	mov dword ptr [edi+0x4808],1
	pop edi
	lea eax,[esi+1]
	pop esi
	pop ebx
	add esp,8
	ret 4

 Block16:
	cmp dword ptr [edi+0x3AE4],0x217E76B
	jne Block18

 Block17:
	mov dword ptr [edi+0x3AFC],0

 Block18:
	pop edi
	pop esi
	mov eax,1
	pop ebx
	add esp,8
	ret 4
}
}
// CUserLocal::TryDoingCyclone
__SUB_CLASS_THIS0(00532D60, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0xC
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	call edx
	mov ecx,dword ptr [eax+0x1104]
	push ecx
	add eax,0x10FC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block6

 Block1:
	call get_update_time
	sub eax,dword ptr [esi+0x4804]
	cmp eax,0x3E8
	jbe Block6

 Block2:
	mov edx,dword ptr [esi+0x640]
	and edx,0xFFFFFFFE
	cmp edx,0x12
	je Block6

 Block3:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xCD
	jne Block6

 Block4:
	push edi
	call get_update_time
	mov dword ptr [esi+0x4804],eax
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0xC]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	lea ecx,[esp+8]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x1EA20AB
	push edi
	mov dword ptr [esp+0x14],0
	call CSkillInfo::GetSkillLevel_0
	pop edi
	test eax,eax
	je Block6

 Block5:
	xor edx,edx
	push edx
	xor ecx,ecx
	push ecx
	push edx
	mov edx,dword ptr [esp+0x10]
	push eax
	push edx
	mov ecx,esi
	call CUserLocal::TryDoingBodyAttack

 Block6:
	pop esi
	add esp,0xC
	ret
}
}
// CDualKeyChecker::~CDualKeyChecker
__SUB_CLASS_THIS0(00506CD0, __thiscall, 42474,  CDualKeyChecker, void) {
__asm {

 Block0:
	add ecx,8
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<CDualKeyChecker::KeyMsg>::`vftable'
	jmp  ZList<CDualKeyChecker::KeyMsg>::RemoveAll
}
}
// CUserLocal::OnTutorMsg
_SUB_EXCEPTION_HANDLER(516F60)
__SUB_CLASS_THIS(00516F60, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_516F60
	mov eax,dword ptr fs:[0]
	push eax
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	cmp dword ptr [edi+0x4770],0
	je Block5

 Block1:
	mov esi,dword ptr [esp+0x20]
	mov ecx,esi
	call CInPacket::Decode1
	mov ecx,esi
	test al,al
	je Block3

 Block2:
	call CInPacket::Decode4
	mov ecx,esi
	mov ebx,eax
	call CInPacket::Decode4
	mov ecx,dword ptr [edi+0x4770]
	push eax
	push ebx
	call CTutor::OnMessage_1
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0xC
	ret 4

 Block3:
	lea eax,[esp+0x20]
	push eax
	call CInPacket::DecodeStr
	mov ecx,esi
	mov dword ptr [esp+0x18],0
	call CInPacket::Decode4
	mov ecx,esi
	mov ebx,eax
	call CInPacket::Decode4
	mov ecx,dword ptr [edi+0x4770]
	push eax
	push ebx
	lea edx,[esp+0x28]
	push edx
	call CTutor::OnMessage_0
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0xC
	ret 4
}
}
// CUserLocal::MoveToPortal
__SUB_CLASS_THIS(0012A1F0, __thiscall, 41415,  CUserLocal, void, const char*) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push 1
	push eax
	push 0
	push 0
	push 0
	call CUserLocal::TryRegisterTeleport
	ret 4
}
}
// CUserLocal::DrawKeyDownBar
_SUB_EXCEPTION_HANDLER(5153B0)
__SUB_CLASS_THIS0(005153B0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5153B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x138
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14C]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x68],ebx
	xor esi,esi
	cmp dword ptr [ebx+0x4698],esi
	sete al
	test al,al
	jne Block232

 Block1:
	mov dword ptr [esp+0x48],esi
	lea eax,[esp+0x4C]
	push 0x3D0
	push eax
	mov dword ptr [esp+0x15C],esi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push esi
	lea ecx,[esp+0x4C]
	push ecx
	push eax
	mov byte ptr [esp+0x160],1
	call PcCreate_IWzCanvas
	mov eax,dword ptr [esp+0x58]
	add esp,0xC
	mov byte ptr [esp+0x154],0
	cmp eax,esi
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block3:
	mov dword ptr [esp+0x50],esi
	mov dword ptr [esp+0x54],esi
	mov dword ptr [esp+0x4C],esi
	cmp dword ptr [ebx+0x3AE4],0x217E76B
	mov edi,dword ptr [ZImports::_VariantInit]
	mov byte ptr [esp+0x154],4
	mov ebp,8
	jne Block66

 Block4:
	lea edx,[esp+0x38]
	push edx
	call edi
	lea eax,[esp+0x38]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block6

 Block5:
	push eax
	call _com_issue_error

 Block6:
	lea ecx,[esp+0x24]
	push ecx
	mov byte ptr [esp+0x158],5
	call edi
	lea edx,[esp+0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block8

 Block7:
	push eax
	call _com_issue_error

 Block8:
	push esi
	push esi
	lea eax,[esp+0x40]
	push eax
	lea ecx,[esp+0x30]
	push ecx
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,6
	push offset _S_UIBASICIMGKEYDOW__8
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],7
	cmp dword ptr [_D_G_RM],esi
	jne Block10

 Block9:
	push 0x80004003
	call _com_issue_error

 Block10:
	lea edx,[esp+0x28]
	mov byte ptr [esp+0x168],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],8
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x54]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block13

 Block11:
	cmp eax,0x80004002
	je Block13

 Block12:
	push eax
	call _com_issue_error

 Block13:
	mov byte ptr [esp+0x154],bl
	cmp word ptr [esp+0x14],bp
	jne Block16

 Block14:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	cmp eax,esi
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block17:
	mov byte ptr [esp+0x154],5
	cmp word ptr [esp+0x24],bp
	jne Block20

 Block18:
	mov eax,dword ptr [esp+0x2C]
	xor edx,edx
	mov word ptr [esp+0x24],dx
	cmp eax,esi
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea eax,[esp+0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block21:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x38],bp
	jne Block24

 Block22:
	mov eax,dword ptr [esp+0x40]
	xor ecx,ecx
	mov word ptr [esp+0x38],cx
	cmp eax,esi
	je Block25

 Block23:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block25

 Block24:
	lea edx,[esp+0x38]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block25:
	lea eax,[esp+0x24]
	push eax
	call edi
	lea ecx,[esp+0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block27

 Block26:
	push eax
	call _com_issue_error

 Block27:
	lea edx,[esp+0x38]
	push edx
	mov byte ptr [esp+0x158],9
	call edi
	lea eax,[esp+0x38]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block29

 Block28:
	push eax
	call _com_issue_error

 Block29:
	push esi
	push esi
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x44]
	push edx
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0xA
	push offset _S_UIBASICIMGKEYDOW__7
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0xB
	cmp dword ptr [_D_G_RM],esi
	jne Block31

 Block30:
	push 0x80004003
	call _com_issue_error

 Block31:
	lea eax,[esp+0x28]
	mov byte ptr [esp+0x168],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0xC
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x58]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block34

 Block32:
	cmp eax,0x80004002
	je Block34

 Block33:
	push eax
	call _com_issue_error

 Block34:
	mov byte ptr [esp+0x154],bl
	cmp word ptr [esp+0x14],bp
	jne Block37

 Block35:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	cmp eax,esi
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block38

 Block37:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block38:
	mov byte ptr [esp+0x154],9
	cmp word ptr [esp+0x38],bp
	jne Block41

 Block39:
	xor eax,eax
	mov word ptr [esp+0x38],ax
	mov eax,dword ptr [esp+0x40]
	cmp eax,esi
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea ecx,[esp+0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block42:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x24],bp
	jne Block45

 Block43:
	mov eax,dword ptr [esp+0x2C]
	xor edx,edx
	mov word ptr [esp+0x24],dx
	cmp eax,esi
	je Block46

 Block44:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block46

 Block45:
	lea eax,[esp+0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block46:
	lea ecx,[esp+0x24]
	push ecx
	call edi
	lea edx,[esp+0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block48

 Block47:
	push eax
	call _com_issue_error

 Block48:
	lea eax,[esp+0x38]
	push eax
	mov byte ptr [esp+0x158],0xD
	call edi
	lea ecx,[esp+0x38]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block50

 Block49:
	push eax
	call _com_issue_error

 Block50:
	push esi
	push esi
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x44]
	push eax
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0xE
	push offset _S_UIBASICIMGKEYDOW__6
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0xF
	cmp dword ptr [_D_G_RM],esi
	jne Block52

 Block51:
	push 0x80004003
	call _com_issue_error

 Block52:
	lea ecx,[esp+0x28]
	push ecx
	mov byte ptr [esp+0x16C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0x10
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block55

 Block53:
	cmp eax,0x80004002
	je Block55

 Block54:
	push eax
	call _com_issue_error

 Block55:
	mov byte ptr [esp+0x154],bl
	cmp word ptr [esp+0x14],bp
	jne Block58

 Block56:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	cmp eax,esi
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block59:
	mov byte ptr [esp+0x154],0xD
	cmp word ptr [esp+0x38],bp
	jne Block62

 Block60:
	mov eax,dword ptr [esp+0x40]
	xor ecx,ecx
	mov word ptr [esp+0x38],cx
	cmp eax,esi
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea edx,[esp+0x38]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block63:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x24],bp
	jne Block65

 Block64:
	xor eax,eax
	mov word ptr [esp+0x24],ax
	mov eax,dword ptr [esp+0x2C]
	jmp Block137

 Block65:
	lea ecx,[esp+0x24]
	jmp Block140

 Block66:
	mov eax,dword ptr [ebx+0x3AD4]
	cmp eax,0x423D0A
	je Block76

 Block67:
	cmp eax,0x4DD5CC
	je Block76

 Block68:
	cmp eax,0xE66C4B
	je Block76

 Block69:
	push offset _D_VTMISSING
	lea ecx,[esp+0x100]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[esp+0x110]
	mov byte ptr [esp+0x158],0x1D
	call Ztl_variant_t::_ctor_1
	push esi
	push esi
	lea edx,[esp+0x104]
	push edx
	lea eax,[esp+0x118]
	push eax
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0x1E
	push offset _S_UIBASICIMGKEYDOW__5
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0x1F
	cmp dword ptr [_D_G_RM],esi
	jne Block71

 Block70:
	push 0x80004003
	call _com_issue_error

 Block71:
	lea ecx,[esp+0x130]
	push ecx
	mov byte ptr [esp+0x16C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0x20
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x54]
	call _x_com_ptr<IWzCanvas>::op_assign_unknown
	lea ecx,[esp+0x11C]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x10C]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0xFC]
	mov byte ptr [esp+0x154],4
	call Ztl_variant_t::~Ztl_variant_t
	push offset _D_VTMISSING
	lea ecx,[esp+0xC0]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[esp+0xF0]
	mov byte ptr [esp+0x158],0x21
	call Ztl_variant_t::_ctor_1
	push esi
	push esi
	lea edx,[esp+0xC4]
	push edx
	lea eax,[esp+0xF8]
	push eax
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0x22
	push offset _S_UIBASICIMGKEYDOW__4
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0x23
	cmp dword ptr [_D_G_RM],esi
	jne Block73

 Block72:
	push 0x80004003
	call _com_issue_error

 Block73:
	lea ecx,[esp+0x140]
	push ecx
	mov byte ptr [esp+0x16C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0x24
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x58]
	call _x_com_ptr<IWzCanvas>::op_assign_unknown
	lea ecx,[esp+0x12C]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0xEC]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0xBC]
	mov byte ptr [esp+0x154],4
	call Ztl_variant_t::~Ztl_variant_t
	push offset _D_VTMISSING
	lea ecx,[esp+0xE0]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[esp+0xD0]
	mov byte ptr [esp+0x158],0x25
	call Ztl_variant_t::_ctor_1
	push esi
	push esi
	lea edx,[esp+0xE4]
	push edx
	lea eax,[esp+0xD8]
	push eax
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0x26
	push offset _S_UIBASICIMGKEYDOW__3
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0x27
	cmp dword ptr [_D_G_RM],esi
	jne Block75

 Block74:
	push 0x80004003
	call _com_issue_error

 Block75:
	lea ecx,[esp+0x150]
	push ecx
	mov byte ptr [esp+0x16C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0x28
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	call _x_com_ptr<IWzCanvas>::op_assign_unknown
	lea ecx,[esp+0x13C]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0xCC]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0xDC]
	mov byte ptr [esp+0x154],4
	call Ztl_variant_t::~Ztl_variant_t
	jmp Block141

 Block76:
	lea edx,[esp+0x24]
	push edx
	call edi
	lea eax,[esp+0x24]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block78

 Block77:
	push eax
	call _com_issue_error

 Block78:
	lea ecx,[esp+0x38]
	push ecx
	mov byte ptr [esp+0x158],0x11
	call edi
	lea edx,[esp+0x38]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block80

 Block79:
	push eax
	call _com_issue_error

 Block80:
	push esi
	push esi
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x44]
	push ecx
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0x12
	push offset _S_UIBASICIMGKEYDOW__2
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0x13
	cmp dword ptr [_D_G_RM],esi
	jne Block82

 Block81:
	push 0x80004003
	call _com_issue_error

 Block82:
	lea edx,[esp+0xB0]
	mov byte ptr [esp+0x168],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0x14
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x54]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block85

 Block83:
	cmp eax,0x80004002
	je Block85

 Block84:
	push eax
	call _com_issue_error

 Block85:
	mov byte ptr [esp+0x154],bl
	cmp word ptr [esp+0x9C],bp
	jne Block88

 Block86:
	xor eax,eax
	mov word ptr [esp+0x9C],ax
	mov eax,dword ptr [esp+0xA4]
	cmp eax,esi
	je Block89

 Block87:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block89

 Block88:
	lea ecx,[esp+0x9C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block89:
	mov byte ptr [esp+0x154],0x11
	cmp word ptr [esp+0x38],bp
	jne Block92

 Block90:
	mov eax,dword ptr [esp+0x40]
	xor edx,edx
	mov word ptr [esp+0x38],dx
	cmp eax,esi
	je Block93

 Block91:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block93

 Block92:
	lea eax,[esp+0x38]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block93:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x24],bp
	jne Block96

 Block94:
	mov eax,dword ptr [esp+0x2C]
	xor ecx,ecx
	mov word ptr [esp+0x24],cx
	cmp eax,esi
	je Block97

 Block95:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block97

 Block96:
	lea edx,[esp+0x24]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block97:
	lea eax,[esp+0x7C]
	push eax
	call edi
	lea ecx,[esp+0x7C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block99

 Block98:
	push eax
	call _com_issue_error

 Block99:
	lea edx,[esp+0x6C]
	push edx
	mov byte ptr [esp+0x158],0x15
	call edi
	lea eax,[esp+0x6C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block101

 Block100:
	push eax
	call _com_issue_error

 Block101:
	push esi
	push esi
	lea ecx,[esp+0x84]
	push ecx
	lea edx,[esp+0x78]
	push edx
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0x16
	push offset _S_UIBASICIMGKEYDOW__1
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0x17
	cmp dword ptr [_D_G_RM],esi
	jne Block103

 Block102:
	push 0x80004003
	call _com_issue_error

 Block103:
	lea eax,[esp+0xC0]
	mov byte ptr [esp+0x168],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0x18
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x58]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block106

 Block104:
	cmp eax,0x80004002
	je Block106

 Block105:
	push eax
	call _com_issue_error

 Block106:
	mov byte ptr [esp+0x154],bl
	cmp word ptr [esp+0xAC],bp
	jne Block109

 Block107:
	mov eax,dword ptr [esp+0xB4]
	xor ecx,ecx
	mov word ptr [esp+0xAC],cx
	cmp eax,esi
	je Block110

 Block108:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block110

 Block109:
	lea edx,[esp+0xAC]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block110:
	mov byte ptr [esp+0x154],0x15
	cmp word ptr [esp+0x6C],bp
	jne Block113

 Block111:
	xor eax,eax
	mov word ptr [esp+0x6C],ax
	mov eax,dword ptr [esp+0x74]
	cmp eax,esi
	je Block114

 Block112:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block114

 Block113:
	lea ecx,[esp+0x6C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block114:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x7C],bp
	jne Block117

 Block115:
	mov eax,dword ptr [esp+0x84]
	xor edx,edx
	mov word ptr [esp+0x7C],dx
	cmp eax,esi
	je Block118

 Block116:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block118

 Block117:
	lea eax,[esp+0x7C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block118:
	lea ecx,[esp+0x14]
	push ecx
	call edi
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block120

 Block119:
	push eax
	call _com_issue_error

 Block120:
	lea eax,[esp+0x58]
	push eax
	mov byte ptr [esp+0x158],0x19
	call edi
	lea ecx,[esp+0x58]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block122

 Block121:
	push eax
	call _com_issue_error

 Block122:
	push esi
	push esi
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x64]
	push eax
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,0x1A
	push offset _S_UIBASICIMGKEYDOW
	mov byte ptr [esp+0x16C],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x168],0x1B
	cmp dword ptr [_D_G_RM],esi
	jne Block124

 Block123:
	push 0x80004003
	call _com_issue_error

 Block124:
	lea ecx,[esp+0xA0]
	push ecx
	mov byte ptr [esp+0x16C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x15C],0x1C
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block127

 Block125:
	cmp eax,0x80004002
	je Block127

 Block126:
	push eax
	call _com_issue_error

 Block127:
	mov byte ptr [esp+0x154],bl
	cmp word ptr [esp+0x8C],bp
	jne Block130

 Block128:
	mov eax,dword ptr [esp+0x94]
	xor edx,edx
	mov word ptr [esp+0x8C],dx
	cmp eax,esi
	je Block131

 Block129:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block131

 Block130:
	lea eax,[esp+0x8C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block131:
	mov byte ptr [esp+0x154],0x19
	cmp word ptr [esp+0x58],bp
	jne Block134

 Block132:
	mov eax,dword ptr [esp+0x60]
	xor ecx,ecx
	mov word ptr [esp+0x58],cx
	cmp eax,esi
	je Block135

 Block133:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block135

 Block134:
	lea edx,[esp+0x58]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block135:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x14],bp
	jne Block139

 Block136:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]

 Block137:
	cmp eax,esi
	je Block141

 Block138:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block141

 Block139:
	lea ecx,[esp+0x14]

 Block140:
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block141:
	lea edx,[esp+0x58]
	push edx
	call edi
	lea eax,[esp+0x58]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block143

 Block142:
	push eax
	call _com_issue_error

 Block143:
	lea ecx,[esp+0x14]
	mov bl,0x29
	push ecx
	mov byte ptr [esp+0x158],bl
	call edi
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block145

 Block144:
	push eax
	call _com_issue_error

 Block145:
	mov ecx,dword ptr [esp+0x48]
	mov byte ptr [esp+0x154],0x2A
	cmp ecx,esi
	jne Block147

 Block146:
	push 0x80004003
	call _com_issue_error

 Block147:
	lea eax,[esp+0x58]
	push eax
	lea edx,[esp+0x18]
	push edx
	push 0xC
	push 0x48
	call IWzCanvas::Create
	mov byte ptr [esp+0x154],bl
	cmp word ptr [esp+0x14],bp
	jne Block150

 Block148:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	cmp eax,esi
	je Block151

 Block149:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block151

 Block150:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block151:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x58],bp
	jne Block154

 Block152:
	mov eax,dword ptr [esp+0x60]
	xor edx,edx
	mov word ptr [esp+0x58],dx
	cmp eax,esi
	je Block155

 Block153:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block155

 Block154:
	lea eax,[esp+0x58]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block155:
	mov ecx,3
	mov word ptr [esp+0x14],cx
	mov dword ptr [esp+0x1C],0xFF
	mov ecx,dword ptr [esp+0x48]
	mov byte ptr [esp+0x154],0x2B
	cmp ecx,esi
	jne Block157

 Block156:
	push 0x80004003
	call _com_issue_error

 Block157:
	mov eax,dword ptr [esp+0x50]
	lea edx,[esp+0x14]
	push edx
	push eax
	push esi
	push esi
	call IWzCanvas::Copy
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x14],bp
	jne Block160

 Block158:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	cmp eax,esi
	je Block161

 Block159:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block161

 Block160:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block161:
	mov eax,dword ptr [esp+0x68]
	mov ebp,dword ptr [esp+0x54]
	mov edi,2
	cmp dword ptr [eax+0x469C],edi
	jl Block171

 Block162:
	mov ecx,3
	mov edx,0xFF
	mov word ptr [esp+0x24],cx
	mov dword ptr [esp+0x2C],edx
	mov ecx,dword ptr [esp+0x48]
	mov byte ptr [esp+0x154],0x2C
	test ecx,ecx
	je Block9

 Block163:
	mov ebp,dword ptr [esp+0x24]
	mov ebx,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x38]
	mov dword ptr [eax+4],ebp
	mov ebp,dword ptr [esp+0x64]
	push ebp
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x44]
	push 2
	push edi
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebx+0x80]
	push ecx
	mov esi,ecx
	call eax
	test eax,eax
	jge Block165

 Block164:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block165:
	cmp word ptr [esp+0x24],8
	mov byte ptr [esp+0x154],4
	jne Block168

 Block166:
	mov eax,dword ptr [esp+0x2C]
	xor ecx,ecx
	mov word ptr [esp+0x24],cx
	test eax,eax
	je Block169

 Block167:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block169

 Block168:
	lea edx,[esp+0x24]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block169:
	mov eax,dword ptr [esp+0x68]
	inc edi
	cmp edi,dword ptr [eax+0x469C]
	jle Block162

 Block170:
	xor esi,esi

 Block171:
	mov ecx,3
	mov edx,0xFF
	mov word ptr [esp+0x24],cx
	mov dword ptr [esp+0x2C],edx
	mov ecx,dword ptr [esp+0x48]
	mov byte ptr [esp+0x154],0x2D
	cmp ecx,esi
	jne Block173

 Block172:
	push 0x80004003
	call _com_issue_error

 Block173:
	mov edi,dword ptr [esp+0x24]
	mov ebx,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [esp+0x38]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [esp+0x5C]
	push edi
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x44]
	push 0
	push 0
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebx+0x80]
	push ecx
	mov esi,ecx
	call eax
	test eax,eax
	jge Block175

 Block174:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block175:
	mov esi,8
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x24],si
	jne Block178

 Block176:
	mov eax,dword ptr [esp+0x2C]
	xor ecx,ecx
	mov word ptr [esp+0x24],cx
	test eax,eax
	je Block179

 Block177:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block179

 Block178:
	lea edx,[esp+0x24]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block179:
	mov eax,3
	mov word ptr [esp+0x14],ax
	mov dword ptr [esp+0x1C],0xFFFFFFFE
	mov ecx,dword ptr [esp+0x68]
	mov ecx,dword ptr [ecx+0x4698]
	mov byte ptr [esp+0x154],0x2E
	test ecx,ecx
	jne Block181

 Block180:
	push 0x80004003
	call _com_issue_error

 Block181:
	lea edx,[esp+0x14]
	push edx
	lea eax,[esp+0x38]
	push eax
	call IWzGr2DLayer::RemoveCanvas
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block183

 Block182:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block183:
	mov byte ptr [esp+0x154],4
	cmp word ptr [esp+0x14],si
	jne Block186

 Block184:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block187

 Block185:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block187

 Block186:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block187:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x38]
	push edx
	call esi
	lea eax,[esp+0x38]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block189

 Block188:
	push eax
	call _com_issue_error

 Block189:
	lea ecx,[esp+0x6C]
	push ecx
	mov byte ptr [esp+0x158],0x2F
	call esi
	lea edx,[esp+0x6C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block191

 Block190:
	push eax
	call _com_issue_error

 Block191:
	lea eax,[esp+0x7C]
	push eax
	mov byte ptr [esp+0x158],0x30
	call esi
	lea ecx,[esp+0x7C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block193

 Block192:
	push eax
	call _com_issue_error

 Block193:
	lea edx,[esp+0x58]
	push edx
	mov byte ptr [esp+0x158],0x31
	call esi
	lea eax,[esp+0x58]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block195

 Block194:
	push eax
	call _com_issue_error

 Block195:
	lea ecx,[esp+0x14]
	mov bl,0x32
	push ecx
	mov byte ptr [esp+0x158],bl
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block197

 Block196:
	push eax
	call _com_issue_error

 Block197:
	mov eax,dword ptr [esp+0x68]
	mov ecx,dword ptr [eax+0x4698]
	mov byte ptr [esp+0x154],0x33
	test ecx,ecx
	jne Block199

 Block198:
	push 0x80004003
	call _com_issue_error

 Block199:
	lea edx,[esp+0x38]
	push edx
	lea eax,[esp+0x70]
	push eax
	lea edx,[esp+0x84]
	push edx
	lea eax,[esp+0x64]
	push eax
	mov eax,dword ptr [esp+0x58]
	lea edx,[esp+0x24]
	push edx
	push eax
	lea edx,[esp+0xA4]
	push edx
	call IWzGr2DLayer::InsertCanvas
	cmp word ptr [esp+0x8C],8
	jne Block206

 Block200:
	xor eax,eax
	mov word ptr [esp+0x8C],ax
	mov eax,dword ptr [esp+0x94]
	test eax,eax
	je Block202

 Block201:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block202:
	mov esi,dword ptr [ZImports::_VariantClear]

 Block203:
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0x154],bl
	jne Block207

 Block204:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block208

 Block205:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block208

 Block206:
	mov esi,dword ptr [ZImports::_VariantClear]
	lea ecx,[esp+0x8C]
	push ecx
	call esi
	jmp Block203

 Block207:
	lea eax,[esp+0x14]
	push eax
	call esi

 Block208:
	cmp word ptr [esp+0x58],8
	mov byte ptr [esp+0x154],0x31
	jne Block211

 Block209:
	mov eax,dword ptr [esp+0x60]
	xor ecx,ecx
	mov word ptr [esp+0x58],cx
	test eax,eax
	je Block212

 Block210:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block212

 Block211:
	lea edx,[esp+0x58]
	push edx
	call esi

 Block212:
	cmp word ptr [esp+0x7C],8
	mov byte ptr [esp+0x154],0x30
	jne Block215

 Block213:
	xor eax,eax
	mov word ptr [esp+0x7C],ax
	mov eax,dword ptr [esp+0x84]
	test eax,eax
	je Block216

 Block214:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block216

 Block215:
	lea ecx,[esp+0x7C]
	push ecx
	call esi

 Block216:
	cmp word ptr [esp+0x6C],8
	mov byte ptr [esp+0x154],0x2F
	jne Block219

 Block217:
	mov eax,dword ptr [esp+0x74]
	xor edx,edx
	mov word ptr [esp+0x6C],dx
	test eax,eax
	je Block220

 Block218:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block220

 Block219:
	lea eax,[esp+0x6C]
	push eax
	call esi

 Block220:
	cmp word ptr [esp+0x38],8
	mov byte ptr [esp+0x154],4
	jne Block223

 Block221:
	mov eax,dword ptr [esp+0x40]
	xor ecx,ecx
	mov word ptr [esp+0x38],cx
	test eax,eax
	je Block224

 Block222:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block224

 Block223:
	lea edx,[esp+0x38]
	push edx
	call esi

 Block224:
	mov byte ptr [esp+0x154],3
	test edi,edi
	je Block226

 Block225:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block226:
	mov byte ptr [esp+0x154],2
	test ebp,ebp
	je Block228

 Block227:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+8]
	push ebp
	call eax

 Block228:
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x154],0
	test eax,eax
	je Block230

 Block229:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block230:
	mov eax,dword ptr [esp+0x48]
	mov dword ptr [esp+0x154],0xFFFFFFFF
	test eax,eax
	je Block232

 Block231:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block232:
	mov ecx,dword ptr [esp+0x14C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x144
	ret
}
}
// CUserLocal::GetRTTI
__SUB_CLASS_THIS0(00507230, __thiscall, 41474,  CUserLocal, const CRTTI*) {
__asm {

 Block0:
	mov eax,offset CUserLocal::ms_RTTI_CUserLocal
	ret
}
}
// CUserLocal::GetAchillesReduce
__SUB_CLASS_THIS(00508C40, __thiscall, 41363,  CUserLocal, long, long) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	sub esp,0xC
	push ebx
	push esi
	push edi
	lea eax,[esp+0x10]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block5

 Block1:
	lea esi,[eax-0x10]
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov dword ptr [esp+0x14],0

 Block5:
	mov ecx,dword ptr [edi+0x3D]
	push ecx
	lea edx,[edi+0x39]
	push edx
	xor ebx,ebx
	xor esi,esi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	cmp eax,0x84
	jg Block12

 Block6:
	je Block11

 Block7:
	cmp eax,0x70
	je Block10

 Block8:
	cmp eax,0x7A
	jne Block14

 Block9:
	mov esi,0x129DA5
	jmp Block14

 Block10:
	mov esi,0x111704
	jmp Block14

 Block11:
	mov esi,0x142445
	jmp Block14

 Block12:
	cmp eax,0x840
	jne Block14

 Block13:
	mov esi,0x1424404

 Block14:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	push esi
	push edi
	mov dword ptr [esp+0x18],0
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	je Block16

 Block15:
	mov ecx,dword ptr [esp+0xC]
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [eax+0x168]
	push ecx
	add eax,0x160
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,0x3E8
	sub ecx,eax
	imul ecx,dword ptr [esp+0x24]
	mov eax,0x10624DD3
	imul ecx
	add esp,8
	sar edx,6
	pop edi
	mov eax,edx
	shr eax,0x1F
	pop esi
	add eax,edx
	pop ebx
	add esp,0xC
	ret 4

 Block16:
	pop edi
	pop esi
	mov eax,ebx
	pop ebx
	add esp,0xC
	ret 4
}
}
// CUserLocal::DoActiveSkill_WeaponBooster
_SUB_EXCEPTION_HANDLER(53F960)
__SUB_CLASS_THIS(0053F960, __thiscall, 41431,  CUserLocal, int32_t, const SKILLENTRY*, long, long, long, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_53F960
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	call CUserLocal::IsWeaponDisabled
	test eax,eax
	jne Block10

 Block1:
	mov eax,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	mov ebp,dword ptr [esp+0x30]
	add esp,4
	cmp dword ptr [ebp],0x41A0CA
	mov ebx,eax
	jne Block12

 Block2:
	mov eax,dword ptr [esi+0x590]
	push eax
	call get_weapon_type
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [esp+0x30],eax
	add esp,4
	lea eax,[esp+0x14]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x14]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,edi
	call CharacterData::IsEquipedDualDagger
	test eax,eax
	je Block5

 Block3:
	cmp ebx,dword ptr [esp+0x34]
	jne Block5

 Block4:
	mov ecx,dword ptr [esp+0x2C]
	cmp ecx,dword ptr [esp+0x38]
	je Block18

 Block5:
	lea edx,[esp+0x34]
	push 0x1127
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	xor esi,esi
	mov dword ptr [esp+0x24],esi
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],esi
	je Block7

 Block6:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x40],esp
	push esi
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],esi
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block7:
	mov eax,dword ptr [esp+0x34]
	cmp eax,esi

 Block8:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	xor eax,eax

 Block11:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 0x18

 Block12:
	test ebx,ebx
	je Block17

 Block13:
	cmp ebx,dword ptr [esp+0x34]
	je Block18

 Block14:
	cmp ebx,dword ptr [esp+0x38]
	je Block18

 Block15:
	cmp ebx,dword ptr [esp+0x3C]
	je Block18

 Block16:
	cmp ebx,dword ptr [esp+0x40]
	je Block18

 Block17:
	lea eax,[esp+0x38]
	push 0x1127
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x2C],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x40]
	add esp,8
	test eax,eax
	jmp Block8

 Block18:
	mov edi,dword ptr [esp+0x30]
	push 0
	push 0
	push 0
	push 0xFFFFFFFF
	push 0
	push edi
	push ebp
	mov ecx,esi
	call CUserLocal::SendSkillUseRequest
	test eax,eax
	je Block10

 Block19:
	push 0
	push 0x7FFFFFFF
	push 0
	push 6
	push edi
	push ebp
	mov ecx,esi
	call CUser::ShowSkillEffect
	mov eax,1
	jmp Block11
}
}
// CUserLocal::BeRushValid
__SUB_CLASS_THIS0(00505D00, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	lea ecx,[esi+0x3B4C]
	mov dword ptr [esi+0x3B48],1
	call ZList<CUserLocal::RUSH::RUSHELEM>::RemoveAll
	lea ecx,[esi+0x3B64]
	pop esi
	jmp  ZArray<tagPOINT>::RemoveAll
}
}
// CUserLocal::TryDoingWings
__SUB_CLASS_THIS(0050D3E0, __thiscall, 41401,  CUserLocal, int32_t, const SKILLENTRY*, long) {
__asm {

 Block0:
	push ebx
	push ebp
	mov ebp,dword ptr [esp+0xC]
	push esi
	mov esi,ecx
	test ebp,ebp
	je Block18

 Block1:
	mov ebx,dword ptr [esp+0x14]
	test ebx,ebx
	jle Block18

 Block2:
	push edi
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[edi+0x2038]
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block5

 Block3:
	cmp dword ptr [edi+0x209C],0
	jne Block5

 Block4:
	call get_field
	test byte ptr [eax+0x178],2
	jne Block17

 Block5:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block17

 Block6:
	mov ecx,esi
	call CUserLocal::IsAttract
	test eax,eax
	jne Block17

 Block7:
	cmp dword ptr [esi+0x3AD4],eax
	jne Block17

 Block8:
	mov ecx,esi
	call CUserLocal::IsWeakened
	test eax,eax
	jne Block17

 Block9:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block17

 Block10:
	push ebx
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_tTime
	mov edi,eax
	imul edi,0x3E8
	call get_update_time
	add eax,edi
	mov edi,dword ptr [esi+0x19E4]
	mov dword ptr [esi+0x468C],eax
	test edi,edi
	je Block12

 Block11:
	add edi,0xFFFFFFF4
	jmp Block13

 Block12:
	xor edi,edi

 Block13:
	cmp dword ptr [edi+0x1A0],0
	jne Block15

 Block14:
	mov ecx,edi
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	je Block17

 Block15:
	push 0
	push 0
	push 0
	push 0xFFFFFFFF
	push 0
	push ebx
	push ebp
	mov ecx,esi
	call CUserLocal::SendSkillUseRequest
	test eax,eax
	je Block17

 Block16:
	push 0
	push 0x7FFFFFFF
	push 0
	push 6
	push ebx
	push ebp
	mov ecx,esi
	call CUser::ShowSkillEffect
	push ebx
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	mov dword ptr [edi+0x21C],eax
	mov eax,1
	mov dword ptr [edi+0x210],eax
	pop edi
	pop esi
	pop ebp
	pop ebx
	ret 8

 Block17:
	pop edi
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	ret 8

 Block18:
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	ret 8
}
}
// CUserLocal::SetDamaged
_SUB_EXCEPTION_HANDLER(5343C0)
__SUB_CLASS_THIS(005343C0, __thiscall, 41334,  CUserLocal, void, long, long, long, unsigned long, CMob*, long, long, long, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5343C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xB0
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC4]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebp,ebp
	mov dword ptr [esp+0x4C],ebp
	call get_update_time
	mov ebx,dword ptr [esp+0xE4]
	mov edi,eax
	cmp ebx,ebp
	je Block2

 Block1:
	mov eax,dword ptr [ebx+0x174]
	mov ecx,dword ptr [eax+0x2BC]
	push ecx
	add eax,0x2B4
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	jne Block6

 Block2:
	cmp dword ptr [esp+0xF4],ebp
	je Block5

 Block3:
	lea ecx,[esi+0x2E20]
	call TSecType<long>::GetData
	test eax,eax
	jne Block374

 Block4:
	mov eax,dword ptr [esi+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	je Block374

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xED0]
	push ecx
	add eax,0xEC8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block374

 Block6:
	mov eax,dword ptr [esi+0x2ED4]
	cmp eax,ebp
	je Block8

 Block7:
	mov edx,edi
	sub edx,eax
	js Block374

 Block8:
	mov ecx,edi
	sub ecx,eax
	cmp ecx,0xC8
	jle Block10

 Block9:
	mov dword ptr [esi+0x2ED4],ebp

 Block10:
	mov eax,dword ptr [esi+0x2ED8]
	cmp eax,ebp
	je Block12

 Block11:
	sub edi,eax
	js Block374

 Block12:
	mov dword ptr [esi+0x2ED8],ebp
	cmp dword ptr [esi+0x3B48],ebp
	je Block14

 Block13:
	cmp dword ptr [esi+0x3B54],ebp
	jne Block374

 Block14:
	cmp ebx,ebp
	je Block23

 Block15:
	mov ecx,ebx
	call CMob::IsMobOurTeam
	test eax,eax
	jne Block374

 Block16:
	mov ecx,ebx
	call CMob::IsSamePhaseWithMe
	test eax,eax
	je Block374

 Block17:
	cmp dword ptr [ebx+0x310],ebp
	jne Block374

 Block18:
	mov ecx,dword ptr [ebx+0x174]
	cmp ecx,ebp
	je Block23

 Block19:
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	cmp eax,0x8F71AF
	jne Block21

 Block20:
	mov ecx,esi
	call CUserLocal::IsGL5thEventCakeTeam
	test eax,eax
	jne Block374

 Block21:
	mov ecx,dword ptr [ebx+0x174]
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	cmp eax,0x8F71B0
	jne Block23

 Block22:
	mov ecx,esi
	call CUserLocal::IsGL5thEventPieTeam
	test eax,eax
	jne Block374

 Block23:
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x70],ebp
	lea edx,[esp+0x70]
	push edx
	mov ecx,ebx
	mov dword ptr [esp+0xD0],ebp
	call CWvsContext::GetOnlinePartyMemberID
	mov ecx,dword ptr [TSingleton<CAffectedAreaPool>::ms_pInstance]
	mov eax,dword ptr [esi+0x19E8]
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	mov edi,dword ptr [esi+0x2E18]
	mov dword ptr [esp+0x6C],ecx
	lea ecx,[esi+4]
	mov dword ptr [esp+0x88],eax
	lea eax,[esp+0x78]
	push eax
	call edx
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push edi
	push ecx
	mov ecx,dword ptr [esp+0x90]
	push edx
	lea eax,[esp+0x7C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x80]
	call CAffectedAreaPool::IsSmokeAreaByPoint
	test eax,eax
	jne Block373

 Block24:
	lea edx,[esp+0x78]
	push edx
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	lea ecx,[esp+0x78]
	mov dword ptr [esp+0x24],eax
	call ZRef<CharacterData>::~ZRef<CharacterData>
	xor edi,edi

 Block25:
	lea ecx,[ebx+0x3C98]
	call CRand32::Random
	mov dword ptr [esp+edi*4+0xAC],eax
	inc edi
	cmp edi,6
	jl Block25

 Block26:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	mov dword ptr [esp+0x28],ebp
	mov dword ptr [esp+0x64],ebp
	mov dword ptr [esp+0x68],ebp
	mov dword ptr [esp+0x60],ebp
	call eax
	push eax
	call get_stance_skill_id
	mov ecx,dword ptr [esp+0xE8]
	add esp,4
	mov dword ptr [esp+0x8C],eax
	mov dword ptr [esp+0x54],ebp
	mov dword ptr [esp+0x90],ebp
	mov dword ptr [esp+0x98],ebp
	mov dword ptr [esp+0x9C],ebp
	mov dword ptr [esp+0x94],ebp
	mov dword ptr [esp+0x88],ebp
	mov dword ptr [esp+0x74],ebp
	mov dword ptr [esp+0x6C],ebp
	mov dword ptr [esp+0xA4],ebp
	cmp ecx,ebp
	je Block265

 Block27:
	mov edx,dword ptr [ecx+4]
	mov edx,dword ptr [edx+0x10]
	add ecx,4
	lea eax,[esp+0x34]
	push eax
	mov dword ptr [esp+0x40],ecx
	call edx
	mov edi,dword ptr [eax]
	mov eax,dword ptr [esi+4]
	mov eax,dword ptr [eax+0x10]
	lea ecx,[esi+4]
	lea edx,[esp+0x34]
	push edx
	call eax
	cmp edi,dword ptr [eax]
	jle Block29

 Block28:
	mov dword ptr [esp+0x74],1

 Block29:
	mov ecx,dword ptr [esp+0xE4]
	mov ebp,dword ptr [ecx+0x174]
	mov edx,dword ptr [esp+0xE8]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x20],ebp
	call CMobTemplate::GetAttackInfo
	mov edi,eax
	mov dword ptr [esp+0x2C],edi
	test edi,edi
	je Block41

 Block30:
	cmp dword ptr [edi+0x1C],0
	je Block41

 Block31:
	mov eax,dword ptr [edi+0x24]
	mov dword ptr [esp+0xA4],eax
	mov eax,dword ptr [esi+0x594]
	xor ecx,ecx
	xor ebp,ebp
	test eax,eax
	setne cl
	lea edx,[esp+0x64]
	push ecx
	push edx
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push eax
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	lea ecx,[esp+0x44]
	push ecx
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [esp+0xBC]
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [esp+0xF4]
	push edi
	lea ecx,[ebx+0x3C78]
	lea edi,[ebx+0x2148]
	push edi
	add ebx,0x20D0
	push ebx
	add edx,0x188
	push eax
	push edx
	mov byte ptr [esp+0xF0],1
	mov dword ptr [esp+0x80],edx
	mov dword ptr [esp+0x7C],ecx
	mov dword ptr [esp+0xC4],ebx
	call CalcDamage::MDamage_3
	lea ecx,[esp+0x34]
	mov edi,eax
	mov byte ptr [esp+0xCC],0
	call ZRef<CharacterData>::~ZRef<CharacterData>
	test edi,edi
	jne Block33

 Block32:
	lea ebp,[edi+1]

 Block33:
	lea edx,[esp+0x80]
	push edx
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	cmp dword ptr [eax+4],0
	mov byte ptr [esp+0xCC],2
	je Block35

 Block34:
	lea eax,[esp+0x34]
	push eax
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	mov eax,dword ptr [eax+4]
	mov ebx,dword ptr [eax+0x50]
	mov ecx,1
	jmp Block36

 Block35:
	mov cl,byte ptr [esp+0x4C]
	xor ebx,ebx

 Block36:
	test cl,1
	je Block38

 Block37:
	lea ecx,[esp+0x34]
	call ZRef<PassiveSkillData>::~ZRef<PassiveSkillData>

 Block38:
	lea ecx,[esp+0x80]
	mov byte ptr [esp+0xCC],0
	call ZRef<PassiveSkillData>::~ZRef<PassiveSkillData>
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CWvsContext::GetCharacterData
	mov edx,dword ptr [esp+0x2C]
	mov ecx,dword ptr [edx+0x24]
	mov eax,dword ptr [eax+4]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	add ecx,0x2148
	push ecx
	push eax
	mov byte ptr [esp+0xD8],3
	call get_resistance
	mov ecx,0x64
	sub ecx,ebx
	sub ecx,eax
	imul ecx,edi
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add esp,0xC
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0xD4],eax
	mov byte ptr [esp+0xCC],0
	call ZRef<CharacterData>::~ZRef<CharacterData>
	test ebp,ebp
	jne Block42

 Block39:
	cmp dword ptr [esp+0xD4],1
	jg Block42

 Block40:
	mov dword ptr [esp+0xD4],1
	jmp Block42

 Block41:
	mov eax,dword ptr [ebx+0x3FD0]
	push eax
	mov eax,dword ptr [esi+0x594]
	xor edx,edx
	test eax,eax
	setne dl
	mov ecx,ebp
	push edx
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	lea eax,[esp+0x70]
	push eax
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x64],esp
	push ecx
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	lea edx,[esp+0x4C]
	push edx
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [esp+0xC4]
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [esp+0xFC]
	push ebp
	push edi
	lea ecx,[ebx+0x3C78]
	lea edi,[ebx+0x2148]
	push edi
	add ebx,0x20D0
	push ebx
	add edx,0x188
	push eax
	push edx
	mov byte ptr [esp+0xFC],4
	mov dword ptr [esp+0x8C],edx
	mov dword ptr [esp+0x88],ecx
	mov dword ptr [esp+0xD0],ebx
	call CalcDamage::PDamage_2
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0xD4],eax
	mov byte ptr [esp+0xCC],0
	call ZRef<CharacterData>::~ZRef<CharacterData>

 Block42:
	mov ebx,dword ptr [esp+0x2C]
	xor eax,eax
	cmp dword ptr [esp+0xD4],eax
	setle al
	mov ebp,eax
	mov dword ptr [esp+0x30],ebp
	test ebx,ebx
	je Block52

 Block43:
	cmp dword ptr [ebx+0x70],0
	je Block48

 Block44:
	test ebp,ebp
	jne Block48

 Block45:
	mov edi,dword ptr [esp+0x24]
	mov ecx,edi
	call GW_CharacterStat::_ZtlSecureGet_nHP
	dec eax
	cmp eax,1
	jle Block47

 Block46:
	mov dword ptr [esp+0xD4],eax
	jmp Block49

 Block47:
	mov dword ptr [esp+0xD4],1
	jmp Block49

 Block48:
	mov edi,dword ptr [esp+0x24]

 Block49:
	cmp dword ptr [ebx+0x98],0
	je Block53

 Block50:
	test ebp,ebp
	jne Block53

 Block51:
	mov dword ptr [esp+0xD4],1
	jmp Block53

 Block52:
	mov edi,dword ptr [esp+0x24]

 Block53:
	mov ecx,dword ptr [esp+0xE4]
	mov ecx,dword ptr [ecx+0x174]
	call CMobTemplate::_ZtlSecureGet_bCannotEvade
	test eax,eax
	jne Block89

 Block54:
	mov ecx,edi
	call GW_CharacterStat::_ZtlSecureGet_nJob
	mov ebx,dword ptr [esp+0xB0]
	mov edx,0x19C
	cmp ax,dx
	je Block56

 Block55:
	mov ecx,edi
	call GW_CharacterStat::_ZtlSecureGet_nJob
	mov ecx,0x1A6
	cmp ax,cx
	jne Block60

 Block56:
	mov ecx,edi
	call GW_CharacterStat::_ZtlSecureGet_nJob
	mov ecx,dword ptr [esp+0x18]
	mov edx,0x19C
	sub ax,dx
	movsx edi,ax
	neg edi
	sbb edi,edi
	lea eax,[esp+0x34]
	and edi,0x186A0
	push eax
	add edi,0x3EDDC2
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	lea ecx,[esp+0x9C]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edi
	push eax
	mov byte ptr [esp+0xD8],5
	call CSkillInfo::GetSkillLevel_0
	lea ecx,[esp+0x34]
	mov edi,eax
	mov byte ptr [esp+0xCC],0
	call ZRef<CharacterData>::~ZRef<CharacterData>
	test edi,edi
	je Block60

 Block57:
	mov ecx,dword ptr [esp+0x9C]
	push edi
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	mov ecx,eax
	mov eax,0x51EB851F
	mul ebx
	shr edx,5
	imul edx,0x64
	sub ebx,edx
	cmp ebx,ecx
	jae Block60

 Block58:
	call get_field
	test byte ptr [eax+0x178],2
	jne Block60

 Block59:
	mov dword ptr [esp+0xD4],0xFFFFFFFF
	mov dword ptr [esp+0x30],1

 Block60:
	mov ebx,dword ptr [esp+0x18]
	add ebx,0x2148
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_nYellowAura_
	test eax,eax
	jle Block70

 Block61:
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_rYellowAura_
	cmp eax,0x1EA1CC1
	jne Block70

 Block62:
	mov ebp,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov ecx,ebx
	xor edi,edi
	call SecondaryStat::_ZtlSecureGet_rYellowAura_
	push eax
	mov ecx,ebp
	call CSkillInfo::GetSkill
	mov ebp,eax
	test ebp,ebp
	je Block64

 Block63:
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_nYellowAura_
	push eax
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nZ
	mov edi,eax

 Block64:
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_nSuperBody_
	test eax,eax
	jle Block67

 Block65:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x1E9F5B8
	call CSkillInfo::GetSkill
	mov ebp,eax
	test ebp,ebp
	je Block67

 Block66:
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_nSuperBody_
	push eax
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nZ
	mov edi,eax

 Block67:
	mov ecx,dword ptr [esp+0xB0]
	mov eax,0x51EB851F
	mul ecx
	shr edx,5
	imul edx,0x64
	sub ecx,edx
	cmp ecx,edi
	jae Block70

 Block68:
	call get_field
	test byte ptr [eax+0x178],2
	jne Block70

 Block69:
	mov dword ptr [esp+0xD4],0xFFFFFFFF
	mov dword ptr [esp+0x30],1

 Block70:
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_nBlueAura_
	test eax,eax
	jle Block73

 Block71:
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_nSuperBody_
	test eax,eax
	jle Block73

 Block72:
	mov ebp,1
	mov dword ptr [esp+0xD4],0xFFFFFFFF
	mov dword ptr [esp+0x30],ebp
	jmp Block74

 Block73:
	mov ebp,1

 Block74:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block80

 Block75:
	mov ecx,ebx
	call SecondaryStat::IsMechanicVehicle
	test eax,eax
	je Block80

 Block76:
	mov edx,dword ptr [esp+0x24]
	lea ecx,[esp+0x80]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x217994F
	xor edi,edi
	push edx
	mov dword ptr [esp+0x8C],edi
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0x80]
	cmp ecx,edi
	je Block81

 Block77:
	cmp eax,edi
	je Block81

 Block78:
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	mov ecx,dword ptr [esp+0xBC]
	mov ebp,eax
	mov eax,0x51EB851F
	mul ecx
	shr edx,5
	imul edx,0x64
	sub ecx,edx
	cmp ecx,ebp
	lea ebp,[edi+1]
	jae Block81

 Block79:
	mov dword ptr [esp+0xD4],edi
	mov dword ptr [esp+0x98],ebp
	mov dword ptr [esp+0x30],ebp
	jmp Block81

 Block80:
	xor edi,edi

 Block81:
	mov ecx,dword ptr [esp+0xB4]
	mov eax,0x51EB851F
	mul ecx
	mov eax,dword ptr [esp+0xE4]
	shr edx,5
	imul edx,0x64
	sub ecx,edx
	cmp ecx,dword ptr [eax+0x2F8]
	jae Block83

 Block82:
	mov dword ptr [esp+0xD4],edi
	mov dword ptr [esp+0x30],ebp

 Block83:
	mov ecx,ebx
	call SecondaryStat::_ZtlSecureGet_nSwallowEvasion_
	mov ecx,dword ptr [esp+0xC0]
	mov ebx,eax
	mov eax,0x51EB851F
	mul ecx
	shr edx,5
	imul edx,0x64
	sub ecx,edx
	cmp ecx,ebx
	jae Block85

 Block84:
	mov dword ptr [esp+0xD4],edi
	mov dword ptr [esp+0x30],ebp

 Block85:
	mov ecx,esi
	call CUser::IsDojangInvincible
	test eax,eax
	jne Block88

 Block86:
	mov ecx,esi
	call CUser::IsCyclone
	test eax,eax
	je Block89

 Block87:
	xor edi,edi
	mov ebp,1

 Block88:
	mov dword ptr [esp+0xD4],edi
	mov dword ptr [esp+0x30],ebp

 Block89:
	call get_field
	test eax,eax
	je Block98

 Block90:
	call get_field
	mov edx,dword ptr [eax]
	mov ecx,eax
	mov eax,dword ptr [edx+0x1C]
	call eax
	cmp eax,0x13
	jne Block98

 Block91:
	mov eax,dword ptr [esi+0x3A80]
	test eax,eax
	jne Block94

 Block92:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nDojangShield_
	test eax,eax
	jne Block97

 Block93:
	mov ecx,dword ptr [esp+0x1C]
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	cmp eax,0x8DE96A
	jmp Block96

 Block94:
	cmp eax,1
	jne Block98

 Block95:
	mov ecx,dword ptr [esp+0x1C]
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	cmp eax,0x8DE969

 Block96:
	jne Block98

 Block97:
	mov dword ptr [esp+0x30],1
	mov dword ptr [esp+0xD4],0

 Block98:
	xor ebx,ebx
	cmp dword ptr [esp+0xD4],ebx
	mov dword ptr [esp+0xDC],ebx
	mov dword ptr [esp+0xD8],ebx
	jle Block239

 Block99:
	mov edi,dword ptr [esp+0x24]
	mov ecx,dword ptr [edi+0x3D]
	push ecx
	lea edx,[edi+0x39]
	push edx
	mov dword ptr [esp+0x28],0x10E
	call _ZtlSecureFuseHelper<short>::call
	add esp,8
	cmp ax,0x7A
	jne Block105

 Block100:
	push 0xFFFFFFF6
	push 1
	lea eax,[esp+0x3C]
	push eax
	mov ecx,edi
	call CharacterData::GetItem
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x34]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp edi,ebx
	je Block105

 Block101:
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x94]
	push edx
	push 0x129DA6
	push eax
	mov byte ptr [esp+0xD8],6
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x88],edi
	mov byte ptr [esp+0xCC],bl
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp edi,ebx
	je Block105

 Block102:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x64
	div ecx
	mov ecx,dword ptr [esp+0x94]
	push edi
	mov ebp,edx
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	cmp ebp,eax
	jae Block105

 Block103:
	call get_field
	test byte ptr [eax+0x178],2
	jne Block105

 Block104:
	mov edx,dword ptr [esi+0x5F8]
	push edx
	call is_vehicle
	mov edi,eax
	add esp,4
	neg edi
	sbb edi,edi
	xor eax,eax
	inc edi
	cmp dword ptr [esp+0x2C],eax
	mov dword ptr [esp+0x54],edi
	sete al
	mov dword ptr [esp+0x90],eax
	jmp Block106

 Block105:
	mov edi,dword ptr [esp+0x54]

 Block106:
	mov ebx,dword ptr [esp+0xF0]
	test ebx,ebx
	jle Block121

 Block107:
	mov ecx,dword ptr [esp+0xE4]
	mov eax,dword ptr [ecx+0x174]
	mov edx,dword ptr [eax+0x84]
	push edx
	add eax,0x7C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	cdq
	sub eax,edx
	mov edx,dword ptr [esp+0xDC]
	imul edx,ebx
	mov ecx,eax
	mov eax,0x51EB851F
	imul edx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	sar ecx,1
	add eax,edx
	add esp,8
	cmp eax,ecx
	jge Block109

 Block108:
	mov ebp,eax
	mov dword ptr [esp+0x28],ebp
	jmp Block110

 Block109:
	mov ebp,ecx
	mov dword ptr [esp+0x28],ecx

 Block110:
	mov ebx,dword ptr [esp+0xE4]
	mov eax,dword ptr [ebx+0x174]
	mov ecx,dword ptr [eax+0x6C]
	push ecx
	add eax,0x64
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	je Block112

 Block111:
	mov eax,ebp
	cdq
	sub eax,edx
	sar eax,1
	mov ebp,eax
	mov dword ptr [esp+0x28],ebp

 Block112:
	test ebp,ebp
	jle Block118

 Block113:
	mov eax,dword ptr [ebx+0x174]
	mov edx,dword ptr [eax+0x1B8]
	push edx
	add eax,0x1B0
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block115

 Block114:
	mov ecx,dword ptr [ebx+0x174]
	call CMobTemplate::_ZtlSecureGet_nFixedDamage
	mov ebp,eax
	mov dword ptr [esp+0x28],ebp

 Block115:
	mov ebx,dword ptr [esp+0x18]
	test ebx,ebx
	je Block117

 Block116:
	mov ecx,dword ptr [esp+0x1C]
	push 0
	call CMobTemplate::_ZtlSecureGet_bInvincible
	push eax
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x5C],esp
	push eax
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	mov ecx,dword ptr [esp+0xB0]
	mov edx,dword ptr [esp+0x34]
	lea eax,[ebx+0x2148]
	push eax
	mov eax,dword ptr [esp+0x70]
	push ecx
	mov ecx,dword ptr [esp+0x70]
	push edx
	push eax
	call CalcDamage::IsCounterAttackHit
	test eax,eax
	jne Block118

 Block117:
	xor ebp,ebp
	mov dword ptr [esp+0x28],ebp

 Block118:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x284]
	push ecx
	add eax,0x27C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block120

 Block119:
	mov dword ptr [esp+0x20],0xC8

 Block120:
	mov edx,dword ptr [esp+0xF0]
	mov dword ptr [esp+0x68],edx
	jmp Block122

 Block121:
	mov ebp,dword ptr [esp+0x28]

 Block122:
	cmp dword ptr [esp+0x90],0
	jne Block124

 Block123:
	cmp dword ptr [esp+0x68],0
	jle Block133

 Block124:
	push 1
	lea eax,[esp+0xB0]
	push eax
	lea ecx,[esi+0x88]
	call CAvatar::GetBodyRect
	mov ecx,dword ptr [esp+0xAC]
	mov edx,dword ptr [esp+0xB0]
	mov edi,dword ptr [esp+0xE4]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [esp+0xC4]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0xC8]
	mov dword ptr [eax+8],ecx
	mov dword ptr [eax+0xC],edx
	lea eax,[esp+0x5C]
	push eax
	mov ecx,edi
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax]
	mov ebx,dword ptr [eax+4]
	mov dword ptr [esp+0x34],ecx
	mov ecx,edi
	mov dword ptr [esp+0x38],ebx
	call CMob::GetRandomHitAction
	mov ecx,dword ptr [edi+0x174]
	push 0x10CCCF
	mov dword ptr [esp+0x84],eax
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block128

 Block125:
	mov ecx,dword ptr [edi+0x174]
	push 0x12536F
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block128

 Block126:
	mov ecx,dword ptr [edi+0x174]
	push 0x217994F
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block128

 Block127:
	xor ebp,ebp
	mov dword ptr [esp+0x28],ebp

 Block128:
	mov eax,dword ptr [edi+0x174]
	mov dword ptr [esp+0x14],ebp
	mov edx,dword ptr [eax+0x14]
	push edx
	add eax,0xC
	push eax
	call _ZtlSecureFuseHelper<unsigned long>::call
	mov edx,dword ptr [esp+0x2C]
	push 0
	lea ecx,[esp+0x20]
	push ecx
	push 1
	push eax
	push edx
	call CItemInfo::CheckDamageModifiedByEquipUpgrade
	add esp,0x1C
	test eax,eax
	je Block130

 Block129:
	mov ebp,dword ptr [esp+0x14]
	mov dword ptr [esp+0x28],ebp

 Block130:
	test ebp,ebp
	jne Block132

 Block131:
	or ebp,0xFFFFFFFF

 Block132:
	mov eax,dword ptr [esp+0x54]
	push 0
	push 0
	push 0
	neg eax
	push 0
	sbb eax,eax
	and eax,2
	push eax
	push 1
	push ecx
	mov dword ptr [esp+0x68],esp
	mov ecx,esp
	push offset _S_
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x50]
	mov eax,dword ptr [esi+0x640]
	mov edx,dword ptr [esp+0x9C]
	mov edi,dword ptr [esi+0x19E8]
	push ebx
	push ecx
	push 0
	push 0
	push ebp
	and eax,1
	push eax
	push edx
	mov byte ptr [esp+0x104],7
	call get_update_time
	mov ecx,dword ptr [esp+0x11C]
	add eax,0x64
	push eax
	push 0
	push edi
	mov byte ptr [esp+0x110],0
	call CMob::AddDamageInfo
	mov edi,dword ptr [esp+0x54]

 Block133:
	mov eax,dword ptr [esp+0xE4]
	mov eax,dword ptr [eax+0x174]
	mov ecx,dword ptr [eax+0x2BC]
	push ecx
	add eax,0x2B4
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	jne Block136

 Block134:
	test edi,edi
	je Block136

 Block135:
	mov dword ptr [esp+0xD4],0xFFFFFFFF
	mov dword ptr [esp+0x30],1
	jmp Block242

 Block136:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x64
	div ecx
	mov edi,dword ptr [_D_G_PSTAGE+4]
	mov dword ptr [esp+0x4C],edx
	test edi,edi
	je Block138

 Block137:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block139

 Block138:
	xor edi,edi

 Block139:
	test byte ptr [edi+0x178],2
	je Block146

 Block140:
	mov ebp,dword ptr [esp+0x24]
	mov dword ptr [esp+0x60],0

 Block141:
	mov ebx,dword ptr [esp+0x2C]
	test ebx,ebx
	je Block200

 Block142:
	cmp dword ptr [ebx+0x9C],0
	jne Block144

 Block143:
	cmp dword ptr [ebx+0xA8],0
	je Block200

 Block144:
	call get_update_time
	mov ecx,dword ptr [esi+0x19E4]
	xor edi,edi
	mov edx,1
	mov dword ptr [esi+0x46B8],eax
	mov dword ptr [esi+0x46BC],edx
	cmp ecx,edi
	je Block184

 Block145:
	lea eax,[ecx-0xC]
	jmp Block185

 Block146:
	mov edi,dword ptr [esp+0x18]
	mov ecx,dword ptr [edi+0x2780]
	add edi,0x2148
	push ecx
	lea edx,[edi+0x630]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp eax,0x64
	jl Block148

 Block147:
	mov eax,0x64
	jmp Block150

 Block148:
	test eax,eax
	jg Block150

 Block149:
	xor eax,eax

 Block150:
	xor ebx,ebx
	cmp dword ptr [esp+0x4C],eax
	setl bl
	mov dword ptr [esp+0x60],ebx
	test ebx,ebx
	jne Block158

 Block151:
	mov ecx,dword ptr [edi+0x13BC]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+4]
	call edx
	test al,al
	je Block158

 Block152:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x40]
	mov ecx,esi
	call edx
	push eax
	call is_cygnus_job
	mov ebp,dword ptr [esp+0x28]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	add esp,4
	mov edi,eax
	neg edi
	sbb edi,edi
	lea eax,[esp+0x14]
	and edi,0x986F73
	push eax
	add edi,0x4DF8F1
	push edi
	push ebp
	mov dword ptr [esp+0x98],edi
	mov dword ptr [esp+0x20],ebx
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	je Block159

 Block153:
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	cmp eax,0x64
	jge Block157

 Block154:
	mov ecx,eax
	test eax,eax
	jg Block156

 Block155:
	xor ecx,ecx

 Block156:
	xor eax,eax
	cmp dword ptr [esp+0x4C],ecx
	setl al
	mov dword ptr [esp+0x60],eax
	mov ebx,eax
	jmp Block159

 Block157:
	xor eax,eax
	mov ecx,0x64
	cmp dword ptr [esp+0x4C],ecx
	setl al
	mov dword ptr [esp+0x60],eax
	mov ebx,eax
	jmp Block159

 Block158:
	mov edi,dword ptr [esp+0x8C]
	mov ebp,dword ptr [esp+0x24]

 Block159:
	lea ecx,[esi+0x88]
	call CAvatar::IsRidingWildHunterJaguar
	test eax,eax
	je Block166

 Block160:
	test ebx,ebx
	jne Block167

 Block161:
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x1F937F0
	push ebp
	mov dword ptr [esp+0x58],ebx
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	je Block141

 Block162:
	mov ecx,dword ptr [esp+0x4C]
	mov edi,dword ptr [ecx]
	push eax
	mov dword ptr [esp+0x90],edi
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nY
	mov ecx,offset _D_G_RAND
	mov ebp,eax
	call CRand32::Random
	xor edx,edx
	mov ecx,0x64
	div ecx
	cmp ebp,ecx
	jge Block165

 Block163:
	mov ecx,ebp
	test ebp,ebp
	jg Block165

 Block164:
	xor ecx,ecx

 Block165:
	mov ebp,dword ptr [esp+0x24]
	xor eax,eax
	cmp edx,ecx
	setl al
	mov dword ptr [esp+0x60],eax
	mov ebx,eax

 Block166:
	test ebx,ebx
	je Block141

 Block167:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push 0
	push 0
	push 0
	push 0x3E8
	push edi
	call CSkillInfo::GetSkill
	push eax
	mov ecx,esi
	call CUser::ShowSkillSpecialEffect
	cmp edi,0x4DF8F1
	je Block169

 Block168:
	cmp edi,0xE66864
	jne Block170

 Block169:
	push edi
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2B
	push edi
	call play_skill_sound
	add esp,0xC

 Block170:
	mov ebx,dword ptr [esp+0x2C]

 Block171:
	cmp dword ptr [esi+0x3AD4],0x404139
	jne Block176

 Block172:
	mov ecx,dword ptr [esp+0x18]
	lea edx,[esp+0x4C]
	push edx
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push offset _D_S_PCHAKRA
	push 0x404139
	push eax
	mov byte ptr [esp+0xD8],8
	call CSkillInfo::GetSkillLevel_0
	lea ecx,[esp+0x4C]
	mov edi,eax
	mov byte ptr [esp+0xCC],0
	call ZRef<CharacterData>::~ZRef<CharacterData>
	test edi,edi
	je Block176

 Block173:
	mov ecx,dword ptr [_D_S_PCHAKRA]
	test ecx,ecx
	je Block176

 Block174:
	push edi
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	mov ecx,eax
	imul ecx,dword ptr [esp+0xD4]
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,1
	mov dword ptr [esp+0xD4],eax
	jg Block176

 Block175:
	mov dword ptr [esp+0xD4],1

 Block176:
	test ebx,ebx
	je Block239

 Block177:
	mov eax,dword ptr [esp+0x2C]
	cmp dword ptr [eax+0x1C],0
	je Block239

 Block178:
	mov ebp,dword ptr [esp+0x18]
	mov ecx,dword ptr [ebp+0x27D4]
	add ebp,0x2148
	push ecx
	lea edx,[ebp+0x684]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block239

 Block179:
	test byte ptr [_D__S6],1
	jne Block181

 Block180:
	or dword ptr [_D__S6],1
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x205D2A
	mov byte ptr [esp+0xD0],9
	call CSkillInfo::GetSkill
	mov dword ptr [_D_S_PMANAREFLECTIO],eax
	mov byte ptr [esp+0xCC],0

 Block181:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nManaReflection_
	mov ecx,dword ptr [_D_S_PMANAREFLECTIO]
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	mov ecx,offset _D_G_RAND
	mov edi,eax
	call CRand32::Random
	xor edx,edx
	mov ecx,0x64
	div ecx
	cmp edx,edi
	jae Block239

 Block182:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nManaReflection_
	mov ecx,dword ptr [_D_S_PMANAREFLECTIO]
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	mov ebx,dword ptr [esp+0xE4]
	mov ecx,dword ptr [ebx+0x174]
	mov edi,eax
	mov dword ptr [esp+0x68],edi
	call CMobTemplate::_ZtlSecureGet_nMaxHP
	mov ecx,eax
	mov eax,0x66666667
	imul ecx
	sar edx,3
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	mov edx,edi
	imul edx,dword ptr [esp+0xD4]
	mov eax,0x51EB851F
	imul edx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,ecx
	jge Block225

 Block183:
	mov edi,eax
	mov dword ptr [esp+0x14],edi
	jmp Block226

 Block184:
	xor eax,eax

 Block185:
	cmp dword ptr [eax+0x1A0],edi
	jne Block187

 Block186:
	mov eax,0x384
	jmp Block191

 Block187:
	cmp dword ptr [ebx+0x9C],edi
	je Block189

 Block188:
	mov eax,0x76C
	jmp Block191

 Block189:
	mov eax,0x578
	cmp dword ptr [ebx+0xA8],edi
	jne Block191

 Block190:
	mov eax,dword ptr [esp+0x20]

 Block191:
	cmp dword ptr [esp+0xEC],0x7FFFFFFF
	jne Block193

 Block192:
	mov dword ptr [esp+0xD8],edi
	jmp Block196

 Block193:
	cmp dword ptr [esp+0x74],edx
	jne Block195

 Block194:
	neg eax

 Block195:
	mov dword ptr [esp+0xD8],eax

 Block196:
	cmp ecx,edi
	je Block198

 Block197:
	add ecx,0xFFFFFFF4
	jmp Block199

 Block198:
	xor ecx,ecx

 Block199:
	fldz
	sub esp,0x10
	fstp qword ptr [esp+8]
	fild dword ptr [esp+0xE8]
	fstp qword ptr [esp]
	push 0x17
	call CVecCtrl::SetImpactNext_1
	mov dword ptr [esp+0xDC],edi
	mov dword ptr [esp+0xD8],edi
	jmp Block171

 Block200:
	push 0xA2
	mov ecx,esi
	call CUser::IsAbleToHitByUser
	test eax,eax
	jne Block171

 Block201:
	mov eax,dword ptr [esi+0x5E8]
	xor edi,edi
	mov dword ptr [esp+0x14],edi
	cmp eax,0x217E76D
	jne Block203

 Block202:
	lea edx,[esp+0x14]
	push edx
	push eax
	jmp Block205

 Block203:
	cmp eax,0x217C05C
	jne Block206

 Block204:
	lea eax,[esp+0x14]
	push eax
	push 0x217C05C

 Block205:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebp
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	jne Block207

 Block206:
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x21612AA
	push ebp
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	je Block209

 Block207:
	test eax,eax
	je Block209

 Block208:
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	mov edi,eax

 Block209:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block213

 Block210:
	cmp dword ptr [esi+0x5F8],0x1D7AF0
	jne Block213

 Block211:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x65
	div ecx
	cmp edx,edi
	ja Block213

 Block212:
	lea edi,[ecx-0x64]
	jmp Block214

 Block213:
	xor edi,edi

 Block214:
	cmp dword ptr [esi+0x5EC],0
	jne Block217

 Block215:
	cmp dword ptr [esi+0x5F0],0
	jne Block217

 Block216:
	cmp dword ptr [esi+0x3B84],0
	je Block218

 Block217:
	mov edi,1

 Block218:
	mov ecx,esi
	call CUser::IsOnLadderOrRope
	test eax,eax
	jne Block171

 Block219:
	test edi,edi
	jne Block171

 Block220:
	mov eax,dword ptr [esp+0xEC]
	cmp eax,0x7FFFFFFF
	jne Block222

 Block221:
	mov dword ptr [esp+0xD8],edi
	mov dword ptr [esp+0xDC],edi
	jmp Block171

 Block222:
	test eax,eax
	mov eax,dword ptr [esp+0x20]
	jge Block224

 Block223:
	mov ecx,eax
	neg ecx
	neg eax
	mov dword ptr [esp+0xD8],ecx
	mov dword ptr [esp+0xDC],eax
	jmp Block171

 Block224:
	mov dword ptr [esp+0xD8],eax
	neg eax
	mov dword ptr [esp+0xDC],eax
	jmp Block171

 Block225:
	mov edi,ecx
	mov dword ptr [esp+0x14],ecx

 Block226:
	mov ecx,dword ptr [ebx+0x174]
	push 0x205D2A
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block230

 Block227:
	mov ecx,dword ptr [ebx+0x174]
	push 0x21E3CA
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block230

 Block228:
	mov ecx,dword ptr [ebx+0x174]
	push 0x236A6A
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block230

 Block229:
	xor edi,edi
	mov dword ptr [esp+0x14],edi

 Block230:
	mov ecx,dword ptr [ebx+0x174]
	push 0
	lea edx,[esp+0x50]
	push edx
	push 1
	mov dword ptr [esp+0x58],edi
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	mov eax,dword ptr [esp+0x34]
	push eax
	call CItemInfo::CheckDamageModifiedByEquipUpgrade
	add esp,0x14
	test eax,eax
	je Block232

 Block231:
	mov edi,dword ptr [esp+0x4C]
	mov dword ptr [esp+0x14],edi

 Block232:
	test edi,edi
	jle Block238

 Block233:
	mov ecx,dword ptr [ebx+0x174]
	call CMobTemplate::_ZtlSecureGet_nFixedDamage
	test eax,eax
	jle Block235

 Block234:
	mov ecx,dword ptr [ebx+0x174]
	call CMobTemplate::_ZtlSecureGet_nFixedDamage
	mov dword ptr [esp+0x28],eax

 Block235:
	xor edi,edi
	cmp dword ptr [esp+0x18],edi
	je Block237

 Block236:
	mov ecx,dword ptr [esp+0x1C]
	push 1
	call CMobTemplate::_ZtlSecureGet_bInvincible
	push eax
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push ecx
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	mov edx,dword ptr [esp+0xB0]
	mov eax,dword ptr [esp+0x34]
	mov ecx,dword ptr [esp+0x6C]
	push ebp
	push edx
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x78]
	call CalcDamage::IsCounterAttackHit
	cmp eax,edi
	jne Block238

 Block237:
	mov dword ptr [esp+0x14],edi

 Block238:
	mov ecx,dword ptr [esp+0x3C]
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x3C]
	push eax
	call edx
	mov ebx,dword ptr [eax]
	mov ebp,dword ptr [eax+4]
	push 0
	push 0
	push 0
	push 0
	push 0
	push 1
	push ecx
	mov dword ptr [esp+0x58],esp
	mov ecx,esp
	push offset _S_
	mov dword ptr [esp+0x54],ebx
	mov dword ptr [esp+0x58],ebp
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esi+0x640]
	mov ecx,dword ptr [esp+0x30]
	mov edx,dword ptr [esp+0x9C]
	mov edi,dword ptr [esi+0x19E8]
	push ebp
	push ebx
	push 0
	push 0
	push ecx
	and eax,1
	push eax
	push edx
	mov byte ptr [esp+0x104],0xA
	call get_update_time
	mov ecx,dword ptr [esp+0x11C]
	add eax,0x64
	push eax
	push 0
	push edi
	mov byte ptr [esp+0x110],0
	call CMob::AddDamageInfo
	mov eax,dword ptr [esp+0x68]
	mov dword ptr [esp+0x68],eax

 Block239:
	cmp dword ptr [esp+0x30],0
	jne Block242

 Block240:
	mov eax,1
	cmp dword ptr [esp+0xD4],eax
	jg Block242

 Block241:
	mov dword ptr [esp+0xD4],eax

 Block242:
	cmp dword ptr [esp+0x64],0
	je Block244

 Block243:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push 0
	push 0
	push 0
	push 0x3E8
	push 0x40413D
	call CSkillInfo::GetSkill
	push eax
	mov ecx,esi
	call CUser::ShowSkillSpecialEffect

 Block244:
	mov ebx,dword ptr [esp+0x2C]
	test ebx,ebx
	je Block261

 Block245:
	push 1
	lea ecx,[esp+0xB0]
	push ecx
	lea ecx,[esi+0x88]
	call CAvatar::GetBodyRect
	mov eax,dword ptr [esp+0xAC]
	mov edx,dword ptr [esp+0xB4]
	push eax
	sub edx,eax
	push edx
	call get_rand_0
	mov ecx,dword ptr [esp+0xC0]
	mov ebp,eax
	mov eax,dword ptr [esp+0xB8]
	push eax
	sub ecx,eax
	push ecx
	call get_rand_0
	lea edi,[ebx+0x7C]
	add esp,0x10
	mov ecx,edi
	mov dword ptr [esp+0x4C],eax
	call _xbstr_t::length
	test eax,eax
	je Block260

 Block246:
	cmp dword ptr [ebx+0x88],0
	push 0xC00614A4
	push ecx
	mov dword ptr [esp+0x44],esp
	mov eax,esp
	je Block250

 Block247:
	mov dword ptr [eax],0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x6C],esp
	push edx
	mov ecx,esi
	mov byte ptr [esp+0xE4],0xB
	call CUser::GetVecCtrl_0
	mov edi,dword ptr [edi]
	mov eax,dword ptr [esi+0x640]
	test edi,edi
	je Block249

 Block248:
	mov edi,dword ptr [edi]
	not eax
	and eax,1
	jmp Block259

 Block249:
	not eax
	xor edi,edi
	and eax,1
	jmp Block259

 Block250:
	cmp dword ptr [ebx+0xA0],0
	mov dword ptr [eax],0
	je Block255

 Block251:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x80],esp
	push eax
	mov ecx,esi
	mov byte ptr [esp+0xE4],0xC
	call CUser::GetVecCtrl_0
	mov edi,dword ptr [edi]
	test edi,edi
	je Block253

 Block252:
	mov edi,dword ptr [edi]
	jmp Block254

 Block253:
	xor edi,edi

 Block254:
	mov ecx,dword ptr [esp+0x88]
	push ecx
	mov byte ptr [esp+0xE4],0
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push edi
	call CAnimationDisplayer::Effect_General
	mov dword ptr [esp+0x6C],1
	jmp Block260

 Block255:
	mov edx,dword ptr [esp+0x54]
	push edx
	push ebp
	push ecx
	mov eax,esp
	mov dword ptr [eax],0
	mov edi,dword ptr [edi]
	mov byte ptr [esp+0xE0],0xD
	mov dword ptr [esp+0x50],esp
	test edi,edi
	je Block257

 Block256:
	mov edi,dword ptr [edi]
	jmp Block258

 Block257:
	xor edi,edi

 Block258:
	xor eax,eax
	cmp dword ptr [esp+0x100],eax
	setg al

 Block259:
	push eax
	mov byte ptr [esp+0xE4],0
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push edi
	call CAnimationDisplayer::Effect_General

 Block260:
	mov ecx,dword ptr [esp+0x4C]
	push ecx
	push ebp
	call get_sound_volume_by_pos
	mov edx,dword ptr [esp+0xF0]
	mov ecx,dword ptr [esp+0x24]
	add esp,8
	push eax
	add edx,0xB
	push edx
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	call play_mob_sound
	add esp,0xC

 Block261:
	cmp dword ptr [esp+0x30],0
	je Block265

 Block262:
	push 0x2F7477
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	test eax,eax
	jg Block264

 Block263:
	push 0x30FB17
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	test eax,eax
	jle Block265

 Block264:
	mov dword ptr [esi+0x4848],1

 Block265:
	cmp dword ptr [esp+0xD8],0
	jne Block267

 Block266:
	cmp dword ptr [esp+0xDC],0
	je Block271

 Block267:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block269

 Block268:
	add eax,0xFFFFFFF4
	jmp Block270

 Block269:
	xor eax,eax

 Block270:
	fild dword ptr [esp+0xDC]
	sub esp,0x10
	mov ecx,eax
	fstp qword ptr [esp+8]
	fild dword ptr [esp+0xE8]
	fstp qword ptr [esp]
	push 0x1B
	call CVecCtrl::SetImpactNext_1

 Block271:
	mov ebx,dword ptr [esp+0xD4]
	test ebx,ebx
	jg Block273

 Block272:
	lea ecx,[esi+0x2E20]
	push 0xFFFFFA24
	call TSecType<long>::SetData
	jmp Block292

 Block273:
	mov ecx,dword ptr [esp+0x18]
	push 5
	lea eax,[esp+0x40]
	push eax
	mov edi,0x5DC
	call CWvsContext::GetRealEquipSlot
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x3C]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	test ebp,ebp
	je Block279

 Block274:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x78]
	mov ecx,ebp
	call eax
	test eax,eax
	je Block279

 Block275:
	lea ecx,[ebp+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block279

 Block276:
	xor ecx,ecx
	mov dword ptr [esp+0x20],ecx
	mov dword ptr [esp+0x1C],ecx
	mov dword ptr [esp+0x14],ecx
	mov ecx,eax
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	lea ecx,[esp+0x14]
	push ecx
	lea edx,[esp+0x20]
	push edx
	lea eax,[esp+0x28]
	push eax
	add ebp,0x105
	push edi
	mov ecx,ebp
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx ecx,ax
	push ecx
	mov ecx,esi
	call CUserLocal::ApplyInvicibleOption
	lea edx,[esp+0x14]
	push edx
	lea eax,[esp+0x20]
	push eax
	lea ecx,[esp+0x28]
	push ecx
	push edi
	mov ecx,ebp
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	movsx edx,ax
	push edx
	mov ecx,esi
	call CUserLocal::ApplyInvicibleOption
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0x28]
	push edx
	push edi
	mov ecx,ebp
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	cwde
	push eax
	mov ecx,esi
	call CUserLocal::ApplyInvicibleOption
	mov edi,dword ptr [esp+0x20]
	mov ebp,dword ptr [esp+0x1C]
	add edi,0x5DC
	test ebp,ebp
	jle Block279

 Block277:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x65
	div ecx
	cmp edx,ebp
	ja Block279

 Block278:
	mov edi,dword ptr [esp+0x14]

 Block279:
	lea ecx,[esi+0x2E20]
	push edi
	call TSecType<long>::SetData
	xor ebp,ebp
	cmp dword ptr [esi+0x2EA0],ebp
	jne Block281

 Block280:
	push edi
	push 1
	lea ecx,[esi+0x88]
	call CAvatar::SetEmotion

 Block281:
	mov edi,dword ptr [esi+0x3AD4]
	mov dword ptr [esi+0x63C],0x1388
	cmp edi,0x404139
	je Block285

 Block282:
	push edi
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block292

 Block283:
	cmp edi,0x21612A9
	je Block292

 Block284:
	cmp edi,0x2179951
	je Block292

 Block285:
	push edi
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block292

 Block286:
	push edi
	call is_ignore_mob_during_gauge_skill
	add esp,4
	test eax,eax
	jne Block292

 Block287:
	lea edi,[esi+0x88]
	mov ecx,edi
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jle Block289

 Block288:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x44]
	mov ecx,esi
	call eax
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x14]
	push ebp
	push 0x64
	push 6
	mov ecx,edi
	call eax

 Block289:
	mov dword ptr [esi+0x4690],ebp
	mov eax,dword ptr [esi+0x4698]
	cmp eax,ebp
	je Block291

 Block290:
	mov dword ptr [esi+0x4698],ebp
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block291:
	mov ecx,esi
	call CUserLocal::OnKeyDownSkillEnd

 Block292:
	push ebx
	mov ecx,esi
	call CUserLocal::GetAchillesReduce
	mov ebp,dword ptr [esp+0x18]
	mov edi,eax
	mov eax,dword ptr [ebp+0x2D9C]
	add ebp,0x2148
	push eax
	lea ecx,[ebp+0xC4C]
	push ecx
	mov dword ptr [esp+0x64],edi
	mov dword ptr [esp+0x34],0
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block294

 Block293:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nComboBarrier_
	mov ecx,0x3E8
	sub ecx,eax
	mov edx,ebx
	sub edx,edi
	imul ecx,edx
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [esp+0x2C],eax

 Block294:
	mov eax,dword ptr [ebp+0x200]
	push eax
	lea ecx,[ebp+0x1F8]
	push ecx
	mov dword ptr [esp+0x24],0
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block299

 Block295:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nInfinity_
	mov ecx,ebp
	test eax,eax
	je Block297

 Block296:
	call SecondaryStat::_ZtlSecureGet_nMagicGuard_
	mov ecx,eax
	imul ecx,ebx
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [esp+0x1C],eax
	jmp Block299

 Block297:
	call SecondaryStat::_ZtlSecureGet_nMagicGuard_
	mov ecx,eax
	imul ecx,ebx
	mov eax,0x51EB851F
	imul ecx
	mov ecx,dword ptr [esp+0x24]
	sar edx,5
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	call GW_CharacterStat::_ZtlSecureGet_nMP
	cmp eax,edi
	mov dword ptr [esp+0x1C],eax
	jl Block299

 Block298:
	mov dword ptr [esp+0x1C],edi

 Block299:
	mov edx,dword ptr [ebp+0xD98]
	push edx
	lea eax,[ebp+0xD90]
	xor edi,edi
	push eax
	mov dword ptr [esp+0x60],edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block301

 Block300:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nMagicShield_
	mov ecx,eax
	imul ecx,ebx
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [esp+0x58],eax

 Block301:
	mov ecx,dword ptr [ebp+0x89C]
	push ecx
	lea edx,[ebp+0x894]
	push edx
	mov dword ptr [esp+0x28],edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block304

 Block302:
	mov edi,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_rBlueAura_
	push eax
	mov ecx,edi
	call CSkillInfo::GetSkill
	mov edi,eax
	test edi,edi
	je Block304

 Block303:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nBlueAura_
	push eax
	mov ecx,edi
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	mov ecx,eax
	imul ecx,ebx
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [esp+0x20],eax

 Block304:
	mov eax,dword ptr [esp+0xD4]
	mov ecx,dword ptr [esp+0xA4]
	push eax
	push ecx
	mov ecx,esi
	call CUserLocal::CalcBuffDefenseAttr
	cmp dword ptr [esp+0xE4],0
	mov ebx,eax
	mov dword ptr [esp+0xD4],ebx
	mov dword ptr [esp+0xA8],ebx
	je Block307

 Block305:
	mov ebp,dword ptr [esp+0x24]
	mov edx,dword ptr [ebp+0x75]
	push edx
	lea eax,[ebp+0x6D]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0xEC]
	mov edi,eax
	mov eax,dword ptr [ecx+0x174]
	mov edx,dword ptr [eax+0x14]
	push edx
	add eax,0xC
	push eax
	call _ZtlSecureFuseHelper<unsigned long>::call
	push edi
	lea ecx,[esp+0xBC]
	push ecx
	push 0
	push eax
	push ebp
	call CItemInfo::CheckDamageModifiedByEquipUpgrade
	add esp,0x24
	test eax,eax
	je Block307

 Block306:
	mov ebx,dword ptr [esp+0xA8]
	mov dword ptr [esp+0xD4],ebx

 Block307:
	cmp dword ptr [esp+0x98],0
	je Block309

 Block308:
	mov edx,dword ptr [esp+0x20]
	sub edx,ebx
	add edx,dword ptr [esp+0x2C]
	push 1
	add edx,dword ptr [esp+0x60]
	mov ecx,esi
	add edx,dword ptr [esp+0x68]
	add edx,dword ptr [esp+0x2C]
	push edx
	call CUser::MakeIncDecHPEffect
	jmp Block340

 Block309:
	test ebx,ebx
	jl Block335

 Block310:
	call get_field
	mov edx,dword ptr [eax]
	mov ecx,eax
	mov eax,dword ptr [edx+0x1C]
	call eax
	cmp eax,0x13
	je Block335

 Block311:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block319

 Block312:
	mov edi,dword ptr [esp+0x18]
	add edi,0x2148
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_nSafetyDamage_
	test eax,eax
	jle Block319

 Block313:
	mov ecx,dword ptr [esp+0x18]
	add ecx,0x20D0
	call BasicStat::_ZtlSecureGet_nMHP
	mov ecx,edi
	mov ebp,eax
	call SecondaryStat::_ZtlSecureGet_nSafetyDamage_
	imul ebp,eax
	mov eax,0x51EB851F
	imul ebp
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ebx,ecx
	jle Block319

 Block314:
	push 0x217C059
	lea edx,[esp+0x40]
	push edx
	mov ecx,esi
	call CUser::GetSummoned
	cmp dword ptr [esp+0x40],0
	mov byte ptr [esp+0xCC],0xE
	jne Block317

 Block315:
	push 0x217C061
	lea eax,[esp+0x7C]
	push eax
	mov ecx,esi
	call CUser::GetSummoned
	push eax
	lea ecx,[esp+0x40]
	mov byte ptr [esp+0xD0],0xF
	call ZRef<CSummoned>::op_assign_copy
	lea ecx,[esp+0x78]
	mov byte ptr [esp+0xCC],0xE
	call ZRef<CSummoned>::~ZRef<CSummoned>
	cmp dword ptr [esp+0x40],0
	jne Block317

 Block316:
	push 0x217C062
	lea ecx,[esp+0x7C]
	push ecx
	mov ecx,esi
	call CUser::GetSummoned
	push eax
	lea ecx,[esp+0x40]
	mov byte ptr [esp+0xD0],0x10
	call ZRef<CSummoned>::op_assign_copy
	lea ecx,[esp+0x78]
	mov byte ptr [esp+0xCC],0xE
	call ZRef<CSummoned>::~ZRef<CSummoned>
	cmp dword ptr [esp+0x40],0
	je Block318

 Block317:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_nSafetyAbsorb_
	mov ecx,eax
	imul ecx,ebx
	mov eax,0xAE147AE1
	imul ecx
	mov ecx,dword ptr [esp+0x40]
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add ebx,eax
	mov dword ptr [esp+0xD4],ebx
	call CSummoned::SendRemove

 Block318:
	lea ecx,[esp+0x3C]
	mov byte ptr [esp+0xCC],0
	call ZRef<CSummoned>::~ZRef<CSummoned>

 Block319:
	test ebx,ebx
	jle Block328

 Block320:
	lea ecx,[esp+0xD4]
	push ecx
	mov ecx,esi
	call CUserLocal::ApplyDefenseOption
	mov eax,dword ptr [esi+0x4844]
	test eax,eax
	je Block327

 Block321:
	cmp dword ptr [eax+0x60],0
	jle Block327

 Block322:
	mov eax,dword ptr [eax+0x60]
	cmp eax,0x64
	jle Block324

 Block323:
	mov eax,0x64

 Block324:
	imul eax,ebx
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov ecx,eax
	mov eax,dword ptr [esp+0xD4]
	sub eax,ecx
	cmp eax,1
	jge Block326

 Block325:
	mov ebx,1
	jmp Block328

 Block326:
	mov ebx,eax
	jmp Block328

 Block327:
	mov ebx,dword ptr [esp+0xD4]

 Block328:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nPowerGuard_
	test eax,eax
	jg Block331

 Block329:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nGuard_
	test eax,eax
	jle Block331

 Block330:
	mov dword ptr [esp+0x28],0

 Block331:
	mov ecx,dword ptr [esp+0x20]
	sub ecx,ebx
	add ecx,dword ptr [esp+0x2C]
	push 0
	add ecx,dword ptr [esp+0x60]
	add ecx,dword ptr [esp+0x68]
	add ecx,dword ptr [esp+0x2C]
	push ecx
	mov ecx,esi
	call CUser::MakeIncDecHPEffect
	mov ecx,dword ptr [esp+0x18]
	push 1
	lea edx,[esp+0x7C]
	push edx
	call CWvsContext::GetRealEquipSlot
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x78]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	test ebp,ebp
	je Block340

 Block332:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x78]
	mov ecx,ebp
	call edx
	test eax,eax
	je Block340

 Block333:
	lea ecx,[ebp+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block340

 Block334:
	mov ecx,eax
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	add ebp,0x105
	push edi
	mov ecx,ebp
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	cwde
	push eax
	mov ecx,esi
	call CUserLocal::ApplyEmotionOption
	push edi
	mov ecx,ebp
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	movsx ecx,ax
	push ecx
	mov ecx,esi
	call CUserLocal::ApplyEmotionOption
	push edi
	mov ecx,ebp
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx edx,ax
	push edx
	mov ecx,esi
	call CUserLocal::ApplyEmotionOption
	jmp Block340

 Block335:
	cmp ebx,0xFFFFFFFF
	jne Block340

 Block336:
	mov edi,dword ptr [esp+0x54]
	mov eax,dword ptr [esp+0x94]
	test edi,edi
	jne Block338

 Block337:
	mov eax,dword ptr [esp+0x9C]

 Block338:
	push 0
	push 0
	push 0
	push 0
	push 0x3E8
	push eax
	mov ecx,esi
	call CUser::ShowSkillSpecialEffect
	test edi,edi
	jne Block340

 Block339:
	push 0x5DC
	push 2
	lea ecx,[esi+0x88]
	call CAvatar::SetEmotion

 Block340:
	cmp dword ptr [esp+0xF8],0
	je Block357

 Block341:
	push 0x34
	lea ecx,[esp+0x40]
	call COutPacket::_ctor_1
	mov byte ptr [esp+0xCC],0x11
	call get_update_time
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode4
	mov edi,dword ptr [esp+0xE4]
	test edi,edi
	jne Block343

 Block342:
	cmp dword ptr [esp+0xF4],edi
	sete al
	add al,0xFD
	movzx ecx,al
	push ecx
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	push edi
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	push ebx
	lea ecx,[esp+0x40]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0xE0]
	push edx
	lea ecx,[esp+0x40]
	call COutPacket::Encode2
	push edi
	jmp Block356

 Block343:
	mov eax,dword ptr [esp+0xE8]
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	mov ecx,dword ptr [esp+0xA4]
	push ecx
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	push ebx
	lea ecx,[esp+0x40]
	call COutPacket::Encode4
	mov ecx,dword ptr [edi+0x174]
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode4
	mov ecx,edi
	call CMob::GetMobID
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode4
	cmp dword ptr [esp+0x6C],0
	je Block345

 Block344:
	mov eax,dword ptr [esp+0x74]
	jmp Block346

 Block345:
	xor eax,eax
	cmp dword ptr [esp+0xEC],eax
	setl al

 Block346:
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	mov edi,dword ptr [esp+0x68]
	push edi
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	mov edx,dword ptr [esp+0x98]
	push edx
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	xor eax,eax
	cmp dword ptr [esp+0x54],eax
	je Block348

 Block347:
	cmp dword ptr [esp+0x90],eax
	setne al
	inc eax

 Block348:
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	cmp dword ptr [esp+0x90],0
	jne Block351

 Block349:
	test edi,edi
	je Block355

 Block350:
	xor eax,eax
	cmp dword ptr [esp+0xF0],eax
	setne al
	jmp Block354

 Block351:
	test edi,edi
	je Block353

 Block352:
	xor eax,eax
	cmp dword ptr [esp+0xF0],eax
	setne al
	jmp Block354

 Block353:
	xor eax,eax

 Block354:
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	mov ecx,dword ptr [esp+0xE4]
	call CMob::GetMobID
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode4
	mov eax,dword ptr [esp+0x80]
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	mov ecx,dword ptr [esp+0x34]
	push ecx
	lea ecx,[esp+0x40]
	call COutPacket::Encode2
	mov edx,dword ptr [esp+0x38]
	push edx
	lea ecx,[esp+0x40]
	call COutPacket::Encode2
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x10]
	lea edi,[esi+4]
	lea ecx,[esp+0x78]
	push ecx
	mov ecx,edi
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode2
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x34]
	push eax
	mov ecx,edi
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[esp+0x40]
	call COutPacket::Encode2

 Block355:
	xor eax,eax
	cmp dword ptr [esp+0x8C],0x1F914CE
	sete al
	neg eax
	sbb al,al
	and al,2
	or al,byte ptr [esp+0x60]
	movzx ecx,al
	push ecx

 Block356:
	lea ecx,[esp+0x40]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x3C]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x40]
	mov byte ptr [esp+0xCC],0
	call ZArray<unsigned char>::RemoveAll

 Block357:
	mov ecx,dword ptr [esp+0x28]
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0x14],0
	test ecx,ecx
	je Block359

 Block358:
	mov byte ptr [esp+0x14],1
	jmp Block365

 Block359:
	test eax,eax
	je Block361

 Block360:
	mov byte ptr [esp+0x14],2
	jmp Block365

 Block361:
	cmp dword ptr [esp+0x1C],0
	je Block363

 Block362:
	mov byte ptr [esp+0x14],4
	jmp Block365

 Block363:
	cmp dword ptr [esp+0x58],0
	je Block365

 Block364:
	mov byte ptr [esp+0x14],8

 Block365:
	test ebx,ebx
	jge Block368

 Block366:
	xor ebx,ebx
	cmp dword ptr [esp+0x88],ebx
	je Block368

 Block367:
	xor ecx,ecx

 Block368:
	mov edx,dword ptr [esp+0x14]
	push edx
	mov edx,ebx
	sub edx,dword ptr [esp+0x24]
	push 0
	sub edx,dword ptr [esp+0x60]
	sub edx,dword ptr [esp+0x24]
	sub edx,dword ptr [esp+0x34]
	sub edx,dword ptr [esp+0x64]
	sub edx,eax
	sub edx,ecx
	push edx
	mov ecx,esi
	call CUserLocal::TryConsumePetHP
	cmp byte ptr [esp+0x14],0
	je Block370

 Block369:
	push 0
	push 0
	push 0
	mov ecx,esi
	mov dword ptr [esi+0x3AD0],1
	call CUserLocal::TryConsumePetMP

 Block370:
	test ebx,ebx
	jle Block373

 Block371:
	mov ecx,esi
	call CUserLocal::_ZtlSecureGet_m_bSit
	test eax,eax
	je Block373

 Block372:
	mov ecx,dword ptr [esp+0x18]
	push 0
	call CWvsContext::SendGetUpFromChairRequest

 Block373:
	lea ecx,[esp+0x70]
	mov dword ptr [esp+0xCC],0xFFFFFFFF
	call ZArray<unsigned long>::RemoveAll

 Block374:
	mov ecx,dword ptr [esp+0xC4]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xBC
	ret 0x28
}
}
// CUserLocal::OnTeleport
__SUB_CLASS_THIS(00513FF0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push ebx
	push esi
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edi
	mov edi,dword ptr [esp+0x10]
	mov ebx,ecx
	mov ecx,edi
	call CInPacket::Decode1
	test al,al
	je Block2

 Block1:
	mov dword ptr [esi+0x20B8],0
	call get_update_time
	mov dword ptr [esi+0x20BC],eax

 Block2:
	mov esi,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	mov ecx,edi
	call CInPacket::Decode1
	mov ecx,dword ptr [esi+4]
	movzx eax,al
	mov esi,dword ptr [ecx+eax*8+4]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi+0xC]
	lea edi,[ebx+0x1984]
	push edx
	lea ecx,[edi+0xC]
	call TSecType<long>::SetData
	mov eax,dword ptr [esi+0x10]
	push eax
	mov ecx,edi
	call TSecType<long>::SetData
	mov ecx,dword ptr [esi+0x20]
	mov edx,dword ptr [esi+4]
	push 1
	push ecx
	push edx
	push 0
	push 0
	mov ecx,ebx
	call CUserLocal::TryRegisterTeleport

 Block4:
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CUserLocal::OnSitResult
_SUB_EXCEPTION_HANDLER(505E70)
__SUB_CLASS_THIS(00505E70, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_505E70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [ebx+0x20B8],0
	call get_update_time
	mov esi,dword ptr [esp+0x3C]
	mov ecx,esi
	mov dword ptr [ebx+0x20BC],eax
	call CInPacket::Decode1
	test al,al
	jne Block3

 Block1:
	lea edx,[edi+0x3B98]
	xor ecx,ecx
	call _ZtlSecureTearHelper<int>::call
	mov dword ptr [edi+0x3BA0],eax
	mov eax,dword ptr [edi+0x4644]
	push eax
	lea ecx,[edi+0x463C]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block18

 Block2:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x38]
	push 0
	mov ecx,edi
	call eax
	jmp Block18

 Block3:
	mov ecx,esi
	call CInPacket::Decode2
	mov esi,dword ptr [_D_G_PSTAGE+4]
	movzx ebp,ax
	test esi,esi
	je Block6

 Block4:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block6

 Block5:
	mov eax,esi
	jmp Block7

 Block6:
	xor eax,eax

 Block7:
	mov ecx,dword ptr [eax+0x1B0]
	mov edx,dword ptr [ecx+ebp*8]
	lea esi,[ecx+ebp*8]
	sub edx,0xA
	mov dword ptr [esp+0x1C],edx
	mov eax,dword ptr [esi+4]
	sub eax,0x1E
	mov dword ptr [esp+0x20],eax
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [edi+4]
	mov eax,dword ptr [eax+0x10]
	add ecx,0xA
	mov dword ptr [esp+0x24],ecx
	mov edx,dword ptr [esi+4]
	add edx,0x1E
	lea ecx,[edi+4]
	mov dword ptr [esp+0x28],edx
	lea edx,[esp+0x14]
	push edx
	call eax
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	lea eax,[esp+0x24]
	push eax
	call PtInRect
	test eax,eax
	je Block17

 Block8:
	mov eax,dword ptr [edi+0x2E9C]
	xor ebx,ebx
	cmp eax,ebx
	je Block12

 Block9:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push eax
	call CUserPool::GetUser
	cmp eax,ebx
	je Block11

 Block10:
	mov dword ptr [eax+0x2E98],ebx

 Block11:
	mov dword ptr [edi+0x2E9C],ebx

 Block12:
	lea edx,[edi+0x3B98]
	mov ecx,1
	call _ZtlSecureTearHelper<int>::call
	lea ecx,[esp+0x3C]
	push ecx
	mov ecx,edi
	mov dword ptr [edi+0x3BA0],eax
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	mov dword ptr [esp+0x34],ebx
	cmp eax,ebx
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	jmp Block15

 Block14:
	xor eax,eax

 Block15:
	mov edx,dword ptr [esi+4]
	mov ecx,dword ptr [esi]
	push edx
	push ecx
	mov ecx,eax
	call CVecCtrlUser::OnSit
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block18

 Block16:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax
	jmp Block18

 Block17:
	lea edx,[edi+0x3B98]
	xor ecx,ecx
	call _ZtlSecureTearHelper<int>::call
	push 0
	mov ecx,ebx
	mov dword ptr [edi+0x3BA0],eax
	call CWvsContext::SendGetUpFromChairRequest

 Block18:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 4
}
}
// CUserLocal::OnMouseMove
_SUB_EXCEPTION_HANDLER(51B240)
__SUB_CLASS_THIS(0051B240, __thiscall, 41359,  CUserLocal, int32_t, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_51B240
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 1
	lea eax,[esp+0x24]
	push eax
	call CWndMan::GetCursorPos
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::FindBalloon
	test eax,eax
	je Block4

 Block1:
	cmp dword ptr [eax+0x6C],0
	je Block4

 Block2:
	lea edx,[esp+0x10]
	push edx
	mov ecx,eax
	call CUser::GetMiniRoomTitle
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [esp+0x38]
	push eax
	mov eax,dword ptr [esp+0x40]
	add eax,0x14
	add ecx,0x14
	push eax
	push ecx
	lea ecx,[ebp+0x3BD8]
	mov dword ptr [esp+0x3C],0
	call CUIToolTip::SetToolTip_String
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test eax,eax
	je Block24

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block24

 Block4:
	mov ecx,dword ptr [TSingleton<CMessageBoxPool>::ms_pInstance]
	lea edx,[esp+0x20]
	push edx
	call CMessageBoxPool::FindMessageBox
	mov esi,eax
	test esi,esi
	je Block15

 Block5:
	mov dword ptr [esp+0x10],0
	lea eax,[esp+0x14]
	push 0x1A19
	push eax
	mov dword ptr [esp+0x38],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x18]
	push edx
	mov byte ptr [esp+0x3C],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x20]
	add esp,0xC
	mov byte ptr [esp+0x30],1
	test eax,eax
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	lea eax,[esp+0x1C]
	push 0x1AC3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [esi+0x38]
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x3C],3
	call CItemInfo::GetItemString
	push eax
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x38],4
	call ZXString<char>::op_add_1
	push eax
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x34],5
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x30],4
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x30],3
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x30],1
	test eax,eax
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	mov esi,dword ptr [esp+0x10]
	mov ecx,dword ptr [esp+0x3C]
	mov edx,dword ptr [esp+0x38]
	push esi
	add ecx,0x14
	push ecx
	add edx,0x14
	push edx
	lea ecx,[ebp+0x3BD8]
	call CUIToolTip::SetToolTip_String
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test esi,esi
	je Block24

 Block14:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4
	jmp Block24

 Block15:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 0
	lea eax,[esp+0x24]
	push eax
	call CWndMan::GetCursorPos
	mov edx,dword ptr [esp+0x3C]
	mov eax,dword ptr [esp+0x38]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edx
	push eax
	lea edx,[esp+0x28]
	push edx
	lea esi,[ebp+0x3BD8]
	add ecx,0x35D4
	push esi
	call CTemporaryStatView::ShowToolTip
	test eax,eax
	jne Block24

 Block16:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 1
	lea eax,[esp+0x24]
	push eax
	call CWndMan::GetCursorPos
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block19

 Block17:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block19

 Block18:
	mov eax,edi
	jmp Block20

 Block19:
	xor eax,eax

 Block20:
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x20]
	push 0
	push 1
	push ecx
	push edx
	push esi
	lea ecx,[eax+0x148]
	call CToolTipHelper::CheckAndShow
	lea esi,[ebp+0x4620]
	mov dword ptr [esi],eax
	test eax,eax
	jl Block23

 Block21:
	push 0
	lea edi,[ebp+0x4624]
	push esi
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::GetAt
	test eax,eax
	je Block23

 Block22:
	push 0
	push esi
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::Insert
	lea ecx,[eax+0xC]
	call CUIToolTip::ClearToolTip
	push esi
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::RemoveKey

 Block23:
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [esp+0x20]
	push eax
	push ecx
	lea ecx,[ebp+0x14]
	call CChatBalloon::ADBoardMouseMove

 Block24:
	xor eax,eax
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x24
	ret 8
}
}
// CUserLocal::SetShoeAttr
_SUB_EXCEPTION_HANDLER(50A990)
__SUB_CLASS_THIS0(0050A990, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFC0
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50A990
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x64
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x78]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x3C]
	push eax
	mov ecx,ebx
	lea edi,[ebx+0x2148]
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [esp+0x40]
	mov ecx,dword ptr [eax+4]
	mov dword ptr [esp+0x24],ecx
	test ebp,ebp
	je Block5

 Block1:
	add ebp,0xFFFFFFF0
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebp,ebp
	je Block4

 Block3:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebp
	call eax

 Block4:
	mov dword ptr [esp+0x40],0

 Block5:
	mov eax,dword ptr [esi+0x4844]
	test eax,eax
	je Block7

 Block6:
	mov eax,dword ptr [eax+0x68]
	jmp Block8

 Block7:
	xor eax,eax

 Block8:
	push eax
	mov ecx,edi
	call SecondaryStat::GetSpeed
	mov ecx,dword ptr [edi+0x584]
	mov ebp,eax
	lea eax,[edi+0x57C]
	push ecx
	push eax
	mov dword ptr [esp+0x24],ebp
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block10

 Block9:
	mov edx,dword ptr [edi+0x584]
	push edx
	lea eax,[edi+0x57C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov ebp,eax
	mov dword ptr [esp+0x1C],eax

 Block10:
	mov ecx,dword ptr [edi+0xE34]
	lea eax,[edi+0xE2C]
	push ecx
	push eax
	mov dword ptr [esp+0x34],eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block12

 Block11:
	mov edx,dword ptr [edi+0xE34]
	mov eax,dword ptr [esp+0x2C]
	push edx
	push eax
	call _ZtlSecureFuseHelper<long>::call
	imul eax,ebp
	mov dword ptr [esp+0x40],eax
	add esp,8
	fild dword ptr [esp+0x38]
	fdiv qword ptr [__real_c059000000000000]
	call __ftol2_sse
	add ebp,eax
	mov dword ptr [esp+0x1C],ebp

 Block12:
	mov eax,dword ptr [esi+0x4844]
	test eax,eax
	je Block14

 Block13:
	mov eax,dword ptr [eax+0x64]
	jmp Block15

 Block14:
	xor eax,eax

 Block15:
	push eax
	mov ecx,edi
	call SecondaryStat::GetJump
	fld1
	mov dword ptr [esp+0x18],eax
	mov eax,dword ptr [esi+0x3B7C]
	sub esp,8
	lea ecx,[eax+0x18]
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	fld1
	mov eax,dword ptr [esi+0x3B7C]
	sub esp,8
	lea ecx,[eax+0x30]
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ecx,esi
	call CUserLocal::IsDashing2
	test eax,eax
	je Block17

 Block16:
	mov dword ptr [esp+0x20],0xA0
	jmp Block20

 Block17:
	mov ecx,dword ptr [ebx+0x35D0]
	push ecx
	lea ebp,[ebx+0x35C8]
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block19

 Block18:
	mov edx,dword ptr [ebx+0x35D0]
	push edx
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov dword ptr [esp+0x20],eax
	jmp Block20

 Block19:
	mov dword ptr [esp+0x20],0x8C

 Block20:
	lea eax,[esp+0x38]
	push eax
	mov ecx,esi
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	test eax,eax
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	mov dword ptr [esp+0x28],eax
	jmp Block23

 Block22:
	mov dword ptr [esp+0x28],0

 Block23:
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block25

 Block24:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block25:
	mov eax,dword ptr [edi+0x5A8]
	push eax
	lea ebp,[edi+0x5A0]
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block45

 Block26:
	mov ecx,dword ptr [edi+0x5A8]
	push ecx
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	mov ebx,eax
	push ebx
	call CMorphTemplate::GetMorphTemplate
	add esp,0xC
	test eax,eax
	je Block29

 Block27:
	push ebx
	call CMorphTemplate::IsSuperMan
	add esp,4
	test eax,eax
	jne Block29

 Block28:
	push ebx
	call CMorphTemplate::IsHideMorphed
	add esp,4
	test eax,eax
	je Block30

 Block29:
	mov edx,dword ptr [edi+0x5A8]
	push edx
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	push eax
	call CMorphTemplate::IsHideMorphed
	add esp,0xC
	test eax,eax
	je Block45

 Block30:
	mov eax,dword ptr [edi+0x5A8]
	push eax
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	push eax
	call CMorphTemplate::GetMorphTemplate
	mov ebp,eax
	add esp,0xC
	test ebp,ebp
	je Block45

 Block31:
	cmp dword ptr [ebp+0x2C],0
	jne Block33

 Block32:
	mov ecx,dword ptr [esp+0x28]
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block45

 Block33:
	cmp dword ptr [ebp+0x2C],1
	jne Block35

 Block34:
	mov ecx,dword ptr [esp+0x28]
	call CVecCtrl::IsSwimming
	test eax,eax
	je Block45

 Block35:
	mov eax,dword ptr [ebp+0x14]
	cmp eax,0x46
	jg Block37

 Block36:
	mov eax,0x46

 Block37:
	mov ecx,dword ptr [esp+0x20]
	cmp eax,ecx
	mov dword ptr [esp+0x1C],eax
	jl Block39

 Block38:
	mov dword ptr [esp+0x1C],ecx

 Block39:
	mov eax,dword ptr [ebp+0x18]
	cmp eax,0x50
	jg Block41

 Block40:
	mov eax,0x50
	mov dword ptr [esp+0x18],eax
	jmp Block44

 Block41:
	cmp eax,0x7B
	jge Block43

 Block42:
	mov dword ptr [esp+0x18],eax
	jmp Block44

 Block43:
	mov dword ptr [esp+0x18],0x7B

 Block44:
	fild dword ptr [esp+0x1C]
	mov edi,dword ptr [esi+0x3B7C]
	add edi,0x84
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ebx,dword ptr [esi+0x3B7C]
	mov ecx,edi
	add ebx,0x6C
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov edi,dword ptr [esi+0x3B7C]
	mov ecx,ebx
	add edi,0x60
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ebx,dword ptr [esi+0x3B7C]
	mov ecx,edi
	add ebx,0x24
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	fild dword ptr [esp+0x18]
	mov ecx,dword ptr [esi+0x3B7C]
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	add ecx,0x48
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	fld qword ptr [ebp+0x20]
	mov edi,dword ptr [esi+0x3B7C]
	add edi,0x30
	sub esp,8
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ebx,dword ptr [esi+0x3B7C]
	mov ecx,edi
	add ebx,0x18
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	fild dword ptr [ebp+0x28]
	mov esi,dword ptr [esi+0x3B7C]
	add esi,0x60
	fdiv qword ptr [__real_4059000000000000]
	mov ecx,esi
	fstp qword ptr [esp+0x3C]
	call TSecType<double>::GetData
	fmul qword ptr [esp+0x3C]
	sub esp,8
	mov ecx,esi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ecx,dword ptr [esp+0x78]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block45:
	mov ebx,dword ptr [edi+0x13D4]
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+4]
	mov ecx,ebx
	call eax
	test al,al
	je Block76

 Block46:
	lea ebp,[ebx+0x18]
	mov ecx,ebp
	call ZFatalSection::Lock
	test ebp,ebp
	je Block49

 Block47:
	add dword ptr [ebp+4],0xFFFFFFFF
	jne Block49

 Block48:
	mov dword ptr [ebp],0

 Block49:
	mov ecx,dword ptr [ebx+0xC]
	push ecx
	call is_vehicle
	add esp,4
	test eax,eax
	je Block76

 Block50:
	mov ecx,edi
	call SecondaryStat::IsRidingSkillVehicle
	test eax,eax
	je Block55

 Block51:
	mov ebx,dword ptr [edi+0x13D4]
	lea ebp,[ebx+0x18]
	mov ecx,ebp
	call ZFatalSection::Lock
	test ebp,ebp
	je Block54

 Block52:
	add dword ptr [ebp+4],0xFFFFFFFF
	jne Block54

 Block53:
	mov dword ptr [ebp],0

 Block54:
	cmp dword ptr [ebx+0xC],0x1D7AF0
	je Block76

 Block55:
	mov ecx,edi
	call SecondaryStat::IsWildhunterJaguarVehicle
	test eax,eax
	jne Block76

 Block56:
	mov ebx,dword ptr [edi+0x13D4]
	lea ebp,[ebx+0x18]
	mov ecx,ebp
	call ZFatalSection::Lock
	test ebp,ebp
	je Block59

 Block57:
	add dword ptr [ebp+4],0xFFFFFFFF
	jne Block59

 Block58:
	mov dword ptr [ebp],0

 Block59:
	mov edx,dword ptr [ebx+0xC]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edx
	call CItemInfo::GetEquipItem
	mov ecx,dword ptr [eax+0x188]
	push ecx
	add eax,0x180
	push eax
	call _ZtlSecureFuseHelper<long>::call
	push eax
	call CTamingMobTemplate::GetTamingMobTemplate
	add esp,0xC
	mov dword ptr [esp+0x28],eax
	test eax,eax
	je Block76

 Block60:
	mov edx,dword ptr [esp+0x24]
	mov eax,dword ptr [edx+0x195]
	xor ebp,ebp
	xor ebx,ebx
	test eax,eax
	je Block62

 Block61:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov ebx,eax
	mov ecx,ebx
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_niSpeed
	mov ecx,ebx
	movsx ebp,ax
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_niJump
	movsx ebx,ax

 Block62:
	mov eax,dword ptr [esp+0x24]
	mov eax,dword ptr [eax+0x19D]
	test eax,eax
	je Block64

 Block63:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov ecx,eax
	mov dword ptr [esp+0x38],eax
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_niSpeed
	movsx ecx,ax
	add ebp,ecx
	mov ecx,dword ptr [esp+0x38]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_niJump
	movsx edx,ax
	add ebx,edx

 Block64:
	mov ecx,edi
	call SecondaryStat::IsEventVehicle
	test eax,eax
	je Block66

 Block65:
	mov ecx,dword ptr [edi+0x13C4]
	call TemporaryStatBase<long>::GetValue
	mov ecx,dword ptr [edi+0x13CC]
	add ebp,dword ptr [eax]
	call TemporaryStatBase<long>::GetValue
	add ebx,dword ptr [eax]

 Block66:
	mov ecx,dword ptr [esp+0x28]
	mov eax,dword ptr [ecx+0x14]
	cmp eax,0x46
	jg Block68

 Block67:
	mov eax,0x46

 Block68:
	add ebp,eax
	cmp ebp,0xBE
	mov dword ptr [esp+0x1C],ebp
	jl Block70

 Block69:
	mov dword ptr [esp+0x1C],0xBE

 Block70:
	mov eax,dword ptr [ecx+0x18]
	cmp eax,0x50
	jg Block72

 Block71:
	mov eax,0x50

 Block72:
	add eax,ebx
	cmp eax,0x7B
	mov dword ptr [esp+0x18],eax
	jl Block74

 Block73:
	mov dword ptr [esp+0x18],0x7B

 Block74:
	fild dword ptr [esp+0x1C]
	mov edi,dword ptr [esi+0x3B7C]
	add edi,0x84
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ebx,dword ptr [esi+0x3B7C]
	push edi
	lea ecx,[ebx+0x6C]
	call TSecType<double>::op_assign_1
	push eax
	lea ecx,[ebx+0x60]
	call TSecType<double>::op_assign_1
	push eax
	lea ecx,[ebx+0x24]
	call TSecType<double>::op_assign_1
	fild dword ptr [esp+0x18]
	mov ecx,dword ptr [esi+0x3B7C]
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	add ecx,0x48
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov edi,dword ptr [esi+0x3B7C]
	mov ebx,dword ptr [esp+0x28]
	fld qword ptr [ebx+0x20]
	add edi,0x30
	sub esp,8
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ecx,dword ptr [esi+0x3B7C]
	push edi
	add ecx,0x18
	call TSecType<double>::op_assign_1
	fild dword ptr [ebx+0x28]

 Block75:
	fdiv qword ptr [__real_4059000000000000]
	mov ecx,dword ptr [esi+0x3B7C]
	sub esp,8
	add ecx,0x60
	fstp qword ptr [esp]
	call TSecType<double>::op_mul_assign
	fstp st(0)
	mov ecx,dword ptr [esp+0x78]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block76:
	mov ecx,edi
	call SecondaryStat::IsWildhunterJaguarVehicle
	test eax,eax
	je Block112

 Block77:
	mov ebx,dword ptr [edi+0x13D4]
	lea ebp,[ebx+0x18]
	mov ecx,ebp
	call ZFatalSection::Lock
	test ebp,ebp
	je Block80

 Block78:
	add dword ptr [ebp+4],0xFFFFFFFF
	jne Block80

 Block79:
	mov dword ptr [ebp],0

 Block80:
	mov eax,dword ptr [ebx+0xC]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block112

 Block81:
	mov ecx,dword ptr [eax+0x188]
	push ecx
	add eax,0x180
	push eax
	call _ZtlSecureFuseHelper<long>::call
	push eax
	call CTamingMobTemplate::GetTamingMobTemplate
	add esp,0xC
	mov dword ptr [esp+0x38],eax
	test eax,eax
	je Block112

 Block82:
	mov eax,dword ptr [esi+0x4844]
	test eax,eax
	je Block84

 Block83:
	mov eax,dword ptr [eax+0x68]
	jmp Block85

 Block84:
	xor eax,eax

 Block85:
	push eax
	mov ecx,edi
	call SecondaryStat::GetSpeed
	mov ebx,dword ptr [esp+0x24]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x28]
	push edx
	push 0x1F78E29
	mov ebp,eax
	push ebx
	sub ebp,0x64
	mov dword ptr [esp+0x34],0
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block87

 Block86:
	mov ecx,dword ptr [esp+0x28]
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [eax+0x168]
	push ecx
	add eax,0x160
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	add ebp,eax

 Block87:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x34]
	push edx
	push 0x1F937F0
	push ebx
	mov dword ptr [esp+0x40],0
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block89

 Block88:
	mov ecx,dword ptr [esp+0x34]
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [eax+0x168]
	push ecx
	add eax,0x160
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	add ebp,eax

 Block89:
	mov edx,dword ptr [esp+0x38]
	mov eax,dword ptr [edx+0x14]
	cmp eax,0x46
	jg Block91

 Block90:
	mov eax,0x46

 Block91:
	lea ebx,[eax+ebp]
	cmp ebx,0xBE
	jl Block93

 Block92:
	mov ebx,0xBE

 Block93:
	mov eax,dword ptr [edi+0x584]
	push eax
	lea ebp,[edi+0x57C]
	push ebp
	mov dword ptr [esp+0x24],ebx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block95

 Block94:
	mov ecx,dword ptr [edi+0x584]
	push ecx
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	mov ebx,eax
	add esp,8
	mov dword ptr [esp+0x1C],ebx

 Block95:
	mov edx,dword ptr [edi+0xE34]
	mov ebp,dword ptr [esp+0x2C]
	push edx
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block97

 Block96:
	mov eax,dword ptr [edi+0xE34]
	push eax
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	imul eax,ebx
	mov dword ptr [esp+0x34],eax
	add esp,8
	fild dword ptr [esp+0x2C]
	fdiv qword ptr [__real_c059000000000000]
	call __ftol2_sse
	add ebx,eax
	mov dword ptr [esp+0x1C],ebx
	jmp Block99

 Block97:
	cmp ebx,0x46
	jge Block99

 Block98:
	mov dword ptr [esp+0x1C],0x46

 Block99:
	fild dword ptr [esp+0x1C]
	mov eax,dword ptr [esi+0x3B7C]
	lea ebx,[eax+0x84]
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov eax,dword ptr [esi+0x3B7C]
	mov ecx,ebx
	lea ebp,[eax+0x6C]
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebp
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov eax,dword ptr [esi+0x3B7C]
	mov ecx,ebp
	lea ebx,[eax+0x60]
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov eax,dword ptr [esi+0x3B7C]
	mov ecx,ebx
	lea ebp,[eax+0x24]
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebp
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov eax,dword ptr [esi+0x4844]
	test eax,eax
	je Block101

 Block100:
	mov eax,dword ptr [eax+0x64]
	jmp Block102

 Block101:
	xor eax,eax

 Block102:
	push eax
	mov ecx,edi
	call SecondaryStat::GetJump
	mov ebp,dword ptr [esp+0x38]
	mov ecx,dword ptr [ebp+0x18]
	sub eax,0x64
	cmp ecx,0x50
	jg Block104

 Block103:
	mov ecx,0x50

 Block104:
	add eax,ecx
	cmp eax,0x7B
	mov dword ptr [esp+0x18],eax
	jl Block106

 Block105:
	mov dword ptr [esp+0x18],0x7B

 Block106:
	fild dword ptr [esp+0x18]
	mov eax,dword ptr [esi+0x3B7C]
	sub esp,8
	lea ecx,[eax+0x48]
	fdiv qword ptr [__real_4059000000000000]
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ecx,dword ptr [esp+0x24]
	mov edi,dword ptr [ecx+0x135]
	mov dword ptr [esp+0x30],edi
	test edi,edi
	je Block108

 Block107:
	lea edx,[edi+4]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block108:
	mov dword ptr [esp+0x80],0
	test edi,edi
	je Block111

 Block109:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block111

 Block110:
	mov edi,dword ptr [esi+0x3B7C]
	mov ecx,eax
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nSwim
	mov dword ptr [esp+0x38],eax
	fild dword ptr [esp+0x38]
	sub esp,8
	lea ecx,[edi+0x60]
	fdiv qword ptr [__real_4059000000000000]
	fstp qword ptr [esp]
	call TSecType<double>::op_mul_assign
	fstp st(0)

 Block111:
	mov eax,dword ptr [esi+0x3B7C]
	fld qword ptr [ebp+0x20]
	lea edi,[eax+0x30]
	sub esp,8
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov eax,dword ptr [esi+0x3B7C]
	mov ecx,edi
	lea ebx,[eax+0x18]
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	fild dword ptr [ebp+0x28]
	mov esi,dword ptr [esi+0x3B7C]
	add esi,0x60
	fdiv qword ptr [__real_4059000000000000]
	mov ecx,esi
	fstp qword ptr [esp+0x3C]
	call TSecType<double>::GetData
	fmul qword ptr [esp+0x3C]
	sub esp,8
	mov ecx,esi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	lea ecx,[esp+0x2C]
	mov dword ptr [esp+0x80],0xFFFFFFFF
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	mov ecx,dword ptr [esp+0x78]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block112:
	mov ecx,edi
	call SecondaryStat::IsRidingSkillVehicle
	test eax,eax
	je Block133

 Block113:
	mov ebx,dword ptr [edi+0x13D4]
	lea ebp,[ebx+0x18]
	mov ecx,ebp
	call ZFatalSection::Lock
	test ebp,ebp
	je Block116

 Block114:
	add dword ptr [ebp+4],0xFFFFFFFF
	jne Block116

 Block115:
	mov dword ptr [ebp],0

 Block116:
	cmp dword ptr [ebx+0xC],0x1D7AF0
	jne Block133

 Block117:
	cmp dword ptr [esi+0x5E8],0x217E76D
	jne Block133

 Block118:
	mov ebx,dword ptr [edi+0x13D4]
	lea ebp,[ebx+0x18]
	mov ecx,ebp
	call ZFatalSection::Lock
	test ebp,ebp
	je Block121

 Block119:
	add dword ptr [ebp+4],0xFFFFFFFF
	jne Block121

 Block120:
	mov dword ptr [ebp],0

 Block121:
	mov eax,dword ptr [ebx+0xC]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block133

 Block122:
	mov ecx,dword ptr [eax+0x188]
	push ecx
	add eax,0x180
	push eax
	call _ZtlSecureFuseHelper<long>::call
	push eax
	call CTamingMobTemplate::GetTamingMobTemplate
	mov ebp,eax
	add esp,0xC
	test ebp,ebp
	je Block133

 Block123:
	mov eax,dword ptr [ebp+0x14]
	cmp eax,0x46
	jg Block125

 Block124:
	mov eax,0x46

 Block125:
	mov ecx,dword ptr [esp+0x20]
	cmp eax,ecx
	mov dword ptr [esp+0x1C],eax
	jl Block127

 Block126:
	mov dword ptr [esp+0x1C],ecx

 Block127:
	mov eax,dword ptr [ebp+0x18]
	cmp eax,0x50
	jg Block129

 Block128:
	mov eax,0x50
	mov dword ptr [esp+0x18],eax
	jmp Block132

 Block129:
	cmp eax,0x7B
	jge Block131

 Block130:
	mov dword ptr [esp+0x18],eax
	jmp Block132

 Block131:
	mov dword ptr [esp+0x18],0x7B

 Block132:
	fild dword ptr [esp+0x1C]
	mov edi,dword ptr [esi+0x3B7C]
	sub esp,8
	lea ecx,[edi+0x84]
	fdiv qword ptr [__real_4059000000000000]
	fstp qword ptr [esp]
	call TSecType<double>::op_assign_0
	push eax
	lea ecx,[edi+0x6C]
	call TSecType<double>::op_assign_1
	push eax
	lea ecx,[edi+0x60]
	call TSecType<double>::op_assign_1
	push eax
	lea ecx,[edi+0x24]
	call TSecType<double>::op_assign_1
	fild dword ptr [esp+0x18]
	mov ecx,dword ptr [esi+0x3B7C]
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	add ecx,0x48
	fstp qword ptr [esp]
	call TSecType<double>::op_assign_0
	fld qword ptr [ebp+0x20]
	mov edi,dword ptr [esi+0x3B7C]
	sub esp,8
	lea ecx,[edi+0x30]
	fstp qword ptr [esp]
	call TSecType<double>::op_assign_0
	push eax
	lea ecx,[edi+0x18]
	call TSecType<double>::op_assign_1
	fild dword ptr [ebp+0x28]
	jmp Block75

 Block133:
	mov ebx,dword ptr [esp+0x1C]
	mov eax,dword ptr [esp+0x20]
	cmp ebx,eax
	jl Block135

 Block134:
	mov ebx,eax
	mov dword ptr [esp+0x1C],ebx

 Block135:
	mov edx,dword ptr [edi+0xE34]
	mov eax,dword ptr [esp+0x2C]
	push edx
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block138

 Block136:
	cmp ebx,0x46
	jge Block138

 Block137:
	mov dword ptr [esp+0x1C],0x46

 Block138:
	mov eax,dword ptr [esp+0x18]
	cmp eax,0x50
	jg Block140

 Block139:
	mov eax,0x50
	mov dword ptr [esp+0x18],eax
	jmp Block143

 Block140:
	cmp eax,0x7B
	jge Block142

 Block141:
	mov dword ptr [esp+0x18],eax
	jmp Block143

 Block142:
	mov dword ptr [esp+0x18],0x7B

 Block143:
	fild dword ptr [esp+0x1C]
	mov edi,dword ptr [esi+0x3B7C]
	add edi,0x84
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ebx,dword ptr [esi+0x3B7C]
	mov ecx,edi
	add ebx,0x6C
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov edi,dword ptr [esi+0x3B7C]
	mov ecx,ebx
	add edi,0x60
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,edi
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov eax,dword ptr [esi+0x3B7C]
	mov ecx,edi
	lea ebx,[eax+0x24]
	call TSecType<double>::GetData
	sub esp,8
	mov ecx,ebx
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	fild dword ptr [esp+0x18]
	mov eax,dword ptr [esi+0x3B7C]
	sub esp,8
	fdiv qword ptr [__real_4059000000000000]
	lea ecx,[eax+0x48]
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov ecx,dword ptr [esp+0x24]
	mov edi,dword ptr [ecx+0x135]
	mov dword ptr [esp+0x40],edi
	test edi,edi
	je Block145

 Block144:
	lea edx,[edi+4]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block145:
	mov dword ptr [esp+0x80],1
	test edi,edi
	je Block151

 Block146:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov ebx,eax
	test ebx,ebx
	je Block151

 Block147:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+8]
	mov ecx,edi
	call edx
	test eax,eax
	je Block149

 Block148:
	fld qword ptr [__real_4024000000000000]
	jmp Block150

 Block149:
	mov eax,dword ptr [ebx+0x170]
	push eax
	lea ecx,[ebx+0x160]
	push ecx
	call _ZtlSecureFuseHelper<double>::call
	add esp,8

 Block150:
	mov ebp,dword ptr [esi+0x3B7C]
	add ebp,0x30
	sub esp,8
	mov ecx,ebp
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov eax,dword ptr [esi+0x3B7C]
	add eax,0x18
	mov ecx,ebp
	mov dword ptr [esp+0x38],eax
	call TSecType<double>::GetData
	mov ecx,dword ptr [esp+0x38]
	sub esp,8
	fstp qword ptr [esp]
	call TSecType<double>::SetData
	mov edx,dword ptr [ebx+0x17C]
	push edx
	add ebx,0x174
	push ebx
	call _ZtlSecureFuseHelper<long>::call
	mov esi,dword ptr [esi+0x3B7C]
	add esi,0x60
	add esp,8
	mov ecx,esi
	mov dword ptr [esp+0x38],eax
	call TSecType<double>::GetData
	fild dword ptr [esp+0x38]
	sub esp,8
	mov ecx,esi
	fdiv qword ptr [__real_4059000000000000]
	fmulp st(1),st(0)
	fstp qword ptr [esp]
	call TSecType<double>::SetData

 Block151:
	mov dword ptr [esp+0x80],0xFFFFFFFF
	test edi,edi
	je Block154

 Block152:
	lea esi,[edi+4]
	push esi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block154

 Block153:
	push esi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block154:
	mov ecx,dword ptr [esp+0x78]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::UpdatePassiveSkillData
_SUB_EXCEPTION_HANDLER(518C20)
__SUB_CLASS_THIS(00518C20, __thiscall, 41339,  CUserLocal, void, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_518C20
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x30
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x44]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	xor ebp,ebp
	mov dword ptr [esp+0x18],ebp
	cmp dword ptr [edi+0x4844],ebp
	je Block41

 Block1:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp ecx,ebp
	je Block3

 Block2:
	lea eax,[esp+0x2C]
	push eax
	call CWvsContext::GetCharacterData
	lea ebx,[ebp+1]
	jmp Block4

 Block3:
	mov dword ptr [esp+0x20],ebp
	lea eax,[esp+0x1C]
	mov ebx,2

 Block4:
	mov esi,dword ptr [eax+4]
	mov dword ptr [esp+0x28],esi
	cmp esi,ebp
	je Block6

 Block5:
	lea ecx,[esi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block6:
	mov dword ptr [esp+0x4C],1
	test bl,2
	je Block8

 Block7:
	and ebx,0xFFFFFFFD
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x18],ebx
	call ZRef<CharacterData>::~ZRef<CharacterData>

 Block8:
	mov byte ptr [esp+0x4C],2
	test bl,1
	je Block10

 Block9:
	lea ecx,[esp+0x2C]
	call ZRef<CharacterData>::~ZRef<CharacterData>

 Block10:
	cmp esi,ebp
	je Block40

 Block11:
	mov ecx,dword ptr [edi+0x4844]
	cmp ecx,ebp
	je Block13

 Block12:
	call PassiveSkillData::ClearData

 Block13:
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp ebx,ebp
	je Block20

 Block14:
	cmp dword ptr [ebx+0x37C8],ebp
	jle Block20

 Block15:
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x14],ebp
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebx
	mov byte ptr [esp+0x50],3
	call CWvsContext::GetGuildSkillArray
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x50],4
	call ZArray<long>::operator=
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x4C],3
	call ZArray<long>::RemoveAll
	lea ecx,[ecx]

 Block16:
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block19

 Block17:
	cmp ebp,dword ptr [eax-4]
	jae Block19

 Block18:
	mov esi,dword ptr [eax+ebp*4]
	push esi
	mov ecx,ebx
	call CWvsContext::GetGuildSkillLevel
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push esi
	mov ebx,eax
	call CSkillInfo::GetSkill
	push ebx
	push eax
	mov ecx,edi
	call CUserLocal::SetPassiveSkillData
	mov esi,dword ptr [esp+0x28]
	mov ebx,dword ptr [esp+0x1C]
	inc ebp
	jmp Block16

 Block19:
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x4C],2
	call ZArray<long>::RemoveAll
	xor ebp,ebp

 Block20:
	lea ebx,[esi+0x53D]
	mov ecx,ebx
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x18],eax
	cmp eax,ebp
	je Block31

 Block21:
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,ebx
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x14]
	push edx
	push eax
	push esi
	mov dword ptr [esp+0x20],ebp
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0x14]
	cmp ecx,ebp
	je Block30

 Block22:
	cmp dword ptr [ecx+0x10],ebp
	je Block30

 Block23:
	mov edx,dword ptr [ecx]
	cmp edx,0x217994F
	jne Block25

 Block24:
	cmp dword ptr [edi+0x5F8],0x1D7AF0
	jne Block30

 Block25:
	cmp edx,0x217E775
	jne Block27

 Block26:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebp
	push 0x217C05C
	push esi
	call CSkillInfo::GetSkillLevel_0
	push eax
	mov eax,dword ptr [esp+0x18]
	push eax
	jmp Block29

 Block27:
	cmp eax,ebp
	jle Block30

 Block28:
	push eax
	push ecx

 Block29:
	mov ecx,edi
	call CUserLocal::SetPassiveSkillData

 Block30:
	cmp dword ptr [esp+0x18],ebp
	jne Block21

 Block31:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,edi
	call eax
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0x23
	jne Block34

 Block32:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x1C]
	push edx
	push 0x217E76D
	push esi
	mov dword ptr [esp+0x28],ebp
	call CSkillInfo::GetSkillLevel_0
	cmp eax,ebp
	jle Block34

 Block33:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebp
	push 0x217C05C
	push esi
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x217E775
	mov esi,eax
	call CSkillInfo::GetSkill
	push esi
	push eax
	mov ecx,edi
	call CUserLocal::SetPassiveSkillData

 Block34:
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp esi,ebp
	je Block38

 Block35:
	mov eax,dword ptr [esi+0x339C]
	add esi,0x2148
	push eax
	lea ecx,[esi+0x124C]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp eax,1
	jle Block37

 Block36:
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x1270]
	add dword ptr [eax],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x1274]
	add dword ptr [eax+4],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x1278]
	add dword ptr [eax+8],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x127C]
	add dword ptr [eax+0xC],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x1284]
	add dword ptr [eax+0x14],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x1288]
	add dword ptr [eax+0x18],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x128C]
	add dword ptr [eax+0x1C],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x1290]
	add dword ptr [eax+0x20],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x1294]
	add dword ptr [eax+0x24],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x1298]
	add dword ptr [eax+0x28],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x129C]
	add dword ptr [eax+0x2C],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x12A0]
	add dword ptr [eax+0x30],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x12A4]
	add dword ptr [eax+0x34],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x12A8]
	add dword ptr [eax+0x38],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x12AC]
	add dword ptr [eax+0x3C],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x12B0]
	add dword ptr [eax+0x40],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x12B4]
	add dword ptr [eax+0x44],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x12B8]
	add dword ptr [eax+0x48],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x12BC]
	add dword ptr [eax+0x4C],edx
	mov eax,dword ptr [edi+0x4844]
	mov ecx,dword ptr [esi+0x12C0]
	add dword ptr [eax+0x50],ecx
	mov eax,dword ptr [edi+0x4844]
	mov edx,dword ptr [esi+0x12C4]
	add dword ptr [eax+0x54],edx

 Block37:
	xor ebp,ebp

 Block38:
	mov ecx,edi
	call CUserLocal::RevisePassiveSkillData
	cmp dword ptr [esp+0x54],ebp
	jne Block40

 Block39:
	push 0xD9
	lea ecx,[esp+0x38]
	call COutPacket::_ctor_1
	mov byte ptr [esp+0x4C],5
	call get_update_time
	push eax
	lea ecx,[esp+0x38]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x34]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0x38]
	mov byte ptr [esp+0x4C],2
	call ZArray<unsigned char>::RemoveAll

 Block40:
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	call ZRef<CharacterData>::~ZRef<CharacterData>

 Block41:
	mov ecx,dword ptr [esp+0x44]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x3C
	ret 4
}
}
// CUserLocal::HandleCtrlKeyDown
_SUB_EXCEPTION_HANDLER(5326B0)
__SUB_CLASS_THIS0(005326B0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5326B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x42C
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x438]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [eax+0x20B8],0
	mov edi,eax
	jne Block49

 Block1:
	mov eax,dword ptr [eax+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block49

 Block2:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0xC8
	jl Block49

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block49

 Block4:
	cmp dword ptr [esi+0x3AD4],eax
	jne Block49

 Block5:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	je Block14

 Block6:
	mov eax,dword ptr [esi+0x3AE4]
	sub eax,0x217C05C
	je Block9

 Block7:
	sub eax,0x270F
	je Block11

 Block8:
	sub eax,0xA
	jne Block49

 Block9:
	cmp dword ptr [esi+0x3AF4],0
	jne Block49

 Block10:
	mov dword ptr [esi+0x3AF0],1
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block11:
	cmp dword ptr [esi+0x3AFC],0
	jne Block49

 Block12:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x14]
	push edx
	mov dword ptr [esp+0x10],0
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x14]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	push 0x217E76B
	push edi
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0xC]
	test ecx,ecx
	je Block49

 Block13:
	push eax
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[esp+0x20]
	call SKILLLEVELDATA::_ctor_0
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x440],0
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	add dword ptr [esi+0x3AF0],eax
	lea ecx,[esp+0x1C]
	mov dword ptr [esi+0x3AFC],1
	mov dword ptr [esp+0x440],0xFFFFFFFF
	call SKILLLEVELDATA::~SKILLLEVELDATA
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block14:
	cmp dword ptr [esi+0x3AE4],0x217E76D
	jne Block16

 Block15:
	cmp dword ptr [esi+0x3AF4],0
	je Block10

 Block16:
	mov ecx,esi
	call CUserLocal::CheckRidingVehicleExceptMechanic
	test eax,eax
	jne Block49

 Block17:
	lea edi,[esi+0x88]
	mov ecx,edi
	call CAvatar::IsMonsterMorphed
	test eax,eax
	jne Block48

 Block18:
	cmp dword ptr [esi+0x5E4],eax
	jne Block48

 Block19:
	mov ecx,edi
	call CAvatar::IsAttackableMorphed
	test eax,eax
	je Block21

 Block20:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	push 0
	push 0
	mov ecx,esi
	call eax
	push eax
	push 0x42A
	call get_novice_skill_as_race
	add esp,8
	push eax
	mov ecx,esi
	call CUserLocal::DoActiveSkill
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block21:
	mov ecx,edi
	call CAvatar::IsHideMorphed
	mov ecx,esi
	test eax,eax
	je Block23

 Block22:
	push 0x4DD5CF
	call CUserLocal::SendSkillCancelRequest
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block23:
	call CUserLocal::IsDashing
	test eax,eax
	je Block26

 Block24:
	mov ecx,esi
	call CUser::GetDashingSkill
	push eax
	mov ecx,esi
	call CUserLocal::SendSkillCancelRequest
	mov ecx,esi
	call CUserLocal::HasOnDashSkill
	test eax,eax
	je Block26

 Block25:
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::GetOnDashSkill
	push eax
	mov ecx,esi
	call CUserLocal::DoActiveSkill
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block26:
	push 0
	mov ecx,edi
	call CAvatar::GetCurrentAction
	cmp eax,0xBC
	jne Block32

 Block27:
	mov ecx,esi
	call CUser::IsOnFoothold
	test eax,eax
	je Block32

 Block28:
	mov ecx,edi
	call CAvatar::GetActionInfo
	cmp dword ptr [eax],1
	jle Block32

 Block29:
	push 0x41EEE9
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	cmp eax,0x13
	jle Block32

 Block30:
	push 0x4215FD
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	cmp eax,9
	jle Block32

 Block31:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x44]
	mov ecx,esi
	call eax
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x14]
	push 0
	push 0x64
	push 6
	mov ecx,edi
	call eax
	mov dword ptr [esi+0x3B48],0
	call get_update_time
	push 0
	push 0
	push 0x41EEE9
	mov ecx,esi
	mov dword ptr [esi+0x3B60],eax
	call CUserLocal::DoActiveSkill

 Block32:
	call get_field
	mov edx,dword ptr [eax]
	mov ecx,eax
	mov eax,dword ptr [edx+0x18]
	call eax
	test eax,eax
	jne Block49

 Block33:
	mov ecx,dword ptr [TSingleton<CReactorPool>::ms_pInstance]
	call CReactorPool::FindHitReactor
	test eax,eax
	jne Block49

 Block34:
	mov ecx,esi
	call CUser::IsDarkSight
	test eax,eax
	je Block38

 Block35:
	push 0xD72625
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	test eax,eax
	jg Block38

 Block36:
	push 0x421211
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	test eax,eax
	jg Block38

 Block37:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	call is_cygnus_job
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	add esp,4
	push 0
	push 0x7FFFFFFF
	mov edi,eax
	neg edi
	push 0
	sbb edi,edi
	push 6
	and edi,0x989680
	push 1
	add edi,0x3D0CEB
	push edi
	call CSkillInfo::GetSkill
	push eax
	mov ecx,esi
	call CUser::ShowSkillEffect
	push edi
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2A
	push edi
	call play_skill_sound
	add esp,0xC
	push edi
	mov ecx,esi
	call CUserLocal::SendSkillCancelRequest
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block38:
	mov ecx,esi
	call CUserLocal::IsWeaponDisabled
	test eax,eax
	jne Block49

 Block39:
	mov eax,dword ptr [esi+0x58C]
	push eax
	call is_shooting_weapon
	add esp,4
	test eax,eax
	je Block47

 Block40:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	jne Block44

 Block41:
	push eax
	push eax
	push eax
	push eax
	push eax
	mov ecx,esi
	call CUserLocal::GetProperBulletPosition
	test eax,eax
	jne Block44

 Block42:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nSoulArrow_
	test eax,eax
	jne Block44

 Block43:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nSpiritJavelin_
	test eax,eax
	je Block47

 Block44:
	mov ecx,dword ptr [esi+0x640]
	and ecx,0xFFFFFFFE
	cmp ecx,0xA
	je Block47

 Block45:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	lea edx,[esp+0x34]
	push edx
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::TryDoingMeleeAttack
	test eax,eax
	jne Block49

 Block46:
	push eax
	push eax
	push eax
	mov eax,dword ptr [esp+0x1C]
	push eax
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::TryDoingShootAttack
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block47:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::TryDoingMeleeAttack
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret

 Block48:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::AddChatMorphedMsg

 Block49:
	mov ecx,dword ptr [esp+0x438]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x438
	ret
}
}
// CUserLocal::Init
_SUB_EXCEPTION_HANDLER(519360)
__SUB_CLASS_THIS0(00519360, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_519360
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x260]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x24]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x30],ebp
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	xor ebx,ebx
	mov dword ptr [esp+0x18],edi
	cmp eax,ebx
	je Block5

 Block1:
	lea ebx,[eax-0x10]
	lea eax,[ebx+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	lea eax,[ebx+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebx,ebx
	je Block4

 Block3:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebx
	call eax

 Block4:
	mov dword ptr [esp+0x28],0
	xor ebx,ebx

 Block5:
	lea ecx,[edi+4]
	push ecx
	lea ecx,[esi+0x19EC]
	call ZXString<char>::AssignCStr
	mov dword ptr [esi+0x2E18],ebx
	mov dword ptr [esi+0x3AAC],ebx
	mov dword ptr [esi+0x3AB0],ebx
	mov al,byte ptr [edi+0xED]
	movzx ecx,al
	and al,0x7F
	mov byte ptr [edi+0xED],al
	mov ebx,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	mov edx,dword ptr [ebx+4]
	shr ecx,7
	test edx,edx
	jne Block7

 Block6:
	mov dword ptr [esp+0x14],edx
	jmp Block8

 Block7:
	mov edx,dword ptr [edx-4]
	mov dword ptr [esp+0x14],edx

 Block8:
	test ecx,ecx
	jne Block11

 Block9:
	movzx ecx,al
	cmp ecx,dword ptr [esp+0x14]
	jge Block11

 Block10:
	mov eax,dword ptr [ebx+4]
	mov eax,dword ptr [eax+ecx*8+4]
	jmp Block20

 Block11:
	cmp al,6
	jae Block19

 Block12:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x30]
	movzx eax,al
	push edx
	push eax
	call CWvsContext::GetPartyTownPortal
	mov eax,dword ptr [esp+0x34]
	cmp eax,0x3B9AC9FF
	je Block19

 Block13:
	mov ecx,dword ptr [esp+0x30]
	cmp ecx,0x3B9AC9FF
	je Block19

 Block14:
	test eax,eax
	je Block19

 Block15:
	test ecx,ecx
	je Block19

 Block16:
	call get_field
	cmp dword ptr [eax+0x18C],0
	je Block18

 Block17:
	movzx ecx,byte ptr [edi+0xED]
	push ecx
	lea edx,[esp+0x20]
	push edx
	mov ecx,eax
	call CField::GetTownPortalPos
	mov ebx,dword ptr [eax]
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x20],eax
	jmp Block22

 Block18:
	mov ebx,dword ptr [esp+0x3C]
	mov ecx,dword ptr [esp+0x40]
	jmp Block21

 Block19:
	call _rand
	cdq
	idiv dword ptr [esp+0x14]
	mov eax,dword ptr [ebx+4]
	mov eax,dword ptr [eax+edx*8+4]

 Block20:
	mov ebx,dword ptr [eax+0xC]
	mov ecx,dword ptr [eax+0x10]

 Block21:
	mov dword ptr [esp+0x20],ecx

 Block22:
	cmp dword ptr [ebp+0x1C],0
	je Block24

 Block23:
	mov edx,dword ptr [ebp+0x18]
	mov ebx,dword ptr [ebp+0x14]
	mov dword ptr [esp+0x20],edx
	mov dword ptr [ebp+0x1C],0

 Block24:
	call CVecCtrlUser::CreateInstance
	mov edi,eax
	lea ecx,[esi+0x19E4]
	push edi
	call __QueryVecCtrlNpc
	test eax,eax
	jge Block27

 Block25:
	cmp eax,0x80004002
	je Block27

 Block26:
	push eax
	call _com_issue_error

 Block27:
	lea eax,[esi+4]
	push eax
	mov ecx,edi
	call CVecCtrl::Init
	mov ecx,dword ptr [esi+0x640]
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [edi]
	mov eax,dword ptr [eax+4]
	push 0
	push ecx
	push 0
	push 0
	add edx,0xFFFFFFF6
	push edx
	push ebx
	push 1
	mov ecx,edi
	call eax
	mov eax,dword ptr [esi+0x19E4]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x18],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block29

 Block28:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block29:
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	call CAnimationDisplayer::SetCenterOrigin
	mov ecx,esi
	call CUserLocal::SetShoeAttr
	mov eax,dword ptr [esp+0x18]
	push eax
	lea ecx,[esp+0x5B]
	call AvatarLook::_ctor_0
	mov edi,eax
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[eax+0x2038]
	mov dword ptr [esp+0x268],0
	mov ebx,eax
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block32

 Block30:
	cmp dword ptr [ebx+0x209C],0
	jne Block32

 Block31:
	xor eax,eax
	jmp Block33

 Block32:
	mov eax,1

 Block33:
	push eax
	push edi
	mov ecx,esi
	call CUser::Init
	mov ecx,dword ptr [ebp+0x23FC]
	mov edi,dword ptr [esi+0x5E8]
	push ecx
	lea edx,[ebp+0x23F4]
	push edx
	mov dword ptr [esp+0x270],0xFFFFFFFF
	lea ebx,[esi+0x88]
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,ebx
	call CAvatar::SetMechanicMode
	mov eax,dword ptr [ebp+0x2714]
	push 1
	push eax
	lea ecx,[ebp+0x270C]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,esi
	call CUser::SetGhostState
	mov eax,dword ptr [esi+0x5E8]
	push eax
	push edi
	mov ecx,esi
	call CUserLocal::ApplyMechanicMode
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edx,dword ptr [eax+0x4080]
	mov dword ptr [esi+0x3A04],edx
	mov ecx,dword ptr [eax+0x4084]
	mov dword ptr [esi+0x3A08],ecx
	mov edx,dword ptr [eax+0x4088]
	mov dword ptr [esi+0x3A0C],edx
	mov ebp,dword ptr [ebp+0x351C]
	lea edi,[ebp+0x18]
	mov ecx,edi
	call ZFatalSection::Lock
	test edi,edi
	je Block36

 Block34:
	add dword ptr [edi+4],0xFFFFFFFF
	jne Block36

 Block35:
	mov dword ptr [edi],0

 Block36:
	mov eax,dword ptr [ebp+0xC]
	push 0
	push eax
	mov ecx,ebx
	call CAvatar::SetRidingVehicle
	mov ebx,dword ptr [esp+0x2C]
	mov ecx,dword ptr [ebx+0x26F0]
	push 1
	push ecx
	lea edx,[ebx+0x26E8]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,esi
	call CUser::SetMorphed
	mov ecx,esi
	call CUserLocal::RedrawGuildNameTag
	mov edi,dword ptr [esp+0x18]
	push edi
	mov ecx,esi
	call CUserLocal::SetCarryItemEffectForLocal
	mov ecx,esi
	call CUserLocal::SetPairCharacterID
	mov ecx,esi
	call CUserLocal::SetMarriagePairCharacterID
	mov ecx,esi
	call CUserLocal::SetFriendPairCharacterID
	mov ecx,esi
	call CUserLocal::SetNewYearCardPairCharacterID
	mov ecx,esi
	call CUserLocal::SetMarriagePairCharacterID
	xor ebp,ebp
	cmp dword ptr [ebx+8],ebp
	jne Block38

 Block37:
	mov eax,dword ptr [ebx+0x3600]
	push eax
	push edi
	mov ecx,esi
	call CUserLocal::SetActiveEffectItemForLocal
	jmp Block39

 Block38:
	mov ecx,ebx
	call CWvsContext::RestoreItemMsg
	mov dword ptr [ebx+8],ebp

 Block39:
	cmp dword ptr [ebx+0x3FCC],ebp
	je Block41

 Block40:
	mov ecx,esi
	call CUser::LoadDarkForceEffect

 Block41:
	mov eax,dword ptr [ebx+0x3868]
	cmp eax,ebp
	je Block60

 Block42:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	cmp edi,ebp
	je Block44

 Block43:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block45

 Block44:
	xor edi,edi

 Block45:
	cmp dword ptr [edi+0x19C],ebp
	je Block50

 Block46:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esp+0x18]
	push 0x59F
	push ecx
	mov dword ptr [eax+0x3868],ebp
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x268],1
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebp
	je Block48

 Block47:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push ebp
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],ebp
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block48:
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x268],0xFFFFFFFF
	cmp eax,ebp
	je Block60

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block60

 Block50:
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebx
	call CWvsContext::GetADBoard
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x26C],2
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x268],4
	cmp eax,ebp
	je Block52

 Block51:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block52:
	mov eax,dword ptr [esi+0x1944]
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	mov dword ptr [ecx],eax
	cmp eax,ebp
	je Block54

 Block53:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block54:
	mov eax,dword ptr [esi+0x1960]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [ecx],eax
	cmp eax,ebp
	je Block56

 Block55:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block56:
	mov edi,dword ptr [esp+0x20]
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	mov dword ptr [eax],edi
	cmp edi,ebp
	je Block58

 Block57:
	lea eax,[edi+8]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block58:
	lea ecx,[esi+0x14]
	call CChatBalloon::MakeADBoardBalloon
	mov dword ptr [esp+0x268],0xFFFFFFFF
	cmp edi,ebp
	je Block60

 Block59:
	mov ecx,edi
	call _xbstr_t::Data_t::Release

 Block60:
	mov eax,dword ptr [CUserLocal::ms_anTutors]
	cmp eax,ebp
	je Block76

 Block61:
	cmp dword ptr [eax-4],ebp
	je Block76

 Block62:
	xor edi,edi
	mov dword ptr [esp+0x14],edi
	nop

 Block63:
	cmp eax,ebp
	je Block76

 Block64:
	cmp edi,dword ptr [eax-4]
	jae Block76

 Block65:
	push 0x208
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x1C],eax
	mov dword ptr [esp+0x268],5
	cmp eax,ebp
	je Block67

 Block66:
	mov edx,dword ptr [CUserLocal::ms_anTutors]
	mov edx,dword ptr [edx+edi*4]
	mov ecx,dword ptr [esi+0x19E8]
	push edx
	push ecx
	mov ecx,eax
	call CTutor::_ctor_0
	jmp Block68

 Block67:
	xor eax,eax

 Block68:
	mov dword ptr [esp+0x268],0xFFFFFFFF
	cmp eax,ebp
	je Block75

 Block69:
	add eax,8
	cmp eax,ebp
	je Block75

 Block70:
	lea edi,[eax-8]
	cmp edi,ebp
	je Block72

 Block71:
	lea eax,[edi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block72:
	mov eax,dword ptr [esi+0x4770]
	mov dword ptr [esi+0x4770],edi
	mov dword ptr [esp+0x28],eax
	cmp eax,ebp
	je Block74

 Block73:
	push ebp
	lea ecx,[esp+0x28]
	call ZRef<CTutor>::_ReleaseRaw
	mov dword ptr [esp+0x28],ebp

 Block74:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	mov edi,dword ptr [esi+0x4770]
	lea ebp,[esi+4]
	lea eax,[esp+0x4C]
	push eax
	mov ecx,ebp
	call edx
	push 0
	push 0
	push 0
	push 1
	push 0
	mov ebx,eax
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x10]
	push 2
	lea ecx,[esp+0x5C]
	push ecx
	mov ecx,ebp
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebx]
	push eax
	push ecx
	mov ecx,edi
	call CSummoned::Init_0
	inc dword ptr [esp+0x14]
	mov eax,dword ptr [CUserLocal::ms_anTutors]
	mov ebx,dword ptr [esp+0x2C]
	mov edi,dword ptr [esp+0x14]
	xor ebp,ebp
	jmp Block63

 Block75:
	xor edi,edi
	jmp Block72

 Block76:
	mov dword ptr [ebx+0x408C],ebp
	mov ecx,dword ptr [esp+0x260]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::HandleLButtonClk
_SUB_EXCEPTION_HANDLER(533920)
__SUB_CLASS_THIS0(00533920, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_533920
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x34
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x40]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 1
	lea eax,[esp+0x1C]
	push eax
	call CWndMan::GetCursorPos
	mov ecx,dword ptr [esp+0x1C]
	mov edx,dword ptr [esp+0x18]
	push ecx
	push edx
	lea ecx,[edi+0x14]
	call CChatBalloon::ADBoardMouseUp
	test eax,eax
	je Block6

 Block1:
	push 0x37
	lea ecx,[esp+0x24]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x20]
	push eax
	mov dword ptr [esp+0x4C],0
	call CClientSocket::SendPacket
	lea ecx,[esp+0xC]
	push 0x59E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov byte ptr [esp+0x48],1
	je Block3

 Block2:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block3:
	mov eax,dword ptr [esp+0xC]
	mov byte ptr [esp+0x48],0
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x48],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x40
	ret

 Block6:
	mov ecx,dword ptr [TSingleton<CNpcPool>::ms_pInstance]
	lea edx,[esp+0x18]
	push edx
	call CNpcPool::FindNpc_0
	test eax,eax
	je Block13

 Block7:
	sub esp,8
	add eax,8
	mov dword ptr [esp+0x1C],esp
	mov ecx,esp
	je Block9

 Block8:
	add eax,0xFFFFFFF8
	jmp Block10

 Block9:
	xor eax,eax

 Block10:
	mov dword ptr [ecx+4],eax
	test eax,eax
	je Block12

 Block11:
	add eax,0xC
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block12:
	mov ecx,edi
	call CUserLocal::TalkToNpc
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x40
	ret

 Block13:
	lea eax,[esp+0x30]
	push eax
	mov ecx,edi
	call CUserLocal::GetDCRect
	mov ecx,dword ptr [esp+0x1C]
	mov edx,dword ptr [esp+0x18]
	push ecx
	push edx
	lea eax,[esp+0x38]
	push eax
	call PtInRect
	test eax,eax
	je Block18

 Block14:
	cmp dword ptr [edi+0x4690],0
	je Block16

 Block15:
	mov ecx,edi
	call CUserLocal::OnKeyDownSkillEnd

 Block16:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [ecx+0x3850],0
	jne Block27

 Block17:
	mov ecx,edi
	call CUserLocal::ShowAutoStartQuestList
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x40
	ret

 Block18:
	mov ecx,dword ptr [edi+0x2EAC]
	test ecx,ecx
	je Block27

 Block19:
	mov edx,dword ptr [esp+0x1C]
	mov eax,dword ptr [esp+0x18]
	push edx
	push eax
	call CDragon::NeedToTalk
	test eax,eax
	je Block27

 Block20:
	push 0xF7508
	push 0xF7508
	call CNpcTemplate::GetNpcTemplate
	add esp,4
	push eax
	call CreateNpc
	add esp,8
	test eax,eax
	je Block28

 Block21:
	add eax,8
	je Block28

 Block22:
	lea esi,[eax-8]
	mov dword ptr [esp+0x10],esi
	test esi,esi
	je Block24

 Block23:
	lea ecx,[esi+0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block24:
	mov dword ptr [esp+0x48],2
	test esi,esi
	je Block26

 Block25:
	push 0
	mov ecx,esi
	call CNpc::SetQuestList
	sub esp,8
	lea edx,[esp+0x14]
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push edx
	call ZRef<CNpc>::_ctor_copy
	mov ecx,edi
	call CUserLocal::TalkToNpc

 Block26:
	lea ecx,[esp+0xC]
	mov dword ptr [esp+0x48],0xFFFFFFFF
	call ZRef<CNpc>::~ZRef<CNpc>

 Block27:
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x40
	ret

 Block28:
	xor esi,esi
	mov dword ptr [esp+0x10],esi
	jmp Block24
}
}
// CUserLocal::OnPassMateName
_SUB_EXCEPTION_HANDLER(518260)
__SUB_CLASS_THIS(00518260, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_518260
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x20]
	mov ecx,esi
	call CInPacket::Decode2
	movzx edi,ax
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x10],esp
	push edx
	mov dword ptr [esp+0x20],0
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push edi
	mov ecx,esi
	call CWvsContext::SetQuestMateName
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x10
	ret 4
}
}
// zswap_CMob__
__SUB(00504480, __cdecl, 82361,  void, CMob*&, CMob*&) {
__asm {

 Block0:
	mov edx,dword ptr [esp+8]
	mov eax,dword ptr [esp+4]
	mov ecx,dword ptr [eax]
	push esi
	mov esi,dword ptr [edx]
	mov dword ptr [eax],esi
	mov dword ptr [edx],ecx
	pop esi
	ret
}
}
// CUserLocal::OnCollisionCustomImpact
_SUB_EXCEPTION_HANDLER(50B750)
__SUB_CLASS_THIS(0050B750, __thiscall, 41390,  CUserLocal, void, double, double) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50B750
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,dword ptr [ebx+0x19E4]
	test eax,eax
	je Block2

 Block1:
	lea ecx,[eax-0xC]
	jmp Block3

 Block2:
	xor ecx,ecx

 Block3:
	cmp dword ptr [ecx+0x1A0],0
	je Block12

 Block4:
	test eax,eax
	je Block6

 Block5:
	lea esi,[eax-0xC]
	jmp Block7

 Block6:
	xor esi,esi

 Block7:
	push 0x19
	mov ecx,esi
	call CVecCtrl::SetMovePathAttribute
	fld qword ptr [esp+0x3C]
	sub esp,0x10
	fstp qword ptr [esp+8]
	mov ecx,esi
	fld qword ptr [esp+0x44]
	fstp qword ptr [esp]
	call CVecCtrl::SetImpactNext_0
	fldz
	fcomp qword ptr [esp+0x34]
	fnstsw ax
	test ah,0x44
	jnp Block9

 Block8:
	mov edi,1
	jmp Block10

 Block9:
	xor edi,edi

 Block10:
	push 0xC00614A4
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	mov dword ptr [eax],0
	mov eax,dword ptr [ebx+4]
	mov edx,dword ptr [eax+0x10]
	lea esi,[ebx+4]
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x38],0
	call edx
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x10]
	push eax
	lea eax,[esp+0x28]
	push eax
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax]
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x24],esp
	mov dword ptr [eax],0
	lea ecx,[esp+0x48]
	push 0xAD7
	push ecx
	mov byte ptr [esp+0x48],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x40],2
	push edi
	mov byte ptr [esp+0x44],3
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	call CAnimationDisplayer::Effect_General
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	test eax,eax
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block12:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x20
	ret 0x10
}
}
// CUserLocal::CUserLocal
_SUB_EXCEPTION_HANDLER(51A9A0)
__SUB_CLASS_THIS(0051A9A0, __thiscall, 41319,  CUserLocal, void, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_51A9A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x18],esi
	mov eax,dword ptr [esp+0x2C]
	push eax
	call CUser::_ctor_0
	xor edi,edi
	lea eax,[esi+0x3AC0]
	mov dword ptr [esp+0x24],edi
	cmp eax,edi
	je Block2

 Block1:
	lea ecx,[eax-0x3AC0]
	mov dword ptr [TSingleton<CUserLocal>::ms_pInstance],ecx
	jmp Block3

 Block2:
	mov dword ptr [TSingleton<CUserLocal>::ms_pInstance],edi

 Block3:
	int 3// TODO: 	mov dword ptr [esi],offset CUserLocal::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUserLocal::`vftable'{for `IVecCtrlOwner'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUserLocal::`vftable'{for `ZRefCounted'}
	int 3// TODO: 	mov dword ptr [esi+0x88],offset CUserLocal::`vftable'
	mov dword ptr [eax],edi
	mov dword ptr [esi+0x3AC4],edi
	mov dword ptr [esi+0x3AC8],edi
	mov dword ptr [esi+0x3AD0],edi
	mov dword ptr [esi+0x3B3C],edi
	int 3// TODO: 	mov dword ptr [esi+0x3B4C],offset ZList<CUserLocal::RUSH::RUSHELEM>::`vftable'
	mov dword ptr [esi+0x3B54],edi
	mov dword ptr [esi+0x3B58],edi
	mov dword ptr [esi+0x3B5C],edi
	mov dword ptr [esi+0x3B64],edi
	push 0x90
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x28],2
	mov dword ptr [esi+0x3B70],edi
	mov dword ptr [esi+0x3B74],edi
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x2C],eax
	mov byte ptr [esp+0x24],3
	cmp eax,edi
	je Block5

 Block4:
	push edi
	mov ecx,eax
	call CAttrShoe::_ctor_0
	jmp Block6

 Block5:
	xor eax,eax

 Block6:
	mov dword ptr [esi+0x3B7C],eax
	cmp eax,edi
	je Block8

 Block7:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block8:
	mov dword ptr [esi+0x3B80],edi
	mov dword ptr [esi+0x3B84],edi
	mov dword ptr [esi+0x3B88],edi
	mov dword ptr [esi+0x3BA4],edi
	mov dword ptr [esi+0x3BA8],edi
	mov dword ptr [esi+0x3BAC],edi
	mov dword ptr [esi+0x3BB0],0x64
	mov dword ptr [esi+0x3BB4],edi
	mov dword ptr [esi+0x3BB8],edi
	mov dword ptr [esi+0x3BBC],edi
	mov dword ptr [esi+0x3BC0],0x14
	mov dword ptr [esi+0x3BC8],edi
	lea ecx,[esi+0x3BD8]
	mov byte ptr [esp+0x24],5
	call CUIToolTip::_ctor_default
	lea ecx,[esi+0x4624]
	mov ebx,0x1F
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, CUIToolTip, long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],ebx
	mov dword ptr [ecx+0xC],edi
	call ZMap<long, CUIToolTip, long>::_CalcAutoGrow
	mov dword ptr [esi+0x4690],edi
	mov dword ptr [esi+0x4694],edi
	mov dword ptr [esi+0x4698],edi
	lea ebp,[esi+0x46C4]
	mov dword ptr [esi+0x46B8],edi
	mov dword ptr [esi+0x46BC],edi
	push 0x64
	mov ecx,ebp
	int 3// TODO: 	mov dword ptr [ebp],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [ebp+4],edi
	mov dword ptr [ebp+8],ebx
	mov dword ptr [ebp+0xC],edi
	call ZMap<long, long, long>::_CalcAutoGrow
	mov dword ptr [esi+0x46DC],edi
	mov dword ptr [esi+0x46E0],edi
	mov dword ptr [esi+0x46E4],edi
	mov dword ptr [esi+0x46E8],edi
	mov dword ptr [esi+0x46EC],edi
	mov dword ptr [esi+0x46F0],edi
	int 3// TODO: 	mov eax,offset ZList<CUserLocal::CBalloonMsg>::`vftable'
	mov dword ptr [esi+0x46F4],eax
	mov dword ptr [esi+0x46FC],edi
	mov dword ptr [esi+0x4700],edi
	mov dword ptr [esi+0x4704],edi
	mov dword ptr [esi+0x4708],eax
	mov dword ptr [esi+0x4710],edi
	mov dword ptr [esi+0x4714],edi
	mov dword ptr [esi+0x4718],edi
	lea ecx,[esi+0x4728]
	mov dword ptr [esi+0x4724],0xFFFFFFFF
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],ebx
	mov dword ptr [ecx+0xC],edi
	call ZMap<long, long, long>::_CalcAutoGrow
	lea ecx,[esi+0x4740]
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],ebx
	mov dword ptr [ecx+0xC],edi
	call ZMap<long, long, long>::_CalcAutoGrow
	int 3// TODO: 	mov dword ptr [esi+0x4758],offset ZList<ZRef<CItemInfo::ItemSkill>>::`vftable'
	mov dword ptr [esi+0x4760],edi
	mov dword ptr [esi+0x4764],edi
	mov dword ptr [esi+0x4768],edi
	mov dword ptr [esi+0x4770],edi
	mov dword ptr [esi+0x4774],edi
	mov dword ptr [esi+0x4778],edi
	int 3// TODO: 	mov dword ptr [esi+0x477C],offset ZList<CDualKeyChecker::KeyMsg>::`vftable'
	mov dword ptr [esi+0x4784],edi
	mov dword ptr [esi+0x4788],edi
	mov dword ptr [esi+0x478C],edi
	mov dword ptr [esi+0x4790],edi
	mov dword ptr [esi+0x4794],edi
	mov dword ptr [esi+0x4798],edi
	mov dword ptr [esi+0x479C],edi
	mov dword ptr [esi+0x47A0],edi
	mov dword ptr [esi+0x47A4],edi
	push offset _x_com_ptr<IWzGr2DLayer>::~_x_com_ptr<IWzGr2DLayer>
	push offset _x_com_ptr<IWzGr2DLayer>::_ctor_default
	push 5
	push 4
	lea edx,[esi+0x47A8]
	push edx
	mov byte ptr [esp+0x38],0x14
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0x47BC],edi
	mov dword ptr [esi+0x47C0],edi
	lea ecx,[esi+0x47CC]
	mov dword ptr [esi+0x47C4],edi
	mov dword ptr [esi+0x47C8],0xFFFFFFFF
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],ebx
	mov dword ptr [ecx+0xC],edi
	call ZMap<long, long, long>::_CalcAutoGrow
	lea ebx,[esi+0x4840]
	mov dword ptr [esi+0x47E4],edi
	mov dword ptr [esi+0x47E8],edi
	mov dword ptr [esi+0x47F0],edi
	mov dword ptr [esi+0x47F8],0xFFFFFFFF
	mov dword ptr [esi+0x4800],edi
	mov dword ptr [esi+0x4808],edi
	mov dword ptr [esi+0x480C],edi
	mov dword ptr [ebx+4],edi
	lea ecx,[esi+0x4864]
	mov dword ptr [esi+0x4848],edi
	mov dword ptr [esi+0x484C],edi
	mov dword ptr [esi+0x4850],edi
	mov dword ptr [esi+0x4854],edi
	mov dword ptr [esi+0x4858],edi
	mov dword ptr [esi+0x485C],edi
	mov dword ptr [esi+0x4860],edi
	push 0x64
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [ecx+4],edi
	mov dword ptr [ecx+8],0x1F
	mov dword ptr [ecx+0xC],edi
	call ZMap<long, long, long>::_CalcAutoGrow
	push 1
	mov ecx,esi
	mov byte ptr [esp+0x28],0x1A
	call CUserLocal::GetUpFromPortableChair
	lea edx,[esi+0x3B8C]
	xor ecx,ecx
	call _ZtlSecureTearHelper<long>::call
	mov dword ptr [esi+0x3B94],eax
	xor eax,eax
	mov dword ptr [esi+0x3B00],eax
	mov dword ptr [esi+0x3B04],eax
	mov dword ptr [esi+0x3B08],eax
	mov dword ptr [esi+0x3B0C],eax
	mov dword ptr [esi+0x3B10],eax
	mov dword ptr [esi+0x3B14],eax
	mov dword ptr [esi+0x3B18],eax
	mov dword ptr [esi+0x3B1C],eax
	mov dword ptr [esi+0x3B20],eax
	mov dword ptr [esi+0x3B24],eax
	mov dword ptr [esi+0x3B28],eax
	mov dword ptr [esi+0x3B2C],eax
	mov dword ptr [esi+0x3B30],eax
	mov dword ptr [esi+0x3B34],eax
	mov dword ptr [esi+0x3B38],eax
	mov dword ptr [esi+0x3B3C],eax
	mov dword ptr [esi+0x3B40],eax
	mov dword ptr [esi+0x3AD4],eax
	mov dword ptr [esi+0x3AD8],eax
	mov dword ptr [esi+0x3ADC],eax
	mov dword ptr [esi+0x3AE0],eax
	mov dword ptr [esi+0x3AE4],eax
	mov dword ptr [esi+0x3AE8],eax
	mov dword ptr [esi+0x3AEC],eax
	mov dword ptr [esi+0x3AF0],eax
	mov dword ptr [esi+0x3AF4],eax
	mov dword ptr [esi+0x3AF8],eax
	mov dword ptr [esi+0x3AFC],eax
	mov dword ptr [esi+0x3B44],eax
	mov dword ptr [esi+0x3B48],eax
	mov dword ptr [esi+0x3B4C],eax
	mov dword ptr [esi+0x3B50],eax
	mov dword ptr [esi+0x3B54],eax
	mov dword ptr [esi+0x3B58],eax
	mov dword ptr [esi+0x3B5C],eax
	mov dword ptr [esi+0x3B60],eax
	mov dword ptr [esi+0x3B64],eax
	mov dword ptr [esi+0x3B68],edi
	mov ecx,ebx
	mov dword ptr [esi+0x3B6C],edi
	call ZRef<PassiveSkillData>::_Alloc
	mov dword ptr [esi+0x4620],0xFFFFFFFF
	mov dword ptr [esi+0x471C],edi
	mov dword ptr [esi+0x4720],edi
	call timeGetTime
	mov dword ptr [esi+0x4664],eax
	mov dword ptr [esi+0x4660],eax
	call get_update_time
	mov dword ptr [esi+0x467C],eax
	call get_update_time
	mov dword ptr [esi+0x46A0],eax
	call get_update_time
	mov dword ptr [esi+0x46A4],eax
	call get_update_time
	mov dword ptr [esi+0x46A8],eax
	call get_update_time
	mov dword ptr [esi+0x46AC],eax
	call get_update_time
	mov dword ptr [esi+0x46B0],eax
	mov dword ptr [esi+0x46B4],edi
	call get_update_time
	mov dword ptr [esi+0x4668],eax
	call get_update_time
	mov dword ptr [esi+0x466C],eax
	call get_update_time
	mov dword ptr [esi+0x4670],eax
	call get_update_time
	mov dword ptr [esi+0x4674],eax
	call get_update_time
	lea edx,[esi+0x4654]
	xor ecx,ecx
	mov dword ptr [esi+0x4678],eax
	call _ZtlSecureTearHelper<unsigned short>::call
	mov dword ptr [esi+0x4658],eax
	mov dword ptr [esi+0x46C0],edi
	call get_update_time
	mov dword ptr [esi+0x47F4],eax
	call get_update_time
	mov dword ptr [esi+0x47EC],eax
	call get_update_time
	mov dword ptr [esi+0x47FC],eax
	call get_update_time
	mov dword ptr [esi+0x4804],eax
	call get_update_time
	mov dword ptr [esi+0x4810],eax
	mov ebx,0x80000000
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x3EE1B0
	call ZMap<long, long, long>::Insert
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x4DF8F1
	call ZMap<long, long, long>::Insert
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0xE66864
	call ZMap<long, long, long>::Insert
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x4F5C6A
	call ZMap<long, long, long>::Insert
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x41EEEA
	call ZMap<long, long, long>::Insert
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x4E23ED
	call ZMap<long, long, long>::Insert
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x4F5C6E
	call ZMap<long, long, long>::Insert
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x4F837C
	call ZMap<long, long, long>::Insert
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x4F837D
	call ZMap<long, long, long>::Insert
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0xD7511E
	call ZMap<long, long, long>::Insert
	mov dword ptr [esp+0x2C],ebx
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x1C],0x1407329
	call ZMap<long, long, long>::Insert
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x1C9C7AC
	call ZMap<long, long, long>::Insert
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x3D0CEB
	call ZMap<long, long, long>::Insert
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x423D0B
	call ZMap<long, long, long>::Insert
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x1E9D289
	call ZMap<long, long, long>::Insert
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x111AE9
	call ZMap<long, long, long>::Insert
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x142829
	call ZMap<long, long, long>::Insert
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x4E23EF
	call ZMap<long, long, long>::Insert
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0xE6935C
	call ZMap<long, long, long>::Insert
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x1E9F9A3
	call ZMap<long, long, long>::Insert
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x14],0x21612A9
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	call ZMap<long, long, long>::Insert
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],0x2179951
	call ZMap<long, long, long>::Insert
	mov ecx,esi
	call CUserLocal::GetJobCode
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x15
	je Block10

 Block9:
	cmp ecx,0x7D0
	jne Block11

 Block10:
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov ecx,ebp
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x1C],edi
	call ZMap<long, long, long>::Insert

 Block11:
	call CUserLocal::UpdateMonsterBookInfo
	push 1
	mov ecx,esi
	call CUserLocal::UpdatePassiveSkillData
	mov eax,esi
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 4
}
}
// CUserLocal::PetInterActWithUserAction
__SUB_CLASS_THIS(00503EC0, __thiscall, 41364,  CUserLocal, long, long, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+8]
	push edi
	mov edi,ecx
	test eax,eax
	jge Block5

 Block1:
	push ebx
	mov ebx,dword ptr [esp+0xC]
	push esi
	xor esi,esi

 Block2:
	mov eax,dword ptr [edi+0x2E44]
	mov ecx,dword ptr [eax+esi+4]
	test ecx,ecx
	je Block4

 Block3:
	push ebx
	call CPet::DoActionByUserAction
	add esi,8
	cmp esi,0x18
	jl Block2

 Block4:
	pop esi
	pop ebx
	mov eax,1
	pop edi
	ret 8

 Block5:
	cmp eax,3
	jge Block8

 Block6:
	mov ecx,dword ptr [edi+0x2E44]
	mov ecx,dword ptr [ecx+eax*8+4]
	test ecx,ecx
	je Block8

 Block7:
	mov edx,dword ptr [esp+8]
	push edx
	call CPet::DoActionByUserAction
	mov eax,1
	pop edi
	ret 8

 Block8:
	xor eax,eax
	pop edi
	ret 8
}
}
// CUserLocal::OnMouseButton
__SUB_CLASS_THIS(005372C0, __thiscall, 41358,  CUserLocal, void, uint32_t, uint32_t, long, long) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	lea ecx,[esi+0x3BD8]
	call CUIToolTip::ClearToolTip
	mov eax,dword ptr [esp+8]
	add eax,0xFFFFFDFF
	cmp eax,4
	ja Block6

 Block1:
	cmp EAX, 0
je Block2
cmp EAX, 1
je Block3
cmp EAX, 2
je Block4
cmp EAX, 3
je Block6
cmp EAX, 4
je Block5


 Block2:
	mov ecx,esi
	call CUserLocal::HandleLButtonDown
	pop esi
	ret 0x10

 Block3:
	mov ecx,esi
	call CUserLocal::HandleLButtonClk
	pop esi
	ret 0x10

 Block4:
	mov ecx,esi
	call CUserLocal::HandleLButtonDblClk
	pop esi
	ret 0x10

 Block5:
	mov ecx,esi
	call CUserLocal::HandleRButtonClk

 Block6:
	pop esi
	ret 0x10
}
}
// CUserLocal::OnTimeBombAttack
__SUB_CLASS_THIS(005323F0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	mov esi,dword ptr [esp+0x2C]
	push edi
	mov edi,ecx
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov ebx,eax
	call CInPacket::Decode4
	mov ecx,esi
	mov ebp,eax
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [esp+0x10],eax
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [esp+0x1C],eax
	call CInPacket::Decode4
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [esp+0x20],eax
	lea eax,[esp+0x24]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x14],ecx
	test eax,eax
	je Block5

 Block1:
	add eax,0xFFFFFFF0
	mov dword ptr [esp+0x30],eax
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	mov eax,dword ptr [esp+0x30]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x30]
	test ecx,ecx
	je Block4

 Block3:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block4:
	mov dword ptr [esp+0x28],0

 Block5:
	mov edx,dword ptr [esp+0x14]
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebx
	push edx
	mov dword ptr [esp+0x24],0
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0x10]
	mov edx,dword ptr [esp+0x18]
	xor ebx,ebx
	push ebx
	push ecx
	push ebp
	push 1
	push ebx
	push ebx
	push ebx
	push ebx
	push ebx
	push ebx
	push eax
	push edx
	mov ecx,edi
	call CUserLocal::TryDoingMeleeAttack
	cmp dword ptr [esp+0x1C],ebx
	je Block21

 Block6:
	push 5
	lea eax,[esp+0x28]
	push eax
	mov ecx,esi
	mov ebp,0x5DC
	call CWvsContext::GetRealEquipSlot
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	cmp eax,ebx
	je Block11

 Block7:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block10

 Block8:
	mov ecx,dword ptr [esp+0x28]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x28]
	cmp ecx,ebx
	je Block10

 Block9:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block10:
	mov dword ptr [esp+0x28],ebx

 Block11:
	cmp esi,ebx
	je Block18

 Block12:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x78]
	mov ecx,esi
	call eax
	test eax,eax
	je Block18

 Block13:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebx
	je Block18

 Block14:
	mov ecx,dword ptr [eax+0x68]
	push ecx
	add eax,0x60
	push eax
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x38],ebx
	mov dword ptr [esp+0x18],ebx
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov ebx,edx
	add esp,8
	shr ebx,0x1F
	add ebx,edx
	lea edx,[esp+0x10]
	push edx
	mov edx,dword ptr [esi+0x115]
	lea eax,[esp+0x34]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push ebx
	push edx
	lea eax,[esi+0x111]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	add esp,8
	push ecx
	mov ecx,edi
	call CUserLocal::ApplyInvicibleOption
	lea edx,[esp+0x10]
	push edx
	mov edx,dword ptr [esi+0x11D]
	lea eax,[esp+0x34]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push ebx
	push edx
	lea eax,[esi+0x119]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	add esp,8
	push ecx
	mov ecx,edi
	call CUserLocal::ApplyInvicibleOption
	lea edx,[esp+0x10]
	push edx
	mov edx,dword ptr [esi+0x125]
	lea eax,[esp+0x34]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push ebx
	push edx
	add esi,0x121
	push esi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	push eax
	mov ecx,edi
	call CUserLocal::ApplyInvicibleOption
	mov esi,dword ptr [esp+0x30]
	test esi,esi
	jle Block17

 Block15:
	mov ecx,offset _D_G_RAND
	call CRand32::Random
	xor edx,edx
	mov ecx,0x65
	div ecx
	cmp edx,esi
	ja Block17

 Block16:
	mov ebp,dword ptr [esp+0x10]

 Block17:
	add ebp,dword ptr [esp+0x14]
	xor ebx,ebx

 Block18:
	push ebp
	lea ecx,[edi+0x2E20]
	call TSecType<long>::SetData
	mov eax,dword ptr [esp+0x20]
	push ebx
	neg eax
	push eax
	mov ecx,edi
	call CUser::MakeIncDecHPEffect
	push ebp
	push 1
	lea ecx,[edi+0x88]
	call CAvatar::SetEmotion
	fild dword ptr [esp+0x1C]
	mov esi,dword ptr [edi+0x640]
	fdiv qword ptr [__real_4059000000000000]
	fmul qword ptr [__real_4079000000000000]
	call __ftol2_sse
	cmp eax,0x186
	jge Block20

 Block19:
	mov eax,0x186

 Block20:
	not esi
	and esi,1
	push esi
	push eax
	push 0x1C
	mov ecx,edi
	call CUserLocal::SetImpact

 Block21:
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CUserLocal::OnPetEvol
__SUB_CLASS_THIS(00503F30, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push esi
	push eax
	mov esi,ecx
	call CUser::OnPetEvol
	mov eax,dword ptr [esi+0x2E44]
	cmp dword ptr [eax+0x14],0
	je Block2

 Block1:
	mov ecx,dword ptr [eax+4]
	push 5
	call CPet::SetPositionContext
	mov ecx,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [ecx+0xC]
	push 3
	call CPet::SetPositionContext
	mov edx,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [edx+0x14]
	push 4
	jmp Block6

 Block2:
	cmp dword ptr [eax+0xC],0
	je Block4

 Block3:
	mov ecx,dword ptr [eax+4]
	push 1
	call CPet::SetPositionContext
	mov eax,dword ptr [esi+0x2E44]
	mov ecx,dword ptr [eax+0xC]
	push 2
	jmp Block6

 Block4:
	mov eax,dword ptr [eax+4]
	test eax,eax
	je Block7

 Block5:
	push 0
	mov ecx,eax

 Block6:
	call CPet::SetPositionContext

 Block7:
	mov ecx,dword ptr [TSingleton<CUIItem>::ms_pInstance]
	pop esi
	test ecx,ecx
	je Block9

 Block8:
	mov dword ptr [esp+4],0
	jmp  CWnd::InvalidateRect

 Block9:
	ret 4
}
}
// GetShootAttackPt0
__SUB(005039A0, __cdecl, 82355,  tagPOINT, long, long, const tagPOINT&, long, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+0xC]
	push ebx
	mov ebx,dword ptr [eax]
	push esi
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x10]
	push edi
	mov edi,dword ptr [esp+0x10]
	push eax
	push edi
	sub esi,0x1C
	call is_position_up_skill_on_riding
	add esp,8
	test eax,eax
	je Block6

 Block1:
	mov ecx,dword ptr [esp+0x1C]
	mov eax,offset _D_RIDING_WILDHUNTE__42+4
	mov edi,edi

 Block2:
	cmp dword ptr [eax],ecx
	je Block12

 Block3:
	add eax,4
	cmp eax,offset _D_DB_DATE_19000101__44
	jl Block2

 Block4:
	cmp ecx,0x1D7AF0
	jne Block6

 Block5:
	sub esi,0x11

 Block6:
	cmp edi,0x21612AC
	jg Block14

 Block7:
	je Block17

 Block8:
	mov eax,edi
	sub eax,0x1F914C9
	je Block17

 Block9:
	sub eax,6
	je Block13

 Block10:
	sub eax,0x4E1E
	jne Block18

 Block11:
	add esi,0xB
	pop edi
	mov edx,esi
	pop esi
	mov eax,ebx
	pop ebx
	ret

 Block12:
	add esi,dword ptr [esp+0x20]
	jmp Block6

 Block13:
	sub esi,0xC
	pop edi
	mov edx,esi
	pop esi
	mov eax,ebx
	pop ebx
	ret

 Block14:
	cmp edi,0x2179952
	je Block17

 Block15:
	cmp edi,0x217C067
	jne Block18

 Block16:
	add esi,0xA
	pop edi
	mov edx,esi
	pop esi
	mov eax,ebx
	pop ebx
	ret

 Block17:
	add esi,5

 Block18:
	pop edi
	mov edx,esi
	pop esi
	mov eax,ebx
	pop ebx
	ret
}
}
// sort_mob_by_distance
__SUB(00504B20, __cdecl, 82366,  void, int32_t, CMob**, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	mov eax,dword ptr [ebp+0x10]
	sub esp,0x2C
	push ebx
	push esi
	push edi
	test eax,eax
	jle Block11

 Block1:
	mov ebx,dword ptr [ebp+0xC]
	mov esi,1
	mov dword ptr [esp+0xC],esi
	mov edi,ebx
	mov dword ptr [esp+0x10],eax
	lea esp,[esp]

 Block2:
	cmp esi,eax
	jge Block10

 Block3:
	cmp dword ptr [ebp+8],0
	mov eax,dword ptr [ebx+esi*4]
	lea ecx,[eax+4]
	je Block6

 Block4:
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x10]
	lea edx,[esp+0x18]
	push edx
	call eax
	mov dword ptr [esp+0x14],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[eax+4]
	lea eax,[esp+0x20]
	push eax
	call edx
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [esp+0x14]
	cmp eax,dword ptr [ecx]
	jg Block7

 Block5:
	jmp Block8

 Block6:
	mov edx,dword ptr [ecx]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x28]
	push eax
	call edx
	mov dword ptr [esp+0x14],eax
	mov eax,dword ptr [edi]
	lea ecx,[eax+4]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x10]
	lea edx,[esp+0x30]
	push edx
	call eax
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [esp+0x14]
	cmp ecx,dword ptr [edx]
	jge Block8

 Block7:
	mov ecx,dword ptr [ebx+esi*4]
	mov eax,dword ptr [edi]
	mov dword ptr [edi],ecx
	mov dword ptr [ebx+esi*4],eax

 Block8:
	inc esi
	cmp esi,dword ptr [ebp+0x10]
	jl Block3

 Block9:
	mov eax,dword ptr [ebp+0x10]
	mov esi,dword ptr [esp+0xC]

 Block10:
	inc esi
	add edi,4
	sub dword ptr [esp+0x10],1
	mov dword ptr [esp+0xC],esi
	jne Block2

 Block11:
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::HandleLButtonDblClk
_SUB_EXCEPTION_HANDLER(533B90)
__SUB_CLASS_THIS0(00533B90, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_533B90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x4C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x60]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,dword ptr [ebx+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	je Block45

 Block1:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 1
	lea eax,[esp+0x24]
	push eax
	call CWndMan::GetCursorPos
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,ebp
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block5

 Block2:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block5

 Block3:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block5

 Block4:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block5:
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::FindBalloon
	mov esi,eax
	xor edi,edi
	mov dword ptr [esp+0x18],esi
	cmp esi,edi
	je Block25

 Block6:
	mov dword ptr [esp+0x14],edi
	mov dword ptr [esp+0x68],edi
	cmp dword ptr [esi+0x2E00],edi
	je Block21

 Block7:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x1C],eax
	mov byte ptr [esp+0x68],1
	test eax,eax
	je Block15

 Block8:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	test eax,eax
	je Block15

 Block9:
	add eax,8
	je Block15

 Block10:
	lea esi,[eax-8]
	mov dword ptr [esp+0x2C],esi
	test esi,esi
	je Block12

 Block11:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block12:
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	push 0x1E5
	mov bl,2
	push eax
	mov byte ptr [esp+0x7C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0
	push 3
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push 0
	push 0
	push 0x1E
	push 0
	push 0
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_STR
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	je Block16

 Block13:
	mov byte ptr [esp+0x68],0
	test esi,esi
	je Block45

 Block14:
	push 0
	lea ecx,[esp+0x2C]
	call ZRef<CUtilDlgEx>::_ReleaseRaw
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret

 Block15:
	xor esi,esi
	mov dword ptr [esp+0x2C],esi
	jmp Block12

 Block16:
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	call CUtilDlgEx::GetInputStr_Result
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x6C],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x68],bl
	test eax,eax
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov edi,1
	mov byte ptr [esp+0x68],0
	test esi,esi
	je Block20

 Block19:
	push 0
	lea ecx,[esp+0x2C]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block20:
	mov esi,dword ptr [esp+0x18]

 Block21:
	push 0x90
	lea ecx,[esp+0x34]
	call COutPacket::_ctor_1
	push 4
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x6C],4
	call COutPacket::Encode1
	mov eax,dword ptr [esi+0x2DF8]
	push eax
	lea ecx,[esp+0x34]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x34]
	call COutPacket::Encode1
	test edi,edi
	je Block23

 Block22:
	push ecx
	mov ecx,esp
	lea edx,[esp+0x18]
	mov dword ptr [esp+0x20],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	lea ecx,[esp+0x34]
	call COutPacket::EncodeStr

 Block23:
	push 0
	lea ecx,[esp+0x34]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x30]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x68],0
	call ZArray<unsigned char>::RemoveAll
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x68],0xFFFFFFFF
	test eax,eax
	je Block45

 Block24:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret

 Block25:
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,dword ptr [TSingleton<CEmployeePool>::ms_pInstance]
	call CEmployeePool::FindBalloon
	mov esi,eax
	cmp esi,edi
	je Block31

 Block26:
	cmp dword ptr [ebx+0x4690],edi
	je Block28

 Block27:
	mov ecx,ebx
	call CUserLocal::OnKeyDownSkillEnd

 Block28:
	mov eax,dword ptr [ebp+0x20B4]
	cmp eax,dword ptr [esi+0x88]
	jne Block30

 Block29:
	push edi
	push edi
	push edi
	push edi
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x30],esp
	push 0xDAD
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::YesNo_0
	xor ecx,ecx
	add esp,0x14
	cmp eax,6
	sete cl
	mov eax,ecx
	cmp eax,edi
	je Block31

 Block30:
	push 0x90
	lea ecx,[esp+0x34]
	call COutPacket::_ctor_1
	push 4
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x6C],5
	call COutPacket::Encode1
	mov esi,dword ptr [esi+0x94]
	push esi
	lea ecx,[esp+0x34]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x34]
	call COutPacket::Encode1
	push edi
	lea ecx,[esp+0x34]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x30]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x34]
	jmp Block44

 Block31:
	mov ecx,dword ptr [TSingleton<CMessageBoxPool>::ms_pInstance]
	lea eax,[esp+0x20]
	push eax
	call CMessageBoxPool::FindMessageBox
	mov esi,eax
	cmp esi,edi
	je Block34

 Block32:
	push 0xB0
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov edi,eax
	mov dword ptr [esp+0x1C],edi
	mov dword ptr [esp+0x68],6
	test edi,edi
	je Block45

 Block33:
	mov ecx,dword ptr [esi+0x38]
	push ecx
	push ecx
	lea edx,[esi+0xC]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push edx
	call ZXString<char>::_ctor_copy
	push ecx
	add esi,8
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push esi
	mov byte ptr [esp+0x78],7
	call ZXString<char>::_ctor_copy
	mov ecx,edi
	mov byte ptr [esp+0x74],6
	call CMessageBoxDlg::_ctor_0
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret

 Block34:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	lea eax,[esp+0x20]
	push eax
	call CUserPool::FindPet
	cmp eax,edi
	je Block36

 Block35:
	mov ecx,dword ptr [eax+0x19E8]
	push 1
	push 1
	push ecx
	mov ecx,ebp
	call CWvsContext::SendCharacterInfoRequest
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret

 Block36:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	lea edx,[esp+0x20]
	push edx
	call CUserPool::FindRemoteUser
	cmp eax,edi
	je Block38

 Block37:
	mov eax,dword ptr [eax+0x19E8]
	push edi
	push 1
	push eax
	mov ecx,ebp
	call CWvsContext::SendCharacterInfoRequest
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret

 Block38:
	push 1
	lea ecx,[esp+0x44]
	push ecx
	lea ecx,[ebx+0x88]
	call CAvatar::GetBodyRect
	mov edx,dword ptr [esp+0x24]
	mov eax,dword ptr [esp+0x20]
	push edx
	push eax
	lea ecx,[esp+0x48]
	push ecx
	call PtInRect
	test eax,eax
	je Block40

 Block39:
	mov edx,dword ptr [ebx+0x19E8]
	push edi
	push 1
	push edx
	mov ecx,ebp
	call CWvsContext::SendCharacterInfoRequest
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret

 Block40:
	mov ecx,dword ptr [ebx+0x4770]
	cmp ecx,edi
	je Block45

 Block41:
	push 1
	lea eax,[esp+0x44]
	push eax
	call CSummoned::GetBodyRect
	test eax,eax
	je Block45

 Block42:
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x20]
	push ecx
	push edx
	lea eax,[esp+0x48]
	push eax
	call PtInRect
	test eax,eax
	je Block45

 Block43:
	push 0xBC
	lea ecx,[esp+0x54]
	call COutPacket::_ctor_1
	lea ecx,[esp+0x50]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	mov dword ptr [esp+0x6C],8
	call CClientSocket::SendPacket
	lea ecx,[esp+0x54]

 Block44:
	mov dword ptr [esp+0x68],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block45:
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret
}
}
// CUserLocal::TryDoingMagicAttack
_SUB_EXCEPTION_HANDLER(52A240)
__SUB_CLASS_THIS(0052A240, __thiscall, 41398,  CUserLocal, int32_t, const SKILLENTRY*, long, long, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_52A240
	mov eax,dword ptr fs:[0]
	push eax
	mov eax,0x2214
	call __chkstk
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [ebp-0x20E0],ecx
	mov dword ptr [ebp-0x1FE0],0
	call TSingleton<CWvsContext>::GetInstance
	mov dword ptr [ebp-0x38],eax
	lea eax,[ebp-0x15A4]
	push eax
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x20E4],eax
	mov ecx,dword ptr [ebp-0x20E4]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x58],eax
	lea ecx,[ebp-0x15A4]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0x74],ecx
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::IsUserGM
	test eax,eax
	je Block2

 Block1:
	push 0x97
	lea edx,[ebp-0x15A8]
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x20E8],eax
	mov eax,dword ptr [ebp-0x20E8]
	mov dword ptr [ebp-0x20EC],eax
	mov dword ptr [ebp-4],0
	push 0xC
	mov ecx,dword ptr [ebp-0x20EC]
	push ecx
	call CHATLOG_ADD
	add esp,8
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x15A8]
	call ZXString<char>::~ZXString<char>
	xor eax,eax
	jmp Block328

 Block2:
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetSecondaryStat
	mov dword ptr [ebp-0x1A0],eax
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetActionRndMan
	push eax
	lea ecx,[ebp-0x178]
	call ActionRandMan::_ctor_0
	mov dword ptr [ebp-4],1
	lea ecx,[ebp-0x178]
	call ActionRandMan::GetRandom
	mov dword ptr [ebp-0x34],eax
	push 0
	push 0x2B
	mov edx,dword ptr [ebp+8]
	mov eax,dword ptr [edx]
	push eax
	call play_skill_sound
	add esp,0xC
	mov ecx,dword ptr [ebp+8]
	mov edx,dword ptr [ecx]
	mov dword ptr [ebp-0x170],edx
	mov eax,dword ptr [ebp-0x20E0]
	mov ecx,dword ptr [eax+0x58C]
	push ecx
	call get_weapon_type
	add esp,4
	mov dword ptr [ebp-0x19C],eax
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+0x590]
	push eax
	call get_weapon_type
	add esp,4
	mov dword ptr [ebp-0x13C],eax
	call get_update_time
	mov dword ptr [ebp-0x11C],eax
	mov ecx,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [ecx+0x5A0]
	mov dword ptr [ebp-0x16C],edx
	mov eax,dword ptr [ebp-0x170]
	mov dword ptr [ebp-0x20F0],eax
	cmp dword ptr [ebp-0x20F0],0x231C4A
	jg Block11

 Block3:
	cmp dword ptr [ebp-0x20F0],0x231C4A
	je Block21

 Block4:
	cmp dword ptr [ebp-0x20F0],0x21E3CE
	jg Block9

 Block5:
	cmp dword ptr [ebp-0x20F0],0x21E3CE
	je Block18

 Block6:
	cmp dword ptr [ebp-0x20F0],0x205D2E
	je Block16

 Block7:
	cmp dword ptr [ebp-0x20F0],0x205D2F
	je Block15

 Block8:
	jmp Block24

 Block9:
	cmp dword ptr [ebp-0x20F0],0x21E3CF
	je Block17

 Block10:
	jmp Block24

 Block11:
	cmp dword ptr [ebp-0x20F0],0x236A70
	je Block19

 Block12:
	cmp dword ptr [ebp-0x20F0],0xB8CC9B
	je Block15

 Block13:
	cmp dword ptr [ebp-0x20F0],0x1EA20AC
	je Block20

 Block14:
	jmp Block24

 Block15:
	mov dword ptr [ebp-0x30],0x59
	jmp Block31

 Block16:
	mov dword ptr [ebp-0x30],0x5A
	jmp Block31

 Block17:
	mov dword ptr [ebp-0x30],0x5B
	jmp Block31

 Block18:
	mov dword ptr [ebp-0x30],0x62
	jmp Block31

 Block19:
	mov dword ptr [ebp-0x30],0x5C
	jmp Block31

 Block20:
	mov dword ptr [ebp-0x30],0xD5
	jmp Block31

 Block21:
	mov ecx,dword ptr [ebp-0x34]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x19C]
	push ecx
	mov edx,dword ptr [ebp-0x16C]
	push edx
	call get_random_magic_attack_action
	add esp,0x14
	mov dword ptr [ebp-0x30],eax
	cmp dword ptr [ebp-0x30],0
	jge Block23

 Block22:
	push 0x1127
	lea eax,[ebp-0x15AC]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x20F4],eax
	mov ecx,dword ptr [ebp-0x20F4]
	mov dword ptr [ebp-0x20F8],ecx
	mov byte ptr [ebp-4],2
	push 0xC
	mov edx,dword ptr [ebp-0x20F8]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x15AC]
	call ZXString<char>::~ZXString<char>

 Block23:
	jmp Block31

 Block24:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsSuperMan
	test eax,eax
	je Block29

 Block25:
	cmp dword ptr [ebp+8],0
	jne Block29

 Block26:
	cmp dword ptr [ebp-0x19C],0x27
	je Block29

 Block27:
	cmp dword ptr [ebp-0x19C],0x30
	je Block29

 Block28:
	push 0x1127
	lea eax,[ebp-0x15B0]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x20FC],eax
	mov ecx,dword ptr [ebp-0x20FC]
	mov dword ptr [ebp-0x2100],ecx
	mov byte ptr [ebp-4],3
	push 0xC
	mov edx,dword ptr [ebp-0x2100]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x15B0]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x30],0xFFFFFFFF
	jmp Block31

 Block29:
	mov eax,dword ptr [ebp-0x34]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov eax,dword ptr [ebp-0x19C]
	push eax
	mov ecx,dword ptr [ebp-0x16C]
	push ecx
	call get_random_magic_attack_action
	add esp,0x14
	mov dword ptr [ebp-0x30],eax
	cmp dword ptr [ebp-0x30],0
	jge Block31

 Block30:
	push 0x1127
	lea edx,[ebp-0x15B4]
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x2104],eax
	mov eax,dword ptr [ebp-0x2104]
	mov dword ptr [ebp-0x2108],eax
	mov byte ptr [ebp-4],4
	push 0xC
	mov ecx,dword ptr [ebp-0x2108]
	push ecx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x15B4]
	call ZXString<char>::~ZXString<char>

 Block31:
	lea edx,[ebp-0x15B8]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::GetVecCtrl_0
	mov dword ptr [ebp-0x210C],eax
	mov ecx,dword ptr [ebp-0x210C]
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov dword ptr [ebp-0x198],eax
	lea ecx,[ebp-0x15B8]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsDead
	test eax,eax
	jne Block33

 Block32:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsOnPlayingOneTimeAction
	test eax,eax
	je Block34

 Block33:
	mov dword ptr [ebp-0x15BC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15BC]
	jmp Block328

 Block34:
	mov ecx,dword ptr [ebp-0x198]
	call CVecCtrl::GetFoothold
	test eax,eax
	jne Block46

 Block35:
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::IsOnLadderOrRope
	test eax,eax
	je Block39

 Block36:
	cmp dword ptr [ebp-0x170],0x151FF59
	je Block38

 Block37:
	cmp dword ptr [ebp-0x170],0x1518A28
	jne Block39

 Block38:
	mov dword ptr [ebp-0x15C0],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15C0]
	jmp Block328

 Block39:
	cmp dword ptr [ebp-0x170],0x231C4A
	je Block46

 Block40:
	cmp dword ptr [ebp-0x170],0x20361A
	je Block46

 Block41:
	cmp dword ptr [ebp-0x170],0x151FF59
	je Block46

 Block42:
	cmp dword ptr [ebp-0x170],0x1518A28
	je Block46

 Block43:
	mov ecx,dword ptr [ebp-0x198]
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block46

 Block44:
	mov eax,dword ptr [ebp-0x198]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x198]
	mov eax,dword ptr [edx+8]
	call eax
	test eax,eax
	jne Block46

 Block45:
	mov dword ptr [ebp-0x15C4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15C4]
	jmp Block328

 Block46:
	mov ecx,dword ptr [ebp-0x198]
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block48

 Block47:
	mov ecx,dword ptr [ebp-0x198]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x198]
	mov eax,dword ptr [edx+8]
	call eax
	test eax,eax
	je Block50

 Block48:
	mov ecx,dword ptr [ebp-0x198]
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	je Block50

 Block49:
	mov dword ptr [ebp-0x15C8],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15C8]
	jmp Block328

 Block50:
	cmp dword ptr [ebp-0x30],0
	jge Block52

 Block51:
	mov dword ptr [ebp-0x15CC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15CC]
	jmp Block328

 Block52:
	cmp dword ptr [ebp+8],0
	je Block55

 Block53:
	mov ecx,dword ptr [ebp-0x13C]
	push ecx
	mov edx,dword ptr [ebp-0x19C]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block55

 Block54:
	push 0x1127
	lea eax,[ebp-0x15D0]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x2110],eax
	mov ecx,dword ptr [ebp-0x2110]
	mov dword ptr [ebp-0x2114],ecx
	mov byte ptr [ebp-4],5
	push 0xC
	mov edx,dword ptr [ebp-0x2114]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x15D0]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x15D4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15D4]
	jmp Block328

 Block55:
	mov eax,dword ptr [ebp-0x170]
	push eax
	call get_skill_root_from_skill
	add esp,4
	cdq
	mov ecx,0x64
	idiv ecx
	cmp eax,0x16
	jne Block58

 Block56:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_not
	test eax,eax
	je Block58

 Block57:
	mov dword ptr [ebp-0x15D8],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15D8]
	jmp Block328

 Block58:
	call get_field
	mov ecx,eax
	call CField::IsUnableToUseSkill
	test eax,eax
	je Block62

 Block59:
	cmp dword ptr [ebp-0x170],0x1E9D289
	je Block61

 Block60:
	cmp dword ptr [ebp-0x170],0x1E9F9A3
	jne Block62

 Block61:
	mov dword ptr [ebp-0x15DC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15DC]
	jmp Block328

 Block62:
	mov edx,dword ptr [ebp-0x170]
	push edx
	call get_cool_time
	add esp,4
	test eax,eax
	je Block66

 Block63:
	lea eax,[ebp-0xAB4]
	push eax
	lea ecx,[ebp-0x170]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x46C4
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block66

 Block64:
	mov edx,dword ptr [ebp-0x11C]
	cmp edx,dword ptr [ebp-0xAB4]
	jge Block66

 Block65:
	mov dword ptr [ebp-0x15E0],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15E0]
	jmp Block328

 Block66:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov dword ptr [ebp-0xAB0],eax
	cmp dword ptr [ebp-0x170],0xB8CC9D
	jne Block69

 Block67:
	mov ecx,dword ptr [ebp-0xAB0]
	add ecx,0x1CC
	push ecx
	lea edx,[ebp-0xAC4]
	push edx
	call SECRECT::ToRect
	add esp,8
	lea eax,[ebp-0x15E8]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x15F0]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0xAC4]
	push ecx
	call dword ptr [ZImports::_OffsetRect]
	lea edx,[ebp-0xAC4]
	push edx
	call TSingleton<CAffectedAreaPool>::GetInstance
	mov ecx,eax
	call CAffectedAreaPool::IsAbleToInsertExclusiveArea
	test eax,eax
	jne Block69

 Block68:
	push 0x1128
	lea eax,[ebp-0x15F4]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x2118],eax
	mov ecx,dword ptr [ebp-0x2118]
	mov dword ptr [ebp-0x211C],ecx
	mov byte ptr [ebp-4],6
	push 0xC
	mov edx,dword ptr [ebp-0x211C]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x15F4]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x15F8],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x15F8]
	jmp Block328

 Block69:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsLeft
	mov dword ptr [ebp-0x40],eax
	mov ecx,dword ptr [ebp-0x1A0]
	call SecondaryStat::_ZtlSecureGet_nFrozen_
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::GetAuraBooster
	push eax
	push 4
	mov ecx,dword ptr [ebp-0x1A0]
	call SecondaryStat::operator[]
	mov ecx,eax
	call TemporaryStatBase<long>::GetValue
	mov eax,dword ptr [eax]
	push eax
	mov ecx,dword ptr [ebp-0x1A0]
	call SecondaryStat::_ZtlSecureGet_nBooster_
	push eax
	mov ecx,dword ptr [ebp-0x170]
	push ecx
	push 6
	call get_attack_speed_degree
	add esp,0x18
	mov dword ptr [ebp-0x194],eax
	push 0xF
	push 1
	mov ecx,dword ptr [ebp-0xAB0]
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	push eax
	call _zmax_long
	add esp,8
	push eax
	call _zmin_long
	add esp,8
	sub eax,dword ptr [ebp+0x10]
	mov dword ptr [ebp-0x140],eax
	push 0xF
	push 1
	mov ecx,dword ptr [ebp-0xAB0]
	call SKILLLEVELDATA::_ZtlSecureGet_nAttackCount
	push eax
	call _zmax_long
	add esp,8
	push eax
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x118],eax
	cmp dword ptr [ebp-0x170],0x1524D7A
	jne Block75

 Block70:
	mov edx,dword ptr [ebp-0xAB0]
	add edx,0x1CC
	push edx
	lea eax,[ebp-0xAD4]
	push eax
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_star_access
	test eax,eax
	je Block72

 Block71:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2120],eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2124],eax
	xor ecx,ecx
	cmp dword ptr [ebp-0x40],0
	sete cl
	push ecx
	lea edx,[ebp-0x1600]
	push edx
	mov eax,dword ptr [ebp-0x2120]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x2120]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x1608]
	push edx
	mov eax,dword ptr [ebp-0x2124]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x2124]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	lea edx,[ebp-0xAD4]
	push edx
	call adjust_rect
	add esp,0x10
	jmp Block73

 Block72:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea eax,[ebp-0x1610]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x1618]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0xAD4]
	push ecx
	call adjust_rect
	add esp,0x10

 Block73:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp-0x140]
	push edx
	lea eax,[ebp-0xB14]
	push eax
	lea ecx,[ebp-0xAD4]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0xAD8],eax
	cmp dword ptr [ebp-0xAD8],0
	jne Block75

 Block74:
	mov dword ptr [ebp-0x161C],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x161C]
	jmp Block328

 Block75:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x194]
	push ecx
	mov edx,dword ptr [ebp-0x30]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::SetAttackAction
	test eax,eax
	jne Block77

 Block76:
	mov dword ptr [ebp-0x1620],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1620]
	jmp Block328

 Block77:
	push 0
	push 0x7FFFFFFF
	push 0
	mov eax,dword ptr [ebp-0x194]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::ShowSkillEffect
	lea eax,[ebp-0x1628]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x1630]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x3BA4
	call CAntiRepeat::TryRepeat
	test eax,eax
	jne Block79

 Block78:
	mov dword ptr [ebp-0x1634],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1634]
	jmp Block328

 Block79:
	mov ecx,dword ptr [ebp-0x30]
	imul ecx,0x18
	add ecx,offset ActionData::m_saCharacterActions
	mov dword ptr [ebp-0x2C],ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::GetActionInfo
	mov edx,dword ptr [ebp-0x2C]
	mov ecx,dword ptr [edx+0x10]
	imul ecx,dword ptr [eax+8]
	mov esi,dword ptr [ebp-0x2C]
	mov eax,ecx
	cdq
	idiv dword ptr [esi+0xC]
	mov dword ptr [ebp-0x110],eax
	mov edx,dword ptr [ebp-0x170]
	mov dword ptr [ebp-0x2128],edx
	cmp dword ptr [ebp-0x2128],0x1E9D289
	je Block82

 Block80:
	cmp dword ptr [ebp-0x2128],0x1E9F9A3
	je Block82

 Block81:
	jmp Block83

 Block82:
	mov eax,dword ptr [ebp-0x2C]
	mov esi,dword ptr [ebp-0x11C]
	add esi,dword ptr [eax+0xC]
	mov ecx,dword ptr [ebp-0x170]
	push ecx
	call get_cool_time
	add esp,4
	add esi,eax
	mov dword ptr [ebp-0x1638],esi
	lea edx,[ebp-0x1638]
	push edx
	lea eax,[ebp-0x170]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt

 Block83:
	mov ecx,dword ptr [ebp+8]
	cmp dword ptr [ecx+0x20C],0
	je Block85

 Block84:
	mov dl,byte ptr [ebp+0xC]
	mov byte ptr [ebp-0x2129],dl
	jmp Block86

 Block85:
	mov eax,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	call eax
	mov byte ptr [ebp-0x2129],al

 Block86:
	push 0
	movzx ecx,byte ptr [ebp-0x2129]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	lea eax,[ebp-0x138]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetBallUOL
	mov byte ptr [ebp-4],7
	mov ecx,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	call eax
	movzx ecx,al
	push ecx
	lea edx,[ebp-0x70]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetAfterimageUOL
	mov byte ptr [ebp-4],8
	lea ecx,[ebp-0x70]
	call _xbstr_t::length
	test eax,eax
	je Block88

 Block87:
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x163C],esp
	lea eax,[ebp-0x70]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x2130],eax
	mov ecx,dword ptr [ebp-0x30]
	push ecx
	mov edx,dword ptr [ebp-0x40]
	push edx
	mov eax,dword ptr [ebp-0x11C]
	add eax,dword ptr [ebp-0x110]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::RegisterAfterimage

 Block88:
	lea ecx,[ebp-0x1644]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	mov dword ptr [ebp-0x28],eax
	lea ecx,[ebp-0x164C]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	sub eax,0x1C
	mov dword ptr [ebp-0x24],eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_star_access
	test eax,eax
	je Block90

 Block89:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2134],eax
	lea ecx,[ebp-0x1654]
	push ecx
	mov edx,dword ptr [ebp-0x2134]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x2134]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	mov dword ptr [ebp-0x28],eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2138],eax
	lea ecx,[ebp-0x165C]
	push ecx
	mov edx,dword ptr [ebp-0x2138]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x2138]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	sub eax,0x1C
	mov dword ptr [ebp-0x24],eax

 Block90:
	mov ecx,dword ptr [ebp-0x40]
	neg ecx
	sbb ecx,ecx
	and ecx,0xFFFFFF9C
	add ecx,0x32
	add ecx,dword ptr [ebp-0x28]
	mov dword ptr [ebp-0x190],ecx
	mov edx,dword ptr [ebp-0x24]
	mov dword ptr [ebp-0x18C],edx
	mov dword ptr [ebp-0x7C],0
	mov eax,dword ptr [ebp-0x170]
	push eax
	call is_rect_attack_magic_skill
	add esp,4
	test eax,eax
	je Block132

 Block91:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0xF74]
	call SKILLLEVELDATA::_ctor_0
	mov byte ptr [ebp-4],9
	lea edx,[ebp-0xDA8]
	push edx
	lea eax,[ebp-0x6C]
	push eax
	call SECRECT::ToRect
	add esp,8
	cmp dword ptr [ebp-0x170],0x231C4A
	jne Block93

 Block92:
	fild dword ptr [ebp-0x68]
	fmul qword ptr [__real_3fe3333333333333]
	call __ftol2_sse
	mov dword ptr [ebp-0x68],eax
	fild dword ptr [ebp-0x6C]
	fmul qword ptr [__real_3fe3333333333333]
	call __ftol2_sse
	mov dword ptr [ebp-0x6C],eax
	fild dword ptr [ebp-0x64]
	fmul qword ptr [__real_3fe3333333333333]
	call __ftol2_sse
	mov dword ptr [ebp-0x64],eax
	fild dword ptr [ebp-0x60]
	fmul qword ptr [__real_3fe3333333333333]
	call __ftol2_sse
	mov dword ptr [ebp-0x60],eax

 Block93:
	cmp dword ptr [ebp-0x170],0x205D2B
	je Block98

 Block94:
	cmp dword ptr [ebp-0x170],0x21E3CB
	je Block98

 Block95:
	cmp dword ptr [ebp-0x170],0xB8CC9E
	je Block98

 Block96:
	cmp dword ptr [ebp-0x170],0x200F0C
	je Block98

 Block97:
	cmp dword ptr [ebp-0x170],0x1E9F99B
	jne Block103

 Block98:
	lea ecx,[ebp-0x138]
	call _xbstr_t::length
	test eax,eax
	je Block103

 Block99:
	mov ecx,dword ptr [ebp-0x6C]
	neg ecx
	mov dword ptr [ebp-0xF78],ecx
	cmp dword ptr [ebp-0x40],0
	je Block101

 Block100:
	mov edx,dword ptr [ebp-0xF78]
	neg edx
	mov dword ptr [ebp-0x213C],edx
	jmp Block102

 Block101:
	mov eax,dword ptr [ebp-0xF78]
	mov dword ptr [ebp-0x213C],eax

 Block102:
	mov ecx,dword ptr [ebp-0x28]
	add ecx,dword ptr [ebp-0x213C]
	mov dword ptr [ebp-0xF80],ecx
	mov edx,dword ptr [ebp-0x24]
	mov dword ptr [ebp-0xF7C],edx
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1660],esp
	lea eax,[ebp-0x138]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x2140],eax
	mov ecx,dword ptr [ebp-0x2140]
	mov dword ptr [ebp-0x2144],ecx
	mov byte ptr [ebp-4],0xA
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1664],esp
	push 0
	call _x_com_ptr<IWzVector2D>::_ctor_zero
	mov dword ptr [ebp-0x2148],eax
	mov edx,dword ptr [ebp-0xF7C]
	push edx
	mov eax,dword ptr [ebp-0xF80]
	push eax
	mov ecx,dword ptr [ebp-0x18C]
	push ecx
	mov edx,dword ptr [ebp-0x190]
	push edx
	fild dword ptr [ebp-0xF78]
	fmul qword ptr [__real_3ff8000000000000]
	mov eax,dword ptr [ebp-0x11C]
	add eax,dword ptr [ebp-0x110]
	mov dword ptr [ebp-0x214C],eax
	fild dword ptr [ebp-0x214C]
	faddp st(1),st(0)
	call __ftol2_sse
	push eax
	mov ecx,dword ptr [ebp-0x11C]
	add ecx,dword ptr [ebp-0x110]
	push ecx
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],9
	mov ecx,eax
	call CAnimationDisplayer::RegisterMagicBulletAnimation

 Block103:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_star_access
	test eax,eax
	je Block105

 Block104:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2150],eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2154],eax
	xor edx,edx
	cmp dword ptr [ebp-0x40],0
	sete dl
	push edx
	lea eax,[ebp-0x166C]
	push eax
	mov ecx,dword ptr [ebp-0x2150]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x2150]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x1674]
	push edx
	mov eax,dword ptr [ebp-0x2154]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x2154]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	lea edx,[ebp-0x6C]
	push edx
	call adjust_rect
	add esp,0x10
	jmp Block106

 Block105:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea eax,[ebp-0x167C]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x1684]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0x6C]
	push ecx
	call adjust_rect
	add esp,0x10

 Block106:
	cmp dword ptr [ebp-0x170],0x231C4A
	jne Block108

 Block107:
	mov edx,dword ptr [ebp-0x140]
	push edx
	lea eax,[ebp-0xB50]
	push eax
	lea ecx,[ebp-0x6C]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitUndeadMobInRect
	mov dword ptr [ebp-0x7C],eax
	jmp Block109

 Block108:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp-0x140]
	push edx
	lea eax,[ebp-0xB50]
	push eax
	lea ecx,[ebp-0x6C]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0x7C],eax

 Block109:
	mov dword ptr [ebp-0xF84],0
	jmp Block111

 Block110:
	mov edx,dword ptr [ebp-0xF84]
	add edx,1
	mov dword ptr [ebp-0xF84],edx

 Block111:
	mov eax,dword ptr [ebp-0xF84]
	cmp eax,dword ptr [ebp-0x7C]
	jge Block113

 Block112:
	push 0
	mov ecx,dword ptr [ebp-0x7C]
	push ecx
	call get_rand_0
	add esp,8
	lea edx,[ebp+eax*4-0xB50]
	push edx
	mov eax,dword ptr [ebp-0xF84]
	lea ecx,[ebp+eax*4-0xB50]
	push ecx
	call _zswap_cmob_ptr
	add esp,8
	jmp Block110

 Block113:
	mov dword ptr [ebp-0xF84],0
	jmp Block115

 Block114:
	mov edx,dword ptr [ebp-0xF84]
	add edx,1
	mov dword ptr [ebp-0xF84],edx

 Block115:
	mov eax,dword ptr [ebp-0xF84]
	cmp eax,dword ptr [ebp-0x7C]
	jge Block131

 Block116:
	mov ecx,dword ptr [ebp-0xF84]
	imul ecx,0x98
	lea edx,[ebp+ecx-0xAAC]
	mov dword ptr [ebp-0xF88],edx
	push 0x98
	push 0
	mov eax,dword ptr [ebp-0xF88]
	push eax
	call _memset
	add esp,0xC
	mov ecx,dword ptr [ebp-0xF88]
	mov edx,dword ptr [ebp-0xF84]
	mov eax,dword ptr [ebp+edx*4-0xB50]
	mov dword ptr [ecx],eax
	push 0
	mov ecx,dword ptr [ebp-0xF88]
	mov ecx,dword ptr [ecx]
	call CMob::GetCurrentAction
	mov edx,dword ptr [ebp-0xF88]
	mov dword ptr [edx+8],eax
	mov eax,dword ptr [ebp-0xF88]
	mov ecx,dword ptr [eax]
	call CMob::GetCurrentFrameIndex
	mov ecx,dword ptr [ebp-0xF88]
	mov dword ptr [ecx+0xC],eax
	sub esp,0x10
	mov edx,esp
	mov eax,dword ptr [ebp-0x6C]
	mov dword ptr [edx],eax
	mov ecx,dword ptr [ebp-0x68]
	mov dword ptr [edx+4],ecx
	mov eax,dword ptr [ebp-0x64]
	mov dword ptr [edx+8],eax
	mov ecx,dword ptr [ebp-0x60]
	mov dword ptr [edx+0xC],ecx
	lea edx,[ebp-0x168C]
	push edx
	mov eax,dword ptr [ebp-0xF88]
	mov ecx,dword ptr [eax]
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0xF88]
	mov dword ptr [eax+0x90],ecx
	mov dword ptr [eax+0x94],edx
	cmp dword ptr [ebp-0x170],0x205D2F
	je Block121

 Block117:
	cmp dword ptr [ebp-0x170],0x21E3CF
	je Block121

 Block118:
	cmp dword ptr [ebp-0x170],0x236A70
	je Block121

 Block119:
	cmp dword ptr [ebp-0x170],0x1EA20AC
	je Block121

 Block120:
	cmp dword ptr [ebp-0x170],0xB8CC9B
	jne Block122

 Block121:
	mov ecx,dword ptr [ebp-0xF88]
	mov edx,dword ptr [ebp-0x110]
	mov dword ptr [ecx+0x10],edx
	jmp Block130

 Block122:
	cmp dword ptr [ebp-0x170],0x205D2B
	je Block128

 Block123:
	cmp dword ptr [ebp-0x170],0x21E3CF
	je Block128

 Block124:
	cmp dword ptr [ebp-0x170],0xB8CC9E
	je Block128

 Block125:
	cmp dword ptr [ebp-0x170],0x1513C08
	je Block128

 Block126:
	cmp dword ptr [ebp-0x170],0x200F0C
	je Block128

 Block127:
	cmp dword ptr [ebp-0x170],0x1E9F99B
	jne Block129

 Block128:
	fild dword ptr [ebp-0x110]
	lea eax,[ebp-0x1694]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	fstp qword ptr [ebp-0x215C]
	call edx
	mov esi,eax
	lea eax,[ebp-0x169C]
	push eax
	mov ecx,dword ptr [ebp-0xF88]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [ebp-0xF88]
	mov ecx,dword ptr [eax]
	add ecx,4
	mov edx,dword ptr [edx+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [esi]
	sub ecx,dword ptr [eax]
	push ecx
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x2160],eax
	fild dword ptr [ebp-0x2160]
	fmul qword ptr [__real_3ff8000000000000]
	fadd qword ptr [ebp-0x215C]
	call __ftol2_sse
	mov edx,dword ptr [ebp-0xF88]
	mov dword ptr [edx+0x10],eax
	jmp Block130

 Block129:
	mov eax,dword ptr [ebp-0xF84]
	imul eax,0x32
	add eax,dword ptr [ebp-0x110]
	mov ecx,dword ptr [ebp-0xF88]
	mov dword ptr [ecx+0x10],eax

 Block130:
	mov edx,dword ptr [ebp-0xF88]
	mov ecx,dword ptr [edx]
	call CMob::GetRandomHitAction
	mov ecx,dword ptr [ebp-0xF88]
	mov dword ptr [ecx+4],eax
	jmp Block114

 Block131:
	mov byte ptr [ebp-4],8
	lea ecx,[ebp-0xF74]
	call SKILLLEVELDATA::~SKILLLEVELDATA
	jmp Block187

 Block132:
	mov edx,dword ptr [ebp-0x40]
	neg edx
	sbb edx,edx
	and edx,0xFFFFFDA8
	add edx,0x12C
	add edx,dword ptr [ebp-0x28]
	mov dword ptr [ebp-0xF90],edx
	mov eax,dword ptr [ebp-0x24]
	mov dword ptr [ebp-0xF8C],eax
	mov ecx,dword ptr [ebp-0x24]
	add ecx,1
	push ecx
	mov edx,dword ptr [ebp-0xF90]
	push edx
	mov eax,dword ptr [ebp-0x190]
	push eax
	call _zmax_long
	add esp,8
	push eax
	mov ecx,dword ptr [ebp-0x24]
	push ecx
	mov edx,dword ptr [ebp-0xF90]
	push edx
	mov eax,dword ptr [ebp-0x190]
	push eax
	call _zmin_long
	add esp,8
	push eax
	lea ecx,[ebp-0x6C]
	push ecx
	call SetRect
	push 1
	push 4
	mov edx,dword ptr [ebp-0x24]
	push edx
	mov eax,dword ptr [ebp-0xF90]
	push eax
	mov ecx,dword ptr [ebp-0x190]
	push ecx
	mov edx,dword ptr [ebp-0x28]
	push edx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInTrapezoid
	mov dword ptr [ebp-0xF94],eax
	cmp dword ptr [ebp-0xF94],0
	jne Block134

 Block133:
	push 0
	push 4
	mov eax,dword ptr [ebp-0x24]
	push eax
	mov ecx,dword ptr [ebp-0xF90]
	push ecx
	mov edx,dword ptr [ebp-0x190]
	push edx
	mov eax,dword ptr [ebp-0x28]
	push eax
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInTrapezoid
	mov dword ptr [ebp-0xF94],eax

 Block134:
	cmp dword ptr [ebp-0xF94],0
	je Block136

 Block135:
	sub esp,0x10
	mov ecx,esp
	mov edx,dword ptr [ebp-0x6C]
	mov dword ptr [ecx],edx
	mov eax,dword ptr [ebp-0x68]
	mov dword ptr [ecx+4],eax
	mov edx,dword ptr [ebp-0x64]
	mov dword ptr [ecx+8],edx
	mov eax,dword ptr [ebp-0x60]
	mov dword ptr [ecx+0xC],eax
	lea ecx,[ebp-0x16A4]
	push ecx
	mov ecx,dword ptr [ebp-0xF94]
	call CMob::GetHitPoint
	mov edx,dword ptr [eax]
	mov eax,dword ptr [eax+4]
	mov dword ptr [ebp-0xF90],edx
	mov dword ptr [ebp-0xF8C],eax
	mov dword ptr [ebp-0x7C],1

 Block136:
	cmp dword ptr [ebp-0xF94],0
	je Block153

 Block137:
	cmp dword ptr [ebp-0x170],0x21E3CE
	je Block139

 Block138:
	cmp dword ptr [ebp-0x170],0x1527489
	jne Block153

 Block139:
	push 0x96
	mov ecx,dword ptr [ebp-0x40]
	push ecx
	mov edx,dword ptr [ebp-0x140]
	push edx
	lea eax,[ebp-0xFD0]
	push eax
	mov ecx,dword ptr [ebp-0xF94]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobByChainlightning
	mov dword ptr [ebp-0x7C],eax
	mov dword ptr [ebp-0xFD4],0
	jmp Block141

 Block140:
	mov edx,dword ptr [ebp-0xFD4]
	add edx,1
	mov dword ptr [ebp-0xFD4],edx

 Block141:
	mov eax,dword ptr [ebp-0xFD4]
	cmp eax,dword ptr [ebp-0x7C]
	jge Block152

 Block142:
	mov ecx,dword ptr [ebp-0xFD4]
	imul ecx,0x98
	lea edx,[ebp+ecx-0xAAC]
	mov dword ptr [ebp-0xFE0],edx
	push 0x98
	push 0
	mov eax,dword ptr [ebp-0xFE0]
	push eax
	call _memset
	add esp,0xC
	mov ecx,dword ptr [ebp-0xFE0]
	mov edx,dword ptr [ebp-0xFD4]
	mov eax,dword ptr [ebp+edx*4-0xFD0]
	mov dword ptr [ecx],eax
	push 0
	mov ecx,dword ptr [ebp-0xFE0]
	mov ecx,dword ptr [ecx]
	call CMob::GetCurrentAction
	mov edx,dword ptr [ebp-0xFE0]
	mov dword ptr [edx+8],eax
	mov eax,dword ptr [ebp-0xFE0]
	mov ecx,dword ptr [eax]
	call CMob::GetCurrentFrameIndex
	mov ecx,dword ptr [ebp-0xFE0]
	mov dword ptr [ecx+0xC],eax
	sub esp,0x10
	mov edx,esp
	mov eax,dword ptr [ebp-0x6C]
	mov dword ptr [edx],eax
	mov ecx,dword ptr [ebp-0x68]
	mov dword ptr [edx+4],ecx
	mov eax,dword ptr [ebp-0x64]
	mov dword ptr [edx+8],eax
	mov ecx,dword ptr [ebp-0x60]
	mov dword ptr [edx+0xC],ecx
	lea edx,[ebp-0x16AC]
	push edx
	mov eax,dword ptr [ebp-0xFE0]
	mov ecx,dword ptr [eax]
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0xFE0]
	mov dword ptr [eax+0x90],ecx
	mov dword ptr [eax+0x94],edx
	mov ecx,dword ptr [ebp-0xFD4]
	imul ecx,0x64
	add ecx,dword ptr [ebp-0x110]
	mov edx,dword ptr [ebp-0xFE0]
	mov dword ptr [edx+0x10],ecx
	mov eax,dword ptr [ebp-0xFE0]
	mov ecx,dword ptr [eax]
	call CMob::GetRandomHitAction
	mov ecx,dword ptr [ebp-0xFE0]
	mov dword ptr [ecx+4],eax
	cmp dword ptr [ebp-0xFD4],0
	jne Block147

 Block143:
	mov edx,dword ptr [ebp-0x28]
	mov dword ptr [ebp-0xFDC],edx
	mov eax,dword ptr [ebp-0x24]
	mov dword ptr [ebp-0xFD8],eax
	cmp dword ptr [ebp-0x170],0x1527489
	jne Block145

 Block144:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0xFFFFFE90
	add eax,0xB8
	add eax,dword ptr [ebp-0xFDC]
	mov dword ptr [ebp-0xFDC],eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2164],eax
	lea ecx,[ebp-0x16B4]
	push ecx
	mov edx,dword ptr [ebp-0x2164]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x2164]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	sub eax,0x32
	mov dword ptr [ebp-0xFD8],eax
	jmp Block146

 Block145:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFCE
	add eax,0x19
	add eax,dword ptr [ebp-0xFDC]
	mov dword ptr [ebp-0xFDC],eax

 Block146:
	jmp Block148

 Block147:
	push 1
	lea ecx,[ebp-0x1008]
	push ecx
	mov edx,dword ptr [ebp-0xFD4]
	mov ecx,dword ptr [ebp+edx*4-0xFD4]
	call CMob::GetBodyRect
	mov eax,dword ptr [ebp-0x1008]
	add eax,dword ptr [ebp-0x1000]
	cdq
	sub eax,edx
	sar eax,1
	mov dword ptr [ebp-0xFDC],eax
	mov eax,dword ptr [ebp-0x1004]
	add eax,dword ptr [ebp-0xFFC]
	cdq
	sub eax,edx
	sar eax,1
	mov dword ptr [ebp-0xFD8],eax

 Block148:
	push 1
	lea eax,[ebp-0xFF8]
	push eax
	mov ecx,dword ptr [ebp-0xFD4]
	mov ecx,dword ptr [ebp+ecx*4-0xFD0]
	call CMob::GetBodyRect
	mov eax,dword ptr [ebp-0xFF8]
	add eax,dword ptr [ebp-0xFF0]
	cdq
	sub eax,edx
	sar eax,1
	mov dword ptr [ebp-0xFE8],eax
	mov eax,dword ptr [ebp-0xFF4]
	add eax,dword ptr [ebp-0xFEC]
	cdq
	sub eax,edx
	sar eax,1
	mov dword ptr [ebp-0xFE4],eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_star_access
	test eax,eax
	je Block150

 Block149:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	mov ecx,eax
	call CDragon::GetLayerZ
	sub eax,1
	mov dword ptr [ebp-0x2168],eax
	jmp Block151

 Block150:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	mov dword ptr [ebp-0x2168],eax

 Block151:
	xor edx,edx
	cmp dword ptr [ebp-0x170],0x1527489
	sete dl
	push edx
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x16B8],esp
	lea eax,[ebp-0x138]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x216C],eax
	mov ecx,dword ptr [ebp-0x2168]
	push ecx
	mov edx,dword ptr [ebp-0xFE4]
	push edx
	mov eax,dword ptr [ebp-0xFE8]
	push eax
	mov ecx,dword ptr [ebp-0xFD8]
	push ecx
	mov edx,dword ptr [ebp-0xFDC]
	push edx
	mov eax,dword ptr [ebp-0xFE0]
	mov ecx,dword ptr [eax+0x10]
	mov edx,dword ptr [ebp-0x11C]
	lea eax,[edx+ecx+0x10E]
	push eax
	mov ecx,dword ptr [ebp-0xFE0]
	mov edx,dword ptr [ebp-0x11C]
	add edx,dword ptr [ecx+0x10]
	push edx
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterChainlightningAnimation
	jmp Block140

 Block152:
	jmp Block187

 Block153:
	cmp dword ptr [ebp-0xF94],0
	je Block174

 Block154:
	cmp dword ptr [ebp-0x170],0x236A6F
	jne Block174

 Block155:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov eax,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x18]
	call eax
	push eax
	lea ecx,[ebp-0xF8C]
	push ecx
	lea edx,[ebp-0xF90]
	push edx
	mov eax,dword ptr [ebp-0x24]
	push eax
	mov ecx,dword ptr [ebp-0x28]
	push ecx
	call TSingleton<CWvsPhysicalSpace2D>::GetInstance
	mov ecx,eax
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	jne Block157

 Block156:
	mov dword ptr [ebp-0xF94],0
	mov dword ptr [ebp-0x7C],0

 Block157:
	mov edx,dword ptr [ebp-0xF94]
	mov dword ptr [ebp-0x1044],edx
	cmp dword ptr [ebp-0x1044],0
	je Block172

 Block158:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1474]
	call SKILLLEVELDATA::_ctor_0
	mov byte ptr [ebp-4],0xB
	lea ecx,[ebp-0x12A8]
	push ecx
	lea edx,[ebp-0x1054]
	push edx
	call SECRECT::ToRect
	add esp,8
	mov eax,dword ptr [ebp-0xF8C]
	push eax
	mov ecx,dword ptr [ebp-0xF90]
	push ecx
	lea edx,[ebp-0x1054]
	push edx
	call OffsetRect
	cmp dword ptr [ebp-0x40],0
	je Block161

 Block159:
	mov eax,dword ptr [ebp-0x104C]
	cmp eax,dword ptr [ebp-0x28]
	jl Block161

 Block160:
	push 0
	mov ecx,dword ptr [ebp-0x28]
	sub ecx,dword ptr [ebp-0x104C]
	push ecx
	lea edx,[ebp-0x1054]
	push edx
	call OffsetRect
	jmp Block164

 Block161:
	cmp dword ptr [ebp-0x40],0
	jne Block164

 Block162:
	mov eax,dword ptr [ebp-0x1054]
	cmp eax,dword ptr [ebp-0x28]
	jg Block164

 Block163:
	push 0
	mov ecx,dword ptr [ebp-0x28]
	sub ecx,dword ptr [ebp-0x1054]
	push ecx
	lea edx,[ebp-0x1054]
	push edx
	call OffsetRect

 Block164:
	push 0
	push 0
	push 0
	push 0
	push 0
	mov eax,dword ptr [ebp-0x1044]
	push eax
	mov ecx,dword ptr [ebp-0x140]
	sub ecx,1
	push ecx
	lea edx,[ebp-0x1040]
	push edx
	lea eax,[ebp-0x1054]
	push eax
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	add eax,dword ptr [ebp-0x7C]
	mov dword ptr [ebp-0x7C],eax
	mov dword ptr [ebp-0x1478],0
	jmp Block166

 Block165:
	mov ecx,dword ptr [ebp-0x1478]
	add ecx,1
	mov dword ptr [ebp-0x1478],ecx

 Block166:
	mov edx,dword ptr [ebp-0x1478]
	cmp edx,dword ptr [ebp-0x7C]
	jge Block171

 Block167:
	mov eax,dword ptr [ebp-0x1478]
	imul eax,0x98
	lea ecx,[ebp+eax-0xAAC]
	mov dword ptr [ebp-0x1480],ecx
	push 0x98
	push 0
	mov edx,dword ptr [ebp-0x1480]
	push edx
	call _memset
	add esp,0xC
	mov eax,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [ebp-0x1478]
	mov edx,dword ptr [ebp+ecx*4-0x1044]
	mov dword ptr [eax],edx
	push 0
	mov eax,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [eax]
	call CMob::GetCurrentAction
	mov ecx,dword ptr [ebp-0x1480]
	mov dword ptr [ecx+8],eax
	mov edx,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [edx]
	call CMob::GetCurrentFrameIndex
	mov ecx,dword ptr [ebp-0x1480]
	mov dword ptr [ecx+0xC],eax
	cmp dword ptr [ebp-0x1478],0
	jne Block169

 Block168:
	lea edx,[ebp-0xF90]
	mov dword ptr [ebp-0x2170],edx
	jmp Block170

 Block169:
	sub esp,0x10
	mov eax,esp
	mov ecx,dword ptr [ebp-0x1054]
	mov dword ptr [eax],ecx
	mov edx,dword ptr [ebp-0x1050]
	mov dword ptr [eax+4],edx
	mov ecx,dword ptr [ebp-0x104C]
	mov dword ptr [eax+8],ecx
	mov edx,dword ptr [ebp-0x1048]
	mov dword ptr [eax+0xC],edx
	lea eax,[ebp-0x16C4]
	push eax
	mov ecx,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [ecx]
	call CMob::GetHitPointHeightRand
	mov dword ptr [ebp-0x2170],eax

 Block170:
	mov edx,dword ptr [ebp-0x2170]
	mov dword ptr [ebp-0x16BC],edx
	mov eax,dword ptr [ebp-0x16BC]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0x1480]
	mov dword ptr [eax+0x90],ecx
	mov dword ptr [eax+0x94],edx
	mov ecx,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [ecx]
	call CMob::GetRandomHitAction
	mov edx,dword ptr [ebp-0x1480]
	mov dword ptr [edx+4],eax
	mov eax,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [eax+0x90]
	sub ecx,dword ptr [ebp-0x190]
	mov dword ptr [ebp-0x149C],ecx
	mov edx,dword ptr [ebp-0x1480]
	mov eax,dword ptr [edx+0x94]
	sub eax,dword ptr [ebp-0x18C]
	mov dword ptr [ebp-0x147C],eax
	mov ecx,dword ptr [ebp-0x149C]
	imul ecx,dword ptr [ebp-0x149C]
	mov edx,dword ptr [ebp-0x147C]
	imul edx,dword ptr [ebp-0x147C]
	add ecx,edx
	mov dword ptr [ebp-0x2174],ecx
	fild dword ptr [ebp-0x2174]
	call __CIsqrt
	fmul qword ptr [__real_3ff8000000000000]
	call __ftol2_sse
	mov dword ptr [ebp-0x1484],eax
	mov eax,dword ptr [ebp-0x110]
	add eax,dword ptr [ebp-0x1484]
	mov ecx,dword ptr [ebp-0x1480]
	mov dword ptr [ecx+0x10],eax
	push 1
	lea edx,[ebp-0x1498]
	push edx
	mov eax,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [eax]
	call CMob::GetBodyRect
	lea ecx,[ebp-0x1488]
	push ecx
	mov edx,dword ptr [ebp-0x1478]
	mov ecx,dword ptr [ebp+edx*4-0x1044]
	call CMob::GetVecCtrl
	mov byte ptr [ebp-4],0xC
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x16C8],esp
	lea eax,[ebp-0x138]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x2178],eax
	mov ecx,dword ptr [ebp-0x2178]
	mov dword ptr [ebp-0x217C],ecx
	mov byte ptr [ebp-4],0xD
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x16CC],esp
	lea edx,[ebp-0x1488]
	push edx
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov dword ptr [ebp-0x2180],eax
	mov eax,dword ptr [ebp-0x1480]
	mov ecx,dword ptr [eax+0x94]
	push ecx
	mov edx,dword ptr [eax+0x90]
	push edx
	mov eax,dword ptr [ebp-0x18C]
	push eax
	mov ecx,dword ptr [ebp-0x190]
	push ecx
	mov edx,dword ptr [ebp-0x11C]
	add edx,dword ptr [ebp-0x110]
	add edx,dword ptr [ebp-0x1484]
	push edx
	mov eax,dword ptr [ebp-0x11C]
	add eax,dword ptr [ebp-0x110]
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],0xC
	mov ecx,eax
	call CAnimationDisplayer::RegisterMagicBulletAnimation
	mov byte ptr [ebp-4],0xB
	lea ecx,[ebp-0x1488]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	jmp Block165

 Block171:
	mov byte ptr [ebp-4],8
	lea ecx,[ebp-0x1474]
	call SKILLLEVELDATA::~SKILLLEVELDATA
	jmp Block173

 Block172:
	mov ecx,dword ptr [ebp-0xF90]
	sub ecx,dword ptr [ebp-0x190]
	mov dword ptr [ebp-0x14A8],ecx
	mov edx,dword ptr [ebp-0xF8C]
	sub edx,dword ptr [ebp-0x18C]
	mov dword ptr [ebp-0x14A0],edx
	mov eax,dword ptr [ebp-0x14A8]
	imul eax,dword ptr [ebp-0x14A8]
	mov ecx,dword ptr [ebp-0x14A0]
	imul ecx,dword ptr [ebp-0x14A0]
	add eax,ecx
	mov dword ptr [ebp-0x2184],eax
	fild dword ptr [ebp-0x2184]
	call __CIsqrt
	fmul qword ptr [__real_3ff8000000000000]
	call __ftol2_sse
	mov dword ptr [ebp-0x14A4],eax
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x16D0],esp
	lea edx,[ebp-0x138]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x2188],eax
	mov eax,dword ptr [ebp-0x2188]
	mov dword ptr [ebp-0x218C],eax
	mov byte ptr [ebp-4],0xE
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x16D4],esp
	push 0
	call _x_com_ptr<IWzVector2D>::_ctor_zero
	mov dword ptr [ebp-0x2190],eax
	mov ecx,dword ptr [ebp-0xF8C]
	push ecx
	mov edx,dword ptr [ebp-0xF90]
	push edx
	mov eax,dword ptr [ebp-0x18C]
	push eax
	mov ecx,dword ptr [ebp-0x190]
	push ecx
	mov edx,dword ptr [ebp-0x11C]
	add edx,dword ptr [ebp-0x110]
	add edx,dword ptr [ebp-0x14A4]
	push edx
	mov eax,dword ptr [ebp-0x11C]
	add eax,dword ptr [ebp-0x110]
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],8
	mov ecx,eax
	call CAnimationDisplayer::RegisterMagicBulletAnimation

 Block173:
	jmp Block187

 Block174:
	mov dword ptr [ebp-0x14AC],0
	lea ecx,[ebp-0x138]
	call _xbstr_t::length
	test eax,eax
	je Block185

 Block175:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x18]
	call edx
	push eax
	lea eax,[ebp-0xF8C]
	push eax
	lea ecx,[ebp-0xF90]
	push ecx
	mov edx,dword ptr [ebp-0x24]
	push edx
	mov eax,dword ptr [ebp-0x28]
	push eax
	call TSingleton<CWvsPhysicalSpace2D>::GetInstance
	mov ecx,eax
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	jne Block177

 Block176:
	mov dword ptr [ebp-0xF94],0
	mov dword ptr [ebp-0x7C],0

 Block177:
	cmp dword ptr [ebp-0xF94],0
	je Block179

 Block178:
	lea ecx,[ebp-0x16DC]
	push ecx
	mov ecx,dword ptr [ebp-0xF94]
	call CMob::GetVecCtrl
	mov dword ptr [ebp-0x2194],eax
	mov edx,dword ptr [ebp-0x2194]
	mov dword ptr [ebp-0x2198],edx
	mov byte ptr [ebp-4],0xF
	mov eax,dword ptr [ebp-0x1FE0]
	or eax,1
	mov dword ptr [ebp-0x1FE0],eax
	mov ecx,dword ptr [ebp-0x2198]
	mov dword ptr [ebp-0x219C],ecx
	jmp Block180

 Block179:
	push 0
	lea ecx,[ebp-0x16E0]
	call _x_com_ptr<IWzVector2D>::_ctor_zero
	mov dword ptr [ebp-0x21A0],eax
	mov edx,dword ptr [ebp-0x1FE0]
	or edx,2
	mov dword ptr [ebp-0x1FE0],edx
	mov eax,dword ptr [ebp-0x21A0]
	mov dword ptr [ebp-0x219C],eax

 Block180:
	mov ecx,dword ptr [ebp-0x219C]
	mov dword ptr [ebp-0x16D8],ecx
	mov edx,dword ptr [ebp-0x16D8]
	push edx
	lea ecx,[ebp-0x14B4]
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov dword ptr [ebp-4],0x10
	mov eax,dword ptr [ebp-0x1FE0]
	and eax,2
	je Block182

 Block181:
	and dword ptr [ebp-0x1FE0],0xFFFFFFFD
	lea ecx,[ebp-0x16E0]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>

 Block182:
	mov byte ptr [ebp-4],0x11
	mov ecx,dword ptr [ebp-0x1FE0]
	and ecx,1
	je Block184

 Block183:
	and dword ptr [ebp-0x1FE0],0xFFFFFFFE
	lea ecx,[ebp-0x16DC]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>

 Block184:
	mov edx,dword ptr [ebp-0xF90]
	sub edx,dword ptr [ebp-0x190]
	mov dword ptr [ebp-0x14B8],edx
	mov eax,dword ptr [ebp-0xF8C]
	sub eax,dword ptr [ebp-0x18C]
	mov dword ptr [ebp-0x14B0],eax
	mov ecx,dword ptr [ebp-0x14B8]
	imul ecx,dword ptr [ebp-0x14B8]
	mov edx,dword ptr [ebp-0x14B0]
	imul edx,dword ptr [ebp-0x14B0]
	add ecx,edx
	mov dword ptr [ebp-0x21A4],ecx
	fild dword ptr [ebp-0x21A4]
	call __CIsqrt
	fmul qword ptr [__real_3ff8000000000000]
	call __ftol2_sse
	mov dword ptr [ebp-0x14AC],eax
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x16E4],esp
	lea eax,[ebp-0x138]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x21A8],eax
	mov ecx,dword ptr [ebp-0x21A8]
	mov dword ptr [ebp-0x21AC],ecx
	mov byte ptr [ebp-4],0x12
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x16E8],esp
	lea edx,[ebp-0x14B4]
	push edx
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov dword ptr [ebp-0x21B0],eax
	mov eax,dword ptr [ebp-0xF8C]
	push eax
	mov ecx,dword ptr [ebp-0xF90]
	push ecx
	mov edx,dword ptr [ebp-0x18C]
	push edx
	mov eax,dword ptr [ebp-0x190]
	push eax
	mov ecx,dword ptr [ebp-0x11C]
	add ecx,dword ptr [ebp-0x110]
	add ecx,dword ptr [ebp-0x14AC]
	push ecx
	mov edx,dword ptr [ebp-0x11C]
	add edx,dword ptr [ebp-0x110]
	push edx
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],0x11
	mov ecx,eax
	call CAnimationDisplayer::RegisterMagicBulletAnimation
	mov byte ptr [ebp-4],8
	lea ecx,[ebp-0x14B4]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>

 Block185:
	cmp dword ptr [ebp-0xF94],0
	je Block187

 Block186:
	mov eax,dword ptr [ebp-0xF94]
	mov dword ptr [ebp-0xAAC],eax
	mov ecx,dword ptr [ebp-0xF90]
	mov dword ptr [ebp-0xA1C],ecx
	mov edx,dword ptr [ebp-0xF8C]
	mov dword ptr [ebp-0xA18],edx
	mov eax,dword ptr [ebp-0x110]
	add eax,dword ptr [ebp-0x14AC]
	mov dword ptr [ebp-0xA9C],eax
	push 0
	mov ecx,dword ptr [ebp-0xF94]
	call CMob::GetCurrentAction
	mov dword ptr [ebp-0xAA4],eax
	mov ecx,dword ptr [ebp-0xF94]
	call CMob::GetCurrentFrameIndex
	mov dword ptr [ebp-0xAA0],eax
	mov ecx,dword ptr [ebp-0xF94]
	call CMob::GetRandomHitAction
	mov dword ptr [ebp-0xAA8],eax
	push 0x3C
	push 0
	lea ecx,[ebp-0xA58]
	push ecx
	call _memset
	add esp,0xC

 Block187:
	push 0
	lea edx,[ebp-0xAAC]
	push edx
	mov eax,dword ptr [ebp-0x7C]
	push eax
	mov ecx,dword ptr [ebp-0x30]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp-0x74]
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx eax,al
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::_ctor_0
	mov byte ptr [ebp-4],0x13
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	mov dword ptr [ebp-0x1C4],eax
	mov dword ptr [ebp-0x20],0
	mov dword ptr [ebp-0x114],0
	mov dword ptr [ebp-0x4C],0
	mov dword ptr [ebp-0x3C],0
	mov dword ptr [ebp-0x1C],0
	push 0xB
	lea eax,[ebp-0x16F0]
	push eax
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x21B4],eax
	mov ecx,dword ptr [ebp-0x21B4]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x14C],eax
	lea ecx,[ebp-0x16F0]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x14C],0
	je Block191

 Block188:
	mov ecx,dword ptr [ebp-0x14C]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x14C]
	mov eax,dword ptr [edx+0x78]
	call eax
	test eax,eax
	je Block191

 Block189:
	mov ecx,dword ptr [ebp-0x14C]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0x14BC],eax
	cmp dword ptr [ebp-0x14BC],0
	je Block191

 Block190:
	mov ecx,dword ptr [ebp-0x14BC]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0x14C0],eax
	lea edx,[ebp-0x1C]
	push edx
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x4C]
	push ecx
	lea edx,[ebp-0x114]
	push edx
	lea eax,[ebp-0x20]
	push eax
	mov ecx,dword ptr [ebp-0x14C0]
	push ecx
	mov ecx,dword ptr [ebp-0x14C]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x1C]
	push eax
	lea ecx,[ebp-0x3C]
	push ecx
	lea edx,[ebp-0x4C]
	push edx
	lea eax,[ebp-0x114]
	push eax
	lea ecx,[ebp-0x20]
	push ecx
	mov edx,dword ptr [ebp-0x14C0]
	push edx
	mov ecx,dword ptr [ebp-0x14C]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x1C]
	push ecx
	lea edx,[ebp-0x3C]
	push edx
	lea eax,[ebp-0x4C]
	push eax
	lea ecx,[ebp-0x114]
	push ecx
	lea edx,[ebp-0x20]
	push edx
	mov eax,dword ptr [ebp-0x14C0]
	push eax
	mov ecx,dword ptr [ebp-0x14C]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::ApplyWeaponOption

 Block191:
	push 0xA
	lea edx,[ebp-0x16F8]
	push edx
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x21B8],eax
	mov ecx,dword ptr [ebp-0x21B8]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x168],eax
	lea ecx,[ebp-0x16F8]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x168],0
	je Block196

 Block192:
	mov ecx,dword ptr [ebp-0x168]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call is_blade
	add esp,4
	test eax,eax
	je Block196

 Block193:
	mov eax,dword ptr [ebp-0x168]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x168]
	mov eax,dword ptr [edx+0x78]
	call eax
	test eax,eax
	je Block196

 Block194:
	mov ecx,dword ptr [ebp-0x168]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0x14C4],eax
	cmp dword ptr [ebp-0x14C4],0
	je Block196

 Block195:
	mov ecx,dword ptr [ebp-0x14C4]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0x14C8],eax
	lea edx,[ebp-0x1C]
	push edx
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x4C]
	push ecx
	lea edx,[ebp-0x114]
	push edx
	lea eax,[ebp-0x20]
	push eax
	mov ecx,dword ptr [ebp-0x14C8]
	push ecx
	mov ecx,dword ptr [ebp-0x168]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x1C]
	push eax
	lea ecx,[ebp-0x3C]
	push ecx
	lea edx,[ebp-0x4C]
	push edx
	lea eax,[ebp-0x114]
	push eax
	lea ecx,[ebp-0x20]
	push ecx
	mov edx,dword ptr [ebp-0x14C8]
	push edx
	mov ecx,dword ptr [ebp-0x168]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x1C]
	push ecx
	lea edx,[ebp-0x3C]
	push edx
	lea eax,[ebp-0x4C]
	push eax
	lea ecx,[ebp-0x114]
	push ecx
	lea edx,[ebp-0x20]
	push edx
	mov eax,dword ptr [ebp-0x14C8]
	push eax
	mov ecx,dword ptr [ebp-0x168]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::ApplyWeaponOption

 Block196:
	lea ecx,[ebp-0x1C0]
	call ZArray<unsigned long>::_ctor_default
	mov byte ptr [ebp-4],0x14
	lea edx,[ebp-0x1C0]
	push edx
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetOnlinePartyMemberID
	mov dword ptr [ebp-0x48],0
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::GetPhase
	push eax
	lea eax,[ebp-0x48]
	push eax
	lea ecx,[ebp-0x1700]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov ecx,dword ptr [eax+4]
	push ecx
	mov edx,dword ptr [eax]
	push edx
	lea eax,[ebp-0x1C0]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::GetCharacterId
	push eax
	call TSingleton<CAffectedAreaPool>::GetInstance
	mov ecx,eax
	call CAffectedAreaPool::GetAr01AreaMAD
	mov dword ptr [ebp-0x134],eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	call CSkillInfo::IsMobChaseAttack
	add esp,8
	mov dword ptr [ebp-0x148],eax
	call get_update_time
	mov dword ptr [ebp-0x44],eax
	mov dword ptr [ebp-0x14CC],0
	jmp Block198

 Block197:
	mov eax,dword ptr [ebp-0x14CC]
	add eax,1
	mov dword ptr [ebp-0x14CC],eax

 Block198:
	mov ecx,dword ptr [ebp-0x14CC]
	cmp ecx,dword ptr [ebp-0x7C]
	jge Block241

 Block199:
	mov edx,dword ptr [ebp-0x14CC]
	imul edx,0x98
	lea eax,[ebp+edx-0xAAC]
	mov dword ptr [ebp-0x14D0],eax
	mov ecx,dword ptr [ebp-0x134]
	push ecx
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetDragonFuryDamage
	push eax
	mov edx,dword ptr [ebp+0x14]
	push edx
	mov eax,dword ptr [ebp-0x7C]
	add eax,dword ptr [ebp+0x10]
	push eax
	mov ecx,dword ptr [ebp-0x1C]
	push ecx
	mov edx,dword ptr [ebp-0x3C]
	push edx
	mov eax,dword ptr [ebp-0x4C]
	push eax
	mov ecx,dword ptr [ebp-0x114]
	push ecx
	mov edx,dword ptr [ebp-0x20]
	push edx
	mov eax,dword ptr [ebp-0x14D0]
	add eax,0x54
	push eax
	mov ecx,dword ptr [ebp-0x14D0]
	add ecx,0x18
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x30]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov edx,dword ptr [ebp-0x118]
	push edx
	mov eax,dword ptr [ebp-0x20E0]
	add eax,0x4848
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x4840
	sub esp,8
	mov edx,esp
	mov dword ptr [ebp-0x1704],esp
	push ecx
	mov ecx,edx
	call ZRef<PassiveSkillData>::_ctor_copy
	mov dword ptr [ebp-0x21BC],eax
	mov eax,dword ptr [ebp-0x21BC]
	mov dword ptr [ebp-0x21C0],eax
	mov byte ptr [ebp-4],0x15
	lea ecx,[ebp-0x170C]
	push ecx
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x21C4],eax
	mov edx,dword ptr [ebp-0x21C4]
	mov dword ptr [ebp-0x21C8],edx
	mov byte ptr [ebp-4],0x16
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	push eax
	mov ecx,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [ecx]
	call CMob::GetMobStat
	push eax
	mov edx,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [edx]
	call CMob::GetMobID
	push eax
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetSecondaryStat
	push eax
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetBasicStat
	push eax
	mov ecx,dword ptr [ebp-0x21C8]
	call ZRef<CharacterData>::op_star
	push eax
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::GetCalcDamage
	mov byte ptr [ebp-4],0x17
	mov ecx,eax
	call CalcDamage::MDamage_1
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x170C]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp dword ptr [ebp+8],0
	je Block202

 Block200:
	push 0
	mov eax,dword ptr [ebp-0x14D0]
	add eax,0x18
	push eax
	mov ecx,dword ptr [ebp-0x14CC]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::AdjustDamageDecRate
	test eax,eax
	je Block202

 Block201:
	mov eax,dword ptr [ebp-0x14CC]
	add eax,1
	mov dword ptr [ebp-0x7C],eax
	jmp Block241

 Block202:
	mov ecx,dword ptr [ebp-0x40]
	mov dword ptr [ebp-0x14D8],ecx
	cmp dword ptr [ebp-0x170],0x2195AD
	je Block204

 Block203:
	cmp dword ptr [ebp-0x170],0x231C4A
	jne Block206

 Block204:
	mov eax,dword ptr [ebp-0x7C]
	cdq
	sub eax,edx
	sar eax,1
	cmp dword ptr [ebp-0x14CC],eax
	jge Block206

 Block205:
	xor edx,edx
	cmp dword ptr [ebp-0x40],0
	sete dl
	mov dword ptr [ebp-0x14D8],edx
	jmp Block212

 Block206:
	cmp dword ptr [ebp-0x170],0x205D2F
	je Block211

 Block207:
	cmp dword ptr [ebp-0x170],0x21E3CF
	je Block211

 Block208:
	cmp dword ptr [ebp-0x170],0x236A70
	je Block211

 Block209:
	cmp dword ptr [ebp-0x170],0x1EA20AC
	je Block211

 Block210:
	cmp dword ptr [ebp-0x170],0xB8CC9B
	jne Block212

 Block211:
	mov dword ptr [ebp-0x14D8],1

 Block212:
	mov dword ptr [ebp-0x14DC],0
	jmp Block214

 Block213:
	mov eax,dword ptr [ebp-0x14DC]
	add eax,1
	mov dword ptr [ebp-0x14DC],eax

 Block214:
	mov ecx,dword ptr [ebp-0x14DC]
	cmp ecx,dword ptr [ebp-0x118]
	jge Block237

 Block215:
	mov edx,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nFixedDamage
	mov dword ptr [ebp-0x14E8],eax
	cmp dword ptr [ebp-0x14E8],0
	jle Block218

 Block216:
	mov eax,dword ptr [ebp-0x14DC]
	mov ecx,dword ptr [ebp-0x14D0]
	cmp dword ptr [ecx+eax*4+0x18],0
	jle Block218

 Block217:
	mov edx,dword ptr [ebp-0x14DC]
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [ebp-0x14E8]
	mov dword ptr [eax+edx*4+0x18],ecx

 Block218:
	mov edx,dword ptr [ebp-0x170]
	push edx
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block220

 Block219:
	mov ecx,dword ptr [ebp-0x14DC]
	mov edx,dword ptr [ebp-0x14D0]
	mov dword ptr [edx+ecx*4+0x18],0

 Block220:
	mov dword ptr [ebp-0x14E4],1
	mov dword ptr [ebp-0x14EC],0
	mov dword ptr [ebp-0x14F0],0
	cmp dword ptr [ebp-0x170],0x151D849
	jne Block226

 Block221:
	push 0
	push 0x64
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0x14FC],eax
	push 0
	push 0x64
	mov eax,dword ptr [ebp-0x1C4]
	push eax
	call _zmin_long
	add esp,8
	push eax
	call _zmax_long
	add esp,8
	xor ecx,ecx
	cmp dword ptr [ebp-0x14FC],eax
	setl cl
	mov dword ptr [ebp-0x1500],ecx
	mov edx,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [edx]
	call CMob::GetPushedDamage
	mov ecx,dword ptr [ebp-0x14DC]
	mov edx,dword ptr [ebp-0x14D0]
	cmp dword ptr [edx+ecx*4+0x18],eax
	jl Block225

 Block222:
	cmp dword ptr [ebp-0x1500],0
	je Block225

 Block223:
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax]
	call CMob::IsBossMob
	test eax,eax
	jne Block225

 Block224:
	mov dword ptr [ebp-0x14E4],5
	lea ecx,[ebp-0x1714]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	mov esi,dword ptr [esi]
	add esi,eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0xFFFFFDA8
	add eax,0x12C
	add esi,eax
	mov dword ptr [ebp-0x14EC],esi

 Block225:
	jmp Block230

 Block226:
	cmp dword ptr [ebp-0x170],0x1E9D289
	je Block228

 Block227:
	cmp dword ptr [ebp-0x170],0x1E9F9A3
	jne Block230

 Block228:
	mov eax,dword ptr [ebp-0x14DC]
	mov ecx,dword ptr [ebp-0x14D0]
	cmp dword ptr [ecx+eax*4+0x18],0
	jle Block230

 Block229:
	mov dword ptr [ebp-0x14E4],3
	lea edx,[ebp-0x171C]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov eax,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	mov dword ptr [ebp-0x14EC],ecx
	lea edx,[ebp-0x1724]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov eax,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	mov dword ptr [ebp-0x14F0],ecx

 Block230:
	mov edx,dword ptr [ebp-0x14DC]
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax+edx*4+0x18]
	mov dword ptr [ebp-0x14F8],ecx
	push 0
	lea edx,[ebp-0x14F8]
	push edx
	push 1
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	mov ecx,dword ptr [ebp-0x58]
	push ecx
	call CItemInfo::CheckDamageModifiedByEquipUpgrade
	add esp,0x14
	test eax,eax
	je Block232

 Block231:
	mov edx,dword ptr [ebp-0x14DC]
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [ebp-0x14F8]
	mov dword ptr [eax+edx*4+0x18],ecx

 Block232:
	mov edx,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nWeaponID
	mov dword ptr [ebp-0x14F4],eax
	lea eax,[ebp-0x172C]
	push eax
	call TSingleton<CWvsContext>::GetInstance
	mov ecx,eax
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x21CC],eax
	mov ecx,dword ptr [ebp-0x21CC]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x14E0],eax
	lea ecx,[ebp-0x172C]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp dword ptr [ebp-0x14F4],0
	je Block235

 Block233:
	mov ecx,dword ptr [ebp-0x14E0]
	add ecx,0x151
	call ZRef<GW_ItemSlotBase>::op_arrow
	add eax,0xC
	mov ecx,eax
	call TSecType<long>::op_t
	cmp dword ptr [ebp-0x14F4],eax
	je Block235

 Block234:
	mov ecx,dword ptr [ebp-0x14DC]
	mov edx,dword ptr [ebp-0x14D0]
	mov dword ptr [edx+ecx*4+0x18],0
	push 0
	push 0
	push 0
	push 0
	push 1
	mov eax,dword ptr [ebp-0x148]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1730],esp
	mov edx,dword ptr [ebp-0x14CC]
	push edx
	push ecx
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::operator()
	mov dword ptr [ebp-0x21D0],eax
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax+0x94]
	push ecx
	mov edx,dword ptr [eax+0x90]
	push edx
	mov eax,dword ptr [ebp-0x14DC]
	push eax
	mov ecx,dword ptr [ebp-0x14DC]
	mov edx,dword ptr [ebp-0x14D0]
	mov eax,dword ptr [edx+ecx*4+0x54]
	push eax
	mov ecx,dword ptr [ebp-0x14DC]
	mov edx,dword ptr [ebp-0x14D0]
	mov eax,dword ptr [edx+ecx*4+0x18]
	push eax
	mov ecx,dword ptr [ebp-0x14D8]
	push ecx
	mov edx,dword ptr [ebp-0x14D0]
	mov eax,dword ptr [edx+4]
	push eax
	mov ecx,dword ptr [ebp-0x14D0]
	mov edx,dword ptr [ebp-0x11C]
	add edx,dword ptr [ecx+0x10]
	push edx
	mov eax,dword ptr [ebp-0x170]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::GetCharacterId
	push eax
	mov ecx,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [ecx]
	call CMob::AddDamageInfo
	jmp Block236

 Block235:
	push 0
	mov edx,dword ptr [ebp-0x14F0]
	push edx
	mov eax,dword ptr [ebp-0x14EC]
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x14E4]
	push ecx
	mov edx,dword ptr [ebp-0x148]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x1734],esp
	mov ecx,dword ptr [ebp-0x14CC]
	push ecx
	push eax
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::operator()
	mov dword ptr [ebp-0x21D4],eax
	mov edx,dword ptr [ebp-0x14D0]
	mov eax,dword ptr [edx+0x94]
	push eax
	mov ecx,dword ptr [edx+0x90]
	push ecx
	mov edx,dword ptr [ebp-0x14DC]
	push edx
	mov eax,dword ptr [ebp-0x14DC]
	mov ecx,dword ptr [ebp-0x14D0]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0x14DC]
	mov ecx,dword ptr [ebp-0x14D0]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	mov eax,dword ptr [ebp-0x14D8]
	push eax
	mov ecx,dword ptr [ebp-0x14D0]
	mov edx,dword ptr [ecx+4]
	push edx
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [ebp-0x11C]
	add ecx,dword ptr [eax+0x10]
	push ecx
	mov edx,dword ptr [ebp-0x170]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::GetCharacterId
	push eax
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax]
	call CMob::AddDamageInfo

 Block236:
	jmp Block213

 Block237:
	mov ecx,dword ptr [ebp-0x30]
	push ecx
	mov edx,dword ptr [ebp-0x170]
	push edx
	mov eax,dword ptr [ebp-0x118]
	push eax
	mov ecx,dword ptr [ebp-0x7C]
	push ecx
	mov edx,dword ptr [ebp-0x44]
	push edx
	mov eax,dword ptr [ebp-0x14D0]
	mov ecx,dword ptr [eax]
	call CMob::GetMobStat
	push eax
	push 2
	call CalcDamage::GetCounterDamage
	add esp,0x1C
	mov dword ptr [ebp-0x14D4],eax
	cmp dword ptr [ebp-0x14D4],0
	je Block240

 Block238:
	mov ecx,dword ptr [ebp-0x38]
	call CWvsContext::IsAdminAccount
	test eax,eax
	jne Block240

 Block239:
	mov ecx,dword ptr [ebp-0x14D4]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::ShowCounterDamage

 Block240:
	mov edx,dword ptr [ebp-0x30]
	push edx
	mov eax,dword ptr [ebp-0x170]
	push eax
	mov ecx,dword ptr [ebp-0x118]
	push ecx
	mov edx,dword ptr [ebp-0x7C]
	push edx
	mov eax,dword ptr [ebp-0x44]
	push eax
	mov ecx,dword ptr [ebp-0x14D0]
	mov edx,dword ptr [ecx]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUserLocal::TryDoingItemSkill
	jmp Block197

 Block241:
	mov eax,dword ptr [ebp-0x170]
	mov dword ptr [ebp-0x21D8],eax
	cmp dword ptr [ebp-0x21D8],0x236A69
	jg Block251

 Block242:
	cmp dword ptr [ebp-0x21D8],0x236A69
	je Block263

 Block243:
	cmp dword ptr [ebp-0x21D8],0x205D2F
	jg Block248

 Block244:
	cmp dword ptr [ebp-0x21D8],0x205D2F
	je Block267

 Block245:
	cmp dword ptr [ebp-0x21D8],0x20361A
	je Block259

 Block246:
	cmp dword ptr [ebp-0x21D8],0x205D29
	je Block263

 Block247:
	jmp Block282

 Block248:
	cmp dword ptr [ebp-0x21D8],0x21E3C9
	je Block263

 Block249:
	cmp dword ptr [ebp-0x21D8],0x21E3CF
	je Block267

 Block250:
	jmp Block282

 Block251:
	cmp dword ptr [ebp-0x21D8],0x1522669
	jg Block256

 Block252:
	cmp dword ptr [ebp-0x21D8],0x1522669
	je Block280

 Block253:
	cmp dword ptr [ebp-0x21D8],0x236A70
	je Block267

 Block254:
	cmp dword ptr [ebp-0x21D8],0xB8CC9B
	je Block267

 Block255:
	jmp Block282

 Block256:
	cmp dword ptr [ebp-0x21D8],0x152748A
	je Block281

 Block257:
	cmp dword ptr [ebp-0x21D8],0x1EA20AC
	je Block267

 Block258:
	jmp Block282

 Block259:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea edx,[ebp-0x1510]
	push edx
	call SECRECT::ToRect
	add esp,8
	lea eax,[ebp-0x173C]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	sub eax,0x28
	push eax
	lea ecx,[ebp-0x1744]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0x1510]
	push ecx
	call OffsetRect
	mov edx,dword ptr [ebp+8]
	cmp dword ptr [edx+0x20C],0
	je Block261

 Block260:
	mov al,byte ptr [ebp+0xC]
	mov byte ptr [ebp-0x21D9],al
	jmp Block262

 Block261:
	mov ecx,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	call eax
	mov byte ptr [ebp-0x21D9],al

 Block262:
	movzx ecx,byte ptr [ebp-0x21D9]
	push ecx
	lea edx,[ebp-0x1748]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetSpecialUOL
	mov dword ptr [ebp-0x21E0],eax
	mov eax,dword ptr [ebp-0x21E0]
	mov dword ptr [ebp-0x21E4],eax
	mov byte ptr [ebp-4],0x18
	lea ecx,[ebp-0x1510]
	push ecx
	mov ecx,dword ptr [ebp-0x21E4]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterExplosionAnimation
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x1748]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block282

 Block263:
	mov edx,dword ptr [ebp-0x68]
	sub edx,0x28
	mov dword ptr [ebp-0x68],edx
	mov eax,dword ptr [ebp-0x60]
	sub eax,0x28
	mov dword ptr [ebp-0x60],eax
	mov ecx,dword ptr [ebp+8]
	cmp dword ptr [ecx+0x20C],0
	je Block265

 Block264:
	mov dl,byte ptr [ebp+0xC]
	mov byte ptr [ebp-0x21E5],dl
	jmp Block266

 Block265:
	mov eax,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	call eax
	mov byte ptr [ebp-0x21E5],al

 Block266:
	movzx ecx,byte ptr [ebp-0x21E5]
	push ecx
	lea edx,[ebp-0x174C]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetSpecialUOL
	mov dword ptr [ebp-0x21EC],eax
	mov eax,dword ptr [ebp-0x21EC]
	mov dword ptr [ebp-0x21F0],eax
	mov byte ptr [ebp-4],0x19
	lea ecx,[ebp-0x6C]
	push ecx
	mov ecx,dword ptr [ebp-0x21F0]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterExplosionAnimation
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x174C]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block282

 Block267:
	mov edx,dword ptr [ebp-0x170]
	mov dword ptr [ebp-0x21F4],edx
	cmp dword ptr [ebp-0x21F4],0x236A70
	jg Block272

 Block268:
	cmp dword ptr [ebp-0x21F4],0x236A70
	je Block276

 Block269:
	cmp dword ptr [ebp-0x21F4],0x205D2F
	je Block275

 Block270:
	cmp dword ptr [ebp-0x21F4],0x21E3CF
	je Block276

 Block271:
	jmp Block277

 Block272:
	cmp dword ptr [ebp-0x21F4],0xB8CC9B
	je Block275

 Block273:
	cmp dword ptr [ebp-0x21F4],0x1EA20AC
	je Block276

 Block274:
	jmp Block277

 Block275:
	mov dword ptr [ebp-0x1524],0xBB8
	jmp Block277

 Block276:
	mov dword ptr [ebp-0x1524],0xAC8

 Block277:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[ebp-0x1520]
	push ecx
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea edx,[ebp-0x1754]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov eax,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x175C]
	push edx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov eax,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	lea edx,[ebp-0x1520]
	push edx
	call adjust_rect
	add esp,0x10
	lea eax,[ebp-0x1760]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetTileUOL
	mov dword ptr [ebp-0x21F8],eax
	mov ecx,dword ptr [ebp-0x21F8]
	mov dword ptr [ebp-0x21FC],ecx
	mov byte ptr [ebp-4],0x1A
	push 0
	push 0xFF
	push 0x80
	mov edx,dword ptr [ebp-0x1524]
	push edx
	push 0xB4
	lea eax,[ebp-0x1520]
	push eax
	mov ecx,dword ptr [ebp-0x21FC]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFootHoldAnimation
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x1760]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov ecx,dword ptr [ebp-0x20E0]
	mov edx,dword ptr [ebp-0x11C]
	mov dword ptr [ecx+0x3B34],edx
	mov eax,dword ptr [ebp-0x11C]
	add eax,0xBB8
	mov ecx,dword ptr [ebp-0x20E0]
	mov dword ptr [ecx+0x3B38],eax
	cmp dword ptr [ebp-0x170],0x1EA20AC
	jne Block279

 Block278:
	fld qword ptr [__real_4030000000000000]
	fstp qword ptr [ebp-0x152C]
	push 0
	push 0
	mov edx,dword ptr [ebp-0x110]
	push edx
	push 0
	sub esp,8
	fld qword ptr [ebp-0x152C]
	fstp qword ptr [esp]
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::Effect_Tremble
	push 0x9B
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::GetLayerZ
	sub eax,2
	push eax
	push 0xE1
	push 0x546
	push 0x5DC
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFadeInOutAnimation

 Block279:
	jmp Block282

 Block280:
	fld qword ptr [__real_4030000000000000]
	fstp qword ptr [ebp-0x1534]
	push 0
	push 0
	mov eax,dword ptr [ebp-0x110]
	push eax
	push 0
	sub esp,8
	fld qword ptr [ebp-0x1534]
	fstp qword ptr [esp]
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::Effect_Tremble
	jmp Block282

 Block281:
	push 0x9B
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x88
	call CAvatar::GetLayerZ
	sub eax,2
	push eax
	push 0xE1
	push 0x546
	push 0x5DC
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFadeInOutAnimation

 Block282:
	push 0x5F
	mov ecx,dword ptr [ebp-0x30]
	imul ecx,0x18
	add ecx,offset ActionData::m_saCharacterActions+12
	push ecx
	call GETCRC32Svr_long
	add esp,8
	mov dword ptr [ebp-0x80],eax
	jmp Block284

 Block284:
	mov dword ptr [ebp-0x1AC],0x19DEA1BD
	mov dword ptr [ebp-0x14],0xBE02FF0A
	push 0
	lea edx,[ebp-0x14]
	push edx
	lea eax,[ebp-0x1BC]
	push eax
	call DR_check
	add esp,0xC
	mov dword ptr [ebp-0x164],eax
	mov dword ptr [ebp-0x150],0x19DEA1BD
	mov dword ptr [ebp-0x10],0xBE02FF0A
	call _rand
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0x54],edx
	mov edx,dword ptr [ebp-0x54]
	add edx,0x40
	mov dword ptr [ebp-0x54],edx
	mov eax,dword ptr [ebp-0x54]
	mov ecx,dword ptr [eax*4+_D_G_HSAFEWS232ADRL]
	push ecx
	lea edx,[ebp-0x10]
	push edx
	lea eax,[ebp-0x160]
	push eax
	call DR_check
	add esp,0xC
	mov dword ptr [ebp-0x144],eax
	push 0x31
	lea ecx,[ebp-0x130]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],0x1B
	call get_field
	mov ecx,eax
	call CField::GetFieldKey
	movzx ecx,al
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1BC]
	not edx
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1B8]
	not eax
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x7C]
	shl ecx,4
	or ecx,dword ptr [ebp-0x118]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1B4]
	not edx
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1B0]
	not eax
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x170]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x58]
	movzx eax,byte ptr [edx+0x539]
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	push 0
	mov ecx,dword ptr [ebp-0x1BC]
	push ecx
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0x78],eax
	mov edx,dword ptr [ebp-0x78]
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	push 0
	push 0
	push 0
	mov eax,dword ptr [ebp-0x78]
	push eax
	push 4
	lea ecx,[ebp-0x164]
	push ecx
	call CCrc32::GetCrc32
	add esp,0x18
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x160]
	not edx
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x15C]
	not eax
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x158]
	not ecx
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x154]
	not edx
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	push 0
	mov eax,dword ptr [ebp-0x160]
	push eax
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0x50],eax
	mov ecx,dword ptr [ebp-0x50]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp-0x50]
	push edx
	push 4
	lea eax,[ebp-0x144]
	push eax
	call CCrc32::GetCrc32
	add esp,0x18
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	cmp dword ptr [ebp+8],0
	je Block286

 Block285:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1B7C]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x2200],eax
	mov edx,dword ptr [ebp-0x2200]
	mov dword ptr [ebp-0x2204],edx
	mov byte ptr [ebp-4],0x1C
	mov eax,dword ptr [ebp-0x1FE0]
	or eax,4
	mov dword ptr [ebp-0x1FE0],eax
	mov ecx,dword ptr [ebp-0x2204]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x2208],eax
	jmp Block287

 Block286:
	mov dword ptr [ebp-0x2208],0

 Block287:
	mov ecx,dword ptr [ebp-0x2208]
	mov dword ptr [ebp-0x5C],ecx
	mov dword ptr [ebp-4],0x1B
	mov edx,dword ptr [ebp-0x1FE0]
	and edx,4
	je Block289

 Block288:
	and dword ptr [ebp-0x1FE0],0xFFFFFFFB
	lea ecx,[ebp-0x1B7C]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block289:
	cmp dword ptr [ebp+8],0
	je Block291

 Block290:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1F98]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x220C],eax
	mov ecx,dword ptr [ebp-0x220C]
	mov dword ptr [ebp-0x2210],ecx
	mov byte ptr [ebp-4],0x1D
	mov edx,dword ptr [ebp-0x1FE0]
	or edx,8
	mov dword ptr [ebp-0x1FE0],edx
	mov ecx,dword ptr [ebp-0x2210]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x2214],eax
	jmp Block292

 Block291:
	mov dword ptr [ebp-0x2214],0

 Block292:
	mov eax,dword ptr [ebp-0x2214]
	mov dword ptr [ebp-0x120],eax
	mov dword ptr [ebp-4],0x1B
	mov ecx,dword ptr [ebp-0x1FE0]
	and ecx,8
	je Block294

 Block293:
	and dword ptr [ebp-0x1FE0],0xFFFFFFF7
	lea ecx,[ebp-0x1F98]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block294:
	mov edx,dword ptr [ebp-0x5C]
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x120]
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	cmp dword ptr [ebp-0x170],0x205D29
	je Block299

 Block295:
	cmp dword ptr [ebp-0x170],0x21E3C9
	je Block299

 Block296:
	cmp dword ptr [ebp-0x170],0x236A69
	je Block299

 Block297:
	cmp dword ptr [ebp-0x170],0x1518A28
	je Block299

 Block298:
	cmp dword ptr [ebp-0x170],0x151FF59
	jne Block300

 Block299:
	mov ecx,dword ptr [ebp+0x14]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4

 Block300:
	push 0
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x40]
	shl edx,0xF
	mov eax,dword ptr [ebp-0x30]
	and eax,0x7FFF
	or edx,eax
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	mov ecx,dword ptr [ebp-0x80]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	movzx edx,byte ptr [ebp-0x16C]
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp+0x10]
	shl eax,4
	or eax,dword ptr [ebp-0x194]
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov ecx,dword ptr [ebp-0x44]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x48]
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	jmp Block302

 Block302:
	lea eax,[ebp-0x188]
	push eax
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov dword ptr [ebp-0x17C],0
	mov dword ptr [ebp-0x180],0x7FFFFFFF
	mov dword ptr [ebp-0x14CC],0
	jmp Block304

 Block303:
	mov eax,dword ptr [ebp-0x14CC]
	add eax,1
	mov dword ptr [ebp-0x14CC],eax

 Block304:
	mov ecx,dword ptr [ebp-0x14CC]
	cmp ecx,dword ptr [ebp-0x7C]
	jge Block320

 Block305:
	mov edx,dword ptr [ebp-0x14CC]
	imul edx,0x98
	lea eax,[ebp+edx-0xAAC]
	mov dword ptr [ebp-0x1538],eax
	lea ecx,[ebp-0x1540]
	push ecx
	mov edx,dword ptr [ebp-0x1538]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [ecx]
	add ecx,4
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [ebp-0x1540]
	sub ecx,dword ptr [ebp-0x188]
	mov dword ptr [ebp-0x1A8],ecx
	mov edx,dword ptr [ebp-0x153C]
	sub edx,dword ptr [ebp-0x184]
	mov dword ptr [ebp-0x18],edx
	mov eax,dword ptr [ebp-0x1A8]
	imul eax,dword ptr [ebp-0x1A8]
	mov ecx,dword ptr [ebp-0x18]
	imul ecx,dword ptr [ebp-0x18]
	add eax,ecx
	mov dword ptr [ebp-0x1544],eax
	mov edx,dword ptr [ebp-0x1544]
	cmp edx,dword ptr [ebp-0x180]
	jge Block307

 Block306:
	mov eax,dword ptr [ebp-0x1544]
	mov dword ptr [ebp-0x180],eax
	mov ecx,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [ecx]
	call CMob::GetMobID
	mov dword ptr [ebp-0x17C],eax

 Block307:
	mov edx,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [edx]
	call CMob::GetMobID
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1538]
	movzx ecx,byte ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [edx]
	call CMob::IsLeft
	shl eax,7
	mov ecx,dword ptr [ebp-0x1538]
	mov edx,dword ptr [ecx+8]
	and edx,0x7F
	or eax,edx
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp-0x1538]
	movzx ecx,byte ptr [eax+0xC]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [edx]
	call CMob::GetCurTemplate
	test eax,eax
	je Block310

 Block308:
	mov eax,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov esi,eax
	mov ecx,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [ecx]
	call CMob::GetCurTemplate
	cmp esi,eax
	je Block310

 Block309:
	mov dword ptr [ebp-0x2218],1
	jmp Block311

 Block310:
	mov dword ptr [ebp-0x2218],0

 Block311:
	mov esi,dword ptr [ebp-0x2218]
	shl esi,7
	mov edx,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [edx]
	call CMob::GetCalcDamageStatIndex
	and eax,0x7F
	or esi,eax
	push esi
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	lea eax,[ebp-0x1FA0]
	push eax
	mov ecx,dword ptr [ebp-0x1538]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [eax]
	add ecx,4
	mov edx,dword ptr [edx+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	lea edx,[ebp-0x1FA8]
	push edx
	mov eax,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1538]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	lea edx,[ebp-0x1FB0]
	push edx
	mov eax,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1538]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	lea edx,[ebp-0x1FB8]
	push edx
	mov eax,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1538]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	mov edx,dword ptr [ebp-0x1538]
	movzx eax,word ptr [edx+0x10]
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	mov dword ptr [ebp-0x1548],0
	jmp Block313

 Block312:
	mov ecx,dword ptr [ebp-0x1548]
	add ecx,1
	mov dword ptr [ebp-0x1548],ecx

 Block313:
	mov edx,dword ptr [ebp-0x1548]
	cmp edx,dword ptr [ebp-0x118]
	jge Block319

 Block314:
	mov eax,dword ptr [ebp-0x1548]
	mov ecx,dword ptr [ebp-0x1538]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	call TSingleton<CDamageMeter>::IsInstantiated
	test eax,eax
	je Block316

 Block315:
	mov eax,dword ptr [ebp-0x1548]
	mov ecx,dword ptr [ebp-0x1538]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CDamageMeter>::GetInstance
	mov ecx,eax
	call CDamageMeter::AddDamageInfo

 Block316:
	call TSingleton<CBattleRecordMan>::IsInstantiated
	test eax,eax
	je Block318

 Block317:
	push 0
	mov eax,dword ptr [ebp-0x1548]
	mov ecx,dword ptr [ebp-0x1538]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0x1548]
	mov ecx,dword ptr [ebp-0x1538]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CBattleRecordMan>::GetInstance
	mov ecx,eax
	call CBattleRecordMan::SetBattleDamageInfo

 Block318:
	jmp Block312

 Block319:
	mov eax,dword ptr [ebp-0x1538]
	mov ecx,dword ptr [eax]
	call CMob::GetCrc
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode4
	jmp Block303

 Block320:
	mov ecx,dword ptr [ebp-0x17C]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	call CUser::SetTargetID
	cmp dword ptr [ebp+8],0
	jne Block325

 Block321:
	mov dword ptr [ebp-0x154C],0
	push 0xA2
	mov edx,dword ptr [ebp-0x140]
	push edx
	lea eax,[ebp-0x1588]
	push eax
	lea ecx,[ebp-0x6C]
	push ecx
	call TSingleton<CUserPool>::GetInstance
	mov ecx,eax
	call CUserPool::FindHitUserInRectWithReason
	mov dword ptr [ebp-0x154C],eax
	mov dword ptr [ebp-0x14CC],0
	jmp Block323

 Block322:
	mov edx,dword ptr [ebp-0x14CC]
	add edx,1
	mov dword ptr [ebp-0x14CC],edx

 Block323:
	mov eax,dword ptr [ebp-0x14CC]
	cmp eax,dword ptr [ebp-0x154C]
	jge Block325

 Block324:
	mov ecx,dword ptr [ebp-0x14CC]
	mov edx,dword ptr [ebp+ecx*4-0x1588]
	mov dword ptr [ebp-0x159C],edx
	push 0xDB
	lea ecx,[ebp-0x1598]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],0x1E
	mov ecx,dword ptr [ebp-0x159C]
	call CUser::GetCharacterId
	push eax
	lea ecx,[ebp-0x1598]
	call COutPacket::Encode4
	push 0xA2
	lea ecx,[ebp-0x1598]
	call COutPacket::Encode4
	lea eax,[ebp-0x1598]
	push eax
	call SendPacket
	add esp,4
	mov byte ptr [ebp-4],0x1B
	lea ecx,[ebp-0x1598]
	call COutPacket::~COutPacket
	jmp Block322

 Block325:
	lea ecx,[ebp-0x1FC0]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	lea ecx,[ebp-0x1FC8]
	push ecx
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,4
	mov edx,dword ptr [ebp-0x20E0]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_not
	neg eax
	sbb eax,eax
	add eax,1
	mov dword ptr [ebp-0x1A4],eax
	movzx ecx,byte ptr [ebp-0x1A4]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode1
	cmp dword ptr [ebp-0x1A4],0
	je Block327

 Block326:
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x221C],eax
	lea edx,[ebp-0x1FD0]
	push edx
	mov eax,dword ptr [ebp-0x221C]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x221C]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2
	mov ecx,dword ptr [ebp-0x20E0]
	add ecx,0x2EA8
	call ZRef<CDragon>::op_arrow
	add eax,4
	mov dword ptr [ebp-0x2220],eax
	lea edx,[ebp-0x1FD8]
	push edx
	mov eax,dword ptr [ebp-0x2220]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x2220]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x130]
	call COutPacket::Encode2

 Block327:
	lea edx,[ebp-0x130]
	push edx
	call SendPacket
	add esp,4
	lea ecx,[ebp-0x178]
	call ActionRandMan::PreventRollback
	mov dword ptr [ebp-0x1FDC],1
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x130]
	call COutPacket::~COutPacket
	mov byte ptr [ebp-4],0x13
	lea ecx,[ebp-0x1C0]
	call ZArray<unsigned long>::~ZArray<unsigned long>
	mov byte ptr [ebp-4],8
	lea ecx,[ebp-0x10C]
	call CSkill_HitAni::~CSkill_HitAni
	mov byte ptr [ebp-4],7
	lea ecx,[ebp-0x70]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x138]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x178]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1FDC]

 Block328:
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	mov esp,ebp
	pop ebp
	ret 0x10
}
}
// CUserLocal::OnOpenSkillGuide
__SUB_CLASS_THIS(0050E6A0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 1
	push 3
	call CWvsContext::UI_Open
	mov ecx,dword ptr [TSingleton<CUISkill>::ms_pInstance]
	test ecx,ecx
	je Block2

 Block1:
	call CUISkill::OpenCurSkillGuide

 Block2:
	ret 4
}
}
// CUserLocal::ClearToolTip
__SUB_CLASS_THIS0(00507220, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	add ecx,0x3BD8
	jmp  CUIToolTip::ClearToolTip
}
}
// CUserLocal::FollowCharacterFailedMsg
_SUB_EXCEPTION_HANDLER(510C70)
__SUB_CLASS_THIS(00510C70, __thiscall, 41386,  CUserLocal, void, long, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_510C70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jl Block19

 Block1:
	dec eax
	cmp eax,5
	ja Block16

 Block2:
	cmp EAX, 0
je Block3
cmp EAX, 1
je Block4
cmp EAX, 2
je Block12
cmp EAX, 3
je Block13
cmp EAX, 4
je Block14
cmp EAX, 5
je Block15


 Block3:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0x16DB
	push eax
	jmp Block18

 Block4:
	mov ecx,dword ptr [esp+0x24]
	push ecx
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	call CUserPool::GetUser
	test eax,eax
	jne Block6

 Block5:
	push eax
	push 1
	push eax
	push eax
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push 0x16DB
	push edx
	jmp Block18

 Block6:
	mov eax,dword ptr [eax+0x19EC]
	push 0xFFFFFFFF
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::CreateFromCharStr
	mov dword ptr [esp+0x18],0
	mov dword ptr [esp+0x20],0
	lea eax,[esp+8]
	push 0x16DC
	push eax
	mov byte ptr [esp+0x20],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov esi,dword ptr [esp+0x24]
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x28]
	push ecx
	mov byte ptr [esp+0x24],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x14]
	add esp,0xC
	mov byte ptr [esp+0x18],1
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	push 0
	push 1
	push 0
	push 0
	push ecx
	lea edx,[esp+0x34]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push edx
	call ZXString<char>::_ctor_copy
	call CUtilDlg::Notice
	mov eax,dword ptr [esp+0x34]
	add esp,0x14
	mov byte ptr [esp+0x18],0
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test esi,esi
	je Block19

 Block11:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 8

 Block12:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0x16DD
	push eax
	jmp Block18

 Block13:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0x16DE
	jmp Block17

 Block14:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push 0x16DF
	push edx
	jmp Block18

 Block15:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0x16E0
	push eax
	jmp Block18

 Block16:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0x16DA

 Block17:
	push ecx

 Block18:
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block19:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 8
}
}
// CUserLocal::CheckBoobyTrapPickUpRequest
__SUB_CLASS_THIS(00506190, __thiscall, 41445,  CUserLocal, void, uint32_t) {
__asm {

 Block0:
	mov eax,dword ptr [esp+4]
	push ebx
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push esi
	push edi
	mov edi,eax
	shr edi,0x10
	and edi,0xFF
	mov esi,ecx
	cmp edi,0x52
	jne Block8

 Block1:
	test eax,0x1000000
	jne Block8

 Block2:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	call edx
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block8

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block8

 Block4:
	mov ecx,esi
	call CUser::IsSneak
	test eax,eax
	jne Block8

 Block5:
	mov edx,dword ptr [esi+0x640]
	and edx,0xFFFFFFFE
	cmp edx,0x12
	je Block8

 Block6:
	mov ecx,esi
	call CUserLocal::IsStun
	test eax,eax
	jne Block8

 Block7:
	lea eax,[esi+0x4680]
	push eax
	mov ecx,ebx
	call CWvsContext::CheckBoobyTrapPickUpRequest

 Block8:
	mov ecx,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	push edi
	call CFuncKeyMappedMan::FuncKeyMapped
	mov cl,byte ptr [eax]
	test cl,cl
	je Block19

 Block9:
	mov eax,dword ptr [eax+1]
	test eax,eax
	je Block19

 Block10:
	cmp cl,5
	jne Block19

 Block11:
	cmp eax,0x32
	jne Block19

 Block12:
	mov ecx,esi
	call CUser::IsDarkSight
	test eax,eax
	jne Block19

 Block13:
	mov ecx,esi
	call CUser::IsWindWalk
	test eax,eax
	jne Block19

 Block14:
	mov ecx,esi
	call CUser::IsSneak
	test eax,eax
	jne Block19

 Block15:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block19

 Block16:
	mov ecx,esi
	call CUserLocal::IsAttract
	test eax,eax
	jne Block19

 Block17:
	cmp dword ptr [esi+0x3AD4],eax
	jne Block19

 Block18:
	add esi,0x4680
	push esi
	mov ecx,ebx
	call CWvsContext::CheckBoobyTrapPickUpRequest

 Block19:
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CUserLocal::RevisePassiveSkillData
__SUB_CLASS_THIS0(005042E0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x4844]
	mov eax,dword ptr [eax+0x54]
	test eax,eax
	jg Block2

 Block1:
	xor eax,eax
	jmp Block4

 Block2:
	cmp eax,0x64
	jl Block4

 Block3:
	mov eax,0x64

 Block4:
	mov edx,dword ptr [ecx+0x4844]
	mov dword ptr [edx+0x54],eax
	mov eax,dword ptr [ecx+0x4844]
	mov eax,dword ptr [eax+0x6C]
	test eax,eax
	jg Block6

 Block5:
	xor eax,eax
	jmp Block8

 Block6:
	cmp eax,0x32
	jl Block8

 Block7:
	mov eax,0x32

 Block8:
	mov edx,dword ptr [ecx+0x4844]
	mov dword ptr [edx+0x6C],eax
	mov eax,dword ptr [ecx+0x4844]
	mov eax,dword ptr [eax+0x70]
	test eax,eax
	jg Block10

 Block9:
	mov ecx,dword ptr [ecx+0x4844]
	xor eax,eax
	mov dword ptr [ecx+0x70],eax
	ret

 Block10:
	cmp eax,0x32
	jge Block12

 Block11:
	mov ecx,dword ptr [ecx+0x4844]
	mov dword ptr [ecx+0x70],eax
	ret

 Block12:
	mov edx,dword ptr [ecx+0x4844]
	mov eax,0x32
	mov dword ptr [edx+0x70],eax
	ret
}
}
// CUserLocal::TryDoingTeleport
__SUB_CLASS_THIS0(00532C00, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0xC
	push esi
	mov esi,ecx
	call get_update_time
	cmp dword ptr [esi+0x3B24],0
	mov dword ptr [esp+4],eax
	je Block13

 Block1:
	mov ecx,dword ptr [esi+0x3B34]
	sub ecx,eax
	test ecx,ecx
	jg Block13

 Block2:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block4

 Block3:
	lea edx,[eax-0xC]
	jmp Block5

 Block4:
	xor edx,edx

 Block5:
	mov eax,dword ptr [esi+0x3B30]
	mov ecx,dword ptr [esi+0x3B2C]
	push ebx
	push ebp
	push edi
	lea edi,[edx+0xC]
	mov edx,dword ptr [edi]
	push eax
	mov eax,dword ptr [edx+0x40]
	push ecx
	push edi
	call eax
	test eax,eax
	jge Block7

 Block6:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push edi
	push eax
	call _com_issue_errorex

 Block7:
	mov ecx,dword ptr [esi+0x3B2C]
	lea edi,[esi+0x199C]
	lea ebx,[edi+0xC]
	push ecx
	mov ecx,ebx
	call TSecType<long>::SetData
	mov edx,dword ptr [esi+0x3B30]
	push edx
	mov ecx,edi
	call TSecType<long>::SetData
	mov ecx,ebx
	lea ebp,[esi+0x1984]
	call TSecType<long>::GetData
	push eax
	lea ecx,[ebp+0xC]
	call TSecType<long>::SetData
	mov ecx,edi
	call TSecType<long>::GetData
	push eax
	mov ecx,ebp
	call TSecType<long>::SetData
	mov eax,dword ptr [esp+0x10]
	xor ebx,ebx
	mov dword ptr [esi+0x3B34],eax
	add eax,0x258
	mov dword ptr [esi+0x3B24],ebx
	mov dword ptr [esi+0x3B38],eax
	cmp dword ptr [esi+0x3B3C],ebx
	je Block12

 Block8:
	mov eax,dword ptr [esi+0x3B40]
	push eax
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	je Block12

 Block9:
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x14]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,dword ptr [esi+0x3B40]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x10]
	push edx
	push eax
	push edi
	mov dword ptr [esp+0x1C],ebx
	call CSkillInfo::GetSkillLevel_0
	cmp eax,ebx
	jle Block12

 Block10:
	mov edi,dword ptr [esp+0x10]
	cmp edi,ebx
	je Block12

 Block11:
	xor edx,edx
	push edx
	xor ecx,ecx
	push ecx
	push ebx
	push eax
	push edi
	mov ecx,esi
	call CUserLocal::TryDoingBodyAttack

 Block12:
	pop edi
	pop ebp
	mov dword ptr [esi+0x3B3C],ebx
	mov dword ptr [esi+0x3B40],ebx
	pop ebx

 Block13:
	pop esi
	add esp,0xC
	ret
}
}
// ActionRandMan::~ActionRandMan
__SUB_CLASS_THIS0(00504A00, __thiscall, 24070,  ActionRandMan, void) {
__asm {

 Block0:
	push ecx
	cmp dword ptr [ecx],0
	je Block3

 Block1:
	push esi
	mov esi,dword ptr [ecx+4]
	lea eax,[esi+0x18]
	push eax
	lea ecx,[esp+8]
	call ZSynchronizedHelper<ZFatalSection>::_ctor_0
	mov eax,dword ptr [esi+0x14]
	mov ecx,dword ptr [esi+0xC]
	mov edx,dword ptr [esi+0x10]
	mov dword ptr [esi+8],eax
	mov eax,dword ptr [esp+4]
	mov dword ptr [esi],ecx
	mov dword ptr [esi+4],edx
	add dword ptr [eax+4],0xFFFFFFFF
	pop esi
	jne Block3

 Block2:
	mov dword ptr [eax],0

 Block3:
	pop ecx
	ret
}
}
// CUserLocal::OnBalloonMsg
_SUB_EXCEPTION_HANDLER(51D780)
__SUB_CLASS_THIS(0051D780, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_51D780
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov esi,dword ptr [esp+0x38]
	lea eax,[esp+0x18]
	xor ebx,ebx
	push eax
	mov ecx,esi
	mov dword ptr [esp+0x20],ebx
	call CInPacket::DecodeStr
	mov ecx,esi
	mov dword ptr [esp+0x30],ebx
	call CInPacket::Decode2
	movzx ecx,ax
	mov dword ptr [esp+0x20],ecx
	mov ecx,esi
	call CInPacket::Decode2
	movzx edi,ax
	mov ecx,esi
	imul edi,0x3E8
	call CInPacket::Decode1
	movzx eax,al
	mov dword ptr [esp+0x38],ebx
	test eax,eax
	jne Block10

 Block1:
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov dword ptr [esp+0x38],eax
	call CInPacket::Decode4
	mov esi,eax
	mov dword ptr [esp+0x14],ebx
	mov ebx,1
	lea eax,[esp+0x14]
	mov byte ptr [esp+0x30],1
	mov dword ptr [esp+0x1C],ebx

 Block2:
	mov eax,dword ptr [eax]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block4

 Block3:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block4:
	mov ecx,dword ptr [esp+0x3C]
	mov edx,dword ptr [esp+0x24]
	push esi
	push ecx
	push edi
	push edx
	lea eax,[esp+0x2C]
	push eax
	mov ecx,ebp
	call CUserLocal::ShowBallonMsg
	mov dword ptr [esp+0x30],0
	test bl,1
	je Block7

 Block5:
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block7

 Block6:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block7:
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 4

 Block10:
	lea ecx,[ebp+0x88]
	call CAvatar::GetHeight
	mov esi,0xFFFFFFF1
	sub esi,eax
	lea eax,[ebp+0x193C]
	jmp Block2
}
}
// CUserLocal::GetMonsterCardCount
_SUB_EXCEPTION_HANDLER(50E3A0)
__SUB(0050E3A0, __cdecl, 41380,  long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50E3A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x10]
	push eax
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [esp+0x28]
	mov esi,dword ptr [esp+0x14]
	push ecx
	push esi
	mov dword ptr [esp+0x28],0
	call CMonsterBookAccessor::GetCount
	add esp,8
	mov ebx,eax
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test esi,esi
	je Block5

 Block1:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov eax,ebx

 Block5:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret
}
}
// CUserLocal::OnResolveMoveAction
_SUB_EXCEPTION_HANDLER(508030)
__SUB_CLASS_THIS(00508030, __thiscall, 41388,  CUserLocal, long, long, long, long, const CVecCtrl*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_508030
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	mov dword ptr [esp+0x18],ebx
	cmp dword ptr [esp+0x48],ebx
	jne Block2

 Block1:
	cmp dword ptr [esp+0x4C],ebx
	je Block8

 Block2:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	mov edi,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,esi
	call edx
	mov ebp,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	push 0x64
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebp]
	push eax
	push ecx
	lea edx,[esp+0x2C]
	push edx
	mov ecx,edi
	call CPortalList::FindPortal_Hidden
	mov ecx,dword ptr [esp+0x24]
	sub esp,8
	mov eax,esp
	mov dword ptr [eax+4],ecx
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x48],0
	mov dword ptr [esp+0x20],esp
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block4:
	mov ecx,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	call CPortalList::SetHiddenPortal
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block8

 Block5:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block8

 Block6:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block8

 Block7:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block8:
	mov eax,dword ptr [esi+0x63C]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	jne Block10

 Block9:
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [eax+0x69]
	push edx
	add eax,0x61
	mov ebx,1
	push eax
	mov dword ptr [esp+0x48],ebx
	mov dword ptr [esp+0x20],ebx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov byte ptr [esp+0x17],bl
	test eax,eax
	jne Block11

 Block10:
	mov byte ptr [esp+0x17],0

 Block11:
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test bl,1
	je Block16

 Block12:
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block16

 Block13:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block16

 Block14:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block16

 Block15:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block16:
	cmp byte ptr [esp+0x17],0
	je Block28

 Block17:
	mov ebx,dword ptr [esp+0x50]
	mov eax,ebx
	and eax,0xFFFFFFFE
	cmp eax,4
	je Block27

 Block18:
	mov eax,dword ptr [esi+0x19E0]
	test eax,eax
	je Block20

 Block19:
	lea edx,[eax-0xC]
	jmp Block21

 Block20:
	xor edx,edx

 Block21:
	mov eax,dword ptr [esi+0x2F1C]
	mov ecx,dword ptr [esi+0x2F18]
	lea edi,[edx+0xC]
	mov edx,dword ptr [edi]
	push eax
	mov eax,dword ptr [edx+0x40]
	push ecx
	push edi
	call eax
	test eax,eax
	jge Block23

 Block22:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push edi
	push eax
	call _com_issue_errorex

 Block23:
	mov esi,dword ptr [esi+0x19E0]
	test esi,esi
	je Block25

 Block24:
	lea eax,[esi-0xC]
	jmp Block26

 Block25:
	xor eax,eax

 Block26:
	mov dword ptr [eax+0x280],1

 Block27:
	mov eax,ebx
	and eax,1
	or eax,4
	jmp Block43

 Block28:
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [eax+0x69]
	push edx
	add eax,0x61
	push eax
	mov dword ptr [esp+0x48],2
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	mov eax,dword ptr [esp+0x1C]
	sete bl
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block33

 Block29:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block32

 Block30:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block32

 Block31:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block32:
	mov dword ptr [esp+0x1C],0

 Block33:
	test bl,bl
	je Block35

 Block34:
	mov eax,dword ptr [esp+0x50]
	and eax,1
	or eax,0x12
	jmp Block43

 Block35:
	mov eax,dword ptr [esi+0x3B9C]
	push eax
	lea ecx,[esi+0x3B94]
	push ecx
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	je Block37

 Block36:
	mov eax,dword ptr [esp+0x50]
	and eax,1
	or eax,0x14
	jmp Block43

 Block37:
	cmp dword ptr [esi+0x3B6C],0
	mov edi,dword ptr [esp+0x54]
	je Block42

 Block38:
	cmp dword ptr [edi+0x1A0],0
	jne Block41

 Block39:
	mov ecx,edi
	call CVecCtrl::IsOnLadder
	test eax,eax
	jne Block41

 Block40:
	mov ecx,edi
	call CVecCtrl::IsOnRope
	test eax,eax
	je Block42

 Block41:
	mov dword ptr [esi+0x3B6C],0

 Block42:
	mov edx,dword ptr [esp+0x50]
	mov eax,dword ptr [esp+0x4C]
	mov ecx,dword ptr [esp+0x48]
	push edi
	push edx
	push eax
	push ecx
	mov ecx,esi
	call CUser::OnResolveMoveAction

 Block43:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 0x10
}
}
// CUserLocal::TryDoingSmoothingMovingShootAttack
_SUB_EXCEPTION_HANDLER(52DE70)
__SUB_CLASS_THIS0(0052DE70, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_52DE70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xEE4
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xEF8]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0xB0],ebx
	xor ebp,ebp
	mov dword ptr [esp+0xC4],ebp
	call get_update_time
	mov dword ptr [esp+0xB4],eax
	cmp dword ptr [ebx+0x480C],ebp
	je Block529

 Block1:
	sub eax,dword ptr [ebx+0x4810]
	js Block529

 Block2:
	mov eax,dword ptr [ebx+0x481C]
	mov ecx,dword ptr [ebx+0x4818]
	mov edx,dword ptr [ebx+0x4820]
	mov esi,dword ptr [ebx+0x4814]
	mov dword ptr [esp+0xD0],eax
	mov eax,dword ptr [ebx+0x4824]
	mov dword ptr [esp+0x48],ecx
	mov ecx,dword ptr [ebx+0x4828]
	mov dword ptr [esp+0x9C],edx
	mov edx,dword ptr [ebx+0x482C]
	mov dword ptr [esp+0xD4],eax
	mov eax,dword ptr [ebx+0x4830]
	mov dword ptr [esp+0xB8],ecx
	mov ecx,dword ptr [ebx+0x4834]
	mov dword ptr [esp+0x6C],edx
	mov edx,dword ptr [ebx+0x4838]
	mov dword ptr [esp+0x104],eax
	mov eax,dword ptr [ebx+0x483C]
	mov dword ptr [ebx+0x480C],ebp
	mov dword ptr [esp+0x58],esi
	mov dword ptr [esp+0x110],ecx
	mov dword ptr [esp+0x118],edx
	mov dword ptr [esp+0x120],eax
	cmp esi,ebp
	je Block5

 Block3:
	mov ecx,dword ptr [esi]
	push ecx
	mov ecx,ebx
	call CUserLocal::GetSkillLevel
	cmp eax,dword ptr [esp+0x48]
	jne Block529

 Block4:
	mov ebp,dword ptr [esi]

 Block5:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0xFC]
	push edx
	mov dword ptr [esp+0x38],ebp
	mov dword ptr [esp+0x80],ecx
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0xFC]
	mov dword ptr [esp+0xCC],esi
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp ebp,0x1F962F1
	je Block7

 Block6:
	mov eax,dword ptr [ebx+4]
	mov edx,dword ptr [eax+0x10]
	lea edi,[ebx+4]
	lea ecx,[esp+0xBC]
	push ecx
	mov ecx,edi
	call edx
	mov dword ptr [esp+0x2C],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0xA8]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [esp+0x2C]
	mov edx,dword ptr [ecx]
	push eax
	push edx
	lea ecx,[ebx+0x3BA4]
	call CAntiRepeat::TryRepeat
	test eax,eax
	je Block529

 Block7:
	mov eax,dword ptr [ebx+0x58C]
	push eax
	call get_weapon_type
	add esp,4
	push eax
	push ebp
	mov dword ptr [ebx+0x63C],0x1388
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push esi
	call CSkillInfo::GetShootSkillRange
	mov dword ptr [esp+0x74],eax
	mov eax,dword ptr [ebx+0x640]
	and eax,1
	mov edi,eax
	lea ecx,[ebx+0x614]
	mov dword ptr [esp+0xC8],edi
	call TSecType<long>::GetData
	mov edx,dword ptr [ebx+4]
	mov edx,dword ptr [edx+0x10]
	push eax
	mov eax,dword ptr [ebx+0x5F8]
	lea esi,[ebx+4]
	push eax
	lea eax,[esp+0xC4]
	push eax
	mov ecx,esi
	call edx
	push eax
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x40]
	mov ecx,ebx
	call edx
	push eax
	push ebp
	call GetShootAttackPt0
	mov ecx,dword ptr [esp+0xE4]
	add esp,0x14
	mov dword ptr [esp+0xA8],eax
	mov dword ptr [esp+0xAC],edx
	test edi,edi
	je Block9

 Block8:
	neg ecx

 Block9:
	add eax,ecx
	mov dword ptr [esp+0xBC],eax
	mov eax,dword ptr [esp+0x74]
	test edi,edi
	je Block11

 Block10:
	neg eax

 Block11:
	mov ecx,dword ptr [esp+0xA8]
	mov edi,dword ptr [esp+0xAC]
	lea ebp,[ecx+eax]
	mov eax,dword ptr [esp+0xBC]
	cmp eax,ebp
	mov dword ptr [esp+0x40],ebp
	mov dword ptr [esp+0x44],edi
	mov dword ptr [esp+0x84],eax
	jl Block13

 Block12:
	mov dword ptr [esp+0x84],ebp

 Block13:
	cmp ebp,eax
	mov dword ptr [esp+0x88],edi
	mov dword ptr [esp+0x8C],eax
	jl Block15

 Block14:
	mov dword ptr [esp+0x8C],ebp

 Block15:
	mov eax,dword ptr [esp+0x34]
	lea edx,[edi+1]
	push eax
	mov dword ptr [esp+0x94],edx
	call get_vertical_adjust_of_attack_range
	add esp,4
	test eax,eax
	jle Block17

 Block16:
	mov ecx,dword ptr [esp+0x90]
	lea edx,[eax+ecx]
	mov ecx,dword ptr [esp+0x8C]
	push edx
	mov edx,dword ptr [esp+0x8C]
	push ecx
	sub edx,eax
	mov eax,dword ptr [esp+0x8C]
	push edx
	push eax
	lea ecx,[esp+0x94]
	push ecx
	call SetRect
	jmp Block19

 Block17:
	mov edx,dword ptr [esp+0x34]
	push edx
	call is_attack_area_set_by_data
	add esp,4
	test eax,eax
	je Block19

 Block18:
	mov eax,dword ptr [esp+0x48]
	mov ecx,dword ptr [esp+0x58]
	push eax
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[esp+0x88]
	push ecx
	call SECRECT::ToRect
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x10]
	mov edi,dword ptr [ebx+0x640]
	add esp,8
	lea eax,[esp+0x5C]
	push eax
	mov ecx,esi
	call edx
	not edi
	and edi,1
	mov dword ptr [esp+0x2C],eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	push edi
	lea ecx,[esp+0x10C]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [esp+0x30]
	mov edx,dword ptr [ecx]
	push eax
	push edx
	lea eax,[esp+0x90]
	push eax
	call adjust_rect
	mov edi,dword ptr [esp+0xBC]
	add esp,0x10

 Block19:
	cmp dword ptr [esp+0x58],0
	mov dword ptr [esp+0x38],0
	je Block21

 Block20:
	mov ecx,dword ptr [esp+0x48]
	push ecx
	mov ecx,dword ptr [esp+0x5C]
	call SKILLENTRY::GetLevelData
	mov edx,dword ptr [eax+0x15C]
	push edx
	add eax,0x154
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov dword ptr [esp+0x68],eax
	jmp Block22

 Block21:
	mov dword ptr [esp+0x68],1

 Block22:
	xor eax,eax
	mov dword ptr [esp+0x74],eax
	mov dword ptr [esp+0xF00],eax
	mov eax,dword ptr [esp+0x34]
	push eax
	call is_rect_attack_shoot_skill
	add esp,4
	test eax,eax
	je Block24

 Block23:
	mov ecx,dword ptr [esp+0x68]
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	lea edx,[esp+0x144]
	push edx
	lea eax,[esp+0xA4]
	push eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [esp+0x38],eax
	jmp Block34

 Block24:
	mov ecx,dword ptr [esp+0x34]
	push ecx
	mov dword ptr [esp+0x12C],0
	call is_guided_bullet_skill
	add esp,4
	test eax,eax
	jne Block26

 Block25:
	mov edx,dword ptr [esp+0xBC]
	mov eax,dword ptr [esp+0xA8]
	mov ecx,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	push 1
	push 4
	push edi
	push ebp
	push edx
	push eax
	call CMobPool::FindHitMobInTrapezoid
	mov dword ptr [esp+0x128],eax
	jmp Block27

 Block26:
	mov eax,dword ptr [esp+0x128]

 Block27:
	test eax,eax
	jne Block29

 Block28:
	mov ecx,dword ptr [esp+0xBC]
	mov edx,dword ptr [esp+0xA8]
	push eax
	push 4
	push edi
	push ebp
	push ecx
	mov ecx,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	push edx
	call CMobPool::FindHitMobInTrapezoid
	mov dword ptr [esp+0x128],eax
	test eax,eax
	je Block34

 Block29:
	mov ecx,dword ptr [esp+0x84]
	sub esp,0x10
	mov edx,esp
	mov dword ptr [edx],ecx
	mov ecx,dword ptr [esp+0x98]
	mov dword ptr [edx+4],ecx
	mov ecx,dword ptr [esp+0x9C]
	mov dword ptr [edx+8],ecx
	mov ecx,dword ptr [esp+0xA0]
	mov dword ptr [edx+0xC],ecx
	lea edx,[esp+0x6C]
	push edx
	mov ecx,eax
	call CMob::GetHitPoint
	mov eax,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	mov edx,dword ptr [esi]
	mov dword ptr [esp+0x2C],eax
	mov eax,dword ptr [edx+0x18]
	mov ecx,esi
	call eax
	push eax
	mov eax,dword ptr [esp+0xAC]
	lea ecx,[esp+0x64]
	push ecx
	mov ecx,dword ptr [esp+0x34]
	lea edx,[esp+0x64]
	push edx
	push edi
	push eax
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	jne Block31

 Block30:
	mov dword ptr [esp+0x128],eax
	jmp Block34

 Block31:
	mov ecx,dword ptr [esp+0x128]
	test ecx,ecx
	je Block34

 Block32:
	mov edx,dword ptr [esp+0x84]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x98]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x9C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0xA0]
	mov dword ptr [eax+0xC],edx
	lea eax,[esp+0x6C]
	push eax
	mov dword ptr [esp+0x4C],1
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax+4]
	mov ebp,dword ptr [eax]
	lea edx,[esp+0x2C]
	mov dword ptr [esp+0x44],ecx
	mov ecx,dword ptr [esp+0x128]
	push edx
	mov dword ptr [esp+0x44],ebp
	call CMob::GetVecCtrl
	push eax
	lea ecx,[esp+0x78]
	call _x_com_ptr<IWzVector2D>::op_assign_copy
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block34

 Block33:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block34:
	mov esi,dword ptr [esp+0x58]
	test esi,esi
	je Block36

 Block35:
	mov eax,dword ptr [esp+0x48]
	push eax
	mov ecx,esi
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [eax+0x138]
	push ecx
	add eax,0x130
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp eax,1
	mov dword ptr [esp+0x94],eax
	jg Block37

 Block36:
	mov dword ptr [esp+0x94],1

 Block37:
	mov ecx,dword ptr [esp+0x44]
	sub ecx,edi
	mov edx,ecx
	mov eax,ebp
	imul edx,ecx
	sub eax,dword ptr [esp+0xBC]
	mov ecx,eax
	imul ecx,eax
	add edx,ecx
	mov dword ptr [esp+0x2C],edx
	fild dword ptr [esp+0x2C]
	call __CIsqrt
	fstp qword ptr [esp+0x5C]
	mov dword ptr [esp+0x68],0
	mov byte ptr [esp+0xF00],1
	test esi,esi
	je Block43

 Block38:
	cmp dword ptr [esi+0x20C],0
	je Block40

 Block39:
	mov al,byte ptr [esp+0x48]
	jmp Block41

 Block40:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+4]
	mov ecx,ebx
	call eax

 Block41:
	mov ecx,dword ptr [esp+0x48]
	push 0
	push eax
	push ecx
	lea edx,[esp+0x38]
	push edx
	mov ecx,esi
	call SKILLENTRY::GetBallUOL
	push eax
	lea ecx,[esp+0x6C]
	call Ztl_bstr_t::op_assign
	mov ecx,dword ptr [esp+0x2C]
	test ecx,ecx
	je Block43

 Block42:
	call _xbstr_t::Data_t::Release

 Block43:
	push esi
	call is_shoot_skill_not_showing_bullet
	add esp,4
	test eax,eax
	jne Block72

 Block44:
	fld qword ptr [esp+0x5C]
	fmul qword ptr [__real_3ff8000000000000]
	call __ftol2_sse
	mov ecx,dword ptr [esp+0x9C]
	mov dword ptr [esp+0x54],eax
	mov eax,dword ptr [esp+0x34]
	push 0
	push eax
	push ecx
	call CUser::GetBulletDelay
	add esp,0xC
	cmp dword ptr [esp+0x94],0
	mov dword ptr [esp+0x2C],eax
	mov dword ptr [esp+0x50],0
	jle Block72

 Block45:
	mov eax,dword ptr [esp+0x94]
	mov ebp,dword ptr [esp+0x44]
	mov esi,dword ptr [esp+0xB4]
	lea edx,[eax*8]
	sub edx,eax
	sub ebp,edx
	add ebp,7
	jmp Block47

 Block47:
	cmp dword ptr [esp+0xB8],0
	mov eax,dword ptr [esp+0x44]
	mov edi,dword ptr [esp+0x40]
	mov dword ptr [esp+0x60],eax
	jne Block54

 Block48:
	mov ecx,dword ptr [esp+0x34]
	push ecx
	call is_shoot_skill_not_consuming_bullet
	add esp,4
	test eax,eax
	jne Block54

 Block49:
	mov edx,dword ptr [esp+0x34]
	push edx
	call is_guided_bullet_skill
	add esp,4
	test eax,eax
	jne Block54

 Block50:
	cmp dword ptr [esp+0x34],0x1F962F1
	je Block54

 Block51:
	mov eax,dword ptr [esp+0xD4]
	test eax,eax
	jne Block53

 Block52:
	mov eax,dword ptr [esp+0x9C]

 Block53:
	push eax
	mov eax,dword ptr [ebx+0x58C]
	push eax
	push ecx
	lea eax,[esp+0x74]
	mov ecx,esp
	mov dword ptr [esp+0x68],esp
	push eax
	call Ztl_bstr_t::_ctor_copy
	lea ecx,[ebx+0x1960]
	mov byte ptr [esp+0xF0C],4
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	lea edx,[esp+0x88]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov eax,dword ptr [esp+0xC0]
	mov ecx,dword ptr [esp+0xD0]
	mov edx,dword ptr [esp+0x68]
	push ebp
	push edi
	push eax
	push ecx
	add edx,esi
	push edx
	mov byte ptr [esp+0xF28],1
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push esi
	call CAnimationDisplayer::RegisterBulletAnimation
	jmp Block71

 Block54:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x40]
	mov ecx,ebx
	call edx
	push eax
	call get_soul_arrow
	add eax,0x22C
	mov eax,dword ptr [eax]
	add esp,4
	mov dword ptr [esp+0x4C],eax
	test eax,eax
	je Block56

 Block55:
	add eax,8
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block56:
	mov eax,dword ptr [esp+0x68]
	test eax,eax
	je Block60

 Block57:
	cmp dword ptr [eax],0
	je Block60

 Block58:
	mov eax,dword ptr [eax]
	test eax,eax
	je Block60

 Block59:
	mov eax,dword ptr [eax-4]
	shr eax,1
	jne Block61

 Block60:
	lea eax,[esp+0x4C]
	jmp Block62

 Block61:
	lea eax,[esp+0x68]

 Block62:
	mov eax,dword ptr [eax]
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x64],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block64

 Block63:
	add eax,8
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block64:
	mov edi,dword ptr [ebx+0x1960]
	mov byte ptr [esp+0xF08],3
	test edi,edi
	je Block77

 Block65:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0xB0]
	lea ecx,[esp+0x44]
	push ecx
	push edi
	mov dword ptr [esp+0x4C],0
	call edx
	test eax,eax
	jge Block67

 Block66:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block67:
	mov eax,dword ptr [esp+0x44]
	push eax
	mov eax,dword ptr [esp+0x80]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x118],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block69

 Block68:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block69:
	mov eax,dword ptr [esp+0x50]
	mov ecx,dword ptr [esp+0xCC]
	mov edx,dword ptr [esp+0x64]
	push ebp
	push eax
	mov eax,dword ptr [esp+0xC4]
	push eax
	push ecx
	add edx,esi
	push edx
	mov byte ptr [esp+0xF24],2
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push esi
	call CAnimationDisplayer::RegisterMagicBulletAnimation
	mov ecx,dword ptr [esp+0x4C]
	mov byte ptr [esp+0xF00],1
	test ecx,ecx
	je Block71

 Block70:
	call _xbstr_t::Data_t::Release

 Block71:
	mov eax,dword ptr [esp+0x50]
	add esi,dword ptr [esp+0x2C]
	inc eax
	add ebp,0xE
	cmp eax,dword ptr [esp+0x94]
	mov dword ptr [esp+0x50],eax
	jl Block47

 Block72:
	cmp dword ptr [esp+0x38],0
	mov dword ptr [esp+0x30],0
	jle Block80

 Block73:
	lea esi,[esp+0x1F4]
	jmp Block75

 Block75:
	push 0x98
	lea edi,[esi-8]
	push 0
	push edi
	call _memset
	mov eax,dword ptr [esp+0x3C]
	mov ebp,dword ptr [esp+eax*4+0x134]
	mov dword ptr [edi],ebp
	mov ecx,dword ptr [ebp+0x174]
	add esp,0xC
	cmp dword ptr [ecx+0x220],0
	jle Block78

 Block76:
	call _rand
	mov ecx,dword ptr [ebp+0x174]
	cdq
	idiv dword ptr [ecx+0x220]
	add edx,7
	jmp Block79

 Block77:
	push 0x80004003
	call _com_issue_error

 Block78:
	or edx,0xFFFFFFFF

 Block79:
	mov ecx,dword ptr [edi]
	push 0
	mov dword ptr [esi-4],edx
	call CMob::GetCurrentAction
	mov ebp,dword ptr [edi]
	push 0
	mov ecx,ebp
	mov dword ptr [esi],eax
	call CMob::GetCurrentAction
	mov edx,dword ptr [ebp+0x400]
	mov ecx,dword ptr [ebp+0x458]
	lea eax,[eax+eax*4]
	push edx
	lea ecx,[ecx+eax*4]
	call ZList<ZRef<CActionMan::MOBACTIONFRAMEENTRY>>::IndexOf
	mov edx,dword ptr [esp+0x84]
	mov ecx,dword ptr [esp+0x88]
	sub esp,0x10
	mov dword ptr [esi+4],eax
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x9C]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [esp+0xA0]
	mov dword ptr [eax+8],edx
	lea edx,[esp+0x50]
	mov dword ptr [eax+0xC],ecx
	mov ecx,dword ptr [edi]
	push edx
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax]
	mov dword ptr [esi+0x88],ecx
	mov edx,dword ptr [eax+4]
	mov eax,ecx
	sub eax,dword ptr [esp+0xBC]
	mov dword ptr [esi+0x8C],edx
	cdq
	xor eax,edx
	sub eax,edx
	mov dword ptr [esp+0x2C],eax
	fild dword ptr [esp+0x2C]
	fmul qword ptr [__real_3ff8000000000000]
	fadd qword ptr [__real_0000000000000000]
	call __ftol2_sse
	mov dword ptr [esi+8],eax
	mov eax,dword ptr [esp+0x30]
	inc eax
	add esi,0x98
	cmp eax,dword ptr [esp+0x38]
	mov dword ptr [esp+0x30],eax
	jl Block75

 Block80:
	mov eax,dword ptr [esp+0x38]
	xor edx,edx
	xor ebp,ebp
	cmp dword ptr [esp+0xC8],ebp
	push eax
	sete dl
	lea ecx,[esp+0x1F0]
	push ecx
	push edx
	call sort_attackInfo_by_distance
	mov ecx,dword ptr [esp+0x88]
	add esp,0xC
	push 0xB
	lea eax,[esp+0x44]
	push eax
	mov dword ptr [esp+0x44],ebp
	mov dword ptr [esp+0x5C],ebp
	mov dword ptr [esp+0x54],ebp
	mov dword ptr [esp+0x58],ebp
	mov dword ptr [esp+0x80],ebp
	call CWvsContext::GetRealEquipSlot
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x44]
	cmp eax,ebp
	je Block85

 Block81:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block84

 Block82:
	mov ecx,dword ptr [esp+0x44]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x44]
	cmp ecx,ebp
	je Block84

 Block83:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block84:
	mov dword ptr [esp+0x44],ebp

 Block85:
	cmp esi,ebp
	je Block89

 Block86:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x78]
	mov ecx,esi
	call eax
	test eax,eax
	je Block89

 Block87:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebp
	je Block89

 Block88:
	mov ecx,dword ptr [eax+0x68]
	push ecx
	add eax,0x60
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov edi,edx
	add esp,8
	shr edi,0x1F
	add edi,edx
	lea edx,[esp+0x78]
	push edx
	lea eax,[esp+0x54]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,dword ptr [esi+0x115]
	lea edx,[esp+0x60]
	push edx
	lea eax,[esp+0x4C]
	push eax
	push edi
	push ecx
	lea edx,[esi+0x111]
	push edx
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	push eax
	mov ecx,ebx
	call CUserLocal::ApplyWeaponOption
	lea ecx,[esp+0x78]
	push ecx
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x54]
	push eax
	mov eax,dword ptr [esi+0x11D]
	lea ecx,[esp+0x60]
	push ecx
	lea edx,[esp+0x4C]
	push edx
	push edi
	push eax
	lea ecx,[esi+0x119]
	push ecx
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	add esp,8
	push edx
	mov ecx,ebx
	call CUserLocal::ApplyWeaponOption
	lea eax,[esp+0x78]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x54]
	push edx
	mov edx,dword ptr [esi+0x125]
	lea eax,[esp+0x60]
	push eax
	lea ecx,[esp+0x4C]
	push ecx
	push edi
	push edx
	add esi,0x121
	push esi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	push eax
	mov ecx,ebx
	call CUserLocal::ApplyWeaponOption

 Block89:
	push 0xA
	lea ecx,[esp+0x44]
	push ecx
	mov ecx,dword ptr [esp+0x84]
	call CWvsContext::GetRealEquipSlot
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x44]
	cmp eax,ebp
	je Block94

 Block90:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block93

 Block91:
	mov edx,dword ptr [esp+0x44]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x44]
	cmp ecx,ebp
	je Block93

 Block92:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block93:
	mov dword ptr [esp+0x44],ebp

 Block94:
	cmp edi,ebp
	je Block99

 Block95:
	lea esi,[edi+0xC]
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x86
	jne Block99

 Block96:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x78]
	mov ecx,edi
	call eax
	test eax,eax
	je Block99

 Block97:
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebp
	je Block99

 Block98:
	mov ecx,dword ptr [eax+0x68]
	push ecx
	add eax,0x60
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov esi,edx
	add esp,8
	shr esi,0x1F
	add esi,edx
	lea edx,[esp+0x78]
	push edx
	lea eax,[esp+0x54]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,dword ptr [edi+0x115]
	lea edx,[esp+0x60]
	push edx
	lea eax,[esp+0x4C]
	push eax
	push esi
	push ecx
	lea edx,[edi+0x111]
	push edx
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	push eax
	mov ecx,ebx
	call CUserLocal::ApplyWeaponOption
	lea ecx,[esp+0x78]
	push ecx
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x54]
	push eax
	mov eax,dword ptr [edi+0x11D]
	lea ecx,[esp+0x60]
	push ecx
	lea edx,[esp+0x4C]
	push edx
	push esi
	push eax
	lea ecx,[edi+0x119]
	push ecx
	call _ZtlSecureFuseHelper<short>::call
	movsx edx,ax
	add esp,8
	push edx
	mov ecx,ebx
	call CUserLocal::ApplyWeaponOption
	lea eax,[esp+0x78]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x54]
	push edx
	mov edx,dword ptr [edi+0x125]
	lea eax,[esp+0x60]
	push eax
	lea ecx,[esp+0x4C]
	push ecx
	push esi
	push edx
	add edi,0x121
	push edi
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	push eax
	mov ecx,ebx
	call CUserLocal::ApplyWeaponOption

 Block99:
	xor esi,esi
	mov dword ptr [esp+0x80],esi
	lea ecx,[esp+0x80]
	push ecx
	mov ecx,dword ptr [esp+0x80]
	mov byte ptr [esp+0xF04],5
	call CWvsContext::GetOnlinePartyMemberID
	mov edx,dword ptr [ebx+4]
	mov edx,dword ptr [edx+0x10]
	mov edi,dword ptr [ebx+0x19E8]
	mov ebp,dword ptr [TSingleton<CAffectedAreaPool>::ms_pInstance]
	lea ecx,[ebx+4]
	lea eax,[esp+0x40]
	mov dword ptr [esp+0x98],esi
	mov esi,dword ptr [ebx+0x2E18]
	push eax
	call edx
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [eax]
	push esi
	lea ecx,[esp+0x9C]
	push ecx
	push edx
	push eax
	lea ecx,[esp+0x90]
	push ecx
	push edi
	mov ecx,ebp
	call CAffectedAreaPool::GetAr01AreaPAD
	mov edi,dword ptr [esp+0x58]
	mov dword ptr [esp+0xF4],eax
	test edi,edi
	je Block101

 Block100:
	mov edx,dword ptr [esp+0x48]
	push edx
	mov ecx,edi
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [eax+0x12C]
	push ecx
	add eax,0x124
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp eax,1
	jg Block102

 Block101:
	mov eax,1

 Block102:
	mov dword ptr [esp+0x2C],eax
	imul eax,dword ptr [esp+0x94]
	cmp eax,0xF
	mov dword ptr [esp+0xF8],eax
	mov dword ptr [esp+0x70],eax
	jl Block104

 Block103:
	mov dword ptr [esp+0x70],0xF

 Block104:
	cmp dword ptr [esp+0x38],0
	mov dword ptr [esp+0x30],0
	jle Block113

 Block105:
	lea ebp,[esp+0x1EC]

 Block106:
	mov edx,dword ptr [esp+0xF4]
	mov eax,dword ptr [esp+0x7C]
	mov eax,dword ptr [eax+0x3FD4]
	mov ecx,dword ptr [esp+0x78]
	push 0
	push 0
	push 0
	push 0
	push edx
	mov edx,dword ptr [esp+0x64]
	push eax
	mov eax,dword ptr [esp+0x64]
	push ecx
	mov ecx,dword ptr [esp+0x70]
	push edx
	mov edx,dword ptr [esp+0x5C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x70]
	push edx
	mov edx,dword ptr [esp+0x98]
	lea esi,[ebp+0x18]
	lea eax,[esi+0x3C]
	push eax
	mov eax,dword ptr [esp+0xCC]
	push esi
	push ecx
	mov ecx,dword ptr [esp+0xA8]
	push edi
	push 0
	push edx
	mov edx,dword ptr [esp+0x13C]
	push 1
	push eax
	mov eax,dword ptr [ebx+0x58C]
	push eax
	push ecx
	push edx
	lea eax,[ebx+0x4848]
	push eax
	mov eax,dword ptr [ebx+0x4844]
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0xA4],esp
	mov dword ptr [ecx+4],eax
	test eax,eax
	je Block108

 Block107:
	add eax,0xFFFFFFF4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block108:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+0x174]
	mov dword ptr [esp+0x16C],ecx
	mov ecx,dword ptr [eax+0x170]
	lea edx,[eax+0x188]
	push ecx
	add eax,0x168
	push eax
	mov byte ptr [esp+0xF6C],6
	mov dword ptr [esp+0xC8],edx
	call _ZtlSecureFuseHelper<unsigned long>::call
	mov edx,dword ptr [esp+0x174]
	mov ecx,dword ptr [esp+0xC8]
	add esp,8
	push edx
	mov edx,dword ptr [esp+0x134]
	push ecx
	push eax
	mov eax,dword ptr [esp+0xEC]
	lea ecx,[eax+0x2148]
	push ecx
	lea ecx,[eax+0x20D0]
	push ecx
	push edx
	lea ecx,[eax+0x3C78]
	mov byte ptr [esp+0xF7C],5
	call CalcDamage::PDamage_3
	test edi,edi
	je Block110

 Block109:
	mov eax,dword ptr [esp+0x30]
	mov ecx,dword ptr [esp+0x48]
	push 0
	push esi
	push eax
	push ecx
	mov ecx,edi
	call SKILLENTRY::AdjustDamageDecRate
	test eax,eax
	jne Block112

 Block110:
	mov eax,dword ptr [esp+0x30]
	inc eax
	add ebp,0x98
	cmp eax,dword ptr [esp+0x38]
	mov dword ptr [esp+0x30],eax
	jl Block106

 Block111:
	jmp Block113

 Block112:
	mov edx,dword ptr [esp+0x30]
	inc edx
	mov dword ptr [esp+0x38],edx

 Block113:
	mov eax,dword ptr [esp+0xCC]
	mov ecx,dword ptr [eax+0x35]
	mov ebx,dword ptr [ebx+0x58C]
	push ecx
	add eax,0x33
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov edx,dword ptr [esp+0xDC]
	mov esi,dword ptr [esp+0x40]
	mov ecx,dword ptr [esp+0x74]
	add esp,8
	push edx
	mov edx,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x60],al
	lea eax,[esp+0x1F0]
	push eax
	mov eax,dword ptr [esp+0x64]
	push esi
	push ecx
	push ebx
	push edx
	push eax
	push edi
	lea ecx,[esp+0x184]
	call CSkill_HitAni::_ctor_0
	xor ebx,ebx
	mov byte ptr [esp+0xF00],7
	cmp edi,ebx
	je Block118

 Block114:
	mov edi,dword ptr [edi]
	cmp edi,0x3D0CEA
	je Block117

 Block115:
	cmp edi,0x4FAA91
	je Block117

 Block116:
	cmp edi,0xD5A36A
	jne Block118

 Block117:
	mov dword ptr [esp+0x9C],ebx
	jmp Block119

 Block118:
	mov dword ptr [esp+0x9C],1

 Block119:
	call get_update_time
	cmp esi,ebx
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0x30],ebx
	jle Block134

 Block120:
	lea esi,[esp+0x1F0]

 Block121:
	xor edi,edi
	cmp dword ptr [esp+0x70],edi
	jle Block129

 Block122:
	lea ebp,[esi+0x14]
	nop

 Block123:
	mov eax,edi
	cdq
	idiv dword ptr [esp+0x2C]
	mov ebx,dword ptr [esi+0x8C]
	add eax,eax
	sub eax,dword ptr [esp+0x94]
	lea ecx,[eax*8]
	sub ecx,eax
	mov eax,dword ptr [esi+0x90]
	lea edx,[eax+ecx+7]
	mov eax,dword ptr [esi-4]
	mov eax,dword ptr [eax+0x174]
	mov ecx,dword ptr [eax+0x1B8]
	push ecx
	add eax,0x1B0
	push eax
	mov dword ptr [esp+0x68],edx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block126

 Block124:
	cmp dword ptr [ebp],0
	jle Block126

 Block125:
	mov dword ptr [ebp],eax

 Block126:
	mov edx,dword ptr [esi-4]
	mov eax,dword ptr [esp+0x34]
	mov ecx,dword ptr [edx+0x174]
	push eax
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block128

 Block127:
	mov dword ptr [ebp],eax

 Block128:
	mov ecx,dword ptr [esp+0xD4]
	mov edx,dword ptr [esp+0x9C]
	push 0
	push 0
	push 0
	push ecx
	push 1
	push edx
	push ecx
	mov ecx,dword ptr [esp+0x4C]
	mov eax,esp
	mov dword ptr [esp+0x5C],esp
	push ecx
	push eax
	lea ecx,[esp+0x188]
	call CSkill_HitAni::operator()
	mov ecx,dword ptr [esp+0x7C]
	mov edx,dword ptr [esp+0xCC]
	mov eax,dword ptr [edx+0x19E8]
	mov edx,dword ptr [ebp+0x3C]
	push ecx
	mov ecx,dword ptr [ebp]
	push ebx
	push edi
	push edx
	mov edx,dword ptr [esp+0xF4]
	push ecx
	mov ecx,dword ptr [esi]
	push edx
	mov edx,dword ptr [esi+0xC]
	add edx,dword ptr [esp+0xE8]
	push ecx
	mov ecx,dword ptr [esp+0x6C]
	push edx
	push ecx
	mov ecx,dword ptr [esi-4]
	push eax
	call CMob::AddDamageInfo
	inc edi
	add ebp,4
	cmp edi,dword ptr [esp+0x70]
	jl Block123

 Block129:
	mov edx,dword ptr [esp+0x6C]
	mov ecx,dword ptr [esp+0x34]
	mov edi,dword ptr [esp+0x38]
	mov eax,dword ptr [esi-4]
	mov ebp,dword ptr [esp+0x3C]
	push edx
	mov edx,dword ptr [esp+0x74]
	push ecx
	push edx
	push edi
	add eax,0x188
	push ebp
	push eax
	push 1
	call CalcDamage::GetCounterDamage
	mov ebx,eax
	add esp,0x1C
	test ebx,ebx
	je Block133

 Block130:
	mov ecx,dword ptr [esp+0x7C]
	add ecx,0x2038
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block133

 Block131:
	mov eax,dword ptr [esp+0x7C]
	cmp dword ptr [eax+0x209C],0
	jne Block133

 Block132:
	mov ecx,dword ptr [esp+0xB0]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x48]
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push ebx
	call eax

 Block133:
	mov ecx,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x34]
	mov eax,dword ptr [esp+0x70]
	push ecx
	mov ecx,dword ptr [esi-4]
	push edx
	push eax
	push edi
	push ebp
	push ecx
	mov ecx,dword ptr [esp+0xC8]
	call CUserLocal::TryDoingItemSkill
	mov eax,dword ptr [esp+0x30]
	inc eax
	add esi,0x98
	cmp eax,edi
	mov dword ptr [esp+0x30],eax
	jl Block121

 Block134:
	mov eax,dword ptr [esp+0x6C]
	push 0
	push 0
	push 0
	push 0x5F
	lea edx,[eax+eax*2]
	mov ebp,4
	lea eax,[edx*8+ActionData::m_saCharacterActions+12]
	push ebp
	push eax
	call CCrc32::GetCrc32
	add esp,0x18
	mov dword ptr [esp+0x5C],eax
	jmp Block136

 Block136:
	push 0
	lea ecx,[esp+0xA8]
	push ecx
	lea edx,[esp+0xE8]
	push edx
	mov dword ptr [esp+0xFC],0x19DEA1BD
	mov dword ptr [esp+0xB0],0xBE02FF0A
	call DR_check
	add esp,0xC
	push 0x30
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0xA4],eax
	call COutPacket::_ctor_1
	mov esi,dword ptr [_D_G_PSTAGE+4]
	mov byte ptr [esp+0xF00],8
	test esi,esi
	je Block138

 Block137:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block139

 Block138:
	xor esi,esi

 Block139:
	mov eax,dword ptr [esp+0x20]
	mov bl,byte ptr [esi+0x168]
	test eax,eax
	jne Block141

 Block140:
	xor edx,edx
	jmp Block142

 Block141:
	mov edx,dword ptr [eax-4]

 Block142:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block147

 Block143:
	test eax,eax
	je Block145

 Block144:
	mov eax,dword ptr [eax-4]

 Block145:
	add eax,eax
	cmp ecx,eax
	ja Block145

 Block146:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block147:
	mov edx,dword ptr [esp+0x24]
	mov byte ptr [eax+edx],bl
	mov eax,dword ptr [esp+0x20]
	mov esi,dword ptr [esp+0xE0]
	mov edi,1
	add dword ptr [esp+0x24],edi
	not esi
	test eax,eax
	jne Block149

 Block148:
	xor edx,edx
	jmp Block150

 Block149:
	mov edx,dword ptr [eax-4]

 Block150:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block155

 Block151:
	test eax,eax
	je Block153

 Block152:
	mov eax,dword ptr [eax-4]
	jmp Block153

 Block153:
	add eax,eax
	cmp ecx,eax
	ja Block153

 Block154:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block155:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],esi
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],ebp
	mov esi,dword ptr [esp+0xE4]
	not esi
	test eax,eax
	jne Block157

 Block156:
	xor edx,edx
	jmp Block158

 Block157:
	mov edx,dword ptr [eax-4]

 Block158:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block163

 Block159:
	test eax,eax
	je Block161

 Block160:
	mov eax,dword ptr [eax-4]

 Block161:
	add eax,eax
	cmp ecx,eax
	ja Block161

 Block162:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block163:
	mov edx,dword ptr [esp+0x24]
	mov bl,byte ptr [esp+0x38]
	mov dword ptr [eax+edx],esi
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],ebp
	shl bl,4
	or bl,byte ptr [esp+0x70]
	test eax,eax
	jne Block165

 Block164:
	xor edx,edx
	jmp Block166

 Block165:
	mov edx,dword ptr [eax-4]

 Block166:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block171

 Block167:
	test eax,eax
	je Block169

 Block168:
	mov eax,dword ptr [eax-4]

 Block169:
	add eax,eax
	cmp ecx,eax
	ja Block169

 Block170:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block171:
	mov edx,dword ptr [esp+0x24]
	mov byte ptr [eax+edx],bl
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],edi
	mov esi,dword ptr [esp+0xE8]
	not esi
	test eax,eax
	jne Block173

 Block172:
	xor edx,edx
	jmp Block174

 Block173:
	mov edx,dword ptr [eax-4]

 Block174:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block179

 Block175:
	test eax,eax
	je Block177

 Block176:
	mov eax,dword ptr [eax-4]

 Block177:
	add eax,eax
	cmp ecx,eax
	ja Block177

 Block178:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block179:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],esi
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],ebp
	mov esi,dword ptr [esp+0xEC]
	not esi
	test eax,eax
	jne Block181

 Block180:
	xor edx,edx
	jmp Block182

 Block181:
	mov edx,dword ptr [eax-4]

 Block182:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block187

 Block183:
	test eax,eax
	je Block185

 Block184:
	mov eax,dword ptr [eax-4]

 Block185:
	add eax,eax
	cmp ecx,eax
	ja Block185

 Block186:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block187:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],esi
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],ebp
	test eax,eax
	jne Block189

 Block188:
	xor edx,edx
	jmp Block190

 Block189:
	mov edx,dword ptr [eax-4]

 Block190:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block195

 Block191:
	test eax,eax
	je Block193

 Block192:
	mov eax,dword ptr [eax-4]

 Block193:
	add eax,eax
	cmp ecx,eax
	ja Block193

 Block194:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block195:
	mov edx,dword ptr [esp+0x34]
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr [eax+ecx],edx
	add dword ptr [esp+0x24],ebp
	mov eax,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0xCC]
	mov bl,byte ptr [edx+0x539]
	test eax,eax
	jne Block197

 Block196:
	xor edx,edx
	jmp Block198

 Block197:
	mov edx,dword ptr [eax-4]

 Block198:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block203

 Block199:
	test eax,eax
	je Block201

 Block200:
	mov eax,dword ptr [eax-4]
	lea ecx,[ecx]

 Block201:
	add eax,eax
	cmp ecx,eax
	ja Block201

 Block202:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block203:
	mov edx,dword ptr [esp+0x24]
	mov byte ptr [eax+edx],bl
	mov eax,dword ptr [esp+0xE0]
	add dword ptr [esp+0x24],edi
	mov esi,eax
	mov ecx,offset _D_G_RAND
	test eax,eax
	je Block205

 Block204:
	call CRand32::Random
	xor edx,edx
	div esi
	mov esi,edx
	jmp Block206

 Block205:
	call CRand32::Random
	mov esi,eax

 Block206:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block208

 Block207:
	xor edx,edx
	jmp Block209

 Block208:
	mov edx,dword ptr [eax-4]

 Block209:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block214

 Block210:
	test eax,eax
	je Block212

 Block211:
	mov eax,dword ptr [eax-4]
	lea ecx,[ecx]

 Block212:
	add eax,eax
	cmp ecx,eax
	ja Block212

 Block213:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block214:
	mov edx,dword ptr [esp+0x24]
	push 0
	push 0
	push 0
	mov dword ptr [eax+edx],esi
	add dword ptr [esp+0x30],ebp
	push esi
	lea eax,[esp+0xB0]
	push ebp
	push eax
	call CCrc32::GetCrc32
	mov esi,eax
	mov eax,dword ptr [esp+0x38]
	add esp,0x18
	test eax,eax
	jne Block216

 Block215:
	xor edx,edx
	jmp Block217

 Block216:
	mov edx,dword ptr [eax-4]

 Block217:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block222

 Block218:
	test eax,eax
	je Block220

 Block219:
	mov eax,dword ptr [eax-4]

 Block220:
	add eax,eax
	cmp ecx,eax
	ja Block220

 Block221:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block222:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],esi
	add dword ptr [esp+0x24],ebp
	mov ebp,dword ptr [esp+0x58]
	test ebp,ebp
	je Block224

 Block223:
	mov eax,dword ptr [esp+0x48]
	push eax
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[esp+0xADC]
	call SKILLLEVELDATA::_ctor_0
	mov ebx,edi
	mov ecx,eax
	mov byte ptr [esp+0xF00],9
	mov dword ptr [esp+0xC4],ebx
	call SKILLLEVELDATA::GetCrc
	mov edi,eax
	jmp Block225

 Block224:
	mov ebx,dword ptr [esp+0xC4]
	xor edi,edi

 Block225:
	mov esi,8
	mov dword ptr [esp+0xF00],esi
	test bl,1
	je Block227

 Block226:
	lea ecx,[esp+0xAD8]
	and ebx,0xFFFFFFFE
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block227:
	test ebp,ebp
	je Block229

 Block228:
	mov ecx,dword ptr [esp+0x48]
	push ecx
	mov ecx,dword ptr [esp+0x5C]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[esp+0xADC]
	call SKILLLEVELDATA::_ctor_0
	or ebx,2
	mov ecx,eax
	mov byte ptr [esp+0xF00],0xA
	mov dword ptr [esp+0xC4],ebx
	call SKILLLEVELDATA::GetCrc
	mov ebp,eax
	jmp Block230

 Block229:
	xor ebp,ebp

 Block230:
	mov dword ptr [esp+0xF00],esi
	test bl,2
	je Block232

 Block231:
	lea ecx,[esp+0xAD8]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block232:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block234

 Block233:
	xor edx,edx
	jmp Block235

 Block234:
	mov edx,dword ptr [eax-4]

 Block235:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block240

 Block236:
	test eax,eax
	je Block238

 Block237:
	mov eax,dword ptr [eax-4]

 Block238:
	add eax,eax
	cmp ecx,eax
	ja Block238

 Block239:
	lea edx,[esp+0x1B]
	push edx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block240:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr [eax+ecx],edi
	mov eax,dword ptr [esp+0x20]
	mov esi,4
	add dword ptr [esp+0x24],esi
	test eax,eax
	jne Block242

 Block241:
	xor edx,edx
	jmp Block243

 Block242:
	mov edx,dword ptr [eax-4]

 Block243:
	mov ecx,dword ptr [esp+0x24]
	add ecx,esi
	cmp ecx,edx
	jbe Block248

 Block244:
	test eax,eax
	je Block246

 Block245:
	mov eax,dword ptr [eax-4]
	nop

 Block246:
	add eax,eax
	cmp ecx,eax
	ja Block246

 Block247:
	lea edx,[esp+0x1B]
	push edx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block248:
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x34]
	mov dword ptr [eax+ecx],ebp
	add dword ptr [esp+0x24],esi
	push edx
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block258

 Block249:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block251

 Block250:
	xor edx,edx
	jmp Block252

 Block251:
	mov edx,dword ptr [eax-4]

 Block252:
	mov ecx,dword ptr [esp+0x24]
	add ecx,esi
	cmp ecx,edx
	jbe Block257

 Block253:
	test eax,eax
	je Block255

 Block254:
	mov eax,dword ptr [eax-4]

 Block255:
	add eax,eax
	cmp ecx,eax
	ja Block255

 Block256:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block257:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],0
	add dword ptr [esp+0x24],esi

 Block258:
	mov al,byte ptr [esp+0xB8]
	add al,al
	mov bl,al
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block260

 Block259:
	xor edx,edx
	jmp Block261

 Block260:
	mov edx,dword ptr [eax-4]

 Block261:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block266

 Block262:
	test eax,eax
	je Block264

 Block263:
	mov eax,dword ptr [eax-4]
	jmp Block264

 Block264:
	add eax,eax
	cmp ecx,eax
	ja Block264

 Block265:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block266:
	mov edx,dword ptr [esp+0x24]
	mov ebp,dword ptr [esp+0xB0]
	mov byte ptr [eax+edx],bl
	inc dword ptr [esp+0x24]
	cmp dword ptr [ebp+0x484C],0
	je Block269

 Block267:
	mov eax,dword ptr [esp+0x6C]
	mov ecx,dword ptr [esp+0x58]
	push eax
	push ecx
	mov ecx,ebp
	call CUserLocal::CheckApplyExJablin
	test eax,eax
	je Block269

 Block268:
	mov bl,1
	jmp Block270

 Block269:
	xor bl,bl

 Block270:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block272

 Block271:
	xor edx,edx
	jmp Block273

 Block272:
	mov edx,dword ptr [eax-4]

 Block273:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block278

 Block274:
	test eax,eax
	je Block276

 Block275:
	mov eax,dword ptr [eax-4]

 Block276:
	add eax,eax
	cmp ecx,eax
	ja Block276

 Block277:
	lea edx,[esp+0x1B]
	push edx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block278:
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x6C]
	mov byte ptr [eax+ecx],bl
	mov eax,dword ptr [esp+0xC8]
	inc dword ptr [esp+0x24]
	shl eax,0xF
	and edx,0x7FFF
	or edx,eax
	mov eax,dword ptr [esp+0x20]
	xor edi,edi
	movzx esi,dx
	cmp eax,edi
	jne Block280

 Block279:
	xor edx,edx
	jmp Block281

 Block280:
	mov edx,dword ptr [eax-4]

 Block281:
	mov ecx,dword ptr [esp+0x24]
	add ecx,2
	cmp ecx,edx
	jbe Block287

 Block282:
	cmp eax,edi
	jne Block284

 Block283:
	xor eax,eax
	jmp Block285

 Block284:
	mov eax,dword ptr [eax-4]

 Block285:
	add eax,eax
	cmp ecx,eax
	ja Block285

 Block286:
	lea ecx,[esp+0x1B]
	push ecx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block287:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],2
	cmp eax,edi
	jne Block289

 Block288:
	xor edx,edx
	jmp Block290

 Block289:
	mov edx,dword ptr [eax-4]

 Block290:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block296

 Block291:
	cmp eax,edi
	jne Block293

 Block292:
	xor eax,eax
	jmp Block294

 Block293:
	mov eax,dword ptr [eax-4]

 Block294:
	add eax,eax
	cmp ecx,eax
	ja Block294

 Block295:
	lea ecx,[esp+0x1B]
	push ecx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block296:
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x5C]
	mov dword ptr [eax+ecx],edx
	mov eax,dword ptr [esp+0x20]
	mov ebx,4
	add dword ptr [esp+0x24],ebx
	cmp eax,edi
	jne Block298

 Block297:
	xor edx,edx
	jmp Block299

 Block298:
	mov edx,dword ptr [eax-4]

 Block299:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block305

 Block300:
	cmp eax,edi
	jne Block302

 Block301:
	xor eax,eax
	jmp Block303

 Block302:
	mov eax,dword ptr [eax-4]

 Block303:
	add eax,eax
	cmp ecx,eax
	ja Block303

 Block304:
	lea edx,[esp+0x1B]
	push edx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block305:
	mov edx,dword ptr [esp+0x24]
	mov cl,byte ptr [esp+0x104]
	mov byte ptr [eax+edx],cl
	mov eax,dword ptr [esp+0x20]
	mov esi,1
	add dword ptr [esp+0x24],esi
	cmp eax,edi
	jne Block307

 Block306:
	xor edx,edx
	jmp Block308

 Block307:
	mov edx,dword ptr [eax-4]

 Block308:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block314

 Block309:
	cmp eax,edi
	jne Block311

 Block310:
	xor eax,eax
	jmp Block312

 Block311:
	mov eax,dword ptr [eax-4]

 Block312:
	add eax,eax
	cmp ecx,eax
	ja Block312

 Block313:
	lea ecx,[esp+0x1B]
	push ecx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block314:
	mov ecx,dword ptr [esp+0x24]
	mov dl,byte ptr [esp+0x110]
	mov byte ptr [eax+ecx],dl
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],esi
	cmp eax,edi
	jne Block316

 Block315:
	xor edx,edx
	jmp Block317

 Block316:
	mov edx,dword ptr [eax-4]

 Block317:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block323

 Block318:
	cmp eax,edi
	jne Block320

 Block319:
	xor eax,eax
	jmp Block321

 Block320:
	mov eax,dword ptr [eax-4]

 Block321:
	add eax,eax
	cmp ecx,eax
	ja Block321

 Block322:
	lea edx,[esp+0x1B]
	push edx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block323:
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr [eax+edx],ecx
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],ebx
	mov esi,dword ptr [esp+0x98]
	cmp eax,edi
	jne Block325

 Block324:
	xor edx,edx
	jmp Block326

 Block325:
	mov edx,dword ptr [eax-4]

 Block326:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block332

 Block327:
	cmp eax,edi
	jne Block329

 Block328:
	xor eax,eax
	jmp Block330

 Block329:
	mov eax,dword ptr [eax-4]
	jmp Block330

 Block330:
	add eax,eax
	cmp ecx,eax
	ja Block330

 Block331:
	lea ecx,[esp+0x1B]
	push ecx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block332:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],esi
	add dword ptr [esp+0x24],ebx
	jmp Block334

 Block334:
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	jne Block336

 Block335:
	xor edx,edx
	jmp Block337

 Block336:
	mov edx,dword ptr [eax-4]

 Block337:
	mov ecx,dword ptr [esp+0x24]
	add ecx,2
	cmp ecx,edx
	jbe Block343

 Block338:
	cmp eax,edi
	jne Block340

 Block339:
	xor eax,eax
	jmp Block341

 Block340:
	mov eax,dword ptr [eax-4]
	lea esp,[esp]

 Block341:
	add eax,eax
	cmp ecx,eax
	ja Block341

 Block342:
	lea ecx,[esp+0x1B]
	push ecx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block343:
	mov ecx,dword ptr [esp+0x24]
	mov dx,word ptr [esp+0x118]
	mov word ptr [eax+ecx],dx
	mov eax,dword ptr [esp+0x20]
	mov esi,2
	add dword ptr [esp+0x24],esi
	cmp eax,edi
	jne Block345

 Block344:
	xor edx,edx
	jmp Block346

 Block345:
	mov edx,dword ptr [eax-4]

 Block346:
	mov ecx,dword ptr [esp+0x24]
	add ecx,esi
	cmp ecx,edx
	jbe Block352

 Block347:
	cmp eax,edi
	jne Block349

 Block348:
	xor eax,eax
	jmp Block350

 Block349:
	mov eax,dword ptr [eax-4]

 Block350:
	add eax,eax
	cmp ecx,eax
	ja Block350

 Block351:
	lea edx,[esp+0x1B]
	push edx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block352:
	mov edx,dword ptr [esp+0x24]
	mov cx,word ptr [esp+0x120]
	mov word ptr [eax+edx],cx
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],esi
	cmp eax,edi
	jne Block354

 Block353:
	xor edx,edx
	jmp Block355

 Block354:
	mov edx,dword ptr [eax-4]

 Block355:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block361

 Block356:
	cmp eax,edi
	jne Block358

 Block357:
	xor eax,eax
	jmp Block359

 Block358:
	mov eax,dword ptr [eax-4]

 Block359:
	add eax,eax
	cmp ecx,eax
	ja Block359

 Block360:
	lea ecx,[esp+0x1B]
	push ecx
	push edi
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block361:
	mov ecx,dword ptr [esp+0x24]
	mov dl,byte ptr [esp+0xD0]
	mov byte ptr [eax+ecx],dl
	mov edx,dword ptr [ebp+4]
	mov edx,dword ptr [edx+0x10]
	inc dword ptr [esp+0x24]
	lea ecx,[ebp+4]
	lea eax,[esp+0xD8]
	push eax
	call edx
	cmp dword ptr [esp+0x38],edi
	mov dword ptr [esp+0xB4],edi
	mov dword ptr [esp+0xB8],0x7FFFFFFF
	mov dword ptr [esp+0x30],edi
	jle Block484

 Block362:
	jmp Block364

 Block364:
	mov eax,edi
	imul eax,0x98
	lea ebp,[esp+eax+0x1EC]
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[eax+4]
	lea eax,[esp+0x40]
	push eax
	call edx
	mov ecx,dword ptr [esp+0x40]
	sub ecx,dword ptr [esp+0xD8]
	mov eax,dword ptr [esp+0x44]
	sub eax,dword ptr [esp+0xDC]
	mov edx,ecx
	imul eax,eax
	imul edx,ecx
	add eax,edx
	cmp eax,dword ptr [esp+0xB8]
	jge Block366

 Block365:
	mov dword ptr [esp+0xB8],eax
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+0x170]
	push ecx
	add eax,0x168
	push eax
	call _ZtlSecureFuseHelper<unsigned long>::call
	add esp,8
	mov dword ptr [esp+0xB4],eax

 Block366:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x170]
	push edx
	add eax,0x168
	push eax
	call _ZtlSecureFuseHelper<unsigned long>::call
	mov esi,eax
	mov eax,dword ptr [esp+0x28]
	add esp,8
	test eax,eax
	jne Block368

 Block367:
	xor edx,edx
	jmp Block369

 Block368:
	mov edx,dword ptr [eax-4]

 Block369:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block374

 Block370:
	test eax,eax
	je Block372

 Block371:
	mov eax,dword ptr [eax-4]
	lea esp,[esp]

 Block372:
	add eax,eax
	cmp ecx,eax
	ja Block372

 Block373:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block374:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],esi
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],4
	mov bl,byte ptr [ebp+4]
	test eax,eax
	jne Block376

 Block375:
	xor edx,edx
	jmp Block377

 Block376:
	mov edx,dword ptr [eax-4]

 Block377:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block382

 Block378:
	test eax,eax
	je Block380

 Block379:
	mov eax,dword ptr [eax-4]
	lea esp,[esp]

 Block380:
	add eax,eax
	cmp ecx,eax
	ja Block380

 Block381:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block382:
	mov edx,dword ptr [esp+0x24]
	mov byte ptr [eax+edx],bl
	mov eax,dword ptr [ebp]
	mov esi,1
	add dword ptr [esp+0x24],esi
	mov ecx,dword ptr [eax+0x174]
	cmp dword ptr [ecx+0x1A0],0
	je Block384

 Block383:
	mov eax,esi
	jmp Block385

 Block384:
	mov edx,dword ptr [eax+0x3D8]
	push edx
	add eax,0x3D0
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	and eax,esi

 Block385:
	mov bl,byte ptr [ebp+8]
	shl al,7
	and bl,0x7F
	or bl,al
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block387

 Block386:
	xor edx,edx
	jmp Block388

 Block387:
	mov edx,dword ptr [eax-4]

 Block388:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block393

 Block389:
	test eax,eax
	je Block391

 Block390:
	mov eax,dword ptr [eax-4]

 Block391:
	add eax,eax
	cmp ecx,eax
	ja Block391

 Block392:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block393:
	mov edx,dword ptr [esp+0x24]
	mov byte ptr [eax+edx],bl
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],esi
	mov bl,byte ptr [ebp+0xC]
	test eax,eax
	jne Block395

 Block394:
	xor edx,edx
	jmp Block396

 Block395:
	mov edx,dword ptr [eax-4]

 Block396:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block401

 Block397:
	test eax,eax
	je Block399

 Block398:
	mov eax,dword ptr [eax-4]
	lea ebx,[ebx]

 Block399:
	add eax,eax
	cmp ecx,eax
	ja Block399

 Block400:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block401:
	mov edx,dword ptr [esp+0x24]
	mov byte ptr [eax+edx],bl
	mov eax,dword ptr [ebp]
	add dword ptr [esp+0x24],esi
	cmp dword ptr [eax+0x28C],0
	je Block403

 Block402:
	mov ecx,dword ptr [eax+0x178]
	test ecx,ecx
	jne Block404

 Block403:
	mov ecx,dword ptr [eax+0x174]
	test ecx,ecx
	je Block409

 Block404:
	cmp dword ptr [eax+0x28C],0
	mov edx,dword ptr [eax+0x174]
	je Block406

 Block405:
	mov ecx,dword ptr [eax+0x178]
	test ecx,ecx
	jne Block407

 Block406:
	mov ecx,edx

 Block407:
	cmp edx,ecx
	je Block409

 Block408:
	mov ecx,esi
	jmp Block410

 Block409:
	xor ecx,ecx

 Block410:
	mov eax,dword ptr [eax+0x4EC]
	and al,0x7F
	shl cl,7
	or al,cl
	mov bl,al
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block412

 Block411:
	xor edx,edx
	jmp Block413

 Block412:
	mov edx,dword ptr [eax-4]

 Block413:
	mov ecx,dword ptr [esp+0x24]
	inc ecx
	cmp ecx,edx
	jbe Block418

 Block414:
	test eax,eax
	je Block416

 Block415:
	mov eax,dword ptr [eax-4]
	lea esp,[esp]

 Block416:
	add eax,eax
	cmp ecx,eax
	ja Block416

 Block417:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block418:
	mov edx,dword ptr [esp+0x24]
	mov byte ptr [eax+edx],bl
	mov eax,dword ptr [ebp]
	inc dword ptr [esp+0x24]
	lea ecx,[eax+4]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x10]
	lea edx,[esp+0xFC]
	push edx
	call eax
	movzx esi,word ptr [eax]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block420

 Block419:
	xor edx,edx
	jmp Block421

 Block420:
	mov edx,dword ptr [eax-4]

 Block421:
	mov ecx,dword ptr [esp+0x24]
	add ecx,2
	cmp ecx,edx
	jbe Block426

 Block422:
	test eax,eax
	je Block424

 Block423:
	mov eax,dword ptr [eax-4]
	nop

 Block424:
	add eax,eax
	cmp ecx,eax
	ja Block424

 Block425:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block426:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [ebp]
	lea ecx,[eax+4]
	mov ebx,2
	add dword ptr [esp+0x24],ebx
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x10]
	lea edx,[esp+0x120]
	push edx
	call eax
	movzx esi,word ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block428

 Block427:
	xor edx,edx
	jmp Block429

 Block428:
	mov edx,dword ptr [eax-4]

 Block429:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block434

 Block430:
	test eax,eax
	je Block432

 Block431:
	mov eax,dword ptr [eax-4]

 Block432:
	add eax,eax
	cmp ecx,eax
	ja Block432

 Block433:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block434:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [ebp]
	add dword ptr [esp+0x24],ebx
	lea ecx,[eax+4]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x14]
	lea edx,[esp+0x118]
	push edx
	call eax
	movzx esi,word ptr [eax]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block436

 Block435:
	xor edx,edx
	jmp Block437

 Block436:
	mov edx,dword ptr [eax-4]

 Block437:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block442

 Block438:
	test eax,eax
	je Block440

 Block439:
	mov eax,dword ptr [eax-4]

 Block440:
	add eax,eax
	cmp ecx,eax
	ja Block440

 Block441:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block442:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [ebp]
	add dword ptr [esp+0x24],ebx
	lea ecx,[eax+4]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x14]
	lea edx,[esp+0x110]
	push edx
	call eax
	movzx esi,word ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block444

 Block443:
	xor edx,edx
	jmp Block445

 Block444:
	mov edx,dword ptr [eax-4]

 Block445:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block450

 Block446:
	test eax,eax
	je Block448

 Block447:
	mov eax,dword ptr [eax-4]

 Block448:
	add eax,eax
	cmp ecx,eax
	ja Block448

 Block449:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block450:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [esp+0x20]
	add dword ptr [esp+0x24],ebx
	movzx esi,word ptr [ebp+0x10]
	test eax,eax
	jne Block452

 Block451:
	xor edx,edx
	jmp Block453

 Block452:
	mov edx,dword ptr [eax-4]

 Block453:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block458

 Block454:
	test eax,eax
	je Block456

 Block455:
	mov eax,dword ptr [eax-4]
	nop

 Block456:
	add eax,eax
	cmp ecx,eax
	ja Block456

 Block457:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block458:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [esp+0x70]
	add dword ptr [esp+0x24],ebx
	test eax,eax
	jle Block475

 Block459:
	lea esi,[ebp+0x18]
	mov ebx,eax

 Block460:
	mov eax,dword ptr [esp+0x20]
	mov edi,dword ptr [esi]
	test eax,eax
	jne Block462

 Block461:
	xor edx,edx
	jmp Block463

 Block462:
	mov edx,dword ptr [eax-4]

 Block463:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block469

 Block464:
	test eax,eax
	je Block467

 Block465:
	mov eax,dword ptr [eax-4]
	jmp Block467

 Block467:
	add eax,eax
	cmp ecx,eax
	ja Block467

 Block468:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block469:
	mov edx,dword ptr [esp+0x24]
	mov dword ptr [eax+edx],edi
	mov ecx,dword ptr [TSingleton<CDamageMeter>::ms_pInstance]
	add dword ptr [esp+0x24],4
	test ecx,ecx
	je Block471

 Block470:
	mov eax,dword ptr [esi]
	push eax
	call CDamageMeter::AddDamageInfo

 Block471:
	mov ecx,dword ptr [TSingleton<CBattleRecordMan>::ms_pInstance]
	test ecx,ecx
	je Block473

 Block472:
	mov edx,dword ptr [esi+0x3C]
	mov eax,dword ptr [esi]
	push 0
	push edx
	push eax
	call CBattleRecordMan::SetBattleDamageInfo

 Block473:
	add esi,4
	sub ebx,1
	jne Block460

 Block474:
	mov edi,dword ptr [esp+0x30]

 Block475:
	mov ecx,dword ptr [ebp]
	call CMob::GetCrc
	mov esi,eax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block477

 Block476:
	xor edx,edx
	jmp Block478

 Block477:
	mov edx,dword ptr [eax-4]

 Block478:
	mov ecx,dword ptr [esp+0x24]
	add ecx,4
	cmp ecx,edx
	jbe Block483

 Block479:
	test eax,eax
	je Block481

 Block480:
	mov eax,dword ptr [eax-4]
	lea esp,[esp]

 Block481:
	add eax,eax
	cmp ecx,eax
	ja Block481

 Block482:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block483:
	mov edx,dword ptr [esp+0x24]
	inc edi
	mov dword ptr [eax+edx],esi
	add dword ptr [esp+0x24],4
	cmp edi,dword ptr [esp+0x38]
	mov dword ptr [esp+0x30],edi
	jl Block364

 Block484:
	mov edi,dword ptr [esp+0xB0]
	mov eax,dword ptr [esp+0xB4]
	mov edx,dword ptr [edi+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[edi+4]
	mov dword ptr [edi+0x2E14],eax
	lea eax,[esp+0xFC]
	push eax
	call edx
	movzx esi,word ptr [eax]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block486

 Block485:
	xor edx,edx
	jmp Block487

 Block486:
	mov edx,dword ptr [eax-4]

 Block487:
	mov ecx,dword ptr [esp+0x24]
	add ecx,2
	cmp ecx,edx
	jbe Block492

 Block488:
	test eax,eax
	je Block490

 Block489:
	mov eax,dword ptr [eax-4]

 Block490:
	add eax,eax
	cmp ecx,eax
	ja Block490

 Block491:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block492:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [edi+4]
	mov eax,dword ptr [eax+0x10]
	lea ecx,[edi+4]
	lea edx,[esp+0x40]
	mov ebx,2
	add dword ptr [esp+0x24],ebx
	push edx
	call eax
	movzx esi,word ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block494

 Block493:
	xor edx,edx
	jmp Block495

 Block494:
	mov edx,dword ptr [eax-4]

 Block495:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block500

 Block496:
	test eax,eax
	je Block498

 Block497:
	mov eax,dword ptr [eax-4]

 Block498:
	add eax,eax
	cmp ecx,eax
	ja Block498

 Block499:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block500:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x40]
	add dword ptr [esp+0x24],ebx
	mov ecx,edi
	call edx
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x21
	jne Block510

 Block501:
	lea ecx,[edi+0x614]
	call TSecType<long>::GetData
	movzx esi,ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block503

 Block502:
	xor edx,edx
	jmp Block504

 Block503:
	mov edx,dword ptr [eax-4]

 Block504:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block509

 Block505:
	test eax,eax
	je Block507

 Block506:
	mov eax,dword ptr [eax-4]

 Block507:
	add eax,eax
	cmp ecx,eax
	ja Block507

 Block508:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block509:
	mov edx,dword ptr [esp+0x24]
	mov word ptr [eax+edx],si
	add dword ptr [esp+0x24],ebx

 Block510:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jne Block512

 Block511:
	xor edx,edx
	jmp Block513

 Block512:
	mov edx,dword ptr [eax-4]

 Block513:
	mov ecx,dword ptr [esp+0x24]
	add ecx,ebx
	cmp ecx,edx
	jbe Block518

 Block514:
	test eax,eax
	je Block516

 Block515:
	mov eax,dword ptr [eax-4]
	mov edi,edi

 Block516:
	add eax,eax
	cmp ecx,eax
	ja Block516

 Block517:
	lea ecx,[esp+0x1B]
	push ecx
	push 0
	push eax
	lea ecx,[esp+0x2C]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [esp+0x20]

 Block518:
	mov ecx,dword ptr [esp+0x24]
	mov dx,word ptr [esp+0xBC]
	mov word ptr [eax+ecx],dx
	mov edx,dword ptr [esp+0xAC]
	add dword ptr [esp+0x24],ebx
	push edx
	lea ecx,[esp+0x20]
	call COutPacket::Encode2
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x1C]
	push eax
	call CClientSocket::SendPacket
	mov ecx,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x58]
	push ecx
	push edx
	mov ecx,edi
	call CUserLocal::CheckApplyExJablin
	test eax,eax
	je Block520

 Block519:
	mov dword ptr [edi+0x4848],1

 Block520:
	lea ecx,[esp+0x20]
	mov dword ptr [edi+0x484C],0
	mov byte ptr [esp+0xF00],7
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x164]
	mov byte ptr [esp+0xF00],5
	call CSkill_HitAni::~CSkill_HitAni
	lea ecx,[esp+0x80]
	mov byte ptr [esp+0xF00],1
	call ZArray<unsigned long>::RemoveAll
	mov esi,dword ptr [esp+0x68]
	mov byte ptr [esp+0xF00],0
	test esi,esi
	je Block527

 Block521:
	lea eax,[esi+8]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block527

 Block522:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block524

 Block523:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block524:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block526

 Block525:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block526:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block527:
	mov eax,dword ptr [esp+0x74]
	mov dword ptr [esp+0xF00],0xFFFFFFFF
	test eax,eax
	je Block529

 Block528:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block529:
	mov ecx,dword ptr [esp+0xEF8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::SetActiveEffectItemForLocal
_SUB_EXCEPTION_HANDLER(5084C0)
__SUB_CLASS_THIS(005084C0, __thiscall, 41369,  CUserLocal, void, CharacterData&, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5084C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	cmp dword ptr [esp+0x30],0
	je Block31

 Block1:
	mov ebp,dword ptr [esp+0x2C]
	mov eax,dword ptr [ebp+0x515]
	test eax,eax
	je Block3

 Block2:
	mov eax,dword ptr [eax-4]

 Block3:
	lea edi,[eax-1]
	test edi,edi
	jle Block15

 Block4:
	push edi
	push 5
	lea eax,[esp+0x1C]
	push eax
	mov ecx,ebp
	call CharacterData::GetItem
	mov esi,dword ptr [esp+0x18]
	mov dword ptr [esp+0x24],0
	test esi,esi
	je Block6

 Block5:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [esp+0x30]
	je Block12

 Block6:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test esi,esi
	je Block10

 Block7:
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block9

 Block8:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block9:
	mov dword ptr [esp+0x18],0

 Block10:
	dec edi
	test edi,edi
	jg Block4

 Block11:
	jmp Block15

 Block12:
	lea ebx,[esi+4]
	push ebx
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block14

 Block13:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block14:
	test edi,edi
	jg Block31

 Block15:
	mov eax,dword ptr [ebp+0x511]
	test eax,eax
	je Block17

 Block16:
	mov eax,dword ptr [eax-4]

 Block17:
	lea ebx,[eax-1]
	test ebx,ebx
	jle Block30

 Block18:
	lea esp,[esp]

 Block19:
	push ebx
	push 4
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,ebp
	call CharacterData::GetItem
	mov esi,dword ptr [esp+0x18]
	mov dword ptr [esp+0x24],1
	test esi,esi
	je Block21

 Block20:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [esp+0x30]
	je Block27

 Block21:
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test esi,esi
	je Block25

 Block22:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block24

 Block23:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block24:
	mov dword ptr [esp+0x18],0

 Block25:
	dec ebx
	test ebx,ebx
	jg Block19

 Block26:
	jmp Block30

 Block27:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block29

 Block28:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block29:
	test ebx,ebx
	jg Block31

 Block30:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	call CWvsContext::SendActiveEffectItemChange

 Block31:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 8
}
}
// CUserLocal::ShowBallonMsg
_SUB_EXCEPTION_HANDLER(51D580)
__SUB_CLASS_THIS(0051D580, __thiscall, 41471,  CUserLocal, void, ZXString<char>&, long, long, long, long, NakedParam<_x_com_ptr<IWzVector2D>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_51D580
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	cmp dword ptr [esp+0x30],0
	mov dword ptr [esp+0x14],0
	je Block2

 Block1:
	lea esi,[ecx+0x46F4]
	mov ecx,esi
	call ZList<CUserLocal::CBalloonMsg>::RemoveAll
	mov ecx,esi
	jmp Block3

 Block2:
	add ecx,0x4708

 Block3:
	call ZList<CUserLocal::CBalloonMsg>::AddTail_
	push ecx
	mov ecx,dword ptr [esp+0x34]
	mov esi,eax
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0xC],esp
	test eax,eax
	je Block5

 Block4:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block5:
	mov ecx,dword ptr [esp+0x30]
	mov edx,dword ptr [esp+0x2C]
	mov eax,dword ptr [esp+0x28]
	push ecx
	mov ecx,dword ptr [esp+0x28]
	push edx
	mov edx,dword ptr [esp+0x28]
	push eax
	push ecx
	push edx
	mov ecx,esi
	call CUserLocal::CBalloonMsg::Init
	mov eax,dword ptr [esp+0x30]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block7

 Block6:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block7:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret 0x18
}
}
// CUserLocal::OnBuffzoneEffect
_SUB_EXCEPTION_HANDLER(5183A0)
__SUB_CLASS_THIS(005183A0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5183A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [esp+0x48]
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0x14]
	push eax
	call CItemInfo::GetItemProp
	xor edi,edi
	push edi
	push edi
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x54],esp
	push 0x928
	push ecx
	mov dword ptr [esp+0x54],edi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x4C],1
	cmp ecx,edi
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x50],0
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0x48],2
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x4C]
	mov dword ptr [esp+0x4C],edi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,edi
	jge Block5

 Block3:
	cmp eax,0x80004002
	je Block5

 Block4:
	push eax
	call _com_issue_error

 Block5:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0x40],4
	jne Block8

 Block6:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block9

 Block7:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block9

 Block8:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block9:
	push ecx
	mov dword ptr [esp+0x18],esp
	mov ecx,esp
	push offset _S_HP
	call _xbstr_t::_ctor_1
	mov ebp,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x44],5
	cmp ebp,edi
	jne Block11

 Block10:
	push 0x80004003
	call _com_issue_error

 Block11:
	lea edx,[esp+0x2C]
	push edx
	mov ecx,ebp
	mov byte ptr [esp+0x48],4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0x40],6
	call _xvariant_t::op_long
	cmp word ptr [esp+0x28],8
	mov edi,eax
	mov byte ptr [esp+0x40],4
	jne Block14

 Block12:
	xor eax,eax
	mov word ptr [esp+0x28],ax
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block15

 Block13:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block15

 Block14:
	lea ecx,[esp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block15:
	push 0
	mov ecx,esi
	push edi
	call CUser::MakeIncDecHPEffect
	test edi,edi
	jge Block20

 Block16:
	push 0x5DC
	push 1
	lea ecx,[esi+0x88]
	call CAvatar::SetEmotion
	mov dword ptr [esi+0x63C],0x1388
	mov esi,dword ptr [esi+0x19E4]
	test esi,esi
	je Block18

 Block17:
	add esi,0xFFFFFFF4
	jmp Block19

 Block18:
	xor esi,esi

 Block19:
	push 0x1E
	mov ecx,esi
	call CVecCtrl::SetMovePathAttribute
	fld qword ptr [__real_c072c00000000000]
	sub esp,0x10
	fstp qword ptr [esp+8]
	mov ecx,esi
	fldz
	fstp qword ptr [esp]
	call CVecCtrl::SetImpactNext_0

 Block20:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+8]
	push ebp
	mov byte ptr [esp+0x44],0
	call eax
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block22

 Block21:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block22:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x34
	ret 4
}
}
// CUserLocal::OnDamageMeter
__SUB_CLASS_THIS(00505620, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,dword ptr [TSingleton<CDamageMeter>::ms_pInstance]
	test esi,esi
	je Block2

 Block1:
	mov ecx,dword ptr [esp+8]
	call CInPacket::Decode4
	push eax
	mov ecx,esi
	call CDamageMeter::SetTimer

 Block2:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov esi,eax
	mov dword ptr [eax+0x20B8],0
	call get_update_time
	mov dword ptr [esi+0x20BC],eax
	pop esi
	ret 4
}
}
// CUserLocal::TryAutoRequestFollowCharacter
_SUB_EXCEPTION_HANDLER(504BF0)
__SUB_CLASS_THIS0(00504BF0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_504BF0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x44
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x58]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x18],edi
	xor esi,esi
	mov dword ptr [esp+0x20],esi
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [ecx+0x3D98]
	mov dword ptr [esp+0x34],eax
	cmp eax,esi
	je Block23

 Block1:
	cmp dword ptr [edi+0x2E98],esi
	je Block3

 Block2:
	mov dword ptr [ecx+0x3D98],esi
	mov ecx,dword ptr [esp+0x58]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x50
	ret

 Block3:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push eax
	call CUserPool::GetUser
	mov ebx,eax
	cmp ebx,esi
	je Block16

 Block4:
	mov eax,dword ptr [edi+0x19E4]
	cmp eax,esi
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	jmp Block7

 Block6:
	xor eax,eax

 Block7:
	cmp dword ptr [eax+0x1A0],esi
	je Block16

 Block8:
	lea eax,[esp+0x28]
	push eax
	mov ecx,ebx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	mov dword ptr [esp+0x60],esi
	mov dword ptr [esp+0x20],1
	cmp eax,esi
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	jmp Block11

 Block10:
	xor eax,eax

 Block11:
	cmp dword ptr [eax+0x1A0],esi
	je Block16

 Block12:
	mov edx,dword ptr [ebx+4]
	mov edx,dword ptr [edx+0x10]
	lea esi,[ebx+4]
	lea eax,[esp+0x38]
	push eax
	mov ecx,esi
	call edx
	add edi,4
	mov ebp,eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x40]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax]
	sub eax,dword ptr [ebp]
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,0x50
	jg Block15

 Block13:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x48]
	push ecx
	mov ecx,esi
	call edx
	lea esi,[eax+4]
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x50]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	sub eax,dword ptr [esi]
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,0x1E
	jg Block15

 Block14:
	mov edi,dword ptr [esp+0x18]
	mov byte ptr [esp+0x17],0
	jmp Block17

 Block15:
	mov edi,dword ptr [esp+0x18]

 Block16:
	mov byte ptr [esp+0x17],1

 Block17:
	test byte ptr [esp+0x20],1
	mov dword ptr [esp+0x60],0xFFFFFFFF
	je Block20

 Block18:
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block20

 Block19:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block20:
	cmp byte ptr [esp+0x17],0
	jne Block23

 Block21:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x10]
	mov ebp,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	lea esi,[edi+4]
	lea ecx,[esp+0x50]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x10]
	mov dword ptr [esp+0x30],eax
	lea eax,[esp+0x50]
	push eax
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x2C],eax
	mov edx,dword ptr [ebx+4]
	mov edx,dword ptr [edx+0x10]
	lea edi,[ebx+4]
	lea eax,[esp+0x20]
	push eax
	mov ecx,edi
	call edx
	mov ebx,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x18]
	mov ecx,esi
	call edx
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	push eax
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	lea eax,[esp+0x24]
	push eax
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebx]
	push eax
	push ecx
	mov ecx,ebp
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	je Block23

 Block22:
	mov edx,dword ptr [esp+0x34]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	push 1
	push edx
	call CWvsContext::SendFollowCharacterRequest

 Block23:
	mov ecx,dword ptr [esp+0x58]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x50
	ret
}
}
// CUserLocal::UseFuncKeyMapped
_SUB_EXCEPTION_HANDLER(532E20)
__SUB_CLASS_THIS(00532E20, __thiscall, 41389,  CUserLocal, int32_t, uint32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_532E20
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x3C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x50]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ebp,dword ptr [esp+0x60]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edi,ebp
	shr edi,0x10
	mov eax,ebp
	shr eax,0x18
	and edi,0xFF
	and eax,1
	mov dword ptr [esp+0x60],ecx
	cmp edi,0x52
	jne Block10

 Block1:
	test eax,eax
	jne Block10

 Block2:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block9

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block9

 Block4:
	mov ecx,esi
	call CUser::IsSneak
	test eax,eax
	jne Block9

 Block5:
	mov edx,dword ptr [esi+0x640]
	and edx,0xFFFFFFFE
	cmp edx,0x12
	je Block9

 Block6:
	mov ecx,esi
	call CUserLocal::IsStun
	test eax,eax
	jne Block9

 Block7:
	cmp dword ptr [esi+0x2E98],eax
	jne Block9

 Block8:
	mov eax,dword ptr [esi+4]
	mov eax,dword ptr [eax+0x10]
	mov edi,dword ptr [TSingleton<CDropPool>::ms_pInstance]
	lea ecx,[esi+4]
	lea edx,[esp+0x30]
	push edx
	call eax
	push eax
	mov ecx,edi
	call CDropPool::TryPickUpDrop

 Block9:
	mov eax,1
	jmp Block151

 Block10:
	mov ecx,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	push edi
	call CFuncKeyMappedMan::FuncKeyMapped
	mov ebx,eax
	mov al,byte ptr [ebx]
	test al,al
	je Block150

 Block11:
	cmp al,8
	je Block13

 Block12:
	cmp dword ptr [ebx+1],0
	je Block150

 Block13:
	lea ecx,[esp+0x30]
	push ecx
	mov ecx,dword ptr [esp+0x64]
	call CWvsContext::GetCharacterData
	mov edx,dword ptr [eax+4]
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x14],edx
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,dword ptr [esp+0x60]
	add eax,0x2148
	cmp byte ptr [ebx],8
	mov dword ptr [esp+0x24],eax
	je Block17

 Block14:
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	test ecx,ecx
	je Block17

 Block15:
	cmp dword ptr [ecx+0xC],0
	je Block17

 Block16:
	call CMacroSysMan::Stop

 Block17:
	movzx eax,byte ptr [ebx]
	dec eax
	cmp eax,7
	ja Block149

 Block18:
	cmp EAX, 0
je Block75
cmp EAX, 1
je Block19
cmp EAX, 2
je Block143
cmp EAX, 3
je Block149
cmp EAX, 4
je Block104
cmp EAX, 5
je Block142
cmp EAX, 6
je Block146
cmp EAX, 7
je Block99


 Block19:
	mov ecx,esi
	call CUser::IsWindWalk
	test eax,eax
	jne Block149

 Block20:
	mov ecx,esi
	call CUser::IsSneak
	test eax,eax
	jne Block149

 Block21:
	mov ecx,dword ptr [esi+0x640]
	and ecx,0xFFFFFFFE
	cmp ecx,0x12
	je Block149

 Block22:
	mov ecx,dword ptr [esp+0x60]
	push eax
	push 0xC8
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block149

 Block23:
	mov edi,dword ptr [ebx+1]
	push edi
	call is_state_change_item
	mov ebp,eax
	add esp,4
	test ebp,ebp
	jne Block37

 Block24:
	push edi
	call is_pet_food_item
	add esp,4
	test eax,eax
	jne Block29

 Block25:
	push edi
	call is_portable_chair_item
	add esp,4
	test eax,eax
	jne Block29

 Block26:
	push edi
	call is_tamingmob_food_item
	add esp,4
	test eax,eax
	jne Block29

 Block27:
	push edi
	call is_bridle_item
	add esp,4
	test eax,eax
	jne Block29

 Block28:
	push edi
	call is_immediate_mobsummon_item
	add esp,4
	test eax,eax
	je Block149

 Block29:
	test ebp,ebp
	jne Block37

 Block30:
	push edi
	call is_pet_food_item
	add esp,4
	test eax,eax
	jne Block37

 Block31:
	push edi
	call is_cash_pet_food_item
	add esp,4
	test eax,eax
	jne Block37

 Block32:
	push edi
	call is_portable_chair_item
	add esp,4
	test eax,eax
	jne Block37

 Block33:
	push edi
	call is_cash_morph_item
	add esp,4
	test eax,eax
	jne Block37

 Block34:
	push edi
	call is_tamingmob_food_item
	add esp,4
	test eax,eax
	jne Block37

 Block35:
	push edi
	call is_bridle_item
	add esp,4
	test eax,eax
	jne Block37

 Block36:
	push edi
	call is_immediate_mobsummon_item
	add esp,4
	test eax,eax
	je Block149

 Block37:
	push edi
	call is_portable_chair_item
	mov ebp,eax
	push edi
	mov dword ptr [esp+0x20],ebp
	call is_cash_pet_food_item
	push edi
	mov dword ptr [esp+0x28],eax
	call is_cash_morph_item
	mov ecx,dword ptr [esp+0x20]
	xor edx,edx
	add esp,0xC
	test ebp,ebp
	setne dl
	mov dword ptr [esp+0x20],eax
	add edx,2
	push edx
	call CharacterData::GetItemSlotCount
	mov edi,1
	cmp eax,edi
	mov dword ptr [esp+0x24],eax
	jl Block149

 Block38:
	cmp dword ptr [esp+0x18],0
	je Block40

 Block39:
	mov eax,3
	jmp Block43

 Block40:
	cmp dword ptr [esp+0x1C],0
	je Block42

 Block41:
	mov eax,5
	jmp Block43

 Block42:
	mov eax,dword ptr [esp+0x20]
	neg eax
	sbb eax,eax
	and eax,3
	add eax,2

 Block43:
	mov ecx,dword ptr [esp+0x14]
	push edi
	push eax
	lea eax,[esp+0x40]
	push eax
	call CharacterData::GetItem
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x38]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	test ebp,ebp
	je Block46

 Block44:
	lea ecx,[ebp+0xC]
	call TSecType<long>::GetData
	cmp eax,dword ptr [ebx+1]
	jne Block46

 Block45:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+4]
	mov ecx,ebp
	call eax
	test eax,eax
	je Block48

 Block46:
	inc edi
	cmp edi,dword ptr [esp+0x24]
	jle Block38

 Block47:
	mov eax,1
	jmp Block151

 Block48:
	test edi,edi
	je Block149

 Block49:
	mov ecx,esi
	call CUserLocal::IsAttract
	test eax,eax
	jne Block149

 Block50:
	mov ecx,esi
	call CUserLocal::IsStopPortion
	test eax,eax
	jne Block149

 Block51:
	mov ecx,esi
	call CUser::IsDarkSight
	test eax,eax
	je Block56

 Block52:
	mov ecx,dword ptr [ebx+1]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetLotteryItem
	test eax,eax
	jne Block149

 Block53:
	mov esi,dword ptr [ebx+1]
	push esi
	call is_state_change_item
	add esp,4
	test eax,eax
	je Block149

 Block54:
	push esi

 Block55:
	mov ecx,dword ptr [esp+0x64]
	push edi
	call CWvsContext::SendStatChangeItemUseRequest
	mov eax,1
	jmp Block151

 Block56:
	mov edx,dword ptr [ebx+1]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edx
	call CItemInfo::GetLotteryItem
	test eax,eax
	je Block58

 Block57:
	mov eax,dword ptr [ebx+1]
	mov ecx,dword ptr [esp+0x60]
	push eax
	push edi
	call CWvsContext::SendLotteryItemUseRequest
	mov eax,1
	jmp Block151

 Block58:
	mov esi,dword ptr [ebx+1]
	push esi
	call is_random_morph_item_other
	add esp,4
	push esi
	test eax,eax
	je Block60

 Block59:
	mov ecx,dword ptr [esp+0x64]
	push edi
	call CWvsContext::SendRandomMorphOtherRequest
	mov eax,1
	jmp Block151

 Block60:
	call is_state_change_item
	add esp,4
	push esi
	test eax,eax
	jne Block55

 Block61:
	call is_pet_food_item
	add esp,4
	push esi
	test eax,eax
	je Block63

 Block62:
	mov ecx,dword ptr [esp+0x64]
	push edi
	call CWvsContext::SendPetFoodItemUseRequest
	mov eax,1
	jmp Block151

 Block63:
	call is_tamingmob_food_item
	add esp,4
	push esi
	test eax,eax
	je Block65

 Block64:
	mov ecx,dword ptr [esp+0x64]
	push edi
	call CWvsContext::SendTamingMobFoodItemUseRequest
	mov eax,1
	jmp Block151

 Block65:
	call is_cash_pet_food_item
	add esp,4
	test eax,eax
	je Block67

 Block66:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_
	call ZXString<char>::CreateFromCharStr
	mov ecx,dword ptr [ebx+1]
	push 0
	push ecx
	mov ecx,dword ptr [esp+0x6C]
	push edi
	call CWvsContext::SendConsumeCashItemUseRequest
	mov eax,1
	jmp Block151

 Block67:
	push esi
	call is_cash_morph_item
	add esp,4
	test eax,eax
	je Block69

 Block68:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0xFFFFFFFF
	push offset _S_
	call ZXString<char>::CreateFromCharStr
	mov edx,dword ptr [ebx+1]
	mov ecx,dword ptr [esp+0x64]
	push 0
	push edx
	push edi
	call CWvsContext::SendConsumeCashItemUseRequest
	mov eax,1
	jmp Block151

 Block69:
	push esi
	call is_portable_chair_item
	add esp,4
	push esi
	test eax,eax
	je Block71

 Block70:
	mov ecx,dword ptr [esp+0x64]
	push edi
	call CWvsContext::SendSitOnPortableChairRequest
	mov eax,1
	jmp Block151

 Block71:
	call is_bridle_item
	add esp,4
	push esi
	test eax,eax
	je Block73

 Block72:
	mov ecx,dword ptr [esp+0x64]
	push edi
	call CWvsContext::SendBridleItemUseRequest
	mov eax,1
	jmp Block151

 Block73:
	call is_immediate_mobsummon_item
	add esp,4
	test eax,eax
	je Block149

 Block74:
	mov ecx,dword ptr [esp+0x60]
	push esi
	push edi
	call CWvsContext::SendMobSummonItemUseRequest
	mov eax,1
	jmp Block151

 Block75:
	cmp dword ptr [esi+0x2E98],0
	jne Block149

 Block76:
	mov eax,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	cmp dword ptr [eax+0x3C],0
	jne Block149

 Block77:
	mov ecx,esi
	call CUserLocal::IsAttract
	test eax,eax
	je Block79

 Block78:
	mov ecx,dword ptr [ebx+1]
	push ecx
	call is_heros_will_skill
	add esp,4
	test eax,eax
	je Block149

 Block79:
	cmp dword ptr [esi+0x3AD4],0
	jne Block149

 Block80:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	je Block85

 Block81:
	mov esi,dword ptr [esi+0x5E8]
	cmp esi,0x217C05C
	je Block83

 Block82:
	cmp esi,0x217E775
	jne Block149

 Block83:
	lea edx,[esp+0x2C]
	push 0x18FB
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x60],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x34]
	add esp,8
	mov dword ptr [esp+0x58],0xFFFFFFFF
	test eax,eax
	je Block149

 Block84:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov eax,1
	jmp Block151

 Block85:
	mov ebp,0x217E76D
	cmp dword ptr [ebx+1],ebp
	jne Block89

 Block86:
	cmp dword ptr [esi+0x3AE4],ebp
	jne Block89

 Block87:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block89

 Block88:
	mov eax,dword ptr [esi+0x3AE4]
	mov ecx,dword ptr [esp+0x14]
	push 0
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkillLevel_0
	push 1
	push eax
	push 0x217E385
	mov ecx,esi
	call CUserLocal::SendSkillEffectRequest
	mov ecx,esi
	call CUserLocal::ClearRepeatSkill
	push 0
	push 0x2A
	push ebp
	call play_skill_sound
	add esp,0xC
	mov eax,1
	jmp Block151

 Block89:
	lea ebp,[esi+0x88]
	mov ecx,ebp
	call CAvatar::IsAttackableMorphed
	test eax,eax
	je Block91

 Block90:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	push 0
	push 0
	mov ecx,esi
	call eax
	push eax
	push 0x42B
	call get_novice_skill_as_race
	add esp,8
	push eax
	mov ecx,esi
	call CUserLocal::DoActiveSkill
	mov eax,1
	jmp Block151

 Block91:
	cmp dword ptr [ebx+1],0x4215F8
	jne Block98

 Block92:
	push 0
	mov ecx,ebp
	call CAvatar::GetCurrentAction
	cmp eax,0xBC
	jne Block98

 Block93:
	mov ecx,esi
	call CUser::IsOnFoothold
	test eax,eax
	je Block98

 Block94:
	mov ecx,ebp
	call CAvatar::GetActionInfo
	cmp dword ptr [eax],1
	jle Block98

 Block95:
	push 0x4215F8
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	cmp eax,9
	jle Block98

 Block96:
	push 0x4215FD
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	cmp eax,9
	jle Block98

 Block97:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x44]
	mov ecx,esi
	call eax
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x14]
	push 0
	push 0x64
	push 6
	mov ecx,ebp
	call eax
	mov dword ptr [esi+0x3B48],0
	call get_update_time
	mov dword ptr [esi+0x3B60],eax

 Block98:
	mov ecx,dword ptr [ebx+1]
	push 0
	push edi
	push ecx
	mov ecx,esi
	call CUserLocal::DoActiveSkill
	mov eax,1
	jmp Block151

 Block99:
	cmp dword ptr [esi+0x2E98],0
	jne Block149

 Block100:
	mov edx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	cmp dword ptr [edx+0x3C],0
	jne Block149

 Block101:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block149

 Block102:
	cmp dword ptr [esi+0x3AD4],eax
	jne Block149

 Block103:
	mov eax,dword ptr [ebx+1]
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	push eax
	call CMacroSysMan::DoActiveMacro

 Block104:
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	cmp dword ptr [ecx+0x3C],0
	jne Block149

 Block105:
	mov eax,dword ptr [ebx+1]
	add eax,0xFFFFFFCE
	cmp eax,4
	ja Block149

 Block106:
	cmp EAX, 0
je Block107
cmp EAX, 1
je Block114
cmp EAX, 2
je Block116
cmp EAX, 3
je Block118
cmp EAX, 4
je Block133


 Block107:
	mov ecx,esi
	call CUser::IsDarkSight
	test eax,eax
	jne Block149

 Block108:
	mov ecx,esi
	call CUser::IsWindWalk
	test eax,eax
	jne Block149

 Block109:
	mov ecx,esi
	call CUser::IsSneak
	test eax,eax
	jne Block149

 Block110:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block149

 Block111:
	mov ecx,esi
	call CUserLocal::IsAttract
	test eax,eax
	jne Block149

 Block112:
	cmp dword ptr [esi+0x3AD4],eax
	jne Block149

 Block113:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	mov edi,dword ptr [TSingleton<CDropPool>::ms_pInstance]
	lea ecx,[esi+4]
	lea eax,[esp+0x40]
	push eax
	call edx
	push eax
	mov ecx,edi
	call CDropPool::TryPickUpDrop
	mov eax,1
	jmp Block151

 Block114:
	cmp dword ptr [esi+0x2E98],0
	jne Block149

 Block115:
	mov ecx,esi
	call CUserLocal::HandleXKeyDown
	mov eax,1
	jmp Block151

 Block116:
	cmp dword ptr [esi+0x2E98],0
	jne Block149

 Block117:
	mov ecx,esi
	call CUserLocal::HandleCtrlKeyDown
	mov eax,1
	jmp Block151

 Block118:
	cmp dword ptr [esi+0x2E98],0
	jne Block149

 Block119:
	mov ecx,esi
	call CUserLocal::IsSit
	test eax,eax
	jne Block132

 Block120:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 0x28
	call CInputSystem::IsKeyPressed
	mov edi,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nReverseInput_
	test eax,eax
	je Block122

 Block121:
	xor eax,eax
	test edi,edi
	sete al
	mov edi,eax

 Block122:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0x9F
	je Block149

 Block123:
	mov ecx,esi
	test edi,edi
	je Block125

 Block124:
	call CUserLocal::FallDown
	jmp Block128

 Block125:
	push 0
	call CUserLocal::Jump
	cmp dword ptr [esi+0x4808],0
	je Block128

 Block126:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr [esi+0x4808],0
	call SecondaryStat::IsWildhunterJaguarVehicle
	test eax,eax
	je Block128

 Block127:
	push 0
	push 0
	push 0x1F78E2A
	mov ecx,esi
	call CUserLocal::DoActiveSkill

 Block128:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block130

 Block129:
	call get_update_time
	lea ecx,[esp+0x60]
	push ecx
	lea edx,[esp+0x28]
	add eax,0xC8
	push edx
	lea ecx,[esi+0x46C4]
	mov dword ptr [esp+0x68],eax
	mov dword ptr [esp+0x2C],0x1C9C7AC
	call ZMap<long, long, long>::Insert
	mov eax,1
	jmp Block151

 Block130:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x40]
	mov ecx,esi
	call edx
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block149

 Block131:
	call get_update_time
	add eax,0xC8
	mov dword ptr [esp+0x60],eax
	lea eax,[esp+0x60]
	push eax
	lea ecx,[esp+0x28]
	push ecx
	lea ecx,[esi+0x46C4]
	mov dword ptr [esp+0x2C],0x1407329
	call ZMap<long, long, long>::Insert
	mov eax,1
	jmp Block151

 Block132:
	mov ecx,dword ptr [esp+0x60]
	push 0x1F4
	call CWvsContext::SendGetUpFromChairRequest
	mov eax,1
	jmp Block151

 Block133:
	mov edi,dword ptr [TSingleton<CNpcPool>::ms_pInstance]
	test edi,edi
	je Block141

 Block134:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[esi+4]
	push 0xC8
	lea eax,[esp+0x4C]
	push eax
	call edx
	push eax
	mov ecx,edi
	call CNpcPool::FindNpc_1
	test eax,eax
	je Block141

 Block135:
	add eax,8
	je Block141

 Block136:
	lea edi,[eax-8]
	mov dword ptr [esp+0x28],edi
	test edi,edi
	je Block138

 Block137:
	lea eax,[edi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block138:
	mov dword ptr [esp+0x58],1
	test edi,edi
	je Block140

 Block139:
	sub esp,8
	lea edx,[esp+0x2C]
	mov ecx,esp
	mov dword ptr [esp+0x68],esp
	push edx
	call ZRef<CNpc>::_ctor_copy
	mov ecx,esi
	call CUserLocal::TalkToNpc

 Block140:
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x58],0xFFFFFFFF
	call ZRef<CNpc>::~ZRef<CNpc>
	mov eax,1
	jmp Block151

 Block141:
	xor edi,edi
	mov dword ptr [esp+0x28],edi
	jmp Block138

 Block142:
	mov eax,dword ptr [ebx+1]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0xFFFFFFFF
	push 0
	sub eax,0x63
	push eax
	call CWvsContext::SendEmotionChange
	mov eax,1
	jmp Block151

 Block143:
	mov ecx,dword ptr [ebx+1]
	mov eax,ecx
	cdq
	mov esi,0x64
	idiv esi
	mov esi,edx
	add esi,8
	test ebp,0x100
	jne Block149

 Block144:
	push ecx
	mov ecx,dword ptr [esp+0x64]
	call CWvsContext::IsExist
	test eax,eax
	je Block149

 Block145:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0xFFFFFFFF
	push 0
	push esi
	call CWvsContext::SendEmotionChange
	mov eax,1
	jmp Block151

 Block146:
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	cmp dword ptr [ecx+0x3C],0
	jne Block149

 Block147:
	mov esi,dword ptr [ebx+1]
	mov ecx,dword ptr [esp+0x60]
	push esi
	call CWvsContext::IsExist
	test eax,eax
	je Block149

 Block148:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push esi
	call CWvsContext::SendActiveEffectItemChange

 Block149:
	mov eax,1
	jmp Block151

 Block150:
	xor eax,eax

 Block151:
	mov ecx,dword ptr [esp+0x50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 4
}
}
// CUserLocal::OnFieldFadeOutForce
__SUB_CLASS_THIS(005057F0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	mov dword ptr [esp+4],eax
	jmp  CAnimationDisplayer::RemoveAllFadeInAnimation
}
}
// CUserLocal::ViewAutoQuestAlert
_SUB_EXCEPTION_HANDLER(516600)
__SUB_CLASS_THIS0(00516600, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_516600
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x64
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [ebp-0x18],ecx
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [esi+0x3850]
	xor ebx,ebx
	mov dword ptr [ebp-0x48],esi
	cmp eax,ebx
	jne Block68

 Block1:
	cmp dword ptr [esi+0x4040],ebx
	jne Block3

 Block2:
	cmp dword ptr [esi+0x4074],ebx
	je Block68

 Block3:
	lea eax,[ebp-0x14]
	push 0x100A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	or edi,0xFFFFFFFF
	mov dword ptr [ebp-4],ebx
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	je Block5

 Block4:
	sub esp,8
	mov ecx,esp
	mov dword ptr [ebp-0x1C],esp
	push ebx
	push edi
	mov dword ptr [ecx+4],ebx
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 7
	push eax
	call CUIStatusBar::ChatLogAdd

 Block5:
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-4],edi
	cmp eax,ebx
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	lea ecx,[ebp-0x14]
	push 0x1036
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0x64
	push eax
	mov dword ptr [ebp-4],1
	call play_game_sound
	mov eax,dword ptr [ebp-0x14]
	add esp,8
	mov dword ptr [ebp-4],edi
	cmp eax,ebx
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block9:
	mov ecx,dword ptr [ebp-0x18]
	mov eax,dword ptr [ecx+0x46F0]
	add ecx,0x46F0
	mov dword ptr [ebp-0x14],1
	cmp eax,ebx
	je Block11

 Block10:
	mov dword ptr [ecx],ebx
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block11:
	lea eax,[esi+0x4044]
	mov eax,dword ptr [eax+0xC]
	mov dword ptr [ebp-0x5C],ebx
	mov dword ptr [ebp-0x60],eax
	cmp eax,ebx
	je Block58

 Block12:
	jmp Block14

 Block14:
	lea ecx,[ebp-0x60]
	push ecx
	call ZList<unsigned short>::GetNext
	movzx eax,word ptr [eax]
	add esp,4
	mov dword ptr [ebp-0x28],ebx
	movzx edx,ax
	lea eax,[ebp-0x28]
	push eax
	lea ecx,[ebp-0x20]
	push ecx
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	add ecx,0x13C
	mov dword ptr [ebp-4],2
	mov dword ptr [ebp-0x20],edx
	call ZMap<unsigned short, ZXString<char>, unsigned short>::GetAt
	test eax,eax
	je Block46

 Block15:
	mov dword ptr [ebp-0x2C],ebx
	mov dword ptr [ebp-0x20],ebx
	mov edx,dword ptr [ebp-0x28]
	push ebx
	push ebx
	push 0xFFFFFFFF
	push edx
	push ebx
	push ebx
	mov byte ptr [ebp-4],4
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov esi,esp
	lea eax,[ebp-0x1C]
	push 0x17A6
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edi,eax
	mov ecx,dword ptr [ebp-0x28]
	push 0x3FFFFFFF
	push esi
	push 0xFFFFFFFF
	push ecx
	push ebx
	push ebx
	mov byte ptr [ebp-4],5
	call MultiByteToWideChar
	mov edi,dword ptr [edi]
	push esi
	lea edx,[ebp-0x20]
	push edi
	push edx
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp-0x1C]
	add esp,0xC
	mov byte ptr [ebp-4],4
	cmp eax,ebx
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block17:
	mov esi,dword ptr [ebp-0x20]
	push ebx
	lea eax,[ebp-0x34]
	push eax
	push ebx
	push ecx
	mov dword ptr [ebp-0x24],esp
	mov ecx,esp
	push esi
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp-0x18]
	call CUser::LoadLayer
	cmp eax,ebx
	je Block50

 Block18:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x44]
	push ecx
	call esi
	lea edx,[ebp-0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block85

 Block19:
	lea eax,[ebp-0x58]
	push eax
	mov byte ptr [ebp-4],6
	call esi
	lea ecx,[ebp-0x58]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block85

 Block20:
	mov ecx,dword ptr [ebp-0x2C]
	mov byte ptr [ebp-4],7
	cmp ecx,ebx
	je Block64

 Block21:
	mov edi,dword ptr [ebp-0x44]
	mov edx,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x40]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp-0x3C]
	mov dword ptr [eax+8],edi
	mov edi,dword ptr [ebp-0x38]
	mov dword ptr [eax+0xC],edi
	mov edi,dword ptr [ebp-0x58]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0x54]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp-0x50]
	mov dword ptr [eax+8],edi
	mov edi,dword ptr [ebp-0x4C]
	push ebx
	mov dword ptr [eax+0xC],edi
	mov eax,dword ptr [edx+0x110]
	push ecx
	mov esi,ecx
	call eax
	cmp eax,ebx
	jge Block23

 Block22:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block23:
	mov esi,8
	mov byte ptr [ebp-4],6
	cmp word ptr [ebp-0x58],si
	jne Block26

 Block24:
	mov eax,dword ptr [ebp-0x50]
	xor ecx,ecx
	mov word ptr [ebp-0x58],cx
	cmp eax,ebx
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea edx,[ebp-0x58]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block27:
	mov byte ptr [ebp-4],4
	cmp word ptr [ebp-0x44],si
	jne Block30

 Block28:
	xor eax,eax
	mov word ptr [ebp-0x44],ax
	mov eax,dword ptr [ebp-0x3C]
	cmp eax,ebx
	je Block31

 Block29:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block31

 Block30:
	lea ecx,[ebp-0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block31:
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x24],esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [ebp-0x2C]
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [eax],edx
	mov eax,dword ptr [ebp-0x2C]
	mov dword ptr [ebp-0x24],esp
	cmp eax,ebx
	je Block33

 Block32:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block33:
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	call CAnimationDisplayer::RegisterOneTimeAnimation
	push ecx
	mov ecx,dword ptr [ebp-0x2C]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [ebp-0x2C]
	mov dword ptr [ebp-0x24],esp
	cmp eax,ebx
	je Block35

 Block34:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block35:
	call CAnimationDisplayer::CalcTotalDelay
	mov edi,eax
	mov eax,dword ptr [ebp-0x2C]
	add esp,4
	cmp edi,dword ptr [ebp-0x5C]
	jbe Block42

 Block36:
	mov ecx,dword ptr [ebp-0x18]
	mov esi,dword ptr [ecx+0x46F0]
	add ecx,0x46F0
	cmp esi,eax
	je Block41

 Block37:
	mov dword ptr [ecx],eax
	cmp eax,ebx
	je Block39

 Block38:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx
	mov eax,dword ptr [ebp-0x2C]

 Block39:
	cmp esi,ebx
	je Block41

 Block40:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx
	mov eax,dword ptr [ebp-0x2C]

 Block41:
	mov dword ptr [ebp-0x5C],edi

 Block42:
	mov ecx,dword ptr [ebp-0x20]
	mov dword ptr [ebp-0x14],ebx
	mov byte ptr [ebp-4],3
	cmp ecx,ebx
	je Block44

 Block43:
	add ecx,0xFFFFFFF4
	push ecx
	call ZXString<unsigned short>::_Release
	mov eax,dword ptr [ebp-0x2C]
	add esp,4

 Block44:
	mov byte ptr [ebp-4],2
	cmp eax,ebx
	je Block46

 Block45:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block46:
	mov eax,dword ptr [ebp-0x28]
	mov dword ptr [ebp-4],0xFFFFFFFF
	cmp eax,ebx
	je Block48

 Block47:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block48:
	cmp dword ptr [ebp-0x60],ebx
	jne Block14

 Block49:
	jmp Block56

 Block50:
	mov byte ptr [ebp-4],3
	cmp esi,ebx
	je Block52

 Block51:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<unsigned short>::_Release
	add esp,4

 Block52:
	mov eax,dword ptr [ebp-0x2C]
	mov byte ptr [ebp-4],2
	cmp eax,ebx
	je Block54

 Block53:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block54:
	mov eax,dword ptr [ebp-0x28]
	mov dword ptr [ebp-4],0xFFFFFFFF
	cmp eax,ebx
	je Block56

 Block55:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block56:
	cmp dword ptr [ebp-0x14],ebx
	je Block67

 Block57:
	xor ebx,ebx

 Block58:
	mov eax,dword ptr [ebp-0x18]
	cmp dword ptr [eax+0x46EC],ebx
	jne Block67

 Block59:
	mov dword ptr [ebp-0x2C],0
	push 0
	lea ecx,[ebp-0x34]
	push ecx
	mov ecx,dword ptr [ebp-0x48]
	push 0
	lea edx,[ebp-0x1C]
	push edx
	mov dword ptr [ebp-4],8
	call CWvsContext::GetAutoQuestIconAppearUOL
	mov eax,dword ptr [eax]
	push ecx
	mov dword ptr [ebp-0x24],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],9
	call _xbstr_t::_ctor_1
	mov esi,dword ptr [ebp-0x18]
	mov ecx,esi
	call CUser::LoadLayer
	test eax,eax
	mov eax,dword ptr [ebp-0x1C]
	sete bl
	mov byte ptr [ebp-4],8
	test eax,eax
	je Block61

 Block60:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block61:
	test bl,bl
	je Block63

 Block62:
	mov eax,dword ptr [ebp-0x2C]
	jmp Block99

 Block63:
	lea eax,[ebp-0x2C]
	lea edi,[esi+0x46F0]
	push eax
	mov ecx,edi
	call _x_com_ptr<IWzGr2DLayer>::op_assign_copy
	push offset _D_VTMISSING
	lea ecx,[ebp-0x44]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[ebp-0x70]
	mov byte ptr [ebp-4],0xA
	call Ztl_variant_t::_ctor_1
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xB
	test ecx,ecx
	jne Block65

 Block64:
	push 0x80004003
	call _com_issue_error

 Block65:
	lea edx,[ebp-0x44]
	push edx
	lea eax,[ebp-0x70]
	push eax
	push 0
	call IWzGr2DLayer::Animate
	lea ecx,[ebp-0x70]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[ebp-0x44]
	call Ztl_variant_t::~Ztl_variant_t
	mov eax,dword ptr [ebp-0x2C]
	mov dword ptr [esi+0x46EC],1
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block67

 Block66:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block67:
	mov esi,dword ptr [ebp-0x48]
	lea ecx,[esi+0x4044]
	call ZList<unsigned short>::RemoveAll
	xor eax,eax
	mov dword ptr [esi+0x4040],eax
	mov dword ptr [esi+0x4074],eax
	jmp Block101

 Block68:
	cmp dword ptr [ecx+0x46F0],ebx
	sete al
	test al,al
	jne Block74

 Block69:
	mov esi,dword ptr [ecx+0x46F0]
	cmp esi,ebx
	jne Block71

 Block70:
	push 0x80004003
	call _com_issue_error

 Block71:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x114]
	lea ecx,[ebp-0x14]
	push ecx
	push esi
	mov dword ptr [ebp-0x14],ebx
	call edx
	cmp eax,ebx
	jge Block73

 Block72:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block73:
	cmp dword ptr [ebp-0x14],ebx
	jne Block101

 Block74:
	mov dword ptr [ebp-0x4C],ebx
	push 0
	lea eax,[ebp-0x54]
	push eax
	push 0
	lea ecx,[ebp-0x1C]
	push ecx
	mov ecx,dword ptr [ebp-0x48]
	mov dword ptr [ebp-4],0xC
	call CWvsContext::GetAutoQuestIconUOL
	mov eax,dword ptr [eax]
	push ecx
	mov dword ptr [ebp-0x24],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],0xD
	call _xbstr_t::_ctor_1
	mov edi,dword ptr [ebp-0x18]
	mov ecx,edi
	call CUser::LoadLayer
	test eax,eax
	mov eax,dword ptr [ebp-0x1C]
	sete bl
	mov byte ptr [ebp-4],0xC
	test eax,eax
	je Block76

 Block75:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block76:
	mov eax,dword ptr [ebp-0x4C]
	test bl,bl
	je Block79

 Block77:
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block101

 Block78:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax
	jmp Block101

 Block79:
	mov esi,dword ptr [edi+0x46F0]
	cmp esi,eax
	je Block84

 Block80:
	mov dword ptr [edi+0x46F0],eax
	test eax,eax
	je Block82

 Block81:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block82:
	test esi,esi
	je Block84

 Block83:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block84:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x70]
	push edx
	call esi
	lea eax,[ebp-0x70]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block86

 Block85:
	push eax
	call _com_issue_error

 Block86:
	lea ecx,[ebp-0x44]
	mov bl,0xE
	push ecx
	mov byte ptr [ebp-4],bl
	call esi
	lea edx,[ebp-0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block88

 Block87:
	push eax
	call _com_issue_error

 Block88:
	mov ecx,dword ptr [edi+0x46F0]
	mov byte ptr [ebp-4],0xF
	test ecx,ecx
	jne Block90

 Block89:
	push 0x80004003
	call _com_issue_error

 Block90:
	lea eax,[ebp-0x70]
	push eax
	lea edx,[ebp-0x44]
	push edx
	push 0x20
	call IWzGr2DLayer::Animate
	mov esi,8
	mov byte ptr [ebp-4],bl
	mov ebx,dword ptr [ZImports::_VariantClear]
	cmp word ptr [ebp-0x44],si
	jne Block93

 Block91:
	xor eax,eax
	mov word ptr [ebp-0x44],ax
	mov eax,dword ptr [ebp-0x3C]
	test eax,eax
	je Block94

 Block92:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block94

 Block93:
	lea ecx,[ebp-0x44]
	push ecx
	call ebx

 Block94:
	mov byte ptr [ebp-4],0xC
	cmp word ptr [ebp-0x70],si
	jne Block97

 Block95:
	mov eax,dword ptr [ebp-0x68]
	xor edx,edx
	mov word ptr [ebp-0x70],dx
	test eax,eax
	je Block98

 Block96:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block98

 Block97:
	lea eax,[ebp-0x70]
	push eax
	call ebx

 Block98:
	mov eax,dword ptr [ebp-0x4C]
	mov dword ptr [edi+0x46EC],0

 Block99:
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block101

 Block100:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block101:
	lea esp,[ebp-0x80]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::HandleRButtonClk
_SUB_EXCEPTION_HANDLER(511A60)
__SUB_CLASS_THIS0(00511A60, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_511A60
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x90
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xA0]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	mov dword ptr [esp+0x3C],0
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x48]
	push eax
	mov ecx,edi
	mov dword ptr [esp+0x2C],edi
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x4C]
	test esi,esi
	je Block4

 Block1:
	add esi,0xFFFFFFF0
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block4:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 1
	lea edx,[esp+0x34]
	push edx
	mov dword ptr [esp+0x34],ecx
	call CWndMan::GetCursorPos
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	lea eax,[esp+0x30]
	push eax
	call CUserPool::FindRemoteUser
	mov ebx,eax
	lea ecx,[edi+0x2038]
	mov dword ptr [esp+0x58],ebx
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block6

 Block5:
	cmp dword ptr [edi+0x209C],0
	je Block16

 Block6:
	lea ecx,[esp+0x30]
	push ecx
	mov ecx,dword ptr [TSingleton<CEmployeePool>::ms_pInstance]
	call CEmployeePool::FindBalloon
	mov edi,eax
	test edi,edi
	je Block16

 Block7:
	xor eax,eax
	mov dword ptr [esp+0x14],eax
	lea edx,[esp+0x24]
	push edx
	mov ecx,edi
	mov dword ptr [esp+0xAC],eax
	call CEmployee::GetNameTag
	mov esi,eax
	lea eax,[esp+0x20]
	push 0xDBF
	push eax
	mov byte ptr [esp+0xB0],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0xB4],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0xC
	mov byte ptr [esp+0xA8],1
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xA8],0
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	lea eax,[esp+0x28]
	mov dword ptr [esp+0x30],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	call CUtilDlg::YesNo_0
	xor ecx,ecx
	add esp,0x14
	cmp eax,6
	sete cl
	mov eax,ecx
	test eax,eax
	je Block14

 Block12:
	push 0x90
	lea ecx,[esp+0x4C]
	call COutPacket::_ctor_1
	push 0x2D
	lea ecx,[esp+0x4C]
	mov byte ptr [esp+0xAC],3
	call COutPacket::Encode1
	mov edi,dword ptr [edi+0x88]
	push edi
	lea ecx,[esp+0x4C]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x48]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x4C]
	mov byte ptr [esp+0xA8],0
	call ZArray<unsigned char>::RemoveAll
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0xA8],0xFFFFFFFF
	test eax,eax
	je Block105

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0xA0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block14:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0xA8],0xFFFFFFFF
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov ecx,dword ptr [esp+0x2C]
	push 0
	lea eax,[esp+0x34]
	push eax
	call CWndMan::GetCursorPos
	test ebx,ebx
	je Block91

 Block17:
	mov eax,dword ptr [ebx+0x2E18]
	mov ecx,dword ptr [esp+0x18]
	cmp eax,dword ptr [ecx+0x2E18]
	jne Block105

 Block18:
	mov ecx,dword ptr [ebx+0x19EC]
	mov edi,dword ptr [ebx+0x19E8]
	mov dword ptr [esp+0x1C],edi
	mov dword ptr [esp+0x14],0
	test ecx,ecx
	je Block22

 Block19:
	mov eax,ecx
	lea esi,[eax+1]

 Block20:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block20

 Block21:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push 0
	push esi
	lea ecx,[esp+0x24]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x18]
	call ZXString<char>::ReleaseBuffer

 Block22:
	mov eax,dword ptr [esp+0x18]
	xor esi,esi
	mov dword ptr [esp+0xA8],4
	cmp dword ptr [eax+0x2E9C],esi
	jne Block24

 Block23:
	cmp dword ptr [eax+0x2E98],esi
	je Block25

 Block24:
	mov esi,1

 Block25:
	push 0x108
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov ebx,eax
	mov dword ptr [esp+0x40],ebx
	mov byte ptr [esp+0xA8],5
	test ebx,ebx
	je Block33

 Block26:
	mov edx,dword ptr [esp+0x34]
	mov eax,dword ptr [esp+0x30]
	push esi
	push edx
	push eax
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x48],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,ebx
	call CUIContextMenu::_ctor_0
	test eax,eax
	je Block33

 Block27:
	add eax,8
	je Block33

 Block28:
	lea esi,[eax-8]
	mov dword ptr [esp+0x4C],esi
	test esi,esi
	je Block30

 Block29:
	lea eax,[esi+0xC]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block30:
	mov ecx,esi
	mov byte ptr [esp+0xA8],6
	call CDialog::DoModal
	cmp eax,1
	jne Block87

 Block31:
	mov eax,dword ptr [esi+0xEC]
	cmp eax,0xA
	ja Block87

 Block32:
	cmp EAX, 0
je Block34
cmp EAX, 1
je Block35
cmp EAX, 2
je Block37
cmp EAX, 3
je Block39
cmp EAX, 4
je Block41
cmp EAX, 5
je Block43
cmp EAX, 6
je Block48
cmp EAX, 7
je Block52
cmp EAX, 8
je Block58
cmp EAX, 9
je Block60
cmp EAX, 10
je Block62


 Block33:
	xor esi,esi
	mov dword ptr [esp+0x4C],esi
	jmp Block30

 Block34:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	push 0
	push edi
	call CWvsContext::SendCharacterInfoRequest
	jmp Block87

 Block35:
	mov ecx,dword ptr [esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsApp>::ms_pInstance]
	call CWvsApp::SetClipboardText
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	test ecx,ecx
	je Block87

 Block36:
	push 0
	call CUIStatusBar::StartChat
	jmp Block87

 Block37:
	call get_field
	test eax,eax
	je Block87

 Block38:
	lea edx,[esp+0x14]
	push 0
	push edx
	call get_field
	mov ecx,eax
	call CField::SendInviteTradingRoomMsg
	jmp Block87

 Block39:
	call get_field
	test eax,eax
	je Block87

 Block40:
	lea eax,[esp+0x14]
	push 1
	push eax
	call get_field
	mov ecx,eax
	call CField::SendInviteTradingRoomMsg
	jmp Block87

 Block41:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block87

 Block42:
	push 1
	push ecx
	lea edx,[esp+0x1C]
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	push edx
	call ZXString<char>::_ctor_copy
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	call CUIStatusBar::SetWhisperTarget
	jmp Block87

 Block43:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block87

 Block44:
	mov ecx,dword ptr [esp+0x28]
	cmp dword ptr [ecx+0x3604],0
	je Block46

 Block45:
	call CWvsContext::AmIPartyBoss
	test eax,eax
	je Block87

 Block46:
	call get_field
	test eax,eax
	je Block87

 Block47:
	lea eax,[esp+0x14]
	push eax
	call get_field
	mov ecx,eax
	call CField::SendJoinPartyMsg
	jmp Block87

 Block48:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block87

 Block49:
	mov ecx,dword ptr [TSingleton<ExpeditionIntermediary>::ms_pInstance]
	call ExpeditionIntermediary::AmIMaster
	test eax,eax
	je Block87

 Block50:
	call get_field
	test eax,eax
	je Block87

 Block51:
	push ecx
	lea edx,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push edx
	call ZXString<char>::_ctor_copy
	mov ecx,dword ptr [TSingleton<ExpeditionIntermediary>::ms_pInstance]
	call ExpeditionIntermediary::SendExpInvitePacket
	jmp Block87

 Block52:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block87

 Block53:
	mov esi,dword ptr [esp+0x28]
	cmp dword ptr [esi+0x37C8],0
	je Block87

 Block54:
	mov ecx,esi
	call CWvsContext::AmIGuildMaster
	test eax,eax
	jne Block56

 Block55:
	mov eax,dword ptr [esi+0x20B4]
	push eax
	mov ecx,esi
	call CWvsContext::GetGuildMemberGrade
	cmp eax,2
	jne Block87

 Block56:
	call get_field
	test eax,eax
	je Block87

 Block57:
	push ecx
	lea eax,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push eax
	call ZXString<char>::_ctor_copy
	mov byte ptr [esp+0xAC],7
	call get_field
	mov ecx,eax
	mov byte ptr [esp+0xAC],6
	call CField::SendInviteGuildMsg
	jmp Block87

 Block58:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block87

 Block59:
	push ecx
	lea edx,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push edx
	call ZXString<char>::_ctor_copy
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	lea eax,[esp+0x28]
	push eax
	mov byte ptr [esp+0xB0],8
	call CUIStatusBar::GetChatLog
	mov byte ptr [esp+0xAC],9
	mov byte ptr [esp+0xAC],0xA
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push eax
	call CWvsContext::SendClaimRequest
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0xA8],6
	call ZArray<ZXString<char>>::RemoveAll
	jmp Block87

 Block60:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block87

 Block61:
	push ecx
	lea edx,[esp+0x18]
	mov ecx,esp
	mov dword ptr [esp+0x20],esp
	push edx
	call ZXString<char>::_ctor_copy
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::SendRegisterJunior
	jmp Block87

 Block62:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push edi
	call CUserPool::GetUser
	mov esi,eax
	test esi,esi
	je Block87

 Block63:
	mov ecx,dword ptr [esp+0x18]
	mov eax,dword ptr [ecx+0x19E4]
	test eax,eax
	je Block65

 Block64:
	add eax,0xFFFFFFF4
	jmp Block66

 Block65:
	xor eax,eax

 Block66:
	cmp dword ptr [eax+0x1A0],0
	jne Block68

 Block67:
	push 0
	push 1
	jmp Block86

 Block68:
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	test eax,eax
	je Block70

 Block69:
	add eax,0xFFFFFFF4
	jmp Block71

 Block70:
	xor eax,eax

 Block71:
	cmp dword ptr [eax+0x1A0],0
	mov eax,dword ptr [esp+0x20]
	sete bl
	test eax,eax
	je Block73

 Block72:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block73:
	test bl,bl
	je Block75

 Block74:
	push 0
	push 1
	jmp Block85

 Block75:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x10]
	lea edi,[esi+4]
	lea ecx,[esp+0x5C]
	push ecx
	mov ecx,edi
	call edx
	mov esi,dword ptr [esp+0x18]
	add esi,4
	mov ebx,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x6C]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax]
	sub eax,dword ptr [ebx]
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,0x50
	jg Block84

 Block76:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x8C]
	push ecx
	mov ecx,edi
	call edx
	lea ebx,[eax+4]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x7C]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	sub eax,dword ptr [ebx]
	cdq
	xor eax,edx
	sub eax,edx
	cmp eax,0x1E
	jg Block84

 Block77:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	mov ebx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	lea ecx,[esp+0x64]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x10]
	mov dword ptr [esp+0x40],eax
	lea eax,[esp+0x74]
	push eax
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x38],eax
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x84]
	push eax
	mov ecx,edi
	call edx
	mov dword ptr [esp+0x2C],eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x18]
	mov ecx,esi
	call edx
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	push eax
	lea eax,[esp+0x3C]
	push eax
	lea ecx,[esp+0x48]
	push ecx
	lea eax,[esp+0xA0]
	push eax
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [esp+0x38]
	mov edx,dword ptr [ecx]
	push eax
	push edx
	mov ecx,ebx
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	jne Block79

 Block78:
	push eax
	push 1
	jmp Block85

 Block79:
	mov eax,dword ptr [esp+0x58]
	cmp dword ptr [eax+0x2E9C],0
	je Block81

 Block80:
	push 0
	push 3
	jmp Block85

 Block81:
	mov eax,dword ptr [eax+0x2E98]
	test eax,eax
	je Block83

 Block82:
	push eax
	push 2
	jmp Block85

 Block83:
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	push 0
	push eax
	call CWvsContext::SendFollowCharacterRequest
	jmp Block87

 Block84:
	push 0
	push 6

 Block85:
	mov ecx,dword ptr [esp+0x20]

 Block86:
	call CUserLocal::FollowCharacterFailedMsg

 Block87:
	cmp dword ptr [esp+0x4C],0
	mov byte ptr [esp+0xA8],4
	je Block89

 Block88:
	push 0
	lea ecx,[esp+0x4C]
	call ZRef<CUIContextMenu>::_ReleaseRaw

 Block89:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0xA8],0xFFFFFFFF
	test eax,eax
	je Block91

 Block90:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block91:
	mov esi,dword ptr [esp+0x28]
	lea ecx,[esp+0x44]
	push ecx
	lea edx,[esp+0x40]
	push edx
	lea eax,[esp+0x38]
	push eax
	lea ecx,[esi+0x35D4]
	call CTemporaryStatView::FindIcon
	mov eax,dword ptr [esp+0x3C]
	sub eax,1
	je Block104

 Block92:
	sub eax,1
	jne Block105

 Block93:
	mov eax,dword ptr [esp+0x44]
	cmp eax,0x14011E
	je Block105

 Block94:
	cmp eax,0x4DD5CF
	jne Block97

 Block95:
	mov ecx,dword ptr [esp+0x18]
	cmp dword ptr [ecx+0x2ECC],0
	jg Block105

 Block96:
	push eax
	call CUserLocal::SendSkillCancelRequest
	mov ecx,dword ptr [esp+0xA0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block97:
	cmp eax,0x21612AA
	je Block105

 Block98:
	cmp eax,0x217C05C
	je Block105

 Block99:
	cmp eax,0x217E76D
	je Block105

 Block100:
	cmp eax,0x217E775
	je Block105

 Block101:
	cmp eax,0x21612A9
	je Block105

 Block102:
	cmp eax,0x2179951
	je Block105

 Block103:
	mov ecx,dword ptr [esp+0x18]
	push eax
	call CUserLocal::SendSkillCancelRequest
	mov ecx,dword ptr [esp+0xA0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block104:
	mov edx,dword ptr [esp+0x44]
	neg edx
	push edx
	mov ecx,esi
	call CWvsContext::SendStatChangeItemCancelRequest

 Block105:
	mov ecx,dword ptr [esp+0xA0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// ActionRandMan::GetRandom
__SUB_CLASS_THIS0(00504A40, __thiscall, 24071,  ActionRandMan, uint32_t) {
__asm {

 Block0:
	mov ecx,dword ptr [ecx+4]
	jmp  CRand32::Random
}
}
// CUserLocal::IsLocalUser
__SUB_CLASS_THIS0(00160050, __thiscall, 41326,  CUserLocal, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+8]
	call edx
	mov ecx,dword ptr [eax+0x35C]
	push ecx
	add eax,0x354
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	neg eax
	sbb eax,eax
	neg eax
	ret
}
}
// CUserLocal::SendSkillUseRequest
_SUB_EXCEPTION_HANDLER(53E930)
__SUB_CLASS_THIS(0053E930, __thiscall, 41421,  CUserLocal, int32_t, const SKILLENTRY*, long, unsigned long, long, unsigned long*, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_53E930
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x30
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x44]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ebx,dword ptr [esp+0x54]
	cmp dword ptr [ebx],0x1F914CE
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [esp+0x28],edi
	je Block4

 Block1:
	cmp dword ptr [edi+0x20B8],0
	jne Block45

 Block2:
	mov eax,dword ptr [edi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block45

 Block3:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0x12C
	jl Block45

 Block4:
	lea edx,[esp+0x20]
	push edx
	mov ecx,edi
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block9

 Block5:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block8

 Block6:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block8

 Block7:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block8:
	mov ebx,dword ptr [esp+0x54]
	mov dword ptr [esp+0x24],0

 Block9:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	xor edi,edi
	push edi
	push eax
	push ebp
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block45

 Block10:
	mov ecx,dword ptr [ebx]
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cdq
	mov ebx,0xA
	idiv ebx
	cmp edx,edi
	je Block12

 Block11:
	cmp edx,9
	jne Block13

 Block12:
	push ecx
	call is_command_skill
	add esp,4
	test eax,eax
	je Block45

 Block13:
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x20],edi
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	cmp eax,edi
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	mov dword ptr [esp+0x14],eax
	jmp Block16

 Block15:
	mov dword ptr [esp+0x14],edi

 Block16:
	mov eax,dword ptr [esp+0x20]
	cmp eax,edi
	je Block18

 Block17:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block18:
	lea ebp,[esi+0x88]
	mov ecx,ebp
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	mov ebx,dword ptr [esp+0x54]
	jle Block21

 Block19:
	mov eax,dword ptr [ebx]
	cmp eax,0x1E9F99C
	je Block45

 Block20:
	cmp eax,0x1EA20B0
	je Block45

 Block21:
	mov edi,dword ptr [esp+0x58]
	push edi
	mov ecx,ebx
	call SKILLENTRY::IsActionAppointed
	test eax,eax
	je Block36

 Block22:
	mov ecx,ebp
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block45

 Block23:
	cmp dword ptr [ebx],0x217994C
	jne Block25

 Block24:
	mov dword ptr [esi+0x644],0xD2

 Block25:
	mov ecx,dword ptr [esp+0x14]
	call CVecCtrl::IsOnLadder
	test eax,eax
	je Block27

 Block26:
	mov eax,0x40
	jmp Block30

 Block27:
	mov ecx,dword ptr [esp+0x14]
	call CVecCtrl::IsOnRope
	test eax,eax
	je Block29

 Block28:
	mov eax,0x41
	jmp Block30

 Block29:
	call _rand
	push eax
	push edi
	mov ecx,ebx
	call SKILLENTRY::GetRandomAppointedAction

 Block30:
	mov edx,dword ptr [ebp]
	push 0
	push 0x64
	mov dword ptr [esi+0x644],eax
	mov eax,dword ptr [edx+0x14]
	push 6
	mov ecx,ebp
	call eax
	cmp dword ptr [esi+0x2EAC],0
	je Block35

 Block31:
	call _rand
	push eax
	push edi
	mov ecx,ebx
	call SKILLENTRY::GetRandomAppointedAction
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	push eax
	push ecx
	call get_action_name_from_code
	add esp,8
	call get_dragon_action_code_from_name
	mov edi,eax
	add esp,4
	test edi,edi
	jl Block33

 Block32:
	cmp edi,0x1D
	jl Block34

 Block33:
	xor edi,edi

 Block34:
	mov ecx,dword ptr [esi+0x2EAC]
	mov ebx,dword ptr [esi+0x640]
	call CDragon::GetMoveAction
	mov ecx,dword ptr [esi+0x2EAC]
	mov edx,eax
	xor edx,ebx
	and edx,1
	push 0
	xor edx,eax
	push edx
	call CDragon::SetMoveAction
	mov ecx,dword ptr [esi+0x2EAC]
	push edi
	call CDragon::SetOneTimeAction
	mov ebx,dword ptr [esp+0x54]

 Block35:
	mov eax,dword ptr [esi+0x644]
	lea edi,[eax+eax*2]
	mov ecx,ebp
	lea edi,[edi*8+ActionData::m_saCharacterActions]
	call CAvatar::GetActionInfo
	mov eax,dword ptr [eax+8]
	imul eax,dword ptr [edi+0x10]
	cdq
	idiv dword ptr [edi+0xC]
	mov edi,dword ptr [esp+0x58]
	mov dword ptr [esp+0x1C],eax

 Block36:
	mov eax,dword ptr [ebx]
	cmp eax,0x236A6E
	jne Block38

 Block37:
	cmp dword ptr [esp+0x5C],0
	je Block61

 Block38:
	push eax
	call is_antirepeat_buff_skill
	add esp,4
	test eax,eax
	je Block41

 Block39:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x10]
	lea edi,[esi+4]
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,edi
	call edx
	mov ebp,eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebp]
	push eax
	push ecx
	lea ecx,[esi+0x3BB4]
	call CAntiRepeat::TryRepeat
	test eax,eax
	je Block45

 Block40:
	mov edi,dword ptr [esp+0x58]

 Block41:
	mov edx,dword ptr [ebx]
	push edx
	call is_event_vehicle_skill
	add esp,4
	test eax,eax
	je Block46

 Block42:
	call get_field
	test dword ptr [eax+0x178],0x200
	je Block46

 Block43:
	lea eax,[esp+0x54]
	push 0x15C0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x54],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x5C]
	add esp,8
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	test eax,eax
	je Block45

 Block44:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block45:
	xor eax,eax
	jmp Block62

 Block46:
	push 0x67
	lea ecx,[esp+0x38]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x4C],1
	call get_update_time
	push eax
	lea ecx,[esp+0x38]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebx]
	push ecx
	lea ecx,[esp+0x38]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x38]
	call COutPacket::Encode1
	mov edx,dword ptr [ebx]
	push edx
	call is_antirepeat_buff_skill
	add esp,4
	test eax,eax
	je Block48

 Block47:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x10]
	add esi,4
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,esi
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[esp+0x38]
	call COutPacket::Encode2
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x2C]
	push eax
	mov ecx,esi
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[esp+0x38]
	call COutPacket::Encode2

 Block48:
	cmp dword ptr [ebx],0x3EE1AE
	jne Block50

 Block49:
	mov ecx,dword ptr [esp+0x68]
	push ecx
	lea ecx,[esp+0x38]
	call COutPacket::Encode4

 Block50:
	mov eax,dword ptr [esp+0x5C]
	test eax,eax
	je Block53

 Block51:
	push eax
	lea ecx,[esp+0x38]
	call COutPacket::Encode1
	cmp dword ptr [ebx],0x234359
	jne Block53

 Block52:
	mov edx,dword ptr [esp+0x1C]
	push edx
	lea ecx,[esp+0x38]
	call COutPacket::Encode2

 Block53:
	mov edi,dword ptr [esp+0x60]
	test edi,edi
	jl Block58

 Block54:
	push edi
	lea ecx,[esp+0x38]
	call COutPacket::Encode1
	xor esi,esi
	test edi,edi
	jle Block58

 Block55:
	mov ebx,dword ptr [esp+0x64]

 Block56:
	mov eax,dword ptr [ebx+esi*4]
	push eax
	lea ecx,[esp+0x38]
	call COutPacket::Encode4
	inc esi
	cmp esi,edi
	jl Block56

 Block57:
	mov ebx,dword ptr [esp+0x54]

 Block58:
	mov ecx,dword ptr [esp+0x1C]
	push ecx
	lea ecx,[esp+0x38]
	call COutPacket::Encode2
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x34]
	push edx
	call CClientSocket::SendPacket
	cmp dword ptr [ebx],0x21612AA
	je Block60

 Block59:
	mov esi,dword ptr [esp+0x28]
	mov dword ptr [esi+0x20B8],1
	call get_update_time
	mov dword ptr [esi+0x20BC],eax

 Block60:
	lea ecx,[esp+0x38]
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block61:
	mov eax,1

 Block62:
	mov ecx,dword ptr [esp+0x44]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x3C
	ret 0x1C
}
}
// CUserLocal::ApplyIgnoreDAMOption
_SUB_EXCEPTION_HANDLER(5093B0)
__SUB_CLASS_THIS(005093B0, __thiscall, 41348,  CUserLocal, void, long, long, long&, long&, long&, long&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5093B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x38]
	mov eax,dword ptr [esp+0x2C]
	mov edi,dword ptr [esp+0x34]
	mov ebx,dword ptr [esp+0x40]
	mov ebp,dword ptr [esp+0x3C]
	mov dword ptr [esi],0
	mov dword ptr [edi],0
	mov dword ptr [ebx],0
	push eax
	lea ecx,[esp+0x18]
	mov dword ptr [ebp],0
	push ecx
	mov ecx,dword ptr [TSingleton<CItemOptionInfo>::ms_pInstance]
	call CItemOptionInfo::GetItemOption
	mov edx,dword ptr [esp+0x18]
	test edx,edx
	je Block8

 Block1:
	mov eax,dword ptr [esp+0x30]
	imul eax,0xE0
	add eax,dword ptr [edx+0xC]
	mov ecx,dword ptr [eax+0xA4]
	test ecx,ecx
	jle Block3

 Block2:
	mov dword ptr [esi],ecx
	mov ecx,dword ptr [eax]
	mov dword ptr [edi],ecx

 Block3:
	mov ecx,dword ptr [eax+0xA8]
	test ecx,ecx
	jle Block5

 Block4:
	mov dword ptr [ebx],ecx
	mov eax,dword ptr [eax]
	mov dword ptr [ebp],eax

 Block5:
	lea esi,[edx-0x10]
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block8

 Block6:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block8

 Block7:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block8:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 0x18
}
}
// CUserLocal::TryPassiveTransferField
__SUB_CLASS_THIS0(0051A2E0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	cmp dword ptr [esi+0x46E4],0
	je Block10

 Block1:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block10

 Block2:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	jmp Block5

 Block4:
	xor eax,eax

 Block5:
	cmp dword ptr [eax+0x1A0],0
	je Block10

 Block6:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block9

 Block7:
	mov ecx,esi
	call CUserLocal::IsAttract
	test eax,eax
	jne Block9

 Block8:
	mov ecx,esi
	call CUserLocal::HandleUpKeyDown

 Block9:
	mov dword ptr [esi+0x46E4],0

 Block10:
	pop esi
	ret
}
}
// CUserLocal::HandleXKeyDown
_SUB_EXCEPTION_HANDLER(50F6D0)
__SUB_CLASS_THIS0(0050F6D0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50F6D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x3AD4],0
	jne Block22

 Block1:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	call edx
	mov ecx,dword ptr [eax+0x35C]
	push ecx
	add eax,0x354
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block22

 Block2:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block22

 Block3:
	push eax
	mov ecx,esi
	call CUserLocal::CheckRidingVehicle
	test eax,eax
	jne Block22

 Block4:
	cmp dword ptr [esi+0x5E4],eax
	jne Block21

 Block5:
	lea edi,[esi+0x88]
	mov ecx,edi
	call CAvatar::IsMonsterMorphed
	test eax,eax
	jne Block21

 Block6:
	mov ecx,edi
	call CAvatar::IsHideMorphed
	test eax,eax
	jne Block21

 Block7:
	mov ecx,edi
	call CAvatar::IsAttackableMorphed
	test eax,eax
	jne Block21

 Block8:
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push eax
	push 0x1F4
	mov ecx,ebp
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block22

 Block9:
	mov ecx,esi
	or edi,0xFFFFFFFF
	call CUserLocal::IsSit
	test eax,eax
	jne Block20

 Block10:
	cmp dword ptr [esi+0x3AD4],eax
	jne Block22

 Block11:
	cmp dword ptr [esi+0x63C],eax
	jg Block22

 Block12:
	mov ecx,esi
	call CUser::IsStand
	test eax,eax
	je Block22

 Block13:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[esi+4]
	lea eax,[esp+0x14]
	push eax
	call edx
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	call get_field
	mov ecx,eax
	call CField::FindSeatByPosition
	mov edi,eax
	test edi,edi
	jge Block20

 Block14:
	lea eax,[esp+0x14]
	push eax
	mov ecx,ebp
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x14]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	push 3
	mov ecx,edi
	mov esi,1
	call CharacterData::GetItemSlotCount
	cmp eax,esi
	jl Block22

 Block15:
	push esi
	push 3
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,edi
	call CharacterData::GetItem
	mov ebx,dword ptr [eax+4]
	lea ecx,[esp+0x1C]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	test ebx,ebx
	je Block17

 Block16:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	push eax
	call is_portable_chair_item
	add esp,4
	test eax,eax
	jne Block19

 Block17:
	push 3
	mov ecx,edi
	inc esi
	call CharacterData::GetItemSlotCount
	cmp esi,eax
	jle Block15

 Block18:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block19:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	push eax
	push esi
	mov ecx,ebp
	call CWvsContext::SendSitOnPortableChairRequest
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block20:
	push 0x2D
	lea ecx,[esp+0x28]
	call COutPacket::_ctor_1
	push edi
	lea ecx,[esp+0x28]
	mov dword ptr [esp+0x44],0
	call COutPacket::Encode2
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x24]
	push edx
	call CClientSocket::SendPacket
	push 1
	mov ecx,ebp
	call CWvsContext::SetExclRequestSent
	lea ecx,[esp+0x28]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block21:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::AddChatMorphedMsg

 Block22:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::OnOpenClassCompetitionPage
_SUB_EXCEPTION_HANDLER(505580)
__SUB_CLASS_THIS(00505580, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_505580
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+8]
	mov dword ptr fs:[0],eax
	cmp dword ptr [TSingleton<CClassCompetition>::ms_pInstance],0
	jne Block3

 Block1:
	push 0xBA4
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+4],eax
	mov dword ptr [esp+0x10],0
	test eax,eax
	je Block3

 Block2:
	mov ecx,eax
	call CClassCompetition::_ctor_default

 Block3:
	mov ecx,dword ptr [esp+8]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x10
	ret 4
}
}
// CUserLocal::OnKeyDownSkillEnd
_SUB_EXCEPTION_HANDLER(5301B0)
__SUB_CLASS_THIS0(005301B0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5301B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esi+0x46C0]
	xor ebx,ebx
	cmp eax,ebx
	je Block2

 Block1:
	push eax
	call stop_skill_sound
	add esp,4
	mov dword ptr [esi+0x46C0],ebx

 Block2:
	mov dword ptr [esi+0x4690],ebx
	mov dword ptr [esi+0x4694],ebx
	mov eax,dword ptr [esi+0x4698]
	cmp eax,ebx
	je Block4

 Block3:
	mov dword ptr [esi+0x4698],ebx
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block4:
	call get_update_time
	sub eax,dword ptr [esi+0x4688]
	cmp eax,0x1E
	jle Block6

 Block5:
	mov ebp,eax
	mov dword ptr [esp+0x18],ebp
	jmp Block7

 Block6:
	mov dword ptr [esp+0x18],0x1E
	mov ebp,dword ptr [esp+0x18]

 Block7:
	mov eax,dword ptr [esi+0x3AD4]
	push eax
	call get_max_gauge_time
	add esp,4
	cmp ebp,eax
	jl Block9

 Block8:
	mov dword ptr [esp+0x18],eax
	mov ebp,eax

 Block9:
	lea edi,[esi+0x88]
	mov ecx,edi
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jle Block11

 Block10:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x44]
	mov ecx,esi
	call eax
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x14]
	push ebx
	push 0x64
	push 6
	mov ecx,edi
	call eax

 Block11:
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [esp+0x18],ebx
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x30]
	mov dword ptr [esp+0x24],ebx
	test eax,eax
	je Block16

 Block12:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block15

 Block13:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block15

 Block14:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block15:
	mov ebp,dword ptr [esp+0x18]
	mov dword ptr [esp+0x30],0

 Block16:
	mov edx,dword ptr [esi+0x3AD4]
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	push ebx
	call CSkillInfo::GetSkillLevel_0
	mov ebx,eax
	mov eax,dword ptr [esi+0x3AD4]
	cmp eax,0x2F9F6C
	je Block23

 Block17:
	cmp eax,0x4FAA8C
	je Block23

 Block18:
	cmp eax,0xC80EDA
	je Block23

 Block19:
	cmp eax,0x21612A9
	je Block23

 Block20:
	cmp eax,0x2179951
	je Block23

 Block21:
	cmp eax,0x1F962F1
	je Block23

 Block22:
	mov eax,dword ptr [esi+0x19E8]
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	call CAnimationDisplayer::RemovePrepareAnimation
	jmp Block24

 Block23:
	mov ecx,dword ptr [esp+0x14]
	push 1
	push 0
	push 6
	push ecx
	mov ecx,esi
	call CUser::ShowSkillPrepare

 Block24:
	mov eax,dword ptr [esi+0x3AD4]
	cmp eax,0x4FAA8C
	jg Block54

 Block25:
	je Block70

 Block26:
	cmp eax,0x312609
	jg Block40

 Block27:
	je Block35

 Block28:
	cmp eax,0x236A69
	jg Block33

 Block29:
	je Block64

 Block30:
	cmp eax,0x205D29
	je Block64

 Block31:
	cmp eax,0x21E3C9
	je Block64

 Block32:
	jmp Block79

 Block33:
	cmp eax,0x2F9F6C
	je Block70

 Block34:
	jmp Block79

 Block35:
	mov ecx,esi
	call CUserLocal::IsSkillAvailable
	test eax,eax
	je Block77

 Block36:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	lea edx,[esp+0x40]
	push edx
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::TryDoingMeleeAttack
	test eax,eax
	jne Block77

 Block37:
	mov ecx,dword ptr [esp+0x14]
	push eax
	push ebp
	push eax
	mov eax,dword ptr [esp+0x28]
	push eax
	push ebx
	push ecx
	mov ecx,esi
	call CUserLocal::TryDoingShootAttack

 Block38:
	test eax,eax
	je Block74

 Block39:
	mov edx,dword ptr [esi+0x3AD4]
	push edx
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	push eax
	mov eax,dword ptr [esi+0x3AD4]
	push 0x2A
	push eax
	call play_skill_sound
	add esp,0xC
	jmp Block79

 Block40:
	cmp eax,0x4DD5CC
	jg Block52

 Block41:
	je Block62

 Block42:
	sub eax,0x423D0A
	je Block46

 Block43:
	sub eax,1
	jne Block79

 Block44:
	mov ecx,esi
	call CUser::IsOnLadderOrRope
	test eax,eax
	jne Block79

 Block45:
	push eax
	push 0x7FFFFFFF
	push eax
	mov eax,dword ptr [esp+0x20]
	push 6
	push ebx
	push eax
	mov ecx,esi
	call CUser::ShowSkillEffect
	mov ecx,dword ptr [esi+0x3AD4]
	mov edi,dword ptr [esi]
	push ebp
	push ecx
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	mov edx,dword ptr [esi+0x3AD4]
	push eax
	mov eax,dword ptr [edi+0x50]
	push edx
	mov ecx,esi
	call eax
	jmp Block79

 Block46:
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	je Block79

 Block47:
	cmp ebx,1
	jl Block79

 Block48:
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebx
	add edi,0x20D0
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	imul eax,ebp
	mov ecx,dword ptr [esi+0x3AD4]
	push ecx
	mov dword ptr [esp+0x24],eax
	call get_max_gauge_time
	mov ecx,eax
	mov eax,dword ptr [esp+0x24]
	cdq
	idiv ecx
	add esp,4
	mov ecx,edi
	mov ebp,eax
	call BasicStat::_ZtlSecureGet_nMHP
	mov ecx,eax
	imul ecx,ebp
	mov eax,0x51EB851F
	imul ecx
	mov ecx,dword ptr [esp+0x24]
	sar edx,5
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	call GW_CharacterStat::_ZtlSecureGet_nHP
	cmp edi,eax
	jl Block51

 Block49:
	lea edx,[esp+0x28]
	push 0xB44
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x44],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x30]
	add esp,8
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	test eax,eax
	je Block79

 Block50:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block79

 Block51:
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [esp+0x14]
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push eax
	push 0
	push 0
	push 0
	push ebx
	push ecx
	mov ecx,esi
	call CUserLocal::TryDoingMeleeAttack
	jmp Block79

 Block52:
	cmp eax,0x4F5C6A
	je Block60

 Block53:
	jmp Block79

 Block54:
	cmp eax,0x151FF59
	jg Block66

 Block55:
	je Block64

 Block56:
	cmp eax,0xE66C4B
	jg Block63

 Block57:
	je Block62

 Block58:
	cmp eax,0xC80EDA
	je Block70

 Block59:
	cmp eax,0xD7511E
	jne Block79

 Block60:
	mov ecx,esi
	call CUser::IsOnLadderOrRope
	test eax,eax
	jne Block79

 Block61:
	mov edx,dword ptr [esi+0x3AD4]
	mov edi,dword ptr [esi]
	push ebp
	push edx
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	mov edx,dword ptr [edi+0x50]
	push eax
	mov eax,dword ptr [esi+0x3AD4]
	push eax
	mov ecx,esi
	call edx
	jmp Block79

 Block62:
	mov eax,dword ptr [esp+0x14]
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push ebp
	push 0
	push 0
	push 0
	push ebx
	push eax
	mov ecx,esi
	call CUserLocal::TryDoingMeleeAttack
	jmp Block79

 Block63:
	cmp eax,0x1518A28
	jne Block79

 Block64:
	mov ecx,esi
	call CUserLocal::IsSkillAvailable
	test eax,eax
	je Block74

 Block65:
	mov ecx,dword ptr [esp+0x14]
	push ebp
	push 0
	push ebx
	push ecx
	mov ecx,esi
	call CUserLocal::TryDoingMagicAttack
	jmp Block38

 Block66:
	cmp eax,0x21612A9
	jg Block75

 Block67:
	je Block73

 Block68:
	cmp eax,0x1F914CD
	je Block71

 Block69:
	cmp eax,0x1F962F1
	jne Block79

 Block70:
	push eax
	jmp Block78

 Block71:
	mov edx,dword ptr [esp+0x14]
	push ebp
	push ebx
	push edx
	mov ecx,esi
	call CUserLocal::TryDoingSwallowAbsorb
	test eax,eax
	jne Block79

 Block72:
	mov ecx,esi
	call CUserLocal::ResetMobWriggle
	mov eax,dword ptr [esi+0x3AD4]
	push eax
	jmp Block78

 Block73:
	push 1
	push ebx
	push 0x2160EC1
	mov ecx,esi
	call CUserLocal::SendSkillEffectRequest

 Block74:
	mov ecx,dword ptr [esi+0x3AD4]
	push ecx
	jmp Block78

 Block75:
	cmp eax,0x2179951
	jne Block79

 Block76:
	push 1
	push ebx
	push 0x2179569
	mov ecx,esi
	call CUserLocal::SendSkillEffectRequest

 Block77:
	mov edx,dword ptr [esi+0x3AD4]
	push edx

 Block78:
	mov ecx,esi
	call CUserLocal::SendSkillCancelRequest

 Block79:
	mov eax,dword ptr [esi+0x2EAC]
	test eax,eax
	je Block82

 Block80:
	mov ecx,dword ptr [eax+0xD0]
	test ecx,ecx
	je Block82

 Block81:
	mov dword ptr [eax+0xD0],0
	mov eax,dword ptr [ecx]
	push ecx
	mov ecx,dword ptr [eax+8]
	call ecx

 Block82:
	xor eax,eax
	mov dword ptr [esi+0x3AD4],eax
	mov dword ptr [esi+0x3AD8],eax
	mov dword ptr [esi+0x3ADC],eax
	mov dword ptr [esi+0x3AE0],eax
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret
}
}
// CUserLocal::TryConsumePetHP
_SUB_EXCEPTION_HANDLER(50D8A0)
__SUB_CLASS_THIS(0050D8A0, __thiscall, 41419,  CUserLocal, void, long, int32_t, unsigned char) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50D8A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x24]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x14],ebx
	test eax,eax
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov ebx,dword ptr [esp+0x14]
	mov dword ptr [esp+0x28],0

 Block5:
	mov ecx,dword ptr [ebp+0x2E44]
	mov eax,dword ptr [ecx+4]
	test eax,eax
	je Block29

 Block6:
	mov edx,dword ptr [eax+0x16C]
	push edx
	add eax,0x164
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	je Block29

 Block7:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+8]
	mov ecx,ebp
	call edx
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block29

 Block8:
	mov edx,dword ptr [ebx+0x69]
	push edx
	lea eax,[ebx+0x61]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esi+0x2138]
	push ecx
	add esi,0x2130
	push esi
	mov edi,eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	mov eax,edi
	sub eax,dword ptr [esp+0x4C]
	add esp,0x10
	imul eax,0x64
	cdq
	idiv ecx
	mov edx,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov ecx,dword ptr [edx+0x88]
	lea ecx,[ecx+ecx*4]
	test ecx,ecx
	je Block10

 Block9:
	cmp eax,ecx
	jl Block11

 Block10:
	cmp dword ptr [esp+0x40],0
	je Block29

 Block11:
	mov eax,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	mov eax,dword ptr [eax+0x3C0]
	mov dword ptr [esp+0x3C],eax
	test eax,eax
	je Block29

 Block12:
	xor esi,esi
	nop

 Block13:
	mov ecx,dword ptr [ebp+0x2E44]
	mov eax,dword ptr [ecx+esi*8+4]
	test eax,eax
	je Block18

 Block14:
	mov edx,dword ptr [eax+0x16C]
	push edx
	add eax,0x164
	push eax
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	test eax,eax
	jne Block17

 Block15:
	inc esi
	cmp esi,3
	jl Block13

 Block16:
	jmp Block18

 Block17:
	mov eax,dword ptr [ebp+0x2E44]
	mov esi,dword ptr [eax+esi*8+4]
	mov dword ptr [esp+0x18],esi
	test esi,esi
	jne Block20

 Block18:
	inc dword ptr [ebp+0x485C]
	cmp dword ptr [ebp+0x485C],3
	jg Block29

 Block19:
	push 3
	mov ecx,ebp
	call CUser::PetAutoSpeaking
	jmp Block29

 Block20:
	mov dword ptr [ebp+0x485C],0
	mov eax,dword ptr [ebx+0x509]
	test eax,eax
	je Block22

 Block21:
	mov eax,dword ptr [eax-4]

 Block22:
	lea esi,[eax-1]
	mov edi,1
	cmp esi,edi
	mov dword ptr [esp+0x40],esi
	jge Block32

 Block23:
	inc dword ptr [ebp+0x4854]
	cmp dword ptr [ebp+0x4854],3
	jg Block25

 Block24:
	push 4
	mov ecx,ebp
	call CUser::PetAutoSpeaking

 Block25:
	lea eax,[esp+0x3C]
	push 0xD89
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	xor esi,esi
	mov dword ptr [esp+0x34],esi
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],esi
	je Block27

 Block26:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x48],esp
	push esi
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],esi
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block27:
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,esi
	je Block29

 Block28:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block29:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 0xC

 Block31:
	mov ebx,dword ptr [esp+0x14]

 Block32:
	push edi
	push 2
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,ebx
	call CharacterData::GetItem
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block37

 Block33:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block36

 Block34:
	mov edx,dword ptr [esp+0x20]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x20]
	test ecx,ecx
	je Block36

 Block35:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block36:
	mov dword ptr [esp+0x20],0

 Block37:
	test ebx,ebx
	je Block41

 Block38:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	mov esi,dword ptr [esp+0x3C]
	cmp eax,esi
	jne Block40

 Block39:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+4]
	mov ecx,ebx
	call edx
	test eax,eax
	je Block43

 Block40:
	mov esi,dword ptr [esp+0x40]

 Block41:
	inc edi
	cmp edi,esi
	jle Block31

 Block42:
	jmp Block23

 Block43:
	test edi,edi
	je Block23

 Block44:
	mov eax,dword ptr [esp+0x44]
	push 0
	push eax
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [eax+0xA4]
	mov edx,dword ptr [eax+0xA0]
	push 0
	push esi
	push edi
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edx
	call CWvsContext::SendStatChangeItemUseRequestByPetQ
	mov dword ptr [ebp+0x4854],0
	jmp Block29
}
}
// CUserLocal::IsTeleportSkillAvailable
__SUB_CLASS_THIS(0053A350, __thiscall, 41442,  CUserLocal, int32_t, const SKILLENTRY*, long, tagPOINT&) {
__asm {

 Block0:
	sub esp,0x20
	push ebp
	push esi
	mov ebp,ecx
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block6

 Block1:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+8]
	mov ecx,ebp
	call edx
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block6

 Block2:
	mov esi,dword ptr [esp+0x2C]
	test esi,esi
	je Block6

 Block3:
	lea ecx,[ebp+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jle Block5

 Block4:
	cmp dword ptr [esi+0xC],3
	jne Block6

 Block5:
	cmp dword ptr [ebp+0x3B24],0
	je Block7

 Block6:
	pop esi
	xor eax,eax
	pop ebp
	add esp,0x20
	ret 0xC

 Block7:
	mov edx,dword ptr [ebp+4]
	mov edx,dword ptr [edx+0x10]
	push ebx
	lea ecx,[ebp+4]
	push edi
	mov edi,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	lea eax,[esp+0x18]
	push eax
	call edx
	mov eax,dword ptr [esi]
	cmp eax,0x4DFCDE
	je Block17

 Block8:
	cmp eax,0xE6935B
	je Block17

 Block9:
	mov eax,dword ptr [esp+0x38]
	push eax
	mov ecx,esi
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[esp+0x24]
	push ecx
	call SECRECT::ToRect
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x24]
	add esp,8
	test byte ptr [ebp+0x640],1
	mov edx,0
	setne dl
	push 1
	lea edx,[edx+edx-1]
	imul edx,dword ptr [esp+0x24]
	add eax,edx
	lea edx,[ecx+0x50]
	push edx
	lea edx,[esp+0x18]
	push edx
	push ecx
	push eax
	mov ecx,edi
	mov dword ptr [esp+0x2C],eax
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov esi,eax
	mov eax,dword ptr [esp+0x1C]
	lea ecx,[eax-0x50]
	push ecx
	lea edx,[esp+0x18]
	push edx
	push eax
	mov eax,dword ptr [esp+0x24]
	push eax
	mov ecx,edi
	call CWvsPhysicalSpace2D::GetFootholdAbove
	test esi,esi
	je Block15

 Block10:
	test eax,eax
	je Block14

 Block11:
	mov eax,dword ptr [esp+0x1C]
	mov edx,dword ptr [esp+0x10]
	mov ecx,dword ptr [esp+0x14]
	mov esi,eax
	mov edi,edx
	sub esi,ecx
	sub edi,eax
	cmp edi,esi
	jle Block13

 Block12:
	lea eax,[ecx-1]
	jmp Block33

 Block13:
	lea eax,[edx-1]
	jmp Block33

 Block14:
	mov eax,dword ptr [esp+0x10]
	dec eax
	jmp Block33

 Block15:
	test eax,eax
	je Block35

 Block16:
	mov eax,dword ptr [esp+0x14]
	dec eax
	jmp Block33

 Block17:
	xor ebx,ebx
	jmp Block19

 Block19:
	mov eax,dword ptr [ebp+0x19E4]
	test eax,eax
	je Block21

 Block20:
	lea ecx,[eax-0xC]
	jmp Block22

 Block21:
	xor ecx,ecx

 Block22:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+8]
	call eax
	test eax,eax
	jne Block28

 Block23:
	test byte ptr [ebp+0x640],1
	mov ecx,dword ptr [esp+0x18]
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x20],ecx
	je Block25

 Block24:
	add ecx,0xFFFFFFC9
	jmp Block26

 Block25:
	add ecx,0x37

 Block26:
	push 1
	lea edx,[eax+0x1E]
	push edx
	lea edx,[esp+0x18]
	push edx
	push eax
	push ecx
	mov ecx,edi
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov esi,eax
	mov eax,dword ptr [esp+0x1C]
	lea ecx,[eax-0x1E]
	push ecx
	lea edx,[esp+0x18]
	push edx
	push eax
	mov eax,dword ptr [esp+0x24]
	push eax
	mov ecx,edi
	call CWvsPhysicalSpace2D::GetFootholdAbove
	test esi,esi
	jne Block28

 Block27:
	test eax,eax
	je Block34

 Block28:
	test byte ptr [ebp+0x640],1
	je Block30

 Block29:
	sub dword ptr [esp+0x18],0x37
	jmp Block31

 Block30:
	add dword ptr [esp+0x18],0x37

 Block31:
	inc ebx
	cmp ebx,5
	jl Block19

 Block32:
	mov eax,dword ptr [esp+0x1C]

 Block33:
	mov ecx,dword ptr [esp+0x3C]
	mov edx,dword ptr [esp+0x18]
	pop edi
	pop ebx
	pop esi
	mov dword ptr [ecx+4],eax
	mov dword ptr [ecx],edx
	mov eax,1
	pop ebp
	add esp,0x20
	ret 0xC

 Block34:
	test ebx,ebx
	jne Block32

 Block35:
	pop edi
	pop ebx
	pop esi
	xor eax,eax
	pop ebp
	add esp,0x20
	ret 0xC
}
}
// CUserLocal::_ZtlSecureGet_m_bSit
__SUB_CLASS0(004DE730, __fastcall, 41460,  CUserLocal, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x3BA0]
	push eax
	add ecx,0x3B98
	push ecx
	call _ZtlSecureFuseHelper<int>::call
	add esp,8
	ret
}
}
// CUserLocal::GetProperBulletPosition
__SUB_CLASS_THIS(00507310, __thiscall, 41337,  CUserLocal, long, const SKILLENTRY*, long, long*, long*, long*) {
__asm {

 Block0:
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edi
	mov ebp,ecx
	lea eax,[esp+0x24]
	push eax
	mov ecx,esi
	mov dword ptr [esp+0x1C],ebp
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x10],ecx
	test eax,eax
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [esp+0x28],0

 Block5:
	mov eax,dword ptr [ebp+0x58C]
	push eax
	call get_weapon_type
	add esp,4
	cmp eax,0x2D
	je Block10

 Block6:
	cmp eax,0x2E
	je Block10

 Block7:
	cmp eax,0x2F
	je Block10

 Block8:
	cmp eax,0x31
	je Block10

 Block9:
	pop edi
	pop esi
	pop ebp
	xor eax,eax
	pop ebx
	add esp,0x1C
	ret 0x14

 Block10:
	mov ebp,dword ptr [esp+0x30]
	test ebp,ebp
	je Block13

 Block11:
	mov edi,dword ptr [esp+0x34]
	push edi
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [eax+0x144]
	push ecx
	add eax,0x13C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ebx,eax
	add esp,8
	mov dword ptr [esp+0x30],ebx
	test ebx,ebx
	jne Block14

 Block12:
	push edi
	mov ecx,ebp
	call SKILLENTRY::GetLevelData
	mov edx,dword ptr [eax+0x138]
	push edx
	add eax,0x130
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ebx,eax
	add esp,8
	mov dword ptr [esp+0x30],eax
	test ebx,ebx
	jne Block14

 Block13:
	mov ebx,1
	mov dword ptr [esp+0x30],ebx

 Block14:
	mov eax,dword ptr [esi+0x25F4]
	push eax
	lea ecx,[esi+0x25EC]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block16

 Block15:
	lea edx,[ebx+ebx]
	mov dword ptr [esp+0x30],edx

 Block16:
	mov eax,dword ptr [esi+0x281C]
	push eax
	lea edi,[esi+0x2814]
	push edi
	mov dword ptr [esp+0x1C],0
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block32

 Block17:
	mov ecx,dword ptr [esi+0x281C]
	push ecx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [esp+0x18]
	mov ebx,eax
	mov eax,dword ptr [edx+0x509]
	add esp,8
	add ebx,0x1F95EF
	test eax,eax
	je Block19

 Block18:
	mov eax,dword ptr [eax-4]

 Block19:
	lea ebp,[eax-1]
	mov edi,1
	cmp ebp,edi
	jl Block30

 Block20:
	lea ebx,[ebx]

 Block21:
	mov ecx,dword ptr [esp+0x10]
	push edi
	push 2
	lea eax,[esp+0x24]
	push eax
	call CharacterData::GetItem
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block26

 Block22:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block25

 Block23:
	mov ecx,dword ptr [esp+0x20]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x20]
	test ecx,ecx
	je Block25

 Block24:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block25:
	mov dword ptr [esp+0x20],0

 Block26:
	test esi,esi
	je Block29

 Block27:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	cmp eax,ebx
	jne Block29

 Block28:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x20]
	mov ecx,esi
	mov dword ptr [esp+0x14],edi
	call eax
	test eax,eax
	jg Block30

 Block29:
	inc edi
	cmp edi,ebp
	jle Block21

 Block30:
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block75

 Block31:
	mov dword ptr [eax],ebx
	jmp Block75

 Block32:
	mov ecx,dword ptr [esp+0x10]
	mov eax,dword ptr [ecx+0x509]
	test eax,eax
	je Block34

 Block33:
	mov eax,dword ptr [eax-4]

 Block34:
	dec eax
	mov dword ptr [esp+0x34],eax
	test ebp,ebp
	je Block58

 Block35:
	mov eax,dword ptr [ebp]
	cmp eax,0x4F837D
	je Block37

 Block36:
	cmp eax,0x4F837C
	jne Block58

 Block37:
	mov ebx,1
	cmp dword ptr [esp+0x34],ebx
	jl Block58

 Block38:
	jmp Block40

 Block40:
	mov ecx,dword ptr [esp+0x10]
	push ebx
	push 2
	lea edx,[esp+0x24]
	push edx
	call CharacterData::GetItem
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block45

 Block41:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block44

 Block42:
	mov eax,dword ptr [esp+0x20]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x20]
	test ecx,ecx
	je Block44

 Block43:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block44:
	mov dword ptr [esp+0x20],0

 Block45:
	test edi,edi
	je Block53

 Block46:
	lea esi,[edi+0xC]
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,dword ptr [esp+0x18]
	mov ecx,dword ptr [ecx+0x58C]
	push eax
	push ecx
	call is_correct_bullet_item
	add esp,8
	test eax,eax
	je Block53

 Block47:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x20]
	mov ecx,edi
	call eax
	cmp eax,dword ptr [esp+0x30]
	jl Block53

 Block48:
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	push eax
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block53

 Block49:
	cmp dword ptr [ebp],0x4F837D
	jne Block51

 Block50:
	mov ecx,esi
	call TSecType<long>::GetData
	push eax
	call is_pellet_ice_item
	add esp,4
	test eax,eax
	jne Block55

 Block51:
	cmp dword ptr [ebp],0x4F837C
	jne Block53

 Block52:
	mov ecx,esi
	call TSecType<long>::GetData
	push eax
	call is_pellet_fire_item
	add esp,4
	test eax,eax
	jne Block55

 Block53:
	inc ebx
	cmp ebx,dword ptr [esp+0x34]
	jle Block40

 Block54:
	jmp Block58

 Block55:
	mov esi,dword ptr [esp+0x38]
	mov dword ptr [esp+0x14],ebx
	test esi,esi
	je Block57

 Block56:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov dword ptr [esi],eax

 Block57:
	test ebx,ebx
	jne Block75

 Block58:
	mov ebx,1
	cmp dword ptr [esp+0x34],ebx
	jl Block91

 Block59:
	push ebx
	push 2
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CharacterData::GetItem
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block64

 Block60:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block63

 Block61:
	mov edx,dword ptr [esp+0x20]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x20]
	test ecx,ecx
	je Block63

 Block62:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block63:
	mov dword ptr [esp+0x20],0

 Block64:
	test edi,edi
	je Block70

 Block65:
	lea esi,[edi+0xC]
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,dword ptr [esp+0x18]
	mov ecx,dword ptr [ecx+0x58C]
	push eax
	push ecx
	call is_correct_bullet_item
	add esp,8
	test eax,eax
	je Block70

 Block66:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x20]
	mov ecx,edi
	call eax
	cmp eax,dword ptr [esp+0x30]
	jl Block70

 Block67:
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 0
	push eax
	call CWvsContext::IsAbleToConsume
	test eax,eax
	je Block70

 Block68:
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0x91C
	je Block70

 Block69:
	mov ecx,esi
	call TSecType<long>::GetData
	push eax
	call is_pellet_fire_item
	add esp,4
	test eax,eax
	je Block72

 Block70:
	inc ebx
	cmp ebx,dword ptr [esp+0x34]
	jle Block59

 Block71:
	mov eax,dword ptr [esp+0x14]
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 0x14

 Block72:
	mov esi,dword ptr [esp+0x38]
	mov dword ptr [esp+0x14],ebx
	test esi,esi
	je Block74

 Block73:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov dword ptr [esi],eax

 Block74:
	cmp ebx,dword ptr [esp+0x34]
	jg Block91

 Block75:
	mov ebp,dword ptr [esp+0x10]
	mov eax,dword ptr [ebp+0x515]
	test eax,eax
	je Block77

 Block76:
	mov eax,dword ptr [eax-4]

 Block77:
	lea ebx,[eax-1]
	mov edi,1
	cmp ebx,edi
	jl Block91

 Block78:
	push edi
	push 5
	lea edx,[esp+0x24]
	push edx
	mov ecx,ebp
	call CharacterData::GetItem
	mov esi,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block83

 Block79:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block82

 Block80:
	mov eax,dword ptr [esp+0x20]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x20]
	test ecx,ecx
	je Block82

 Block81:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block82:
	mov dword ptr [esp+0x20],0

 Block83:
	test esi,esi
	je Block85

 Block84:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [esp+0x18]
	mov ecx,dword ptr [ecx+0x58C]
	push eax
	push ecx
	call is_correct_bullet_cashitem
	add esp,8
	test eax,eax
	jne Block87

 Block85:
	inc edi
	cmp edi,ebx
	jle Block78

 Block86:
	mov eax,dword ptr [esp+0x14]
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 0x14

 Block87:
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block89

 Block88:
	mov dword ptr [eax],edi

 Block89:
	mov edi,dword ptr [esp+0x40]
	test edi,edi
	je Block91

 Block90:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov dword ptr [edi],eax

 Block91:
	mov eax,dword ptr [esp+0x14]
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 0x14
}
}
// CUserLocal::OnOpenUIWithOption
_SUB_EXCEPTION_HANDLER(532300)
__SUB_CLASS_THIS(00532300, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_532300
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov edi,dword ptr [esp+0x1C]
	mov ecx,edi
	call CInPacket::Decode4
	mov ecx,edi
	mov esi,eax
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edi,eax
	test ecx,ecx
	je Block2

 Block1:
	push 0xFFFFFFFF
	push esi
	call CWvsContext::UI_Open
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]

 Block2:
	cmp esi,7
	je Block10

 Block3:
	cmp esi,0x15
	je Block8

 Block4:
	cmp esi,0x21
	jne Block11

 Block5:
	cmp dword ptr [TSingleton<CUniqueModeless>::ms_pInstance],0
	jne Block11

 Block6:
	push 0xB38
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x1C],eax
	mov dword ptr [esp+0x14],0
	test eax,eax
	je Block11

 Block7:
	push edi
	mov ecx,eax
	call CRepairDurabilityDlg::_ctor_0
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 4

 Block8:
	mov ecx,dword ptr [TSingleton<CUIPartySearch>::ms_pInstance]
	test ecx,ecx
	je Block11

 Block9:
	push edi
	call CUIPartySearch::RequestPartyAdverSearch
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 4

 Block10:
	push 7
	call CWvsContext::UI_Close
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edi
	push 7
	call CWvsContext::UI_Toggle

 Block11:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 4
}
}
// CUserLocal::TryDoingNormalAttack
_SUB_EXCEPTION_HANDLER(5123C0)
__SUB_CLASS_THIS(005123C0, __thiscall, 41392,  CUserLocal, long, const ZArray<tagRECT>&, long&, int32_t) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5123C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x214
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [ebp-0x1FC],ecx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetMechanicMode
	cmp eax,0x217C05C
	je Block3

 Block1:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetMechanicMode
	cmp eax,0x217E76D
	je Block3

 Block2:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetMechanicMode
	cmp eax,0x217E775
	jne Block4

 Block3:
	or eax,0xFFFFFFFF
	jmp Block60

 Block4:
	call TSingleton<CWvsContext>::GetInstance
	mov dword ptr [ebp-0x20],eax
	mov ecx,dword ptr [ebp-0x20]
	call CWvsContext::IsUserGM
	test eax,eax
	je Block6

 Block5:
	push 0x97
	lea eax,[ebp-0xB0]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x200],eax
	mov ecx,dword ptr [ebp-0x200]
	mov dword ptr [ebp-0x204],ecx
	mov dword ptr [ebp-4],0
	push 0xC
	mov edx,dword ptr [ebp-0x204]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0xB0]
	call ZXString<char>::~ZXString<char>
	or eax,0xFFFFFFFF
	jmp Block60

 Block6:
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block10

 Block7:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::IsOnPlayingOneTimeAction
	test eax,eax
	jne Block10

 Block8:
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::IsAttract
	test eax,eax
	jne Block10

 Block9:
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::IsPreparingSkill
	test eax,eax
	je Block11

 Block10:
	or eax,0xFFFFFFFF
	jmp Block60

 Block11:
	mov ecx,dword ptr [ebp-0x1FC]
	call CUser::IsDarkSight
	test eax,eax
	je Block15

 Block12:
	push 0xD72625
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::GetSkillLevel
	test eax,eax
	jg Block15

 Block13:
	push 0x421211
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::GetSkillLevel
	test eax,eax
	jg Block15

 Block14:
	mov eax,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_cygnus_job
	add esp,4
	neg eax
	sbb eax,eax
	and eax,0x989680
	add eax,0x3D0CEB
	mov dword ptr [ebp-0xA4],eax
	push 0
	push 0x7FFFFFFF
	push 0
	push 6
	push 1
	mov ecx,dword ptr [ebp-0xA4]
	push ecx
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkill
	push eax
	mov ecx,dword ptr [ebp-0x1FC]
	call CUser::ShowSkillEffect
	mov edx,dword ptr [ebp-0xA4]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2A
	mov eax,dword ptr [ebp-0xA4]
	push eax
	call play_skill_sound
	add esp,0xC
	mov ecx,dword ptr [ebp-0xA4]
	push ecx
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::SendSkillCancelRequest
	or eax,0xFFFFFFFF
	jmp Block60

 Block15:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::IsHideMorphed
	test eax,eax
	je Block17

 Block16:
	push 0x4DD5CF
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::SendSkillCancelRequest
	or eax,0xFFFFFFFF
	jmp Block60

 Block17:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov ecx,eax
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	je Block19

 Block18:
	or eax,0xFFFFFFFF
	jmp Block60

 Block19:
	lea edx,[ebp-0xB8]
	push edx
	mov ecx,dword ptr [ebp-0x20]
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x208],eax
	mov ecx,dword ptr [ebp-0x208]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x2C],eax
	lea ecx,[ebp-0xB8]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [ebp-0x20]
	call CWvsContext::GetSecondaryStat
	mov dword ptr [ebp-0x8C],eax
	mov ecx,dword ptr [ebp-0x20]
	call CWvsContext::GetActionRndMan
	push eax
	lea ecx,[ebp-0x80]
	call ActionRandMan::_ctor_0
	mov dword ptr [ebp-4],1
	lea ecx,[ebp-0x80]
	call ActionRandMan::GetRandom
	mov dword ptr [ebp-0x1C],eax
	mov eax,dword ptr [ebp-0x1FC]
	mov ecx,dword ptr [eax+0x5A0]
	mov dword ptr [ebp-0x78],ecx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetMoveAction
	push eax
	call get_action_from_act_dir
	add esp,4
	cmp eax,5
	jne Block24

 Block20:
	cmp dword ptr [ebp-0x78],0
	je Block22

 Block21:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetRidingVehicle
	push eax
	push 0x29
	call pronstab_action_convert_for_jaguar
	add esp,8
	mov dword ptr [ebp-0x20C],eax
	jmp Block23

 Block22:
	mov dword ptr [ebp-0x20C],0xFFFFFFFF

 Block23:
	mov edx,dword ptr [ebp-0x20C]
	mov dword ptr [ebp-0x18],edx
	jmp Block28

 Block24:
	mov eax,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block27

 Block25:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	call get_weapon_type
	add esp,4
	cmp eax,0x2C
	jne Block27

 Block26:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov ecx,3
	div ecx
	add edx,0x91
	mov dword ptr [ebp-0x18],edx
	jmp Block28

 Block27:
	mov edx,dword ptr [ebp-0x1C]
	push edx
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	call get_weapon_type
	add esp,4
	push eax
	mov eax,dword ptr [ebp-0x78]
	push eax
	call get_random_melee_attack_action
	add esp,0x14
	mov dword ptr [ebp-0x18],eax

 Block28:
	cmp dword ptr [ebp-0x18],0
	jge Block30

 Block29:
	mov dword ptr [ebp-0xBC],0xFFFFFFFF
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x80]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xBC]
	jmp Block60

 Block30:
	mov ecx,dword ptr [ebp-0x8C]
	call SecondaryStat::_ZtlSecureGet_nFrozen_
	push eax
	mov ecx,dword ptr [ebp-0x1FC]
	call CUser::GetAuraBooster
	push eax
	push 4
	mov ecx,dword ptr [ebp-0x8C]
	call SecondaryStat::operator[]
	mov ecx,eax
	call TemporaryStatBase<long>::GetValue
	mov ecx,dword ptr [eax]
	push ecx
	mov ecx,dword ptr [ebp-0x8C]
	call SecondaryStat::_ZtlSecureGet_nBooster_
	push eax
	push 0
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::_ZtlSecureGet_m_nWeaponAttackSpeed
	push eax
	call get_attack_speed_degree
	add esp,0x18
	mov dword ptr [ebp-0x88],eax
	push 0
	push 0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov edx,dword ptr [ebp-0x8C]
	push edx
	mov eax,dword ptr [ebp-0x2C]
	push eax
	call get_weapon_mastery
	add esp,0x1C
	mov dword ptr [ebp-0x44],eax
	mov ecx,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+4]
	call eax
	movzx ecx,al
	push ecx
	mov edx,dword ptr [ebp-0x44]
	push edx
	mov eax,dword ptr [ebp-0x1FC]
	add eax,0x5B0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0xC0],esp
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x210],eax
	push 0
	push 0
	lea ecx,[ebp-0x40]
	push ecx
	call CUser::GetAfterimageUOL
	add esp,0x18
	mov dword ptr [ebp-0x214],eax
	mov byte ptr [ebp-4],2
	lea ecx,[ebp-0x40]
	call _xbstr_t::length
	test eax,eax
	jne Block32

 Block31:
	mov dword ptr [ebp-0xC4],0xFFFFFFFF
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x40]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x80]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xC4]
	jmp Block60

 Block32:
	lea edx,[ebp-0x3C]
	push edx
	mov eax,dword ptr [ebp-0x18]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0xC8],esp
	lea edx,[ebp-0x40]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x218],eax
	call TSingleton<CActionMan>::GetInstance
	mov ecx,eax
	call CActionMan::GetMeleeAttackRange
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea eax,[ebp-0xD0]
	push eax
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,4
	mov edx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0xD8]
	push ecx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,4
	mov edx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0x3C]
	push ecx
	call adjust_rect
	add esp,0x10
	lea edx,[ebp-0xE0]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,4
	mov eax,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	mov dword ptr [ebp-0x28],ecx
	mov ecx,dword ptr [ebp+8]
	call ZArray<tagRECT>::GetCount
	mov dword ptr [ebp-0x24],eax
	mov dword ptr [ebp-0x84],0xFFFFFFFF
	mov dword ptr [ebp-0xA8],0
	jmp Block34

 Block33:
	mov edx,dword ptr [ebp-0xA8]
	add edx,1
	mov dword ptr [ebp-0xA8],edx

 Block34:
	mov eax,dword ptr [ebp-0xA8]
	cmp eax,dword ptr [ebp-0x24]
	jge Block44

 Block35:
	mov ecx,dword ptr [ebp-0xA8]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call ZArray<tagRECT>::GetAt
	push eax
	call IsRectEmpty
	test eax,eax
	je Block37

 Block36:
	jmp Block33

 Block37:
	mov edx,dword ptr [ebp-0xA8]
	push edx
	mov ecx,dword ptr [ebp+8]
	call ZArray<tagRECT>::GetAt
	push eax
	lea eax,[ebp-0x3C]
	push eax
	lea ecx,[ebp-0x70]
	push ecx
	call IntersectRect
	test eax,eax
	je Block43

 Block38:
	cmp dword ptr [ebp+0x10],0
	je Block40

 Block39:
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::IsLeft
	mov esi,eax
	neg esi
	sbb esi,esi
	and esi,0xFFFFFFFE
	add esi,1
	mov edx,dword ptr [ebp-0xA8]
	push edx
	mov ecx,dword ptr [ebp+8]
	call ZArray<tagRECT>::GetAt
	mov edi,eax
	mov eax,dword ptr [ebp-0xA8]
	push eax
	mov ecx,dword ptr [ebp+8]
	call ZArray<tagRECT>::GetAt
	mov ecx,dword ptr [edi]
	add ecx,dword ptr [eax+8]
	mov eax,ecx
	cdq
	sub eax,edx
	sar eax,1
	imul esi,eax
	sub esi,dword ptr [ebp-0x28]
	js Block42

 Block40:
	mov edx,dword ptr [ebp-0xA8]
	mov dword ptr [ebp-0x84],edx
	jmp Block44

 Block42:
	mov eax,dword ptr [ebp-0xA8]
	mov dword ptr [ebp-0x84],eax

 Block43:
	jmp Block33

 Block44:
	cmp dword ptr [ebp+0x10],0
	je Block47

 Block45:
	cmp dword ptr [ebp-0x84],0xFFFFFFFF
	jne Block47

 Block46:
	mov dword ptr [ebp-0xE4],0xFFFFFFFF
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x40]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x80]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xE4]
	jmp Block60

 Block47:
	call get_update_time
	mov dword ptr [ebp-0x50],eax
	mov ecx,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block51

 Block48:
	mov dword ptr [ebp-0xE8],0
	lea ecx,[ebp-0xAC]
	push ecx
	lea edx,[ebp-0xE8]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x46C4
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block51

 Block49:
	mov eax,dword ptr [ebp-0x50]
	cmp eax,dword ptr [ebp-0xAC]
	jge Block51

 Block50:
	mov dword ptr [ebp-0xEC],0xFFFFFFFF
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x40]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x80]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0xEC]
	jmp Block60

 Block51:
	lea ecx,[ebp-0xF4]
	push ecx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,4
	mov edx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0xFC]
	push ecx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,4
	mov edx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x3BA4
	call CAntiRepeat::TryRepeat
	test eax,eax
	jne Block53

 Block52:
	mov dword ptr [ebp-0x100],0xFFFFFFFF
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x40]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x80]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x100]
	jmp Block60

 Block53:
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x88]
	push ecx
	mov edx,dword ptr [ebp-0x18]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	call CUser::SetAttackAction
	mov eax,dword ptr [ebp-0x18]
	imul eax,0x18
	add eax,offset ActionData::m_saCharacterActions
	mov dword ptr [ebp-0x14],eax
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetActionInfo
	mov ecx,dword ptr [ebp-0x14]
	mov edx,dword ptr [ecx+0x10]
	imul edx,dword ptr [eax+8]
	mov ecx,dword ptr [ebp-0x14]
	mov eax,edx
	cdq
	idiv dword ptr [ecx+0xC]
	mov edx,dword ptr [ebp+0xC]
	mov dword ptr [edx],eax
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x104],esp
	lea eax,[ebp-0x40]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x21C],eax
	mov ecx,dword ptr [ebp-0x21C]
	mov dword ptr [ebp-0x220],ecx
	mov byte ptr [ebp-4],3
	mov edx,dword ptr [ebp-0x18]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::IsLeft
	push eax
	call get_update_time
	mov ecx,dword ptr [ebp+0xC]
	add eax,dword ptr [ecx]
	push eax
	mov byte ptr [ebp-4],2
	mov ecx,dword ptr [ebp-0x1FC]
	call CUser::RegisterAfterimage
	mov edx,dword ptr [ebp-0x1FC]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [eax+0x40]
	call edx
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block55

 Block54:
	mov eax,dword ptr [ebp-0x14]
	mov ecx,dword ptr [eax+0xC]
	mov edx,dword ptr [ebp-0x50]
	lea eax,[edx+ecx+0x190]
	mov dword ptr [ebp-0x108],eax
	mov dword ptr [ebp-0x10C],0
	lea ecx,[ebp-0x108]
	push ecx
	lea edx,[ebp-0x10C]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt

 Block55:
	push 0x5F
	mov eax,dword ptr [ebp-0x18]
	imul eax,0x18
	add eax,offset ActionData::m_saCharacterActions+12
	push eax
	call GETCRC32Svr_long
	add esp,8
	mov dword ptr [ebp-0x4C],eax
	jmp Block57

 Block57:
	mov dword ptr [ebp-0x90],0x19DEA1BD
	mov dword ptr [ebp-0x10],0xBE02FF0A
	push 0
	lea ecx,[ebp-0x10]
	push ecx
	lea edx,[ebp-0xA0]
	push edx
	call DR_check
	add esp,0xC
	mov dword ptr [ebp-0x74],eax
	push 0x2F
	lea ecx,[ebp-0x60]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],4
	call get_field
	mov ecx,eax
	call CField::GetFieldKey
	movzx eax,al
	push eax
	lea ecx,[ebp-0x60]
	call COutPacket::Encode1
	xor ecx,ecx
	cmp dword ptr [ebp-0x78],0xA
	sete cl
	add ecx,1
	push ecx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0xA0]
	not edx
	push edx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x9C]
	not eax
	push eax
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	push 1
	lea ecx,[ebp-0x60]
	call COutPacket::Encode1
	mov ecx,dword ptr [ebp-0x98]
	not ecx
	push ecx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x94]
	not edx
	push edx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x2C]
	movzx ecx,byte ptr [eax+0x539]
	push ecx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode1
	push 0
	mov edx,dword ptr [ebp-0xA0]
	push edx
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0x48],eax
	mov eax,dword ptr [ebp-0x48]
	push eax
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	push 0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x48]
	push ecx
	push 4
	lea edx,[ebp-0x74]
	push edx
	call CCrc32::GetCrc32
	add esp,0x18
	push eax
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp-0x60]
	call COutPacket::Encode1
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,0x88
	call CAvatar::IsLeft
	shl eax,0xF
	mov ecx,dword ptr [ebp-0x18]
	and ecx,0x7FFF
	or eax,ecx
	push eax
	lea ecx,[ebp-0x60]
	call COutPacket::Encode2
	mov edx,dword ptr [ebp-0x4C]
	push edx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	movzx eax,byte ptr [ebp-0x78]
	push eax
	lea ecx,[ebp-0x60]
	call COutPacket::Encode1
	movzx ecx,byte ptr [ebp-0x88]
	push ecx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode1
	call get_update_time
	push eax
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp-0x60]
	call COutPacket::Encode4
	jmp Block59

 Block59:
	lea edx,[ebp-0x114]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,4
	mov eax,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode2
	lea edx,[ebp-0x11C]
	push edx
	mov ecx,dword ptr [ebp-0x1FC]
	add ecx,4
	mov eax,dword ptr [ebp-0x1FC]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x60]
	call COutPacket::Encode2
	lea edx,[ebp-0x60]
	push edx
	call SendPacket
	add esp,4
	mov ecx,dword ptr [ebp-0x1FC]
	call CUserLocal::SetPetsAngry
	lea ecx,[ebp-0x80]
	call ActionRandMan::PreventRollback
	mov eax,dword ptr [ebp-0x84]
	mov dword ptr [ebp-0x120],eax
	mov byte ptr [ebp-4],2
	lea ecx,[ebp-0x60]
	call COutPacket::~COutPacket
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x40]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x80]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x120]

 Block60:
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	mov esp,ebp
	pop ebp
	ret 0xC
}
}
// CUserLocal::SetPassiveSkillDataForced
_SUB_EXCEPTION_HANDLER(509730)
__SUB_CLASS_THIS(00509730, __thiscall, 41486,  CUserLocal, void, NakedParam<ZXString<char>>, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_509730
	mov eax,dword ptr fs:[0]
	push eax
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [edi+0x4844]
	test esi,esi
	je Block62

 Block1:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [eax+0x20B0],0
	jne Block3

 Block2:
	mov eax,dword ptr [eax+0x209C]
	test eax,eax
	je Block62

 Block3:
	push offset _S_MHPR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block5

 Block4:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi],eax
	jmp Block61

 Block5:
	push offset _S_MMPR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block7

 Block6:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+4],ecx
	jmp Block61

 Block7:
	push offset _S_CR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block9

 Block8:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+8],edx
	jmp Block61

 Block9:
	push offset _S_CRITICALDAMAGEMI
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block11

 Block10:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0xC],eax
	jmp Block61

 Block11:
	push offset _S_ACCR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block13

 Block12:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x10],ecx
	jmp Block61

 Block13:
	push offset _S_EVAR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block15

 Block14:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x14],edx
	jmp Block61

 Block15:
	push offset _S_AR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block17

 Block16:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x18],eax
	jmp Block61

 Block17:
	push offset _S_ER
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block19

 Block18:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x1C],ecx
	jmp Block61

 Block19:
	push offset _S_PDDR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block21

 Block20:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x20],edx
	jmp Block61

 Block21:
	push offset _S_MDDR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block23

 Block22:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x24],eax
	jmp Block61

 Block23:
	push offset _S_PDR__1
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block25

 Block24:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x28],ecx
	jmp Block61

 Block25:
	push offset _S_MDR__1
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block27

 Block26:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x2C],edx
	jmp Block61

 Block27:
	push offset _S_DAMR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block29

 Block28:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x30],eax
	jmp Block61

 Block29:
	push offset _S_PDR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block31

 Block30:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x34],ecx
	jmp Block61

 Block31:
	push offset _S_MDR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block33

 Block32:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x38],edx
	jmp Block61

 Block33:
	push offset _S_PADR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block35

 Block34:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x3C],eax
	jmp Block61

 Block35:
	push offset _S_MADR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block37

 Block36:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x40],ecx
	jmp Block61

 Block37:
	push offset _S_EXPR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block39

 Block38:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x44],edx
	jmp Block61

 Block39:
	push offset _S_IGNOREMOBPDPR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block41

 Block40:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x48],eax
	jmp Block61

 Block41:
	push offset _S_ASRR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block43

 Block42:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x4C],ecx
	jmp Block61

 Block43:
	push offset _S_TERR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block45

 Block44:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x50],edx
	jmp Block61

 Block45:
	push offset _S_MESOR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block47

 Block46:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x54],eax
	jmp Block61

 Block47:
	push offset _S_PADX
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block49

 Block48:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x58],ecx
	jmp Block61

 Block49:
	push offset _S_MADX
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block51

 Block50:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x5C],edx
	jmp Block61

 Block51:
	push offset _S_IGNOREMOBDAMR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block53

 Block52:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x60],eax
	jmp Block61

 Block53:
	push offset _S_PSDJUMP
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block55

 Block54:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x64],ecx
	jmp Block61

 Block55:
	push offset _S_PSDSPEED
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block57

 Block56:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x68],edx
	jmp Block61

 Block57:
	push offset _S_OVERCHARGER
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block59

 Block58:
	mov eax,dword ptr [esp+0x20]
	mov dword ptr [esi+0x6C],eax
	jmp Block61

 Block59:
	push offset _S_DISCOUNTR
	lea ecx,[esp+0x20]
	call ZXString<char>::Compare
	test eax,eax
	jne Block61

 Block60:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr [esi+0x70],ecx

 Block61:
	mov ecx,edi
	call CUserLocal::RevisePassiveSkillData

 Block62:
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block64

 Block63:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block64:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0xC
	ret 8
}
}
// CUserLocal::ApplyRecoveryOption
_SUB_EXCEPTION_HANDLER(509560)
__SUB_CLASS_THIS(00509560, __thiscall, 41354,  CUserLocal, void, long, long, long&, long&, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_509560
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov ebx,dword ptr [esp+0x28]
	mov ecx,dword ptr [TSingleton<CItemOptionInfo>::ms_pInstance]
	push ebx
	lea eax,[esp+0x14]
	push eax
	call CItemOptionInfo::GetItemOption
	mov edx,dword ptr [esp+0x14]
	test edx,edx
	je Block12

 Block1:
	mov eax,dword ptr [esp+0x2C]
	mov edi,dword ptr [esp+0x38]
	imul eax,0xE0
	add eax,dword ptr [edx+0xC]
	mov ecx,dword ptr [eax+0x8C]
	test ecx,ecx
	jle Block5

 Block2:
	test edi,edi
	je Block4

 Block3:
	cmp ebx,0x4ED5
	jne Block5

 Block4:
	mov esi,dword ptr [esp+0x30]
	add dword ptr [esi],ecx

 Block5:
	mov eax,dword ptr [eax+0x90]
	test eax,eax
	jle Block9

 Block6:
	test edi,edi
	je Block8

 Block7:
	cmp ebx,0x4ED5
	jne Block9

 Block8:
	mov ecx,dword ptr [esp+0x34]
	add dword ptr [ecx],eax

 Block9:
	lea esi,[edx-0x10]
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block12

 Block10:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block12

 Block11:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block12:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret 0x14
}
}
// CDualKeyChecker::Check
__SUB_CLASS_THIS(00519290, __thiscall, 42473,  CDualKeyChecker, CDualKeyChecker::State, CDualKeyChecker::KeyMsg&) {
__asm {

 Block0:
	push ebx
	push esi
	push edi
	mov edi,dword ptr [esp+0x10]
	test dword ptr [edi+4],0x80000000
	mov esi,ecx
	jne Block11

 Block1:
	movzx ebx,word ptr [edi+6]
	mov eax,dword ptr [esi]
	and ebx,0xFF
	mov dword ptr [esi+4],0
	mov dword ptr [esi],0
	test eax,eax
	jne Block5

 Block2:
	cmp ebx,0x1D
	je Block10

 Block3:
	cmp ebx,0x38
	je Block5

 Block4:
	push edi
	call CDualKeyChecker::PushAndPopMsg
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	ret 4

 Block5:
	cmp ebx,0x1D
	je Block7

 Block6:
	cmp ebx,0x38
	jne Block4

 Block7:
	test eax,eax
	je Block10

 Block8:
	cmp eax,ebx
	je Block10

 Block9:
	pop edi
	pop esi
	mov eax,2
	pop ebx
	ret 4

 Block10:
	call dword ptr [ZImports::_timeGetTime]
	lea ecx,[esi+8]
	mov dword ptr [esi+4],eax
	mov dword ptr [esi],ebx
	call ZList<CDualKeyChecker::KeyMsg>::AddTail_
	mov ecx,dword ptr [edi]
	mov dword ptr [eax],ecx
	mov edx,dword ptr [edi+4]
	pop edi
	pop esi
	mov dword ptr [eax+4],edx
	mov eax,1
	pop ebx
	ret 4

 Block11:
	cmp dword ptr [esi+0x10],0
	je Block13

 Block12:
	lea ebx,[esi+8]
	mov ecx,ebx
	call ZList<CDualKeyChecker::KeyMsg>::AddTail_
	mov ecx,dword ptr [edi]
	mov dword ptr [eax],ecx
	mov edx,dword ptr [edi+4]
	mov dword ptr [eax+4],edx
	mov esi,dword ptr [esi+0x14]
	mov eax,dword ptr [esi]
	mov dword ptr [edi],eax
	mov ecx,dword ptr [esi+4]
	mov dword ptr [edi+4],ecx
	mov edx,dword ptr [ebx+0xC]
	push edx
	mov ecx,ebx
	call ZList<CDualKeyChecker::KeyMsg>::RemoveAt

 Block13:
	pop edi
	pop esi
	xor eax,eax
	pop ebx
	ret 4
}
}
// CUserLocal::GetRepeatSkillPoint
__SUB_CLASS_THIS0(00348E50, __thiscall, 41328,  CUserLocal, long) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x3AF0]
	ret
}
}
// CUserLocal::Jump
__SUB_CLASS_THIS(0050A1D0, __thiscall, 41339,  CUserLocal, void, int32_t) {
__asm {

 Block0:
	push ecx
	cmp dword ptr [esp+8],0
	push esi
	push edi
	mov esi,ecx
	jne Block11

 Block1:
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block41

 Block2:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [eax+0x53C]
	push ecx
	add eax,0x534
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block41

 Block3:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block41

 Block4:
	mov ecx,dword ptr [esi+0x5F8]
	mov eax,offset _D_RIDING_WILDHUNTE__42+4

 Block5:
	cmp dword ptr [eax],ecx
	je Block8

 Block6:
	add eax,4
	cmp eax,offset _D_DB_DATE_19000101__44
	jl Block5

 Block7:
	jmp Block9

 Block8:
	cmp dword ptr [esi+0x630],0xFFFFFFFF
	jg Block41

 Block9:
	lea edi,[esi+0x88]
	mov ecx,edi
	call CAvatar::IsRidingWildHunterJaguar
	test eax,eax
	jne Block11

 Block10:
	mov ecx,edi
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block41

 Block11:
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[edi+0x2038]
	call TSecType<unsigned char>::GetData
	test al,1
	jne Block17

 Block12:
	cmp dword ptr [edi+0x209C],0
	jne Block17

 Block13:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block15

 Block14:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block16

 Block15:
	xor edi,edi

 Block16:
	test byte ptr [edi+0x178],1
	jne Block41

 Block17:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block19

 Block18:
	lea ecx,[eax-0xC]
	jmp Block20

 Block19:
	xor ecx,ecx

 Block20:
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block25

 Block21:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block23

 Block22:
	lea ecx,[eax-0xC]
	jmp Block24

 Block23:
	xor ecx,ecx

 Block24:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+8]
	call eax
	test eax,eax
	je Block27

 Block25:
	call get_update_time
	sub eax,dword ptr [esi+0x467C]
	cmp eax,0x12C
	jl Block41

 Block26:
	call get_update_time
	mov dword ptr [esi+0x467C],eax

 Block27:
	mov ecx,esi
	call CUserLocal::IsDashing2
	test eax,eax
	je Block29

 Block28:
	mov ecx,esi
	call CUser::GetDashingSkill
	push eax
	mov ecx,esi
	call CUserLocal::SendSkillCancelRequest

 Block29:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block31

 Block30:
	add eax,0xFFFFFFF4
	jmp Block32

 Block31:
	xor eax,eax

 Block32:
	mov dword ptr [eax+0x200],1
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xD2C]
	push ecx
	add eax,0xD24
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block35

 Block33:
	mov edx,dword ptr [esi+0x640]
	and edx,0xFFFFFFFE
	cmp edx,0x12
	je Block35

 Block34:
	call get_update_time
	mov dword ptr [esi+0x4674],eax

 Block35:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x40]
	mov ecx,esi
	call edx
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x15
	je Block37

 Block36:
	cmp ecx,0x7D0
	jne Block38

 Block37:
	call get_update_time
	mov dword ptr [esp+8],0x1407329
	jmp Block40

 Block38:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x40]
	mov ecx,esi
	call edx
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x23
	jne Block41

 Block39:
	call get_update_time
	mov dword ptr [esp+8],0x1C9C7AC

 Block40:
	lea ecx,[esp+0x10]
	push ecx
	lea edx,[esp+0xC]
	add eax,0x3C
	push edx
	lea ecx,[esi+0x46C4]
	mov dword ptr [esp+0x18],eax
	call ZMap<long, long, long>::Insert

 Block41:
	pop edi
	pop esi
	pop ecx
	ret 4
}
}
// CUserLocal::OnRandomMesobag_Failed
__SUB_CLASS_THIS(0050D560, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push ecx
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x14],esp
	push 0x17B3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x18
	ret 4
}
}
// CUserLocal::OnVengeanceSkillApply
_SUB_EXCEPTION_HANDLER(509B10)
__SUB_CLASS_THIS(00509B10, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_509B10
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x10],ecx
	mov ecx,dword ptr [esp+0x2C]
	call CInPacket::Decode4
	cmp eax,0x2F9B8A
	jne Block9

 Block1:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x14]
	push eax
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push offset _D_PVENGEANCE
	push 0x2F9B8A
	push eax
	mov dword ptr [esp+0x30],0
	call CSkillInfo::GetSkillLevel_0
	mov ebx,eax
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block6

 Block2:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block5

 Block3:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block5

 Block4:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block5:
	mov dword ptr [esp+0x18],0

 Block6:
	test ebx,ebx
	jle Block9

 Block7:
	mov eax,dword ptr [_D_PVENGEANCE]
	test eax,eax
	je Block9

 Block8:
	mov ecx,dword ptr [esp+0x10]
	push ebx
	push eax
	call CUserLocal::DoActiveSkill_MeleeAttack

 Block9:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret 4
}
}
// CUserLocal::CanUseBareHand
__SUB_CLASS_THIS0(00504060, __thiscall, 41424,  CUserLocal, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov ecx,dword ptr [eax+0x20F0]
	push ecx
	add eax,0x20E8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	imul eax,0x3E8
	sub ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	xor eax,eax
	add esp,8
	cmp ecx,5
	sete al
	ret
}
}
// CUserLocal::RequestUpgradeTombEffect
_SUB_EXCEPTION_HANDLER(508320)
__SUB_CLASS_THIS0(00508320, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_508320
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esi+0x2F1C]
	mov ebx,dword ptr [esi+0x2F20]
	push 0x3A
	lea ecx,[esp+0x14]
	call COutPacket::_ctor_1
	push 0x541370
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x2C],0
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	push ebx
	lea ecx,[esp+0x14]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x10]
	push eax
	call CClientSocket::SendPacket
	push ebx
	push edi
	push 0x541370
	mov ecx,esi
	call CUser::ShowUpgradeTombEffect
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret
}
}
// CUserLocal::GetSkillLevel
_SUB_EXCEPTION_HANDLER(508F60)
__SUB_CLASS_THIS(00508F60, __thiscall, 41426,  CUserLocal, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_508F60
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x14]
	push eax
	mov dword ptr [esp+0x14],0
	call CWvsContext::GetCharacterData
	mov edx,dword ptr [esp+0x2C]
	mov eax,dword ptr [eax+4]
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	push eax
	mov dword ptr [esp+0x30],0
	call CSkillInfo::GetSkillLevel_0
	mov ebx,eax
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block4

 Block3:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block4:
	mov eax,ebx
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret 4
}
}
// CUserLocal::ApplyMechanicMode
__SUB_CLASS_THIS(005034F0, __thiscall, 41342,  CUserLocal, void, long, long) {
__asm {

 Block0:
	mov eax,dword ptr [esp+8]
	push esi
	mov esi,ecx
	cmp eax,0x217E76D
	jne Block2

 Block1:
	mov eax,dword ptr [esi+0x5E8]
	mov dword ptr [esi+0x3AE4],eax
	call get_update_time
	mov dword ptr [esi+0x3AE8],eax
	pop esi
	ret 8

 Block2:
	cmp dword ptr [esp+8],0x217E76D
	jne Block6

 Block3:
	test eax,eax
	jne Block6

 Block4:
	cmp dword ptr [esi+0x3AE4],0x217E76B
	je Block6

 Block5:
	call CUserLocal::ClearRepeatSkill

 Block6:
	pop esi
	ret 8
}
}
// CUserLocal::DoActiveSkill_DamageMeter
_SUB_EXCEPTION_HANDLER(53D0D0)
__SUB_CLASS_THIS(0053D0D0, __thiscall, 41436,  CUserLocal, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_53D0D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [edi+0x20B8],0
	jne Block10

 Block1:
	mov eax,dword ptr [edi+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block10

 Block2:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0x12C
	jl Block10

 Block3:
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0xC],eax
	mov dword ptr [esp+0x30],0
	test eax,eax
	je Block11

 Block4:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	test eax,eax
	je Block11

 Block5:
	add eax,8
	je Block11

 Block6:
	lea esi,[eax-8]
	mov dword ptr [esp+0x14],esi
	test esi,esi
	je Block8

 Block7:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block8:
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x18],esp
	push 0x1659
	push eax
	mov dword ptr [esp+0x44],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0
	push 2
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	push 0
	push 0xA
	push 1
	push 0x5F5E0FF
	push 0
	push 0
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_INPUT_NO
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp dword ptr [esi+0xF4],0
	jg Block12

 Block9:
	push 0
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block10:
	xor eax,eax
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x28
	ret 4

 Block11:
	xor esi,esi
	mov dword ptr [esp+0x14],esi
	jmp Block8

 Block12:
	push 0x67
	lea ecx,[esp+0x1C]
	call COutPacket::_ctor_1
	mov byte ptr [esp+0x30],2
	call get_update_time
	push eax
	lea ecx,[esp+0x1C]
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x38]
	push ecx
	lea ecx,[esp+0x1C]
	call COutPacket::Encode4
	push 1
	lea ecx,[esp+0x1C]
	call COutPacket::Encode1
	mov esi,dword ptr [esi+0xF4]
	push esi
	lea ecx,[esp+0x1C]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x18]
	push edx
	call CClientSocket::SendPacket
	mov dword ptr [edi+0x20B8],1
	call get_update_time
	lea ecx,[esp+0x1C]
	mov dword ptr [edi+0x20BC],eax
	mov byte ptr [esp+0x30],1
	call ZArray<unsigned char>::RemoveAll
	push 0
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	call ZRef<CUtilDlgEx>::_ReleaseRaw
	mov eax,1
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x28
	ret 4
}
}
// CUserLocal::OnMakerResult
_SUB_EXCEPTION_HANDLER(5102F0)
__SUB_CLASS_THIS(005102F0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5102F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	xor esi,esi
	mov dword ptr [esp+0x14],esi
	mov edi,dword ptr [esp+0x48]
	mov ecx,edi
	mov dword ptr [esp+0x40],esi
	mov dword ptr [esp+0x20],esi
	mov dword ptr [esp+0x1C],esi
	mov dword ptr [esp+0x2C],esi
	mov dword ptr [esp+0x30],esi
	call CInPacket::Decode4
	mov dword ptr [esp+0x34],eax
	cmp eax,esi
	je Block2

 Block1:
	cmp eax,1
	jne Block94

 Block2:
	mov ecx,edi
	call CInPacket::Decode4
	mov ebx,2
	cmp eax,1
	je Block45

 Block3:
	cmp eax,ebx
	je Block45

 Block4:
	cmp eax,3
	jne Block21

 Block5:
	mov ecx,edi
	call CInPacket::Decode4
	mov ebp,eax
	mov ecx,edi
	mov dword ptr [esp+0x20],ebp
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov esi,eax
	push ebp
	lea eax,[esp+0x1C]
	push eax
	mov dword ptr [esp+0x24],1
	call CItemInfo::GetItemName
	push ebp
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov byte ptr [esp+0x48],0xB
	call CItemInfo::GetItemTypeName
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x40],0xC
	test eax,eax
	je Block10

 Block6:
	cmp byte ptr [eax],0
	je Block10

 Block7:
	lea edx,[esp+0x28]
	push 0x1542
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x18]
	mov edx,dword ptr [esp+0x24]
	mov eax,dword ptr [eax]
	push 1
	push ecx
	push edx
	push eax
	lea eax,[esp+0x24]
	push eax
	mov byte ptr [esp+0x54],0xD
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x3C]
	add esp,0x14
	mov byte ptr [esp+0x40],0xC
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	lea ecx,[esp+0x14]
	push 7
	push ecx
	call CHATLOG_ADD
	add esp,8

 Block10:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea edx,[esp+0x4C]
	push edx
	call CItemInfo::GetItemName
	mov eax,dword ptr [esp+0x48]
	mov bl,0xE
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block15

 Block11:
	cmp byte ptr [eax],0
	je Block15

 Block12:
	lea eax,[esp+0x28]
	push 0x132
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x48]
	mov eax,dword ptr [eax]
	push 0x64
	push ecx
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x50],0xF
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0x10
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	lea eax,[esp+0x14]
	push 7
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x50]
	add esp,8

 Block15:
	mov byte ptr [esp+0x40],0xC
	test eax,eax
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block17:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x40],0xB
	test eax,eax
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block19:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block94

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block94

 Block21:
	cmp eax,4
	jne Block94

 Block22:
	mov ecx,edi
	call CInPacket::Decode4
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov dword ptr [esp+0x34],eax
	call CItemInfo::GetItemName
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x40],0x10
	test eax,eax
	je Block27

 Block23:
	cmp byte ptr [eax],0
	je Block27

 Block24:
	lea edx,[esp+0x48]
	push 0x133
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x18]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0x4C],0x11
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x54]
	add esp,0xC
	mov byte ptr [esp+0x40],0x10
	test eax,eax
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block26:
	lea eax,[esp+0x14]
	push 7
	push eax
	call CHATLOG_ADD
	add esp,8

 Block27:
	mov ecx,edi
	call CInPacket::Decode4
	test eax,eax
	jle Block39

 Block28:
	mov dword ptr [esp+0x28],eax
	mov bl,0x13
	mov edi,edi

 Block29:
	mov ecx,edi
	call CInPacket::Decode4
	mov ecx,edi
	mov esi,eax
	call CInPacket::Decode4
	push esi
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov ebp,eax
	call CItemInfo::GetItemName
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea edx,[esp+0x28]
	push edx
	mov byte ptr [esp+0x48],0x12
	call CItemInfo::GetItemTypeName
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block34

 Block30:
	cmp byte ptr [eax],0
	je Block34

 Block31:
	lea eax,[esp+0x30]
	push 0x1542
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x48]
	mov edx,dword ptr [esp+0x24]
	mov eax,dword ptr [eax]
	push ebp
	push ecx
	push edx
	push eax
	lea eax,[esp+0x24]
	push eax
	mov byte ptr [esp+0x54],0x14
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x44]
	add esp,0x14
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block33

 Block32:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block33:
	lea ecx,[esp+0x14]
	push 7
	push ecx
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x50]
	add esp,8

 Block34:
	mov ecx,dword ptr [esp+0x24]
	mov byte ptr [esp+0x40],0x12
	test ecx,ecx
	je Block36

 Block35:
	add ecx,0xFFFFFFF4
	push ecx
	call ZXString<char>::_Release
	mov eax,dword ptr [esp+0x4C]
	add esp,4

 Block36:
	mov byte ptr [esp+0x40],0x10
	test eax,eax
	je Block38

 Block37:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block38:
	sub dword ptr [esp+0x28],1
	jne Block29

 Block39:
	mov ecx,edi
	call CInPacket::Decode4
	mov esi,eax
	test esi,esi
	jle Block43

 Block40:
	lea edx,[esp+0x48]
	push 0x131
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	neg esi
	push esi
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0x4C],0x15
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x54]
	add esp,0xC
	mov byte ptr [esp+0x40],0x10
	test eax,eax
	je Block42

 Block41:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block42:
	lea ecx,[esp+0x14]
	push 7
	push ecx
	call CHATLOG_ADD
	add esp,8

 Block43:
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esp+0x30],1
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block94

 Block44:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block94

 Block45:
	mov ecx,edi
	call CInPacket::Decode1
	movzx eax,al
	test eax,eax
	jne Block55

 Block46:
	mov ecx,edi
	call CInPacket::Decode4
	mov esi,eax
	mov ecx,edi
	mov dword ptr [esp+0x20],esi
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea edx,[esp+0x4C]
	mov ebp,eax
	push edx
	mov dword ptr [esp+0x24],ebp
	call CItemInfo::GetItemName
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x2C]
	push eax
	mov byte ptr [esp+0x48],1
	call CItemInfo::GetItemTypeName
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block51

 Block47:
	cmp byte ptr [eax],0
	je Block51

 Block48:
	lea ecx,[esp+0x24]
	push 0x1542
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esp+0x48]
	mov ecx,dword ptr [esp+0x28]
	mov eax,dword ptr [eax]
	push ebp
	push edx
	push ecx
	push eax
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x54],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0x14
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block50

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block50:
	lea eax,[esp+0x14]
	push 7
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x50]
	add esp,8

 Block51:
	mov ecx,dword ptr [esp+0x28]
	mov byte ptr [esp+0x40],1
	test ecx,ecx
	je Block53

 Block52:
	add ecx,0xFFFFFFF4
	push ecx
	call ZXString<char>::_Release
	mov eax,dword ptr [esp+0x4C]
	add esp,4

 Block53:
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block55

 Block54:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block55:
	mov ecx,edi
	call CInPacket::Decode4
	test eax,eax
	jle Block67

 Block56:
	mov dword ptr [esp+0x28],eax
	xor ebx,ebx

 Block57:
	mov ecx,edi
	call CInPacket::Decode4
	mov ecx,edi
	mov ebp,eax
	call CInPacket::Decode4
	push ebp
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov esi,eax
	call CItemInfo::GetItemName
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0x40],4
	cmp eax,ebx
	je Block64

 Block58:
	cmp byte ptr [eax],0
	je Block64

 Block59:
	lea edx,[esp+0x24]
	push 0x132
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x48]
	mov eax,dword ptr [eax]
	push esi
	push ecx
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x50],5
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x34]
	add esp,0x10
	mov byte ptr [esp+0x40],4
	cmp eax,ebx
	je Block61

 Block60:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block61:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	je Block63

 Block62:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x20],esp
	push ebx
	push 0xFFFFFFFF
	mov dword ptr [eax+4],ebx
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 7
	push eax
	call CUIStatusBar::ChatLogAdd

 Block63:
	mov eax,dword ptr [esp+0x48]

 Block64:
	mov byte ptr [esp+0x40],0
	cmp eax,ebx
	je Block66

 Block65:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block66:
	sub dword ptr [esp+0x28],1
	jne Block57

 Block67:
	mov ecx,edi
	call CInPacket::Decode4
	xor esi,esi
	cmp eax,esi
	jle Block79

 Block68:
	mov ebp,eax
	mov bl,6

 Block69:
	mov ecx,edi
	call CInPacket::Decode4
	push eax
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemName
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0x40],bl
	cmp eax,esi
	je Block76

 Block70:
	cmp byte ptr [eax],0
	je Block76

 Block71:
	lea edx,[esp+0x28]
	push 0x132
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x48]
	mov eax,dword ptr [eax]
	push 1
	push ecx
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x50],7
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0x10
	mov byte ptr [esp+0x40],bl
	cmp eax,esi
	je Block73

 Block72:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block73:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],esi
	je Block75

 Block74:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	push esi
	push 0xFFFFFFFF
	mov dword ptr [eax+4],esi
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 7
	push eax
	call CUIStatusBar::ChatLogAdd

 Block75:
	mov eax,dword ptr [esp+0x48]

 Block76:
	mov byte ptr [esp+0x40],0
	cmp eax,esi
	je Block78

 Block77:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block78:
	sub ebp,1
	jne Block69

 Block79:
	mov ecx,edi
	call CInPacket::Decode1
	movzx eax,al
	cmp eax,esi
	je Block89

 Block80:
	mov ecx,edi
	call CInPacket::Decode4
	push eax
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemName
	mov eax,dword ptr [esp+0x48]
	mov bl,8
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block87

 Block81:
	cmp byte ptr [eax],0
	je Block87

 Block82:
	lea edx,[esp+0x28]
	push 0x132
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x48]
	mov eax,dword ptr [eax]
	push 1
	push ecx
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x50],9
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0x10
	mov byte ptr [esp+0x40],bl
	test eax,eax
	je Block84

 Block83:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block84:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block86

 Block85:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [eax+4],0
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 7
	push eax
	call CUIStatusBar::ChatLogAdd

 Block86:
	mov eax,dword ptr [esp+0x48]

 Block87:
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block89

 Block88:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block89:
	mov ecx,edi
	call CInPacket::Decode4
	mov esi,eax
	test esi,esi
	jle Block94

 Block90:
	lea ecx,[esp+0x48]
	push 0x131
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	neg esi
	push esi
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0x4C],0xA
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x54]
	add esp,0xC
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block92

 Block91:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block92:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block94

 Block93:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x50],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [eax+4],0
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 7
	push eax
	call CUIStatusBar::ChatLogAdd

 Block94:
	mov ecx,dword ptr [TSingleton<CUIItemMaker>::ms_pInstance]
	test ecx,ecx
	je Block97

 Block95:
	mov edx,dword ptr [esp+0x2C]
	mov eax,dword ptr [esp+0x1C]
	push edx
	mov edx,dword ptr [esp+0x24]
	push eax
	mov eax,dword ptr [esp+0x3C]
	push edx
	push eax
	call CUIItemMaker::OnItemMakeResult
	cmp dword ptr [esp+0x30],0
	je Block97

 Block96:
	mov ecx,dword ptr [TSingleton<CUIItemMaker>::ms_pInstance]
	call CUIItemMaker::ClearItemSlot
	mov ecx,dword ptr [TSingleton<CUIItemMaker>::ms_pInstance]
	call CUIItemMaker::SetItemSlot

 Block97:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block99

 Block98:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block99:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 4
}
}
// CUserLocal::SetClientTimer
__SUB_CLASS_THIS(0050E8B0, __thiscall, 41342,  CUserLocal, void, long, long) {
__asm {

 Block0:
	sub esp,0xC
	cmp dword ptr [esp+0x10],0x41EEE8
	jne Block8

 Block1:
	push esi
	lea esi,[ecx+0x47CC]
	mov ecx,esi
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+8],eax
	test eax,eax
	je Block5

 Block2:
	lea eax,[esp+4]
	push eax
	lea ecx,[esp+0xC]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0xC],0
	call ZMap<long, long, long>::GetNext
	cmp dword ptr [esp+4],0x41EEE8
	mov edx,dword ptr [eax]
	mov dword ptr [esp+0xC],edx
	jne Block4

 Block3:
	lea eax,[esp+0xC]
	push eax
	mov ecx,esi
	call ZMap<long, long, long>::RemoveKey

 Block4:
	cmp dword ptr [esp+8],0
	jne Block2

 Block5:
	push 0
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	call ZMap<long, long, long>::GetAt
	lea edx,[esp+0x14]
	test eax,eax
	push edx
	lea eax,[esp+0x1C]
	push eax
	je Block7

 Block6:
	mov ecx,dword ptr [esp+0x20]
	inc ecx
	mov dword ptr [esp+0x20],ecx

 Block7:
	mov ecx,esi
	call ZMap<long, long, long>::Insert
	pop esi

 Block8:
	add esp,0xC
	ret 8
}
}
// CUserLocal::GetPassiveSkillData
__SUB_CLASS_THIS0(001008C0, __thiscall, 41485,  CUserLocal, const ZRef<PassiveSkillData>) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [ecx+0x4844]
	push esi
	mov esi,dword ptr [esp+0xC]
	mov dword ptr [esp+4],0
	mov dword ptr [esi+4],eax
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block2:
	mov eax,esi
	pop esi
	pop ecx
	ret 4
}
}
// CUserLocal::CheckRidingVehicle
_SUB_EXCEPTION_HANDLER(50E100)
__SUB_CLASS_THIS(0050E100, __thiscall, 41425,  CUserLocal, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50E100
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [ecx+0x5F8]
	push esi
	call is_vehicle
	add esp,4
	test eax,eax
	jne Block2

 Block1:
	xor eax,eax
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret 4

 Block2:
	mov eax,offset _D_RIDING_WILDHUNTE__42+4
	nop

 Block3:
	cmp dword ptr [eax],esi
	je Block8

 Block4:
	add eax,4
	cmp eax,offset _D_DB_DATE_19000101__44
	jl Block3

 Block5:
	mov eax,0x10624DD3
	imul esi
	sar edx,6
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0x7BF
	je Block1

 Block6:
	mov eax,0x68DB8BAD
	imul esi
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0xBE
	jne Block10

 Block7:
	lea edx,[esp+0x1C]
	push 0xF11
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x1C],1
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x24]
	jmp Block12

 Block8:
	cmp dword ptr [esp+0x1C],0
	jne Block1

 Block9:
	lea eax,[esp+0x1C]
	push 0x18CF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x1C],0
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x24]
	jmp Block12

 Block10:
	cmp eax,0xC1
	jne Block14

 Block11:
	lea eax,[esp+8]
	push 0xF10
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov dword ptr [esp+0x1C],2
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x10]

 Block12:
	add esp,8
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	mov eax,1
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret 4
}
}
// CUserLocal::OnQuestGuideResult
_SUB_EXCEPTION_HANDLER(50F1E0)
__SUB_CLASS_THIS(0050F1E0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50F1E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xB50
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xB64]
	mov dword ptr fs:[0],eax
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	test edi,edi
	je Block24

 Block1:
	mov esi,dword ptr [esp+0xB74]
	mov ecx,esi
	call CInPacket::Decode1
	movzx eax,al
	sub eax,1
	je Block4

 Block2:
	sub eax,1
	jne Block24

 Block3:
	mov ecx,edi
	call CWvsContext::ResetWorldMapQuestDemand
	jmp Block24

 Block4:
	mov ecx,esi
	call CInPacket::Decode2
	movzx eax,ax
	mov ecx,esi
	mov dword ptr [esp+0x20],eax
	call CInPacket::Decode4
	xor ebp,ebp
	mov ebx,eax
	mov dword ptr [edi+0x20B8],ebp
	call get_update_time
	mov dword ptr [edi+0x20BC],eax
	test ebx,ebx
	jne Block6

 Block5:
	push ebx
	push ebx
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0x19EA
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block24

 Block6:
	call get_field
	mov dword ptr [esp+0x14],eax
	test eax,eax
	je Block24

 Block7:
	test ebx,ebx
	jle Block16

 Block8:
	mov dword ptr [esp+0x18],ebx

 Block9:
	mov ecx,esi
	call CInPacket::Decode4
	mov ecx,esi
	mov ebx,eax
	call CInPacket::Decode2
	movzx eax,ax
	test eax,eax
	jle Block14

 Block10:
	mov dword ptr [esp+0x1C],eax

 Block11:
	mov ecx,esi
	call CInPacket::Decode4
	test eax,eax
	jbe Block13

 Block12:
	push eax
	push ebx
	mov ecx,edi
	call CWvsContext::AddWorldMapQuestDemandItem
	mov ebp,1

 Block13:
	sub dword ptr [esp+0x1C],1
	jne Block11

 Block14:
	sub dword ptr [esp+0x18],1
	jne Block9

 Block15:
	test ebp,ebp
	jne Block17

 Block16:
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x28],esp
	push 0x19EA
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14
	jmp Block24

 Block17:
	mov ax,word ptr [esp+0x20]
	lea ecx,[esp+0x24]
	mov word ptr [edi+0x4238],ax
	call CWorldMapDlg::_ctor_default
	mov ecx,dword ptr [esp+0x14]
	add ecx,0x16C
	mov dword ptr [esp+0xB6C],0
	call TSecType<unsigned long>::GetData
	push 1
	push 0
	push eax
	lea ecx,[esp+0x30]
	call CWorldMapDlg::CreateWorldMapDlg
	test eax,eax
	je Block21

 Block18:
	cmp dword ptr [esp+0xB44],0
	lea ecx,[esp+0x24]
	jne Block20

 Block19:
	call CWorldMapDlg::ClearQuestGuide
	lea ecx,[esp+0x24]
	call CWnd::Destroy
	mov ecx,edi
	call CWvsContext::ResetWorldMapQuestDemand
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 0x19EA
	push ecx
	jmp Block22

 Block20:
	call CDialog::DoModal
	jmp Block23

 Block21:
	mov ecx,edi
	call CWvsContext::ResetWorldMapQuestDemand
	push 0
	push 0
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x28],esp
	push 0x19EA
	push edx

 Block22:
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::Notice
	add esp,0x14

 Block23:
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0xB6C],0xFFFFFFFF
	call CWorldMapDlg::~CWorldMapDlg

 Block24:
	mov ecx,dword ptr [esp+0xB64]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xB5C
	ret 4
}
}
// CUserLocal::HandleUpKeyDown
_SUB_EXCEPTION_HANDLER(519E50)
__SUB_CLASS_THIS0(00519E50, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_519E50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x34
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x48]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	test ecx,ecx
	je Block3

 Block1:
	cmp dword ptr [ecx+0xC],0
	je Block3

 Block2:
	call CMacroSysMan::Stop

 Block3:
	lea ecx,[esi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block37

 Block4:
	mov ecx,esi
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block37

 Block5:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [eax+0x6B0]
	push ecx
	add eax,0x6A8
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block37

 Block6:
	mov ecx,esi
	call CUser::IsOnFoothold
	test eax,eax
	je Block37

 Block7:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	mov ebx,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	lea edi,[esi+4]
	lea eax,[esp+0x20]
	push eax
	mov ecx,edi
	call edx
	mov ebp,eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	push 0x14
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebp]
	push eax
	push ecx
	mov ecx,ebx
	call CPortalList::FindPortal
	mov ebx,eax
	xor ebp,ebp
	cmp ebx,ebp
	je Block23

 Block8:
	cmp dword ptr [ebx+0x1C],0x3B9AC9FF
	je Block18

 Block9:
	call get_field
	mov edi,eax
	lea ecx,[edi+0x16C]
	call TSecType<unsigned long>::GetData
	cmp eax,dword ptr [ebx+0x1C]
	jne Block13

 Block10:
	mov ecx,ebx
	call PORTAL::IsChangable
	test eax,eax
	jne Block13

 Block11:
	mov eax,dword ptr [ebx+0x20]
	mov ebx,dword ptr [ebx+4]
	push ebp
	push eax
	push ebx
	push ebp
	push ebp
	mov ecx,esi
	call CUserLocal::TryRegisterTeleport
	test eax,eax
	je Block37

 Block12:
	lea edx,[esp+0x14]
	push 0x1A5F
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x50],ebp
	jmp Block16

 Block13:
	mov eax,dword ptr [ebx+4]
	push ebp
	push ebp
	push ebp
	push eax
	push 0xFFFFFFFF
	mov ecx,edi
	call CField::SendTransferFieldRequest
	test eax,eax
	je Block37

 Block14:
	mov ecx,ebx
	call PORTAL::IsChangable
	test eax,eax
	jne Block37

 Block15:
	lea eax,[esp+0x14]
	push 0x1A5F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x50],1

 Block16:
	mov eax,dword ptr [eax]
	push 0x64
	push eax
	call play_game_sound
	mov eax,dword ptr [esp+0x1C]
	add esp,8
	mov dword ptr [esp+0x50],0xFFFFFFFF
	cmp eax,ebp
	je Block37

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x40
	ret

 Block18:
	mov eax,dword ptr [ebx+8]
	cmp eax,7
	je Block21

 Block19:
	cmp eax,8
	je Block21

 Block20:
	cmp eax,0xB
	jne Block23

 Block21:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebp
	push 0x1F4
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block37

 Block22:
	push 0x70
	lea ecx,[esp+0x3C]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0x50],2
	call get_field
	mov cl,byte ptr [eax+0x168]
	mov byte ptr [esp+0x14],cl
	mov edx,dword ptr [esp+0x14]
	push edx
	lea ecx,[esp+0x3C]
	call COutPacket::Encode1
	push ecx
	add ebx,4
	mov ecx,esp
	mov dword ptr [esp+0x18],esp
	push ebx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x3C]
	call COutPacket::EncodeStr
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,edi
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode2
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x20]
	push eax
	mov ecx,edi
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[esp+0x3C]
	call COutPacket::Encode2
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 1
	call CWvsContext::SetExclRequestSent
	lea ecx,[esp+0x3C]
	mov dword ptr [esp+0x50],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x40
	ret

 Block23:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebp
	push 0x1F4
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block37

 Block24:
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	mov ebx,dword ptr [TSingleton<COpenGatePool>::ms_pInstance]
	lea eax,[esp+0x20]
	push eax
	mov ecx,edi
	call edx
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x28]
	push ecx
	push edx
	push eax
	mov ecx,ebx
	call COpenGatePool::TryEnterOpenGate
	test eax,eax
	je Block34

 Block25:
	call get_update_time
	cmp dword ptr [esi+0x3B24],ebp
	jne Block37

 Block26:
	cmp dword ptr [esi+0x3B34],ebp
	je Block28

 Block27:
	mov ecx,dword ptr [esi+0x3B38]
	sub ecx,eax
	test ecx,ecx
	jg Block37

 Block28:
	mov ecx,dword ptr [esp+0x2C]
	mov edx,dword ptr [esp+0x28]
	mov dword ptr [esi+0x3B34],eax
	add eax,0x78
	push 0xC00614A4
	push ecx
	mov dword ptr [esi+0x3B38],eax
	mov dword ptr [esi+0x3B30],ecx
	add dword ptr [esi+0x3B30],0xFFFFFFF6
	mov eax,esp
	mov dword ptr [esi+0x3B24],1
	mov dword ptr [esi+0x3B28],ebp
	mov dword ptr [esi+0x3B2C],edx
	mov dword ptr [esp+0x20],esp
	mov dword ptr [eax],ebp
	push ebp
	push ebp
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x34],esp
	push edx
	mov ecx,esi
	mov dword ptr [esp+0x68],3
	call CUser::GetVecCtrl_0
	lea eax,[esp+0x28]
	push 0x8AC
	push eax
	mov byte ptr [esp+0x6C],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x64],5
	push ebp
	mov byte ptr [esp+0x68],6
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	call CAnimationDisplayer::Effect_General
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x50],0xFFFFFFFF
	cmp eax,ebp
	je Block30

 Block29:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block30:
	mov eax,dword ptr [esi+0x19E4]
	cmp eax,ebp
	je Block32

 Block31:
	lea ecx,[eax-0xC]
	jmp Block33

 Block32:
	xor ecx,ecx

 Block33:
	push 4
	call CVecCtrl::SetMovePathAttribute
	push 1
	push 1
	mov ecx,esi
	call CUser::SetSetItemBackground
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x40
	ret

 Block34:
	call get_field
	mov esi,eax
	cmp dword ptr [esi+0x18C],ebp
	je Block36

 Block35:
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x20]
	push eax
	mov ecx,edi
	call edx
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	mov ecx,esi
	call CField::TryEnterTownPortal
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x40
	ret

 Block36:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	mov esi,dword ptr [TSingleton<CTownPortalPool>::ms_pInstance]
	lea ecx,[esp+0x30]
	push ecx
	mov ecx,edi
	call edx
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	mov ecx,esi
	call CTownPortalPool::TryEnterTownPortal

 Block37:
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x40
	ret
}
}
// CUserLocal::OnIncComboResponse
__SUB_CLASS_THIS(0051A970, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov ecx,dword ptr [esp+8]
	call CInPacket::Decode4
	mov dword ptr [esi+0x4790],eax
	call get_update_time
	mov ecx,esi
	mov dword ptr [esi+0x4794],eax
	call CUserLocal::DrawCombo
	pop esi
	ret 4
}
}
// CUserLocal::OnRadioSchedule
_SUB_EXCEPTION_HANDLER(518120)
__SUB_CLASS_THIS(00518120, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_518120
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x1C]
	lea eax,[esp+0x1C]
	push eax
	mov ecx,esi
	call CInPacket::DecodeStr
	mov ecx,esi
	mov dword ptr [esp+0x14],0
	call CInPacket::Decode4
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	test ecx,ecx
	je Block3

 Block1:
	cmp dword ptr [ecx+8],0
	jne Block3

 Block2:
	push eax
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x10],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [TSingleton<CRadioManager>::ms_pInstance]
	call CRadioManager::Play

 Block3:
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret 4
}
}
// CUserLocal::OnFollowCharacterFailed
__SUB_CLASS_THIS(00510E80, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push ebx
	push esi
	push edi
	mov edi,dword ptr [esp+0x10]
	mov ebx,ecx
	mov ecx,edi
	call CInPacket::Decode4
	mov ecx,edi
	mov esi,eax
	call CInPacket::Decode4
	cmp esi,0xFFFFFFFE
	jne Block2

 Block1:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	pop edi
	pop esi
	mov dword ptr [eax+0x3D98],0
	pop ebx
	ret 4

 Block2:
	test esi,esi
	jl Block4

 Block3:
	push eax
	push esi
	mov ecx,ebx
	call CUserLocal::FollowCharacterFailedMsg

 Block4:
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CUserLocal::SetChatPassiveSkillDataInfo
_SUB_EXCEPTION_HANDLER(510ED0)
__SUB_CLASS_THIS0(00510ED0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_510ED0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebx,ebx
	cmp dword ptr [esi+0x4844],ebx
	je Block15

 Block1:
	push ebx
	push 8
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x14],ebx
	call ZXString<char>::GetBuffer
	mov ecx,dword ptr [_S_CLIENT]
	mov dword ptr [eax],ecx
	mov edx,dword ptr [_S_CLIENT+4]
	push 8
	lea ecx,[esp+0x10]
	mov dword ptr [eax+4],edx
	call ZXString<char>::ReleaseBuffer
	mov dword ptr [esp+0x20],ebx
	mov dword ptr [esp+0x10],ebx
	mov eax,dword ptr [esi+0x4844]
	mov ecx,dword ptr [eax+0x5C]
	push ecx
	mov edx,dword ptr [eax+0x58]
	push edx
	mov ecx,dword ptr [eax+0x54]
	mov edx,dword ptr [eax+0x50]
	push ecx
	mov ecx,dword ptr [eax+0x4C]
	push edx
	mov edx,dword ptr [eax+0x48]
	push ecx
	mov ecx,dword ptr [eax+0x44]
	push edx
	mov edx,dword ptr [eax+0x40]
	push ecx
	mov ecx,dword ptr [eax+0x3C]
	push edx
	mov edx,dword ptr [eax+0x38]
	push ecx
	mov ecx,dword ptr [eax+0x34]
	push edx
	mov edx,dword ptr [eax+0x30]
	push ecx
	mov ecx,dword ptr [eax+0x2C]
	push edx
	mov edx,dword ptr [eax+0x28]
	push ecx
	mov ecx,dword ptr [eax+0x24]
	push edx
	mov edx,dword ptr [eax+0x20]
	push ecx
	mov ecx,dword ptr [eax+0x1C]
	push edx
	mov edx,dword ptr [eax+0x18]
	push ecx
	mov ecx,dword ptr [eax+0x14]
	push edx
	mov edx,dword ptr [eax+0x10]
	push ecx
	mov ecx,dword ptr [eax+0xC]
	push edx
	mov edx,dword ptr [eax+8]
	push ecx
	mov ecx,dword ptr [eax+4]
	push edx
	mov edx,dword ptr [eax]
	push ecx
	push edx
	lea eax,[esp+0x70]
	push offset _S_MHPRDMMPRDCRDCRI
	push eax
	mov byte ptr [esp+0x88],1
	call ZXString<char>::Format
	mov eax,dword ptr [eax]
	add esp,0x68
	cmp eax,ebx
	je Block3

 Block2:
	mov ecx,dword ptr [eax-4]
	jmp Block4

 Block3:
	xor ecx,ecx

 Block4:
	push ecx
	push eax
	lea ecx,[esp+0x14]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x20],bl
	cmp eax,ebx
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	mov dword ptr [esp+0x10],ebx
	mov eax,dword ptr [esi+0x4844]
	mov ecx,dword ptr [eax+0x70]
	mov edx,dword ptr [eax+0x6C]
	push ecx
	mov ecx,dword ptr [eax+0x68]
	push edx
	mov edx,dword ptr [eax+0x64]
	mov eax,dword ptr [eax+0x60]
	push ecx
	push edx
	push eax
	lea ecx,[esp+0x24]
	push offset _S_IGNOREMOBDAMRDPS
	push ecx
	mov byte ptr [esp+0x3C],2
	call ZXString<char>::Format
	mov eax,dword ptr [eax]
	add esp,0x1C
	cmp eax,ebx
	je Block8

 Block7:
	mov ecx,dword ptr [eax-4]
	jmp Block9

 Block8:
	xor ecx,ecx

 Block9:
	push ecx
	push eax
	lea ecx,[esp+0x14]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x20],bl
	cmp eax,ebx
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	mov esi,dword ptr [esp+0xC]
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	je Block13

 Block12:
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x1C],esp
	push ebx
	push 0xFFFFFFFF
	push 0xC
	mov dword ptr [eax+4],ebx
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push esi
	call CUIStatusBar::ChatLogAdd

 Block13:
	mov dword ptr [esp+0x20],0xFFFFFFFF
	cmp esi,ebx
	je Block15

 Block14:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block15:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	pop ebx
	add esp,0x18
	ret
}
}
// CUserLocal::SetSecondaryStatChangedPoint
__SUB_CLASS_THIS(00504030, __thiscall, 41374,  CUserLocal, void, unsigned char) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x19E4]
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	lea ecx,[eax+0x244]
	jmp  CMovePath::SetStatChangedPoint

 Block2:
	xor eax,eax
	lea ecx,[eax+0x244]
	jmp  CMovePath::SetStatChangedPoint
}
}
// CUserLocal::SetPetsAngry
__SUB_CLASS_THIS0(005042A0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push esi
	push edi
	mov edi,ecx
	xor esi,esi
	jmp Block2

 Block2:
	mov eax,dword ptr [edi+0x2E44]
	mov ecx,dword ptr [eax+esi+4]
	test ecx,ecx
	je Block4

 Block3:
	call CPet::SetAngryAction
	add esi,8
	cmp esi,0x18
	jl Block2

 Block4:
	pop edi
	pop esi
	ret
}
}
// CUserLocal::OnMesoGive_Succeeded
_SUB_EXCEPTION_HANDLER(50F950)
__SUB_CLASS_THIS(0050F950, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50F950
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [esp+0x20]
	call CInPacket::Decode4
	mov esi,eax
	mov dword ptr [esp+0x20],0
	lea eax,[esp+8]
	push 0x32E
	push eax
	mov dword ptr [esp+0x20],0
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x28]
	push ecx
	mov byte ptr [esp+0x24],1
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x14]
	add esp,0xC
	mov byte ptr [esp+0x18],0
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	lea edx,[esp+0x34]
	mov dword ptr [esp+0x20],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	call CUtilDlg::Notice
	mov eax,dword ptr [esp+0x34]
	add esp,0x14
	mov dword ptr [esp+0x18],0xFFFFFFFF
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret 4
}
}
// CUserLocal::~CUserLocal
_SUB_EXCEPTION_HANDLER(506CE0)
__SUB_CLASS_THIS0(00506CE0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_506CE0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x18],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUserLocal::`vftable'{for `IGObj'}
	int 3// TODO: 	mov dword ptr [esi+4],offset CUserLocal::`vftable'{for `IVecCtrlOwner'}
	int 3// TODO: 	mov dword ptr [esi+8],offset CUserLocal::`vftable'{for `ZRefCounted'}
	int 3// TODO: 	mov dword ptr [esi+0x88],offset CUserLocal::`vftable'
	mov eax,dword ptr [esi+0x19E8]
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	push eax
	mov dword ptr [esp+0x48],0x19
	call CAnimationDisplayer::RemovePrepareAnimation
	mov eax,dword ptr [esi+0x46C0]
	xor ebp,ebp
	cmp eax,ebp
	je Block2

 Block1:
	push eax
	call stop_skill_sound
	add esp,4

 Block2:
	mov ecx,dword ptr [_D_G_GR]
	cmp ecx,ebp
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	lea edx,[esp+0x14]
	push edx
	call IWzGr2D::Getcenter
	mov edi,dword ptr [eax]
	mov byte ptr [esp+0x44],0x1A
	cmp edi,ebp
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	mov edx,dword ptr [_D_VTEMPTY]
	mov ecx,dword ptr [edi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [_D_VTEMPTY+4]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [_D_VTEMPTY+8]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [_D_VTEMPTY+12]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push edi
	call eax
	cmp eax,ebp
	jge Block8

 Block7:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push edi
	push eax
	call _com_issue_errorex

 Block8:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x44],0x19
	cmp eax,ebp
	je Block10

 Block9:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block10:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x2C]
	push eax
	call edi
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block12

 Block11:
	push eax
	call _com_issue_error

 Block12:
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0x48],0x1B
	call edi
	lea eax,[esp+0x1C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block14

 Block13:
	push eax
	call _com_issue_error

 Block14:
	mov ecx,dword ptr [_D_G_GR]
	mov bl,0x1C
	mov byte ptr [esp+0x44],bl
	cmp ecx,ebp
	jne Block16

 Block15:
	push 0x80004003
	call _com_issue_error

 Block16:
	lea edx,[esp+0x14]
	push edx
	call IWzGr2D::Getcenter
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x44],0x1D
	cmp ecx,ebp
	jne Block18

 Block17:
	push 0x80004003
	call _com_issue_error

 Block18:
	lea eax,[esp+0x2C]
	push eax
	lea edx,[esp+0x20]
	push edx
	push ebp
	push ebp
	call IWzVector2D::RelMove
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x44],bl
	cmp eax,ebp
	je Block20

 Block19:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block20:
	mov edi,dword ptr [ZImports::_VariantClear]
	mov ebx,8
	mov byte ptr [esp+0x44],0x1B
	cmp word ptr [esp+0x1C],bx
	jne Block23

 Block21:
	xor eax,eax
	mov word ptr [esp+0x1C],ax
	mov eax,dword ptr [esp+0x24]
	cmp eax,ebp
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea ecx,[esp+0x1C]
	push ecx
	call edi

 Block24:
	mov byte ptr [esp+0x44],0x19
	cmp word ptr [esp+0x2C],bx
	jne Block27

 Block25:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	cmp eax,ebp
	je Block28

 Block26:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block28

 Block27:
	lea eax,[esp+0x2C]
	push eax
	call edi

 Block28:
	lea ecx,[esi+0x4864]
	mov byte ptr [esp+0x44],0x18
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	mov eax,dword ptr [esi+0x4844]
	mov byte ptr [esp+0x44],0x17
	cmp eax,ebp
	je Block33

 Block29:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block32

 Block30:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block32

 Block31:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block32:
	mov dword ptr [esi+0x4844],0
	xor ebp,ebp

 Block33:
	lea ecx,[esi+0x47CC]
	mov byte ptr [esp+0x44],0x16
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	mov eax,dword ptr [esi+0x47C0]
	mov byte ptr [esp+0x44],0x15
	cmp eax,ebp
	je Block35

 Block34:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block35:
	mov eax,dword ptr [esi+0x47BC]
	mov byte ptr [esp+0x44],0x14
	cmp eax,ebp
	je Block37

 Block36:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block37:
	push offset _x_com_ptr<IWzGr2DLayer>::~_x_com_ptr<IWzGr2DLayer>
	push 5
	push 4
	lea eax,[esi+0x47A8]
	push eax
	mov byte ptr [esp+0x54],0x13
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0x47A4]
	mov byte ptr [esp+0x44],0x12
	cmp eax,ebp
	je Block39

 Block38:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block39:
	mov eax,dword ptr [esi+0x47A0]
	mov byte ptr [esp+0x44],0x11
	cmp eax,ebp
	je Block41

 Block40:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block41:
	mov eax,dword ptr [esi+0x479C]
	mov byte ptr [esp+0x44],0x10
	cmp eax,ebp
	je Block43

 Block42:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block43:
	lea ecx,[esi+0x477C]
	mov byte ptr [esp+0x44],0xF
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<CDualKeyChecker::KeyMsg>::`vftable'
	call ZList<CDualKeyChecker::KeyMsg>::RemoveAll
	lea edi,[esi+0x476C]
	mov byte ptr [esp+0x44],0xE
	cmp dword ptr [edi+4],ebp
	je Block45

 Block44:
	push ebp
	mov ecx,edi
	call ZRef<CTutor>::_ReleaseRaw
	mov dword ptr [edi+4],ebp

 Block45:
	lea ecx,[esi+0x4758]
	mov byte ptr [esp+0x44],0xD
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<ZRef<CItemInfo::ItemSkill>>::`vftable'
	call ZList<ZRef<CItemInfo::ItemSkill>>::RemoveAll
	lea ecx,[esi+0x4740]
	mov byte ptr [esp+0x44],0xC
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	lea ecx,[esi+0x4728]
	mov byte ptr [esp+0x44],0xB
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	lea ecx,[esi+0x4708]
	mov byte ptr [esp+0x44],0xA
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<CUserLocal::CBalloonMsg>::`vftable'
	call ZList<CUserLocal::CBalloonMsg>::RemoveAll
	lea ecx,[esi+0x46F4]
	mov byte ptr [esp+0x44],9
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<CUserLocal::CBalloonMsg>::`vftable'
	call ZList<CUserLocal::CBalloonMsg>::RemoveAll
	mov eax,dword ptr [esi+0x46F0]
	mov byte ptr [esp+0x44],bl
	cmp eax,ebp
	je Block47

 Block46:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block47:
	lea ecx,[esi+0x46C4]
	mov byte ptr [esp+0x44],7
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	mov eax,dword ptr [esi+0x4698]
	mov byte ptr [esp+0x44],6
	cmp eax,ebp
	je Block49

 Block48:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block49:
	lea ecx,[esi+0x4624]
	mov byte ptr [esp+0x44],5
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, CUIToolTip, long>::`vftable'
	call ZMap<long, CUIToolTip, long>::RemoveAll
	lea ecx,[esi+0x3BD8]
	mov byte ptr [esp+0x44],4
	call CUIToolTip::~CUIToolTip
	lea edi,[esi+0x3BC4]
	mov byte ptr [esp+0x44],3
	cmp dword ptr [edi+4],ebp
	je Block51

 Block50:
	push ebp
	mov ecx,edi
	call ZRef<CMob>::_ReleaseRaw
	mov dword ptr [edi+4],ebp

 Block51:
	mov eax,dword ptr [esi+0x3B7C]
	mov byte ptr [esp+0x44],2
	cmp eax,ebp
	je Block56

 Block52:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block55

 Block53:
	mov eax,dword ptr [esi+0x3B7C]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esi+0x3B7C]
	cmp ecx,ebp
	je Block55

 Block54:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block55:
	mov dword ptr [esi+0x3B7C],ebp

 Block56:
	lea ecx,[esi+0x3B44]
	mov byte ptr [esp+0x44],1
	call CUserLocal::RUSH::~RUSH
	mov ecx,esi
	mov dword ptr [TSingleton<CUserLocal>::ms_pInstance],ebp
	mov dword ptr [esp+0x44],0xFFFFFFFF
	call CUser::~CUser
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret
}
}
// CUserLocal::HandleLButtonDown
__SUB_CLASS_THIS0(00503D80, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,8
	push esi
	push 1
	lea eax,[esp+8]
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push eax
	call CWndMan::GetCursorPos
	mov ecx,dword ptr [esp+8]
	mov edx,dword ptr [esp+4]
	push ecx
	push edx
	lea ecx,[esi+0x14]
	call CChatBalloon::ADBoardMouseDown
	pop esi
	add esp,8
	ret
}
}
// CUserLocal::OnResignQuestReturn
__SUB_CLASS_THIS(00505720, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	push esi
	push edi
	call CInPacket::Decode2
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx esi,ax
	push 1
	push esi
	call CWvsContext::TryRegisterAutoStartQuest
	mov edi,dword ptr [TSingleton<CUIQuestAlarm>::ms_pInstance]
	push esi
	mov ecx,edi
	call CUIQuestAlarm::IsInQuestAlarmList
	test eax,eax
	je Block2

 Block1:
	push esi
	mov ecx,edi
	call CUIQuestAlarm::DeleteQuest

 Block2:
	pop edi
	pop esi
	ret 4
}
}
// CUserLocal::ValidateSkillBonus
_SUB_EXCEPTION_HANDLER(50C4D0)
__SUB_CLASS_THIS0(0050C4D0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50C4D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x7C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x90]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x40],ecx
	xor ebp,ebp
	mov dword ptr [esp+0x3C],ebp
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp ecx,ebp
	je Block2

 Block1:
	lea eax,[esp+0x60]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x5C]
	lea ebx,[ebp+1]
	jmp Block3

 Block2:
	xor esi,esi
	mov dword ptr [esp+0x5C],esi
	lea eax,[esp+0x58]
	lea ebx,[esi+2]

 Block3:
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x4C],eax
	cmp eax,ebp
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block5:
	mov dword ptr [esp+0x98],1
	test bl,2
	je Block10

 Block6:
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x3C],ebx
	cmp esi,ebp
	je Block10

 Block7:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block10

 Block8:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block10

 Block9:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block10:
	mov byte ptr [esp+0x98],2
	test bl,1
	je Block16

 Block11:
	mov esi,dword ptr [esp+0x64]
	cmp esi,ebp
	je Block16

 Block12:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block15

 Block13:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block15

 Block14:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block15:
	mov dword ptr [esp+0x64],ebp

 Block16:
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esi+0x2148]
	mov dword ptr [esp+0x2C],ecx
	push 0x64
	lea ecx,[esp+0x78]
	int 3// TODO: 	mov dword ptr [esp+0x78],offset ZMap<long, long, long>::`vftable'
	mov dword ptr [esp+0x7C],ebp
	mov dword ptr [esp+0x80],0x1F
	mov dword ptr [esp+0x84],ebp
	call ZMap<long, long, long>::_CalcAutoGrow
	mov byte ptr [esp+0x98],3
	cmp esi,ebp
	je Block18

 Block17:
	lea eax,[esi+0x3870]
	jmp Block19

 Block18:
	xor eax,eax

 Block19:
	lea edx,[eax+0xC]
	mov dword ptr [esp+0x28],eax
	mov dword ptr [esp+0x3C],1
	mov dword ptr [esp+0x24],edx
	jmp Block22

 Block21:
	mov eax,dword ptr [esp+0x28]

 Block22:
	cmp eax,ebp
	je Block67

 Block23:
	mov eax,dword ptr [esp+0x24]
	mov esi,dword ptr [eax]
	mov dword ptr [esp+0x5C],esi
	cmp esi,ebp
	je Block25

 Block24:
	lea ecx,[esi+4]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block25:
	mov byte ptr [esp+0x98],4
	cmp esi,ebp
	jne Block27

 Block26:
	mov byte ptr [esp+0x98],3
	jmp Block66

 Block27:
	mov dword ptr [esp+0x18],ebp
	mov dword ptr [esp+0x1C],ebp
	cmp dword ptr [esp+0x4C],ebp
	je Block45

 Block28:
	lea ebp,[esi+4]
	push ebp
	mov dword ptr [esp+0x70],esi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x78]
	mov ecx,esi
	mov byte ptr [esp+0x98],5
	call eax
	test eax,eax
	je Block42

 Block29:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block42

 Block30:
	mov ecx,dword ptr [eax+0x68]
	push ecx
	add eax,0x60
	push eax
	mov dword ptr [esp+0x20],0
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	mov eax,dword ptr [esi+0x115]
	sar edx,2
	mov edi,edx
	add esp,8
	shr edi,0x1F
	add edi,edx
	lea edx,[esp+0x18]
	push edx
	push edi
	push eax
	lea ecx,[esi+0x111]
	push ecx
	call _ZtlSecureFuseHelper<short>::call
	mov ebx,dword ptr [esp+0x50]
	movsx edx,ax
	add esp,8
	push edx
	mov ecx,ebx
	call CUserLocal::ApplyAllSkillLevelUP
	mov ecx,dword ptr [esi+0x11D]
	lea eax,[esp+0x18]
	push eax
	push edi
	push ecx
	lea edx,[esi+0x119]
	push edx
	call _ZtlSecureFuseHelper<short>::call
	cwde
	add esp,8
	push eax
	mov ecx,ebx
	call CUserLocal::ApplyAllSkillLevelUP
	mov edx,dword ptr [esi+0x125]
	lea ecx,[esp+0x18]
	push ecx
	push edi
	push edx
	lea eax,[esi+0x121]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	add esp,8
	push ecx
	mov ecx,ebx
	call CUserLocal::ApplyAllSkillLevelUP
	mov ebx,dword ptr [esp+0x18]
	test ebx,ebx
	je Block42

 Block31:
	mov edi,dword ptr [esp+0x4C]
	add edi,0x53D
	mov ecx,edi
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x38],eax
	test eax,eax
	je Block42

 Block32:
	mov edi,edi

 Block33:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x3C]
	push eax
	mov ecx,edi
	call ZMap<long, long, long>::GetNext
	mov ecx,dword ptr [eax]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [esp+0x34],ecx
	je Block41

 Block34:
	cmp eax,0x3E8
	je Block41

 Block35:
	cmp eax,0x7D0
	je Block41

 Block36:
	cmp eax,0x7D1
	je Block41

 Block37:
	cmp eax,0xBB8
	je Block41

 Block38:
	mov eax,dword ptr [esp+0x4C]
	lea edx,[esp+0x30]
	push edx
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push eax
	mov dword ptr [esp+0x3C],0
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	je Block41

 Block39:
	cmp dword ptr [esp+0x30],0
	je Block41

 Block40:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x38]
	push edx
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x1C]
	lea ecx,[esp+0x44]
	push ecx
	lea edx,[esp+0x38]
	add eax,ebx
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x4C],eax
	call ZMap<long, long, long>::Insert

 Block41:
	cmp dword ptr [esp+0x38],0
	jne Block33

 Block42:
	push ebp
	mov byte ptr [esp+0x9C],4
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block44

 Block43:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block44:
	mov dword ptr [esp+0x6C],0
	xor ebp,ebp

 Block45:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	mov ecx,edi
	test eax,eax
	je Block58

 Block46:
	call TSecType<long>::GetData
	mov ebp,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov edi,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x24]
	mov ecx,esi
	call edx
	push eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x28]
	mov ecx,esi
	call edx
	push eax
	push edi
	lea eax,[esp+0x5C]
	push eax
	mov ecx,ebp
	call CItemInfo::GetLevelAbilityInfo
	mov edi,dword ptr [esp+0x54]
	mov byte ptr [esp+0x98],6
	test edi,edi
	jne Block50

 Block47:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block49

 Block48:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block49:
	mov dword ptr [esp+0x5C],0
	xor ebp,ebp
	jmp Block66

 Block50:
	lea ecx,[edi+0x20]
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x34],eax
	test eax,eax
	je Block53

 Block51:
	lea esp,[esp]

 Block52:
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x38]
	push edx
	lea ecx,[edi+0x20]
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x3C]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x40],eax
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [esp+0x1C]
	add ecx,eax
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x3C]
	mov dword ptr [esp+0x48],ecx
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert
	cmp dword ptr [esp+0x34],0
	mov edi,dword ptr [esp+0x54]
	jne Block52

 Block53:
	mov byte ptr [esp+0x98],4
	test edi,edi
	je Block63

 Block54:
	add edi,0xFFFFFFF0
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block57

 Block55:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block57

 Block56:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block57:
	mov dword ptr [esp+0x54],0
	jmp Block63

 Block58:
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsEpicItem
	test eax,eax
	je Block63

 Block59:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebp
	jne Block61

 Block60:
	lea ecx,[esp+0x58]
	mov byte ptr [esp+0x98],3
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	jmp Block66

 Block61:
	lea edi,[eax+0x234]
	mov ecx,edi
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x34],eax
	cmp eax,ebp
	je Block63

 Block62:
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x38]
	push edx
	mov ecx,edi
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x3C]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x40],eax
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [esp+0x1C]
	add ecx,eax
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x3C]
	mov dword ptr [esp+0x48],ecx
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert
	cmp dword ptr [esp+0x34],ebp
	jne Block62

 Block63:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block65

 Block64:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block65:
	xor ebp,ebp
	mov dword ptr [esp+0x5C],ebp

 Block66:
	mov eax,dword ptr [esp+0x3C]
	add dword ptr [esp+0x24],8
	inc eax
	cmp eax,0x3C
	mov dword ptr [esp+0x3C],eax
	jl Block21

 Block67:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add ecx,0x9C
	lea edx,[esp+0x58]
	mov dword ptr [esp+0x44],ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edx
	mov dword ptr [esp+0x3C],ebp
	mov dword ptr [esp+0x38],ebp
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	add eax,0x521
	mov dword ptr [esp+0x3C],eax
	mov eax,dword ptr [esp+0x5C]
	cmp eax,ebp
	je Block72

 Block68:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block71

 Block69:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block71

 Block70:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block71:
	mov dword ptr [esp+0x5C],ebp

 Block72:
	mov ecx,dword ptr [esp+0x3C]
	call ZMap<long, EQUIPPED_SETITEM, long>::GetHeadPosition
	mov dword ptr [esp+0x24],eax
	cmp eax,ebp
	je Block91

 Block73:
	mov dword ptr [esp+0x20],ebp
	mov dword ptr [esp+0x70],ebp
	mov dword ptr [esp+0x68],ebp
	mov dword ptr [esp+0x6C],ebp
	lea eax,[esp+0x68]
	push eax
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,dword ptr [esp+0x44]
	mov byte ptr [esp+0xA0],8
	call ZMap<long, EQUIPPED_SETITEM, long>::GetNext
	mov ecx,dword ptr [esp+0x44]
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x6C]
	push eax
	call ZMap<long, ZRef<CItemInfo::SETITEMINFO>, long>::GetAt
	test eax,eax
	jne Block76

 Block74:
	lea ecx,[esp+0x70]
	mov byte ptr [esp+0x98],7
	call ZArray<long>::RemoveAll
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x98],3
	cmp eax,ebp
	je Block90

 Block75:
	lea esi,[eax-0x10]
	jmp Block86

 Block76:
	mov eax,dword ptr [esp+0x6C]
	cmp eax,ebp
	mov ebx,dword ptr [esp+0x20]
	jle Block84

 Block77:
	lea esi,[ebx+0xC]
	mov edi,eax

 Block78:
	cmp dword ptr [esi],ebp
	je Block83

 Block79:
	mov eax,dword ptr [esi]
	lea ecx,[eax+0x3C]
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x28],eax
	cmp eax,ebp
	je Block83

 Block80:
	jmp Block82

 Block82:
	mov eax,dword ptr [esi]
	lea ecx,[esp+0x38]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	lea ecx,[eax+0x3C]
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x34]
	push ecx
	lea edx,[esp+0x34]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x38],eax
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x38]
	mov ecx,dword ptr [esp+0x34]
	add ecx,eax
	lea edx,[esp+0x40]
	push edx
	lea eax,[esp+0x34]
	mov dword ptr [esp+0x44],ecx
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert
	cmp dword ptr [esp+0x28],ebp
	jne Block82

 Block83:
	add esi,8
	sub edi,1
	jne Block78

 Block84:
	lea ecx,[esp+0x70]
	mov byte ptr [esp+0x98],7
	call ZArray<long>::RemoveAll
	mov byte ptr [esp+0x98],3
	cmp ebx,ebp
	je Block90

 Block85:
	lea esi,[ebx-0x10]

 Block86:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block89

 Block87:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block89

 Block88:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block89:
	mov dword ptr [esp+0x20],ebp

 Block90:
	cmp dword ptr [esp+0x24],ebp
	jne Block73

 Block91:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp eax,ebp
	je Block93

 Block92:
	add eax,0x3C30
	mov dword ptr [esp+0x24],eax
	jmp Block94

 Block93:
	mov dword ptr [esp+0x24],ebp

 Block94:
	mov ecx,dword ptr [esp+0x24]
	xor ebx,ebx
	add ecx,4
	mov dword ptr [esp+0x28],ecx

 Block95:
	cmp dword ptr [esp+0x24],ebp
	je Block125

 Block96:
	mov edx,dword ptr [esp+0x28]
	mov esi,dword ptr [edx]
	mov dword ptr [esp+0x5C],esi
	cmp esi,ebp
	je Block98

 Block97:
	lea eax,[esi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block98:
	mov byte ptr [esp+0x98],9
	cmp esi,ebp
	jne Block100

 Block99:
	mov byte ptr [esp+0x98],3
	jmp Block124

 Block100:
	lea edi,[esi+0xC]
	mov ecx,edi
	mov dword ptr [esp+0x1C],ebp
	mov dword ptr [esp+0x18],ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	mov ecx,edi
	test eax,eax
	je Block113

 Block101:
	call TSecType<long>::GetData
	mov edx,dword ptr [esi]
	mov ebp,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov edi,eax
	mov eax,dword ptr [edx+0x24]
	mov ecx,esi
	call eax
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x28]
	mov ecx,esi
	call eax
	push eax
	push edi
	lea ecx,[esp+0x5C]
	push ecx
	mov ecx,ebp
	call CItemInfo::GetLevelAbilityInfo
	mov edi,dword ptr [esp+0x54]
	mov byte ptr [esp+0x98],0xA
	test edi,edi
	jne Block105

 Block102:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block104

 Block103:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block104:
	mov dword ptr [esp+0x5C],0
	xor ebp,ebp
	jmp Block124

 Block105:
	lea ecx,[edi+0x20]
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x38],eax
	test eax,eax
	je Block108

 Block106:
	lea esp,[esp]

 Block107:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x3C]
	push edx
	lea ecx,[edi+0x20]
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x40]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x44],eax
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x18]
	add ecx,eax
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x40]
	mov dword ptr [esp+0x48],ecx
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert
	cmp dword ptr [esp+0x38],0
	mov edi,dword ptr [esp+0x54]
	jne Block107

 Block108:
	mov byte ptr [esp+0x98],9
	test edi,edi
	je Block120

 Block109:
	add edi,0xFFFFFFF0
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block112

 Block110:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block112

 Block111:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block112:
	mov dword ptr [esp+0x54],0
	jmp Block120

 Block113:
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsEpicItem
	test eax,eax
	je Block120

 Block114:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebp
	jne Block117

 Block115:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block123

 Block116:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax
	jmp Block123

 Block117:
	lea edi,[eax+0x234]
	mov ecx,edi
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x38],eax
	cmp eax,ebp
	je Block120

 Block118:
	nop

 Block119:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x3C]
	push edx
	mov ecx,edi
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x40]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x44],eax
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x18]
	add ecx,eax
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x40]
	mov dword ptr [esp+0x48],ecx
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert
	cmp dword ptr [esp+0x38],ebp
	jne Block119

 Block120:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block122

 Block121:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block122:
	xor ebp,ebp

 Block123:
	mov dword ptr [esp+0x5C],ebp

 Block124:
	add dword ptr [esp+0x28],8
	inc ebx
	cmp ebx,4
	jl Block95

 Block125:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp eax,ebp
	je Block127

 Block126:
	add eax,0x3C50
	mov dword ptr [esp+0x28],eax
	jmp Block128

 Block127:
	mov dword ptr [esp+0x28],ebp

 Block128:
	mov ecx,dword ptr [esp+0x28]
	xor ebx,ebx
	add ecx,4
	mov dword ptr [esp+0x24],ecx

 Block129:
	cmp dword ptr [esp+0x28],ebp
	je Block159

 Block130:
	mov edx,dword ptr [esp+0x24]
	mov esi,dword ptr [edx]
	mov dword ptr [esp+0x5C],esi
	cmp esi,ebp
	je Block132

 Block131:
	lea eax,[esi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block132:
	mov byte ptr [esp+0x98],0xB
	cmp esi,ebp
	jne Block134

 Block133:
	mov byte ptr [esp+0x98],3
	jmp Block158

 Block134:
	lea edi,[esi+0xC]
	mov ecx,edi
	mov dword ptr [esp+0x1C],ebp
	mov dword ptr [esp+0x18],ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	mov ecx,edi
	test eax,eax
	je Block147

 Block135:
	call TSecType<long>::GetData
	mov edx,dword ptr [esi]
	mov ebp,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov edi,eax
	mov eax,dword ptr [edx+0x24]
	mov ecx,esi
	call eax
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x28]
	mov ecx,esi
	call eax
	push eax
	push edi
	lea ecx,[esp+0x5C]
	push ecx
	mov ecx,ebp
	call CItemInfo::GetLevelAbilityInfo
	mov edi,dword ptr [esp+0x54]
	mov byte ptr [esp+0x98],0xC
	test edi,edi
	jne Block139

 Block136:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block138

 Block137:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block138:
	mov dword ptr [esp+0x5C],0
	xor ebp,ebp
	jmp Block158

 Block139:
	lea ecx,[edi+0x20]
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x38],eax
	test eax,eax
	je Block142

 Block140:
	lea esp,[esp]

 Block141:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x3C]
	push edx
	lea ecx,[edi+0x20]
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x40]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x44],eax
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x18]
	add ecx,eax
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x40]
	mov dword ptr [esp+0x48],ecx
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert
	cmp dword ptr [esp+0x38],0
	mov edi,dword ptr [esp+0x54]
	jne Block141

 Block142:
	mov byte ptr [esp+0x98],0xB
	test edi,edi
	je Block154

 Block143:
	add edi,0xFFFFFFF0
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block146

 Block144:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block146

 Block145:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block146:
	mov dword ptr [esp+0x54],0
	jmp Block154

 Block147:
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsEpicItem
	test eax,eax
	je Block154

 Block148:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebp
	jne Block151

 Block149:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block157

 Block150:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax
	jmp Block157

 Block151:
	lea edi,[eax+0x234]
	mov ecx,edi
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x38],eax
	cmp eax,ebp
	je Block154

 Block152:
	nop

 Block153:
	lea ecx,[esp+0x1C]
	push ecx
	lea edx,[esp+0x3C]
	push edx
	mov ecx,edi
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x40]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x44],eax
	call ZMap<long, long, long>::GetAt
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x18]
	add ecx,eax
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x40]
	mov dword ptr [esp+0x48],ecx
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert
	cmp dword ptr [esp+0x38],ebp
	jne Block153

 Block154:
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0x9C],3
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block156

 Block155:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block156:
	xor ebp,ebp

 Block157:
	mov dword ptr [esp+0x5C],ebp

 Block158:
	add dword ptr [esp+0x24],8
	inc ebx
	cmp ebx,5
	jl Block129

 Block159:
	mov eax,dword ptr [esp+0x2C]
	mov ecx,dword ptr [eax+0x1348]
	lea edi,[eax+0x1340]
	push ecx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	mov ebx,dword ptr [esp+0x54]
	add esp,8
	test eax,eax
	jle Block174

 Block160:
	cmp ebx,ebp
	je Block176

 Block161:
	lea esi,[ebx+0x53D]
	mov ecx,esi
	mov dword ptr [esp+0x38],ebp
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x30],eax
	cmp eax,ebp
	je Block174

 Block162:
	jmp Block164

 Block164:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x34]
	push eax
	mov ecx,esi
	call ZMap<long, long, long>::GetNext
	mov ecx,dword ptr [eax]
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [esp+0x34],ecx
	je Block173

 Block165:
	cmp eax,0x3E8
	je Block173

 Block166:
	cmp eax,0x7D0
	je Block173

 Block167:
	cmp eax,0x7D1
	je Block173

 Block168:
	cmp eax,0xBB8
	je Block173

 Block169:
	cmp ecx,0x127A83
	je Block173

 Block170:
	lea edx,[esp+0x3C]
	push edx
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebx
	mov dword ptr [esp+0x48],ebp
	call CSkillInfo::GetSkillLevel_0
	cmp eax,ebp
	je Block173

 Block171:
	cmp dword ptr [esp+0x3C],ebp
	je Block173

 Block172:
	lea eax,[esp+0x38]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::GetAt
	mov edx,dword ptr [esp+0x2C]
	mov eax,dword ptr [edx+0x1348]
	push eax
	push edi
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esp+0x40]
	add eax,ecx
	add esp,8
	lea edx,[esp+0x44]
	mov dword ptr [esp+0x44],eax
	push edx
	lea eax,[esp+0x38]
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, long, long>::Insert

 Block173:
	cmp dword ptr [esp+0x30],ebp
	jne Block164

 Block174:
	cmp ebx,ebp
	je Block176

 Block175:
	mov ecx,dword ptr [esp+0x2C]
	mov edx,dword ptr [ecx+0x1348]
	push edx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	mov dword ptr [ebx+0x539],eax
	add esp,8
	lea eax,[esp+0x74]
	push eax
	lea ecx,[ebx+0x555]
	call ZMap<long, long, long>::operator=

 Block176:
	lea ecx,[esp+0x74]
	mov byte ptr [esp+0x98],2
	int 3// TODO: 	mov dword ptr [esp+0x74],offset ZMap<long, long, long>::`vftable'
	call ZMap<long, long, long>::RemoveAll
	mov dword ptr [esp+0x98],0xFFFFFFFF
	cmp ebx,ebp
	je Block180

 Block177:
	lea esi,[ebx-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block180

 Block178:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block180

 Block179:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block180:
	mov ecx,dword ptr [esp+0x90]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::IsKindOf
__SUB_CLASS_THIS(00507240, __thiscall, 41475,  CUserLocal, int32_t, const CRTTI*) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	mov eax,offset CUserLocal::ms_RTTI_CUserLocal
	lea esp,[esp]

 Block1:
	cmp eax,ecx
	je Block4

 Block2:
	mov eax,dword ptr [eax]
	test eax,eax
	jne Block1

 Block3:
	ret 4

 Block4:
	mov eax,1
	ret 4
}
}
// CUserLocal::FindParty
__SUB_CLASS_THIS(0053A620, __thiscall, 41438,  CUserLocal, unsigned long, const SKILLENTRY*, long, long*) {
__asm {

 Block0:
	sub esp,0x28
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push ebp
	xor ebp,ebp
	mov dword ptr [esp+4],ebp
	mov dword ptr [esp+8],eax
	cmp dword ptr [eax+0x3604],ebp
	je Block16

 Block1:
	mov eax,dword ptr [ecx+4]
	mov edx,dword ptr [eax+0x10]
	push ebx
	mov ebx,dword ptr [ecx+0x640]
	push esi
	lea esi,[ecx+4]
	push edi
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,esi
	call edx
	mov edi,dword ptr [eax+4]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,esi
	call edx
	mov esi,dword ptr [eax]
	mov eax,dword ptr [esp+0x40]
	mov ecx,dword ptr [esp+0x3C]
	push eax
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[esp+0x2C]
	push ecx
	call SECRECT::ToRect
	add esp,8
	test bl,1
	jne Block3

 Block2:
	mov edx,dword ptr [eax+8]
	mov ecx,dword ptr [eax]
	neg edx
	neg ecx
	mov dword ptr [eax],edx
	mov dword ptr [eax+8],ecx

 Block3:
	push edi
	push esi
	push eax
	call OffsetRect
	mov ebx,dword ptr [esp+0x14]
	add ebx,0x3608
	mov dword ptr [esp+0x40],6
	lea esp,[esp]

 Block4:
	mov eax,dword ptr [ebx]
	add ebp,ebp
	test eax,eax
	je Block14

 Block5:
	mov ecx,dword ptr [esp+0x14]
	mov edi,dword ptr [esp+0x3C]
	cmp eax,dword ptr [ecx+0x20B4]
	jne Block7

 Block6:
	cmp dword ptr [edi],0x236A6E
	jne Block13

 Block7:
	mov ecx,dword ptr [TSingleton<CUserPool>::ms_pInstance]
	push eax
	call CUserPool::GetRemoteUser
	mov esi,eax
	test esi,esi
	je Block14

 Block8:
	mov edx,dword ptr [esi+0x640]
	and edx,0xFFFFFFFE
	cmp edx,0x12
	jne Block10

 Block9:
	cmp dword ptr [edi],0x236A6E
	jne Block14

 Block10:
	mov eax,dword ptr [esi+4]
	mov eax,dword ptr [eax+0x10]
	lea ecx,[esi+4]
	lea edx,[esp+0x20]
	push edx
	call eax
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	lea eax,[esp+0x30]
	push eax
	call PtInRect
	test eax,eax
	je Block14

 Block11:
	cmp dword ptr [edi],0x236A6E
	jne Block13

 Block12:
	mov ecx,dword ptr [esi+0x640]
	and ecx,0xFFFFFFFE
	cmp ecx,0x12
	jne Block14

 Block13:
	or ebp,1
	inc dword ptr [esp+0x10]

 Block14:
	add ebx,4
	sub dword ptr [esp+0x40],1
	jne Block4

 Block15:
	mov ecx,dword ptr [esp+0x10]
	pop edi
	pop esi
	pop ebx
	jmp Block17

 Block16:
	mov ebp,0x80
	lea ecx,[ebp-0x7F]

 Block17:
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block19

 Block18:
	mov dword ptr [eax],ecx

 Block19:
	mov eax,ebp
	pop ebp
	add esp,0x28
	ret 0xC
}
}
// CUserLocal::ShowCounterDamage
__SUB_CLASS_THIS(005D3870, __thiscall, 41335,  CUserLocal, void, long) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	lea edx,[esi+0x3B98]
	mov ecx,1
	call _ZtlSecureTearHelper<int>::call
	mov ecx,dword ptr [esp+0xC]
	lea edi,[esi+0x463C]
	mov edx,edi
	mov dword ptr [esi+0x3BA0],eax
	call _ZtlSecureTearHelper<long>::call
	mov dword ptr [esi+0x4644],eax
	call timeGetTime
	lea edx,[esi+0x4648]
	mov ecx,eax
	call _ZtlSecureTearHelper<long>::call
	mov dword ptr [esi+0x4650],eax
	mov eax,dword ptr [esi+0x4644]
	push eax
	push edi
	mov dword ptr [esi+0x465C],0
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	lea ecx,[esi+0x88]
	call CAvatar::SetChairHeight
	pop edi
	pop esi
	ret 4
}
}
// CUserLocal::TryDoingMine
__SUB_CLASS_THIS0(00507D70, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0xC
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	call edx
	mov ecx,dword ptr [eax+0x1098]
	push ecx
	add eax,0x1090
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block4

 Block1:
	mov ecx,dword ptr [esi+0x5F8]
	mov eax,offset _D_RIDING_WILDHUNTE__42+4

 Block2:
	cmp dword ptr [eax],ecx
	je Block5

 Block3:
	add eax,4
	cmp eax,offset _D_DB_DATE_19000101__44
	jl Block2

 Block4:
	mov dword ptr [esi+0x4800],0
	pop esi
	add esp,0xC
	ret

 Block5:
	mov eax,dword ptr [_D_G_PSTAGE+4]
	test eax,eax
	je Block4

 Block6:
	mov edx,dword ptr [eax+4]
	lea ecx,[eax+4]
	mov eax,dword ptr [edx+0x48]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block4

 Block7:
	call get_field
	cmp dword ptr [eax+0x18C],0
	jne Block4

 Block8:
	mov eax,dword ptr [esi+0x19E4]
	push ebx
	push edi
	test eax,eax
	je Block10

 Block9:
	lea ebx,[eax-0xC]
	jmp Block11

 Block10:
	xor ebx,ebx

 Block11:
	lea ecx,[esp+0x10]
	push ecx
	lea edx,[esp+0x10]
	push edx
	mov ecx,ebx
	call CVecCtrl::GetInput
	mov eax,dword ptr [esp+0xC]
	test eax,eax
	jle Block13

 Block12:
	mov edi,1
	jmp Block14

 Block13:
	xor ecx,ecx
	test eax,eax
	setge cl
	dec ecx
	mov edi,ecx

 Block14:
	mov ecx,ebx
	call CVecCtrl::IsStopped
	test eax,eax
	je Block16

 Block15:
	xor edi,edi

 Block16:
	cmp dword ptr [esi+0x4800],0
	jne Block19

 Block17:
	test edi,edi
	je Block19

 Block18:
	call get_update_time
	sub eax,0x3E8
	mov dword ptr [esi+0x47FC],eax
	mov dword ptr [esi+0x4800],edi

 Block19:
	cmp edi,dword ptr [esi+0x4800]
	je Block21

 Block20:
	call get_update_time
	mov dword ptr [esi+0x47FC],eax
	mov dword ptr [esi+0x4800],edi

 Block21:
	cmp dword ptr [esi+0x4800],0
	je Block26

 Block22:
	call get_update_time
	sub eax,dword ptr [esi+0x47FC]
	mov dword ptr [esp+0x10],eax
	fild dword ptr [esp+0x10]
	test eax,eax
	jge Block24

 Block23:
	fadd qword ptr [__real_41f0000000000000]

 Block24:
	fcomp qword ptr [__real_4097700000000000]
	fnstsw ax
	test ah,1
	jne Block26

 Block25:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x10]
	push edx
	mov dword ptr [esp+0x10],0
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [eax+4]
	lea ecx,[esp+0x10]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea eax,[esp+0xC]
	push eax
	push 0x1F914D0
	push edi
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [esp+0xC]
	push eax
	push ecx
	mov ecx,esi
	call CUserLocal::DoActiveSkill_Summon
	call get_update_time
	mov dword ptr [esi+0x47FC],eax

 Block26:
	pop edi
	pop ebx
	pop esi
	add esp,0xC
	ret
}
}
// CUserLocal::ShowAutoStartQuestList
_SUB_EXCEPTION_HANDLER(50FEF0)
__SUB_CLASS_THIS0(0050FEF0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50FEF0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	xor ebp,ebp
	test byte ptr [_D__S7],1
	jne Block2

 Block1:
	or dword ptr [_D__S7],1
	push 0x897B67
	mov dword ptr [esp+0x40],ebp
	call CNpcTemplate::GetNpcTemplate
	add esp,4
	mov dword ptr [_D_S_PTEMPLATE],eax
	mov dword ptr [esp+0x3C],0xFFFFFFFF

 Block2:
	lea eax,[esp+0x10]
	push 0x1073
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x3C],1
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x20],ebp
	mov dword ptr [esp+0x1C],ebp
	mov dword ptr [esp+0x18],ebp
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [esi+0x4068]
	add esi,0x4060
	mov byte ptr [esp+0x3C],5
	cmp eax,ebp
	je Block12

 Block3:
	lea ecx,[esp+0x24]
	push 0x19BF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x3C],6
	cmp eax,ebp
	je Block5

 Block4:
	mov ecx,dword ptr [eax-4]
	jmp Block6

 Block5:
	xor ecx,ecx

 Block6:
	push ecx
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x3C],5
	cmp eax,ebp
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov esi,dword ptr [esi+0xC]
	mov dword ptr [esp+0x24],esi
	cmp esi,ebp
	je Block11

 Block9:
	lea ebx,[ebx]

 Block10:
	lea edx,[esp+0x24]
	push edx
	call ZList<unsigned short>::GetNext
	movzx esi,word ptr [eax]
	add esp,4
	push 0xFFFFFFFF
	lea ecx,[esp+0x1C]
	call ZArray<unsigned short>::InsertBefore
	mov word ptr [eax],si
	cmp dword ptr [esp+0x24],ebp
	jne Block10

 Block11:
	push 2
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x20]
	push edx
	call AddQuestList
	add esp,0x10

 Block12:
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add edi,0x3FF8
	cmp dword ptr [edi+0xC],ebp
	je Block22

 Block13:
	lea eax,[esp+0x24]
	push 0x19BD
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x3C],7
	cmp eax,ebp
	je Block15

 Block14:
	mov ecx,dword ptr [eax-4]
	jmp Block16

 Block15:
	xor ecx,ecx

 Block16:
	push ecx
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x3C],5
	cmp eax,ebp
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov ecx,edi
	call ZMap<unsigned short, int, unsigned short>::GetHeadPosition
	mov dword ptr [esp+0x24],eax
	cmp eax,ebp
	je Block21

 Block19:
	lea ecx,[ecx]

 Block20:
	push ebp
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,edi
	call ZMap<unsigned short, int, unsigned short>::GetNext
	movzx esi,word ptr [eax]
	push 0xFFFFFFFF
	lea ecx,[esp+0x24]
	call ZArray<unsigned short>::InsertBefore
	mov word ptr [eax],si
	cmp dword ptr [esp+0x24],ebp
	jne Block20

 Block21:
	push ebp
	lea edx,[esp+0x24]
	push edx
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x20]
	push ecx
	call AddQuestList
	add esp,0x10

 Block22:
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add edi,0x4028
	cmp dword ptr [edi+0xC],ebp
	je Block32

 Block23:
	lea edx,[esp+0x24]
	push 0x19BE
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x3C],8
	cmp eax,ebp
	je Block25

 Block24:
	mov ecx,dword ptr [eax-4]
	jmp Block26

 Block25:
	xor ecx,ecx

 Block26:
	push ecx
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x3C],5
	cmp eax,ebp
	je Block28

 Block27:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block28:
	mov ecx,edi
	call ZMap<unsigned short, int, unsigned short>::GetHeadPosition
	mov dword ptr [esp+0x24],eax
	cmp eax,ebp
	je Block31

 Block29:
	lea esp,[esp]

 Block30:
	push ebp
	lea eax,[esp+0x28]
	push eax
	mov ecx,edi
	call ZMap<unsigned short, int, unsigned short>::GetNext
	movzx esi,word ptr [eax]
	push 0xFFFFFFFF
	lea ecx,[esp+0x20]
	call ZArray<unsigned short>::InsertBefore
	mov word ptr [eax],si
	cmp dword ptr [esp+0x24],ebp
	jne Block30

 Block31:
	push 1
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0x18]
	push edx
	lea eax,[esp+0x20]
	push eax
	call AddQuestList
	add esp,0x10

 Block32:
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	mov dword ptr [esp+0x24],ecx
	push 0xC50
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x28],eax
	mov byte ptr [esp+0x3C],9
	cmp eax,ebp
	je Block41

 Block33:
	mov ecx,eax
	call CUtilDlgEx::_ctor_default
	cmp eax,ebp
	je Block41

 Block34:
	add eax,8
	cmp eax,ebp
	je Block41

 Block35:
	lea esi,[eax-8]
	mov dword ptr [esp+0x30],esi
	cmp esi,ebp
	je Block37

 Block36:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block37:
	push ebp
	push ebp
	push ecx
	mov ecx,esp
	lea eax,[esp+0x1C]
	mov dword ptr [esp+0x34],esp
	push eax
	mov byte ptr [esp+0x4C],0xA
	mov dword ptr [ecx],ebp
	call ZXString<char>::op_assign
	push 0x897B67
	push 4
	mov ecx,esi
	call CUtilDlgEx::SetUtilDlgEx_1
	mov ecx,esi
	call CUtilDlgEx::CreateUtilDlgEx
	mov ecx,esi
	call CDialog::DoModal
	cmp eax,1
	je Block42

 Block38:
	cmp eax,0x2001
	je Block42

 Block39:
	mov byte ptr [esp+0x3C],5
	cmp esi,ebp
	je Block47

 Block40:
	jmp Block46

 Block41:
	xor esi,esi
	mov dword ptr [esp+0x30],esi
	jmp Block37

 Block42:
	mov eax,dword ptr [esp+0x14]
	mov esi,dword ptr [esi+0x110]
	cmp eax,ebp
	je Block45

 Block43:
	cmp esi,dword ptr [eax-4]
	jae Block45

 Block44:
	movzx esi,word ptr [eax+esi*2]
	mov ecx,dword ptr [esp+0x24]
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 1
	push esi
	call CQuestMan::GetStartDemand
	mov ecx,dword ptr [eax+0x18]
	push ecx
	push esi
	mov ecx,edi
	call CWvsContext::StartQuest
	push esi
	mov ecx,edi
	call CWvsContext::TryRegisterAutoCompletionAlertQuest
	mov ecx,edi
	call CWvsContext::UpdateAutoQuestAlertIcon

 Block45:
	mov byte ptr [esp+0x3C],5

 Block46:
	push ebp
	lea ecx,[esp+0x30]
	call ZRef<CUtilDlgEx>::_ReleaseRaw

 Block47:
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x3C],4
	call ZArray<unsigned short>::RemoveAll
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x3C],3
	call ZArray<unsigned short>::RemoveAll
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x3C],2
	call ZArray<unsigned short>::RemoveAll
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0x3C],1
	call ZArray<unsigned short>::RemoveAll
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	cmp eax,ebp
	je Block49

 Block48:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block49:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x30
	ret
}
}
// CUserLocal::ValidateItemSkill
_SUB_EXCEPTION_HANDLER(51B540)
__SUB_CLASS_THIS0(0051B540, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFF8
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_51B540
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x34
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x48]
	mov dword ptr fs:[0],eax
	lea ebp,[ecx+0x4758]
	mov ecx,ebp
	mov dword ptr [esp+0x18],ebp
	call ZList<ZRef<CItemInfo::ItemSkill>>::RemoveAll
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	test eax,eax
	je Block2

 Block1:
	lea edi,[eax+0x3870]
	jmp Block3

 Block2:
	xor edi,edi

 Block3:
	lea eax,[edi+0xC]
	mov dword ptr [esp+0x20],edi
	mov ebx,1
	mov dword ptr [esp+0x1C],eax

 Block4:
	test edi,edi
	je Block26

 Block5:
	mov ecx,dword ptr [esp+0x1C]
	mov esi,dword ptr [ecx]
	mov dword ptr [esp+0x34],esi
	test esi,esi
	je Block7

 Block6:
	lea edx,[esi+4]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block7:
	mov dword ptr [esp+0x50],0
	test esi,esi
	jne Block9

 Block8:
	mov dword ptr [esp+0x50],0xFFFFFFFF
	jmp Block25

 Block9:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	mov ecx,edi
	test eax,eax
	je Block18

 Block10:
	call TSecType<long>::GetData
	mov ebp,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov edi,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x24]
	mov ecx,esi
	call edx
	push eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x28]
	mov ecx,esi
	call edx
	push eax
	push edi
	lea eax,[esp+0x34]
	push eax
	mov ecx,ebp
	call CItemInfo::GetLevelAbilityInfo
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x50],1
	test eax,eax
	je Block13

 Block11:
	cmp dword ptr [eax+0x14],0
	je Block13

 Block12:
	mov ecx,dword ptr [esp+0x18]
	add eax,0xC
	push eax
	call ZList<ZRef<CItemInfo::ItemSkill>>::AddTail_List
	mov eax,dword ptr [esp+0x2C]

 Block13:
	mov byte ptr [esp+0x50],0
	test eax,eax
	je Block22

 Block14:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block17

 Block15:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block17

 Block16:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block17:
	mov dword ptr [esp+0x2C],0
	jmp Block22

 Block18:
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsEpicItem
	test eax,eax
	je Block22

 Block19:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block22

 Block20:
	cmp dword ptr [eax+0x228],0
	je Block22

 Block21:
	add eax,0x220
	push eax
	mov ecx,ebp
	call ZList<ZRef<CItemInfo::ItemSkill>>::AddTail_List

 Block22:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x54],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block24

 Block23:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block24:
	mov ebp,dword ptr [esp+0x18]
	mov edi,dword ptr [esp+0x20]
	mov dword ptr [esp+0x34],0

 Block25:
	add dword ptr [esp+0x1C],8
	inc ebx
	cmp ebx,0x3C
	jl Block4

 Block26:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add ecx,0x9C
	lea edx,[esp+0x30]
	mov dword ptr [esp+0x24],ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edx
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	lea ebx,[eax+0x521]
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0x1C],ebx
	test eax,eax
	je Block31

 Block27:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block30

 Block28:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block30

 Block29:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block30:
	mov dword ptr [esp+0x34],0

 Block31:
	mov ecx,ebx
	call ZMap<long, EQUIPPED_SETITEM, long>::GetHeadPosition
	mov dword ptr [esp+0x20],eax
	test eax,eax
	je Block49

 Block32:
	xor esi,esi
	mov dword ptr [esp+0x2C],esi
	mov dword ptr [esp+0x50],2
	mov dword ptr [esp+0x40],esi
	mov dword ptr [esp+0x38],esi
	mov dword ptr [esp+0x3C],esi
	lea eax,[esp+0x38]
	push eax
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,ebx
	mov byte ptr [esp+0x58],3
	call ZMap<long, EQUIPPED_SETITEM, long>::GetNext
	mov ecx,dword ptr [esp+0x24]
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x3C]
	push eax
	call ZMap<long, ZRef<CItemInfo::SETITEMINFO>, long>::GetAt
	test eax,eax
	jne Block35

 Block33:
	lea ecx,[esp+0x40]
	mov byte ptr [esp+0x50],2
	call ZArray<long>::RemoveAll
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x50],0xFFFFFFFF
	cmp eax,esi
	je Block48

 Block34:
	lea esi,[eax-0x10]
	jmp Block44

 Block35:
	mov eax,dword ptr [esp+0x3C]
	mov ebp,dword ptr [esp+0x2C]
	test eax,eax
	jle Block42

 Block36:
	mov ebx,dword ptr [esp+0x18]
	lea esi,[ebp+0xC]
	mov edi,eax

 Block37:
	cmp dword ptr [esi],0
	je Block40

 Block38:
	mov eax,dword ptr [esi]
	cmp dword ptr [eax+0x30],0
	je Block40

 Block39:
	add eax,0x28
	push eax
	mov ecx,ebx
	call ZList<ZRef<CItemInfo::ItemSkill>>::AddTail_List

 Block40:
	add esi,8
	sub edi,1
	jne Block37

 Block41:
	mov ebx,dword ptr [esp+0x1C]

 Block42:
	lea ecx,[esp+0x40]
	mov byte ptr [esp+0x50],2
	call ZArray<long>::RemoveAll
	mov dword ptr [esp+0x50],0xFFFFFFFF
	test ebp,ebp
	je Block48

 Block43:
	lea esi,[ebp-0x10]

 Block44:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block47

 Block45:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block47

 Block46:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block47:
	mov dword ptr [esp+0x2C],0

 Block48:
	cmp dword ptr [esp+0x20],0
	jne Block32

 Block49:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	xor ebp,ebp
	cmp eax,ebp
	je Block51

 Block50:
	lea edi,[eax+0x3C30]
	jmp Block52

 Block51:
	xor edi,edi

 Block52:
	mov ebx,dword ptr [ZImports::_InterlockedIncrement]
	lea ecx,[edi+4]
	mov dword ptr [esp+0x20],edi
	mov dword ptr [esp+0x24],ebp
	mov dword ptr [esp+0x1C],ecx

 Block53:
	cmp edi,ebp
	je Block75

 Block54:
	mov edx,dword ptr [esp+0x1C]
	mov esi,dword ptr [edx]
	mov dword ptr [esp+0x34],esi
	cmp esi,ebp
	je Block56

 Block55:
	lea eax,[esi+4]
	push eax
	call ebx

 Block56:
	mov dword ptr [esp+0x50],4
	cmp esi,ebp
	jne Block58

 Block57:
	mov dword ptr [esp+0x50],0xFFFFFFFF
	jmp Block74

 Block58:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	mov ecx,edi
	test eax,eax
	je Block67

 Block59:
	call TSecType<long>::GetData
	mov edx,dword ptr [esi]
	mov ebp,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov edi,eax
	mov eax,dword ptr [edx+0x24]
	mov ecx,esi
	call eax
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x28]
	mov ecx,esi
	call eax
	push eax
	push edi
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,ebp
	call CItemInfo::GetLevelAbilityInfo
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x50],5
	test eax,eax
	je Block62

 Block60:
	cmp dword ptr [eax+0x14],0
	je Block62

 Block61:
	mov ecx,dword ptr [esp+0x18]
	add eax,0xC
	push eax
	call ZList<ZRef<CItemInfo::ItemSkill>>::AddTail_List
	mov eax,dword ptr [esp+0x2C]

 Block62:
	mov byte ptr [esp+0x50],4
	test eax,eax
	je Block71

 Block63:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block66

 Block64:
	push ebp
	call ebx
	test edi,edi
	je Block66

 Block65:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block66:
	mov dword ptr [esp+0x2C],0
	jmp Block71

 Block67:
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsEpicItem
	test eax,eax
	je Block71

 Block68:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,ebp
	je Block71

 Block69:
	cmp dword ptr [eax+0x228],ebp
	je Block71

 Block70:
	mov ecx,dword ptr [esp+0x18]
	add eax,0x220
	push eax
	call ZList<ZRef<CItemInfo::ItemSkill>>::AddTail_List

 Block71:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x54],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block73

 Block72:
	push edi
	call ebx
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block73:
	mov edi,dword ptr [esp+0x20]
	xor ebp,ebp
	mov dword ptr [esp+0x34],ebp

 Block74:
	mov eax,dword ptr [esp+0x24]
	add dword ptr [esp+0x1C],8
	inc eax
	cmp eax,4
	mov dword ptr [esp+0x24],eax
	jl Block53

 Block75:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp eax,ebp
	je Block77

 Block76:
	add eax,0x3C50
	mov dword ptr [esp+0x1C],eax
	jmp Block78

 Block77:
	mov dword ptr [esp+0x1C],ebp

 Block78:
	mov ecx,dword ptr [esp+0x1C]
	xor ebx,ebx
	add ecx,4
	mov dword ptr [esp+0x20],ecx

 Block79:
	cmp dword ptr [esp+0x1C],0
	je Block101

 Block80:
	mov edx,dword ptr [esp+0x20]
	mov esi,dword ptr [edx]
	mov dword ptr [esp+0x34],esi
	test esi,esi
	je Block82

 Block81:
	lea eax,[esi+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block82:
	mov dword ptr [esp+0x50],6
	test esi,esi
	jne Block84

 Block83:
	mov dword ptr [esp+0x50],0xFFFFFFFF
	jmp Block100

 Block84:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	mov ecx,edi
	test eax,eax
	je Block93

 Block85:
	call TSecType<long>::GetData
	mov edx,dword ptr [esi]
	mov ebp,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov edi,eax
	mov eax,dword ptr [edx+0x24]
	mov ecx,esi
	call eax
	mov edx,dword ptr [esi]
	push eax
	mov eax,dword ptr [edx+0x28]
	mov ecx,esi
	call eax
	push eax
	push edi
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,ebp
	call CItemInfo::GetLevelAbilityInfo
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x50],7
	test eax,eax
	je Block88

 Block86:
	cmp dword ptr [eax+0x14],0
	je Block88

 Block87:
	mov ecx,dword ptr [esp+0x18]
	add eax,0xC
	push eax
	call ZList<ZRef<CItemInfo::ItemSkill>>::AddTail_List
	mov eax,dword ptr [esp+0x2C]

 Block88:
	mov byte ptr [esp+0x50],6
	test eax,eax
	je Block97

 Block89:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block92

 Block90:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block92

 Block91:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block92:
	mov dword ptr [esp+0x2C],0
	jmp Block97

 Block93:
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsEpicItem
	test eax,eax
	je Block97

 Block94:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block97

 Block95:
	cmp dword ptr [eax+0x228],0
	je Block97

 Block96:
	mov ecx,dword ptr [esp+0x18]
	add eax,0x220
	push eax
	call ZList<ZRef<CItemInfo::ItemSkill>>::AddTail_List

 Block97:
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x54],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block99

 Block98:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block99:
	mov dword ptr [esp+0x34],0

 Block100:
	add dword ptr [esp+0x20],8
	inc ebx
	cmp ebx,5
	jl Block79

 Block101:
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::PetInterActWithItem
__SUB_CLASS_THIS(00503DF0, __thiscall, 41363,  CUserLocal, long, long) {
__asm {

 Block0:
	push ecx
	push ebp
	mov ebp,dword ptr [esp+0xC]
	mov dword ptr [esp+4],ecx
	cmp dword ptr [ecx+0x3AC0],ebp
	je Block17

 Block1:
	mov eax,dword ptr [ecx+0x2E44]
	mov dword ptr [ecx+0x3AC0],ebp
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0xC],3
	test eax,eax
	je Block17

 Block2:
	push ebx
	mov ebx,dword ptr [eax+0x88]
	push esi
	lea esi,[ebx+0x58]
	push edi
	mov ecx,esi
	call ZArray<long>::GetCount
	test eax,eax
	jbe Block7

 Block3:
	mov esi,dword ptr [esi]
	mov edi,edi

 Block4:
	cmp ebp,dword ptr [esi]
	jne Block6

 Block5:
	mov dword ptr [esp+0x18],4

 Block6:
	add esi,4
	sub eax,1
	jne Block4

 Block7:
	lea esi,[ebx+0x5C]
	mov ecx,esi
	xor edi,edi
	call ZArray<long>::GetCount
	lea ecx,[edi+5]
	test eax,eax
	jbe Block13

 Block8:
	mov esi,dword ptr [esi]
	mov edi,eax
	jmp Block10

 Block10:
	cmp ebp,dword ptr [esi]
	jne Block12

 Block11:
	mov dword ptr [esp+0x18],ecx

 Block12:
	add esi,4
	sub eax,1
	jne Block10

 Block13:
	cmp ebp,dword ptr [ebx]
	je Block15

 Block14:
	mov eax,0x68DB8BAD
	imul ebp
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x1F4
	mov eax,ecx
	je Block16

 Block15:
	mov eax,dword ptr [esp+0x18]

 Block16:
	mov ecx,dword ptr [esp+0x10]
	mov edx,dword ptr [ecx]
	push edi
	push eax
	mov eax,dword ptr [edx+0x28]
	call eax
	pop edi
	pop esi
	pop ebx
	pop ebp
	pop ecx
	ret 4

 Block17:
	xor eax,eax
	pop ebp
	pop ecx
	ret 4
}
}
// CUserLocal::TryDoingMonsterMagnet
_SUB_EXCEPTION_HANDLER(512F90)
__SUB_CLASS_THIS(00512F90, __thiscall, 41403,  CUserLocal, int32_t, const SKILLENTRY*, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_512F90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x54
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x68]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x50]
	push eax
	mov ecx,edi
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [esp+0x54]
	mov ecx,dword ptr [eax+4]
	mov dword ptr [esp+0x24],ecx
	test ebp,ebp
	je Block5

 Block1:
	add ebp,0xFFFFFFF0
	lea ebx,[ebp+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebp,ebp
	je Block4

 Block3:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebp
	call eax

 Block4:
	mov dword ptr [esp+0x54],0

 Block5:
	lea ebp,[edi+0x2148]
	call get_update_time
	mov dword ptr [esp+0x18],eax
	mov eax,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	mov ebx,eax
	mov eax,dword ptr [esi+0x590]
	push eax
	call get_weapon_type
	mov dword ptr [esp+0x34],eax
	mov eax,dword ptr [esp+0x80]
	xor ecx,ecx
	add esp,8
	cmp eax,ecx
	je Block7

 Block6:
	mov edx,dword ptr [eax]
	mov dword ptr [esp+0x14],edx
	jmp Block8

 Block7:
	mov dword ptr [esp+0x14],ecx

 Block8:
	add edi,0x3DA0
	mov dword ptr [esp+0x48],1
	mov dword ptr [esp+0x4C],edi
	mov dword ptr [esp+0x70],ecx
	mov ecx,edi
	call CRand32::Random
	mov dword ptr [esp+0x30],eax
	mov eax,dword ptr [esi+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	jne Block12

 Block9:
	lea eax,[edi+0x18]
	or esi,0xFFFFFFFF
	push eax
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x74],esi
	call ZSynchronizedHelper<ZFatalSection>::_ctor_0
	mov eax,dword ptr [edi+0x14]
	mov ecx,dword ptr [edi+0xC]
	mov edx,dword ptr [edi+0x10]
	mov dword ptr [edi+8],eax
	mov eax,dword ptr [esp+0x78]
	mov dword ptr [edi],ecx
	mov dword ptr [edi+4],edx
	add dword ptr [eax+4],esi
	jne Block11

 Block10:
	mov dword ptr [eax],0

 Block11:
	xor eax,eax
	jmp Block72

 Block12:
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,esi
	call CUser::GetVecCtrl_0
	mov edi,dword ptr [eax]
	test edi,edi
	je Block14

 Block13:
	add edi,0xFFFFFFF4
	jmp Block15

 Block14:
	xor edi,edi

 Block15:
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block17

 Block16:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block17:
	cmp ebx,0x2D
	je Block19

 Block18:
	cmp ebx,0x2E
	jne Block23

 Block19:
	cmp dword ptr [edi+0x1A0],0
	jne Block23

 Block20:
	mov ecx,edi
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block23

 Block21:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	mov ecx,edi
	call eax
	test eax,eax
	jne Block23

 Block22:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [esp+0x14]
	push eax
	push ecx
	call is_able_to_jumpshoot
	add esp,8
	test eax,eax
	je Block29

 Block23:
	cmp ebx,0x2D
	je Block25

 Block24:
	cmp ebx,0x2E
	jne Block26

 Block25:
	mov edx,dword ptr [edi+0x1BC]
	push edx
	lea eax,[edi+0x1B4]
	push eax
	call _ZtlSecureFuseHelper<CLadderOrRope *>::call
	add esp,8
	test eax,eax
	jne Block29

 Block26:
	cmp ebx,0x2F
	jne Block30

 Block27:
	mov ecx,dword ptr [edi+0x1BC]
	push ecx
	lea edx,[edi+0x1B4]
	push edx

 Block28:
	call _ZtlSecureFuseHelper<CLadderOrRope *>::call
	add esp,8
	test eax,eax
	je Block32

 Block29:
	lea ecx,[esp+0x48]
	mov dword ptr [esp+0x70],0xFFFFFFFF
	call ActionRandMan::~ActionRandMan
	xor eax,eax
	jmp Block72

 Block30:
	cmp ebx,0x31
	jne Block32

 Block31:
	mov eax,dword ptr [edi+0x1BC]
	push eax
	lea ecx,[edi+0x1B4]
	push ecx
	jmp Block28

 Block32:
	mov ecx,edi
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block34

 Block33:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	mov ecx,edi
	call eax
	test eax,eax
	je Block35

 Block34:
	mov ecx,dword ptr [edi+0x1BC]
	push ecx
	add edi,0x1B4
	push edi
	call _ZtlSecureFuseHelper<CLadderOrRope *>::call
	add esp,8
	test eax,eax
	jne Block29

 Block35:
	mov edx,dword ptr [esp+0x14]
	push edx
	call get_cool_time
	add esp,4
	mov dword ptr [esp+0x38],eax
	test eax,eax
	je Block38

 Block36:
	lea eax,[esp+0x34]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	lea ecx,[esi+0x46C4]
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block38

 Block37:
	mov edx,dword ptr [esp+0x18]
	cmp edx,dword ptr [esp+0x34]
	jl Block29

 Block38:
	mov eax,dword ptr [esi+0x5D0]
	mov edi,dword ptr [esi+0x5A0]
	mov dword ptr [esp+0x44],edi
	test eax,eax
	je Block45

 Block39:
	push eax
	call CMorphTemplate::IsSuperMan
	add esp,4
	test eax,eax
	je Block45

 Block40:
	cmp dword ptr [esp+0x78],0
	jne Block45

 Block41:
	cmp ebx,0x27
	je Block45

 Block42:
	cmp ebx,0x30
	je Block45

 Block43:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_rMorph_
	cmp eax,0xC80EDD
	jne Block51

 Block44:
	cmp ebx,0x2D
	jne Block51

 Block45:
	mov eax,dword ptr [esp+0x30]
	mov ecx,dword ptr [esp+0x7C]
	mov edx,dword ptr [esp+0x78]
	push eax
	push ecx
	push edx
	push ebx
	push edi
	call get_random_shoot_attack_action
	mov ecx,dword ptr [esp+0x8C]
	add esp,0x14
	mov edi,eax
	test ecx,ecx
	je Block50

 Block46:
	mov eax,dword ptr [esp+0x2C]
	push eax
	push ebx
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block50

 Block47:
	lea ecx,[esp+0x78]
	push 0x1127
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x70],1

 Block48:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x80]
	add esp,8
	mov byte ptr [esp+0x70],0
	test eax,eax
	je Block29

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block29

 Block50:
	test edi,edi
	jge Block52

 Block51:
	lea edx,[esp+0x78]
	push 0x1127
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x70],2
	jmp Block48

 Block52:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nSoulArrow_
	mov ebx,eax
	neg ebx
	sbb ebx,ebx
	neg ebx
	mov ecx,ebp
	mov dword ptr [esp+0x40],ebx
	call SecondaryStat::_ZtlSecureGet_nSpark_
	xor eax,eax
	mov dword ptr [esp+0x30],eax
	mov dword ptr [esp+0x34],eax
	mov dword ptr [esp+0x28],eax
	mov dword ptr [esp+0x2C],eax
	cmp ebx,eax
	jne Block55

 Block53:
	mov eax,dword ptr [esp+0x14]
	push eax
	call is_shoot_skill_not_consuming_bullet
	add esp,4
	test eax,eax
	jne Block55

 Block54:
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,dword ptr [esp+0x80]
	lea edx,[esp+0x38]
	push edx
	mov edx,dword ptr [esp+0x80]
	lea eax,[esp+0x30]
	push eax
	push ecx
	push edx
	mov ecx,esi
	call CUserLocal::GetProperBulletPosition
	mov dword ptr [esp+0x30],eax
	test eax,eax
	je Block29

 Block55:
	mov ecx,dword ptr [ebp+0x13DC]
	call TemporaryStatBase<long>::GetValue
	mov ecx,ebp
	mov ebx,eax
	call SecondaryStat::_ZtlSecureGet_nFrozen_
	push eax
	mov ecx,esi
	call CUser::GetAuraBooster
	push eax
	mov eax,dword ptr [ebx]
	push eax
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nBooster_
	mov ecx,dword ptr [esp+0x20]
	push eax
	push ecx
	lea ebx,[esi+0x88]
	mov ecx,ebx
	call CAvatar::_ZtlSecureGet_m_nWeaponAttackSpeed
	push eax
	call get_attack_speed_degree
	mov edx,dword ptr [esp+0x2C]
	push 0
	push 0
	push edx
	mov dword ptr [esp+0x40],eax
	mov eax,dword ptr [esi+0x58C]
	push 1
	push eax
	mov eax,dword ptr [esp+0x50]
	push ebp
	push eax
	call get_weapon_mastery
	add esp,0x34
	cmp dword ptr [esi+0x3AD4],0x1F962F1
	mov dword ptr [esp+0x3C],eax
	je Block62

 Block56:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	mov ebp,dword ptr [esp+0x78]
	jle Block60

 Block57:
	test ebp,ebp
	je Block29

 Block58:
	cmp dword ptr [ebp+0xC],3
	jne Block29

 Block59:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x44]
	mov ecx,esi
	call eax
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x14]
	push 0
	push 0x64
	push 6
	mov ecx,ebx
	call eax

 Block60:
	mov ecx,dword ptr [esp+0x7C]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	push ebp
	push edx
	push edi
	mov ecx,esi
	call CUser::SetAttackAction
	test eax,eax
	jne Block63

 Block61:
	jmp Block29

 Block62:
	mov ebp,dword ptr [esp+0x78]

 Block63:
	cmp dword ptr [esi+0x3AD4],0x1F962F1
	jne Block65

 Block64:
	mov dword ptr [esi+0x63C],0x1388
	jmp Block67

 Block65:
	test ebp,ebp
	je Block67

 Block66:
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x7C]
	push 0
	push 0x7FFFFFFF
	push 0
	push eax
	push ecx
	push ebp
	mov ecx,esi
	call CUser::ShowSkillEffect

 Block67:
	lea ebp,[edi+edi*2]
	mov ecx,ebx
	lea ebp,[ebp*8+ActionData::m_saCharacterActions]
	call CAvatar::GetActionInfo
	mov eax,dword ptr [eax+8]
	imul eax,dword ptr [ebp+0x10]
	cdq
	idiv dword ptr [ebp+0xC]
	mov edx,dword ptr [esp+0x78]
	push eax
	push edx
	call CUser::GetShootDelay
	mov dword ptr [esp+0x28],eax
	mov eax,dword ptr [esp+0x40]
	add esp,8
	test eax,eax
	je Block69

 Block68:
	mov ecx,dword ptr [ebp+0xC]
	add ecx,eax
	add ecx,dword ptr [esp+0x18]
	lea edx,[esp+0x38]
	push edx
	lea eax,[esp+0x18]
	mov dword ptr [esp+0x3C],ecx
	push eax
	lea ecx,[esi+0x46C4]
	call ZMap<long, long, long>::Insert

 Block69:
	mov eax,dword ptr [esi+0x58C]
	mov edx,dword ptr [esi]
	mov ebp,dword ptr [esi+0x640]
	push 0
	push 0
	push eax
	mov eax,dword ptr [edx+4]
	mov ecx,esi
	and ebp,1
	call eax
	mov edx,dword ptr [esp+0x48]
	movzx ecx,al
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x48],esp
	push ecx
	push edx
	push ecx
	lea edx,[esi+0x5B0]
	mov dword ptr [esp+0x58],esp
	mov ecx,esp
	push edx
	mov dword ptr [esp+0x5C],eax
	call Ztl_bstr_t::_ctor_copy
	mov eax,dword ptr [esp+0x98]
	mov ebx,dword ptr [esp+0x94]
	push eax
	mov eax,dword ptr [esp+0x5C]
	push ebx
	push eax
	call CUser::GetAfterimageUOL
	mov ecx,dword ptr [esp+0x40]
	mov edx,dword ptr [esp+0x48]
	add esp,0x18
	push edi
	lea eax,[edx+ecx]
	push ebp
	push eax
	mov ecx,esi
	mov dword ptr [esp+0x94],eax
	call CUser::RegisterAfterimage
	test ebx,ebx
	je Block71

 Block70:
	lea ecx,[esi+0x88]
	call CAvatar::GetActionInfo
	mov edx,dword ptr [eax+8]
	mov ecx,dword ptr [esp+0x20]
	sub edx,ecx
	mov eax,0x55555556
	imul edx
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add eax,ecx
	mov ecx,dword ptr [esp+0x14]
	push eax
	mov eax,dword ptr [esp+0x28]
	push ecx
	lea edx,[ebx+0x58]
	push edx
	push eax
	mov ecx,esi
	call CUserLocal::TryRegisterFinalAttack

 Block71:
	mov ecx,dword ptr [esp+0x78]
	mov edx,dword ptr [esp+0x7C]
	mov eax,dword ptr [esp+0x80]
	mov dword ptr [esi+0x4810],ecx
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr [esi+0x4818],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [esi+0x481C],eax
	mov eax,dword ptr [esp+0x40]
	mov dword ptr [esi+0x4820],ecx
	mov ecx,dword ptr [esp+0x44]
	mov dword ptr [esi+0x4814],ebx
	mov ebx,dword ptr [esp+0x1C]
	mov dword ptr [esi+0x4824],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [esi+0x4828],eax
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esi+0x4830],ecx
	push 0x33
	lea ecx,[esp+0x5C]
	mov dword ptr [esi+0x480C],1
	mov dword ptr [esi+0x482C],edi
	mov dword ptr [esi+0x4834],ebx
	mov dword ptr [esi+0x4838],edx
	mov dword ptr [esi+0x483C],eax
	call COutPacket::_ctor_1
	mov ecx,dword ptr [esp+0x14]
	push ecx
	lea ecx,[esp+0x5C]
	mov byte ptr [esp+0x74],3
	call COutPacket::Encode4
	and edi,0x7FFF
	shl ebp,0xF
	or edi,ebp
	push edi
	lea ecx,[esp+0x5C]
	call COutPacket::Encode2
	push ebx
	lea ecx,[esp+0x5C]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0x58]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x5C]
	mov dword ptr [esp+0x48],0
	mov byte ptr [esp+0x70],0
	call ZArray<unsigned char>::RemoveAll
	lea ecx,[esp+0x48]
	mov dword ptr [esp+0x70],0xFFFFFFFF
	call ActionRandMan::~ActionRandMan
	mov eax,1

 Block72:
	mov ecx,dword ptr [esp+0x68]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x60
	ret 0xC
}
}
// CUserLocal::ApplyWeaponOption
_SUB_EXCEPTION_HANDLER(5092D0)
__SUB_CLASS_THIS(005092D0, __thiscall, 41344,  CUserLocal, void, long, long, long&, long&, long&, long&, long&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5092D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemOptionInfo>::ms_pInstance]
	call CItemOptionInfo::GetItemOption
	mov edx,dword ptr [esp+0x10]
	test edx,edx
	je Block15

 Block1:
	mov eax,dword ptr [esp+0x28]
	imul eax,0xE0
	add eax,dword ptr [edx+0xC]
	mov ecx,dword ptr [eax+0x78]
	test ecx,ecx
	jle Block3

 Block2:
	mov esi,dword ptr [esp+0x2C]
	mov dword ptr [esi],ecx

 Block3:
	mov ecx,dword ptr [eax+0x7C]
	test ecx,ecx
	jle Block5

 Block4:
	mov esi,dword ptr [esp+0x30]
	mov dword ptr [esi],ecx

 Block5:
	cmp dword ptr [eax+0xC4],0
	mov ecx,dword ptr [eax+0xAC]
	jle Block7

 Block6:
	mov esi,dword ptr [esp+0x38]
	jmp Block9

 Block7:
	test ecx,ecx
	jle Block10

 Block8:
	mov esi,dword ptr [esp+0x34]

 Block9:
	mov dword ptr [esi],ecx

 Block10:
	mov eax,dword ptr [eax+0xA0]
	test eax,eax
	jle Block12

 Block11:
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr [ecx],eax

 Block12:
	lea esi,[edx-0x10]
	lea edi,[esi+4]
	push edi
	mov dword ptr [esp+0x20],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block15

 Block13:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block15

 Block14:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block15:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x14
	ret 0x1C
}
}
// CUserLocal::SetCarryItemEffectForLocal
_SUB_EXCEPTION_HANDLER(5083D0)
__SUB_CLASS_THIS(005083D0, __thiscall, 41367,  CUserLocal, void, CharacterData&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5083D0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	mov eax,dword ptr [esp+0x34]
	mov eax,dword ptr [eax+0x515]
	xor ebp,ebp
	xor edi,edi
	mov dword ptr [esp+0x14],edi
	cmp eax,ebp
	jne Block2

 Block1:
	xor eax,eax
	jmp Block3

 Block2:
	mov eax,dword ptr [eax-4]

 Block3:
	lea ebx,[eax-1]
	cmp ebx,ebp
	jle Block13

 Block4:
	push ebx
	push 5
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,dword ptr [esp+0x40]
	call CharacterData::GetItem
	mov esi,dword ptr [esp+0x20]
	mov dword ptr [esp+0x2C],ebp
	cmp esi,ebp
	je Block7

 Block5:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	cmp eax,offset CCtrlEdit::GetRTTI
	jne Block7

 Block6:
	inc edi
	mov dword ptr [esp+0x14],edi

 Block7:
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	cmp esi,ebp
	je Block11

 Block8:
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block10

 Block9:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block10:
	mov edi,dword ptr [esp+0x14]
	mov dword ptr [esp+0x20],ebp

 Block11:
	dec ebx
	cmp ebx,ebp
	jg Block4

 Block12:
	mov ecx,dword ptr [esp+0x18]

 Block13:
	cmp dword ptr [ecx+0x2EDC],edi
	je Block15

 Block14:
	push edi
	mov dword ptr [ecx+0x2EDC],edi
	call CUser::SetCarryItemEffect

 Block15:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CUserLocal::FindHitSummonedInRect
__SUB_CLASS_THIS(00506100, __thiscall, 41373,  CUserLocal, long, const tagRECT&, CSummoned**, long) {
__asm {

 Block0:
	sub esp,0x24
	mov ecx,dword ptr [ecx+0x2E70]
	push esi
	xor esi,esi
	mov dword ptr [esp+4],ecx
	test ecx,ecx
	je Block8

 Block1:
	push ebx
	mov ebx,dword ptr [esp+0x34]
	push ebp
	mov ebp,dword ptr [esp+0x3C]
	push edi
	nop

 Block2:
	cmp esi,ebp
	jge Block7

 Block3:
	lea eax,[esp+0x10]
	push eax
	call ZList<ZRef<CSummoned>>::GetNext
	mov edi,dword ptr [eax+4]
	add esp,4
	push 1
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,edi
	call CSummoned::GetBodyRect
	lea edx,[esp+0x14]
	push edx
	call IsRectEmpty
	test eax,eax
	jne Block6

 Block4:
	mov eax,dword ptr [esp+0x38]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	call IntersectRect
	test eax,eax
	je Block6

 Block5:
	mov dword ptr [ebx+esi*4],edi
	inc esi

 Block6:
	cmp dword ptr [esp+0x10],0
	jne Block2

 Block7:
	pop edi
	pop ebp
	pop ebx

 Block8:
	mov eax,esi
	pop esi
	add esp,0x24
	ret 0xC
}
}
// CUserLocal::OnExJablinApply
__SUB_CLASS_THIS(005034E0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov dword ptr [ecx+0x484C],1
	ret 4
}
}
// CUserLocal::CheckPortal_Collision
_SUB_EXCEPTION_HANDLER(519A10)
__SUB_CLASS_THIS0(00519A10, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	and esp,0xFFFFFFC0
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_519A10
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xA4
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xB8]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	cmp dword ptr [ebx+0x2E98],0
	jne Block41

 Block1:
	mov eax,dword ptr [ebx+4]
	mov edx,dword ptr [eax+0x10]
	mov esi,dword ptr [TSingleton<CPortalList>::ms_pInstance]
	lea edi,[ebx+4]
	lea ecx,[esp+0x64]
	push ecx
	mov ecx,edi
	call edx
	mov ebp,eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x6C]
	push ecx
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebp]
	push eax
	push ecx
	mov ecx,esi
	call CPortalList::FindPortal_Collision
	mov esi,eax
	test esi,esi
	je Block41

 Block2:
	mov eax,dword ptr [esi+8]
	cmp eax,9
	jne Block9

 Block3:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [eax+0x20B8],0
	mov edx,dword ptr [esi+0x2C]
	mov ebp,eax
	mov dword ptr [esp+0x54],edx
	jne Block41

 Block4:
	mov eax,dword ptr [eax+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block41

 Block5:
	call get_update_time
	sub eax,dword ptr [ebp+0x20BC]
	cmp eax,dword ptr [esp+0x54]
	jl Block41

 Block6:
	cmp dword ptr [esi+0x28],0
	je Block8

 Block7:
	mov edx,dword ptr [esi]
	cmp edx,dword ptr [ebx+0x4724]
	je Block41

 Block8:
	push 0x70
	lea ecx,[esp+0x78]
	call COutPacket::_ctor_1
	mov dword ptr [esp+0xC0],0
	call get_field
	mov al,byte ptr [eax+0x168]
	mov byte ptr [esp+0x54],al
	mov ecx,dword ptr [esp+0x54]
	push ecx
	lea ecx,[esp+0x78]
	call COutPacket::Encode1
	push ecx
	lea edx,[esi+4]
	mov ecx,esp
	mov dword ptr [esp+0x5C],esp
	push edx
	call ZXString<char>::_ctor_copy
	lea ecx,[esp+0x78]
	call COutPacket::EncodeStr
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[esp+0x58]
	push ecx
	mov ecx,edi
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[esp+0x78]
	call COutPacket::Encode2
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x58]
	push eax
	mov ecx,edi
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[esp+0x78]
	call COutPacket::Encode2
	lea ecx,[esp+0x74]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push 1
	call CWvsContext::SetExclRequestSent
	mov edx,dword ptr [esi]
	lea ecx,[esp+0x78]
	mov dword ptr [ebx+0x4724],edx
	mov dword ptr [esp+0xC0],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0xB8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block9:
	cmp eax,0xC
	jne Block15

 Block10:
	mov ecx,ebx
	call CUserLocal::VerticalJump
	mov eax,dword ptr [ebx+0x19E4]
	test eax,eax
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	jmp Block13

 Block12:
	xor eax,eax

 Block13:
	cmp dword ptr [eax+0x1A0],0
	je Block41

 Block14:
	mov ecx,ebx
	call CUserLocal::CheckPassenser
	mov ecx,dword ptr [esp+0xB8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block15:
	cmp eax,0xD
	jne Block33

 Block16:
	call get_field
	mov edi,eax
	xor ebp,ebp
	cmp edi,ebp
	je Block22

 Block17:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,edi
	call edx
	cmp eax,0x13
	je Block23

 Block18:
	cmp eax,0x14
	je Block23

 Block19:
	cmp eax,0x15
	je Block23

 Block20:
	cmp eax,0x19
	je Block23

 Block21:
	cmp eax,0x20
	je Block23

 Block22:
	lea ecx,[edi+0x16C]
	call TSecType<unsigned long>::GetData
	cmp eax,0xABA9502
	jne Block41

 Block23:
	mov ecx,dword ptr [esi+0x3C]
	lea eax,[esi+0x3C]
	mov dword ptr [esp+0x50],ebp
	mov dword ptr [esp+0x54],ebp
	cmp ecx,ebp
	je Block29

 Block24:
	cmp byte ptr [ecx],0
	je Block29

 Block25:
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x54]
	push edx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x64],esp
	push eax
	call ZXString<char>::_ctor_copy
	mov ecx,dword ptr [TSingleton<CReactorPool>::ms_pInstance]
	call CReactorPool::GetStates
	cmp eax,ebp
	je Block29

 Block26:
	cmp dword ptr [esp+0x50],1
	jne Block41

 Block27:
	mov eax,dword ptr [esp+0x54]
	cmp eax,1
	je Block41

 Block28:
	cmp eax,2
	je Block41

 Block29:
	mov eax,dword ptr [esi+0x40]
	lea ecx,[esi+0x40]
	cmp eax,ebp
	je Block32

 Block30:
	cmp byte ptr [eax],0
	je Block32

 Block31:
	mov eax,dword ptr [esi+0x34]
	neg eax
	mov dword ptr [esp+0x58],eax
	fild dword ptr [esp+0x58]
	sub esp,0x10
	add esi,0x44
	fstp qword ptr [esp+8]
	fild dword ptr [esi-0xC]
	fstp qword ptr [esp]
	push esi
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::SetImpactNextBySessionValue
	mov ecx,ebx
	call CUserLocal::CheckPassenser
	mov ecx,dword ptr [esp+0xB8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block32:
	mov ecx,dword ptr [esi+0x34]
	neg ecx
	mov dword ptr [esp+0x58],ecx
	fild dword ptr [esp+0x58]
	sub esp,0x10
	mov ecx,ebx
	fstp qword ptr [esp+8]
	fild dword ptr [esi+0x38]
	fstp qword ptr [esp]
	call CUserLocal::OnCollisionCustomImpact
	mov ecx,ebx
	call CUserLocal::CheckPassenser
	mov ecx,dword ptr [esp+0xB8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret

 Block33:
	cmp dword ptr [esi+0x1C],0x3B9AC9FF
	je Block41

 Block34:
	call get_field
	mov edi,eax
	lea ecx,[edi+0x16C]
	call TSecType<unsigned long>::GetData
	cmp eax,dword ptr [esi+0x1C]
	jne Block37

 Block35:
	mov eax,dword ptr [esi+0x20]
	mov esi,dword ptr [esi+4]
	push 1
	push eax
	push esi
	push 0
	push 0
	mov ecx,ebx
	call CUserLocal::TryRegisterTeleport
	test eax,eax
	je Block41

 Block36:
	lea edx,[esp+0x58]
	push 0x1A5F
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0x64
	push eax
	mov dword ptr [esp+0xC8],1
	call play_game_sound
	mov eax,dword ptr [esp+0x60]
	jmp Block39

 Block37:
	mov esi,dword ptr [esi+4]
	push 0
	push 0
	push 0
	push esi
	push 0xFFFFFFFF
	mov ecx,edi
	call CField::SendTransferFieldRequest
	test eax,eax
	je Block41

 Block38:
	lea eax,[esp+0x60]
	push 0x1A5F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0x64
	push eax
	mov dword ptr [esp+0xC8],2
	call play_game_sound
	mov eax,dword ptr [esp+0x68]

 Block39:
	add esp,8
	mov dword ptr [esp+0xC0],0xFFFFFFFF
	test eax,eax
	je Block41

 Block40:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block41:
	mov ecx,dword ptr [esp+0xB8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::IsEquippedCorrectWeaponForSkill
__SUB_CLASS_THIS(0053A0A0, __thiscall, 41443,  CUserLocal, int32_t, const SKILLENTRY*) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push esi
	mov esi,ecx
	test ebx,ebx
	jne Block2

 Block1:
	pop esi
	xor eax,eax
	pop ebx
	ret 4

 Block2:
	mov eax,dword ptr [esi+0x58C]
	push edi
	push eax
	call get_weapon_type
	mov esi,dword ptr [esi+0x590]
	push esi
	mov edi,eax
	call get_weapon_type
	add esp,8
	push eax
	push edi
	mov ecx,ebx
	call SKILLENTRY::IsCorrectWeaponType
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CUserLocal::ThrowGrenade
_SUB_EXCEPTION_HANDLER(50DF50)
__SUB_CLASS_THIS(0050DF50, __thiscall, 41446,  CUserLocal, void, long, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50DF50
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esi+4]
	mov eax,dword ptr [eax+0x10]
	lea ecx,[esi+4]
	lea edx,[esp+0x18]
	push edx
	mov dword ptr [esp+0x18],ecx
	call eax
	mov edi,dword ptr [esp+0x48]
	cmp edi,0x423D0B
	jne Block2

 Block1:
	mov ecx,dword ptr [esi+0x640]
	and cl,1
	movsx edx,cl
	neg edx
	sbb edx,edx
	and edx,0xFFFFFFC4
	add edx,0x1E
	add dword ptr [esp+0x18],edx
	sub dword ptr [esp+0x1C],0xA0

 Block2:
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x18]
	mov ebp,dword ptr [esp+0x50]
	mov edx,dword ptr [esp+0x4C]
	push eax
	push ecx
	push ebp
	push edx
	push edi
	mov ecx,esi
	call CUser::ThrowGrenade
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edi
	call CSkillInfo::GetSkill
	push edi
	mov ecx,esi
	mov ebx,eax
	call CUserLocal::GetSkillLevel
	push eax
	mov ecx,ebx
	call SKILLENTRY::GetLevelData
	mov ecx,dword ptr [eax+0x18C]
	push ecx
	add eax,0x184
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jge Block5

 Block3:
	mov eax,dword ptr [ebx+0x20]
	test eax,eax
	je Block6

 Block4:
	cmp dword ptr [eax-4],0
	je Block6

 Block5:
	call _rand
	push eax
	push edi
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	push eax
	mov ecx,ebx
	call SKILLENTRY::GetRandomAppointedAction
	mov edx,dword ptr [esi+0x88]
	push 0
	lea ecx,[esi+0x88]
	push 0x64
	mov dword ptr [esi+0x644],eax
	mov eax,dword ptr [edx+0x14]
	push 6
	call eax

 Block6:
	push 0x79
	lea ecx,[esp+0x2C]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [esp+0x18]
	push ecx
	lea ecx,[esp+0x2C]
	mov dword ptr [esp+0x44],0
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x1C]
	push edx
	lea ecx,[esp+0x2C]
	call COutPacket::Encode4
	mov ecx,dword ptr [esp+0x14]
	mov eax,dword ptr [ecx]
	mov eax,dword ptr [eax+0x10]
	lea edx,[esp+0x20]
	push edx
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea ecx,[esp+0x2C]
	call COutPacket::Encode4
	push ebp
	lea ecx,[esp+0x2C]
	call COutPacket::Encode4
	push edi
	lea ecx,[esp+0x2C]
	call COutPacket::Encode4
	mov edx,dword ptr [esp+0x4C]
	push edx
	lea ecx,[esp+0x2C]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+0x28]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[esp+0x2C]
	mov dword ptr [esp+0x40],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 0xC
}
}
// CUserLocal::DoActiveSkill
_SUB_EXCEPTION_HANDLER(5445B0)
// 9484BC
static uint8_t _SUB_5445B0_LOOKUP_TABLE_8[12] = {
0, 0, 0, 0, 1, 0, 2, 2, 0, 141, 73, 0, 
};
// 948618
static uint8_t _SUB_5445B0_LOOKUP_TABLE_10[68] = {
0, 0, 1, 2, 3, 4, 5, 11, 6, 0, 0, 11, 11, 11, 11, 11, 
11, 11, 11, 6, 11, 11, 11, 11, 11, 7, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 9, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 10, 10, 144, 
};
// 948814
static uint8_t _SUB_5445B0_LOOKUP_TABLE_13[12] = {
0, 3, 3, 3, 0, 0, 0, 3, 1, 3, 2, 144, 
};
// 948708
static uint8_t _SUB_5445B0_LOOKUP_TABLE_12[68] = {
0, 13, 1, 2, 3, 4, 5, 13, 6, 7, 7, 13, 13, 13, 13, 13, 
13, 13, 13, 6, 13, 13, 13, 13, 13, 8, 13, 13, 13, 13, 13, 13, 
13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 9, 10, 13, 13, 
13, 11, 11, 12, 
};
// 948134
static uint8_t _SUB_5445B0_LOOKUP_TABLE_2[12] = {
0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 139, 255, 
};
// 94845C
static uint8_t _SUB_5445B0_LOOKUP_TABLE_7[12] = {
0, 1, 2, 0, 0, 4, 0, 4, 3, 3, 139, 255, 
};
// 94810C
static uint8_t _SUB_5445B0_LOOKUP_TABLE_0[12] = {
0, 0, 1, 0, 0, 0, 0, 0, 0, 141, 73, 0, 
};
// 9484F8
static uint8_t _SUB_5445B0_LOOKUP_TABLE_9[68] = {
0, 0, 1, 2, 3, 4, 5, 11, 6, 0, 0, 11, 11, 11, 11, 11, 
11, 11, 11, 6, 11, 11, 11, 11, 11, 7, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 9, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 10, 10, 144, 
};
// 948148
static uint8_t _SUB_5445B0_LOOKUP_TABLE_3[12] = {
0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 139, 255, 
};
// 9481FC
static uint8_t _SUB_5445B0_LOOKUP_TABLE_5[12] = {
0, 1, 3, 3, 3, 2, 3, 0, 3, 1, 139, 255, 
};
// 94823C
static uint8_t _SUB_5445B0_LOOKUP_TABLE_6[12] = {
0, 4, 1, 4, 4, 2, 4, 2, 4, 3, 139, 255, 
};
// 948124
static uint8_t _SUB_5445B0_LOOKUP_TABLE_1[8] = {
0, 0, 0, 1, 0, 2, 0, 0, 
};
// 94868C
static uint8_t _SUB_5445B0_LOOKUP_TABLE_11[68] = {
0, 0, 1, 2, 3, 4, 5, 11, 6, 0, 0, 11, 11, 11, 11, 11, 
11, 11, 11, 6, 11, 11, 11, 11, 11, 7, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 9, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 10, 10, 144, 
};
// 948188
static uint8_t _SUB_5445B0_LOOKUP_TABLE_4[68] = {
0, 1, 1, 2, 3, 4, 5, 6, 12, 7, 1, 1, 12, 12, 12, 12, 
12, 12, 12, 12, 7, 12, 12, 12, 12, 12, 8, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 
10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 11, 11, 
};
__SUB_CLASS_THIS(005445B0, __thiscall, 41413,  CUserLocal, int32_t, long, uint32_t, long*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_5445B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x84
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x98]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x14],ebx
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x40]
	call edx
	mov esi,dword ptr [esp+0xA8]
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x23
	jne Block19

 Block1:
	cmp dword ptr [ebx+0x5EC],0
	jne Block1110

 Block2:
	cmp dword ptr [ebx+0x5F0],0
	jne Block1110

 Block3:
	cmp dword ptr [ebx+0x3B84],0
	jne Block1110

 Block4:
	cmp dword ptr [ebx+0x5E8],0x217E76D
	jne Block15

 Block5:
	cmp esi,0x21612A9
	je Block12

 Block6:
	cmp esi,0x2179951
	je Block12

 Block7:
	cmp esi,0x21612AB
	je Block12

 Block8:
	cmp esi,0x21612AC
	je Block12

 Block9:
	cmp esi,0x2179952
	je Block12

 Block10:
	cmp esi,0x217994B
	je Block12

 Block11:
	cmp esi,0x217C067
	jne Block15

 Block12:
	lea ecx,[esp+0x24]
	push 0x18F8
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0xA0],0

 Block13:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x2C]
	add esp,8
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	test eax,eax
	je Block1110

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1110

 Block15:
	call get_update_time
	lea edx,[esp+0x2C]
	mov ebp,eax
	push edx
	lea eax,[esp+0x28]
	lea edi,[ebx+0x46C4]
	push eax
	mov ecx,edi
	mov dword ptr [esp+0x2C],0x21612A9
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block17

 Block16:
	cmp ebp,dword ptr [esp+0x2C]
	jl Block1110

 Block17:
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x28]
	push edx
	mov ecx,edi
	mov dword ptr [esp+0x2C],0x2179951
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block19

 Block18:
	cmp ebp,dword ptr [esp+0x2C]
	jl Block1110

 Block19:
	or ebp,0xFFFFFFFF
	cmp esi,0x217E76D
	jg Block37

 Block20:
	je Block34

 Block21:
	cmp esi,0x1E84BE9
	je Block1110

 Block22:
	cmp esi,0x21612AA
	je Block28

 Block23:
	cmp esi,0x217C059
	jne Block55

 Block24:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x44]
	push eax
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push esi
	push eax
	mov dword ptr [esp+0xAC],1
	call CSkillInfo::GetSkillLevel_0
	lea ecx,[esp+0x44]
	mov edi,eax
	mov dword ptr [esp+0xA0],ebp
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp edi,0xE
	jle Block26

 Block25:
	mov esi,0x217C062
	jmp Block55

 Block26:
	cmp edi,7
	jle Block55

 Block27:
	mov esi,0x217C061
	jmp Block55

 Block28:
	mov eax,dword ptr [ebx+0x5E8]
	cmp eax,0x217C05C
	je Block1110

 Block29:
	cmp eax,0x217E76D
	je Block1110

 Block30:
	cmp eax,0x217E775
	je Block1110

 Block31:
	cmp eax,0x21612A9
	je Block1110

 Block32:
	cmp eax,0x2179951
	jne Block55

 Block33:
	jmp Block1110

 Block34:
	lea ecx,[ebx+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,ebp
	jg Block1110

 Block35:
	cmp dword ptr [ebx+0x5E8],0x217E76D
	jne Block55

 Block36:
	lea ecx,[esp+0x64]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push 0x217E76D
	push eax
	mov dword ptr [esp+0xAC],7
	call CSkillInfo::GetSkillLevel_0
	lea ecx,[esp+0x64]
	mov esi,eax
	mov dword ptr [esp+0xA0],ebp
	call ZRef<CharacterData>::~ZRef<CharacterData>
	push 1
	push esi
	push 0x217E385
	mov ecx,ebx
	call CUserLocal::SendSkillEffectRequest
	mov ecx,ebx
	call CUserLocal::ClearRepeatSkill
	push 0
	push 0x2A
	push 0x217E76D
	call play_skill_sound
	add esp,0xC
	jmp Block1110

 Block37:
	mov eax,esi
	sub eax,0x217E76E
	je Block41

 Block38:
	sub eax,6
	jne Block55

 Block39:
	cmp dword ptr [ebx+0x5E8],0x217E76D
	je Block55

 Block40:
	lea edx,[esp+0x24]
	push 0x18BA
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0xA0],6
	jmp Block13

 Block41:
	push 0x217C059
	lea eax,[esp+0x34]
	push eax
	mov ecx,ebx
	call CUser::GetSummoned
	xor edi,edi
	mov dword ptr [esp+0xA0],2
	cmp dword ptr [esp+0x34],edi
	jne Block52

 Block42:
	push 0x217C061
	lea ecx,[esp+0x50]
	push ecx
	mov ecx,ebx
	call CUser::GetSummoned
	push eax
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0xA4],3
	call ZRef<CSummoned>::op_assign_copy
	mov byte ptr [esp+0xA0],2
	cmp dword ptr [esp+0x50],edi
	je Block44

 Block43:
	push edi
	lea ecx,[esp+0x50]
	call ZRef<CSummoned>::_ReleaseRaw
	mov dword ptr [esp+0x50],edi

 Block44:
	cmp dword ptr [esp+0x34],edi
	jne Block52

 Block45:
	push 0x217C062
	lea edx,[esp+0x58]
	push edx
	mov ecx,ebx
	call CUser::GetSummoned
	push eax
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0xA4],4
	call ZRef<CSummoned>::op_assign_copy
	mov byte ptr [esp+0xA0],2
	cmp dword ptr [esp+0x58],edi
	je Block47

 Block46:
	push edi
	lea ecx,[esp+0x58]
	call ZRef<CSummoned>::_ReleaseRaw
	mov dword ptr [esp+0x58],edi

 Block47:
	cmp dword ptr [esp+0x34],edi
	jne Block52

 Block48:
	lea eax,[esp+0x2C]
	push 0x18A2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],5
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x34]
	add esp,8
	mov byte ptr [esp+0xA0],2
	cmp eax,edi
	je Block50

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block50:
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	cmp dword ptr [esp+0x34],edi
	je Block1110

 Block51:
	push edi
	lea ecx,[esp+0x34]
	call ZRef<CSummoned>::_ReleaseRaw
	jmp Block1110

 Block52:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add ecx,0x2148
	call SecondaryStat::_ZtlSecureGet_nSafetyDamage_
	test eax,eax
	je Block54

 Block53:
	push 0x217E76E
	mov ecx,ebx
	call CUserLocal::SendSkillCancelRequest
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	call ZRef<CSummoned>::~ZRef<CSummoned>
	mov eax,1
	jmp Block1111

 Block54:
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0xA0],ebp
	call ZRef<CSummoned>::~ZRef<CSummoned>

 Block55:
	mov dword ptr [ebx+0x3B74],0
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esp+0x90]
	push ecx
	mov ecx,edi
	mov dword ptr [esp+0x2C],edi
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x90]
	mov dword ptr [esp+0x38],ebp
	call ZRef<CharacterData>::~ZRef<CharacterData>
	lea edx,[edi+0x20D0]
	add edi,0x2148
	mov dword ptr [esp+0x2C],edi
	mov edi,dword ptr [_D_G_PSTAGE+4]
	mov dword ptr [esp+0x18],edx
	test edi,edi
	je Block65

 Block56:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block65

 Block57:
	add edi,0xC
	je Block65

 Block58:
	add edi,0xFFFFFFF4
	mov dword ptr [esp+0x34],edi
	test edi,edi
	je Block60

 Block59:
	lea eax,[edi+0x10]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block60:
	mov dword ptr [esp+0xA0],8
	test edi,edi
	je Block78

 Block61:
	push esi
	mov ecx,edi
	call CField::IsSkillForbiden
	test eax,eax
	je Block66

 Block62:
	lea ecx,[esp+0x24]
	push 0x389
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],9
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x2C]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block64

 Block63:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block64:
	push 0
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0xA4],0xFFFFFFFF
	call ZRef<CField>::_ReleaseRaw
	jmp Block1110

 Block65:
	xor edi,edi
	mov dword ptr [esp+0x34],edi
	jmp Block60

 Block66:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x1C]
	mov ecx,edi
	call eax
	cmp eax,0x1C
	jne Block72

 Block67:
	mov ecx,ebp
	call GW_CharacterStat::_ZtlSecureGet_nJob
	movsx ecx,ax
	push ecx
	call is_evan_job
	add esp,4
	test eax,eax
	je Block72

 Block68:
	lea edx,[esp+0x24]
	push 0x159B
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0xA

 Block69:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x2C]

 Block70:
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1108

 Block71:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1108

 Block72:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x1C]
	mov ecx,edi
	call edx
	cmp eax,0xF
	jne Block75

 Block73:
	cmp esi,0x217C05D
	jne Block75

 Block74:
	lea eax,[esp+0x24]
	push 0x389
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0xB
	jmp Block69

 Block75:
	cmp dword ptr [edi+0x18C],0
	je Block78

 Block76:
	cmp esi,0x1F914CC
	jne Block78

 Block77:
	lea ecx,[esp+0x24]
	push 0x188A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0xC
	jmp Block69

 Block78:
	cmp dword ptr [ebx+0x3B14],0x423D0D
	jne Block81

 Block79:
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	test edi,edi
	je Block1110

 Block80:
	push 0
	lea ecx,[esp+0x34]
	call ZRef<CField>::_ReleaseRaw
	jmp Block1110

 Block81:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x40]
	mov ecx,ebx
	call eax
	push eax
	push 0x402
	call get_novice_skill_as_race
	mov edi,dword ptr [esp+0x34]
	add esp,8
	cmp esi,eax
	jne Block83

 Block82:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_nFlying_
	test eax,eax
	jne Block161

 Block83:
	push esi
	call is_teleport_mastery_skill
	add esp,4
	test eax,eax
	je Block85

 Block84:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_nTeleportMasteryOn_
	test eax,eax
	jg Block161

 Block85:
	cmp esi,0x217994F
	jne Block90

 Block86:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_nGuard_
	test eax,eax
	jle Block90

 Block87:
	lea ecx,[ebx+0x88]
	call CAvatar::GetOneTimeAction
	or esi,0xFFFFFFFF
	cmp eax,esi
	jle Block89

 Block88:
	mov dword ptr [esp+0xA0],esi
	jmp Block1109

 Block89:
	push 0x217994F
	mov ecx,ebx
	call CUserLocal::SendSkillCancelRequest
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0xA0],esi
	call ZRef<CField>::~ZRef<CField>
	mov eax,1
	jmp Block1111

 Block90:
	push esi
	call is_jump_rush_skill
	add esp,4
	test eax,eax
	je Block98

 Block91:
	mov ebx,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	test ebx,ebx
	je Block1108

 Block92:
	mov edi,dword ptr [esp+0x14]
	mov edx,dword ptr [edi+4]
	mov edx,dword ptr [edx+0x10]
	add edi,4
	lea eax,[esp+0x44]
	push eax
	mov ecx,edi
	call edx
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	push 1
	mov ebp,eax
	push 0x7FFFFFFF
	lea eax,[esp+0x2C]
	push eax
	lea eax,[esp+0x58]
	push eax
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebp]
	push eax
	push ecx
	mov ecx,ebx
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	test eax,eax
	je Block97

 Block93:
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	lea eax,[esp+0x44]
	push eax
	mov ecx,edi
	call edx
	mov ecx,dword ptr [esp+0x24]
	sub ecx,dword ptr [eax+4]
	push esi
	mov eax,ecx
	cdq
	mov edi,eax
	xor edi,edx
	sub edi,edx
	call get_required_height_jump_rush
	add esp,4
	cmp edi,eax
	jl Block97

 Block94:
	mov ecx,dword ptr [esp+0x14]
	push 0x41C7D9
	call CUserLocal::GetSkillLevel
	cmp eax,0x14
	jl Block96

 Block95:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::_ZtlSecureGet_rJump_
	cmp eax,0x41C7D9
	je Block98

 Block96:
	lea eax,[esp+0x2C]
	push 0x16EC
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0xE
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x34]
	jmp Block70

 Block97:
	lea ecx,[esp+0x2C]
	push 0x1688
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0xD
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x34]
	jmp Block70

 Block98:
	mov ebx,dword ptr [esp+0x14]
	cmp dword ptr [ebx+0x4798],0
	je Block100

 Block99:
	push esi
	call get_required_combo_count
	add esp,4
	test eax,eax
	jne Block1108

 Block100:
	mov ecx,ebx
	call CUser::IsDarkSight
	test eax,eax
	je Block107

 Block101:
	cmp esi,0x406849
	je Block107

 Block102:
	cmp esi,0x423D0D
	je Block107

 Block103:
	push 0xD72625
	mov ecx,ebx
	call CUserLocal::GetSkillLevel
	test eax,eax
	jg Block105

 Block104:
	push 0x421211
	mov ecx,ebx
	call CUserLocal::GetSkillLevel
	test eax,eax
	jle Block1108

 Block105:
	cmp esi,0xD5A36B
	je Block1108

 Block106:
	cmp esi,0x3D0CEB
	je Block1108

 Block107:
	cmp esi,0x423D0B
	je Block109

 Block108:
	cmp esi,0x423D0A
	jne Block117

 Block109:
	mov eax,dword ptr [ebx+0x19E4]
	test eax,eax
	je Block111

 Block110:
	lea ecx,[eax-0xC]
	jmp Block112

 Block111:
	xor ecx,ecx

 Block112:
	cmp dword ptr [ecx+0x1A0],0
	jne Block117

 Block113:
	test eax,eax
	je Block115

 Block114:
	add eax,0xFFFFFFF4
	jmp Block116

 Block115:
	xor eax,eax

 Block116:
	mov edx,dword ptr [eax]
	mov ecx,eax
	mov eax,dword ptr [edx+8]
	call eax
	test eax,eax
	je Block1108

 Block117:
	push esi
	call is_upgrade_skill
	add esp,4
	test eax,eax
	jne Block1108

 Block118:
	mov eax,esi
	sub eax,0x4C4F2B
	je Block123

 Block119:
	sub eax,0x3344E
	je Block122

 Block120:
	sub eax,5
	jne Block128

 Block121:
	mov edi,0x4FA6AB
	jmp Block124

 Block122:
	mov edi,0x4FA6A2
	jmp Block124

 Block123:
	mov edi,0x4F7F90

 Block124:
	mov ebp,dword ptr [esp+0x38]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push esi
	push ebp
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block129

 Block125:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push edi
	push ebp
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block129

 Block126:
	mov ecx,dword ptr [esp+0x34]
	push edi
	call CField::IsSkillForbiden
	test eax,eax
	jne Block129

 Block127:
	mov esi,edi
	jmp Block129

 Block128:
	mov ebp,dword ptr [esp+0x38]

 Block129:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x40]
	mov ecx,ebx
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block135

 Block130:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0
	push 0x2179568
	push ebp
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block135

 Block131:
	mov eax,esi
	sub eax,0x21612A9
	je Block134

 Block132:
	sub eax,3
	jne Block135

 Block133:
	mov esi,0x2179952
	jmp Block135

 Block134:
	mov esi,0x2179951

 Block135:
	cmp dword ptr [ebx+0x471C],0
	jne Block1108

 Block136:
	cmp dword ptr [ebx+0x2EC8],0
	jg Block1108

 Block137:
	mov ecx,ebx
	call CUserLocal::IsImmovable
	test eax,eax
	jne Block1108

 Block138:
	mov ecx,ebx
	call CUserLocal::IsAttract
	test eax,eax
	je Block140

 Block139:
	push esi
	call is_heros_will_skill
	add esp,4
	test eax,eax
	je Block1108

 Block140:
	cmp dword ptr [ebx+0x3AD4],0
	jne Block1108

 Block141:
	mov edi,dword ptr [ebx+0x5F8]
	push edi
	call is_vehicle
	add esp,4
	test eax,eax
	je Block168

 Block142:
	cmp esi,0x1C9C769
	jg Block222

 Block143:
	je Block221

 Block144:
	cmp esi,0x989A6C
	jg Block203

 Block145:
	je Block235

 Block146:
	cmp esi,0x4F837A
	jg Block189

 Block147:
	cmp esi,0x4F8379
	jge Block166

 Block148:
	cmp esi,0x418
	jg Block155

 Block149:
	je Block168

 Block150:
	mov eax,esi
	sub eax,0x3EC

 Block151:
	je Block235

 Block152:
	sub eax,0x16
	je Block168

 Block153:
	sub eax,0x15
	je Block217

 Block154:
	jmp Block159

 Block155:
	cmp esi,0x423D0B
	jg Block164

 Block156:
	cmp esi,0x423D0A
	jge Block166

 Block157:
	cmp esi,0x41EEEA

 Block158:
	je Block166

 Block159:
	push esi
	call is_event_vehicle_skill
	add esp,4
	test eax,eax
	je Block282

 Block160:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::IsEventVehicle
	test eax,eax
	je Block1108

 Block161:
	push esi

 Block162:
	mov ecx,ebx
	call CUserLocal::SendSkillCancelRequest

 Block163:
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	call ZRef<CField>::~ZRef<CField>
	mov eax,1
	jmp Block1111

 Block164:
	cmp esi,0x4F5C6A
	jl Block159

 Block165:
	cmp esi,0x4F5C6B
	jg Block159

 Block166:
	mov edi,dword ptr [esp+0x2C]
	mov ecx,edi
	call SecondaryStat::IsRidingSkillVehicle
	test eax,eax
	je Block1108

 Block167:
	mov ecx,edi
	call SecondaryStat::IsEventVehicle
	test eax,eax
	jne Block1108

 Block168:
	lea edi,[ebx+0x88]
	mov ecx,edi
	mov dword ptr [esp+0x24],edi
	call CAvatar::IsRidingWildHunterJaguar
	test eax,eax
	jne Block175

 Block169:
	cmp esi,0x1F93BDA
	jg Block286

 Block170:
	je Block291

 Block171:
	cmp esi,0x1F914CA
	jg Block283

 Block172:
	je Block291

 Block173:
	cmp esi,0x1F78E2A

 Block174:
	je Block291

 Block175:
	cmp dword ptr [ebx+0x5F8],0x1D7AF0
	je Block184

 Block176:
	cmp esi,0x217C05D
	jg Block298

 Block177:
	cmp esi,0x217C05C
	jge Block305

 Block178:
	cmp esi,0x217994F
	jg Block295

 Block179:
	cmp esi,0x217994B
	jge Block305

 Block180:
	cmp esi,0x21612A9
	jg Block292

 Block181:
	je Block305

 Block182:
	cmp esi,0x1C9C7AC

 Block183:
	je Block305

 Block184:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x40]
	mov ecx,ebx
	call eax
	push eax
	call is_bmage_job
	add esp,4
	test eax,eax
	je Block311

 Block185:
	push esi
	call is_bmage_aura_skill
	add esp,4
	test eax,eax
	je Block311

 Block186:
	mov ebp,dword ptr [esp+0x2C]
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_nAura_
	test eax,eax
	jle Block311

 Block187:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_rAura_
	cmp eax,esi
	jne Block311

 Block188:
	mov ecx,ebp
	call SecondaryStat::_ZtlSecureGet_rAura_
	push eax
	jmp Block162

 Block189:
	cmp esi,0x4FAA8E
	jg Block200

 Block190:
	je Block197

 Block191:
	cmp esi,0x4FA6A2
	jg Block196

 Block192:
	je Block166

 Block193:
	cmp esi,0x4F837C
	jl Block159

 Block194:
	cmp esi,0x4F837D
	jle Block166

 Block195:
	jmp Block159

 Block196:
	cmp esi,0x4FAA88
	jmp Block158

 Block197:
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call SecondaryStat::IsRidingSkillVehicle
	test eax,eax
	je Block1108

 Block198:
	mov ecx,esi
	call SecondaryStat::IsEventVehicle
	test eax,eax
	jne Block1108

 Block199:
	push 0x4FAA8E
	jmp Block162

 Block200:
	cmp esi,0x4FAA8F
	jl Block159

 Block201:
	cmp esi,0x4FAA90
	jle Block166

 Block202:
	cmp esi,0x4FAA92
	jmp Block158

 Block203:
	cmp esi,0x1313118
	jg Block212

 Block204:
	je Block168

 Block205:
	cmp esi,0xD7511E
	jg Block211

 Block206:
	je Block166

 Block207:
	mov eax,esi
	sub eax,0x989A82
	je Block168

 Block208:
	sub eax,0x15
	je Block217

 Block209:
	sub eax,1
	je Block168

 Block210:
	jmp Block159

 Block211:
	mov eax,esi
	sub eax,0x13130EC
	jmp Block151

 Block212:
	cmp esi,0x1315828
	jg Block219

 Block213:
	je Block168

 Block214:
	mov eax,esi
	sub eax,0x13157FC
	je Block235

 Block215:
	sub eax,0x16
	je Block168

 Block216:
	sub eax,0x15
	jne Block159

 Block217:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::IsEventVehicle
	test eax,eax
	jne Block168

 Block218:
	jmp Block1108

 Block219:
	cmp esi,0x14247F0
	je Block166

 Block220:
	cmp esi,0x1524D7C
	jmp Block158

 Block221:
	lea ecx,[esp+0x24]
	push 0x18AB
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0xF
	jmp Block69

 Block222:
	cmp esi,0x21612A9
	jg Block258

 Block223:
	je Block265

 Block224:
	cmp esi,0x1F78E28
	jg Block241

 Block225:
	je Block233

 Block226:
	cmp esi,0x1C9C7A6
	jg Block237

 Block227:
	cmp esi,0x1C9C7A5
	jge Block233

 Block228:
	mov eax,esi
	sub eax,0x1C9C76C
	je Block235

 Block229:
	sub eax,0x10
	je Block232

 Block230:
	sub eax,6
	je Block168

 Block231:
	jmp Block159

 Block232:
	cmp edi,0x1D7AF0
	je Block168

 Block233:
	lea ecx,[ebx+0x88]
	call CAvatar::IsRidingWildHunterJaguar
	test eax,eax
	jne Block168

 Block234:
	jmp Block1108

 Block235:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::IsRidingTamedMob
	test eax,eax
	je Block1108

 Block236:
	push esi
	mov ecx,ebx
	call CUserLocal::SendSkillCancelRequest
	push esi
	mov ecx,ebx
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2A
	push esi
	call play_skill_sound
	add esp,0xC
	jmp Block163

 Block237:
	cmp esi,0x1C9C7AC
	je Block265

 Block238:
	cmp esi,0x1C9E2BF
	jle Block159

 Block239:
	cmp esi,0x1C9E2C3
	jg Block159

 Block240:
	jmp Block168

 Block241:
	cmp esi,0x1F93BDE
	jg Block256

 Block242:
	cmp esi,0x1F93BD9
	jge Block233

 Block243:
	cmp esi,0x1F78E2B
	jg Block253

 Block244:
	cmp esi,0x1F78E2A
	jge Block233

 Block245:
	cmp esi,0x1F78E29
	jne Block159

 Block246:
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call SecondaryStat::IsRidingSkillVehicle
	test eax,eax
	je Block1108

 Block247:
	mov ecx,esi
	call SecondaryStat::IsEventVehicle
	test eax,eax
	jne Block1108

 Block248:
	lea ecx,[ebx+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block1108

 Block249:
	mov ecx,ebx
	call CUser::IsOnFoothold
	test eax,eax
	jne Block252

 Block250:
	mov ecx,ebx
	call CUser::IsOnLadderOrRope
	test eax,eax
	jne Block252

 Block251:
	mov ecx,ebx
	call CUser::IsSwimOrFly
	test eax,eax
	je Block1108

 Block252:
	push 0x1F78E29
	jmp Block162

 Block253:
	cmp esi,0x1F914C9
	jl Block159

 Block254:
	cmp esi,0x1F914CD
	jle Block233

 Block255:
	jmp Block159

 Block256:
	lea eax,[esi-0x1F962E9]
	cmp eax,8
	ja Block159

 Block257:
	movzx edx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_0]
	cmp EDX, 0
je Block233
cmp EDX, 1
je Block159


 Block258:
	cmp esi,0x217C05A
	jg Block276

 Block259:
	cmp esi,0x217C059
	jge Block265

 Block260:
	cmp esi,0x2179949
	jg Block274

 Block261:
	je Block265

 Block262:
	cmp esi,0x21612AA
	je Block267

 Block263:
	jle Block159

 Block264:
	cmp esi,0x21612AC
	jg Block159

 Block265:
	cmp edi,0x1D7AF0
	je Block168

 Block266:
	jmp Block1108

 Block267:
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call SecondaryStat::IsRidingSkillVehicle
	test eax,eax
	je Block1108

 Block268:
	mov ecx,esi
	call SecondaryStat::IsEventVehicle
	test eax,eax
	jne Block1108

 Block269:
	lea ecx,[ebx+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block1108

 Block270:
	mov ecx,ebx
	call CUser::IsOnFoothold
	test eax,eax
	jne Block273

 Block271:
	mov ecx,ebx
	call CUser::IsOnLadderOrRope
	test eax,eax
	jne Block273

 Block272:
	mov ecx,ebx
	call CUser::IsSwimOrFly
	test eax,eax
	je Block1108

 Block273:
	push 0x21612AA
	mov ecx,ebx
	call CUserLocal::SendSkillCancelRequest
	push 0
	push 0x36
	push 0x21612AA
	call play_skill_sound
	add esp,0xC
	jmp Block163

 Block274:
	lea eax,[esi-0x217994B]
	cmp eax,7
	ja Block159

 Block275:
	movzx eax,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_1]
	cmp EAX, 0
je Block265
cmp EAX, 1
je Block166
cmp EAX, 2
je Block159


 Block276:
	cmp esi,0x217C067
	jg Block280

 Block277:
	je Block265

 Block278:
	lea eax,[esi-0x217C05C]
	cmp eax,9
	ja Block159

 Block279:
	movzx ecx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_2]
	cmp ECX, 0
je Block265
cmp ECX, 1
je Block159


 Block280:
	lea eax,[esi-0x217E76B]
	cmp eax,9
	ja Block159

 Block281:
	movzx edx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_3]
	cmp EDX, 0
je Block265
cmp EDX, 1
je Block159


 Block282:
	push 0
	mov ecx,ebx
	call CUserLocal::CheckRidingVehicle
	jmp Block1108

 Block283:
	cmp esi,0x1F914CC
	jl Block175

 Block284:
	cmp esi,0x1F914CD
	jle Block291

 Block285:
	jmp Block175

 Block286:
	cmp esi,0x1F962EA
	jg Block289

 Block287:
	je Block291

 Block288:
	cmp esi,0x1F93BDE
	jmp Block174

 Block289:
	cmp esi,0x1F962ED
	jl Block175

 Block290:
	cmp esi,0x1F962EE
	jg Block175

 Block291:
	lea eax,[esp+0x24]
	push 0x18CE
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0x10
	jmp Block69

 Block292:
	cmp esi,0x21612AB
	jl Block184

 Block293:
	cmp esi,0x21612AC
	jle Block305

 Block294:
	jmp Block184

 Block295:
	cmp esi,0x2179951
	jl Block184

 Block296:
	cmp esi,0x2179952
	jle Block305

 Block297:
	cmp esi,0x217C05A
	jmp Block183

 Block298:
	cmp esi,0x217E76B
	jg Block302

 Block299:
	je Block305

 Block300:
	mov eax,esi
	sub eax,0x217C063
	je Block305

 Block301:
	sub eax,4
	jmp Block183

 Block302:
	cmp esi,0x217E76D
	je Block305

 Block303:
	cmp esi,0x217E770
	jle Block184

 Block304:
	cmp esi,0x217E772
	jg Block184

 Block305:
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x21612AA
	push ebp
	mov dword ptr [esp+0x30],0
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	jle Block310

 Block306:
	mov eax,dword ptr [ebx+0x58C]
	push eax
	call get_weapon_type
	add esp,4
	cmp eax,0x31
	jne Block310

 Block307:
	cmp esi,0x1C9C7AC
	je Block310

 Block308:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::_ZtlSecureGet_nMorph_
	test eax,eax
	jne Block1108

 Block309:
	mov edx,dword ptr [esp+0x24]
	push 1
	push edi
	push edx
	mov ecx,ebx
	call CUserLocal::DoActiveSkill_StatChange
	push 0
	push 0x2A
	push 0x21612AA
	call play_skill_sound
	add esp,0xC
	jmp Block1108

 Block310:
	lea eax,[esp+0x38]
	push 0x1894
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x11
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x40]
	jmp Block70

 Block311:
	cmp esi,0x1F914CD
	jne Block314

 Block312:
	cmp dword ptr [ebx+0x47F0],0
	je Block314

 Block313:
	mov esi,0x1F914CF

 Block314:
	mov ecx,edi
	call CAvatar::IsSuperMan
	test eax,eax
	je Block341

 Block315:
	cmp esi,0x13130EC
	jg Block329

 Block316:
	je Block1107

 Block317:
	cmp esi,0x4DD5CF
	jg Block324

 Block318:
	je Block1107

 Block319:
	cmp esi,0x3FC
	jg Block323

 Block320:
	je Block1107

 Block321:
	mov eax,esi
	sub eax,0x3EC
	je Block1107

 Block322:
	sub eax,5
	jmp Block339

 Block323:
	cmp esi,0x4C4F2B
	jmp Block339

 Block324:
	cmp esi,0x989A71
	jg Block328

 Block325:
	je Block1107

 Block326:
	cmp esi,0x4F7F90
	je Block1107

 Block327:
	cmp esi,0x989A6C
	jmp Block339

 Block328:
	cmp esi,0x989A7C
	jmp Block339

 Block329:
	cmp esi,0x131580C
	jg Block335

 Block330:
	je Block1107

 Block331:
	cmp esi,0x13157FC
	jg Block334

 Block332:
	je Block1107

 Block333:
	mov eax,esi
	sub eax,0x13130F1
	jmp Block337

 Block334:
	cmp esi,0x1315801
	jmp Block339

 Block335:
	mov eax,esi
	sub eax,0x1C9C76C
	je Block1107

 Block336:
	sub eax,5

 Block337:
	je Block1107

 Block338:
	sub eax,0xB

 Block339:
	je Block1107

 Block340:
	push esi
	call is_event_vehicle_skill
	add esp,4
	test eax,eax
	jne Block1107

 Block341:
	mov ecx,edi
	call CAvatar::IsAttackableMorphed
	test eax,eax
	je Block353

 Block342:
	cmp esi,0x131312B
	jg Block348

 Block343:
	cmp esi,0x131312A
	jge Block353

 Block344:
	cmp esi,0x989AAB
	jg Block1107

 Block345:
	cmp esi,0x989AAA
	jge Block353

 Block346:
	cmp esi,0x42A
	jl Block1107

 Block347:
	cmp esi,0x42B
	jmp Block352

 Block348:
	cmp esi,0x1C9C7AB
	jg Block1107

 Block349:
	cmp esi,0x1C9C7AA
	jge Block353

 Block350:
	cmp esi,0x131583A
	jl Block1107

 Block351:
	cmp esi,0x131583B

 Block352:
	jg Block1107

 Block353:
	cmp dword ptr [ebx+0x5E4],0
	jne Block1107

 Block354:
	mov ecx,edi
	call CAvatar::IsMonsterMorphed
	test eax,eax
	jne Block1107

 Block355:
	mov ecx,edi
	call CAvatar::IsHideMorphed
	test eax,eax
	jne Block1107

 Block356:
	cmp dword ptr [ebx+0x2ECC],eax
	jg Block1107

 Block357:
	mov ebp,dword ptr [esp+0x28]
	mov ecx,ebp
	call CWvsContext::IsUnderCover
	test eax,eax
	jne Block360

 Block358:
	cmp esi,0x234359
	je Block360

 Block359:
	mov ecx,ebx
	call CUserLocal::IsSealed
	test eax,eax
	jne Block1108

 Block360:
	push 0
	push 0xC8
	mov ecx,ebp
	call CWvsContext::CanSendExclRequest
	test eax,eax
	je Block1108

 Block361:
	mov edi,ebx
	mov eax,dword ptr [edi+0x58C]
	push eax
	call get_weapon_type
	mov dword ptr [esp+0x2C],eax
	mov eax,dword ptr [edi+0x590]
	push eax
	call get_weapon_type
	mov edx,dword ptr [esp+0x34]
	add esp,8
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov ebx,eax
	xor eax,eax
	push esi
	mov dword ptr [esp+0x24],eax
	mov dword ptr [esp+0x48],eax
	mov eax,dword ptr [esp+0x40]
	push edx
	push eax
	call CSkillInfo::GetSkillLevel_1
	cmp esi,0x2179951
	mov dword ptr [esp+0x20],eax
	jg Block376

 Block362:
	je Block375

 Block363:
	cmp esi,0x141F5E1
	jg Block372

 Block364:
	je Block369

 Block365:
	cmp esi,0x1406F42
	jne Block386

 Block366:
	mov ecx,dword ptr [esp+0x38]
	push 0
	push 0x1424402
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	je Block368

 Block367:
	mov eax,dword ptr [esp+0x38]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x40]
	push edx
	push 0x1424409
	push eax
	call CSkillInfo::GetSkillLevel_0
	jmp Block383

 Block368:
	mov ecx,dword ptr [esp+0x38]
	push 0
	push 0x1421CF2
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x40]
	push edx
	mov edi,eax
	mov eax,dword ptr [esp+0x3C]
	push 0x1421CF7
	push eax
	call CSkillInfo::GetSkillLevel_0
	jmp Block383

 Block369:
	mov ecx,dword ptr [esp+0x38]
	push 0
	push 0x1424402
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	je Block371

 Block370:
	mov eax,dword ptr [esp+0x38]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x40]
	push edx
	push 0x142440A
	push eax
	call CSkillInfo::GetSkillLevel_0
	jmp Block383

 Block371:
	mov ecx,dword ptr [esp+0x38]
	push 0
	push 0x1421CF2
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[esp+0x40]
	push edx
	mov edi,eax
	mov eax,dword ptr [esp+0x3C]
	push 0x1421CF8
	push eax
	call CSkillInfo::GetSkillLevel_0
	jmp Block383

 Block372:
	cmp esi,0x1E84BEF
	jl Block386

 Block373:
	cmp esi,0x1E84BF3
	jg Block386

 Block374:
	push 0
	push 0x1E84BE9
	jmp Block381

 Block375:
	mov edx,dword ptr [esp+0x38]
	push 0
	push 0x21612A9
	push edx
	jmp Block382

 Block376:
	cmp esi,0x2179952
	je Block380

 Block377:
	cmp esi,0x217C060
	jle Block386

 Block378:
	cmp esi,0x217C062
	jg Block386

 Block379:
	mov eax,dword ptr [esp+0x38]
	push 0
	push 0x217C059
	push eax
	jmp Block382

 Block380:
	push 0
	push 0x21612AC

 Block381:
	mov ecx,dword ptr [esp+0x40]
	push ecx

 Block382:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax

 Block383:
	test edi,edi
	je Block386

 Block384:
	mov eax,dword ptr [esp+0x40]
	mov dword ptr [esp+0x20],edi
	test eax,eax
	je Block386

 Block385:
	mov dword ptr [esp+0x1C],eax

 Block386:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	jle Block1108

 Block387:
	mov ecx,dword ptr [esp+0x1C]
	push eax
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	mov dword ptr [esp+0x4C],eax
	call SKILLLEVELDATA::_ZtlSecureGet_nCooltime
	test eax,eax
	je Block390

 Block388:
	push esi
	mov ecx,ebp
	call CWvsContext::IsExistSkillCooltimeOver
	test eax,eax
	je Block390

 Block389:
	lea edx,[esp+0x24]
	push 0xE35
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0x12
	jmp Block69

 Block390:
	mov ebp,dword ptr [esp+0x38]
	mov ecx,ebp
	call GW_CharacterStat::_ZtlSecureGet_nHP
	mov ecx,ebp
	mov dword ptr [esp+0x64],eax
	call GW_CharacterStat::_ZtlSecureGet_nMP
	mov ecx,dword ptr [esp+0x18]
	push 0
	push 0
	push esi
	mov dword ptr [esp+0x60],eax
	mov eax,dword ptr [esp+0x38]
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push ebp
	call CSkillInfo::CheckConsumeForActiveSkill
	mov edi,eax
	mov eax,dword ptr [esp+0xB0]
	test eax,eax
	je Block392

 Block391:
	mov dword ptr [eax],edi

 Block392:
	test edi,edi
	je Block1108

 Block393:
	cmp edi,1
	je Block411

 Block394:
	mov ebp,dword ptr [ZImports::_timeGetTime]
	call ebp
	mov edx,dword ptr [esp+0x14]
	sub eax,dword ptr [edx+0x4660]
	cmp eax,0x7D0
	jbe Block1108

 Block395:
	mov eax,0x431BDE83
	imul edi
	sar edx,0x12
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	jne Block402

 Block396:
	sub edi,2
	je Block401

 Block397:
	sub edi,1
	je Block400

 Block398:
	sub edi,1
	jne Block410

 Block399:
	lea ecx,[esp+0x24]
	push 0xB46
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x15
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x2C]
	jmp Block408

 Block400:
	lea edx,[esp+0x2C]
	push 0xB45
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0x14
	jmp Block407

 Block401:
	lea eax,[esp+0x38]
	push 0xB44
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x13
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x40]
	jmp Block408

 Block402:
	mov dword ptr [esp+0x2C],0
	push edi
	lea ecx,[esp+0x3C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov byte ptr [esp+0xA8],0x16
	call CItemInfo::GetItemName
	mov esi,eax
	lea edx,[esp+0x24]
	push 0xB47
	mov bl,0x17
	push edx
	mov byte ptr [esp+0xA8],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x34]
	push edx
	mov byte ptr [esp+0xAC],0x18
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0xC
	mov byte ptr [esp+0xA0],bl
	test eax,eax
	je Block404

 Block403:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block404:
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0xA0],0x16
	test eax,eax
	je Block406

 Block405:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block406:
	lea eax,[esp+0x2C]

 Block407:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x34]

 Block408:
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block410

 Block409:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block410:
	call ebp
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr [ecx+0x4660],eax
	jmp Block1108

 Block411:
	mov edi,dword ptr [esp+0x14]
	mov ecx,edi
	call CUserLocal::IsDashing
	test eax,eax
	je Block413

 Block412:
	mov ecx,edi
	call CUser::GetDashingSkill
	push eax
	mov ecx,edi
	call CUserLocal::SendSkillCancelRequest

 Block413:
	xor edi,edi
	push esi
	mov dword ptr [esp+0x1C],edi
	call is_heros_will_skill
	add esp,4
	test eax,eax
	je Block416

 Block414:
	mov edx,dword ptr [esp+0x28]
	mov edi,dword ptr [esp+0x1C]
	push ebx
	push edx
	mov ecx,edi
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	je Block1082

 Block415:
	mov eax,dword ptr [esp+0x20]
	mov ebx,dword ptr [esp+0x14]
	push 1
	push eax
	push edi
	mov ecx,ebx
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1081

 Block416:
	cmp esi,0x1F40
	mov ecx,0x26
	jg Block420

 Block417:
	je Block1032

 Block418:
	lea eax,[esi-0x3E8]
	cmp eax,0x43
	ja Block438

 Block419:
	movzx ecx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_4]
	cmp ECX, 0
je Block916
cmp ECX, 1
je Block1032
cmp ECX, 2
je Block962
cmp ECX, 3
je Block929
cmp ECX, 4
je Block960
cmp ECX, 5
je Block965
cmp ECX, 6
je Block963
cmp ECX, 7
je Block444
cmp ECX, 8
je Block964
cmp ECX, 9
je Block825
cmp ECX, 10
je Block827
cmp ECX, 11
je Block511
cmp ECX, 12
je Block438


 Block420:
	cmp esi,0x989A68
	jg Block713

 Block421:
	je Block916

 Block422:
	cmp esi,0x2F9F68
	jg Block576

 Block423:
	je Block695

 Block424:
	cmp esi,0x20361A
	jg Block519

 Block425:
	je Block886

 Block426:
	cmp esi,0x127A7A
	jg Block473

 Block427:
	je Block483

 Block428:
	cmp esi,0x10F3DA
	jg Block449

 Block429:
	je Block1032

 Block430:
	cmp esi,0x10CCCC
	jg Block445

 Block431:
	je Block736

 Block432:
	cmp esi,0xF462B
	jg Block442

 Block433:
	je Block1032

 Block434:
	cmp esi,0x1F41
	je Block845

 Block435:
	jle Block438

 Block436:
	cmp esi,0x1F43

 Block437:
	jle Block695

 Block438:
	push esi
	call is_event_vehicle_skill
	add esp,4
	test eax,eax
	je Block1082

 Block439:
	mov ecx,dword ptr [esp+0x28]
	push 0xFFFFFFFF
	push ecx
	mov ecx,dword ptr [esp+0x24]
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	je Block1023

 Block440:
	mov ecx,dword ptr [esp+0x24]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block1082

 Block441:
	jmp Block1032

 Block442:
	cmp esi,0xF462C
	jl Block438

 Block443:
	cmp esi,0xF462D
	jg Block438

 Block444:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_MeleeAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block445:
	mov eax,esi
	sub eax,0x10CCCE
	je Block695

 Block446:
	sub eax,1
	je Block1032

 Block447:
	sub eax,1
	je Block444

 Block448:
	jmp Block438

 Block449:
	cmp esi,0x111AE8
	jg Block459

 Block450:
	je Block695

 Block451:
	lea eax,[esi-0x10F3DB]
	cmp eax,7
	ja Block438

 Block452:
	cmp EAX, 0
je Block453
cmp EAX, 1
je Block438
cmp EAX, 2
je Block453
cmp EAX, 3
je Block438
cmp EAX, 4
je Block472
cmp EAX, 5
je Block444
cmp EAX, 6
je Block438
cmp EAX, 7
je Block444


 Block453:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x1E
	je Block458

 Block454:
	cmp eax,0x28
	je Block458

 Block455:
	cmp eax,0x1F
	je Block458

 Block456:
	cmp eax,0x29

 Block457:
	jne Block1023

 Block458:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_MeleeAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block459:
	cmp esi,0x12536C
	jg Block471

 Block460:
	je Block468

 Block461:
	lea eax,[esi-0x111AE9]
	cmp eax,9
	ja Block438

 Block462:
	movzx ecx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_5]
	cmp ECX, 0
je Block444
cmp ECX, 1
je Block1032
cmp ECX, 2
je Block463
cmp ECX, 3
je Block438


 Block463:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x1E
	je Block467

 Block464:
	cmp eax,0x28
	je Block467

 Block465:
	cmp eax,0x1F
	je Block467

 Block466:
	cmp eax,0x29
	jne Block1023

 Block467:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_MeleeAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block468:
	push 0x2A
	push 0x20

 Block469:
	push 0x28
	push 0x1E

 Block470:
	mov ecx,dword ptr [esp+0x30]
	mov edx,dword ptr [esp+0x2C]
	push ecx
	mov ecx,dword ptr [esp+0x28]
	push edx
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block471:
	mov eax,esi
	sub eax,0x12536E
	jne Block446

 Block472:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push 4
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push edx
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block473:
	cmp esi,0x12A188
	jg Block479

 Block474:
	je Block695

 Block475:
	lea eax,[esi-0x127A7C]
	cmp eax,7
	ja Block438

 Block476:
	cmp EAX, 0
je Block488
cmp EAX, 1
je Block438
cmp EAX, 2
je Block488
cmp EAX, 3
je Block438
cmp EAX, 4
je Block488
cmp EAX, 5
je Block472
cmp EAX, 6
je Block477
cmp EAX, 7
je Block1071


 Block477:
	mov eax,dword ptr [esp+0x28]
	mov edi,dword ptr [esp+0x1C]
	push ebx
	push eax
	mov ecx,edi
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	je Block1023

 Block478:
	mov ecx,dword ptr [esp+0x20]
	push 1
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push edi
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block479:
	cmp esi,0x13DA0C
	jg Block494

 Block480:
	je Block493

 Block481:
	lea eax,[esi-0x12A18A]
	cmp eax,9
	ja Block438

 Block482:
	movzx edx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_6]
	cmp EDX, 0
je Block1032
cmp EDX, 1
je Block488
cmp EDX, 2
je Block483
cmp EDX, 3
je Block444
cmp EDX, 4
je Block438


 Block483:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x1E
	je Block487

 Block484:
	cmp eax,0x28
	je Block487

 Block485:
	cmp eax,0x20
	je Block487

 Block486:
	cmp eax,0x2A
	jne Block1023

 Block487:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_MeleeAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block488:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x1E
	je Block492

 Block489:
	cmp eax,0x28
	je Block492

 Block490:
	cmp eax,0x20
	je Block492

 Block491:
	cmp eax,0x2A
	jne Block1023

 Block492:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push 1
	push edx
	push eax
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block493:
	push 0x2C
	push 0x2C
	push 0x2B
	push 0x2B
	jmp Block470

 Block494:
	cmp esi,0x142828
	jg Block504

 Block495:
	je Block695

 Block496:
	cmp esi,0x140119
	jg Block502

 Block497:
	je Block444

 Block498:
	cmp esi,0x13DA0E
	jl Block438

 Block499:
	cmp esi,0x13DA0F
	jle Block695

 Block500:
	cmp esi,0x13DA10
	je Block444

 Block501:
	jmp Block438

 Block502:
	lea eax,[esi-0x14011B]
	cmp eax,5
	ja Block438

 Block503:
	cmp EAX, 0
je Block508
cmp EAX, 1
je Block438
cmp EAX, 2
je Block508
cmp EAX, 3
je Block508
cmp EAX, 4
je Block472
cmp EAX, 5
je Block1032


 Block504:
	cmp esi,0x1E886B
	jg Block512

 Block505:
	cmp esi,0x1E886A
	jge Block1032

 Block506:
	lea eax,[esi-0x142829]
	cmp eax,6
	ja Block438

 Block507:
	cmp EAX, 0
je Block444
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block508
cmp EAX, 3
je Block438
cmp EAX, 4
je Block438
cmp EAX, 5
je Block438
cmp EAX, 6
je Block573


 Block508:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x2C
	je Block511

 Block509:
	cmp eax,0x2B

 Block510:
	jne Block1023

 Block511:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_MeleeAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block512:
	cmp esi,0x200F09
	jg Block517

 Block513:
	je Block695

 Block514:
	cmp esi,0x1E886C
	jl Block438

 Block515:
	cmp esi,0x1E886D
	jg Block438

 Block516:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_MagicAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block517:
	lea eax,[esi-0x200F0A]
	cmp eax,3
	ja Block438

 Block518:
	cmp EAX, 0
je Block709
cmp EAX, 1
je Block472
cmp EAX, 2
je Block516
cmp EAX, 3
je Block516


 Block519:
	cmp esi,0x205D28
	jg Block524

 Block520:
	je Block695

 Block521:
	lea eax,[esi-0x20361B]
	cmp eax,5
	ja Block438

 Block522:
	cmp EAX, 0
je Block516
cmp EAX, 1
je Block472
cmp EAX, 2
je Block523
cmp EAX, 3
je Block516
cmp EAX, 4
je Block1032
cmp EAX, 5
je Block887


 Block523:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push 0
	push 0
	push 0x25
	push 0x26
	push edx
	push eax
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block524:
	cmp esi,0x2195A9
	jg Block528

 Block525:
	je Block695

 Block526:
	lea eax,[esi-0x205D29]
	cmp eax,6
	ja Block438

 Block527:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block516
cmp EAX, 3
je Block1032
cmp EAX, 4
je Block573
cmp EAX, 5
je Block516
cmp EAX, 6
je Block516


 Block528:
	cmp esi,0x234359
	jg Block548

 Block529:
	je Block546

 Block530:
	cmp esi,0x21E3C8
	jg Block539

 Block531:
	je Block695

 Block532:
	cmp esi,0x21BCBB
	jg Block536

 Block533:
	cmp esi,0x21BCBA
	jge Block516

 Block534:
	lea eax,[esi-0x2195AA]
	cmp eax,3
	ja Block438

 Block535:
	cmp EAX, 0
je Block709
cmp EAX, 1
je Block472
cmp EAX, 2
je Block516
cmp EAX, 3
je Block516


 Block536:
	lea eax,[esi-0x21BCBC]
	cmp eax,4
	ja Block438

 Block537:
	cmp EAX, 0
je Block472
cmp EAX, 1
je Block538
cmp EAX, 2
je Block516
cmp EAX, 3
je Block1032
cmp EAX, 4
je Block887


 Block538:
	push 0
	push 0
	push 0x25
	push 0x26
	jmp Block470

 Block539:
	cmp esi,0x231C49
	jg Block543

 Block540:
	je Block709

 Block541:
	lea eax,[esi-0x21E3C9]
	cmp eax,6
	ja Block438

 Block542:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block516
cmp EAX, 3
je Block1032
cmp EAX, 4
je Block573
cmp EAX, 5
je Block516
cmp EAX, 6
je Block516


 Block543:
	lea eax,[esi-0x231C4A]
	cmp eax,3
	ja Block438

 Block544:
	cmp EAX, 0
je Block545
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block695
cmp EAX, 3
je Block516


 Block545:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_Heal
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block546:
	push 6

 Block547:
	mov edx,dword ptr [esp+0x24]
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x18]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block548:
	cmp esi,0x236A68
	jg Block552

 Block549:
	je Block695

 Block550:
	lea eax,[esi-0x23435A]
	cmp eax,5
	ja Block438

 Block551:
	cmp EAX, 0
je Block845
cmp EAX, 1
je Block695
cmp EAX, 2
je Block516
cmp EAX, 3
je Block472
cmp EAX, 4
je Block573
cmp EAX, 5
je Block1032


 Block552:
	cmp esi,0x2DCAAB
	jg Block556

 Block553:
	je Block1032

 Block554:
	lea eax,[esi-0x236A69]
	cmp eax,7
	ja Block438

 Block555:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block573
cmp EAX, 3
je Block1032
cmp EAX, 4
je Block695
cmp EAX, 5
je Block695
cmp EAX, 6
je Block516
cmp EAX, 7
je Block516


 Block556:
	cmp esi,0x2F785A
	jg Block568

 Block557:
	je Block573

 Block558:
	cmp esi,0x2F514A
	jg Block564

 Block559:
	je Block563

 Block560:
	cmp esi,0x2DCAAC
	jl Block438

 Block561:
	cmp esi,0x2DCAAD
	jg Block438

 Block562:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_ShootAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block563:
	push 0
	push 0
	push 0
	push 0x2D
	jmp Block470

 Block564:
	mov eax,esi
	sub eax,0x2F514B
	je Block562

 Block565:
	sub eax,1
	je Block768

 Block566:
	sub eax,1
	je Block562

 Block567:
	jmp Block438

 Block568:
	cmp esi,0x2F785E
	jg Block574

 Block569:
	je Block562

 Block570:
	cmp esi,0x2F785B
	jl Block438

 Block571:
	cmp esi,0x2F785C
	jle Block562

 Block572:
	cmp esi,0x2F785D
	jne Block438

 Block573:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_Summon
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block574:
	cmp esi,0x2F9B8A
	je Block444

 Block575:
	jmp Block438

 Block576:
	cmp esi,0x30D7EA
	jg Block581

 Block577:
	je Block580

 Block578:
	lea eax,[esi-0x2F9F6A]
	cmp eax,6
	ja Block438

 Block579:
	cmp EAX, 0
je Block695
cmp EAX, 1
je Block562
cmp EAX, 2
je Block886
cmp EAX, 3
je Block438
cmp EAX, 4
je Block573
cmp EAX, 5
je Block1032
cmp EAX, 6
je Block1032


 Block580:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push 0
	push 0
	push 0
	push 0x2E
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block581:
	cmp esi,0x41EEE8
	jg Block644

 Block582:
	je Block1032

 Block583:
	cmp esi,0x3EE1A8
	jg Block613

 Block584:
	je Block695

 Block585:
	cmp esi,0x3D0CEA
	jg Block599

 Block586:
	je Block444

 Block587:
	cmp esi,0x312608
	jg Block597

 Block588:
	je Block695

 Block589:
	cmp esi,0x30FEFA
	jg Block595

 Block590:
	je Block573

 Block591:
	mov eax,esi
	sub eax,0x30D7EB
	je Block562

 Block592:
	sub eax,1
	je Block1030

 Block593:
	sub eax,1
	je Block562

 Block594:
	jmp Block438

 Block595:
	lea eax,[esi-0x30FEFB]
	cmp eax,3
	ja Block438

 Block596:
	cmp EAX, 0
je Block562
cmp EAX, 1
je Block562
cmp EAX, 2
je Block573
cmp EAX, 3
je Block562


 Block597:
	lea eax,[esi-0x312609]
	cmp eax,6
	ja Block438

 Block598:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block695
cmp EAX, 2
je Block562
cmp EAX, 3
je Block438
cmp EAX, 4
je Block573
cmp EAX, 5
je Block1032
cmp EAX, 6
je Block562


 Block599:
	cmp esi,0x3EB6B0
	jg Block611

 Block600:
	je Block1032

 Block601:
	cmp esi,0x3E938B
	jg Block608

 Block602:
	je Block607

 Block603:
	mov eax,esi
	sub eax,0x3D0CEB
	je Block1032

 Block604:
	sub eax,0x14B
	je Block444

 Block605:
	sub eax,0xA
	je Block562

 Block606:
	jmp Block438

 Block607:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push 0
	push 0
	push 0
	push 0x2F
	push edx
	push eax
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block608:
	mov eax,esi
	sub eax,0x3E938C
	je Block695

 Block609:
	sub eax,1
	je Block562

 Block610:
	jmp Block438

 Block611:
	lea eax,[esi-0x3EBA99]
	cmp eax,6
	ja Block438

 Block612:
	cmp EAX, 0
je Block695
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block472
cmp EAX, 3
je Block562
cmp EAX, 4
je Block562
cmp EAX, 5
je Block653
cmp EAX, 6
je Block573


 Block613:
	cmp esi,0x401A2A
	jg Block620

 Block614:
	je Block619

 Block615:
	lea eax,[esi-0x3EE1AB]
	cmp eax,5
	ja Block438

 Block616:
	cmp EAX, 0
je Block562
cmp EAX, 1
je Block472
cmp EAX, 2
je Block438
cmp EAX, 3
je Block617
cmp EAX, 4
je Block562
cmp EAX, 5
je Block444


 Block617:
	cmp dword ptr [esp+0x28],0x2F
	jne Block1023

 Block618:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push 1
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push edx
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block619:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push 0
	push 0
	push 0
	push 0x21
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block620:
	cmp esi,0x406848
	jg Block631

 Block621:
	je Block695

 Block622:
	cmp esi,0x404139
	jg Block628

 Block623:
	je Block886

 Block624:
	cmp esi,0x401A2B
	je Block695

 Block625:
	jle Block438

 Block626:
	cmp esi,0x401A2D
	jle Block444

 Block627:
	jmp Block438

 Block628:
	lea eax,[esi-0x40413A]
	cmp eax,7
	ja Block438

 Block629:
	cmp EAX, 0
je Block444
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block444
cmp EAX, 3
je Block1032
cmp EAX, 4
je Block630
cmp EAX, 5
je Block573
cmp EAX, 6
je Block1032
cmp EAX, 7
je Block653


 Block630:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_MesoExplosion
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block631:
	cmp esi,0x41A0C9
	jg Block636

 Block632:
	je Block444

 Block633:
	lea eax,[esi-0x406849]
	cmp eax,6
	ja Block438

 Block634:
	cmp EAX, 0
je Block444
cmp EAX, 1
je Block438
cmp EAX, 2
je Block562
cmp EAX, 3
je Block472
cmp EAX, 4
je Block438
cmp EAX, 5
je Block635
cmp EAX, 6
je Block444


 Block635:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_SmokeShell
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block636:
	cmp esi,0x41C7DA
	jg Block642

 Block637:
	je Block444

 Block638:
	cmp esi,0x41A0CA
	je Block641

 Block639:
	cmp esi,0x41C7D9
	je Block1032

 Block640:
	jmp Block438

 Block641:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push 0
	push 0
	push 0x22
	push 0x21
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block642:
	cmp esi,0x41C7DB
	jne Block438

 Block643:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_MeleeAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block644:
	cmp esi,0x4E23E8
	jg Block677

 Block645:
	je Block695

 Block646:
	cmp esi,0x423D08
	jg Block657

 Block647:
	je Block695

 Block648:
	cmp esi,0x4215F8
	jg Block655

 Block649:
	je Block643

 Block650:
	mov eax,esi
	sub eax,0x41EEE9
	je Block643

 Block651:
	sub eax,1
	je Block654

 Block652:
	sub eax,1
	jne Block438

 Block653:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_BoundJump
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block654:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_NotPrepare_Bomb
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block655:
	lea eax,[esi-0x4215FA]
	cmp eax,3
	ja Block438

 Block656:
	cmp EAX, 0
je Block1032
cmp EAX, 1
je Block643
cmp EAX, 2
je Block444
cmp EAX, 3
je Block643


 Block657:
	cmp esi,0x4C4F2A
	jg Block666

 Block658:
	cmp esi,0x4C4F29
	jge Block444

 Block659:
	lea eax,[esi-0x423D0A]
	cmp eax,5
	ja Block438

 Block660:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block886
cmp EAX, 2
je Block444
cmp EAX, 3
je Block665
cmp EAX, 4
je Block661
cmp EAX, 5
je Block695


 Block661:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::_ZtlSecureGet_nShadowPartner_
	test eax,eax
	jne Block664

 Block662:
	lea eax,[esp+0x80]
	push 0x16E8
	push eax
	mov dword ptr [esp+0x20],edi
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x23
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x88]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1082

 Block663:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1082

 Block664:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_Summon
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block665:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_HookAndHit
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block666:
	cmp esi,0x4DD5CB
	jg Block671

 Block667:
	cmp esi,0x4DD5CA
	jge Block444

 Block668:
	mov eax,esi
	sub eax,0x4C4F2B
	je Block562

 Block669:
	sub eax,2
	je Block1032

 Block670:
	jmp Block438

 Block671:
	cmp esi,0x4DFCDA
	jg Block675

 Block672:
	je Block444

 Block673:
	lea eax,[esi-0x4DD5CC]
	cmp eax,3
	ja Block438

 Block674:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block1032
cmp EAX, 2
je Block802
cmp EAX, 3
je Block1032


 Block675:
	lea eax,[esi-0x4DFCDC]
	cmp eax,3
	ja Block438

 Block676:
	cmp EAX, 0
je Block444
cmp EAX, 1
je Block812
cmp EAX, 2
je Block444
cmp EAX, 3
je Block1046


 Block677:
	cmp esi,0x4F5C69
	jg Block681

 Block678:
	je Block562

 Block679:
	lea eax,[esi-0x4E23E9]
	cmp eax,9
	ja Block438

 Block680:
	movzx edx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_7]
	cmp EDX, 0
je Block444
cmp EDX, 1
je Block562
cmp EDX, 2
je Block812
cmp EDX, 3
je Block695
cmp EDX, 4
je Block438


 Block681:
	cmp esi,0x4F7F90
	jg Block687

 Block682:
	je Block562

 Block683:
	lea eax,[esi-0x4F5C6A]
	cmp eax,4
	ja Block438

 Block684:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block685
cmp EAX, 2
je Block444
cmp EAX, 3
je Block686
cmp EAX, 4
je Block562


 Block685:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push 0
	push 0
	push 0
	push 0x31
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block686:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::TryDoingWings
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block687:
	cmp esi,0x4FAA8B
	jg Block696

 Block688:
	je Block444

 Block689:
	cmp esi,0x4FA6A2
	jg Block693

 Block690:
	je Block573

 Block691:
	lea eax,[esi-0x4F8379]
	cmp eax,6
	ja Block438

 Block692:
	cmp EAX, 0
je Block573
cmp EAX, 1
je Block573
cmp EAX, 2
je Block438
cmp EAX, 3
je Block562
cmp EAX, 4
je Block562
cmp EAX, 5
je Block562
cmp EAX, 6
je Block1046


 Block693:
	cmp esi,0x4FA6AB
	je Block562

 Block694:
	cmp esi,0x4FAA88
	jne Block438

 Block695:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push 2
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push edx
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block696:
	cmp esi,0x7A15E8
	jg Block701

 Block697:
	je Block710

 Block698:
	lea eax,[esi-0x4FAA8C]
	cmp eax,5
	ja Block438

 Block699:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block438
cmp EAX, 2
je Block1032
cmp EAX, 3
je Block700
cmp EAX, 4
je Block700
cmp EAX, 5
je Block562


 Block700:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_VehicleShootAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block701:
	cmp esi,0x895831
	jg Block711

 Block702:
	je Block710

 Block703:
	cmp esi,0x895829
	jg Block708

 Block704:
	je Block444

 Block705:
	cmp esi,0x7A15E9
	je Block709

 Block706:
	cmp esi,0x895828
	je Block1032

 Block707:
	jmp Block438

 Block708:
	cmp esi,0x89582A
	jne Block438

 Block709:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push 0
	push 0
	push 0
	push ecx
	mov ecx,dword ptr [esp+0x24]
	push edx
	call CUserLocal::TryRegisterTeleport
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block710:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoAntiMacroSkill
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block711:
	lea eax,[esi-0x8ADEC8]
	cmp eax,8
	ja Block438

 Block712:
	movzx edx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_8]
	cmp EDX, 0
je Block960
cmp EDX, 1
je Block1032
cmp EDX, 2
je Block438


 Block713:
	cmp esi,0x98B5C0
	jg Block717

 Block714:
	je Block1032

 Block715:
	lea eax,[esi-0x989A69]
	cmp eax,0x42
	ja Block438

 Block716:
	movzx eax,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_9]
	cmp EAX, 0
je Block1032
cmp EAX, 1
je Block962
cmp EAX, 2
je Block929
cmp EAX, 3
je Block960
cmp EAX, 4
je Block965
cmp EAX, 5
je Block963
cmp EAX, 6
je Block444
cmp EAX, 7
je Block964
cmp EAX, 8
je Block825
cmp EAX, 9
je Block827
cmp EAX, 10
je Block511
cmp EAX, 11
je Block438


 Block717:
	cmp esi,0x1424405
	jg Block864

 Block718:
	je Block847

 Block719:
	cmp esi,0xE4E5AA
	jg Block791

 Block720:
	cmp esi,0xE4E5A9
	jge Block444

 Block721:
	cmp esi,0xB8CC9A
	jg Block755

 Block722:
	je Block472

 Block723:
	cmp esi,0xA98A59
	jg Block739

 Block724:
	je Block1032

 Block725:
	cmp esi,0xA96349
	jg Block737

 Block726:
	je Block736

 Block727:
	cmp esi,0xA7DCA9
	jg Block732

 Block728:
	je Block1032

 Block729:
	cmp esi,0x98B5C1
	je Block845

 Block730:
	jle Block438

 Block731:
	cmp esi,0x98B5C3
	jmp Block437

 Block732:
	cmp esi,0xA7DCAA
	jl Block438

 Block733:
	cmp esi,0xA7DCAB
	jle Block444

 Block734:
	cmp esi,0xA7DCAC
	je Block573

 Block735:
	jmp Block438

 Block736:
	push 0x29
	push 0x1F
	jmp Block469

 Block737:
	lea eax,[esi-0xA9634A]
	cmp eax,3
	ja Block438

 Block738:
	cmp EAX, 0
je Block745
cmp EAX, 1
je Block695
cmp EAX, 2
je Block562
cmp EAX, 3
je Block653


 Block739:
	cmp esi,0xB71EEA
	jg Block748

 Block740:
	cmp esi,0xB71EE9
	jge Block1032

 Block741:
	lea eax,[esi-0xA98A5A]
	cmp eax,5
	ja Block438

 Block742:
	cmp EAX, 0
je Block743
cmp EAX, 1
je Block743
cmp EAX, 2
je Block444
cmp EAX, 3
je Block438
cmp EAX, 4
je Block444
cmp EAX, 5
je Block745


 Block743:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x1E
	je Block511

 Block744:
	cmp eax,0x28
	jmp Block510

 Block745:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x1E
	je Block747

 Block746:
	cmp eax,0x28
	jne Block1023

 Block747:
	push 1
	jmp Block547

 Block748:
	cmp esi,0xB8A588
	jg Block753

 Block749:
	je Block695

 Block750:
	mov eax,esi
	sub eax,0xB71EEB
	je Block516

 Block751:
	sub eax,1
	je Block573

 Block752:
	jmp Block438

 Block753:
	lea eax,[esi-0xB8A589]
	cmp eax,5
	ja Block438

 Block754:
	cmp EAX, 0
je Block472
cmp EAX, 1
je Block516
cmp EAX, 2
je Block709
cmp EAX, 3
je Block538
cmp EAX, 4
je Block887
cmp EAX, 5
je Block516


 Block755:
	cmp esi,0xC80ED9
	jg Block770

 Block756:
	cmp esi,0xC80ED8
	jge Block562

 Block757:
	cmp esi,0xC6612A
	jg Block761

 Block758:
	je Block1032

 Block759:
	lea eax,[esi-0xB8CC9B]
	cmp eax,3
	ja Block438

 Block760:
	cmp EAX, 0
je Block516
cmp EAX, 1
je Block573
cmp EAX, 2
je Block516
cmp EAX, 3
je Block516


 Block761:
	cmp esi,0xC7E7C9
	jg Block766

 Block762:
	je Block563

 Block763:
	mov eax,esi
	sub eax,0xC6612B
	je Block562

 Block764:
	sub eax,1
	je Block573

 Block765:
	jmp Block438

 Block766:
	lea eax,[esi-0xC7E7CA]
	cmp eax,4
	ja Block438

 Block767:
	cmp EAX, 0
je Block768
cmp EAX, 1
je Block768
cmp EAX, 2
je Block438
cmp EAX, 3
je Block562
cmp EAX, 4
je Block1032


 Block768:
	cmp dword ptr [esp+0x28],0x2D
	jne Block1023

 Block769:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push 1
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x20]
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block770:
	cmp esi,0xD5A36A
	jg Block774

 Block771:
	je Block444

 Block772:
	lea eax,[esi-0xC80EDA]
	cmp eax,5
	ja Block438

 Block773:
	cmp EAX, 0
je Block886
cmp EAX, 1
je Block438
cmp EAX, 2
je Block573
cmp EAX, 3
je Block812
cmp EAX, 4
je Block562
cmp EAX, 5
je Block562


 Block774:
	cmp esi,0xD72A0A
	jg Block780

 Block775:
	je Block607

 Block776:
	mov eax,esi
	sub eax,0xD5A36B
	je Block1032

 Block777:
	sub eax,1
	je Block562

 Block778:
	sub eax,1
	je Block573

 Block779:
	jmp Block438

 Block780:
	cmp esi,0xD75118
	jg Block789

 Block781:
	je Block1032

 Block782:
	cmp esi,0xD72A0E
	jg Block787

 Block783:
	je Block562

 Block784:
	mov eax,esi
	sub eax,0xD72A0B
	je Block695

 Block785:
	sub eax,1
	je Block653

 Block786:
	jmp Block438

 Block787:
	cmp esi,0xD74D33
	je Block1032

 Block788:
	jmp Block438

 Block789:
	lea eax,[esi-0xD75119]
	cmp eax,5
	ja Block438

 Block790:
	cmp EAX, 0
je Block472
cmp EAX, 1
je Block562
cmp EAX, 2
je Block438
cmp EAX, 3
je Block438
cmp EAX, 4
je Block562
cmp EAX, 5
je Block886


 Block791:
	cmp esi,0x1314C40
	jg Block816

 Block792:
	je Block1032

 Block793:
	cmp esi,0x13130E8
	jg Block814

 Block794:
	je Block916

 Block795:
	cmp esi,0xE69359
	jg Block808

 Block796:
	je Block444

 Block797:
	cmp esi,0xE66C4A
	jg Block803

 Block798:
	je Block802

 Block799:
	mov eax,esi
	sub eax,0xE4E5AB
	je Block1032

 Block800:
	sub eax,1
	je Block573

 Block801:
	jmp Block438

 Block802:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push 0
	push 0
	push 0
	push 0x30
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block803:
	mov eax,esi
	sub eax,0xE66C4B
	je Block886

 Block804:
	sub eax,2
	je Block444

 Block805:
	sub eax,1
	jne Block438

 Block806:
	cmp dword ptr [esp+0x28],0x30
	jne Block1023

 Block807:
	push 1
	jmp Block547

 Block808:
	cmp esi,0x1312D10
	jg Block438

 Block809:
	cmp esi,0x1312D0E
	jge Block847

 Block810:
	lea eax,[esi-0xE6935A]
	cmp eax,5
	ja Block438

 Block811:
	cmp EAX, 0
je Block812
cmp EAX, 1
je Block444
cmp EAX, 2
je Block444
cmp EAX, 3
je Block695
cmp EAX, 4
je Block806
cmp EAX, 5
je Block562


 Block812:
	mov ecx,dword ptr [esp+0x24]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block1082

 Block813:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push 1
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push edx
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block814:
	lea eax,[esi-0x13130E9]
	cmp eax,0x42
	ja Block438

 Block815:
	movzx eax,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_10]
	cmp EAX, 0
je Block1032
cmp EAX, 1
je Block962
cmp EAX, 2
je Block929
cmp EAX, 3
je Block960
cmp EAX, 4
je Block965
cmp EAX, 5
je Block963
cmp EAX, 6
je Block444
cmp EAX, 7
je Block964
cmp EAX, 8
je Block825
cmp EAX, 9
je Block827
cmp EAX, 10
je Block511
cmp EAX, 11
je Block438


 Block816:
	cmp esi,0x13157F8
	jg Block821

 Block817:
	je Block916

 Block818:
	cmp esi,0x1314C41
	je Block845

 Block819:
	jle Block438

 Block820:
	cmp esi,0x1314C43
	jmp Block437

 Block821:
	cmp esi,0x1317350
	jg Block838

 Block822:
	je Block1032

 Block823:
	lea eax,[esi-0x13157F9]
	cmp eax,0x42
	ja Block438

 Block824:
	movzx ecx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_11]
	cmp ECX, 0
je Block1032
cmp ECX, 1
je Block962
cmp ECX, 2
je Block929
cmp ECX, 3
je Block960
cmp ECX, 4
je Block965
cmp ECX, 5
je Block963
cmp ECX, 6
je Block444
cmp ECX, 7
je Block964
cmp ECX, 8
je Block825
cmp ECX, 9
je Block827
cmp ECX, 10
je Block511
cmp ECX, 11
je Block438


 Block825:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::IsEventVehicle
	test eax,eax
	je Block1082

 Block826:
	push 1
	jmp Block547

 Block827:
	mov ecx,dword ptr [esp+0x2C]
	mov ecx,dword ptr [ecx+0x13D4]
	call TemporaryStatBase<long>::GetValue
	mov edi,dword ptr [esp+0x14]
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,edi
	mov ebp,0x416
	call eax
	push eax
	call is_cygnus_job
	add esp,4
	test eax,eax
	je Block829

 Block828:
	mov ebp,0x989A96
	jmp Block833

 Block829:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,edi
	call eax
	push eax
	call is_aran_job
	add esp,4
	test eax,eax
	je Block831

 Block830:
	mov ebp,0x1313116
	jmp Block833

 Block831:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,edi
	call eax
	push eax
	call is_evan_job
	add esp,4
	test eax,eax
	je Block833

 Block832:
	mov ebp,0x1315826

 Block833:
	mov dword ptr [esp+0x24],0
	lea ecx,[esp+0x60]
	push 0x147E
	push ecx
	mov byte ptr [esp+0xA8],0x1C
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov edi,dword ptr [eax]
	push ebp
	mov byte ptr [esp+0xA4],0x1D
	call CSkillInfo::GetSkill
	mov edx,dword ptr [eax+4]
	push edx
	lea eax,[esp+0x28]
	push edi
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x6C]
	add esp,0xC
	mov byte ptr [esp+0xA0],0x1C
	test eax,eax
	je Block835

 Block834:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block835:
	lea ecx,[esp+0x24]
	push 0xC
	push ecx
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x2C]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block837

 Block836:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block837:
	cmp dword ptr [esp+0x28],0x31
	jmp Block1031

 Block838:
	cmp esi,0x141F5E5
	jg Block854

 Block839:
	je Block1032

 Block840:
	cmp esi,0x1407329
	jg Block848

 Block841:
	je Block961

 Block842:
	cmp esi,0x1317353
	jg Block846

 Block843:
	cmp esi,0x1317352
	jge Block695

 Block844:
	cmp esi,0x1317351
	jne Block438

 Block845:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_TownPortal
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block846:
	cmp esi,0x1406F42
	jne Block438

 Block847:
	cmp dword ptr [esp+0x28],0x2C
	jmp Block510

 Block848:
	cmp esi,0x141F5E2
	jg Block852

 Block849:
	cmp esi,0x141F5E1
	jge Block847

 Block850:
	cmp esi,0x140732B
	jne Block438

 Block851:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push 0
	push 0
	push 0
	push 0x2C
	push edx
	push eax
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block852:
	cmp esi,0x141F5E4
	je Block562

 Block853:
	jmp Block438

 Block854:
	cmp esi,0x1421CF6
	jg Block860

 Block855:
	je Block847

 Block856:
	mov eax,esi
	sub eax,0x141F9CB
	je Block1032

 Block857:
	sub eax,0x2328
	je Block847

 Block858:
	sub eax,1
	je Block562

 Block859:
	jmp Block438

 Block860:
	mov eax,esi
	sub eax,0x14220D9
	je Block1032

 Block861:
	sub eax,4
	jne Block438

 Block862:
	cmp dword ptr [esp+0x28],0x2C
	jne Block1023

 Block863:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push 1
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push edx
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block864:
	cmp esi,0x1E9F99A
	jg Block982

 Block865:
	je Block998

 Block866:
	cmp esi,0x1C9C768
	jg Block925

 Block867:
	je Block916

 Block868:
	cmp esi,0x151D849
	jg Block893

 Block869:
	je Block516

 Block870:
	cmp esi,0x1513C09
	jg Block881

 Block871:
	je Block709

 Block872:
	cmp esi,0x14247EB
	jg Block878

 Block873:
	je Block1032

 Block874:
	mov eax,esi
	sub eax,0x1424406
	je Block562

 Block875:
	sub eax,1
	je Block695

 Block876:
	sub eax,0x3E1
	je Block695

 Block877:
	jmp Block438

 Block878:
	cmp esi,0x14FB569
	je Block516

 Block879:
	cmp esi,0x1513C08
	je Block516

 Block880:
	jmp Block438

 Block881:
	cmp esi,0x1518A29
	jg Block890

 Block882:
	je Block887

 Block883:
	mov eax,esi
	sub eax,0x1516318
	je Block516

 Block884:
	sub eax,1
	je Block1032

 Block885:
	sub eax,0x270F
	jne Block438

 Block886:
	mov ecx,dword ptr [esp+0xAC]
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_Prepare
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block887:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x25
	je Block889

 Block888:
	cmp eax,ecx
	jne Block1023

 Block889:
	push 1
	jmp Block547

 Block890:
	mov eax,esi
	sub eax,0x151B138
	je Block516

 Block891:
	sub eax,1
	je Block695

 Block892:
	jmp Block438

 Block893:
	cmp esi,0x152266B
	jg Block906

 Block894:
	je Block905

 Block895:
	cmp esi,0x151FF5A
	jg Block901

 Block896:
	je Block516

 Block897:
	mov eax,esi
	sub eax,0x151D84A
	je Block538

 Block898:
	sub eax,1
	je Block1032

 Block899:
	sub eax,0x270E
	je Block886

 Block900:
	jmp Block438

 Block901:
	cmp esi,0x151FF5B
	je Block695

 Block902:
	cmp esi,0x1522668
	jle Block438

 Block903:
	cmp esi,0x152266A
	jle Block516

 Block904:
	jmp Block438

 Block905:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_RecoveryAura
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block906:
	cmp esi,0x1527488
	jg Block912

 Block907:
	je Block695

 Block908:
	cmp esi,0x1524D78
	je Block695

 Block909:
	cmp esi,0x1524D79
	jle Block438

 Block910:
	cmp esi,0x1524D7B
	jle Block516

 Block911:
	jmp Block438

 Block912:
	cmp esi,0x1527489
	jl Block438

 Block913:
	cmp esi,0x152748A
	jle Block516

 Block914:
	cmp esi,0x152748B
	je Block695

 Block915:
	jmp Block438

 Block916:
	mov eax,dword ptr [esp+0x28]
	cmp eax,0x1E
	je Block924

 Block917:
	cmp eax,0x1F
	je Block924

 Block918:
	cmp eax,0x20
	je Block924

 Block919:
	cmp eax,0x21
	je Block924

 Block920:
	cmp eax,0x25
	je Block924

 Block921:
	cmp eax,0x26
	je Block924

 Block922:
	lea edx,[esp+0x70]
	push 0xE36
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x1B
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x78]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1082

 Block923:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1082

 Block924:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_MagicAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block925:
	cmp esi,0x1C9E2C0
	jg Block968

 Block926:
	je Block1046

 Block927:
	lea eax,[esi-0x1C9C769]
	cmp eax,0x43
	ja Block438

 Block928:
	movzx edx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_12]
	cmp EDX, 0
je Block1046
cmp EDX, 1
je Block962
cmp EDX, 2
je Block929
cmp EDX, 3
je Block960
cmp EDX, 4
je Block965
cmp EDX, 5
je Block963
cmp EDX, 6
je Block444
cmp EDX, 7
je Block1032
cmp EDX, 8
je Block964
cmp EDX, 9
je Block966
cmp EDX, 10
je Block967
cmp EDX, 11
je Block511
cmp EDX, 12
je Block961
cmp EDX, 13
je Block438


 Block929:
	cmp dword ptr [ebp+0x18D],edi
	je Block958

 Block930:
	cmp dword ptr [ebp+0x195],edi
	je Block958

 Block931:
	mov eax,dword ptr [esp+0x38]
	mov ebp,dword ptr [eax+0x36D]
	mov eax,dword ptr [eax+0x375]
	test ebp,ebp
	je Block937

 Block932:
	test eax,eax
	je Block938

 Block933:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov edi,eax
	test edi,edi
	je Block935

 Block934:
	lea ecx,[ebp+0xC]
	call TSecType<long>::GetData
	push eax
	mov ecx,edi
	call CItemInfo::EQUIPITEM::IsItemSuitedForTamingMob
	test eax,eax
	jne Block940

 Block935:
	lea eax,[esp+0x5C]
	push 0x15BF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x20
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x64]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1082

 Block936:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1082

 Block937:
	test eax,eax
	je Block940

 Block938:
	lea edx,[esp+0x78]
	push 0x15BF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x1F
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x80]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1082

 Block939:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1082

 Block940:
	mov ebx,dword ptr [esp+0x38]
	mov eax,dword ptr [ebx+0x18D]
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov edi,eax
	mov eax,dword ptr [ebx+0x195]
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	xor ebx,ebx
	mov ebp,eax
	mov dword ptr [esp+0x24],ebx
	test edi,edi
	je Block947

 Block941:
	test ebp,ebp
	je Block947

 Block942:
	mov ecx,dword ptr [ebp+8]
	push ecx
	push ebp
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add esp,8
	push eax
	call CItemInfo::GetEquipItem
	mov ebx,eax
	test ebx,ebx
	je Block944

 Block943:
	mov edx,dword ptr [edi+8]
	push edx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,ebx
	call CItemInfo::EQUIPITEM::IsItemSuitedForTamingMob
	test eax,eax
	jne Block946

 Block944:
	lea eax,[esp+0x88]
	push 0x15BF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x21
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x90]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1082

 Block945:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1082

 Block946:
	mov ebx,dword ptr [esp+0x24]

 Block947:
	mov ecx,dword ptr [esp+0x38]
	mov eax,dword ptr [ecx+0x19D]
	test eax,eax
	je Block949

 Block948:
	lea ecx,[eax+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov ebx,eax

 Block949:
	mov ecx,edi
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nTamingMob
	test eax,eax
	je Block956

 Block950:
	mov ecx,ebp
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrMobLevel
	mov edi,dword ptr [esp+0x14]
	cmp eax,dword ptr [edi+0x3A04]
	jg Block956

 Block951:
	test ebx,ebx
	je Block953

 Block952:
	mov ecx,ebx
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrMobLevel
	cmp eax,dword ptr [edi+0x3A04]
	jg Block956

 Block953:
	call get_field
	test dword ptr [eax+0x178],0x200
	jne Block956

 Block954:
	lea ecx,[edi+0x88]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block1082

 Block955:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	push 1
	push edx
	push eax
	mov ecx,edi
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block956:
	lea ecx,[esp+0x7C]
	push 0xF13
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x22
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x84]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1082

 Block957:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1082

 Block958:
	lea edx,[esp+0x6C]
	push 0xF0F
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x1E
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x74]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1082

 Block959:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block1082

 Block960:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_StatChangeAdmin
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block961:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_CombatStep
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block962:
	mov ecx,dword ptr [esp+0x14]
	call CUserLocal::DoEnchantSkill
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block963:
	mov ecx,dword ptr [esp+0x14]
	call CUserLocal::DoMakerSkill
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block964:
	mov ecx,dword ptr [esp+0x14]
	push esi
	call CUserLocal::DoActiveSkill_Flying
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block965:
	mov ecx,dword ptr [esp+0x14]
	push esi
	call CUserLocal::DoActiveSkill_DamageMeter
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block966:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_MobCapture
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block967:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_SummonMonster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block968:
	cmp esi,0x1E84BF3
	jg Block979

 Block969:
	cmp esi,0x1E84BEF
	jge Block998

 Block970:
	cmp esi,0x1E84BE8
	jg Block975

 Block971:
	je Block998

 Block972:
	cmp esi,0x1C9E2C1
	je Block845

 Block973:
	jle Block438

 Block974:
	cmp esi,0x1C9E2C3
	jmp Block437

 Block975:
	mov eax,esi
	sub eax,0x1E84BEA
	je Block709

 Block976:
	sub eax,1
	jne Block438

 Block977:
	cmp dword ptr [esp+0x28],ecx
	jne Block1023

 Block978:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_Aura
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block979:
	lea eax,[esi-0x1E9D288]
	cmp eax,5
	ja Block438

 Block980:
	cmp EAX, 0
je Block998
cmp EAX, 1
je Block516
cmp EAX, 2
je Block977
cmp EAX, 3
je Block977
cmp EAX, 4
je Block1046
cmp EAX, 5
je Block981


 Block981:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push 0
	push 0
	push 0
	push 0x26
	push edx
	push eax
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block982:
	cmp esi,0x1EA20AA
	jg Block999

 Block983:
	je Block998

 Block984:
	lea eax,[esi-0x1E9F99B]
	cmp eax,8
	ja Block438

 Block985:
	cmp EAX, 0
je Block516
cmp EAX, 1
je Block1046
cmp EAX, 2
je Block986
cmp EAX, 3
je Block1046
cmp EAX, 4
je Block438
cmp EAX, 5
je Block438
cmp EAX, 6
je Block438
cmp EAX, 7
je Block1032
cmp EAX, 8
je Block516


 Block986:
	cmp dword ptr [esp+0x28],ecx
	jne Block1023

 Block987:
	mov ebx,dword ptr [esp+0x14]
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	mov ecx,ebx
	call eax
	mov edi,eax
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_nAura_
	test eax,eax
	jle Block996

 Block988:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_nAura_
	cmp eax,0xA
	jge Block995

 Block989:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_rAura_
	cmp eax,0x1E84BEB
	je Block992

 Block990:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_rAura_
	cmp eax,0x1E9D28A
	je Block992

 Block991:
	mov ecx,edi
	call SecondaryStat::_ZtlSecureGet_rAura_
	cmp eax,0x1E9D28B
	jne Block995

 Block992:
	lea ecx,[esp+0x8C]
	push 0x189A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x19
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x94]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block994

 Block993:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block994:
	mov dword ptr [esp+0x18],0
	jmp Block1082

 Block995:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	push 1
	push edx
	push eax
	mov ecx,ebx
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block996:
	lea ecx,[esp+0x74]
	push 0xDF6
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x1A
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x7C]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block994

 Block997:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esp+0x18],0
	jmp Block1082

 Block998:
	cmp dword ptr [esp+0x28],ecx
	jmp Block457

 Block999:
	cmp esi,0x1F78E28
	jg Block1005

 Block1000:
	je Block562

 Block1001:
	lea eax,[esi-0x1EA20AB]
	cmp eax,4
	ja Block438

 Block1002:
	cmp EAX, 0
je Block1046
cmp EAX, 1
je Block516
cmp EAX, 2
je Block1046
cmp EAX, 3
je Block1003
cmp EAX, 4
je Block1071


 Block1003:
	mov eax,dword ptr [esp+0x28]
	mov edi,dword ptr [esp+0x1C]
	push ebx
	push eax
	mov ecx,edi
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	je Block1023

 Block1004:
	mov ecx,dword ptr [esp+0x20]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edi
	call CUserLocal::DoActiveSkill_SmokeShell
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1005:
	cmp esi,0x21612A9
	jg Block1048

 Block1006:
	je Block886

 Block1007:
	cmp esi,0x1F93BD9
	jg Block1040

 Block1008:
	je Block562

 Block1009:
	cmp esi,0x1F914CA
	jg Block1028

 Block1010:
	cmp esi,0x1F914C9
	jge Block562

 Block1011:
	mov eax,esi
	sub eax,0x1F78E29
	je Block1016

 Block1012:
	sub eax,1
	je Block653

 Block1013:
	sub eax,1
	jne Block438

 Block1014:
	push eax
	push eax
	push eax
	push 0x2E

 Block1015:
	mov edx,dword ptr [esp+0x30]
	mov eax,dword ptr [esp+0x2C]
	mov ecx,dword ptr [esp+0x24]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_WeaponBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1016:
	lea eax,[esp+0x44]
	push eax
	mov ecx,ebp
	call CharacterData::GetWildHunterInfo
	mov ecx,dword ptr [esp+0x48]
	mov bl,0x24
	mov byte ptr [esp+0xA0],bl
	test ecx,ecx
	je Block1025

 Block1017:
	call GW_WildHunterInfo::GetRidingItem
	test eax,eax
	je Block1025

 Block1018:
	mov ecx,dword ptr [esp+0x28]
	push 0xFFFFFFFF
	push ecx
	mov ecx,dword ptr [esp+0x24]
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block1020

 Block1019:
	lea edi,[eax+1]
	jmp Block1022

 Block1020:
	mov ecx,dword ptr [esp+0x24]
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jg Block1022

 Block1021:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push 1
	push edx
	push eax
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax

 Block1022:
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0xA0],8
	call ZRef<GW_WildHunterInfo>::~ZRef<GW_WildHunterInfo>
	test edi,edi
	je Block1080

 Block1023:
	cmp dword ptr [esp+0x28],0
	je Block1077

 Block1024:
	lea ecx,[esp+0x3C]
	push 0x1127
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0x26
	jmp Block1078

 Block1025:
	lea ecx,[esp+0x84]
	push 0x18D6
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xC
	push eax
	mov byte ptr [esp+0xA8],0x25
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x8C]
	add esp,8
	mov byte ptr [esp+0xA0],bl
	test eax,eax
	je Block1027

 Block1026:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block1027:
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0xA0],8
	call ZRef<GW_WildHunterInfo>::~ZRef<GW_WildHunterInfo>
	jmp Block1082

 Block1028:
	lea eax,[esi-0x1F914CB]
	cmp eax,4
	ja Block438

 Block1029:
	cmp EAX, 0
je Block1030
cmp EAX, 1
je Block1046
cmp EAX, 2
je Block886
cmp EAX, 3
je Block438
cmp EAX, 4
je Block1033


 Block1030:
	cmp dword ptr [esp+0x28],0x2E

 Block1031:
	jne Block1023

 Block1032:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push 1
	push edx
	push eax
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1033:
	mov ebx,dword ptr [esp+0x14]
	lea ecx,[esp+0x3C]
	push ecx
	mov ecx,ebx
	call CUser::GetVecCtrl_0
	mov eax,dword ptr [eax]
	test eax,eax
	je Block1035

 Block1034:
	lea edi,[eax-0xC]
	jmp Block1036

 Block1035:
	xor edi,edi

 Block1036:
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block1038

 Block1037:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block1038:
	cmp dword ptr [edi+0x1A0],0
	je Block1082

 Block1039:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	push edx
	mov ecx,ebx
	call CUserLocal::DoActiveSkill_ShootAttack
	mov ecx,ebx
	mov dword ptr [esp+0x18],eax
	call CUserLocal::ResetSwallow
	jmp Block1080

 Block1040:
	cmp esi,0x1F962E9
	jg Block1044

 Block1041:
	je Block562

 Block1042:
	lea eax,[esi-0x1F93BDA]
	cmp eax,4
	ja Block438

 Block1043:
	cmp EAX, 0
je Block444
cmp EAX, 1
je Block573
cmp EAX, 2
je Block1046
cmp EAX, 3
je Block573
cmp EAX, 4
je Block444


 Block1044:
	lea eax,[esi-0x1F962EA]
	cmp eax,7
	ja Block438

 Block1045:
	cmp EAX, 0
je Block444
cmp EAX, 1
je Block562
cmp EAX, 2
je Block695
cmp EAX, 3
je Block562
cmp EAX, 4
je Block1046
cmp EAX, 5
je Block1071
cmp EAX, 6
je Block438
cmp EAX, 7
je Block886


 Block1046:
	mov edx,dword ptr [esp+0x28]
	mov edi,dword ptr [esp+0x1C]
	push ebx
	push edx
	mov ecx,edi
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	je Block1023

 Block1047:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x14]
	push 1
	push eax
	push edi
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1048:
	cmp esi,0x217C05C
	jg Block1065

 Block1049:
	je Block1075

 Block1050:
	cmp esi,0x2179949
	jg Block1056

 Block1051:
	je Block1073

 Block1052:
	mov eax,esi
	sub eax,0x21612AA
	je Block837

 Block1053:
	sub eax,1
	je Block1060

 Block1054:
	sub eax,1
	je Block562

 Block1055:
	jmp Block438

 Block1056:
	cmp esi,0x217C05A
	jg Block438

 Block1057:
	cmp esi,0x217C059
	jge Block1073

 Block1058:
	lea eax,[esi-0x217994B]
	cmp eax,7
	ja Block438

 Block1059:
	cmp EAX, 0
je Block1060
cmp EAX, 1
je Block1063
cmp EAX, 2
je Block1062
cmp EAX, 3
je Block1064
cmp EAX, 4
je Block1032
cmp EAX, 5
je Block438
cmp EAX, 6
je Block886
cmp EAX, 7
je Block562


 Block1060:
	cmp dword ptr [esp+0x28],0x31
	jne Block1023

 Block1061:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_MeleeAttack
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1062:
	mov ecx,dword ptr [esp+0x20]
	mov edx,dword ptr [esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push edx
	call CUserLocal::DoActiveSkill_OpenGate
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1063:
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x1C]
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	call CUserLocal::DoActiveSkill_RocketBooster
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1064:
	push 0
	push 0
	push 0
	push 0x31
	jmp Block1015

 Block1065:
	cmp esi,0x217E76B
	jg Block1069

 Block1066:
	je Block1075

 Block1067:
	lea eax,[esi-0x217C05D]
	cmp eax,0xA
	ja Block438

 Block1068:
	movzx ecx,byte ptr [eax+_SUB_5445B0_LOOKUP_TABLE_13]
	cmp ECX, 0
je Block1073
cmp ECX, 1
je Block1046
cmp ECX, 2
je Block562
cmp ECX, 3
je Block438


 Block1069:
	lea eax,[esi-0x217E76C]
	cmp eax,8
	ja Block438

 Block1070:
	cmp EAX, 0
je Block444
cmp EAX, 1
je Block1075
cmp EAX, 2
je Block837
cmp EAX, 3
je Block1071
cmp EAX, 4
je Block438
cmp EAX, 5
je Block1073
cmp EAX, 6
je Block1073
cmp EAX, 7
je Block438
cmp EAX, 8
je Block562


 Block1071:
	mov ecx,dword ptr [esp+0x28]
	mov edi,dword ptr [esp+0x1C]
	push ebx
	push ecx
	mov ecx,edi
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	je Block1023

 Block1072:
	mov edx,dword ptr [esp+0x20]
	mov ecx,dword ptr [esp+0x14]
	push 2
	push edx
	push edi
	call CUserLocal::DoActiveSkill_StatChange
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1073:
	cmp dword ptr [esp+0x28],0x31
	jne Block1023

 Block1074:
	jmp Block573

 Block1075:
	cmp dword ptr [esp+0x28],0x31
	jne Block1023

 Block1076:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [esp+0x14]
	push edx
	push eax
	call CUserLocal::DoActiveSkill_RepeatSkill
	mov dword ptr [esp+0x18],eax
	jmp Block1080

 Block1077:
	lea edx,[esp+0x3C]
	push 0x18B5
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xA0],0x27

 Block1078:
	push 0xC
	push eax
	call CHATLOG_ADD
	mov eax,dword ptr [esp+0x44]
	add esp,8
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block1080

 Block1079:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block1080:
	mov ebx,dword ptr [esp+0x14]

 Block1081:
	cmp dword ptr [esp+0x18],0
	jne Block1083

 Block1082:
	mov esi,dword ptr [esp+0x38]
	mov edx,dword ptr [esp+0x64]
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecurePut_nHP
	mov edx,dword ptr [esp+0x54]
	mov ecx,esi
	call GW_CharacterStat::_ZtlSecurePut_nMP
	jmp Block1106

 Block1083:
	push esi
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block1091

 Block1084:
	cmp esi,0x2F9F6C
	je Block1091

 Block1085:
	cmp esi,0x4FAA8C
	je Block1091

 Block1086:
	cmp esi,0xC80EDA
	je Block1091

 Block1087:
	cmp esi,0x21612A9
	je Block1091

 Block1088:
	cmp esi,0x2179951
	je Block1091

 Block1089:
	cmp esi,0x1F962F1
	je Block1091

 Block1090:
	push esi
	mov ecx,ebx
	call CUserLocal::GetSkillLevel
	push eax
	push 0x2F
	push esi
	call play_skill_sound
	mov dword ptr [ebx+0x46C0],eax
	jmp Block1099

 Block1091:
	mov edi,0x2A
	cmp esi,0x12A191
	jne Block1098

 Block1092:
	mov ecx,dword ptr [esp+0x2C]
	call SecondaryStat::_ZtlSecureGet_rWeaponCharge_
	push eax
	call get_element_by_charged_skillid
	dec eax
	add esp,4
	cmp eax,4
	ja Block1098

 Block1093:
	cmp EAX, 0
je Block1095
cmp EAX, 1
je Block1094
cmp EAX, 2
je Block1096
cmp EAX, 3
je Block1098
cmp EAX, 4
je Block1097


 Block1094:
	mov edi,0x2B
	jmp Block1098

 Block1095:
	mov edi,0x2C
	jmp Block1098

 Block1096:
	mov edi,0x2D
	jmp Block1098

 Block1097:
	mov edi,0x2E

 Block1098:
	push esi
	mov ecx,ebx
	call CUserLocal::GetSkillLevel
	push eax
	push edi
	push esi
	call play_skill_sound

 Block1099:
	add esp,0xC
	push esi
	mov dword ptr [ebx+0x3AD0],1
	call get_required_combo_count
	add esp,4
	test eax,eax
	je Block1101

 Block1100:
	mov ecx,ebx
	call CUserLocal::ClearCombo

 Block1101:
	mov ecx,dword ptr [TSingleton<CReactorPool>::ms_pInstance]
	test ecx,ecx
	je Block1104

 Block1102:
	push esi
	call CReactorPool::FindSkillReactor
	mov ecx,dword ptr [TSingleton<CReactorPool>::ms_pInstance]
	test ecx,ecx
	je Block1104

 Block1103:
	push esi
	call CReactorPool::FindSkillReactor

 Block1104:
	cmp esi,0x41EEE8
	jne Block1106

 Block1105:
	mov ecx,dword ptr [esp+0x4C]
	call SKILLLEVELDATA::_ZtlSecureGet_tTime
	mov esi,eax
	imul esi,0x3E8
	call get_update_time
	add eax,esi
	push eax
	push 0x41EEE8
	mov ecx,ebx
	call CUserLocal::SetClientTimer

 Block1106:
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	call ZRef<CField>::~ZRef<CField>
	mov eax,dword ptr [esp+0x18]
	jmp Block1111

 Block1107:
	mov ecx,dword ptr [esp+0x28]
	call CWvsContext::AddChatMorphedMsg

 Block1108:
	mov dword ptr [esp+0xA0],0xFFFFFFFF

 Block1109:
	lea ecx,[esp+0x30]
	call ZRef<CField>::~ZRef<CField>

 Block1110:
	xor eax,eax

 Block1111:
	mov ecx,dword ptr [esp+0x98]

 Block1112:
	mov dword ptr fs:[0],ecx
	pop ecx

 Block1113:
	pop edi
	pop esi
	pop ebp
	pop ebx

 Block1114:
	add esp,0x90
	ret 0xC
}
}
// get_soul_arrow
__SUB(00503910, __cdecl, 82353,  const SKILLENTRY*, long) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x21
	jne Block2

 Block1:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x1F914CB
	call CSkillInfo::GetSkill
	ret

 Block2:
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,1
	jne Block4

 Block3:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0xC7E7CB
	call CSkillInfo::GetSkill
	ret

 Block4:
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0x20
	jne Block6

 Block5:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x30D7EC
	call CSkillInfo::GetSkill
	ret

 Block6:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x2F514C
	call CSkillInfo::GetSkill
	ret
}
}
// CUserLocal::SetPortableChairStatSetSent
__SUB_CLASS_THIS0(00504FC0, __thiscall, 41375,  CUserLocal, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	cmp dword ptr [eax+0x20B8],0
	push esi
	push edi
	mov esi,ecx
	mov edi,eax
	jne Block3

 Block1:
	mov eax,dword ptr [eax+0x20CC]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block3

 Block2:
	call get_update_time
	sub eax,dword ptr [edi+0x20BC]
	cmp eax,0x1F4
	jge Block4

 Block3:
	pop edi
	xor eax,eax
	pop esi
	ret

 Block4:
	mov edx,dword ptr [esi+0x4644]
	push edx
	lea eax,[esi+0x463C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block3

 Block5:
	mov ecx,dword ptr [esi+0x4650]
	push ecx
	lea edx,[esi+0x4648]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov edi,eax
	call timeGetTime
	sub eax,edi
	cmp eax,0x4E20
	jl Block3

 Block6:
	cmp dword ptr [esi+0x465C],0
	jne Block3

 Block7:
	mov eax,1
	pop edi
	mov dword ptr [esi+0x465C],eax
	pop esi
	ret
}
}
// CUserLocal::GetTeslaCoilSummonedID
_SUB_EXCEPTION_HANDLER(510B90)
__SUB_CLASS_THIS(00510B90, __thiscall, 41482,  CUserLocal, void, ZArray<unsigned long>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_510B90
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ebx,dword ptr [esp+0x2C]
	mov ecx,ebx
	call ZArray<unsigned long>::RemoveAll
	mov esi,dword ptr [esi+0x2E70]
	xor edi,edi
	mov dword ptr [esp+0x2C],esi
	cmp esi,edi
	je Block10

 Block1:
	mov ebp,dword ptr [ZImports::_InterlockedIncrement]
	mov edi,edi

 Block2:
	lea eax,[esp+0x2C]
	push eax
	call ZList<ZRef<CSummoned>>::GetNext
	mov esi,dword ptr [eax+4]
	add esp,4
	mov dword ptr [esp+0x18],esi
	cmp esi,edi
	je Block4

 Block3:
	lea ecx,[esi+0xC]
	push ecx
	call ebp

 Block4:
	cmp dword ptr [esi+0xC0],0x217C05A
	mov dword ptr [esp+0x24],edi
	jne Block6

 Block5:
	mov edi,dword ptr [esi+0xB4]
	push 0xFFFFFFFF
	mov ecx,ebx
	call ZArray<unsigned long>::InsertBefore
	mov dword ptr [eax],edi
	xor edi,edi

 Block6:
	add esi,8
	lea edx,[esi+4]
	push edx
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block9

 Block7:
	lea eax,[esi+4]
	push eax
	call ebp
	cmp esi,edi
	je Block9

 Block8:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block9:
	mov dword ptr [esp+0x18],edi
	cmp dword ptr [esp+0x2C],edi
	jne Block2

 Block10:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 4
}
}
// CUserLocal::GetSecondaryStat
__SUB_CLASS_THIS0(00507290, __thiscall, 41324,  CUserLocal, const SecondaryStat&) {
__asm {

 Block0:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add eax,0x2148
	ret
}
}
// CUserLocal::OnPlayEventSound
_SUB_EXCEPTION_HANDLER(516D60)
__SUB_CLASS_THIS(00516D60, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_516D60
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [esp+0x1C]
	lea eax,[esp+8]
	push eax
	call CInPacket::DecodeStr
	mov eax,dword ptr [eax]
	push 0xFFFFFFFF
	push eax
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x1C],0
	mov dword ptr [esp+0x24],0
	call ZXString<unsigned short>::AssignCharStr
	mov eax,dword ptr [esp+8]
	mov byte ptr [esp+0x14],2
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov esi,dword ptr [esp+0x1C]
	push 0x64
	push esi
	call play_field_sound
	add esp,8
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block4

 Block3:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<unsigned short>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret 4
}
}
// CUserLocal::RUSH::~RUSH
_SUB_EXCEPTION_HANDLER(506C70)
__SUB_CLASS_THIS0(00506C70, __thiscall, 42615,  CUserLocal::RUSH, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_506C70
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	lea ecx,[esi+0x20]
	mov dword ptr [esp+0x14],0
	call ZArray<tagPOINT>::RemoveAll
	lea ecx,[esi+8]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	int 3// TODO: 	mov dword ptr [ecx],offset ZList<CUserLocal::RUSH::RUSHELEM>::`vftable'
	call ZList<CUserLocal::RUSH::RUSHELEM>::RemoveAll
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CUserLocal::OnOpenUI
__SUB_CLASS_THIS(005055F0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	mov ecx,dword ptr [esp+4]
	call CInPacket::Decode1
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	movzx eax,al
	test ecx,ecx
	je Block2

 Block1:
	push 0xFFFFFFFF
	push eax
	call CWvsContext::UI_Open

 Block2:
	ret 4
}
}
// CAntiRepeat::TryRepeat
__SUB_CLASS_THIS(005032B0, __thiscall, 82343,  CAntiRepeat, int32_t, long, long) {
__asm {

 Block0:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [esp+8]
	push esi
	mov esi,dword ptr [esp+8]
	sub eax,esi
	cmp eax,0xFFFFFFFA
	jle Block7

 Block1:
	cmp eax,6
	jge Block7

 Block2:
	mov eax,dword ptr [ecx+4]
	sub eax,edx
	cmp eax,0xFFFFFF6A
	jle Block7

 Block3:
	cmp eax,0x96
	jge Block7

 Block4:
	mov eax,dword ptr [ecx+8]
	cmp eax,dword ptr [ecx+0xC]
	jl Block6

 Block5:
	xor eax,eax
	pop esi
	ret 8

 Block6:
	inc eax
	mov dword ptr [ecx+8],eax
	mov eax,1
	pop esi
	ret 8

 Block7:
	mov dword ptr [ecx],esi
	mov dword ptr [ecx+4],edx
	mov dword ptr [ecx+8],0
	mov eax,1
	pop esi
	ret 8
}
}
// CUserLocal::SetImpact
__SUB_CLASS_THIS(00505E10, __thiscall, 41331,  CUserLocal, void, long, long, int32_t) {
__asm {

 Block0:
	cmp dword ptr [esp+0xC],0
	push esi
	push edi
	mov edi,dword ptr [esp+0x10]
	je Block2

 Block1:
	mov eax,edi
	neg eax
	mov dword ptr [esp+0x10],eax
	jmp Block3

 Block2:
	mov dword ptr [esp+0x10],edi

 Block3:
	mov eax,dword ptr [ecx+0x19E4]
	test eax,eax
	je Block5

 Block4:
	lea esi,[eax-0xC]
	jmp Block6

 Block5:
	xor esi,esi

 Block6:
	mov ecx,dword ptr [esp+0xC]
	push ecx
	mov ecx,esi
	call CVecCtrl::SetMovePathAttribute
	neg edi
	mov dword ptr [esp+0x14],edi
	fild dword ptr [esp+0x14]
	sub esp,0x10
	mov ecx,esi
	fstp qword ptr [esp+8]
	fild dword ptr [esp+0x20]
	fstp qword ptr [esp]
	call CVecCtrl::SetImpactNext_0
	pop edi
	pop esi
	ret 0xC
}
}
// CUserLocal::OnHireTutor
_SUB_EXCEPTION_HANDLER(50E560)
__SUB_CLASS_THIS(0050E560, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50E560
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x40]
	call edx
	mov ecx,eax
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov edi,eax
	dec edi
	neg edi
	sbb edi,edi
	and edi,0x989680
	add edi,0x989A75
	push edi
	mov ecx,esi
	call CUserLocal::RemoveTutor
	mov ecx,dword ptr [esp+0x34]
	call CInPacket::Decode1
	test al,al
	je Block10

 Block1:
	push 0x208
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x34],eax
	mov dword ptr [esp+0x2C],0
	test eax,eax
	je Block3

 Block2:
	mov edx,dword ptr [esi+0x19E8]
	push edi
	push edx
	mov ecx,eax
	call CTutor::_ctor_0
	jmp Block4

 Block3:
	xor eax,eax

 Block4:
	push eax
	lea ecx,[esi+0x476C]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	call ZRef<CTutor>::op_assign_ptr
	mov ebx,dword ptr [esi+0x4770]
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	add esi,4
	lea eax,[esp+0x14]
	push eax
	mov ecx,esi
	call edx
	push 0
	push 0
	push 0
	push 1
	push 0
	mov ebp,eax
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x10]
	push 2
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,esi
	call edx
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [ebp]
	push eax
	push ecx
	mov ecx,ebx
	call CSummoned::Init_0
	mov ecx,dword ptr [CUserLocal::ms_anTutors]
	xor eax,eax

 Block5:
	test ecx,ecx
	je Block9

 Block6:
	cmp eax,dword ptr [ecx-4]
	jae Block9

 Block7:
	cmp dword ptr [ecx+eax*4],edi
	je Block10

 Block8:
	inc eax
	jmp Block5

 Block9:
	push 0xFFFFFFFF
	mov ecx,offset CUserLocal::ms_anTutors
	call ZArray<long>::InsertBefore
	mov dword ptr [eax],edi

 Block10:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x1C
	ret 4
}
}
// CUserLocal::GetJobCode
_SUB_EXCEPTION_HANDLER(508EB0)
__SUB_CLASS_THIS0(00508EB0, __thiscall, 41325,  CUserLocal, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_508EB0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x10]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	test ecx,ecx
	je Block4

 Block1:
	lea eax,[esp+8]
	push eax
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [esp+0x18],0
	test eax,eax
	je Block3

 Block2:
	mov ecx,dword ptr [eax+0x3D]
	push ecx
	add eax,0x39
	push eax
	call _ZtlSecureFuseHelper<short>::call
	add esp,8
	lea ecx,[esp+8]
	movsx esi,ax
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,esi
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret

 Block3:
	lea ecx,[esp+8]
	mov dword ptr [esp+0x18],0xFFFFFFFF
	call ZRef<CharacterData>::~ZRef<CharacterData>

 Block4:
	or eax,0xFFFFFFFF
	mov ecx,dword ptr [esp+0x10]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x14
	ret
}
}
// CUserLocal::SetMonsterCardCheckList
_SUB_EXCEPTION_HANDLER(50E440)
__SUB_CLASS_THIS(0050E440, __thiscall, 41385,  CUserLocal, void, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50E440
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x18]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,dword ptr [esp+0x28]
	push eax
	lea ecx,[esp+0x14]
	push ecx
	mov ecx,dword ptr [TSingleton<CMonsterBookMan>::ms_pInstance]
	call CMonsterBookMan::GetCard
	mov esi,dword ptr [esp+0x14]
	mov dword ptr [esp+0x20],0
	test esi,esi
	je Block8

 Block1:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esi+8]
	lea edi,[ebx+0x4740]
	push eax
	mov ecx,edi
	mov dword ptr [esp+0x30],0
	call ZMap<long, long, long>::GetAt
	cmp dword ptr [esp+0x2C],0
	je Block4

 Block2:
	push esi
	lea ecx,[ebx+0x4728]
	call ZMap<long, long, long>::RemoveKey
	test eax,eax
	je Block7

 Block3:
	mov ecx,dword ptr [esp+0x28]
	dec ecx
	jmp Block6

 Block4:
	push 0
	add ebx,0x4728
	push esi
	mov ecx,ebx
	call ZMap<long, long, long>::GetAt
	test eax,eax
	jne Block7

 Block5:
	mov eax,dword ptr [esp+0x14]
	push eax
	push eax
	mov ecx,ebx
	call ZMap<long, long, long>::Insert
	mov ecx,dword ptr [esp+0x28]
	inc ecx

 Block6:
	mov eax,dword ptr [esp+0x14]
	lea edx,[esp+0x28]
	push edx
	add eax,8
	mov dword ptr [esp+0x2C],ecx
	push eax
	mov ecx,edi
	call ZMap<long, long, long>::Insert

 Block7:
	mov esi,dword ptr [esp+0x14]

 Block8:
	mov dword ptr [esp+0x20],0xFFFFFFFF
	test esi,esi
	je Block12

 Block9:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block12

 Block10:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block12

 Block11:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block12:
	mov ecx,dword ptr [esp+0x18]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x14
	ret 8
}
}
// CUserLocal::OnAskAPSPEvent
_SUB_EXCEPTION_HANDLER(50F0E0)
__SUB_CLASS_THIS(0050F0E0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50F0E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	test eax,eax
	je Block5

 Block1:
	mov edi,dword ptr [esp+0x2C]
	mov esi,dword ptr [eax+0x20B4]
	mov ecx,edi
	call CInPacket::Decode4
	cmp eax,esi
	jne Block5

 Block2:
	mov ecx,edi
	call CInPacket::Decode4
	add eax,0xFFFFFFF5
	cmp eax,2
	ja Block5

 Block3:
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	push 0x17BA
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	call CUtilDlg::YesNo_0
	add esp,0x14
	cmp eax,6
	jne Block5

 Block4:
	push 0xC3
	lea ecx,[esp+0x10]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [ecx+0x2030]
	push eax
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x28],0
	call COutPacket::Encode4
	push 6
	lea ecx,[esp+0x10]
	call COutPacket::Encode4
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea edx,[esp+0xC]
	push edx
	call CClientSocket::SendPacket
	lea ecx,[esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block5:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x1C
	ret 4
}
}
// CUserLocal::SetDirectionMode
__SUB_CLASS_THIS(00504240, __thiscall, 41339,  CUserLocal, void, int32_t) {
__asm {

 Block0:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push esi
	mov esi,dword ptr [esp+8]
	mov ecx,eax
	cmp dword ptr [eax+0x3850],esi
	je Block2

 Block1:
	mov dword ptr [eax+0x3850],esi
	xor eax,eax
	test esi,esi
	sete al
	push eax
	call CWvsContext::ShowUI

 Block2:
	test esi,esi
	jne Block6

 Block3:
	mov esi,dword ptr [_D_G_PSTAGE+4]
	test esi,esi
	je Block6

 Block4:
	mov edx,dword ptr [esi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[esi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block6

 Block5:
	mov ecx,esi
	call CMapLoadable::OnLeaveDirectionMode

 Block6:
	pop esi
	ret 4
}
}
// ActionRandMan::PreventRollback
__SUB_CLASS_THIS0(00503350, __thiscall, 24070,  ActionRandMan, void) {
__asm {

 Block0:
	mov dword ptr [ecx],0
	ret
}
}
// CUserLocal::TryRegisterSerialAttack
__SUB_CLASS_THIS(00503480, __thiscall, 41409,  CUserLocal, void, long, long, unsigned long) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x58C]
	push eax
	call get_weapon_type
	mov ecx,dword ptr [esp+0xC]
	add esp,4
	cmp ecx,0x406849
	je Block3

 Block1:
	cmp ecx,0x423D0D
	je Block3

 Block2:
	mov dword ptr [esi+0x3B14],0
	pop esi
	ret 0xC

 Block3:
	mov dword ptr [esi+0x3B14],ecx
	mov dword ptr [esi+0x3B18],eax
	call get_update_time
	add eax,dword ptr [esp+0xC]
	mov dword ptr [esi+0x3B1C],eax
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esi+0x3B20],eax
	pop esi
	ret 0xC
}
}
// CUserLocal::OnSetDirectionMode
__SUB_CLASS_THIS(005054F0, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push ebx
	mov ebx,dword ptr [esp+8]
	push esi
	mov esi,ecx
	push edi
	mov ecx,ebx
	call CInPacket::Decode1
	mov ecx,ebx
	movzx edi,al
	mov dword ptr [esi+0x3AC8],0
	call CInPacket::Decode4
	mov ebx,eax
	test edi,edi
	jne Block3

 Block1:
	test ebx,ebx
	jle Block3

 Block2:
	mov dword ptr [esi+0x3AC8],1
	call get_update_time
	add eax,ebx
	pop edi
	mov dword ptr [esi+0x3ACC],eax
	pop esi
	pop ebx
	ret 4

 Block3:
	push edi
	mov ecx,esi
	call CUserLocal::SetDirectionMode
	pop edi
	pop esi
	pop ebx
	ret 4
}
}
// CUserLocal::TryDoingShootAttack
_SUB_EXCEPTION_HANDLER(525A00)
__SUB_CLASS_THIS(00525A00, __thiscall, 41396,  CUserLocal, int32_t, const SKILLENTRY*, long, long, int32_t, long, uint32_t) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_525A00
	mov eax,dword ptr fs:[0]
	push eax
	mov eax,0x1DDC
	call __chkstk
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov dword ptr [ebp-0x1C78],ecx
	mov dword ptr [ebp-0x1AB4],0
	mov eax,dword ptr [ebp-0x1C78]
	cmp dword ptr [eax+0x3AF4],0
	je Block2

 Block1:
	xor eax,eax
	jmp Block528

 Block2:
	cmp dword ptr [ebp+8],0
	je Block4

 Block3:
	mov ecx,dword ptr [ebp+8]
	mov edx,dword ptr [ecx]
	mov dword ptr [ebp-0x1C7C],edx
	jmp Block5

 Block4:
	mov dword ptr [ebp-0x1C7C],0

 Block5:
	mov eax,dword ptr [ebp-0x1C7C]
	mov dword ptr [ebp-0x1EC],eax
	mov ecx,dword ptr [ebp+0x14]
	push ecx
	mov edx,dword ptr [ebp+0x10]
	push edx
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	call GetShootRange0
	add esp,0xC
	mov dword ptr [ebp+0x10],eax
	cmp dword ptr [ebp-0x1EC],0x21612A9
	je Block7

 Block6:
	cmp dword ptr [ebp-0x1EC],0x2179951
	jne Block10

 Block7:
	mov ecx,dword ptr [ebp-0x1C78]
	cmp dword ptr [ecx+0x5EC],0
	jne Block9

 Block8:
	mov edx,dword ptr [ebp-0x1C78]
	cmp dword ptr [edx+0x5F0],0
	je Block10

 Block9:
	xor eax,eax
	jmp Block528

 Block10:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsRidingWildHunterJaguar
	test eax,eax
	je Block15

 Block11:
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call is_smoothing_movingshoot
	add esp,8
	test eax,eax
	je Block15

 Block12:
	mov edx,dword ptr [ebp-0x1C78]
	cmp dword ptr [edx+0x480C],0
	je Block14

 Block13:
	xor eax,eax
	jmp Block528

 Block14:
	mov eax,dword ptr [ebp+0x10]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::TryDoingSmoothingMovingShootAttackPrepare
	jmp Block528

 Block15:
	call TSingleton<CWvsContext>::GetInstance
	mov dword ptr [ebp-0x44],eax
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::IsUserGM
	test eax,eax
	je Block17

 Block16:
	push 0x97
	lea eax,[ebp-0x10BC]
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1C80],eax
	mov ecx,dword ptr [ebp-0x1C80]
	mov dword ptr [ebp-0x1C84],ecx
	mov dword ptr [ebp-4],0
	push 0xC
	mov edx,dword ptr [ebp-0x1C84]
	push edx
	call CHATLOG_ADD
	add esp,8
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x10BC]
	call ZXString<char>::~ZXString<char>
	xor eax,eax
	jmp Block528

 Block17:
	lea eax,[ebp-0x10C4]
	push eax
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x1C88],eax
	mov ecx,dword ptr [ebp-0x1C88]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x74],eax
	lea ecx,[ebp-0x10C4]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov ecx,dword ptr [ebp-0x74]
	mov dword ptr [ebp-0x98],ecx
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetBasicStat
	mov dword ptr [ebp-0xB24],eax
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetSecondaryStat
	mov dword ptr [ebp-0x21C],eax
	call get_update_time
	mov dword ptr [ebp-0x150],eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	call get_weapon_type
	add esp,4
	mov dword ptr [ebp-0x218],eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetSubWeaponItemID
	push eax
	call get_weapon_type
	add esp,4
	mov dword ptr [ebp-0x16C],eax
	cmp dword ptr [ebp-0x1EC],0x3EE1AB
	je Block20

 Block18:
	cmp dword ptr [ebp-0x1EC],0x40684B
	je Block20

 Block19:
	mov dword ptr [ebp-0x1C8C],0
	jmp Block21

 Block20:
	mov dword ptr [ebp-0x1C8C],1

 Block21:
	mov edx,dword ptr [ebp-0x1C8C]
	mov dword ptr [ebp-0x1C0],edx
	xor eax,eax
	cmp dword ptr [ebp-0x1EC],0x4E23EA
	sete al
	mov dword ptr [ebp-0x1D0],eax
	xor ecx,ecx
	cmp dword ptr [ebp-0x1EC],0x4F5C6E
	sete cl
	mov dword ptr [ebp-0x70],ecx
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetActionRndMan
	push eax
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::_ctor_0
	mov dword ptr [ebp-4],1
	cmp dword ptr [ebp+0x14],0
	jne Block23

 Block22:
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::GetRandom
	mov dword ptr [ebp-0x40],eax
	jmp Block24

 Block23:
	mov edx,dword ptr [ebp+0x1C]
	mov dword ptr [ebp-0x40],edx
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::PreventRollback

 Block24:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsDead
	test eax,eax
	je Block26

 Block25:
	mov dword ptr [ebp-0x10C8],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10C8]
	jmp Block528

 Block26:
	call get_field
	mov ecx,eax
	call CField::IsUnableToUseSkill
	test eax,eax
	je Block31

 Block27:
	cmp dword ptr [ebp-0x1EC],0x2F9F6B
	je Block30

 Block28:
	cmp dword ptr [ebp-0x1EC],0x31260B
	je Block30

 Block29:
	cmp dword ptr [ebp-0x1EC],0x4F5C6E
	jne Block31

 Block30:
	mov dword ptr [ebp-0x10CC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10CC]
	jmp Block528

 Block31:
	lea eax,[ebp-0x10D0]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetVecCtrl_0
	mov dword ptr [ebp-0x1C90],eax
	mov ecx,dword ptr [ebp-0x1C90]
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov dword ptr [ebp-0x214],eax
	lea ecx,[ebp-0x10D0]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	cmp dword ptr [ebp-0x218],0x2D
	je Block33

 Block32:
	cmp dword ptr [ebp-0x218],0x2E
	jne Block37

 Block33:
	mov ecx,dword ptr [ebp-0x214]
	call CVecCtrl::GetFoothold
	test eax,eax
	jne Block37

 Block34:
	mov ecx,dword ptr [ebp-0x214]
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block37

 Block35:
	mov ecx,dword ptr [ebp-0x214]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x214]
	mov eax,dword ptr [edx+8]
	call eax
	test eax,eax
	jne Block37

 Block36:
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call is_able_to_jumpshoot
	add esp,8
	test eax,eax
	je Block44

 Block37:
	cmp dword ptr [ebp-0x218],0x2D
	je Block39

 Block38:
	cmp dword ptr [ebp-0x218],0x2E
	jne Block40

 Block39:
	mov ecx,dword ptr [ebp-0x214]
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	jne Block44

 Block40:
	cmp dword ptr [ebp-0x218],0x2F
	jne Block42

 Block41:
	mov ecx,dword ptr [ebp-0x214]
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	jne Block44

 Block42:
	cmp dword ptr [ebp-0x218],0x31
	jne Block45

 Block43:
	mov ecx,dword ptr [ebp-0x214]
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	je Block45

 Block44:
	mov dword ptr [ebp-0x10D4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10D4]
	jmp Block528

 Block45:
	mov ecx,dword ptr [ebp-0x214]
	call CVecCtrl::IsSwimming
	test eax,eax
	jne Block47

 Block46:
	mov edx,dword ptr [ebp-0x214]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x214]
	mov edx,dword ptr [eax+8]
	call edx
	test eax,eax
	je Block49

 Block47:
	mov ecx,dword ptr [ebp-0x214]
	call CVecCtrl::GetLadderOrRope
	test eax,eax
	je Block49

 Block48:
	mov dword ptr [ebp-0x10D8],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10D8]
	jmp Block528

 Block49:
	cmp dword ptr [ebp-0x1EC],0x21612A9
	je Block55

 Block50:
	cmp dword ptr [ebp-0x1EC],0x2179951
	je Block55

 Block51:
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	call get_cool_time
	add esp,4
	test eax,eax
	je Block55

 Block52:
	lea ecx,[ebp-0xB28]
	push ecx
	lea edx,[ebp-0x1EC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x46C4
	call ZMap<long, long, long>::GetAt
	test eax,eax
	je Block55

 Block53:
	mov eax,dword ptr [ebp-0x150]
	cmp eax,dword ptr [ebp-0xB28]
	jge Block55

 Block54:
	mov dword ptr [ebp-0x10DC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10DC]
	jmp Block528

 Block55:
	mov dword ptr [ebp-0x3C],0xFFFFFFFF
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx+0x5A0]
	mov dword ptr [ebp-0x1E0],edx
	cmp dword ptr [ebp-0x1C0],0
	je Block57

 Block56:
	mov dword ptr [ebp-0x3C],0x60
	jmp Block71

 Block57:
	cmp dword ptr [ebp-0x1D0],0
	je Block59

 Block58:
	mov dword ptr [ebp-0x3C],0x69
	jmp Block71

 Block59:
	cmp dword ptr [ebp-0x70],0
	je Block61

 Block60:
	mov dword ptr [ebp-0x3C],0x73
	jmp Block71

 Block61:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsSuperMan
	test eax,eax
	je Block68

 Block62:
	cmp dword ptr [ebp+8],0
	jne Block68

 Block63:
	cmp dword ptr [ebp-0x218],0x27
	je Block68

 Block64:
	cmp dword ptr [ebp-0x218],0x30
	je Block68

 Block65:
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::_ZtlSecureGet_rMorph_
	cmp eax,0xC80EDD
	jne Block67

 Block66:
	cmp dword ptr [ebp-0x218],0x2D
	je Block68

 Block67:
	mov dword ptr [ebp-0x3C],0xFFFFFFFF
	jmp Block71

 Block68:
	mov eax,dword ptr [ebp-0x40]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov eax,dword ptr [ebp-0x218]
	push eax
	mov ecx,dword ptr [ebp-0x1E0]
	push ecx
	call get_random_shoot_attack_action
	add esp,0x14
	mov dword ptr [ebp-0x3C],eax
	cmp dword ptr [ebp+8],0
	je Block71

 Block69:
	mov edx,dword ptr [ebp-0x16C]
	push edx
	mov eax,dword ptr [ebp-0x218]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsCorrectWeaponType
	test eax,eax
	jne Block71

 Block70:
	push 0x1127
	lea ecx,[ebp-0x10E0]
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1C94],eax
	mov edx,dword ptr [ebp-0x1C94]
	mov dword ptr [ebp-0x1C98],edx
	mov byte ptr [ebp-4],2
	push 0xC
	mov eax,dword ptr [ebp-0x1C98]
	push eax
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x10E0]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x10E4],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10E4]
	jmp Block528

 Block71:
	cmp dword ptr [ebp-0x3C],0
	jge Block73

 Block72:
	push 0x1127
	lea ecx,[ebp-0x10E8]
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-0x1C9C],eax
	mov edx,dword ptr [ebp-0x1C9C]
	mov dword ptr [ebp-0x1CA0],edx
	mov byte ptr [ebp-4],3
	push 0xC
	mov eax,dword ptr [ebp-0x1CA0]
	push eax
	call CHATLOG_ADD
	add esp,8
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x10E8]
	call ZXString<char>::~ZXString<char>
	mov dword ptr [ebp-0x10EC],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10EC]
	jmp Block528

 Block73:
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::_ZtlSecureGet_nSoulArrow_
	neg eax
	sbb eax,eax
	neg eax
	mov dword ptr [ebp-0x14C],eax
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::_ZtlSecureGet_nSpiritJavelin_
	neg eax
	sbb eax,eax
	neg eax
	mov dword ptr [ebp-0x1F8],eax
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::_ZtlSecureGet_nShadowPartner_
	neg eax
	sbb eax,eax
	neg eax
	mov dword ptr [ebp-0x1F4],eax
	cmp dword ptr [ebp-0x1EC],0xD72A0E
	jne Block75

 Block74:
	mov dword ptr [ebp-0x1F4],0

 Block75:
	call get_field
	test eax,eax
	je Block78

 Block76:
	call get_field
	mov dword ptr [ebp-0x1CA4],eax
	mov ecx,dword ptr [ebp-0x1CA4]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1CA4]
	mov eax,dword ptr [edx+0x1C]
	call eax
	cmp eax,0x20
	jne Block78

 Block77:
	mov dword ptr [ebp-0x1F4],0

 Block78:
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::_ZtlSecureGet_nSpark_
	neg eax
	sbb eax,eax
	neg eax
	mov dword ptr [ebp-0x38],eax
	mov dword ptr [ebp-0x18],0
	mov dword ptr [ebp-0x1BC],0
	mov dword ptr [ebp-0x14],0
	mov dword ptr [ebp-0x168],0
	cmp dword ptr [ebp-0x14C],0
	jne Block83

 Block79:
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call is_shoot_skill_not_consuming_bullet
	add esp,4
	test eax,eax
	jne Block83

 Block80:
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax+0x40]
	call edx
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	jne Block83

 Block81:
	lea eax,[ebp-0x168]
	push eax
	lea ecx,[ebp-0x1BC]
	push ecx
	lea edx,[ebp-0x14]
	push edx
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::GetProperBulletPosition
	mov dword ptr [ebp-0x18],eax
	cmp dword ptr [ebp-0x18],0
	jne Block83

 Block82:
	mov dword ptr [ebp-0x10F0],0
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x10F0]
	jmp Block528

 Block83:
	cmp dword ptr [ebp+8],0
	je Block85

 Block84:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	mov dword ptr [ebp-0x1CA8],eax
	jmp Block86

 Block85:
	mov dword ptr [ebp-0x1CA8],1

 Block86:
	mov eax,dword ptr [ebp-0x1CA8]
	mov dword ptr [ebp-0x1B8],eax
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::_ZtlSecureGet_nFrozen_
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetAuraBooster
	push eax
	push 4
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::operator[]
	mov ecx,eax
	call TemporaryStatBase<long>::GetValue
	mov ecx,dword ptr [eax]
	push ecx
	mov ecx,dword ptr [ebp-0x21C]
	call SecondaryStat::_ZtlSecureGet_nBooster_
	push eax
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::_ZtlSecureGet_m_nWeaponAttackSpeed
	push eax
	call get_attack_speed_degree
	add esp,0x18
	mov dword ptr [ebp-0x210],eax
	push 0
	push 0
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	push 1
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov ecx,dword ptr [ebp-0x21C]
	push ecx
	mov edx,dword ptr [ebp-0x74]
	push edx
	call get_weapon_mastery
	add esp,0x1C
	mov dword ptr [ebp-0x94],eax
	mov eax,dword ptr [ebp-0x218]
	push eax
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	mov edx,dword ptr [ebp-0x74]
	push edx
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetShootSkillRange
	mov dword ptr [ebp-0x6C],eax
	mov dword ptr [ebp-0xA8],0
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	mov dword ptr [ebp-0x5C],eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x614
	call TSecType<long>::op_t
	push eax
	mov eax,dword ptr [ebp-0x1C78]
	mov ecx,dword ptr [eax+0x5F8]
	push ecx
	lea edx,[ebp-0x1100]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call GetShootAttackPt0
	add esp,0x14
	mov dword ptr [ebp-0x10F8],eax
	mov dword ptr [ebp-0x10F4],edx
	mov edx,dword ptr [ebp-0x10F8]
	mov dword ptr [ebp-0x34],edx
	mov eax,dword ptr [ebp-0x10F4]
	mov dword ptr [ebp-0x30],eax
	cmp dword ptr [ebp-0x1EC],0xE6935E
	jne Block88

 Block87:
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx+0x3BCC]
	mov eax,dword ptr [ecx+0x3BD0]
	mov dword ptr [ebp-0x34],edx
	mov dword ptr [ebp-0x30],eax

 Block88:
	cmp dword ptr [ebp-0x5C],0
	je Block90

 Block89:
	mov ecx,dword ptr [ebp+0x10]
	neg ecx
	mov dword ptr [ebp-0x1CAC],ecx
	jmp Block91

 Block90:
	mov edx,dword ptr [ebp+0x10]
	mov dword ptr [ebp-0x1CAC],edx

 Block91:
	mov eax,dword ptr [ebp-0x34]
	add eax,dword ptr [ebp-0x1CAC]
	mov dword ptr [ebp-0x20C],eax
	mov ecx,dword ptr [ebp-0x30]
	mov dword ptr [ebp-0x208],ecx
	cmp dword ptr [ebp-0x5C],0
	je Block93

 Block92:
	mov edx,dword ptr [ebp-0x6C]
	neg edx
	mov dword ptr [ebp-0x1CB0],edx
	jmp Block94

 Block93:
	mov eax,dword ptr [ebp-0x6C]
	mov dword ptr [ebp-0x1CB0],eax

 Block94:
	mov ecx,dword ptr [ebp-0x34]
	add ecx,dword ptr [ebp-0x1CB0]
	mov dword ptr [ebp-0x90],ecx
	mov edx,dword ptr [ebp-0x30]
	mov dword ptr [ebp-0x8C],edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsRidingMechanic
	test eax,eax
	je Block112

 Block95:
	mov dword ptr [ebp-0xB30],0
	mov dword ptr [ebp-0xB38],0
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetMechanicMode
	mov dword ptr [ebp-0xB34],eax
	cmp dword ptr [ebp-0xB34],0x217C05C
	jne Block97

 Block96:
	mov dword ptr [ebp-0xB30],0x30
	mov dword ptr [ebp-0x3C],0xD8
	jmp Block105

 Block97:
	cmp dword ptr [ebp-0xB34],0x217E76D
	jne Block102

 Block98:
	mov dword ptr [ebp-0xB30],0x30
	cmp dword ptr [ebp-0x1EC],0x217E774
	jne Block100

 Block99:
	mov dword ptr [ebp-0x3C],0xE0
	jmp Block101

 Block100:
	mov dword ptr [ebp-0x3C],0xDC

 Block101:
	jmp Block105

 Block102:
	cmp dword ptr [ebp-0xB34],0x217E775
	jne Block104

 Block103:
	mov dword ptr [ebp-0xB30],0x30
	mov dword ptr [ebp-0xB38],4
	mov dword ptr [ebp-0x3C],0xE2
	jmp Block105

 Block104:
	mov dword ptr [ebp-0xB30],0xA

 Block105:
	mov eax,dword ptr [ebp+0x10]
	sub eax,dword ptr [ebp-0xB30]
	mov ecx,dword ptr [ebp-0x6C]
	sub ecx,eax
	mov dword ptr [ebp-0xB2C],ecx
	cmp dword ptr [ebp-0x5C],0
	je Block107

 Block106:
	mov edx,dword ptr [ebp-0xB30]
	neg edx
	mov dword ptr [ebp-0x1CB4],edx
	jmp Block108

 Block107:
	mov eax,dword ptr [ebp-0xB30]
	mov dword ptr [ebp-0x1CB4],eax

 Block108:
	mov ecx,dword ptr [ebp-0x34]
	add ecx,dword ptr [ebp-0x1CB4]
	mov dword ptr [ebp-0x20C],ecx
	cmp dword ptr [ebp-0x5C],0
	je Block110

 Block109:
	mov edx,dword ptr [ebp-0xB2C]
	neg edx
	mov dword ptr [ebp-0x1CB8],edx
	jmp Block111

 Block110:
	mov eax,dword ptr [ebp-0xB2C]
	mov dword ptr [ebp-0x1CB8],eax

 Block111:
	mov ecx,dword ptr [ebp-0x34]
	add ecx,dword ptr [ebp-0x1CB8]
	mov dword ptr [ebp-0x90],ecx
	mov edx,dword ptr [ebp-0x30]
	add edx,dword ptr [ebp-0xB38]
	mov dword ptr [ebp-0x208],edx
	mov eax,dword ptr [ebp-0x30]
	add eax,dword ptr [ebp-0xB38]
	mov dword ptr [ebp-0x8C],eax

 Block112:
	mov ecx,dword ptr [ebp-0x90]
	push ecx
	mov edx,dword ptr [ebp-0x20C]
	push edx
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x88],eax
	mov eax,dword ptr [ebp-0x30]
	mov dword ptr [ebp-0x84],eax
	mov ecx,dword ptr [ebp-0x90]
	push ecx
	mov edx,dword ptr [ebp-0x20C]
	push edx
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0x80],eax
	mov eax,dword ptr [ebp-0x30]
	add eax,1
	mov dword ptr [ebp-0x7C],eax
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call get_vertical_adjust_of_attack_range
	add esp,4
	mov dword ptr [ebp-0x1DC],eax
	cmp dword ptr [ebp-0x1DC],0
	jle Block114

 Block113:
	mov edx,dword ptr [ebp-0x7C]
	add edx,dword ptr [ebp-0x1DC]
	push edx
	mov eax,dword ptr [ebp-0x80]
	push eax
	mov ecx,dword ptr [ebp-0x84]
	sub ecx,dword ptr [ebp-0x1DC]
	push ecx
	mov edx,dword ptr [ebp-0x88]
	push edx
	lea eax,[ebp-0x88]
	push eax
	call SetRect
	jmp Block120

 Block114:
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call is_attack_area_set_by_data
	add esp,4
	test eax,eax
	je Block120

 Block115:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea eax,[ebp-0x88]
	push eax
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea ecx,[ebp-0x1108]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x1110]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0x88]
	push ecx
	call adjust_rect
	add esp,0x10
	cmp dword ptr [ebp-0x1EC],0x4FAA90
	jne Block120

 Block116:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	test eax,eax
	je Block118

 Block117:
	mov edx,dword ptr [ebp-0x88]
	mov dword ptr [ebp-0x1CBC],edx
	jmp Block119

 Block118:
	mov eax,dword ptr [ebp-0x80]
	mov dword ptr [ebp-0x1CBC],eax

 Block119:
	mov ecx,dword ptr [ebp-0x1CBC]
	mov dword ptr [ebp-0x90],ecx

 Block120:
	lea ecx,[ebp-0x1CC]
	call _x_com_ptr<IWzVector2D>::_ctor_default
	mov byte ptr [ebp-4],4
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	call is_rect_attack_shoot_skill
	add esp,4
	test eax,eax
	je Block125

 Block121:
	cmp dword ptr [ebp-0x1EC],0x217C067
	jne Block123

 Block122:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0xF
	lea eax,[ebp-0x1B4]
	push eax
	lea ecx,[ebp-0x88]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0xA8],eax
	mov edx,dword ptr [ebp-0xA8]
	push edx
	lea eax,[ebp-0x1B4]
	push eax
	xor ecx,ecx
	cmp dword ptr [ebp-0x5C],0
	sete cl
	push ecx
	call sort_mob_by_distance
	add esp,0xC
	mov edx,dword ptr [ebp-0xA8]
	push edx
	mov eax,dword ptr [ebp-0x1B8]
	push eax
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0xA8],eax
	jmp Block124

 Block123:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1B8]
	push ecx
	lea edx,[ebp-0x1B4]
	push edx
	lea eax,[ebp-0x88]
	push eax
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0xA8],eax

 Block124:
	jmp Block156

 Block125:
	cmp dword ptr [ebp-0x1EC],0xE6935E
	jne Block130

 Block126:
	push 0
	push 0
	push 0
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x3BC4
	call ZRef<CMob>::op_star_access
	push eax
	push 1
	lea ecx,[ebp-0x1B4]
	push ecx
	lea edx,[ebp-0x88]
	push edx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	mov dword ptr [ebp-0xA8],eax
	cmp dword ptr [ebp-0xA8],1
	jne Block129

 Block127:
	cmp dword ptr [ebp-0x1B4],0
	je Block129

 Block128:
	mov eax,dword ptr [ebp-0x6C]
	push eax
	mov ecx,dword ptr [ebp-0x5C]
	push ecx
	mov edx,dword ptr [ebp-0x1B8]
	push edx
	lea eax,[ebp-0x1B4]
	push eax
	mov ecx,dword ptr [ebp-0x1B4]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobByChainlightning
	mov dword ptr [ebp-0xA8],eax

 Block129:
	jmp Block156

 Block130:
	mov dword ptr [ebp-0x1B4],0
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	call is_guided_bullet_skill
	add esp,4
	test eax,eax
	jne Block132

 Block131:
	push 1
	push 4
	mov eax,dword ptr [ebp-0x30]
	push eax
	mov ecx,dword ptr [ebp-0x90]
	push ecx
	mov edx,dword ptr [ebp-0x20C]
	push edx
	mov eax,dword ptr [ebp-0x34]
	push eax
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInTrapezoid
	mov dword ptr [ebp-0x1B4],eax

 Block132:
	cmp dword ptr [ebp-0x1B4],0
	jne Block134

 Block133:
	push 0
	push 4
	mov ecx,dword ptr [ebp-0x30]
	push ecx
	mov edx,dword ptr [ebp-0x90]
	push edx
	mov eax,dword ptr [ebp-0x20C]
	push eax
	mov ecx,dword ptr [ebp-0x34]
	push ecx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInTrapezoid
	mov dword ptr [ebp-0x1B4],eax

 Block134:
	cmp dword ptr [ebp-0x1B4],0
	je Block137

 Block135:
	sub esp,0x10
	mov edx,esp
	mov eax,dword ptr [ebp-0x88]
	mov dword ptr [edx],eax
	mov ecx,dword ptr [ebp-0x84]
	mov dword ptr [edx+4],ecx
	mov eax,dword ptr [ebp-0x80]
	mov dword ptr [edx+8],eax
	mov ecx,dword ptr [ebp-0x7C]
	mov dword ptr [edx+0xC],ecx
	lea edx,[ebp-0xB40]
	push edx
	mov ecx,dword ptr [ebp-0x1B4]
	call CMob::GetHitPoint
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x18]
	call eax
	push eax
	lea ecx,[ebp-0xB3C]
	push ecx
	lea edx,[ebp-0xB40]
	push edx
	mov eax,dword ptr [ebp-0x30]
	push eax
	mov ecx,dword ptr [ebp-0x34]
	push ecx
	call TSingleton<CWvsPhysicalSpace2D>::GetInstance
	mov ecx,eax
	call CWvsPhysicalSpace2D::CanGoThrough
	test eax,eax
	jne Block137

 Block136:
	mov dword ptr [ebp-0x1B4],0

 Block137:
	cmp dword ptr [ebp-0x1B4],0
	je Block156

 Block138:
	sub esp,0x10
	mov edx,esp
	mov eax,dword ptr [ebp-0x88]
	mov dword ptr [edx],eax
	mov ecx,dword ptr [ebp-0x84]
	mov dword ptr [edx+4],ecx
	mov eax,dword ptr [ebp-0x80]
	mov dword ptr [edx+8],eax
	mov ecx,dword ptr [ebp-0x7C]
	mov dword ptr [edx+0xC],ecx
	lea edx,[ebp-0x1118]
	push edx
	mov ecx,dword ptr [ebp-0x1B4]
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	mov dword ptr [ebp-0x90],ecx
	mov dword ptr [ebp-0x8C],edx
	mov dword ptr [ebp-0xA8],1
	lea eax,[ebp-0x111C]
	push eax
	mov ecx,dword ptr [ebp-0x1B4]
	call CMob::GetVecCtrl
	mov dword ptr [ebp-0x1CC0],eax
	mov ecx,dword ptr [ebp-0x1CC0]
	push ecx
	lea ecx,[ebp-0x1CC]
	call _x_com_ptr<IWzVector2D>::op_assign_copy
	lea ecx,[ebp-0x111C]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	cmp dword ptr [ebp-0x1EC],0x2DCAAC
	je Block146

 Block139:
	cmp dword ptr [ebp-0x1EC],0x2F514D
	je Block146

 Block140:
	cmp dword ptr [ebp-0x1EC],0x1F914CF
	je Block146

 Block141:
	cmp dword ptr [ebp-0x1EC],0x30FEFB
	je Block146

 Block142:
	cmp dword ptr [ebp-0x1EC],0x2F785B
	je Block146

 Block143:
	cmp dword ptr [ebp-0x1EC],0x217C05C
	je Block146

 Block144:
	cmp dword ptr [ebp-0x1EC],0x217E76D
	je Block146

 Block145:
	cmp dword ptr [ebp-0x1EC],0x217E775
	jne Block154

 Block146:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0xF74]
	call SKILLLEVELDATA::_ctor_0
	mov byte ptr [ebp-4],5
	lea eax,[ebp-0xDA8]
	push eax
	lea ecx,[ebp-0xB50]
	push ecx
	call SECRECT::ToRect
	add esp,8
	mov edx,dword ptr [ebp-0x8C]
	push edx
	mov eax,dword ptr [ebp-0x90]
	push eax
	lea ecx,[ebp-0xB50]
	push ecx
	call OffsetRect
	cmp dword ptr [ebp-0x1EC],0x2DCAAC
	jne Block153

 Block147:
	cmp dword ptr [ebp-0x5C],0
	je Block150

 Block148:
	mov edx,dword ptr [ebp-0xB48]
	cmp edx,dword ptr [ebp-0x34]
	jl Block150

 Block149:
	push 0
	mov eax,dword ptr [ebp-0x34]
	sub eax,dword ptr [ebp-0xB48]
	push eax
	lea ecx,[ebp-0xB50]
	push ecx
	call OffsetRect
	jmp Block153

 Block150:
	cmp dword ptr [ebp-0x5C],0
	jne Block153

 Block151:
	mov edx,dword ptr [ebp-0xB50]
	cmp edx,dword ptr [ebp-0x34]
	jg Block153

 Block152:
	push 0
	mov eax,dword ptr [ebp-0x34]
	sub eax,dword ptr [ebp-0xB50]
	push eax
	lea ecx,[ebp-0xB50]
	push ecx
	call OffsetRect

 Block153:
	push 0
	push 0
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp-0x1B4]
	push edx
	mov eax,dword ptr [ebp-0x1B8]
	sub eax,1
	push eax
	lea ecx,[ebp-0x1B0]
	push ecx
	lea edx,[ebp-0xB50]
	push edx
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobInRect
	add eax,dword ptr [ebp-0xA8]
	mov dword ptr [ebp-0xA8],eax
	mov byte ptr [ebp-4],4
	lea ecx,[ebp-0xF74]
	call SKILLLEVELDATA::~SKILLLEVELDATA
	jmp Block156

 Block154:
	cmp dword ptr [ebp-0x1EC],0x4E23EA
	jne Block156

 Block155:
	push 0x96
	mov eax,dword ptr [ebp-0x5C]
	push eax
	mov ecx,dword ptr [ebp-0x1B8]
	push ecx
	lea edx,[ebp-0x1B4]
	push edx
	mov eax,dword ptr [ebp-0x1B4]
	push eax
	call TSingleton<CMobPool>::GetInstance
	mov ecx,eax
	call CMobPool::FindHitMobByChainlightning
	mov dword ptr [ebp-0xA8],eax

 Block156:
	mov ecx,dword ptr [ebp-0x1C78]
	cmp dword ptr [ecx+0x3AD4],0x2F9F6C
	je Block172

 Block157:
	mov edx,dword ptr [ebp-0x1C78]
	cmp dword ptr [edx+0x3AD4],0x4FAA8C
	je Block172

 Block158:
	cmp dword ptr [ebp-0x1EC],0xE6935E
	je Block172

 Block159:
	mov eax,dword ptr [ebp-0x1C78]
	cmp dword ptr [eax+0x3AD4],0xC80EDA
	je Block172

 Block160:
	mov ecx,dword ptr [ebp-0x1C78]
	cmp dword ptr [ecx+0x3AD4],0x21612A9
	je Block172

 Block161:
	mov edx,dword ptr [ebp-0x1C78]
	cmp dword ptr [edx+0x3AD4],0x2179951
	je Block172

 Block162:
	mov eax,dword ptr [ebp-0x1C78]
	cmp dword ptr [eax+0x3AD4],0x1F962F1
	je Block172

 Block163:
	cmp dword ptr [ebp+8],0
	je Block165

 Block164:
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsFinalAttack
	test eax,eax
	jne Block172

 Block165:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsOnPlayingOneTimeAction
	test eax,eax
	je Block170

 Block166:
	cmp dword ptr [ebp+8],0
	je Block168

 Block167:
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsFinalAttack
	test eax,eax
	jne Block169

 Block168:
	mov dword ptr [ebp-0x1120],0
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x1CC]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1120]
	jmp Block528

 Block169:
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x44]
	call eax
	push 0
	push 0x64
	push 6
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x88]
	mov edx,dword ptr [eax+0x14]
	call edx

 Block170:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	mov edx,dword ptr [ebp-0x210]
	push edx
	mov eax,dword ptr [ebp-0x3C]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::SetAttackAction
	test eax,eax
	jne Block172

 Block171:
	mov dword ptr [ebp-0x1124],0
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x1CC]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1124]
	jmp Block528

 Block172:
	cmp dword ptr [ebp-0x1EC],0x2F9F6C
	je Block180

 Block173:
	cmp dword ptr [ebp-0x1EC],0x4FAA8C
	je Block180

 Block174:
	cmp dword ptr [ebp-0x1EC],0xC80EDA
	je Block180

 Block175:
	cmp dword ptr [ebp-0x1EC],0x21612A9
	je Block180

 Block176:
	cmp dword ptr [ebp-0x1EC],0x2179951
	je Block180

 Block177:
	cmp dword ptr [ebp-0x1EC],0x1F962F1
	je Block180

 Block178:
	lea ecx,[ebp-0x112C]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x1134]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x3BA4
	call CAntiRepeat::TryRepeat
	test eax,eax
	jne Block180

 Block179:
	mov dword ptr [ebp-0x1138],0
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x1CC]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1138]
	jmp Block528

 Block180:
	mov ecx,dword ptr [ebp-0x1C78]
	cmp dword ptr [ecx+0x3AD4],0x2F9F6C
	je Block186

 Block181:
	mov edx,dword ptr [ebp-0x1C78]
	cmp dword ptr [edx+0x3AD4],0x4FAA8C
	je Block186

 Block182:
	mov eax,dword ptr [ebp-0x1C78]
	cmp dword ptr [eax+0x3AD4],0xC80EDA
	je Block186

 Block183:
	mov ecx,dword ptr [ebp-0x1C78]
	cmp dword ptr [ecx+0x3AD4],0x1F962F1
	je Block186

 Block184:
	mov edx,dword ptr [ebp-0x1C78]
	cmp dword ptr [edx+0x3AD4],0x21612A9
	je Block186

 Block185:
	mov eax,dword ptr [ebp-0x1C78]
	cmp dword ptr [eax+0x3AD4],0x2179951
	jne Block187

 Block186:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::SetAlertMode
	jmp Block196

 Block187:
	mov ecx,dword ptr [ebp-0x1C78]
	cmp dword ptr [ecx+0x3AE4],0x217C05C
	je Block190

 Block188:
	mov edx,dword ptr [ebp-0x1C78]
	cmp dword ptr [edx+0x3AE4],0x217E76D
	je Block190

 Block189:
	mov eax,dword ptr [ebp-0x1C78]
	cmp dword ptr [eax+0x3AE4],0x217E775
	jne Block191

 Block190:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::ShowEffectSiegeAttack
	jmp Block196

 Block191:
	cmp dword ptr [ebp+8],0
	je Block196

 Block192:
	cmp dword ptr [ebp-0x70],0
	jne Block196

 Block193:
	cmp dword ptr [ebp-0x1EC],0xE6935E
	je Block196

 Block194:
	cmp dword ptr [ebp-0x1EC],0xC7E7CA
	je Block196

 Block195:
	push 0
	push 0x7FFFFFFF
	push 0
	mov eax,dword ptr [ebp-0x210]
	push eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::ShowSkillEffect

 Block196:
	mov eax,dword ptr [ebp-0x3C]
	imul eax,0x18
	add eax,offset ActionData::m_saCharacterActions
	mov dword ptr [ebp-0x2C],eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetActionInfo
	mov ecx,dword ptr [ebp-0x2C]
	mov edx,dword ptr [ecx+0x10]
	imul edx,dword ptr [eax+8]
	mov ecx,dword ptr [ebp-0x2C]
	mov eax,edx
	cdq
	idiv dword ptr [ecx+0xC]
	push eax
	mov edx,dword ptr [ebp+8]
	push edx
	call CUser::GetShootDelay
	add esp,8
	mov dword ptr [ebp-0x13C],eax
	cmp dword ptr [ebp+8],0
	je Block198

 Block197:
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::IsFinalAttack
	test eax,eax
	jne Block199

 Block198:
	push 0
	push 0
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	call eax
	movzx ecx,al
	push ecx
	mov esi,esp
	mov dword ptr [ebp-0x113C],esp
	push ecx
	mov edx,dword ptr [ebp-0x94]
	push edx
	mov eax,dword ptr [ebp-0x1C78]
	add eax,0x5B0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1140],esp
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1CC4],eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	push esi
	call CUser::GetAfterimageUOL
	add esp,0x18
	mov dword ptr [ebp-0x1CC8],eax
	mov eax,dword ptr [ebp-0x1CC8]
	mov dword ptr [ebp-0x1CCC],eax
	mov ecx,dword ptr [ebp-0x3C]
	push ecx
	mov edx,dword ptr [ebp-0x5C]
	push edx
	mov eax,dword ptr [ebp-0x150]
	add eax,dword ptr [ebp-0x13C]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::RegisterAfterimage

 Block199:
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call get_cool_time
	add esp,4
	test eax,eax
	je Block201

 Block200:
	mov edx,dword ptr [ebp-0x2C]
	mov esi,dword ptr [ebp-0x150]
	add esi,dword ptr [edx+0xC]
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	call get_cool_time
	add esp,4
	add esi,eax
	mov dword ptr [ebp-0x1144],esi
	lea ecx,[ebp-0x1144]
	push ecx
	lea edx,[ebp-0x1EC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x46C4
	call ZMap<long, long, long>::SetAt

 Block201:
	cmp dword ptr [ebp+8],0
	je Block203

 Block202:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nBulletCount
	mov dword ptr [ebp-0x1CD0],eax
	jmp Block204

 Block203:
	mov dword ptr [ebp-0x1CD0],0

 Block204:
	push 1
	mov ecx,dword ptr [ebp-0x1CD0]
	push ecx
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0x148],eax
	cmp dword ptr [ebp-0x1EC],0x30FEFE
	jne Block208

 Block205:
	mov dword ptr [ebp-0xF78],0
	lea edx,[ebp-0xF78]
	push edx
	push 0x31222A
	mov eax,dword ptr [ebp-0x74]
	push eax
	call TSingleton<CSkillInfo>::GetInstance
	mov ecx,eax
	call CSkillInfo::GetSkillLevel_0
	mov dword ptr [ebp-0xF7C],eax
	cmp dword ptr [ebp-0xF78],0
	je Block208

 Block206:
	cmp dword ptr [ebp-0xF7C],0
	je Block208

 Block207:
	push 1
	mov ecx,dword ptr [ebp-0xF7C]
	push ecx
	mov ecx,dword ptr [ebp-0xF78]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nBulletCount
	push eax
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0x148],eax

 Block208:
	mov edx,dword ptr [ebp-0x20C]
	mov dword ptr [ebp-0x58],edx
	mov eax,dword ptr [ebp-0x208]
	mov dword ptr [ebp-0x54],eax
	mov ecx,dword ptr [ebp-0x20C]
	mov dword ptr [ebp-0x50],ecx
	mov edx,dword ptr [ebp-0x208]
	mov dword ptr [ebp-0x4C],edx
	mov dword ptr [ebp-0x178],1
	cmp dword ptr [ebp-0x1F4],0
	je Block212

 Block209:
	cmp dword ptr [ebp-0x1EC],0x3EE1AB
	je Block212

 Block210:
	cmp dword ptr [ebp-0x1EC],0x40684B
	je Block212

 Block211:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0x3C
	add eax,0xFFFFFFE2
	add eax,dword ptr [ebp-0x50]
	mov dword ptr [ebp-0x50],eax
	mov dword ptr [ebp-0x178],2

 Block212:
	cmp dword ptr [ebp-0x1EC],0x4FAA8F
	je Block214

 Block213:
	cmp dword ptr [ebp-0x1EC],0x4FAA90
	jne Block215

 Block214:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFC4
	add eax,0x1E
	add eax,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0x58],eax
	jmp Block223

 Block215:
	cmp dword ptr [ebp-0x1EC],0xE6935F
	jne Block217

 Block216:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0xFFFFFED4
	add eax,0x96
	add eax,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0x58],eax
	jmp Block223

 Block217:
	cmp dword ptr [ebp-0x1EC],0xA9634C
	jne Block219

 Block218:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	and eax,0xFFFFFF74
	add eax,0x46
	add eax,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0x58],eax
	jmp Block223

 Block219:
	cmp dword ptr [ebp-0x1EC],0x217C05C
	je Block222

 Block220:
	cmp dword ptr [ebp-0x1EC],0x217E76D
	je Block222

 Block221:
	cmp dword ptr [ebp-0x1EC],0x217E775
	jne Block223

 Block222:
	mov dword ptr [ebp-0x178],3

 Block223:
	mov eax,dword ptr [ebp-0x90]
	sub eax,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0xB20],eax
	mov ecx,dword ptr [ebp-0x8C]
	sub ecx,dword ptr [ebp-0x54]
	mov dword ptr [ebp-0x28],ecx
	mov edx,dword ptr [ebp-0xB20]
	imul edx,dword ptr [ebp-0xB20]
	mov eax,dword ptr [ebp-0x28]
	imul eax,dword ptr [ebp-0x28]
	add edx,eax
	mov dword ptr [ebp-0x1CD4],edx
	fild dword ptr [ebp-0x1CD4]
	call __CIsqrt
	fstp qword ptr [ebp-0xA4]
	lea ecx,[ebp-0x24]
	call Ztl_bstr_t::_ctor_default
	mov byte ptr [ebp-4],6
	cmp dword ptr [ebp+8],0
	je Block228

 Block224:
	mov ecx,dword ptr [ebp+8]
	cmp dword ptr [ecx+0x20C],0
	je Block226

 Block225:
	mov dl,byte ptr [ebp+0xC]
	mov byte ptr [ebp-0x1CD5],dl
	jmp Block227

 Block226:
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	call eax
	mov byte ptr [ebp-0x1CD5],al

 Block227:
	push 0
	movzx ecx,byte ptr [ebp-0x1CD5]
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	lea eax,[ebp-0x1148]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetBallUOL
	mov dword ptr [ebp-0x1CDC],eax
	mov ecx,dword ptr [ebp-0x1CDC]
	push ecx
	lea ecx,[ebp-0x24]
	call Ztl_bstr_t::op_assign
	lea ecx,[ebp-0x1148]
	call Ztl_bstr_t::~Ztl_bstr_t

 Block228:
	mov edx,dword ptr [ebp+8]
	push edx
	call is_shoot_skill_not_showing_bullet
	add esp,4
	test eax,eax
	jne Block294

 Block229:
	cmp dword ptr [ebp-0x1EC],0x4E23EA
	je Block294

 Block230:
	cmp dword ptr [ebp-0x1EC],0xE6935E
	je Block294

 Block231:
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block233

 Block232:
	mov dword ptr [ebp-0x14],0x239948

 Block233:
	fld qword ptr [ebp-0xA4]
	fmul qword ptr [__real_3ff8000000000000]
	call __ftol2_sse
	mov dword ptr [ebp-0xF88],eax
	cmp dword ptr [ebp-0x1EC],0x141F5E4
	je Block235

 Block234:
	cmp dword ptr [ebp-0x1EC],0x1421CF4
	jne Block236

 Block235:
	fld qword ptr [ebp-0xA4]
	fmul qword ptr [__real_3ff0000000000000]
	call __ftol2_sse
	mov dword ptr [ebp-0xF88],eax
	jmp Block238

 Block236:
	cmp dword ptr [ebp-0x1EC],0x1F914CF
	jne Block238

 Block237:
	fld qword ptr [ebp-0xA4]
	fmul qword ptr [__real_4004000000000000]
	call __ftol2_sse
	mov dword ptr [ebp-0xF88],eax

 Block238:
	push 0
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	mov edx,dword ptr [ebp-0x14]
	push edx
	call CUser::GetBulletDelay
	add esp,0xC
	mov dword ptr [ebp-0xF84],eax
	cmp dword ptr [ebp-0x1EC],0x2DCAAC
	jne Block243

 Block239:
	cmp dword ptr [ebp-0xA8],0
	je Block241

 Block240:
	mov eax,dword ptr [ebp-0xA8]
	mov dword ptr [ebp-0x1CE0],eax
	jmp Block242

 Block241:
	mov dword ptr [ebp-0x1CE0],1

 Block242:
	mov ecx,dword ptr [ebp-0x1CE0]
	mov dword ptr [ebp-0x1CE4],ecx
	jmp Block244

 Block243:
	mov edx,dword ptr [ebp-0x148]
	imul edx,dword ptr [ebp-0x178]
	mov dword ptr [ebp-0x1CE4],edx

 Block244:
	mov eax,dword ptr [ebp-0x1CE4]
	mov dword ptr [ebp-0xF80],eax
	mov dword ptr [ebp-0xF8C],0
	jmp Block246

 Block245:
	mov ecx,dword ptr [ebp-0xF8C]
	add ecx,1
	mov dword ptr [ebp-0xF8C],ecx

 Block246:
	mov edx,dword ptr [ebp-0xF8C]
	cmp edx,dword ptr [ebp-0xF80]
	jge Block294

 Block247:
	mov eax,dword ptr [ebp-0x90]
	mov dword ptr [ebp-0xF98],eax
	mov ecx,dword ptr [ebp-0x8C]
	mov dword ptr [ebp-0xF94],ecx
	lea edx,[ebp-0x1CC]
	push edx
	lea ecx,[ebp-0xF90]
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov byte ptr [ebp-4],7
	cmp dword ptr [ebp-0x1EC],0x2DCAAC
	jne Block250

 Block248:
	cmp dword ptr [ebp-0xF8C],1
	jl Block250

 Block249:
	lea eax,[ebp-0x114C]
	push eax
	mov ecx,dword ptr [ebp-0xF8C]
	mov ecx,dword ptr [ebp+ecx*4-0x1B4]
	call CMob::GetVecCtrl
	mov dword ptr [ebp-0x1CE8],eax
	mov edx,dword ptr [ebp-0x1CE8]
	push edx
	lea ecx,[ebp-0xF90]
	call _x_com_ptr<IWzVector2D>::op_assign_copy
	lea ecx,[ebp-0x114C]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	sub esp,0x10
	mov eax,esp
	mov ecx,dword ptr [ebp-0x88]
	mov dword ptr [eax],ecx
	mov edx,dword ptr [ebp-0x84]
	mov dword ptr [eax+4],edx
	mov ecx,dword ptr [ebp-0x80]
	mov dword ptr [eax+8],ecx
	mov edx,dword ptr [ebp-0x7C]
	mov dword ptr [eax+0xC],edx
	lea eax,[ebp-0x1154]
	push eax
	mov ecx,dword ptr [ebp-0xF8C]
	mov ecx,dword ptr [ebp+ecx*4-0x1B4]
	call CMob::GetHitPointHeightRand
	mov edx,dword ptr [eax]
	mov eax,dword ptr [eax+4]
	mov dword ptr [ebp-0xF98],edx
	mov dword ptr [ebp-0xF94],eax
	mov ecx,dword ptr [ebp-0xF98]
	sub ecx,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0xFA0],ecx
	mov edx,dword ptr [ebp-0xF94]
	sub edx,dword ptr [ebp-0x54]
	mov dword ptr [ebp-0xF9C],edx
	mov eax,dword ptr [ebp-0xFA0]
	imul eax,dword ptr [ebp-0xFA0]
	mov ecx,dword ptr [ebp-0xF9C]
	imul ecx,dword ptr [ebp-0xF9C]
	add eax,ecx
	mov dword ptr [ebp-0x1CEC],eax
	fild dword ptr [ebp-0x1CEC]
	call __CIsqrt
	fstp qword ptr [ebp-0xA4]
	fld qword ptr [ebp-0xA4]
	fmul qword ptr [__real_3ff8000000000000]
	call __ftol2_sse
	mov dword ptr [ebp-0xF88],eax

 Block250:
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::IsFanShapeShoot
	test eax,eax
	je Block252

 Block251:
	mov eax,dword ptr [ebp-0xF8C]
	shl eax,1
	mov ecx,dword ptr [ebp-0x148]
	sub ecx,1
	sub eax,ecx
	imul eax,7
	add eax,dword ptr [ebp-0xF94]
	mov dword ptr [ebp-0xF94],eax

 Block252:
	cmp dword ptr [ebp-0x1EC],0x1F914CF
	jne Block257

 Block253:
	mov edx,dword ptr [ebp-0xF8C]
	cmp edx,dword ptr [ebp-0x148]
	jge Block255

 Block254:
	mov eax,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0x1164],eax
	mov ecx,dword ptr [ebp-0x54]
	mov dword ptr [ebp-0x1160],ecx
	jmp Block256

 Block255:
	mov edx,dword ptr [ebp-0x50]
	mov dword ptr [ebp-0x1164],edx
	mov eax,dword ptr [ebp-0x4C]
	mov dword ptr [ebp-0x1160],eax

 Block256:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1158],esp
	lea edx,[ebp-0x24]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1CF0],eax
	mov eax,dword ptr [ebp-0x1CF0]
	mov dword ptr [ebp-0x1CF4],eax
	mov byte ptr [ebp-4],8
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx+0x47E8]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x115C],esp
	lea eax,[ebp-0xF90]
	push eax
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov dword ptr [ebp-0x1CF8],eax
	mov ecx,dword ptr [ebp-0xF94]
	push ecx
	mov edx,dword ptr [ebp-0xF98]
	push edx
	mov eax,dword ptr [ebp-0x1160]
	push eax
	mov ecx,dword ptr [ebp-0x1164]
	push ecx
	mov edx,dword ptr [ebp-0xF84]
	imul edx,dword ptr [ebp-0xF8C]
	mov eax,dword ptr [ebp-0x150]
	add eax,dword ptr [ebp-0x13C]
	add eax,dword ptr [ebp-0xF88]
	add eax,edx
	push eax
	mov ecx,dword ptr [ebp-0xF84]
	imul ecx,dword ptr [ebp-0xF8C]
	mov edx,dword ptr [ebp-0x150]
	add edx,dword ptr [ebp-0x13C]
	add edx,ecx
	push edx
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],7
	mov ecx,eax
	call CAnimationDisplayer::RegisterMobBulletAnimation
	jmp Block293

 Block257:
	cmp dword ptr [ebp-0x1EC],0x217C05C
	je Block262

 Block258:
	cmp dword ptr [ebp-0x1EC],0x217E76D
	je Block262

 Block259:
	cmp dword ptr [ebp-0x1EC],0x217E775
	je Block262

 Block260:
	cmp dword ptr [ebp-0x1EC],0x21612AC
	je Block262

 Block261:
	cmp dword ptr [ebp-0x1EC],0x2179952
	jne Block269

 Block262:
	mov eax,dword ptr [ebp-0xF8C]
	push eax
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	mov edx,dword ptr [ebp-0x54]
	push edx
	mov eax,dword ptr [ebp-0x58]
	push eax
	lea ecx,[ebp-0xFA8]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetRidingMechanicBulletPos
	mov edx,dword ptr [ebp-0xF8C]
	push edx
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	mov ecx,dword ptr [ebp-0xF94]
	push ecx
	mov edx,dword ptr [ebp-0xF98]
	push edx
	lea eax,[ebp-0x116C]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetRidingMechanicBulletPos
	mov ecx,dword ptr [eax+4]
	mov dword ptr [ebp-0xF94],ecx
	cmp dword ptr [ebp-0xF8C],2
	jle Block267

 Block263:
	cmp dword ptr [ebp-0x1EC],0x217C05C
	je Block266

 Block264:
	cmp dword ptr [ebp-0x1EC],0x217E76D
	je Block266

 Block265:
	cmp dword ptr [ebp-0x1EC],0x217E775
	jne Block267

 Block266:
	mov dword ptr [ebp-0x1CFC],0xB4
	jmp Block268

 Block267:
	mov dword ptr [ebp-0x1CFC],0

 Block268:
	mov edx,dword ptr [ebp-0x1CFC]
	mov dword ptr [ebp-0xFAC],edx
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1170],esp
	lea eax,[ebp-0x24]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1D00],eax
	mov ecx,dword ptr [ebp-0x1D00]
	mov dword ptr [ebp-0x1D04],ecx
	mov byte ptr [ebp-4],9
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1174],esp
	lea edx,[ebp-0xF90]
	push edx
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov dword ptr [ebp-0x1D08],eax
	mov eax,dword ptr [ebp-0xF94]
	push eax
	mov ecx,dword ptr [ebp-0xF98]
	push ecx
	mov edx,dword ptr [ebp-0xFA4]
	push edx
	mov eax,dword ptr [ebp-0xFA8]
	push eax
	mov ecx,dword ptr [ebp-0xF84]
	imul ecx,dword ptr [ebp-0xF8C]
	mov edx,dword ptr [ebp-0x150]
	add edx,dword ptr [ebp-0x13C]
	add edx,dword ptr [ebp-0xFAC]
	add edx,dword ptr [ebp-0xF88]
	add edx,ecx
	push edx
	mov eax,dword ptr [ebp-0xF84]
	imul eax,dword ptr [ebp-0xF8C]
	mov ecx,dword ptr [ebp-0x150]
	add ecx,dword ptr [ebp-0x13C]
	add ecx,dword ptr [ebp-0xFAC]
	add ecx,eax
	push ecx
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],7
	mov ecx,eax
	call CAnimationDisplayer::RegisterMagicBulletAnimation
	jmp Block293

 Block269:
	cmp dword ptr [ebp-0x14C],0
	jne Block279

 Block270:
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	call is_shoot_skill_not_consuming_bullet
	add esp,4
	test eax,eax
	jne Block279

 Block271:
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	call is_guided_bullet_skill
	add esp,4
	test eax,eax
	jne Block279

 Block272:
	cmp dword ptr [ebp-0x1EC],0x2F9F6C
	je Block279

 Block273:
	cmp dword ptr [ebp-0x1EC],0x4FAA8F
	je Block279

 Block274:
	cmp dword ptr [ebp-0x1EC],0x4FAA90
	je Block279

 Block275:
	cmp dword ptr [ebp-0x1EC],0xC80EDA
	je Block279

 Block276:
	cmp dword ptr [ebp-0x1EC],0xC80EDE
	je Block279

 Block277:
	cmp dword ptr [ebp-0x1EC],0xC80EDF
	je Block279

 Block278:
	cmp dword ptr [ebp-0x1EC],0x1F962F1
	jne Block286

 Block279:
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call get_soul_arrow
	add esp,4
	add eax,0x22C
	push eax
	lea ecx,[ebp-0xFB0]
	call Ztl_bstr_t::_ctor_copy
	mov byte ptr [ebp-4],0xA
	lea ecx,[ebp-0x24]
	call _xbstr_t::length
	test eax,eax
	jne Block281

 Block280:
	lea ecx,[ebp-0xFB0]
	mov dword ptr [ebp-0x1D0C],ecx
	jmp Block282

 Block281:
	lea edx,[ebp-0x24]
	mov dword ptr [ebp-0x1D0C],edx

 Block282:
	mov eax,dword ptr [ebp-0x1D0C]
	mov dword ptr [ebp-0x117C],eax
	mov ecx,dword ptr [ebp-0xF8C]
	cmp ecx,dword ptr [ebp-0x148]
	jge Block284

 Block283:
	mov edx,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0x118C],edx
	mov eax,dword ptr [ebp-0x54]
	mov dword ptr [ebp-0x1188],eax
	jmp Block285

 Block284:
	mov ecx,dword ptr [ebp-0x50]
	mov dword ptr [ebp-0x118C],ecx
	mov edx,dword ptr [ebp-0x4C]
	mov dword ptr [ebp-0x1188],edx

 Block285:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1178],esp
	mov eax,dword ptr [ebp-0x117C]
	push eax
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1D10],eax
	mov ecx,dword ptr [ebp-0x1D10]
	mov dword ptr [ebp-0x1D14],ecx
	mov byte ptr [ebp-4],0xB
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1180],esp
	lea edx,[ebp-0xF90]
	push edx
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov dword ptr [ebp-0x1D18],eax
	mov eax,dword ptr [ebp-0xF94]
	push eax
	mov ecx,dword ptr [ebp-0xF98]
	push ecx
	mov edx,dword ptr [ebp-0x1188]
	push edx
	mov eax,dword ptr [ebp-0x118C]
	push eax
	mov ecx,dword ptr [ebp-0xF84]
	imul ecx,dword ptr [ebp-0xF8C]
	mov edx,dword ptr [ebp-0x150]
	add edx,dword ptr [ebp-0x13C]
	add edx,dword ptr [ebp-0xF88]
	add edx,ecx
	push edx
	mov eax,dword ptr [ebp-0xF84]
	imul eax,dword ptr [ebp-0xF8C]
	mov ecx,dword ptr [ebp-0x150]
	add ecx,dword ptr [ebp-0x13C]
	add ecx,eax
	push ecx
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],0xA
	mov ecx,eax
	call CAnimationDisplayer::RegisterMagicBulletAnimation
	mov byte ptr [ebp-4],7
	lea ecx,[ebp-0xFB0]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block293

 Block286:
	cmp dword ptr [ebp-0x168],0
	je Block288

 Block287:
	mov edx,dword ptr [ebp-0x168]
	mov dword ptr [ebp-0x1D1C],edx
	jmp Block289

 Block288:
	mov eax,dword ptr [ebp-0x14]
	mov dword ptr [ebp-0x1D1C],eax

 Block289:
	mov ecx,dword ptr [ebp-0xF8C]
	cmp ecx,dword ptr [ebp-0x148]
	jge Block291

 Block290:
	mov edx,dword ptr [ebp-0x58]
	mov dword ptr [ebp-0x119C],edx
	mov eax,dword ptr [ebp-0x54]
	mov dword ptr [ebp-0x1198],eax
	jmp Block292

 Block291:
	mov ecx,dword ptr [ebp-0x50]
	mov dword ptr [ebp-0x119C],ecx
	mov edx,dword ptr [ebp-0x4C]
	mov dword ptr [ebp-0x1198],edx

 Block292:
	mov eax,dword ptr [ebp-0x1D1C]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1190],esp
	lea edx,[ebp-0x24]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1D20],eax
	mov eax,dword ptr [ebp-0x1D20]
	mov dword ptr [ebp-0x1D24],eax
	mov byte ptr [ebp-4],0xC
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x1960
	call _x_com_ptr<IWzGr2DLayer>::op_arrow
	mov ecx,eax
	call IWzGr2DLayer::Getz
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1194],esp
	lea edx,[ebp-0xF90]
	push edx
	call _x_com_ptr<IWzVector2D>::_ctor_copy
	mov dword ptr [ebp-0x1D28],eax
	mov eax,dword ptr [ebp-0xF94]
	push eax
	mov ecx,dword ptr [ebp-0xF98]
	push ecx
	mov edx,dword ptr [ebp-0x1198]
	push edx
	mov eax,dword ptr [ebp-0x119C]
	push eax
	mov ecx,dword ptr [ebp-0xF84]
	imul ecx,dword ptr [ebp-0xF8C]
	mov edx,dword ptr [ebp-0x150]
	add edx,dword ptr [ebp-0x13C]
	add edx,dword ptr [ebp-0xF88]
	add edx,ecx
	push edx
	mov eax,dword ptr [ebp-0xF84]
	imul eax,dword ptr [ebp-0xF8C]
	mov ecx,dword ptr [ebp-0x150]
	add ecx,dword ptr [ebp-0x13C]
	add ecx,eax
	push ecx
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],7
	mov ecx,eax
	call CAnimationDisplayer::RegisterBulletAnimation

 Block293:
	mov byte ptr [ebp-4],6
	lea ecx,[ebp-0xF90]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	jmp Block245

 Block294:
	cmp dword ptr [ebp+8],0
	je Block296

 Block295:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nAttackCount
	mov dword ptr [ebp-0x1D2C],eax
	jmp Block297

 Block296:
	mov dword ptr [ebp-0x1D2C],0

 Block297:
	push 1
	mov eax,dword ptr [ebp-0x1D2C]
	push eax
	call _zmax_long
	add esp,8
	mov dword ptr [ebp-0x144],eax
	push 0xF
	mov ecx,dword ptr [ebp-0x144]
	imul ecx,dword ptr [ebp-0x148]
	imul ecx,dword ptr [ebp-0x178]
	push ecx
	call _zmin_long
	add esp,8
	mov dword ptr [ebp-0x174],eax
	mov edx,dword ptr [ebp-0x13C]
	mov dword ptr [ebp-0x138],edx
	mov dword ptr [ebp-0xFB4],0
	jmp Block299

 Block298:
	mov eax,dword ptr [ebp-0xFB4]
	add eax,1
	mov dword ptr [ebp-0xFB4],eax

 Block299:
	mov ecx,dword ptr [ebp-0xFB4]
	cmp ecx,dword ptr [ebp-0xA8]
	jge Block321

 Block300:
	mov edx,dword ptr [ebp-0xFB4]
	imul edx,0x98
	lea eax,[ebp+edx-0xB1C]
	mov dword ptr [ebp-0xFB8],eax
	push 0x98
	push 0
	mov ecx,dword ptr [ebp-0xFB8]
	push ecx
	call _memset
	add esp,0xC
	mov edx,dword ptr [ebp-0xFB8]
	mov eax,dword ptr [ebp-0xFB4]
	mov ecx,dword ptr [ebp+eax*4-0x1B4]
	mov dword ptr [edx],ecx
	mov edx,dword ptr [ebp-0xFB8]
	mov ecx,dword ptr [edx]
	call CMob::GetRandomHitAction
	mov ecx,dword ptr [ebp-0xFB8]
	mov dword ptr [ecx+4],eax
	push 0
	mov edx,dword ptr [ebp-0xFB8]
	mov ecx,dword ptr [edx]
	call CMob::GetCurrentAction
	mov ecx,dword ptr [ebp-0xFB8]
	mov dword ptr [ecx+8],eax
	mov edx,dword ptr [ebp-0xFB8]
	mov ecx,dword ptr [edx]
	call CMob::GetCurrentFrameIndex
	mov ecx,dword ptr [ebp-0xFB8]
	mov dword ptr [ecx+0xC],eax
	sub esp,0x10
	mov edx,esp
	mov eax,dword ptr [ebp-0x88]
	mov dword ptr [edx],eax
	mov ecx,dword ptr [ebp-0x84]
	mov dword ptr [edx+4],ecx
	mov eax,dword ptr [ebp-0x80]
	mov dword ptr [edx+8],eax
	mov ecx,dword ptr [ebp-0x7C]
	mov dword ptr [edx+0xC],ecx
	lea edx,[ebp-0x11A4]
	push edx
	mov eax,dword ptr [ebp-0xFB8]
	mov ecx,dword ptr [eax]
	call CMob::GetHitPoint
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [ebp-0xFB8]
	mov dword ptr [eax+0x90],ecx
	mov dword ptr [eax+0x94],edx
	cmp dword ptr [ebp-0x1EC],0x2F514D
	je Block302

 Block301:
	cmp dword ptr [ebp-0x1EC],0x1F914CF
	jne Block304

 Block302:
	cmp dword ptr [ebp-0xFB4],0
	je Block304

 Block303:
	mov ecx,dword ptr [ebp-0xB0C]
	add ecx,0xC8
	mov edx,dword ptr [ebp-0xFB8]
	mov dword ptr [edx+0x10],ecx
	jmp Block320

 Block304:
	cmp dword ptr [ebp-0x1EC],0x30FEFB
	je Block306

 Block305:
	cmp dword ptr [ebp-0x1EC],0x2F785B
	jne Block308

 Block306:
	cmp dword ptr [ebp-0xFB4],0
	je Block308

 Block307:
	mov eax,dword ptr [ebp-0xFB4]
	imul eax,0x1E
	mov ecx,dword ptr [ebp-0xB0C]
	lea edx,[ecx+eax+0x78]
	mov eax,dword ptr [ebp-0xFB8]
	mov dword ptr [eax+0x10],edx
	jmp Block320

 Block308:
	cmp dword ptr [ebp-0x1EC],0x2F785C
	je Block311

 Block309:
	cmp dword ptr [ebp-0x1EC],0x30FEFC
	je Block311

 Block310:
	cmp dword ptr [ebp-0x1EC],0xC80ED8
	jne Block312

 Block311:
	mov ecx,dword ptr [ebp-0x13C]
	add ecx,0x190
	mov edx,dword ptr [ebp-0xFB8]
	mov dword ptr [edx+0x10],ecx
	jmp Block320

 Block312:
	cmp dword ptr [ebp-0x1EC],0x4E23EA
	je Block314

 Block313:
	cmp dword ptr [ebp-0x1EC],0xE6935E
	jne Block317

 Block314:
	mov dword ptr [ebp-0xFBC],0
	cmp dword ptr [ebp-0xFB4],0
	je Block316

 Block315:
	mov eax,dword ptr [ebp-0xFB4]
	mov ecx,dword ptr [ebp+eax*4-0x1B8]
	mov dword ptr [ebp-0xFBC],ecx

 Block316:
	lea edx,[ebp-0x24]
	push edx
	lea eax,[ebp-0x138]
	push eax
	mov ecx,dword ptr [ebp-0x150]
	push ecx
	mov edx,dword ptr [ebp-0xFBC]
	push edx
	lea eax,[ebp-0x58]
	push eax
	mov ecx,dword ptr [ebp-0xFB8]
	push ecx
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::RegisterSerialBullet
	jmp Block320

 Block317:
	cmp dword ptr [ebp-0x1EC],0x217E774
	jne Block319

 Block318:
	mov eax,dword ptr [ebp-0xFB8]
	mov ecx,dword ptr [ebp-0x13C]
	mov dword ptr [eax+0x10],ecx
	jmp Block320

 Block319:
	fild dword ptr [ebp-0x13C]
	mov edx,dword ptr [ebp-0xFB8]
	mov eax,dword ptr [edx+0x90]
	sub eax,dword ptr [ebp-0x20C]
	push eax
	fstp qword ptr [ebp-0x1D34]
	call abs_0
	add esp,4
	mov dword ptr [ebp-0x1D38],eax
	fild dword ptr [ebp-0x1D38]
	fmul qword ptr [__real_3ff8000000000000]
	fadd qword ptr [ebp-0x1D34]
	call __ftol2_sse
	mov ecx,dword ptr [ebp-0xFB8]
	mov dword ptr [ecx+0x10],eax

 Block320:
	jmp Block298

 Block321:
	mov edx,dword ptr [ebp-0x1EC]
	mov dword ptr [ebp-0x1D3C],edx
	cmp dword ptr [ebp-0x1D3C],0x30FEFC
	jg Block327

 Block322:
	cmp dword ptr [ebp-0x1D3C],0x30FEFC
	je Block345

 Block323:
	cmp dword ptr [ebp-0x1D3C],0x2F785B
	je Block331

 Block324:
	cmp dword ptr [ebp-0x1D3C],0x2F785C
	je Block339

 Block325:
	cmp dword ptr [ebp-0x1D3C],0x30FEFB
	je Block331

 Block326:
	jmp Block359

 Block327:
	cmp dword ptr [ebp-0x1D3C],0xC80ED8
	je Block339

 Block328:
	cmp dword ptr [ebp-0x1D3C],0x1424406
	je Block357

 Block329:
	cmp dword ptr [ebp-0x1D3C],0x1F962E9
	je Block358

 Block330:
	jmp Block359

 Block331:
	cmp dword ptr [ebp-0xA8],0
	jne Block333

 Block332:
	jmp Block359

 Block333:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[ebp-0xFCC]
	push ecx
	call SECRECT::ToRect
	add esp,8
	mov edx,dword ptr [ebp-0x8C]
	push edx
	mov eax,dword ptr [ebp-0x90]
	push eax
	lea ecx,[ebp-0xFCC]
	push ecx
	call OffsetRect
	cmp dword ptr [ebp-0x1EC],0x2F785B
	jne Block335

 Block334:
	lea edx,[ebp-0x11A8]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetTileUOL
	mov dword ptr [ebp-0x1D40],eax
	mov eax,dword ptr [ebp-0x1D40]
	mov dword ptr [ebp-0x1D44],eax
	mov byte ptr [ebp-4],0xD
	push 0
	push 0xFF
	push 0x80
	push 0x1F4
	mov ecx,dword ptr [ebp-0xB0C]
	push ecx
	lea edx,[ebp-0xFCC]
	push edx
	mov ecx,dword ptr [ebp-0x1D44]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFootHoldAnimation
	mov byte ptr [ebp-4],6
	lea ecx,[ebp-0x11A8]
	call Ztl_bstr_t::~Ztl_bstr_t

 Block335:
	mov eax,dword ptr [ebp-0xFC8]
	sub eax,0x32
	mov dword ptr [ebp-0xFC8],eax
	mov ecx,dword ptr [ebp-0xFC0]
	sub ecx,0xAA
	mov dword ptr [ebp-0xFC0],ecx
	mov edx,dword ptr [ebp+8]
	cmp dword ptr [edx+0x20C],0
	je Block337

 Block336:
	mov al,byte ptr [ebp+0xC]
	mov byte ptr [ebp-0x1D45],al
	jmp Block338

 Block337:
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	call eax
	mov byte ptr [ebp-0x1D45],al

 Block338:
	movzx ecx,byte ptr [ebp-0x1D45]
	push ecx
	lea edx,[ebp-0x11AC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetSpecialUOL
	mov dword ptr [ebp-0x1D4C],eax
	mov eax,dword ptr [ebp-0x1D4C]
	mov dword ptr [ebp-0x1D50],eax
	mov byte ptr [ebp-4],0xE
	mov ecx,dword ptr [ebp-0xB0C]
	push ecx
	lea edx,[ebp-0xFCC]
	push edx
	mov eax,dword ptr [ebp-0x5C]
	push eax
	mov ecx,dword ptr [ebp-0x1D50]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFallingAnimation
	mov byte ptr [ebp-4],6
	lea ecx,[ebp-0x11AC]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block359

 Block339:
	cmp dword ptr [ebp-0xA8],0
	jne Block341

 Block340:
	jmp Block359

 Block341:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea edx,[ebp-0xFDC]
	push edx
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea eax,[ebp-0x11B4]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x11BC]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[ebp-0xFDC]
	push ecx
	call adjust_rect
	add esp,0x10
	mov edx,dword ptr [ebp-0xFD8]
	sub edx,0xFA
	mov dword ptr [ebp-0xFD8],edx
	mov eax,dword ptr [ebp-0xFD0]
	sub eax,0xFA
	mov dword ptr [ebp-0xFD0],eax
	mov ecx,dword ptr [ebp+8]
	cmp dword ptr [ecx+0x20C],0
	je Block343

 Block342:
	mov dl,byte ptr [ebp+0xC]
	mov byte ptr [ebp-0x1D51],dl
	jmp Block344

 Block343:
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	call eax
	mov byte ptr [ebp-0x1D51],al

 Block344:
	movzx ecx,byte ptr [ebp-0x1D51]
	push ecx
	lea edx,[ebp-0x11C0]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetSpecialUOL
	mov dword ptr [ebp-0x1D58],eax
	mov eax,dword ptr [ebp-0x1D58]
	mov dword ptr [ebp-0x1D5C],eax
	mov byte ptr [ebp-4],0xF
	mov ecx,dword ptr [ebp-0xB0C]
	push ecx
	lea edx,[ebp-0xFDC]
	push edx
	mov eax,dword ptr [ebp-0x5C]
	push eax
	mov ecx,dword ptr [ebp-0x1D5C]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFallingAnimation
	mov byte ptr [ebp-4],6
	lea ecx,[ebp-0x11C0]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block359

 Block345:
	cmp dword ptr [ebp-0xA8],0
	jne Block347

 Block346:
	jmp Block359

 Block347:
	mov dword ptr [ebp-0xFB4],0
	jmp Block349

 Block348:
	mov ecx,dword ptr [ebp-0xFB4]
	add ecx,1
	mov dword ptr [ebp-0xFB4],ecx

 Block349:
	mov edx,dword ptr [ebp-0xFB4]
	cmp edx,dword ptr [ebp-0xA8]
	jge Block356

 Block350:
	push 0
	lea eax,[ebp-0xFEC]
	push eax
	mov ecx,dword ptr [ebp-0xFB4]
	mov ecx,dword ptr [ebp+ecx*4-0x1B4]
	call CMob::GetBodyRect
	mov edx,dword ptr [ebp-0xFE4]
	sub edx,dword ptr [ebp-0xFEC]
	mov dword ptr [ebp-0xFF0],edx
	cmp dword ptr [ebp-0xFF0],0x96
	jge Block352

 Block351:
	mov eax,dword ptr [ebp-0xFF0]
	cdq
	sub eax,edx
	sar eax,1
	mov ecx,0x4B
	sub ecx,eax
	mov edx,dword ptr [ebp-0xFEC]
	sub edx,ecx
	mov dword ptr [ebp-0xFEC],edx
	mov eax,dword ptr [ebp-0xFF0]
	cdq
	sub eax,edx
	sar eax,1
	mov ecx,0x4B
	sub ecx,eax
	add ecx,dword ptr [ebp-0xFE4]
	mov dword ptr [ebp-0xFE4],ecx

 Block352:
	mov edx,dword ptr [ebp-0xFE0]
	sub edx,0xA
	mov dword ptr [ebp-0xFE8],edx
	mov eax,dword ptr [ebp+8]
	cmp dword ptr [eax+0x20C],0
	je Block354

 Block353:
	mov cl,byte ptr [ebp+0xC]
	mov byte ptr [ebp-0x1D5D],cl
	jmp Block355

 Block354:
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax+4]
	call edx
	mov byte ptr [ebp-0x1D5D],al

 Block355:
	movzx eax,byte ptr [ebp-0x1D5D]
	push eax
	lea ecx,[ebp-0x11C4]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetSpecialUOL
	mov dword ptr [ebp-0x1D64],eax
	mov edx,dword ptr [ebp-0x1D64]
	mov dword ptr [ebp-0x1D68],edx
	mov byte ptr [ebp-4],0x10
	mov eax,dword ptr [ebp-0xB0C]
	push eax
	lea ecx,[ebp-0xFEC]
	push ecx
	mov edx,dword ptr [ebp-0x5C]
	push edx
	mov ecx,dword ptr [ebp-0x1D68]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFallingAnimation
	mov byte ptr [ebp-4],6
	lea ecx,[ebp-0x11C4]
	call Ztl_bstr_t::~Ztl_bstr_t
	jmp Block348

 Block356:
	jmp Block359

 Block357:
	push 0x9B
	push 0xC00614A3
	push 0x12C
	push 0x708
	push 0x7D0
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFadeInOutAnimation
	jmp Block359

 Block358:
	mov dword ptr [ebp-0x1004],0xCE4
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[ebp-0x1000]
	push ecx
	call SECRECT::ToRect
	add esp,8
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	lea edx,[ebp-0x11CC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax+4]
	push ecx
	lea edx,[ebp-0x11D4]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [eax]
	push ecx
	lea edx,[ebp-0x1000]
	push edx
	call adjust_rect
	add esp,0x10
	lea eax,[ebp-0x11D8]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetTileUOL
	mov dword ptr [ebp-0x1D6C],eax
	mov ecx,dword ptr [ebp-0x1D6C]
	mov dword ptr [ebp-0x1D70],ecx
	mov byte ptr [ebp-4],0x11
	push 0
	push 0xFF
	push 0x80
	mov edx,dword ptr [ebp-0x1004]
	push edx
	push 0xB4
	lea eax,[ebp-0x1000]
	push eax
	mov ecx,dword ptr [ebp-0x1D70]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFootHoldAnimation
	mov byte ptr [ebp-4],6
	lea ecx,[ebp-0x11D8]
	call Ztl_bstr_t::~Ztl_bstr_t
	push 0x9B
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetLayerZ
	sub eax,2
	push eax
	push 0xE1
	push 0x546
	push 0x5DC
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov ecx,eax
	call CAnimationDisplayer::RegisterFadeInOutAnimation

 Block359:
	cmp dword ptr [ebp-0x1EC],0x2DCAAC
	je Block369

 Block360:
	cmp dword ptr [ebp-0x1EC],0x2F514D
	je Block369

 Block361:
	cmp dword ptr [ebp-0x1EC],0x1F914CF
	je Block369

 Block362:
	cmp dword ptr [ebp-0x1EC],0x30FEFB
	je Block369

 Block363:
	cmp dword ptr [ebp-0x1EC],0x2F785B
	je Block369

 Block364:
	cmp dword ptr [ebp-0x1EC],0xE6935E
	je Block369

 Block365:
	cmp dword ptr [ebp-0x1EC],0x217C05C
	je Block369

 Block366:
	cmp dword ptr [ebp-0x1EC],0x217E76D
	je Block369

 Block367:
	cmp dword ptr [ebp-0x1EC],0x217E775
	je Block369

 Block368:
	mov ecx,dword ptr [ebp-0xA8]
	push ecx
	lea edx,[ebp-0xB1C]
	push edx
	xor eax,eax
	cmp dword ptr [ebp-0x5C],0
	sete al
	push eax
	call sort_attackInfo_by_distance
	add esp,0xC

 Block369:
	mov dword ptr [ebp-0x20],0
	mov dword ptr [ebp-0x140],0
	mov dword ptr [ebp-0x68],0
	mov dword ptr [ebp-0x48],0
	mov dword ptr [ebp-0x1C],0
	push 0xB
	lea ecx,[ebp-0x11E0]
	push ecx
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x1D74],eax
	mov ecx,dword ptr [ebp-0x1D74]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x1C8],eax
	lea ecx,[ebp-0x11E0]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x1C8],0
	je Block373

 Block370:
	mov edx,dword ptr [ebp-0x1C8]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1C8]
	mov edx,dword ptr [eax+0x78]
	call edx
	test eax,eax
	je Block373

 Block371:
	mov ecx,dword ptr [ebp-0x1C8]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0x1008],eax
	cmp dword ptr [ebp-0x1008],0
	je Block373

 Block372:
	mov ecx,dword ptr [ebp-0x1008]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0x100C],eax
	lea edx,[ebp-0x1C]
	push edx
	lea eax,[ebp-0x48]
	push eax
	lea ecx,[ebp-0x68]
	push ecx
	lea edx,[ebp-0x140]
	push edx
	lea eax,[ebp-0x20]
	push eax
	mov ecx,dword ptr [ebp-0x100C]
	push ecx
	mov ecx,dword ptr [ebp-0x1C8]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x1C]
	push eax
	lea ecx,[ebp-0x48]
	push ecx
	lea edx,[ebp-0x68]
	push edx
	lea eax,[ebp-0x140]
	push eax
	lea ecx,[ebp-0x20]
	push ecx
	mov edx,dword ptr [ebp-0x100C]
	push edx
	mov ecx,dword ptr [ebp-0x1C8]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x1C]
	push ecx
	lea edx,[ebp-0x48]
	push edx
	lea eax,[ebp-0x68]
	push eax
	lea ecx,[ebp-0x140]
	push ecx
	lea edx,[ebp-0x20]
	push edx
	mov eax,dword ptr [ebp-0x100C]
	push eax
	mov ecx,dword ptr [ebp-0x1C8]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::ApplyWeaponOption

 Block373:
	push 0xA
	lea edx,[ebp-0x11E8]
	push edx
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetRealEquipSlot
	mov dword ptr [ebp-0x1D78],eax
	mov ecx,dword ptr [ebp-0x1D78]
	call ZRef<GW_ItemSlotBase>::op_star_access
	push eax
	call rc_equip
	add esp,4
	mov dword ptr [ebp-0x1D8],eax
	lea ecx,[ebp-0x11E8]
	call ZRef<GW_ItemSlotBase>::~ZRef<GW_ItemSlotBase>
	cmp dword ptr [ebp-0x1D8],0
	je Block378

 Block374:
	mov ecx,dword ptr [ebp-0x1D8]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call is_blade
	add esp,4
	test eax,eax
	je Block378

 Block375:
	mov eax,dword ptr [ebp-0x1D8]
	mov edx,dword ptr [eax]
	mov ecx,dword ptr [ebp-0x1D8]
	mov eax,dword ptr [edx+0x78]
	call eax
	test eax,eax
	je Block378

 Block376:
	mov ecx,dword ptr [ebp-0x1D8]
	add ecx,0xC
	call TSecType<long>::op_t
	push eax
	call TSingleton<CItemInfo>::GetInstance
	mov ecx,eax
	call CItemInfo::GetEquipItem
	mov dword ptr [ebp-0x1010],eax
	cmp dword ptr [ebp-0x1010],0
	je Block378

 Block377:
	mov ecx,dword ptr [ebp-0x1010]
	call CItemInfo::EQUIPITEM::_ZtlSecureGet_nrLevel
	sub eax,1
	cdq
	mov ecx,0xA
	idiv ecx
	mov dword ptr [ebp-0x1014],eax
	lea edx,[ebp-0x1C]
	push edx
	lea eax,[ebp-0x48]
	push eax
	lea ecx,[ebp-0x68]
	push ecx
	lea edx,[ebp-0x140]
	push edx
	lea eax,[ebp-0x20]
	push eax
	mov ecx,dword ptr [ebp-0x1014]
	push ecx
	mov ecx,dword ptr [ebp-0x1D8]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption1
	movsx edx,ax
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::ApplyWeaponOption
	lea eax,[ebp-0x1C]
	push eax
	lea ecx,[ebp-0x48]
	push ecx
	lea edx,[ebp-0x68]
	push edx
	lea eax,[ebp-0x140]
	push eax
	lea ecx,[ebp-0x20]
	push ecx
	mov edx,dword ptr [ebp-0x1014]
	push edx
	mov ecx,dword ptr [ebp-0x1D8]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption2
	cwde
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::ApplyWeaponOption
	lea ecx,[ebp-0x1C]
	push ecx
	lea edx,[ebp-0x48]
	push edx
	lea eax,[ebp-0x68]
	push eax
	lea ecx,[ebp-0x140]
	push ecx
	lea edx,[ebp-0x20]
	push edx
	mov eax,dword ptr [ebp-0x1014]
	push eax
	mov ecx,dword ptr [ebp-0x1D8]
	add ecx,0x105
	call GW_ItemSlotEquipOpt::_ZtlSecureGet_nOption3
	movsx ecx,ax
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::ApplyWeaponOption

 Block378:
	lea ecx,[ebp-0x234]
	call ZArray<unsigned long>::_ctor_default
	mov byte ptr [ebp-4],0x12
	lea edx,[ebp-0x234]
	push edx
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetOnlinePartyMemberID
	mov dword ptr [ebp-0x170],0
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetPhase
	push eax
	lea eax,[ebp-0x170]
	push eax
	lea ecx,[ebp-0x11F0]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov ecx,dword ptr [eax+4]
	push ecx
	mov edx,dword ptr [eax]
	push edx
	lea eax,[ebp-0x234]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetCharacterId
	push eax
	call TSingleton<CAffectedAreaPool>::GetInstance
	mov ecx,eax
	call CAffectedAreaPool::GetAr01AreaPAD
	mov dword ptr [ebp-0x64],eax
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_mechanic_job
	add esp,4
	test eax,eax
	je Block380

 Block379:
	mov dword ptr [ebp-0x14],0

 Block380:
	mov dword ptr [ebp-0xFB4],0
	jmp Block382

 Block381:
	mov ecx,dword ptr [ebp-0xFB4]
	add ecx,1
	mov dword ptr [ebp-0xFB4],ecx

 Block382:
	mov edx,dword ptr [ebp-0xFB4]
	cmp edx,dword ptr [ebp-0xA8]
	jge Block387

 Block383:
	mov eax,dword ptr [ebp-0xFB4]
	imul eax,0x98
	lea ecx,[ebp+eax-0xB1C]
	mov dword ptr [ebp-0x1018],ecx
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp+0x18]
	push edx
	mov eax,dword ptr [ebp-0x64]
	push eax
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetDragonFuryDamage
	push eax
	mov ecx,dword ptr [ebp-0x1C]
	push ecx
	mov edx,dword ptr [ebp-0x48]
	push edx
	mov eax,dword ptr [ebp-0x68]
	push eax
	mov ecx,dword ptr [ebp-0x140]
	push ecx
	mov edx,dword ptr [ebp-0x20]
	push edx
	mov eax,dword ptr [ebp-0x1018]
	add eax,0x54
	push eax
	mov ecx,dword ptr [ebp-0x1018]
	add ecx,0x18
	push ecx
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1F4]
	push ecx
	mov edx,dword ptr [ebp-0x3C]
	push edx
	push 1
	mov eax,dword ptr [ebp-0x14]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov ecx,dword ptr [ebp-0x174]
	push ecx
	mov edx,dword ptr [ebp-0x144]
	imul edx,dword ptr [ebp-0x148]
	push edx
	mov eax,dword ptr [ebp-0x1C78]
	add eax,0x4848
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x4840
	sub esp,8
	mov edx,esp
	mov dword ptr [ebp-0x11F4],esp
	push ecx
	mov ecx,edx
	call ZRef<PassiveSkillData>::_ctor_copy
	mov dword ptr [ebp-0x1D7C],eax
	mov eax,dword ptr [ebp-0x1D7C]
	mov dword ptr [ebp-0x1D80],eax
	mov byte ptr [ebp-4],0x13
	mov ecx,dword ptr [ebp-0x1018]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	push eax
	mov edx,dword ptr [ebp-0x1018]
	mov ecx,dword ptr [edx]
	call CMob::GetMobStat
	push eax
	mov eax,dword ptr [ebp-0x1018]
	mov ecx,dword ptr [eax]
	call CMob::GetMobID
	push eax
	mov ecx,dword ptr [ebp-0x21C]
	push ecx
	mov edx,dword ptr [ebp-0xB24]
	push edx
	mov eax,dword ptr [ebp-0x74]
	push eax
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::GetCalcDamage
	mov byte ptr [ebp-4],0x12
	mov ecx,eax
	call CalcDamage::PDamage_3
	cmp dword ptr [ebp+8],0
	je Block386

 Block384:
	push 0
	mov ecx,dword ptr [ebp-0x1018]
	add ecx,0x18
	push ecx
	mov edx,dword ptr [ebp-0xFB4]
	push edx
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::AdjustDamageDecRate
	test eax,eax
	je Block386

 Block385:
	mov ecx,dword ptr [ebp-0xFB4]
	add ecx,1
	mov dword ptr [ebp-0xA8],ecx
	jmp Block387

 Block386:
	jmp Block381

 Block387:
	mov edx,dword ptr [ebp-0x168]
	push edx
	lea eax,[ebp-0xB1C]
	push eax
	mov ecx,dword ptr [ebp-0xA8]
	push ecx
	mov edx,dword ptr [ebp-0x3C]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetWeaponItemID
	push eax
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp-0x98]
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx ecx,al
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	lea ecx,[ebp-0x134]
	call CSkill_HitAni::_ctor_0
	mov byte ptr [ebp-4],0x14
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	push ecx
	call CSkillInfo::IsMobChaseAttack
	add esp,8
	mov dword ptr [ebp-0x1C4],eax
	call get_update_time
	mov dword ptr [ebp-0x60],eax
	mov dword ptr [ebp-0xFB4],0
	jmp Block389

 Block388:
	mov edx,dword ptr [ebp-0xFB4]
	add edx,1
	mov dword ptr [ebp-0xFB4],edx

 Block389:
	mov eax,dword ptr [ebp-0xFB4]
	cmp eax,dword ptr [ebp-0xA8]
	jge Block458

 Block390:
	mov ecx,dword ptr [ebp-0xFB4]
	imul ecx,0x98
	lea edx,[ebp+ecx-0xB1C]
	mov dword ptr [ebp-0x101C],edx
	mov dword ptr [ebp-0x1024],0
	jmp Block392

 Block391:
	mov eax,dword ptr [ebp-0x1024]
	add eax,1
	mov dword ptr [ebp-0x1024],eax

 Block392:
	mov ecx,dword ptr [ebp-0x1024]
	cmp ecx,dword ptr [ebp-0x174]
	jge Block454

 Block393:
	mov edx,dword ptr [ebp-0x101C]
	mov eax,dword ptr [edx+0x90]
	mov ecx,dword ptr [edx+0x94]
	mov dword ptr [ebp-0x1038],eax
	mov dword ptr [ebp-0x1034],ecx
	mov eax,dword ptr [ebp-0x1024]
	cdq
	idiv dword ptr [ebp-0x144]
	shl eax,1
	mov edx,dword ptr [ebp-0x148]
	sub edx,1
	sub eax,edx
	imul eax,7
	add eax,dword ptr [ebp-0x1034]
	mov dword ptr [ebp-0x1034],eax
	mov dword ptr [ebp-0x102C],1
	mov dword ptr [ebp-0x103C],0
	mov dword ptr [ebp-0x1040],0
	cmp dword ptr [ebp-0x1EC],0x2F9F6B
	je Block400

 Block394:
	cmp dword ptr [ebp-0x1EC],0x31260B
	je Block400

 Block395:
	cmp dword ptr [ebp-0x1EC],0xC7E7CD
	je Block400

 Block396:
	cmp dword ptr [ebp-0x1EC],0x2F514B
	je Block400

 Block397:
	cmp dword ptr [ebp-0x1EC],0x30D7EB
	je Block400

 Block398:
	cmp dword ptr [ebp-0x1EC],0x1F914CA
	je Block400

 Block399:
	cmp dword ptr [ebp-0x1EC],0x217C067
	jne Block426

 Block400:
	mov eax,dword ptr [ebp-0x1024]
	mov ecx,dword ptr [ebp-0x101C]
	cmp dword ptr [ecx+eax*4+0x18],0
	jle Block426

 Block401:
	mov edx,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [edx]
	call CMob::IsBossMob
	test eax,eax
	jne Block426

 Block402:
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [eax]
	call CMob::IsPosFixed
	test eax,eax
	jne Block426

 Block403:
	push 0
	push 0x64
	call get_rand_0
	add esp,8
	mov esi,eax
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	cmp esi,eax
	jae Block426

 Block404:
	mov edx,dword ptr [ebp-0x1EC]
	mov dword ptr [ebp-0x1D84],edx
	cmp dword ptr [ebp-0x1D84],0x31260B
	jg Block410

 Block405:
	cmp dword ptr [ebp-0x1D84],0x31260B
	je Block414

 Block406:
	cmp dword ptr [ebp-0x1D84],0x2F514B
	je Block418

 Block407:
	cmp dword ptr [ebp-0x1D84],0x2F9F6B
	je Block414

 Block408:
	cmp dword ptr [ebp-0x1D84],0x30D7EB
	je Block418

 Block409:
	jmp Block426

 Block410:
	cmp dword ptr [ebp-0x1D84],0xC7E7CD
	je Block418

 Block411:
	cmp dword ptr [ebp-0x1D84],0x1F914CA
	je Block418

 Block412:
	cmp dword ptr [ebp-0x1D84],0x217C067
	je Block422

 Block413:
	jmp Block426

 Block414:
	mov dword ptr [ebp-0x102C],5
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	test eax,eax
	je Block416

 Block415:
	mov eax,dword ptr [ebp-0x6C]
	neg eax
	mov dword ptr [ebp-0x1D88],eax
	jmp Block417

 Block416:
	mov ecx,dword ptr [ebp-0x6C]
	mov dword ptr [ebp-0x1D88],ecx

 Block417:
	lea edx,[ebp-0x11FC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov eax,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	mov ecx,dword ptr [esi]
	add ecx,eax
	add ecx,dword ptr [ebp-0x1D88]
	mov dword ptr [ebp-0x103C],ecx
	jmp Block426

 Block418:
	mov dword ptr [ebp-0x102C],5
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	test eax,eax
	je Block420

 Block419:
	mov edx,dword ptr [ebp+0xC]
	push edx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	neg eax
	mov dword ptr [ebp-0x1D8C],eax
	jmp Block421

 Block420:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nX
	mov dword ptr [ebp-0x1D8C],eax

 Block421:
	lea ecx,[ebp-0x1204]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	mov ecx,dword ptr [esi]
	add ecx,eax
	add ecx,dword ptr [ebp-0x1D8C]
	mov dword ptr [ebp-0x103C],ecx
	jmp Block426

 Block422:
	mov dword ptr [ebp-0x102C],5
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	test eax,eax
	je Block424

 Block423:
	mov edx,dword ptr [ebp-0x6C]
	neg edx
	mov dword ptr [ebp-0x1D90],edx
	jmp Block425

 Block424:
	mov eax,dword ptr [ebp-0x6C]
	mov dword ptr [ebp-0x1D90],eax

 Block425:
	lea ecx,[ebp-0x120C]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov esi,eax
	push 0xFFFFFFF6
	push 0x14
	call get_rand_0
	add esp,8
	mov ecx,dword ptr [esi]
	add ecx,eax
	add ecx,dword ptr [ebp-0x1D90]
	mov dword ptr [ebp-0x103C],ecx

 Block426:
	cmp dword ptr [ebp-0x1EC],0xD72A0E
	je Block428

 Block427:
	cmp dword ptr [ebp-0x1EC],0x1F962E9
	jne Block429

 Block428:
	mov edx,dword ptr [ebp-0x174]
	push edx
	mov eax,dword ptr [ebp-0x1024]
	push eax
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetDamageDelay
	add eax,dword ptr [ebp-0x13C]
	mov edx,dword ptr [ebp-0x101C]
	mov dword ptr [edx+0x10],eax
	jmp Block434

 Block429:
	cmp dword ptr [ebp-0x1024],3
	jne Block434

 Block430:
	cmp dword ptr [ebp-0x1EC],0x217C05C
	je Block433

 Block431:
	cmp dword ptr [ebp-0x1EC],0x217E76D
	je Block433

 Block432:
	cmp dword ptr [ebp-0x1EC],0x217E775
	jne Block434

 Block433:
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [eax+0x10]
	add ecx,0x5A
	mov edx,dword ptr [ebp-0x101C]
	mov dword ptr [edx+0x10],ecx

 Block434:
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nFixedDamage
	mov dword ptr [ebp-0x1030],eax
	cmp dword ptr [ebp-0x1030],0
	jle Block437

 Block435:
	mov ecx,dword ptr [ebp-0x1024]
	mov edx,dword ptr [ebp-0x101C]
	cmp dword ptr [edx+ecx*4+0x18],0
	jle Block437

 Block436:
	mov eax,dword ptr [ebp-0x1024]
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ebp-0x1030]
	mov dword ptr [ecx+eax*4+0x18],edx

 Block437:
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	mov ecx,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::IsVulnerableTo
	test eax,eax
	jne Block439

 Block438:
	mov edx,dword ptr [ebp-0x1024]
	mov eax,dword ptr [ebp-0x101C]
	mov dword ptr [eax+edx*4+0x18],0

 Block439:
	mov ecx,dword ptr [ebp-0x1024]
	mov edx,dword ptr [ebp-0x101C]
	mov eax,dword ptr [edx+ecx*4+0x18]
	mov dword ptr [ebp-0x1048],eax
	push 0
	lea ecx,[ebp-0x1048]
	push ecx
	push 1
	mov edx,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [edx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_dwTemplateID
	push eax
	mov eax,dword ptr [ebp-0x74]
	push eax
	call CItemInfo::CheckDamageModifiedByEquipUpgrade
	add esp,0x14
	test eax,eax
	je Block441

 Block440:
	mov ecx,dword ptr [ebp-0x1024]
	mov edx,dword ptr [ebp-0x101C]
	mov eax,dword ptr [ebp-0x1048]
	mov dword ptr [edx+ecx*4+0x18],eax

 Block441:
	mov ecx,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [ecx]
	call CMob::GetTemplate
	mov ecx,eax
	call CMobTemplate::_ZtlSecureGet_nWeaponID
	mov dword ptr [ebp-0x1044],eax
	lea edx,[ebp-0x1214]
	push edx
	call TSingleton<CWvsContext>::GetInstance
	mov ecx,eax
	call CWvsContext::GetCharacterData
	mov dword ptr [ebp-0x1D94],eax
	mov ecx,dword ptr [ebp-0x1D94]
	call ZRef<CharacterData>::op_star
	mov dword ptr [ebp-0x1028],eax
	lea ecx,[ebp-0x1214]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp dword ptr [ebp-0x1044],0
	je Block444

 Block442:
	mov ecx,dword ptr [ebp-0x1028]
	add ecx,0x151
	call ZRef<GW_ItemSlotBase>::op_arrow
	add eax,0xC
	mov ecx,eax
	call TSecType<long>::op_t
	cmp dword ptr [ebp-0x1044],eax
	je Block444

 Block443:
	mov eax,dword ptr [ebp-0x1024]
	mov ecx,dword ptr [ebp-0x101C]
	mov dword ptr [ecx+eax*4+0x18],0
	push 0
	mov edx,dword ptr [ebp-0x1040]
	push edx
	mov eax,dword ptr [ebp-0x103C]
	push eax
	mov ecx,dword ptr [ebp-0x168]
	push ecx
	mov edx,dword ptr [ebp-0x102C]
	push edx
	mov eax,dword ptr [ebp-0x1C4]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1218],esp
	mov edx,dword ptr [ebp-0xFB4]
	push edx
	push ecx
	lea ecx,[ebp-0x134]
	call CSkill_HitAni::operator()
	mov dword ptr [ebp-0x1D98],eax
	mov eax,dword ptr [ebp-0x1034]
	push eax
	mov ecx,dword ptr [ebp-0x1038]
	push ecx
	mov edx,dword ptr [ebp-0x1024]
	push edx
	mov eax,dword ptr [ebp-0x1024]
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0x1024]
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	mov eax,dword ptr [ebp-0x5C]
	push eax
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ecx+4]
	push edx
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [ebp-0x150]
	add ecx,dword ptr [eax+0x10]
	push ecx
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetCharacterId
	push eax
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [eax]
	call CMob::AddDamageInfo
	jmp Block453

 Block444:
	cmp dword ptr [ebp-0x1EC],0x1F962E9
	jne Block447

 Block445:
	mov ecx,dword ptr [ebp-0x174]
	sub ecx,1
	cmp dword ptr [ebp-0x1024],ecx
	jne Block447

 Block446:
	mov edx,dword ptr [ebp-0xFB4]
	push edx
	lea eax,[ebp-0x1220]
	push eax
	lea ecx,[ebp-0x134]
	call CSkill_HitAni::GetSubHitAni
	mov dword ptr [ebp-0x1D9C],eax
	mov ecx,dword ptr [ebp-0x1AB4]
	or ecx,1
	mov dword ptr [ebp-0x1AB4],ecx
	mov edx,dword ptr [ebp-0x1D9C]
	mov dword ptr [ebp-0x1DA0],edx
	jmp Block448

 Block447:
	mov eax,dword ptr [ebp-0xFB4]
	push eax
	lea ecx,[ebp-0x1224]
	push ecx
	lea ecx,[ebp-0x134]
	call CSkill_HitAni::operator()
	mov dword ptr [ebp-0x1DA4],eax
	mov edx,dword ptr [ebp-0x1AB4]
	or edx,2
	mov dword ptr [ebp-0x1AB4],edx
	mov eax,dword ptr [ebp-0x1DA4]
	mov dword ptr [ebp-0x1DA0],eax

 Block448:
	mov ecx,dword ptr [ebp-0x1DA0]
	mov dword ptr [ebp-0x121C],ecx
	mov edx,dword ptr [ebp-0x121C]
	push edx
	lea ecx,[ebp-0x104C]
	call Ztl_bstr_t::_ctor_copy
	mov byte ptr [ebp-4],0x15
	mov eax,dword ptr [ebp-0x1AB4]
	and eax,2
	je Block450

 Block449:
	and dword ptr [ebp-0x1AB4],0xFFFFFFFD
	lea ecx,[ebp-0x1224]
	call Ztl_bstr_t::~Ztl_bstr_t

 Block450:
	mov ecx,dword ptr [ebp-0x1AB4]
	and ecx,1
	je Block452

 Block451:
	and dword ptr [ebp-0x1AB4],0xFFFFFFFE
	lea ecx,[ebp-0x1220]
	call Ztl_bstr_t::~Ztl_bstr_t

 Block452:
	push 0
	mov edx,dword ptr [ebp-0x1040]
	push edx
	mov eax,dword ptr [ebp-0x103C]
	push eax
	mov ecx,dword ptr [ebp-0x168]
	push ecx
	mov edx,dword ptr [ebp-0x102C]
	push edx
	mov eax,dword ptr [ebp-0x1C4]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1228],esp
	lea edx,[ebp-0x104C]
	push edx
	call Ztl_bstr_t::_ctor_copy
	mov dword ptr [ebp-0x1DA8],eax
	mov eax,dword ptr [ebp-0x1034]
	push eax
	mov ecx,dword ptr [ebp-0x1038]
	push ecx
	mov edx,dword ptr [ebp-0x1024]
	push edx
	mov eax,dword ptr [ebp-0x1024]
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0x1024]
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	mov eax,dword ptr [ebp-0x5C]
	push eax
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ecx+4]
	push edx
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [ebp-0x150]
	add ecx,dword ptr [eax+0x10]
	push ecx
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::GetCharacterId
	push eax
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [eax]
	call CMob::AddDamageInfo
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x104C]
	call Ztl_bstr_t::~Ztl_bstr_t

 Block453:
	jmp Block391

 Block454:
	mov ecx,dword ptr [ebp-0x3C]
	push ecx
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	mov eax,dword ptr [ebp-0x174]
	push eax
	mov ecx,dword ptr [ebp-0xA8]
	push ecx
	mov edx,dword ptr [ebp-0x60]
	push edx
	mov eax,dword ptr [ebp-0x101C]
	mov ecx,dword ptr [eax]
	call CMob::GetMobStat
	push eax
	push 1
	call CalcDamage::GetCounterDamage
	add esp,0x1C
	mov dword ptr [ebp-0x1020],eax
	cmp dword ptr [ebp-0x1020],0
	je Block457

 Block455:
	mov ecx,dword ptr [ebp-0x44]
	call CWvsContext::IsAdminAccount
	test eax,eax
	jne Block457

 Block456:
	mov ecx,dword ptr [ebp-0x1020]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::ShowCounterDamage

 Block457:
	mov edx,dword ptr [ebp-0x3C]
	push edx
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	mov ecx,dword ptr [ebp-0x174]
	push ecx
	mov edx,dword ptr [ebp-0xA8]
	push edx
	mov eax,dword ptr [ebp-0x60]
	push eax
	mov ecx,dword ptr [ebp-0x101C]
	mov edx,dword ptr [ecx]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::TryDoingItemSkill
	jmp Block388

 Block458:
	push 0x5F
	mov eax,dword ptr [ebp-0x3C]
	imul eax,0x18
	add eax,offset ActionData::m_saCharacterActions+12
	push eax
	call GETCRC32Svr_long
	add esp,8
	mov dword ptr [ebp-0xAC],eax
	jmp Block460

 Block460:
	mov dword ptr [ebp-0x220],0x19DEA1BD
	mov dword ptr [ebp-0x10],0xBE02FF0A
	push 0
	lea ecx,[ebp-0x10]
	push ecx
	lea edx,[ebp-0x230]
	push edx
	call DR_check
	add esp,0xC
	mov dword ptr [ebp-0x1D4],eax
	push 0x30
	lea ecx,[ebp-0x164]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],0x16
	call get_field
	mov ecx,eax
	call CField::GetFieldKey
	movzx eax,al
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov ecx,dword ptr [ebp-0x230]
	not ecx
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x22C]
	not edx
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0xA8]
	shl eax,4
	or eax,dword ptr [ebp-0x174]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov ecx,dword ptr [ebp-0x228]
	not ecx
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov edx,dword ptr [ebp-0x224]
	not edx
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1EC]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x74]
	movzx edx,byte ptr [ecx+0x539]
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	push 0
	mov eax,dword ptr [ebp-0x230]
	push eax
	call get_rand_0
	add esp,8
	mov dword ptr [ebp-0x9C],eax
	mov ecx,dword ptr [ebp-0x9C]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	push 0
	push 0
	push 0
	mov edx,dword ptr [ebp-0x9C]
	push edx
	push 4
	lea eax,[ebp-0x1D4]
	push eax
	call CCrc32::GetCrc32
	add esp,0x18
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	cmp dword ptr [ebp+8],0
	je Block462

 Block461:
	mov ecx,dword ptr [ebp+0xC]
	push ecx
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1644]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x1DAC],eax
	mov edx,dword ptr [ebp-0x1DAC]
	mov dword ptr [ebp-0x1DB0],edx
	mov byte ptr [ebp-4],0x17
	mov eax,dword ptr [ebp-0x1AB4]
	or eax,4
	mov dword ptr [ebp-0x1AB4],eax
	mov ecx,dword ptr [ebp-0x1DB0]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x1DB4],eax
	jmp Block463

 Block462:
	mov dword ptr [ebp-0x1DB4],0

 Block463:
	mov ecx,dword ptr [ebp-0x1DB4]
	mov dword ptr [ebp-0x78],ecx
	mov dword ptr [ebp-4],0x16
	mov edx,dword ptr [ebp-0x1AB4]
	and edx,4
	je Block465

 Block464:
	and dword ptr [ebp-0x1AB4],0xFFFFFFFB
	lea ecx,[ebp-0x1644]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block465:
	cmp dword ptr [ebp+8],0
	je Block467

 Block466:
	mov eax,dword ptr [ebp+0xC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x1A60]
	call SKILLLEVELDATA::_ctor_0
	mov dword ptr [ebp-0x1DB8],eax
	mov ecx,dword ptr [ebp-0x1DB8]
	mov dword ptr [ebp-0x1DBC],ecx
	mov byte ptr [ebp-4],0x18
	mov edx,dword ptr [ebp-0x1AB4]
	or edx,8
	mov dword ptr [ebp-0x1AB4],edx
	mov ecx,dword ptr [ebp-0x1DBC]
	call SKILLLEVELDATA::GetCrc
	mov dword ptr [ebp-0x1DC0],eax
	jmp Block468

 Block467:
	mov dword ptr [ebp-0x1DC0],0

 Block468:
	mov eax,dword ptr [ebp-0x1DC0]
	mov dword ptr [ebp-0x154],eax
	mov dword ptr [ebp-4],0x16
	mov ecx,dword ptr [ebp-0x1AB4]
	and ecx,8
	je Block470

 Block469:
	and dword ptr [ebp-0x1AB4],0xFFFFFFF7
	lea ecx,[ebp-0x1A60]
	call SKILLLEVELDATA::~SKILLLEVELDATA

 Block470:
	mov edx,dword ptr [ebp-0x78]
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x154]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x1EC]
	push ecx
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block472

 Block471:
	mov edx,dword ptr [ebp+0x18]
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4

 Block472:
	mov eax,dword ptr [ebp-0x14C]
	shl eax,1
	mov ecx,dword ptr [ebp+0x14]
	shl ecx,2
	or eax,ecx
	mov edx,dword ptr [ebp-0x1F4]
	shl edx,3
	or eax,edx
	mov ecx,dword ptr [ebp-0x1F8]
	shl ecx,6
	or eax,ecx
	mov edx,dword ptr [ebp-0x38]
	shl edx,7
	or eax,edx
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp-0x1C78]
	cmp dword ptr [eax+0x484C],0
	je Block475

 Block473:
	mov ecx,dword ptr [ebp-0x3C]
	push ecx
	mov edx,dword ptr [ebp+8]
	push edx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::CheckApplyExJablin
	test eax,eax
	je Block475

 Block474:
	mov byte ptr [ebp-0x1DC1],1
	jmp Block476

 Block475:
	mov byte ptr [ebp-0x1DC1],0

 Block476:
	movzx eax,byte ptr [ebp-0x1DC1]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov ecx,dword ptr [ebp-0x5C]
	shl ecx,0xF
	mov edx,dword ptr [ebp-0x3C]
	and edx,0x7FFF
	or ecx,edx
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	mov eax,dword ptr [ebp-0xAC]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	movzx ecx,byte ptr [ebp-0x1E0]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	movzx edx,byte ptr [ebp-0x210]
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp-0x60]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov ecx,dword ptr [ebp-0x170]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	jmp Block478

 Block478:
	movzx edx,word ptr [ebp-0x18]
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	movzx eax,word ptr [ebp-0x1BC]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	movzx ecx,byte ptr [ebp+0x10]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	cmp dword ptr [ebp-0x1F8],0
	je Block481

 Block479:
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	call is_shoot_skill_not_consuming_bullet
	add esp,4
	test eax,eax
	jne Block481

 Block480:
	mov eax,dword ptr [ebp-0x14]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4

 Block481:
	lea ecx,[ebp-0x204]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov dword ptr [ebp-0x1F0],0
	mov dword ptr [ebp-0x1FC],0x7FFFFFFF
	mov dword ptr [ebp-0xFB4],0
	jmp Block483

 Block482:
	mov eax,dword ptr [ebp-0xFB4]
	add eax,1
	mov dword ptr [ebp-0xFB4],eax

 Block483:
	mov ecx,dword ptr [ebp-0xFB4]
	cmp ecx,dword ptr [ebp-0xA8]
	jge Block499

 Block484:
	mov edx,dword ptr [ebp-0xFB4]
	imul edx,0x98
	lea eax,[ebp+edx-0xB1C]
	mov dword ptr [ebp-0x1050],eax
	lea ecx,[ebp-0x1058]
	push ecx
	mov edx,dword ptr [ebp-0x1050]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [ecx]
	add ecx,4
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	mov ecx,dword ptr [ebp-0x1058]
	sub ecx,dword ptr [ebp-0x204]
	mov dword ptr [ebp-0xB20],ecx
	mov edx,dword ptr [ebp-0x1054]
	sub edx,dword ptr [ebp-0x200]
	mov dword ptr [ebp-0x28],edx
	mov eax,dword ptr [ebp-0xB20]
	imul eax,dword ptr [ebp-0xB20]
	mov ecx,dword ptr [ebp-0x28]
	imul ecx,dword ptr [ebp-0x28]
	add eax,ecx
	mov dword ptr [ebp-0x105C],eax
	mov edx,dword ptr [ebp-0x105C]
	cmp edx,dword ptr [ebp-0x1FC]
	jge Block486

 Block485:
	mov eax,dword ptr [ebp-0x105C]
	mov dword ptr [ebp-0x1FC],eax
	mov ecx,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [ecx]
	call CMob::GetMobID
	mov dword ptr [ebp-0x1F0],eax

 Block486:
	mov edx,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [edx]
	call CMob::GetMobID
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp-0x1050]
	movzx ecx,byte ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [edx]
	call CMob::IsLeft
	shl eax,7
	mov ecx,dword ptr [ebp-0x1050]
	mov edx,dword ptr [ecx+8]
	and edx,0x7F
	or eax,edx
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp-0x1050]
	movzx ecx,byte ptr [eax+0xC]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [edx]
	call CMob::GetCurTemplate
	test eax,eax
	je Block489

 Block487:
	mov eax,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [eax]
	call CMob::GetTemplate
	mov esi,eax
	mov ecx,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [ecx]
	call CMob::GetCurTemplate
	cmp esi,eax
	je Block489

 Block488:
	mov dword ptr [ebp-0x1DC8],1
	jmp Block490

 Block489:
	mov dword ptr [ebp-0x1DC8],0

 Block490:
	mov esi,dword ptr [ebp-0x1DC8]
	shl esi,7
	mov edx,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [edx]
	call CMob::GetCalcDamageStatIndex
	and eax,0x7F
	or esi,eax
	push esi
	lea ecx,[ebp-0x164]
	call COutPacket::Encode1
	lea eax,[ebp-0x1A68]
	push eax
	mov ecx,dword ptr [ebp-0x1050]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [eax]
	add ecx,4
	mov edx,dword ptr [edx+4]
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	lea edx,[ebp-0x1A70]
	push edx
	mov eax,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1050]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x10]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	lea edx,[ebp-0x1A78]
	push edx
	mov eax,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1050]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	lea edx,[ebp-0x1A80]
	push edx
	mov eax,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp-0x1050]
	mov eax,dword ptr [edx]
	add eax,4
	mov edx,dword ptr [ecx+4]
	mov ecx,eax
	mov eax,dword ptr [edx+0x14]
	call eax
	movzx ecx,word ptr [eax+4]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	mov edx,dword ptr [ebp-0x1050]
	movzx eax,word ptr [edx+0x10]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	mov dword ptr [ebp-0x1060],0
	jmp Block492

 Block491:
	mov ecx,dword ptr [ebp-0x1060]
	add ecx,1
	mov dword ptr [ebp-0x1060],ecx

 Block492:
	mov edx,dword ptr [ebp-0x1060]
	cmp edx,dword ptr [ebp-0x174]
	jge Block498

 Block493:
	mov eax,dword ptr [ebp-0x1060]
	mov ecx,dword ptr [ebp-0x1050]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	call TSingleton<CDamageMeter>::IsInstantiated
	test eax,eax
	je Block495

 Block494:
	mov eax,dword ptr [ebp-0x1060]
	mov ecx,dword ptr [ebp-0x1050]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CDamageMeter>::GetInstance
	mov ecx,eax
	call CDamageMeter::AddDamageInfo

 Block495:
	call TSingleton<CBattleRecordMan>::IsInstantiated
	test eax,eax
	je Block497

 Block496:
	push 0
	mov eax,dword ptr [ebp-0x1060]
	mov ecx,dword ptr [ebp-0x1050]
	mov edx,dword ptr [ecx+eax*4+0x54]
	push edx
	mov eax,dword ptr [ebp-0x1060]
	mov ecx,dword ptr [ebp-0x1050]
	mov edx,dword ptr [ecx+eax*4+0x18]
	push edx
	call TSingleton<CBattleRecordMan>::GetInstance
	mov ecx,eax
	call CBattleRecordMan::SetBattleDamageInfo

 Block497:
	jmp Block491

 Block498:
	mov eax,dword ptr [ebp-0x1050]
	mov ecx,dword ptr [eax]
	call CMob::GetCrc
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4
	jmp Block482

 Block499:
	mov ecx,dword ptr [ebp-0x1F0]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUser::SetTargetID
	cmp dword ptr [ebp+8],0
	jne Block504

 Block500:
	mov dword ptr [ebp-0x1064],0
	push 0xA2
	mov edx,dword ptr [ebp-0x1B8]
	push edx
	lea eax,[ebp-0x10A0]
	push eax
	lea ecx,[ebp-0x88]
	push ecx
	call TSingleton<CUserPool>::GetInstance
	mov ecx,eax
	call CUserPool::FindHitUserInRectWithReason
	mov dword ptr [ebp-0x1064],eax
	mov dword ptr [ebp-0xFB4],0
	jmp Block502

 Block501:
	mov edx,dword ptr [ebp-0xFB4]
	add edx,1
	mov dword ptr [ebp-0xFB4],edx

 Block502:
	mov eax,dword ptr [ebp-0xFB4]
	cmp eax,dword ptr [ebp-0x1064]
	jge Block504

 Block503:
	mov ecx,dword ptr [ebp-0xFB4]
	mov edx,dword ptr [ebp+ecx*4-0x10A0]
	mov dword ptr [ebp-0x10B4],edx
	push 0xDB
	lea ecx,[ebp-0x10B0]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],0x19
	mov ecx,dword ptr [ebp-0x10B4]
	call CUser::GetCharacterId
	push eax
	lea ecx,[ebp-0x10B0]
	call COutPacket::Encode4
	push 0xA2
	lea ecx,[ebp-0x10B0]
	call COutPacket::Encode4
	lea eax,[ebp-0x10B0]
	push eax
	call SendPacket
	add esp,4
	mov byte ptr [ebp-4],0x16
	lea ecx,[ebp-0x10B0]
	call COutPacket::~COutPacket
	jmp Block501

 Block504:
	lea ecx,[ebp-0x1A88]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	movzx eax,word ptr [eax]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	lea ecx,[ebp-0x1A90]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	movzx eax,word ptr [eax+4]
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	mov ecx,dword ptr [ebp-0x1C78]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+0x40]
	call eax
	push eax
	call is_wildhunter_job
	add esp,4
	test eax,eax
	je Block506

 Block505:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x614
	call TSecType<long>::op_t
	push eax
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2

 Block506:
	movzx ecx,word ptr [ebp-0x58]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	movzx edx,word ptr [ebp-0x54]
	push edx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode2
	cmp dword ptr [ebp-0x1EC],0xE6935E
	jne Block508

 Block507:
	mov eax,dword ptr [ebp-0x1C78]
	mov ecx,dword ptr [eax+0x3BD4]
	push ecx
	lea ecx,[ebp-0x164]
	call COutPacket::Encode4

 Block508:
	lea edx,[ebp-0x164]
	push edx
	call SendPacket
	add esp,4
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::SetPetsAngry
	cmp dword ptr [ebp+8],0
	je Block510

 Block509:
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::GetActionInfo
	mov eax,dword ptr [eax+8]
	sub eax,dword ptr [ebp-0x13C]
	cdq
	mov ecx,3
	idiv ecx
	add eax,dword ptr [ebp-0x13C]
	push eax
	mov edx,dword ptr [ebp-0x1EC]
	push edx
	mov eax,dword ptr [ebp+8]
	add eax,0x58
	push eax
	mov ecx,dword ptr [ebp-0x74]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::TryRegisterFinalAttack

 Block510:
	cmp dword ptr [ebp-0x38],0
	je Block514

 Block511:
	cmp dword ptr [ebp-0x1EC],0xE6935E
	je Block514

 Block512:
	cmp dword ptr [ebp-0xA8],0
	je Block514

 Block513:
	mov edx,dword ptr [ebp-0x60]
	push edx
	lea eax,[ebp-0xB1C]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::TryRegisterSparkAttack

 Block514:
	cmp dword ptr [ebp-0x1EC],0x4F5C6E
	jne Block520

 Block515:
	cmp dword ptr [ebp+0xC],0
	jle Block520

 Block516:
	mov ecx,dword ptr [ebp-0x1C78]
	mov dword ptr [ecx+0x3B70],1
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x19E4
	call _x_com_ptr<IWzVector2D>::op_star
	push eax
	call rc_vc
	add esp,4
	mov dword ptr [ebp-0x10B8],eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	test eax,eax
	je Block518

 Block517:
	mov eax,dword ptr [ebp+0xC]
	cdq
	and edx,3
	add eax,edx
	sar eax,2
	imul eax,0x28
	add eax,0xFA
	mov dword ptr [ebp-0x1DCC],eax
	jmp Block519

 Block518:
	mov eax,dword ptr [ebp+0xC]
	cdq
	and edx,3
	add eax,edx
	sar eax,2
	imul eax,0x28
	add eax,0xFA
	neg eax
	mov dword ptr [ebp-0x1DCC],eax

 Block519:
	mov eax,dword ptr [ebp+0xC]
	cdq
	and edx,3
	add eax,edx
	sar eax,2
	imul eax,0x14
	add eax,0xFA
	neg eax
	mov dword ptr [ebp-0x1DD0],eax
	fild dword ptr [ebp-0x1DD0]
	sub esp,8
	fstp qword ptr [esp]
	fild dword ptr [ebp-0x1DCC]
	sub esp,8
	fstp qword ptr [esp]
	push 0x16
	mov ecx,dword ptr [ebp-0x10B8]
	call CVecCtrl::SetImpactNext_1
	push 0xC00614A4
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1A94],esp
	push 0
	call _x_com_ptr<IWzGr2DLayer>::_ctor_zero
	mov dword ptr [ebp-0x1DD4],eax
	mov edx,dword ptr [ebp-0x1DD4]
	mov dword ptr [ebp-0x1DD8],edx
	mov byte ptr [ebp-4],0x1A
	lea eax,[ebp-0x1A9C]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax+4]
	push eax
	lea ecx,[ebp-0x1AA4]
	push ecx
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,4
	mov edx,dword ptr [ebp-0x1C78]
	mov eax,dword ptr [edx+4]
	mov edx,dword ptr [eax+0x10]
	call edx
	mov eax,dword ptr [eax]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x1AA8],esp
	push 0
	call _x_com_ptr<IWzVector2D>::_ctor_zero
	mov dword ptr [ebp-0x1DDC],eax
	mov ecx,dword ptr [ebp-0x1DDC]
	mov dword ptr [ebp-0x1DE0],ecx
	mov byte ptr [ebp-4],0x1B
	mov ecx,dword ptr [ebp-0x98]
	call GW_CharacterStat::_ZtlSecureGet_nLevel
	movzx edx,al
	push edx
	lea eax,[ebp-0x1AAC]
	push eax
	mov ecx,dword ptr [ebp+8]
	call SKILLENTRY::GetEffectUOL
	mov dword ptr [ebp-0x1DE4],eax
	mov ecx,dword ptr [ebp-0x1DE4]
	mov dword ptr [ebp-0x1DE8],ecx
	mov byte ptr [ebp-4],0x1C
	mov ecx,dword ptr [ebp-0x1C78]
	add ecx,0x88
	call CAvatar::IsLeft
	neg eax
	sbb eax,eax
	add eax,1
	push eax
	mov ecx,dword ptr [ebp-0x1DE8]
	call _xbstr_t::op_ushort_str
	push eax
	call TSingleton<CAnimationDisplayer>::GetInstance
	mov byte ptr [ebp-4],0x1D
	mov ecx,eax
	call CAnimationDisplayer::Effect_General
	mov byte ptr [ebp-4],0x16
	lea ecx,[ebp-0x1AAC]
	call Ztl_bstr_t::~Ztl_bstr_t

 Block520:
	mov edx,dword ptr [ebp-0x3C]
	push edx
	mov eax,dword ptr [ebp+8]
	push eax
	mov ecx,dword ptr [ebp-0x1C78]
	call CUserLocal::CheckApplyExJablin
	test eax,eax
	je Block522

 Block521:
	mov ecx,dword ptr [ebp-0x1C78]
	mov dword ptr [ecx+0x4848],1

 Block522:
	mov edx,dword ptr [ebp-0x1C78]
	mov dword ptr [edx+0x484C],0
	cmp dword ptr [ebp+8],0
	je Block527

 Block523:
	mov eax,dword ptr [ebp+8]
	cmp dword ptr [eax],0x217C05C
	je Block526

 Block524:
	mov ecx,dword ptr [ebp+8]
	cmp dword ptr [ecx],0x217E76D
	je Block526

 Block525:
	mov edx,dword ptr [ebp+8]
	cmp dword ptr [edx],0x217E775
	jne Block527

 Block526:
	push 0
	push 0x31
	mov eax,dword ptr [ebp+8]
	mov ecx,dword ptr [eax]
	push ecx
	call play_skill_sound
	add esp,0xC

 Block527:
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::PreventRollback
	mov dword ptr [ebp-0x1AB0],1
	mov byte ptr [ebp-4],0x14
	lea ecx,[ebp-0x164]
	call COutPacket::~COutPacket
	mov byte ptr [ebp-4],0x12
	lea ecx,[ebp-0x134]
	call CSkill_HitAni::~CSkill_HitAni
	mov byte ptr [ebp-4],6
	lea ecx,[ebp-0x234]
	call ZArray<unsigned long>::~ZArray<unsigned long>
	mov byte ptr [ebp-4],4
	lea ecx,[ebp-0x24]
	call Ztl_bstr_t::~Ztl_bstr_t
	mov byte ptr [ebp-4],1
	lea ecx,[ebp-0x1CC]
	call _x_com_ptr<IWzVector2D>::~_x_com_ptr<IWzVector2D>
	mov dword ptr [ebp-4],0xFFFFFFFF
	lea ecx,[ebp-0x1E8]
	call ActionRandMan::~ActionRandMan
	mov eax,dword ptr [ebp-0x1AB0]

 Block528:
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	mov esp,ebp
	pop ebp
	ret 0x18
}
}
// CUserLocal::RequestIncCombo
_SUB_EXCEPTION_HANDLER(509070)
__SUB_CLASS_THIS0(00509070, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_509070
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov ecx,dword ptr [ecx+0x4798]
	test ecx,ecx
	jne Block2

 Block1:
	push 0xBD
	lea ecx,[esp+8]
	call COutPacket::_ctor_1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[esp+4]
	push eax
	mov dword ptr [esp+0x20],0
	call CClientSocket::SendPacket
	lea ecx,[esp+8]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block2:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	add esp,0x1C
	ret
}
}
// CUserLocal::OnRandomMesobag_Succeeded
_SUB_EXCEPTION_HANDLER(50FA30)
__SUB_CLASS_THIS(0050FA30, __thiscall, 41361,  CUserLocal, void, CInPacket&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_50FA30
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x2C]
	mov ecx,esi
	call CInPacket::Decode1
	mov ecx,esi
	movzx edi,al
	call CInPacket::Decode4
	mov esi,eax
	lea eax,[esp+0x10]
	push 0x17B4
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	xor ebx,ebx
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x2C],ebx
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x34]
	push ecx
	mov byte ptr [esp+0x30],1
	call ZXString<char>::Format
	add esp,0xC
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],ebx
	je Block2

 Block1:
	sub esp,8
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push ebx
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],ebx
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block2:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x24],bl
	cmp eax,ebx
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov eax,dword ptr [esp+0x10]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	cmp eax,ebx
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	push 0xA4
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	mov dword ptr [esp+0x14],eax
	mov dword ptr [esp+0x24],2
	cmp eax,ebx
	je Block14

 Block7:
	push esi
	push edi
	mov ecx,eax
	call CUIRandomMesoBag::_ctor_0
	cmp eax,ebx
	je Block14

 Block8:
	add eax,8
	cmp eax,ebx
	je Block14

 Block9:
	lea esi,[eax-8]
	mov dword ptr [esp+0x18],esi
	cmp esi,ebx
	je Block11

 Block10:
	lea edx,[esi+0xC]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block11:
	mov ecx,esi
	mov dword ptr [esp+0x24],3
	call CDialog::DoModal
	mov dword ptr [esp+0x24],0xFFFFFFFF
	cmp esi,ebx
	je Block13

 Block12:
	push ebx
	lea ecx,[esp+0x18]
	call ZRef<CUIRandomMesoBag>::_ReleaseRaw

 Block13:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x18
	ret 4

 Block14:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	jmp Block11
}
}
// CUserLocal::Update
_SUB_EXCEPTION_HANDLER(537330)
__SUB_CLASS_THIS0(00537330, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x74]
	sub esp,0x74
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_537330
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xEEC
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x70],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor edi,edi
	mov dword ptr [ebp+0x20],edi
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[eax+0x2044]
	mov dword ptr [ebp+0x10],eax
	call TSecType<unsigned char>::GetData
	test al,al
	jns Block3

 Block1:
	cmp dword ptr [esi+0x46E8],edi
	je Block3

 Block2:
	mov ecx,esi
	call CUser::Update
	jmp Block599

 Block3:
	cmp dword ptr [esi+0x4774],edi
	je Block6

 Block4:
	call dword ptr [ZImports::_timeGetTime]
	mov ecx,dword ptr [esi+0x4778]
	add ecx,0x32
	cmp eax,ecx
	jbe Block6

 Block5:
	mov dword ptr [esi+0x4778],edi
	mov dword ptr [esi+0x4774],edi

 Block6:
	cmp dword ptr [esi+0x4784],edi
	je Block8

 Block7:
	mov eax,dword ptr [esi+0x4788]
	mov edi,dword ptr [eax]
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esi+0x4788]
	lea ecx,[esi+0x477C]
	push eax
	call ZList<CDualKeyChecker::KeyMsg>::RemoveAt
	push ebx
	push edi
	mov ecx,esi
	call CUserLocal::OnKey
	xor edi,edi

 Block8:
	call get_update_time
	mov ebx,eax
	mov dword ptr [ebp+0x40],ebx
	mov edx,1
	cmp dword ptr [esi+0x47C4],edi
	jne Block11

 Block9:
	cmp dword ptr [esi+0x644],0x110
	jne Block20

 Block10:
	mov dword ptr [esi+0x47C4],edx
	jmp Block20

 Block11:
	cmp dword ptr [esi+0x644],0x110
	je Block20

 Block12:
	mov eax,dword ptr [esi+0x19E4]
	mov dword ptr [esi+0x47C4],edi
	cmp eax,edi
	je Block14

 Block13:
	lea ecx,[eax-0xC]
	jmp Block15

 Block14:
	xor ecx,ecx

 Block15:
	cmp dword ptr [ecx+0x1A0],edi
	je Block20

 Block16:
	cmp eax,edi
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	jmp Block19

 Block18:
	xor eax,eax

 Block19:
	mov dword ptr [eax+0x200],edx

 Block20:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block23

 Block21:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block23

 Block22:
	mov eax,edi
	jmp Block24

 Block23:
	xor eax,eax

 Block24:
	lea ecx,[eax+0x16C]
	call TSecType<unsigned long>::GetData
	cmp eax,0x623A824
	je Block29

 Block25:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block27

 Block26:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block28

 Block27:
	xor edi,edi

 Block28:
	lea ecx,[edi+0x16C]
	call TSecType<unsigned long>::GetData
	cmp eax,0x23C36D11
	jne Block145

 Block29:
	lea ecx,[ebp-0x58]
	push ecx
	call dword ptr [ZImports::_GetLocalTime]
	lea edx,[ebp+8]
	push edx
	lea eax,[ebp-0x58]
	push eax
	call dword ptr [ZImports::_SystemTimeToFileTime]
	movzx eax,word ptr [ebp-0x4E]
	cdq
	mov ecx,5
	idiv ecx
	test edx,edx
	je Block145

 Block30:
	sub ebx,dword ptr [esi+0x4850]
	cmp ebx,0x1388
	jl Block145

 Block31:
	mov eax,dword ptr [ebp+0x40]
	xor ebx,ebx
	mov dword ptr [esi+0x4850],eax
	mov dword ptr [ebp+0x64],ebx
	mov dword ptr [ebp-4],ebx
	mov dword ptr [ebp+0x44],ebx
	mov dword ptr [ebp+0x68],ebx
	mov edi,ecx
	lea ecx,[ebp+0x6C]
	push 0x1A15
	push ecx
	mov byte ptr [ebp-4],2
	sub edi,edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea edx,[ebp+0x68]
	push edx
	mov byte ptr [ebp-4],3
	call ZXString<char>::Format
	mov eax,dword ptr [ebp+0x6C]
	add esp,0xC
	mov byte ptr [ebp-4],2
	test eax,eax
	je Block33

 Block32:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block33:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block35

 Block34:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	jne Block36

 Block35:
	xor edi,edi

 Block36:
	lea ecx,[edi+0x16C]
	call TSecType<unsigned long>::GetData
	mov edi,dword ptr [ZImports::_VariantInit]
	cmp eax,0x623A824
	jne Block72

 Block37:
	lea eax,[ebp+0x24]
	push eax
	call edi
	lea ecx,[ebp+0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block39

 Block38:
	push eax
	call _com_issue_error

 Block39:
	lea edx,[ebp+0x4C]
	push edx
	mov byte ptr [ebp-4],4
	call edi
	lea eax,[ebp+0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block41

 Block40:
	push eax
	call _com_issue_error

 Block41:
	push 0
	push 0
	lea ecx,[ebp+0x24]
	push ecx
	lea edx,[ebp+0x4C]
	push edx
	push ecx
	mov dword ptr [ebp+0x3C],esp
	mov ecx,esp
	push offset _S_MAPOBJINSIDEGLIM__1
	mov byte ptr [ebp-4],5
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],6
	jne Block43

 Block42:
	push 0x80004003
	call _com_issue_error

 Block43:
	lea eax,[ebp-0x1C]
	mov byte ptr [ebp-4],5
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],7
	call Ztl_variant_t::GetUnknown
	test eax,eax
	je Block47

 Block44:
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x6C]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	xor ebx,ebx
	test eax,eax
	setl bl
	dec ebx
	and ebx,dword ptr [ebp+0x6C]
	mov dword ptr [ebp+0x44],ebx
	test eax,eax
	jge Block47

 Block45:
	cmp eax,0x80004002
	je Block47

 Block46:
	push eax
	call _com_issue_error

 Block47:
	mov edi,8
	mov byte ptr [ebp-4],5
	cmp word ptr [ebp-0x1C],di
	jne Block50

 Block48:
	mov eax,dword ptr [ebp-0x14]
	xor ecx,ecx
	mov word ptr [ebp-0x1C],cx
	test eax,eax
	je Block51

 Block49:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block51

 Block50:
	lea edx,[ebp-0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block51:
	mov byte ptr [ebp-4],4
	cmp word ptr [ebp+0x4C],di
	jne Block54

 Block52:
	xor eax,eax
	mov word ptr [ebp+0x4C],ax
	mov eax,dword ptr [ebp+0x54]
	test eax,eax
	je Block55

 Block53:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block54:
	lea ecx,[ebp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block55:
	mov byte ptr [ebp-4],2
	cmp word ptr [ebp+0x24],di
	jne Block58

 Block56:
	mov eax,dword ptr [ebp+0x2C]
	xor edx,edx
	mov word ptr [ebp+0x24],dx
	test eax,eax
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea eax,[ebp+0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block59:
	mov ecx,dword ptr [ebp+0x68]
	push 0
	push 0
	push 0xFFFFFFFF
	push ecx
	push 0
	push 0
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edx,dword ptr [ebp+0x68]
	mov edi,esp
	push 0
	push 0
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push edx
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp+0x3C],esp
	mov ecx,esp
	push edi
	call _xbstr_t::_ctor_1
	mov byte ptr [ebp-4],8
	test ebx,ebx
	jne Block61

 Block60:
	push 0x80004003
	call _com_issue_error

 Block61:
	lea eax,[ebp+0x4C]
	push eax
	mov ecx,ebx
	mov byte ptr [ebp-4],2
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],9
	call Ztl_variant_t::GetUnknown
	test eax,eax
	je Block65

 Block62:
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x6C]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	mov edx,dword ptr [ebx]
	xor ecx,ecx
	mov edi,eax
	mov eax,dword ptr [edx+8]
	test edi,edi
	setl cl
	push ebx
	dec ecx
	and ecx,dword ptr [ebp+0x6C]
	mov dword ptr [ebp+0x14],ecx
	call eax
	mov ecx,dword ptr [ebp+0x14]
	mov dword ptr [ebp+0x44],ecx
	test edi,edi
	jge Block67

 Block63:
	cmp edi,0x80004002
	je Block67

 Block64:
	push edi
	call _com_issue_error

 Block65:
	mov dword ptr [ebp+0x44],0
	test ebx,ebx
	je Block67

 Block66:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	push ebx
	call eax

 Block67:
	cmp word ptr [ebp+0x4C],8
	mov byte ptr [ebp-4],2
	jne Block70

 Block68:
	mov eax,dword ptr [ebp+0x54]
	xor ecx,ecx
	mov word ptr [ebp+0x4C],cx
	test eax,eax
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea edx,[ebp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block71:
	push 0
	push 0xFF
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x3C],esp
	mov dword ptr [eax],0
	push 0xFFFFFFB5
	mov byte ptr [ebp-4],0xA
	push 0x169
	jmp Block107

 Block72:
	lea ecx,[ebp+0x24]
	push ecx
	call edi
	lea edx,[ebp+0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block74

 Block73:
	push eax
	call _com_issue_error

 Block74:
	lea eax,[ebp+0x4C]
	push eax
	mov byte ptr [ebp-4],0xB
	call edi
	lea ecx,[ebp+0x4C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block76

 Block75:
	push eax
	call _com_issue_error

 Block76:
	push 0
	push 0
	lea edx,[ebp+0x24]
	push edx
	lea eax,[ebp+0x4C]
	push eax
	push ecx
	mov dword ptr [ebp+0x3C],esp
	mov ecx,esp
	push offset _S_MAPOBJINSIDEGLIM
	mov byte ptr [ebp-4],0xC
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0xD
	jne Block78

 Block77:
	push 0x80004003
	call _com_issue_error

 Block78:
	lea ecx,[ebp-0x1C]
	push ecx
	mov byte ptr [ebp-4],0xC
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xE
	call Ztl_variant_t::GetUnknown
	test eax,eax
	je Block82

 Block79:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx]
	lea ecx,[ebp+0x6C]
	push ecx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	call edx
	xor ebx,ebx
	test eax,eax
	setl bl
	dec ebx
	and ebx,dword ptr [ebp+0x6C]
	mov dword ptr [ebp+0x44],ebx
	test eax,eax
	jge Block82

 Block80:
	cmp eax,0x80004002
	je Block82

 Block81:
	push eax
	call _com_issue_error

 Block82:
	mov edi,8
	mov byte ptr [ebp-4],0xC
	cmp word ptr [ebp-0x1C],di
	jne Block85

 Block83:
	xor eax,eax
	mov word ptr [ebp-0x1C],ax
	mov eax,dword ptr [ebp-0x14]
	test eax,eax
	je Block86

 Block84:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block86

 Block85:
	lea ecx,[ebp-0x1C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block86:
	mov byte ptr [ebp-4],0xB
	cmp word ptr [ebp+0x4C],di
	jne Block89

 Block87:
	mov eax,dword ptr [ebp+0x54]
	xor edx,edx
	mov word ptr [ebp+0x4C],dx
	test eax,eax
	je Block90

 Block88:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block90

 Block89:
	lea eax,[ebp+0x4C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block90:
	mov byte ptr [ebp-4],2
	cmp word ptr [ebp+0x24],di
	jne Block93

 Block91:
	mov eax,dword ptr [ebp+0x2C]
	xor ecx,ecx
	mov word ptr [ebp+0x24],cx
	test eax,eax
	je Block94

 Block92:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block94

 Block93:
	lea edx,[ebp+0x24]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block94:
	mov eax,dword ptr [ebp+0x68]
	push 0
	push 0
	push 0xFFFFFFFF
	push eax
	push 0
	push 0
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov ecx,dword ptr [ebp+0x68]
	mov edi,esp
	push 0
	push 0
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push ecx
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp+0x3C],esp
	mov ecx,esp
	push edi
	call _xbstr_t::_ctor_1
	mov byte ptr [ebp-4],0xF
	test ebx,ebx
	jne Block96

 Block95:
	push 0x80004003
	call _com_issue_error

 Block96:
	lea edx,[ebp+0x4C]
	push edx
	mov ecx,ebx
	mov byte ptr [ebp-4],2
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x10
	call Ztl_variant_t::GetUnknown
	test eax,eax
	je Block100

 Block97:
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x6C]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	mov edx,dword ptr [ebx]
	xor ecx,ecx
	mov edi,eax
	mov eax,dword ptr [edx+8]
	test edi,edi
	setl cl
	push ebx
	dec ecx
	and ecx,dword ptr [ebp+0x6C]
	mov dword ptr [ebp+0x14],ecx
	call eax
	mov ecx,dword ptr [ebp+0x14]
	mov dword ptr [ebp+0x44],ecx
	test edi,edi
	jge Block102

 Block98:
	cmp edi,0x80004002
	je Block102

 Block99:
	push edi
	call _com_issue_error

 Block100:
	mov dword ptr [ebp+0x44],0
	test ebx,ebx
	je Block102

 Block101:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	push ebx
	call eax

 Block102:
	cmp word ptr [ebp+0x4C],8
	mov byte ptr [ebp-4],2
	jne Block105

 Block103:
	mov eax,dword ptr [ebp+0x54]
	xor ecx,ecx
	mov word ptr [ebp+0x4C],cx
	test eax,eax
	je Block106

 Block104:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block106

 Block105:
	lea edx,[ebp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block106:
	push 0
	push 0xFF
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x3C],esp
	mov dword ptr [eax],0
	push 0xFFFFFF6E
	mov byte ptr [ebp-4],0x11
	push 0xFFFFFE6D

 Block107:
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x14],esp
	push 0
	push ecx
	mov ecx,dword ptr [ebp+0x44]
	mov dword ptr [eax],0
	mov eax,esp
	mov dword ptr [eax],ecx
	mov dword ptr [ebp+0x14],esp
	test ecx,ecx
	je Block109

 Block108:
	mov eax,dword ptr [ecx]
	push ecx
	mov ecx,dword ptr [eax+4]
	call ecx

 Block109:
	lea edx,[ebp+0x6C]
	push edx
	mov byte ptr [ebp-4],2
	call CAnimationDisplayer::LoadLayer_0
	mov ebx,dword ptr [eax]
	add esp,0x28
	test ebx,ebx
	je Block111

 Block110:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+4]
	push ebx
	mov dword ptr [ebp+0x64],ebx
	call ecx
	jmp Block112

 Block111:
	mov ebx,dword ptr [ebp+0x64]

 Block112:
	mov eax,dword ptr [ebp+0x6C]
	test eax,eax
	je Block114

 Block113:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block114:
	test ebx,ebx
	jne Block116

 Block115:
	push 0x80004003
	call _com_issue_error

 Block116:
	mov ecx,dword ptr [ebx]
	mov edx,dword ptr [ecx+0xE0]
	push 0xFFFFFFFF
	push ebx
	call edx
	test eax,eax
	jge Block118

 Block117:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebx
	push eax
	call _com_issue_errorex

 Block118:
	mov eax,dword ptr [esi+0x1960]
	mov ecx,0xD
	mov word ptr [ebp+0x4C],cx
	mov dword ptr [ebp+0x54],eax
	test eax,eax
	je Block120

 Block119:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block120:
	mov edx,dword ptr [ebp+0x4C]
	mov ecx,dword ptr [ebx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [ebp+0x50]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp+0x54]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp+0x58]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0xFC]
	push ebx
	mov byte ptr [ebp-4],0x12
	call eax
	test eax,eax
	jge Block122

 Block121:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebx
	push eax
	call _com_issue_errorex

 Block122:
	cmp word ptr [ebp+0x4C],8
	mov byte ptr [ebp-4],2
	jne Block125

 Block123:
	mov eax,dword ptr [ebp+0x54]
	xor ecx,ecx
	mov word ptr [ebp+0x4C],cx
	test eax,eax
	je Block126

 Block124:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block126

 Block125:
	lea edx,[ebp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block126:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp+0x24]
	push eax
	call edi
	lea ecx,[ebp+0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block128

 Block127:
	push eax
	call _com_issue_error

 Block128:
	lea edx,[ebp+0x4C]
	push edx
	mov byte ptr [ebp-4],0x13
	call edi
	lea eax,[ebp+0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block130

 Block129:
	push eax
	call _com_issue_error

 Block130:
	mov edx,dword ptr [ebp+0x24]
	mov ecx,dword ptr [ebx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [ebp+0x28]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp+0x2C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp+0x30]
	mov dword ptr [eax+0xC],edx
	mov edx,dword ptr [ebp+0x4C]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [ebp+0x50]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp+0x54]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp+0x58]
	push 0
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x110]
	push ebx
	mov byte ptr [ebp-4],0x14
	call eax
	test eax,eax
	jge Block132

 Block131:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebx
	push eax
	call _com_issue_errorex

 Block132:
	mov edi,8
	mov byte ptr [ebp-4],0x13
	cmp word ptr [ebp+0x4C],di
	jne Block135

 Block133:
	mov eax,dword ptr [ebp+0x54]
	xor ecx,ecx
	mov word ptr [ebp+0x4C],cx
	test eax,eax
	je Block136

 Block134:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block136

 Block135:
	lea edx,[ebp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block136:
	mov byte ptr [ebp-4],2
	cmp word ptr [ebp+0x24],di
	jne Block139

 Block137:
	xor eax,eax
	mov word ptr [ebp+0x24],ax
	mov eax,dword ptr [ebp+0x2C]
	test eax,eax
	je Block140

 Block138:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block140

 Block139:
	lea ecx,[ebp+0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block140:
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x3C],esp
	push 0
	mov dword ptr [eax],0
	push ecx
	mov eax,esp
	mov dword ptr [eax],ebx
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+4]
	mov dword ptr [ebp+0x3C],esp
	push ebx
	call eax
	mov ecx,dword ptr [TSingleton<CAnimationDisplayer>::ms_pInstance]
	call CAnimationDisplayer::RegisterOneTimeAnimation
	mov eax,dword ptr [ebp+0x68]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block142

 Block141:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block142:
	mov eax,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block144

 Block143:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block144:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ecx

 Block145:
	mov edi,dword ptr [esi+0x19E4]
	test edi,edi
	je Block147

 Block146:
	add edi,0xFFFFFFF4
	jmp Block148

 Block147:
	xor edi,edi

 Block148:
	mov ecx,dword ptr [ebp+0x10]
	lea edx,[ebp-0x50]
	push edx
	mov dword ptr [ebp+0x60],edi
	call CWvsContext::GetCharacterData
	mov eax,dword ptr [eax+4]
	mov dword ptr [ebp+0x44],eax
	mov eax,dword ptr [ebp-0x4C]
	test eax,eax
	je Block153

 Block149:
	lea edi,[eax-0x10]
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block152

 Block150:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block152

 Block151:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block152:
	mov edi,dword ptr [ebp+0x60]
	mov dword ptr [ebp-0x4C],0

 Block153:
	mov ecx,dword ptr [ebp+0x10]
	add ecx,0x2148
	mov dword ptr [ebp+0x34],ecx
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	call CSequencedKeyMan::Update
	cmp dword ptr [edi+0x214],0
	je Block157

 Block154:
	mov edx,dword ptr [edi+0x78]
	push edx
	lea eax,[edi+0x68]
	push eax
	call _ZtlSecureFuseHelper<double>::call
	fcomp qword ptr [__real_0000000000000000]
	add esp,8
	fnstsw ax
	test ah,0x41
	jne Block157

 Block155:
	mov ecx,dword ptr [ebp+0x40]
	cmp dword ptr [esi+0x468C],ecx
	jg Block157

 Block156:
	mov dword ptr [edi+0x214],0

 Block157:
	mov eax,dword ptr [esi+0x2E98]
	test eax,eax
	je Block159

 Block158:
	push 0x1E
	push 0x32
	push eax
	mov ecx,esi
	call CUser::FixedPosTo
	test eax,eax
	jge Block160

 Block159:
	mov ecx,edi
	call CVecCtrl::UpdateActive
	mov edi,dword ptr [edi+0x1D8]
	mov edx,dword ptr [esi+0x88]
	mov eax,dword ptr [edx+0x10]
	lea ecx,[esi+0x88]
	push 0
	push edi
	call eax

 Block160:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	test edi,edi
	je Block162

 Block161:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	jne Block163

 Block162:
	xor edi,edi

 Block163:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[esi+4]
	lea eax,[ebp+8]
	push eax
	call edx
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push ecx
	push edx
	lea eax,[ebp-0x44]
	push eax
	lea ecx,[edi+0x148]
	call CToolTipHelper::GetNearToolTip
	mov eax,dword ptr [ebp-0x38]
	mov dword ptr [ebp-4],0x15
	mov dword ptr [ebp+0x60],eax
	test eax,eax
	je Block176

 Block164:
	mov eax,dword ptr [eax]
	mov dword ptr [ebp+0x18],eax
	cmp eax,dword ptr [esi+0x4620]
	je Block175

 Block165:
	push 0
	lea ecx,[ebp+0x18]
	lea edi,[esi+0x4624]
	push ecx
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::GetAt
	test eax,eax
	jne Block175

 Block166:
	lea ecx,[ebp-0xEF8]
	call CUIToolTip::_ctor_default
	xor eax,eax
	mov dword ptr [ebp+0x68],eax
	mov dword ptr [ebp+0x64],eax
	mov ebx,dword ptr [_D_G_PSTAGE+4]
	mov byte ptr [ebp-4],0x18
	test ebx,ebx
	je Block169

 Block167:
	mov edx,dword ptr [ebx+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[ebx+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block169

 Block168:
	mov eax,ebx
	jmp Block170

 Block169:
	xor eax,eax

 Block170:
	lea ecx,[ebp+0x64]
	push ecx
	lea edx,[ebp+0x68]
	push edx
	mov edx,dword ptr [ebp+0x18]
	lea ecx,[ebp-0x2C]
	push ecx
	push edx
	lea ecx,[eax+0x148]
	call CToolTipHelper::GetCharToolTipInfo
	push 1
	push 0
	push 0
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	lea eax,[ebp+0x64]
	mov dword ptr [ebp+0x3C],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea edx,[ebp+0x68]
	mov dword ptr [ebp+0x6C],esp
	push edx
	mov byte ptr [ebp-4],0x19
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp-0x28]
	mov ecx,dword ptr [ebp-0x2C]
	push eax
	push ecx
	lea ecx,[ebp-0xEF8]
	mov byte ptr [ebp-4],0x18
	call CUIToolTip::SetToolTip_String2
	lea edx,[ebp-0xEF8]
	push edx
	lea eax,[ebp+0x18]
	push eax
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::Insert
	mov eax,dword ptr [ebp+0x64]
	mov byte ptr [ebp-4],0x17
	test eax,eax
	je Block172

 Block171:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block172:
	mov eax,dword ptr [ebp+0x68]
	mov byte ptr [ebp-4],0x16
	test eax,eax
	je Block174

 Block173:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block174:
	lea ecx,[ebp-0xEF8]
	mov byte ptr [ebp-4],0x15
	call CUIToolTip::~CUIToolTip

 Block175:
	lea ecx,[ebp+0x60]
	push ecx
	call ZList<long>::GetNext
	mov eax,dword ptr [ebp+0x60]
	add esp,4
	test eax,eax
	jne Block164

 Block176:
	lea edi,[esi+0x4624]
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::GetHeadPosition
	mov dword ptr [ebp+0x18],eax
	test eax,eax
	je Block182

 Block177:
	nop

 Block178:
	push 0
	lea edx,[ebp+0x18]
	push edx
	mov ecx,edi
	mov ebx,eax
	call ZMap<long, CUIToolTip, long>::GetNext
	mov eax,dword ptr [eax]
	mov dword ptr [ebp+0x60],eax
	cmp eax,dword ptr [esi+0x4620]
	je Block181

 Block179:
	push 0
	lea eax,[ebp+0x60]
	push eax
	lea ecx,[ebp-0x44]
	call ZList<long>::Find
	test eax,eax
	jne Block181

 Block180:
	push eax
	lea ecx,[ebp+0x60]
	push ecx
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::Insert
	lea ecx,[eax+0xC]
	call CUIToolTip::ClearToolTip
	add ebx,8
	push ebx
	mov ecx,edi
	call ZMap<long, CUIToolTip, long>::RemoveKey

 Block181:
	mov eax,dword ptr [ebp+0x18]
	test eax,eax
	jne Block178

 Block182:
	lea ecx,[ebp-0x44]
	mov dword ptr [ebp-4],0xFFFFFFFF
	mov dword ptr [ebp-0x44], 0
	call ZList<long>::RemoveAll
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	test ecx,ecx
	je Block184

 Block183:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	call eax

 Block184:
	cmp dword ptr [esi+0x471C],0
	je Block187

 Block185:
	mov eax,dword ptr [ebp+0x40]
	mov ecx,eax
	sub ecx,dword ptr [esi+0x4720]
	cmp ecx,0x1B58
	jle Block187

 Block186:
	mov dword ptr [esi+0x4720],eax
	mov dword ptr [esi+0x471C],0

 Block187:
	cmp dword ptr [esi+0x46F0],0
	je Block320

 Block188:
	lea ebx,[esi+0x88]
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x65
	je Block195

 Block189:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x52
	je Block195

 Block190:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x72
	je Block195

 Block191:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x95
	je Block195

 Block192:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x97
	je Block195

 Block193:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0xC1
	je Block195

 Block194:
	xor eax,eax
	jmp Block196

 Block195:
	mov eax,1

 Block196:
	mov edi,dword ptr [esi+0x46F0]
	test edi,edi
	jne Block198

 Block197:
	push 0x80004003
	call _com_issue_error

 Block198:
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x11C]
	xor ecx,ecx
	test eax,eax
	sete cl
	push ecx
	push edi
	call edx
	test eax,eax
	jge Block200

 Block199:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block200:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x65
	je Block206

 Block201:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x52
	je Block206

 Block202:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x72
	je Block206

 Block203:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x95
	je Block206

 Block204:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0x97
	je Block206

 Block205:
	mov ecx,ebx
	call CAvatar::GetOneTimeAction
	cmp eax,0xC1
	jne Block213

 Block206:
	mov ecx,dword ptr [esi+0x46F0]
	test ecx,ecx
	jne Block208

 Block207:
	push 0x80004003
	call _com_issue_error

 Block208:
	lea eax,[ebp+0x6C]
	push eax
	call IWzGr2DLayer::Getalpha
	mov edi,dword ptr [eax]
	mov dword ptr [ebp-4],0x1A
	mov dword ptr [ebp+0x20],1
	test edi,edi
	jne Block210

 Block209:
	push 0x80004003
	call _com_issue_error

 Block210:
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0x20]
	lea edx,[ebp+0x60]
	push edx
	push edi
	mov dword ptr [ebp+0x60],0
	call eax
	test eax,eax
	jge Block212

 Block211:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push edi
	push eax
	call _com_issue_errorex

 Block212:
	cmp dword ptr [ebp+0x60],0
	mov byte ptr [ebp+0x4B],1
	jg Block214

 Block213:
	mov byte ptr [ebp+0x4B],0

 Block214:
	test byte ptr [ebp+0x20],1
	mov dword ptr [ebp-4],0xFFFFFFFF
	je Block217

 Block215:
	mov eax,dword ptr [ebp+0x6C]
	and dword ptr [ebp+0x20],0xFFFFFFFE
	test eax,eax
	je Block217

 Block216:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block217:
	cmp byte ptr [ebp+0x4B],0
	je Block229

 Block218:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp]
	push eax
	call edi
	lea ecx,[ebp]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block220

 Block219:
	push eax
	call _com_issue_error

 Block220:
	lea edx,[ebp+0x4C]
	push edx
	mov dword ptr [ebp-4],0x1B
	call edi
	lea eax,[ebp+0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block222

 Block221:
	push eax
	call _com_issue_error

 Block222:
	mov ecx,dword ptr [esi+0x46F0]
	mov bl,0x1C
	mov byte ptr [ebp-4],bl
	test ecx,ecx
	jne Block224

 Block223:
	push 0x80004003
	call _com_issue_error

 Block224:
	lea edx,[ebp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x1D
	test ecx,ecx
	jne Block226

 Block225:
	push 0x80004003
	call _com_issue_error

 Block226:
	lea eax,[ebp]
	push eax
	lea edx,[ebp+0x4C]
	push edx
	push 0
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [ebp+0x6C]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block228

 Block227:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block228:
	mov byte ptr [ebp-4],0x1B
	jmp Block254

 Block229:
	mov ecx,ebx
	call CAvatar::IsOnPlayingRotateAction
	test eax,eax
	jne Block238

 Block230:
	mov ecx,dword ptr [esi+0x46F0]
	test ecx,ecx
	jne Block232

 Block231:
	push 0x80004003
	call _com_issue_error

 Block232:
	lea edx,[ebp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov edi,dword ptr [eax]
	or dword ptr [ebp+0x20],2
	mov dword ptr [ebp-4],0x1E
	test edi,edi
	jne Block234

 Block233:
	push 0x80004003
	call _com_issue_error

 Block234:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x20]
	lea ecx,[ebp+0x60]
	push ecx
	push edi
	mov dword ptr [ebp+0x60],0
	call edx
	test eax,eax
	jge Block236

 Block235:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push edi
	push eax
	call _com_issue_errorex

 Block236:
	cmp dword ptr [ebp+0x60],0
	jne Block238

 Block237:
	mov bl,1
	jmp Block239

 Block238:
	xor bl,bl

 Block239:
	test byte ptr [ebp+0x20],2
	mov dword ptr [ebp-4],0xFFFFFFFF
	je Block242

 Block240:
	mov eax,dword ptr [ebp+0x6C]
	and dword ptr [ebp+0x20],0xFFFFFFFD
	test eax,eax
	je Block242

 Block241:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block242:
	test bl,bl
	je Block262

 Block243:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp]
	push eax
	call edi
	lea ecx,[ebp]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block245

 Block244:
	push eax
	call _com_issue_error

 Block245:
	lea edx,[ebp+0x4C]
	mov ebx,0x1F
	push edx
	mov dword ptr [ebp-4],ebx
	call edi
	lea eax,[ebp+0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block247

 Block246:
	push eax
	call _com_issue_error

 Block247:
	mov ecx,dword ptr [esi+0x46F0]
	mov byte ptr [ebp-4],0x20
	test ecx,ecx
	jne Block249

 Block248:
	push 0x80004003
	call _com_issue_error

 Block249:
	lea edx,[ebp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x21
	test ecx,ecx
	jne Block251

 Block250:
	push 0x80004003
	call _com_issue_error

 Block251:
	lea eax,[ebp]
	push eax
	lea edx,[ebp+0x4C]
	push edx
	push 0
	push 0xFF
	call IWzVector2D::RelMove
	mov eax,dword ptr [ebp+0x6C]
	mov byte ptr [ebp-4],0x20
	test eax,eax
	je Block253

 Block252:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block253:
	mov byte ptr [ebp-4],bl

 Block254:
	mov edi,8
	cmp word ptr [ebp+0x4C],di
	jne Block257

 Block255:
	xor eax,eax
	mov word ptr [ebp+0x4C],ax
	mov eax,dword ptr [ebp+0x54]
	test eax,eax
	je Block258

 Block256:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block258

 Block257:
	lea ecx,[ebp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block258:
	mov dword ptr [ebp-4],0xFFFFFFFF
	cmp word ptr [ebp],di
	jne Block261

 Block259:
	mov eax,dword ptr [ebp+8]
	xor edx,edx
	mov word ptr [ebp],dx
	test eax,eax
	je Block262

 Block260:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block262

 Block261:
	lea eax,[ebp]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block262:
	mov ecx,dword ptr [ebp+0x10]
	cmp dword ptr [ecx+0x3850],0
	je Block271

 Block263:
	mov ecx,dword ptr [esi+0x46F0]
	test ecx,ecx
	jne Block265

 Block264:
	push 0x80004003
	call _com_issue_error

 Block265:
	lea edx,[ebp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov edi,dword ptr [eax]
	or dword ptr [ebp+0x20],4
	mov dword ptr [ebp-4],0x22
	test edi,edi
	jne Block267

 Block266:
	push 0x80004003
	call _com_issue_error

 Block267:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x20]
	lea ecx,[ebp+0x60]
	push ecx
	push edi
	mov dword ptr [ebp+0x60],0
	call edx
	test eax,eax
	jge Block269

 Block268:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push edi
	push eax
	call _com_issue_errorex

 Block269:
	cmp dword ptr [ebp+0x60],0
	jle Block271

 Block270:
	mov bl,1
	jmp Block272

 Block271:
	xor bl,bl

 Block272:
	test byte ptr [ebp+0x20],4
	mov dword ptr [ebp-4],0xFFFFFFFF
	je Block275

 Block273:
	mov eax,dword ptr [ebp+0x6C]
	and dword ptr [ebp+0x20],0xFFFFFFFB
	test eax,eax
	je Block275

 Block274:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block275:
	test bl,bl
	je Block287

 Block276:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp]
	push eax
	call edi
	lea ecx,[ebp]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block278

 Block277:
	push eax
	call _com_issue_error

 Block278:
	lea edx,[ebp+0x4C]
	push edx
	mov dword ptr [ebp-4],0x23
	call edi
	lea eax,[ebp+0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block280

 Block279:
	push eax
	call _com_issue_error

 Block280:
	mov ecx,dword ptr [esi+0x46F0]
	mov bl,0x24
	mov byte ptr [ebp-4],bl
	test ecx,ecx
	jne Block282

 Block281:
	push 0x80004003
	call _com_issue_error

 Block282:
	lea edx,[ebp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x25
	test ecx,ecx
	jne Block284

 Block283:
	push 0x80004003
	call _com_issue_error

 Block284:
	lea eax,[ebp]
	push eax
	lea edx,[ebp+0x4C]
	push edx
	push 0
	push 0
	call IWzVector2D::RelMove
	mov eax,dword ptr [ebp+0x6C]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block286

 Block285:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block286:
	mov byte ptr [ebp-4],0x23
	jmp Block312

 Block287:
	mov ecx,dword ptr [ebp+0x10]
	cmp dword ptr [ecx+0x3850],0
	jne Block296

 Block288:
	mov ecx,dword ptr [esi+0x46F0]
	test ecx,ecx
	jne Block290

 Block289:
	push 0x80004003
	call _com_issue_error

 Block290:
	lea edx,[ebp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov edi,dword ptr [eax]
	or dword ptr [ebp+0x20],8
	mov dword ptr [ebp-4],0x26
	test edi,edi
	jne Block292

 Block291:
	push 0x80004003
	call _com_issue_error

 Block292:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x20]
	lea ecx,[ebp+0x60]
	push ecx
	push edi
	mov dword ptr [ebp+0x60],0
	call edx
	test eax,eax
	jge Block294

 Block293:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push edi
	push eax
	call _com_issue_errorex

 Block294:
	cmp dword ptr [ebp+0x60],0
	jne Block296

 Block295:
	mov bl,1
	jmp Block297

 Block296:
	xor bl,bl

 Block297:
	test byte ptr [ebp+0x20],8
	mov dword ptr [ebp-4],0xFFFFFFFF
	je Block300

 Block298:
	mov eax,dword ptr [ebp+0x6C]
	and dword ptr [ebp+0x20],0xFFFFFFF7
	test eax,eax
	je Block300

 Block299:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block300:
	test bl,bl
	je Block320

 Block301:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp]
	push eax
	call edi
	lea ecx,[ebp]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block303

 Block302:
	push eax
	call _com_issue_error

 Block303:
	lea edx,[ebp+0x4C]
	push edx
	mov dword ptr [ebp-4],0x27
	call edi
	lea eax,[ebp+0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block305

 Block304:
	push eax
	call _com_issue_error

 Block305:
	mov ecx,dword ptr [esi+0x46F0]
	mov bl,0x28
	mov byte ptr [ebp-4],bl
	test ecx,ecx
	jne Block307

 Block306:
	push 0x80004003
	call _com_issue_error

 Block307:
	lea edx,[ebp+0x6C]
	push edx
	call IWzGr2DLayer::Getalpha
	mov ecx,dword ptr [eax]
	mov byte ptr [ebp-4],0x29
	test ecx,ecx
	jne Block309

 Block308:
	push 0x80004003
	call _com_issue_error

 Block309:
	lea eax,[ebp]
	push eax
	lea edx,[ebp+0x4C]
	push edx
	push 0
	push 0xFF
	call IWzVector2D::RelMove
	mov eax,dword ptr [ebp+0x6C]
	mov byte ptr [ebp-4],bl
	test eax,eax
	je Block311

 Block310:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block311:
	mov byte ptr [ebp-4],0x27

 Block312:
	mov edi,8
	cmp word ptr [ebp+0x4C],di
	jne Block315

 Block313:
	xor eax,eax
	mov word ptr [ebp+0x4C],ax
	mov eax,dword ptr [ebp+0x54]
	test eax,eax
	je Block316

 Block314:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block316

 Block315:
	lea ecx,[ebp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block316:
	mov dword ptr [ebp-4],0xFFFFFFFF
	cmp word ptr [ebp],di
	jne Block319

 Block317:
	mov eax,dword ptr [ebp+8]
	xor edx,edx
	mov word ptr [ebp],dx
	test eax,eax
	je Block320

 Block318:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block320

 Block319:
	lea eax,[ebp]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block320:
	mov eax,dword ptr [ebp+0x34]
	mov ecx,dword ptr [eax+0x380]
	lea edi,[eax+0x378]
	push ecx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block338

 Block321:
	mov edx,dword ptr [ebp+0x40]
	sub edx,dword ptr [esi+0x4668]
	cmp edx,0x3E8
	jle Block338

 Block322:
	mov eax,dword ptr [esi+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	je Block338

 Block323:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [eax+0x1104]
	push ecx
	add eax,0x10FC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block338

 Block324:
	lea edx,[ebp-0x24]
	push edx
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	cmp dword ptr [eax+4],0
	mov dword ptr [ebp-4],0x2A
	je Block326

 Block325:
	lea eax,[ebp-0x2C]
	push eax
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	mov eax,dword ptr [eax+4]
	or dword ptr [ebp+0x20],0x10
	mov ebx,dword ptr [eax+0x50]
	jmp Block327

 Block326:
	xor ebx,ebx

 Block327:
	test byte ptr [ebp+0x20],0x10
	je Block329

 Block328:
	and dword ptr [ebp+0x20],0xFFFFFFEF
	lea ecx,[ebp-0x2C]
	call ZRef<PassiveSkillData>::~ZRef<PassiveSkillData>

 Block329:
	lea ecx,[ebp-0x24]
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ZRef<PassiveSkillData>::~ZRef<PassiveSkillData>
	mov ecx,dword ptr [ebp+0x34]
	mov edx,dword ptr [ecx+0x380]
	push edx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp+0x44]
	mov edi,eax
	mov eax,dword ptr [ebp+0x34]
	push 4
	push eax
	push ecx
	call get_resistance
	mov ecx,0x64
	sub ecx,ebx
	sub ecx,eax
	imul ecx,edi
	mov eax,0x51EB851F
	imul ecx
	mov eax,dword ptr [ebp+0x44]
	sar edx,5
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	mov edx,dword ptr [eax+0x69]
	push edx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	dec eax
	add esp,0x1C
	cmp eax,edi
	jge Block331

 Block330:
	mov dword ptr [ebp+0x68],eax
	jmp Block332

 Block331:
	mov eax,edi
	mov dword ptr [ebp+0x68],edi

 Block332:
	test eax,eax
	jle Block338

 Block333:
	mov eax,dword ptr [ebp+0x68]
	push eax
	mov ecx,esi
	call CUserLocal::GetAchillesReduce
	mov ecx,dword ptr [ebp+0x34]
	mov edx,dword ptr [ecx+0xC54]
	mov ebx,dword ptr [ebp+0x34]
	push edx
	add ebx,0xC4C
	push ebx
	mov dword ptr [ebp+0x60],eax
	xor edi,edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block335

 Block334:
	mov eax,dword ptr [ebp+0x34]
	mov ecx,dword ptr [eax+0xC54]
	push ecx
	push ebx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [ebp+0x68]
	sub edx,dword ptr [ebp+0x60]
	mov ecx,0x3E8
	sub ecx,eax
	imul ecx,edx
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov edi,edx
	shr edi,0x1F
	add esp,8
	add edi,edx

 Block335:
	mov ebx,dword ptr [ebp+0x68]
	sub ebx,edi
	sub ebx,dword ptr [ebp+0x60]
	push 0
	mov eax,ebx
	neg eax
	push eax
	mov ecx,esi
	call CUser::MakeIncDecHPEffect
	mov ecx,dword ptr [ebp+0x10]
	xor edi,edi
	add ecx,0x3C98
	mov dword ptr [ebp+0x64],ecx

 Block336:
	mov ecx,dword ptr [ebp+0x64]
	call CRand32::Random
	mov dword ptr [ebp+edi*4-0x48],eax
	inc edi
	cmp edi,6
	jl Block336

 Block337:
	push 0x34
	lea ecx,[ebp+0x4C]
	call COutPacket::_ctor_1
	mov dword ptr [ebp-4],0x2B
	call get_update_time
	push eax
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode4
	push 0xFC
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode1
	push 4
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp+0x68]
	push edx
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode2
	push 1
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[ebp+0x4C]
	push eax
	call CClientSocket::SendPacket
	push 0
	push 0
	push ebx
	mov ecx,esi
	call CUserLocal::TryConsumePetHP
	mov ecx,dword ptr [ebp+0x40]
	mov dword ptr [esi+0x4668],ecx
	lea ecx,[ebp+0x50]
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block338:
	mov eax,dword ptr [ebp+0x34]
	mov edx,dword ptr [eax+0xD2C]
	mov ebx,dword ptr [ebp+0x40]
	lea edi,[eax+0xD24]
	push edx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block349

 Block339:
	mov eax,ebx
	sub eax,dword ptr [esi+0x4674]
	cmp eax,0x7D0
	jle Block349

 Block340:
	mov eax,dword ptr [esi+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	je Block349

 Block341:
	mov ecx,dword ptr [ebp+0x34]
	mov edx,dword ptr [ecx+0xD2C]
	push edx
	push edi
	call _ZtlSecureFuseHelper<long>::call
	mov edi,eax
	mov eax,dword ptr [ebp+0x44]
	mov ecx,dword ptr [eax+0x69]
	push ecx
	add eax,0x61
	push eax
	call _ZtlSecureFuseHelper<long>::call
	dec eax
	add esp,0x10
	cmp eax,edi
	jge Block343

 Block342:
	mov edi,eax

 Block343:
	test edi,edi
	jle Block349

 Block344:
	push 0
	push edi
	mov ecx,esi
	call CUser::MakeIncDecHPEffect
	lea edx,[ebp+0x6C]
	push 0x1566
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	mov dword ptr [ebp-4],0x2C
	je Block346

 Block345:
	sub esp,8
	mov ecx,esp
	mov dword ptr [ebp+0x3C],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 7
	push eax
	call CUIStatusBar::ChatLogAdd

 Block346:
	mov eax,dword ptr [ebp+0x6C]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block348

 Block347:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block348:
	push 0x34
	lea ecx,[ebp+0x4C]
	call COutPacket::_ctor_1
	mov dword ptr [ebp-4],0x2D
	call get_update_time
	push eax
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode4
	push 0xFC
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode1
	push 4
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode1
	push edi
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode4
	push 0
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode2
	push 3
	lea ecx,[ebp+0x4C]
	call COutPacket::Encode1
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	lea eax,[ebp+0x4C]
	push eax
	call CClientSocket::SendPacket
	push 0
	push 0
	push edi
	mov ecx,esi
	call CUserLocal::TryConsumePetHP
	lea ecx,[ebp+0x50]
	mov dword ptr [esi+0x4674],ebx
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block349:
	lea ecx,[esi+0x2E20]
	call TSecType<long>::GetData
	test eax,eax
	jne Block458

 Block350:
	mov eax,dword ptr [esi+0x640]
	and eax,0xFFFFFFFE
	cmp eax,0x12
	je Block458

 Block351:
	mov dword ptr [ebp+0x18],0
	lea ecx,[ebp+0x18]
	push ecx
	mov ecx,dword ptr [ebp+0x10]
	mov dword ptr [ebp-4],0x2E
	call CWvsContext::GetOnlinePartyMemberID
	mov edx,dword ptr [TSingleton<CAffectedAreaPool>::ms_pInstance]
	mov eax,dword ptr [esi+4]
	mov eax,dword ptr [eax+0x10]
	mov edi,dword ptr [esi+0x2E18]
	mov ebx,dword ptr [esi+0x19E8]
	lea ecx,[esi+4]
	mov dword ptr [ebp+0x6C],edx
	lea edx,[ebp+8]
	push edx
	call eax
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [eax]
	push edi
	push ecx
	mov ecx,dword ptr [ebp+0x6C]
	push edx
	lea eax,[ebp+0x18]
	push eax
	push ebx
	call CAffectedAreaPool::IsSmokeAreaByPoint
	test eax,eax
	jne Block457

 Block352:
	push 1
	lea ecx,[ebp+0x4C]
	lea edi,[esi+0x88]
	push ecx
	mov ecx,edi
	call CAvatar::GetBodyRect
	mov edx,dword ptr [ebp+0x4C]
	mov eax,dword ptr [ebp+0x50]
	mov ecx,dword ptr [ebp+0x54]
	mov dword ptr [ebp+0x24],edx
	mov edx,dword ptr [ebp+0x58]
	mov dword ptr [ebp+0x28],eax
	mov eax,dword ptr [esi]
	mov dword ptr [ebp+0x2C],ecx
	mov dword ptr [ebp+0x30],edx
	mov edx,dword ptr [eax+8]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [eax+0x224]
	push ecx
	add eax,0x21C
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block355

 Block353:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0xBC4]
	push ecx
	add eax,0xBBC
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jne Block355

 Block354:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x120C]
	push ecx
	add eax,0x1204
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block356

 Block355:
	mov eax,1

 Block356:
	mov ecx,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	push eax
	lea edx,[ebp+0x4C]
	push edx
	call CMobPool::FindBodyAttackMob
	mov ebx,eax
	mov dword ptr [ebp+0x64],ebx
	test ebx,ebx
	je Block398

 Block357:
	mov eax,dword ptr [edi+0x5B8]
	push 0
	push eax
	mov ecx,edi
	call CAvatar::MoveAction2RawAction
	mov ecx,edi
	mov dword ptr [ebp+0x60],eax
	call CAvatar::GetOneTimeAction
	cmp eax,0xFFFFFFFF
	jle Block359

 Block358:
	mov ecx,edi
	call CAvatar::GetOneTimeAction
	jmp Block360

 Block359:
	mov eax,dword ptr [ebp+0x60]

 Block360:
	cmp eax,2
	jl Block362

 Block361:
	cmp eax,3
	jle Block370

 Block362:
	cmp eax,0x30
	je Block370

 Block363:
	cmp eax,0x31
	je Block370

 Block364:
	cmp eax,0x32
	je Block370

 Block365:
	cmp eax,0x33
	je Block370

 Block366:
	cmp eax,0x34
	je Block370

 Block367:
	cmp eax,0x35
	je Block370

 Block368:
	cmp eax,0x36
	je Block370

 Block369:
	cmp eax,0x7D
	jne Block375

 Block370:
	mov eax,dword ptr [_D_G_PSTAGE+4]
	mov dword ptr [ebp+0x60],eax
	test eax,eax
	je Block373

 Block371:
	mov ecx,eax
	mov eax,dword ptr [ecx+4]
	mov edx,dword ptr [eax+0x48]
	add ecx,4
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block373

 Block372:
	mov ecx,dword ptr [ebp+0x60]
	jmp Block374

 Block373:
	xor ecx,ecx

 Block374:
	lea eax,[ebp+0x4C]
	push eax
	call CMapLoadable::IsInSafeZone
	test eax,eax
	jne Block398

 Block375:
	mov eax,dword ptr [ebx+0x174]
	cmp dword ptr [eax+0x214],1
	jne Block377

 Block376:
	mov ecx,dword ptr [eax+0x14]
	push ecx
	add eax,0xC
	push eax
	call _ZtlSecureFuseHelper<unsigned long>::call
	add esp,8
	push eax
	mov ecx,esi
	call CUserLocal::SendBanMapByMobRequest

 Block377:
	mov edi,dword ptr [edi+0x548]
	test edi,edi
	je Block383

 Block378:
	push edi
	call CMorphTemplate::IsHideMorphed
	add esp,4
	test eax,eax
	je Block383

 Block379:
	mov eax,dword ptr [ebp+0x40]
	mov edx,eax
	sub edx,dword ptr [esi+0x4670]
	cmp edx,0x7D0
	jl Block398

 Block380:
	mov ecx,dword ptr [ebp+0x44]
	mov dword ptr [esi+0x4670],eax
	lea eax,[ebp+0x60]
	push eax
	push 0x4DD5CF
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov dword ptr [ebp+0x60],0
	call CSkillInfo::GetSkillLevel_0
	mov ecx,dword ptr [ebp+0x60]
	push eax
	call SKILLENTRY::GetLevelData
	push eax
	lea ecx,[ebp-0x4B0]
	call SKILLLEVELDATA::_ctor_0
	mov eax,dword ptr [esi+0x640]
	lea ecx,[ebp-0x4B0]
	mov byte ptr [ebp-4],0x2F
	and eax,0xFFFFFFFE
	call SKILLLEVELDATA::_ZtlSecureGet_nProp
	mov edx,dword ptr [ebp-0x39C]
	push edx
	lea eax,[ebp-0x3A4]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov ecx,offset _D_G_RAND
	mov edi,eax
	call CRand32::Random
	xor edx,edx
	mov ecx,0x64
	div ecx
	cmp edi,edx
	jae Block382

 Block381:
	lea ecx,[ebp-0x4B0]
	mov byte ptr [ebp-4],0x2E
	call SKILLLEVELDATA::~SKILLLEVELDATA
	jmp Block398

 Block382:
	push 0x4DD5CF
	mov ecx,esi
	call CUserLocal::SendSkillCancelRequest
	lea ecx,[ebp-0x4B0]
	mov byte ptr [ebp-4],0x2E
	call SKILLLEVELDATA::~SKILLLEVELDATA
	lea ecx,[ebp+0x18]
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ZArray<unsigned long>::RemoveAll
	jmp Block599

 Block383:
	mov edx,dword ptr [ebp+0x34]
	mov ecx,dword ptr [edx+0x13BC]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+4]
	call edx
	test al,al
	je Block387

 Block384:
	mov ecx,dword ptr [ebp+0x24]
	mov edx,dword ptr [ebp+0x28]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [ebp+0x2C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp+0x30]
	mov dword ptr [eax+8],ecx
	mov dword ptr [eax+0xC],edx
	lea eax,[ebp+0x38]
	push eax
	mov ecx,ebx
	call CMob::GetHitPoint
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	mov dword ptr [ebp+0x60],0
	call eax
	mov ecx,eax
	lea edx,[ebp+0x60]
	push edx
	mov eax,0x10624DD3
	imul ecx
	mov ecx,dword ptr [ebp+0x44]
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	dec eax
	neg eax
	sbb eax,eax
	and eax,0xFF67908D
	add eax,0xE66864
	push eax
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	jle Block387

 Block385:
	mov ecx,dword ptr [ebp+0x34]
	call SecondaryStat::IsRidingTamedMob
	test eax,eax
	jne Block387

 Block386:
	mov edx,dword ptr [ebp+0x3C]
	mov eax,dword ptr [ebp+0x38]
	mov ecx,dword ptr [ebp+0x60]
	push edx
	push eax
	push ebx
	push edi
	push ecx
	mov ecx,esi
	call CUserLocal::TryDoingBodyAttack

 Block387:
	mov eax,dword ptr [ebp+0x34]
	mov edx,dword ptr [eax+0xC78]
	push edx
	add eax,0xC70
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block391

 Block388:
	mov ecx,dword ptr [ebp+0x24]
	mov edx,dword ptr [ebp+0x28]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [ebp+0x2C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp+0x30]
	mov dword ptr [eax+8],ecx
	mov dword ptr [eax+0xC],edx
	lea eax,[ebp+0x38]
	push eax
	mov ecx,ebx
	call CMob::GetHitPoint
	mov edx,dword ptr [ebp+0x44]
	lea ecx,[ebp+0x60]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x141F9CB
	push edx
	mov dword ptr [ebp+0x60],0
	call CSkillInfo::GetSkillLevel_0
	mov edi,eax
	test edi,edi
	jle Block391

 Block389:
	mov ecx,dword ptr [ebp+0x34]
	call SecondaryStat::IsRidingVehicle
	test eax,eax
	jne Block391

 Block390:
	mov eax,dword ptr [ebp+0x3C]
	mov ecx,dword ptr [ebp+0x38]
	mov edx,dword ptr [ebp+0x60]
	push eax
	push ecx
	push ebx
	push edi
	push edx
	mov ecx,esi
	call CUserLocal::TryDoingBodyAttack

 Block391:
	mov edi,dword ptr [ebp+0x64]
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x14]
	add edi,4
	lea ecx,[ebp+8]
	push ecx
	mov ecx,edi
	call edx
	mov dword ptr [ebp+0x60],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[ebp-0x14]
	push ecx
	mov ecx,edi
	call edx
	mov ebx,dword ptr [eax]
	mov eax,dword ptr [ebp+0x60]
	sub ebx,dword ptr [eax]
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	lea ecx,[esi+4]
	lea eax,[ebp+0x38]
	push eax
	call edx
	sub ebx,dword ptr [eax]
	mov eax,dword ptr [esi+4]
	mov eax,dword ptr [eax+0x14]
	lea ecx,[esi+4]
	lea edx,[ebp+0x2C]
	push edx
	mov dword ptr [ebp+0x60],ebx
	call eax
	mov ebx,dword ptr [eax]
	mov ecx,dword ptr [ebp+0x64]
	add ebx,dword ptr [ebp+0x60]
	mov eax,dword ptr [ecx+0x5C8]
	mov dword ptr [ebp+0x60],0xFFFFFFFF
	test eax,eax
	jl Block393

 Block392:
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x14]
	mov dword ptr [ebp+0x60],eax
	lea eax,[ebp+0x2C]
	push eax
	mov ecx,edi
	call edx
	mov dword ptr [ebp+0x3C],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[ebp+8]
	push ecx
	mov ecx,edi
	call edx
	mov ebx,dword ptr [eax]
	mov eax,dword ptr [ebp+0x3C]
	sub ebx,dword ptr [eax]

 Block393:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0x23
	jne Block396

 Block394:
	cmp dword ptr [esi+0x5F8],0x1D7AF0
	jne Block396

 Block395:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x1074]
	add eax,0x106C
	jmp Block397

 Block396:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x284]
	add eax,0x27C

 Block397:
	push ecx
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp+0x64]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x48]
	add esp,8
	push 1
	push 1
	push eax
	mov eax,dword ptr [ebp+0x60]
	push ebx
	push eax
	push ecx
	push 0
	push 0
	push 0
	push 0
	mov ecx,esi
	call edx

 Block398:
	push 0x217E76B
	lea eax,[ebp-0x2C]
	push eax
	mov ecx,esi
	call CUser::GetSummoned
	cmp dword ptr [ebp-0x28],0
	mov byte ptr [ebp-4],0x30
	je Block409

 Block399:
	mov edx,dword ptr [ebp+0x44]
	lea ecx,[ebp+0x64]
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push 0x217E76B
	push edx
	mov dword ptr [ebp+0x64],0
	call CSkillInfo::GetSkillLevel_0
	cmp dword ptr [ebp+0x64],0
	mov ebx,eax
	je Block409

 Block400:
	test ebx,ebx
	je Block409

 Block401:
	mov ecx,dword ptr [ebp+0x10]
	call CWvsContext::IsUnderCover
	test eax,eax
	jne Block403

 Block402:
	call get_field
	test byte ptr [eax+0x178],2
	jne Block406

 Block403:
	mov ecx,esi
	call CUser::IsDarkSight
	test eax,eax
	jne Block409

 Block404:
	mov ecx,esi
	call CUser::IsWindWalk
	test eax,eax
	jne Block409

 Block405:
	mov ecx,esi
	call CUser::IsSneak
	test eax,eax
	jne Block409

 Block406:
	mov eax,dword ptr [ebp+0x4C]
	mov ecx,dword ptr [ebp+0x50]
	mov edx,dword ptr [ebp+0x54]
	mov dword ptr [ebp-0x1C],eax
	mov eax,dword ptr [ebp+0x58]
	mov dword ptr [ebp-0x18],ecx
	mov ecx,dword ptr [ebp+0x64]
	push ebx
	mov dword ptr [ebp-0x14],edx
	mov dword ptr [ebp-0x10],eax
	call SKILLENTRY::GetLevelData
	add eax,0x1CC
	push eax
	lea ecx,[ebp-0x40]
	push ecx
	call SECRECT::ToRect
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	lea edi,[esi+4]
	add esp,8
	lea eax,[ebp+0x2C]
	push eax
	mov ecx,edi
	call edx
	mov eax,dword ptr [eax+4]
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x10]
	mov dword ptr [ebp+0x3C],eax
	lea eax,[ebp+8]
	push eax
	mov ecx,edi
	call edx
	mov ecx,dword ptr [ebp+0x3C]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[ebp-0x40]
	push edx
	call OffsetRect
	mov ecx,dword ptr [ebp+0x64]
	mov edi,dword ptr [TSingleton<CMobPool>::ms_pInstance]
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push ebx
	call SKILLENTRY::GetLevelData
	mov ecx,eax
	call SKILLLEVELDATA::_ZtlSecureGet_nMobCount
	push eax
	lea eax,[ebp-0x94]
	push eax
	lea ecx,[ebp-0x40]
	push ecx
	mov ecx,edi
	call CMobPool::FindHitMobInRect
	xor edi,edi
	mov dword ptr [ebp+0x3C],eax
	test eax,eax
	jle Block409

 Block407:
	lea ebx,[ebx]

 Block408:
	mov edx,dword ptr [ebp-0x1C]
	mov ecx,dword ptr [ebp-0x18]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [ebp-0x14]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [ebp-0x10]
	mov dword ptr [eax+8],edx
	lea edx,[ebp+0x5C]
	mov dword ptr [eax+0xC],ecx
	mov ecx,dword ptr [ebp+edi*4-0x94]
	push edx
	call CMob::GetHitPoint
	mov eax,dword ptr [ebp+0x60]
	mov ecx,dword ptr [ebp+0x5C]
	mov edx,dword ptr [ebp+edi*4-0x94]
	push eax
	mov eax,dword ptr [ebp+0x64]
	push ecx
	push edx
	push ebx
	push eax
	mov ecx,esi
	call CUserLocal::TryDoingBodyAttack
	inc edi
	cmp edi,dword ptr [ebp+0x3C]
	jl Block408

 Block409:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	xor ebx,ebx
	mov dword ptr [ebp+0x68],ebx
	mov dword ptr [ebp+0x14],ebx
	mov dword ptr [ebp+0x6C],ebx
	cmp edi,ebx
	je Block412

 Block410:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block412

 Block411:
	mov ecx,edi
	jmp Block413

 Block412:
	xor ecx,ecx

 Block413:
	push ebx
	lea edx,[ebp+0x6C]
	push edx
	lea eax,[ebp-0x24]
	push eax
	lea edx,[ebp+0x14]
	push edx
	lea eax,[ebp+0x68]
	push eax
	lea edx,[ebp+0x4C]
	push edx
	call CMapLoadable::GetCollideObstacleRect
	test eax,eax
	je Block431

 Block414:
	cmp dword ptr [ebp+0x68],ebx
	jle Block424

 Block415:
	cmp dword ptr [ebp-0x24],ebx
	jne Block423

 Block416:
	cmp dword ptr [ebp-0x20],ebx
	jne Block423

 Block417:
	mov eax,dword ptr [esi+4]
	mov edx,dword ptr [eax+0x14]
	lea edi,[esi+4]
	lea ecx,[ebp+0x2C]
	push ecx
	mov ecx,edi
	call edx
	mov dword ptr [ebp+0x3C],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[ebp+8]
	push ecx
	mov ecx,edi
	call edx
	mov ebx,dword ptr [eax]
	mov eax,dword ptr [ebp+0x3C]
	sub ebx,dword ptr [eax]
	mov edx,dword ptr [edi]
	mov edx,dword ptr [edx+0x14]
	lea eax,[ebp-0x14]
	push eax
	mov ecx,edi
	call edx
	add eax,4
	mov dword ptr [ebp+0x3C],eax
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x10]
	lea ecx,[ebp+0x2C]
	push ecx
	mov ecx,edi
	call edx
	mov ecx,dword ptr [ebp+0x3C]
	mov eax,dword ptr [eax+4]
	sub eax,dword ptr [ecx]
	mov ecx,0xFFFFFEF2
	test ebx,ebx
	jge Block419

 Block418:
	mov dword ptr [ebp-0x24],ecx
	jmp Block421

 Block419:
	jle Block421

 Block420:
	mov dword ptr [ebp-0x24],0x10E

 Block421:
	xor ebx,ebx
	test eax,eax
	jg Block423

 Block422:
	mov dword ptr [ebp-0x20],ecx

 Block423:
	mov eax,dword ptr [ebp+0x14]
	mov ecx,dword ptr [ebp-0x20]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x48]
	push 1
	push 1
	push ebx
	push ebx
	push ebx
	push ebx
	push eax
	mov eax,dword ptr [ebp-0x24]
	push ecx
	mov ecx,dword ptr [ebp+0x68]
	push eax
	push ecx
	mov ecx,esi
	call edx

 Block424:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	cmp edi,ebx
	je Block427

 Block425:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block427

 Block426:
	mov ecx,edi
	jmp Block428

 Block427:
	xor ecx,ecx

 Block428:
	mov eax,dword ptr [ebp+0x6C]
	cmp eax,ebx
	je Block431

 Block429:
	cmp ecx,ebx
	je Block431

 Block430:
	push ebx
	push ebx
	push ebx
	push ebx
	push eax
	call CField::SendTransferFieldRequest

 Block431:
	mov eax,dword ptr [ebp+0x40]
	sub eax,dword ptr [esi+0x466C]
	mov dword ptr [ebp+0x68],ebx
	cmp eax,0x3E8
	jle Block451

 Block432:
	mov edx,dword ptr [esi+4]
	mov edx,dword ptr [edx+0x10]
	mov edi,dword ptr [esi+0x2E18]
	mov ebx,dword ptr [TSingleton<CAffectedAreaPool>::ms_pInstance]
	lea ecx,[esi+4]
	lea eax,[ebp+0x2C]
	push eax
	mov dword ptr [ebp+0x60],0
	call edx
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [eax]
	push edi
	lea ecx,[ebp+0x60]
	push ecx
	push edx
	push eax
	lea ecx,[ebp+0x38]
	push ecx
	mov ecx,ebx
	call CAffectedAreaPool::GetAffectedAreaByPoint
	cmp dword ptr [ebp+0x3C],0
	je Block447

 Block433:
	lea edx,[ebp+8]
	push edx
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	cmp dword ptr [eax+4],0
	mov byte ptr [ebp-4],0x32
	je Block435

 Block434:
	lea eax,[ebp-0x14]
	push eax
	mov ecx,esi
	call CUserLocal::GetPassiveSkillData
	mov eax,dword ptr [eax+4]
	mov ecx,dword ptr [eax+0x50]
	or dword ptr [ebp+0x20],0x20
	mov dword ptr [ebp+0x64],ecx
	jmp Block436

 Block435:
	mov dword ptr [ebp+0x64],0

 Block436:
	test byte ptr [ebp+0x20],0x20
	je Block438

 Block437:
	lea ecx,[ebp-0x14]
	call ZRef<PassiveSkillData>::~ZRef<PassiveSkillData>

 Block438:
	lea ecx,[ebp+8]
	mov byte ptr [ebp-4],0x31
	call ZRef<PassiveSkillData>::~ZRef<PassiveSkillData>
	mov ecx,dword ptr [ebp+0x10]
	lea edx,[ebp+0x1C]
	push edx
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [ebp+0x60]
	mov edi,dword ptr [ebp+0x3C]
	shr eax,8
	push eax
	mov byte ptr [ebp-4],0x33
	call get_element_from_mobskillid
	mov ecx,dword ptr [ebp+0x34]
	push eax
	push ecx
	push ebx
	call get_resistance
	mov ecx,0x64
	sub ecx,dword ptr [ebp+0x64]
	add esp,0x10
	sub ecx,eax
	imul ecx,dword ptr [edi+0x34]
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea ecx,[ebp+0x1C]
	mov dword ptr [ebp+0x68],eax
	mov byte ptr [ebp-4],0x31
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov eax,dword ptr [ebp+0x68]
	cmp eax,1
	jg Block440

 Block439:
	mov eax,1
	mov dword ptr [ebp+0x68],eax

 Block440:
	mov ecx,dword ptr [ebp+0x3C]
	movzx edx,byte ptr [ecx+0x30]
	push eax
	push edx
	mov ecx,esi
	call CUserLocal::CalcBuffDefenseAttr
	mov dword ptr [ebp+0x68],eax
	test eax,eax
	jle Block447

 Block441:
	push eax
	mov ecx,esi
	call CUserLocal::GetAchillesReduce
	mov ebx,eax
	mov eax,dword ptr [ebp+0x34]
	mov ecx,dword ptr [eax+0xC54]
	push ecx
	add eax,0xC4C
	push eax
	xor edi,edi
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jle Block443

 Block442:
	mov ecx,dword ptr [ebp+0x34]
	call SecondaryStat::_ZtlSecureGet_nComboBarrier_
	mov ecx,dword ptr [ebp+0x68]
	mov edx,0x3E8
	sub edx,eax
	mov eax,ecx
	sub eax,ebx
	imul edx,eax
	mov eax,0x10624DD3
	imul edx
	sar edx,6
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	jmp Block444

 Block443:
	mov ecx,dword ptr [ebp+0x68]

 Block444:
	sub ecx,edi
	sub ecx,ebx
	mov ebx,ecx
	neg ecx
	push 0
	push ecx
	mov ecx,esi
	call CUser::MakeIncDecHPEffect
	mov edx,dword ptr [ebp+0x10]
	xor edi,edi
	add edx,0x3C98
	mov dword ptr [ebp+0x64],edx

 Block445:
	mov ecx,dword ptr [ebp+0x64]
	call CRand32::Random
	inc edi
	cmp edi,6
	jl Block445

 Block446:
	push 0x34
	lea ecx,[ebp]
	call COutPacket::_ctor_1
	mov byte ptr [ebp-4],0x34
	call get_update_time
	push eax
	lea ecx,[ebp]
	call COutPacket::Encode4
	push 0xFC
	lea ecx,[ebp]
	call COutPacket::Encode1
	mov eax,dword ptr [ebp+0x3C]
	movzx ecx,byte ptr [eax+0x30]
	push ecx
	lea ecx,[ebp]
	call COutPacket::Encode1
	mov edx,dword ptr [ebp+0x68]
	push edx
	lea ecx,[ebp]
	call COutPacket::Encode4
	mov eax,dword ptr [ebp+0x60]
	push eax
	lea ecx,[ebp]
	call COutPacket::Encode2
	push 2
	lea ecx,[ebp]
	call COutPacket::Encode1
	lea ecx,[ebp]
	push ecx
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	call CClientSocket::SendPacket
	push 0
	push 0
	push ebx
	mov ecx,esi
	call CUserLocal::TryConsumePetHP
	mov edx,dword ptr [ebp+0x40]
	lea ecx,[ebp+4]
	mov dword ptr [esi+0x466C],edx
	mov byte ptr [ebp-4],0x31
	call ZArray<unsigned char>::RemoveAll

 Block447:
	mov edi,dword ptr [ebp+0x3C]
	mov byte ptr [ebp-4],0x30
	test edi,edi
	je Block451

 Block448:
	add edi,0xFFFFFFF0
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block451

 Block449:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block451

 Block450:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block451:
	cmp dword ptr [esi+0x46BC],0
	je Block454

 Block452:
	mov eax,dword ptr [ebp+0x40]
	mov ecx,eax
	sub ecx,dword ptr [esi+0x46B8]
	cmp ecx,0x1388
	jle Block454

 Block453:
	mov dword ptr [esi+0x46B8],eax
	jmp Block455

 Block454:
	mov dword ptr [esi+0x46BC],0

 Block455:
	cmp dword ptr [ebp-0x28],0
	mov byte ptr [ebp-4],0x2E
	je Block457

 Block456:
	push 0
	lea ecx,[ebp-0x2C]
	call ZRef<CSummoned>::_ReleaseRaw

 Block457:
	lea ecx,[ebp+0x18]
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ZArray<unsigned long>::RemoveAll
	mov ebx,dword ptr [ebp+0x40]

 Block458:
	cmp dword ptr [esi+0x3AD0],0
	je Block460

 Block459:
	push 0
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::TryConsumePetMP

 Block460:
	mov ecx,esi
	call CUserLocal::CheckReactor_Collision
	mov ecx,esi
	call CUserLocal::CheckPortal_Collision
	mov ecx,esi
	call CUserLocal::TryDoingFinalAttack
	mov ecx,esi
	call CUserLocal::TryDoingSerialAttack
	mov ecx,esi
	call CUserLocal::TryDoingSparkAttack
	mov ecx,esi
	call CUserLocal::TryDoingPreparedSkill
	push ebx
	mov ecx,esi
	call CUserLocal::TryDoingRepeatSkill
	mov ecx,esi
	call CUserLocal::TryDoingTeleport
	mov ecx,esi
	call CUserLocal::TryAutoRequestFollowCharacter
	mov ecx,esi
	call CUserLocal::TryPassiveTransferField
	push ebx
	mov ecx,esi
	call CUserLocal::TryLeaveDirectionMode
	cmp dword ptr [esi+0x3B54],0
	je Block469

 Block461:
	cmp dword ptr [esi+0x3B48],0
	je Block469

 Block462:
	mov edx,dword ptr [esi+0x3B44]
	push edx
	call is_jump_rush_skill
	add esp,4
	test eax,eax
	jne Block468

 Block463:
	mov eax,dword ptr [esi+0x19E4]
	test eax,eax
	je Block465

 Block464:
	lea ecx,[eax-0xC]
	jmp Block466

 Block465:
	xor ecx,ecx

 Block466:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+8]
	call edx
	test eax,eax
	jne Block468

 Block467:
	mov ecx,esi
	call CUserLocal::TryDoingRush
	jmp Block469

 Block468:
	mov ecx,esi
	call CUserLocal::TryDoingFlyingRush

 Block469:
	mov ecx,esi
	call CUserLocal::TryDoingFallDown
	mov ecx,esi
	call CUserLocal::TryDoingRocketBooster
	mov ecx,esi
	call CUserLocal::TryDoingRocketBoosterEnd
	mov ecx,esi
	call CUserLocal::TryDoingSmoothingMovingShootAttack
	cmp dword ptr [esi+0x3AE4],0x217E76B
	jne Block474

 Block470:
	mov ecx,dword ptr [esi+0x3AF0]
	imul ecx,0x45
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x45
	jl Block472

 Block471:
	mov eax,0x45

 Block472:
	cmp dword ptr [esi+0x469C],eax
	je Block474

 Block473:
	mov ecx,esi
	mov dword ptr [esi+0x469C],eax
	call CUserLocal::DrawKeyDownBar

 Block474:
	cmp dword ptr [esi+0x4690],0
	je Block541

 Block475:
	mov eax,dword ptr [esi+0x3AD4]
	push eax
	call get_max_gauge_time
	add esp,4
	mov dword ptr [ebp+0x6C],eax
	cmp eax,0x3E8
	je Block479

 Block476:
	cmp eax,0x7D0
	je Block478

 Block477:
	call get_update_time
	mov ecx,eax
	sub ecx,dword ptr [esi+0x4688]
	mov eax,0x88888889
	imul ecx
	add edx,ecx
	sar edx,3
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	mov dword ptr [ebp+0x3C],ecx
	fild dword ptr [ebp+0x3C]
	fild dword ptr [ebp+0x6C]
	fdivr qword ptr [__real_408f400000000000]
	fmulp st(1),st(0)
	fadd qword ptr [__real_4000000000000000]
	call __ftol2_sse
	cmp eax,0x45
	jmp Block481

 Block478:
	call get_update_time
	mov ecx,eax
	sub ecx,dword ptr [esi+0x4688]
	mov eax,0x88888889
	imul ecx
	add edx,ecx
	sar edx,4
	mov eax,edx
	shr eax,0x1F
	lea edx,[edx+eax+2]
	jmp Block480

 Block479:
	call get_update_time
	mov ecx,eax
	sub ecx,dword ptr [esi+0x4688]
	mov eax,0x88888889
	imul ecx
	add edx,ecx
	sar edx,3
	mov ecx,edx
	shr ecx,0x1F
	lea edx,[edx+ecx+2]

 Block480:
	cmp edx,0x45
	mov eax,edx

 Block481:
	jl Block483

 Block482:
	mov eax,0x45

 Block483:
	cmp dword ptr [esi+0x469C],eax
	je Block485

 Block484:
	mov ecx,esi
	mov dword ptr [esi+0x469C],eax
	call CUserLocal::DrawKeyDownBar

 Block485:
	mov eax,dword ptr [esi+0x3AD4]
	cmp eax,0x2F9F6C
	je Block488

 Block486:
	cmp eax,0xC80EDA
	je Block488

 Block487:
	cmp eax,0x1F962F1
	jne Block490

 Block488:
	mov edx,ebx
	sub edx,dword ptr [esi+0x46A0]
	cmp edx,0x64
	jle Block490

 Block489:
	mov edi,1
	jmp Block491

 Block490:
	xor edi,edi

 Block491:
	mov dword ptr [ebp+0x60],edi
	cmp eax,0x4FAA8C
	jne Block494

 Block492:
	mov ecx,ebx
	sub ecx,dword ptr [esi+0x46A4]
	cmp ecx,0x64
	jle Block494

 Block493:
	mov edx,1
	jmp Block495

 Block494:
	xor edx,edx

 Block495:
	mov dword ptr [ebp+0x18],edx
	cmp eax,0x21612A9
	je Block497

 Block496:
	cmp eax,0x2179951
	jne Block499

 Block497:
	sub ebx,dword ptr [esi+0x46A8]
	cmp ebx,0x12C
	jle Block499

 Block498:
	mov ecx,1
	jmp Block500

 Block499:
	xor ecx,ecx

 Block500:
	mov dword ptr [ebp+0x68],ecx
	test edi,edi
	jne Block503

 Block501:
	test edx,edx
	jne Block503

 Block502:
	test ecx,ecx
	je Block535

 Block503:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea edx,[ebp+0x64]
	push edx
	push eax
	mov eax,dword ptr [ebp+0x44]
	xor edi,edi
	push eax
	mov dword ptr [ebp+0x64],edi
	call CSkillInfo::GetSkillLevel_0
	cmp dword ptr [esi+0x3AD4],0x2179951
	mov ebx,eax
	jne Block505

 Block504:
	push 0x21612A9
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	mov ebx,eax

 Block505:
	mov dword ptr [ebp+0x6C],edi
	cmp dword ptr [ebp+0x60],edi
	je Block508

 Block506:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	mov ecx,esi
	call eax
	mov ecx,dword ptr [eax+0x338]
	push ecx
	add eax,0x330
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	je Block508

 Block507:
	mov edi,1
	jmp Block509

 Block508:
	xor edi,edi

 Block509:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov ecx,esi
	call eax
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0x23
	je Block513

 Block510:
	test edi,edi
	jne Block513

 Block511:
	mov edx,dword ptr [ebp+0x64]
	push edi
	push edi
	push edi
	push ebx
	push edx
	mov ecx,esi
	call CUserLocal::GetProperBulletPosition
	test eax,eax
	jne Block513

 Block512:
	lea eax,[ebp+0x3C]
	push 0xB4F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-4],0x35
	jmp Block515

 Block513:
	mov eax,dword ptr [ebp+0x44]
	mov ecx,dword ptr [eax+0x81]
	push ecx
	add eax,0x79
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp+0x64]
	add esp,8
	push ebx
	mov edi,eax
	call SKILLENTRY::GetLevelData
	mov edx,dword ptr [eax+0xA8]
	push edx
	add eax,0xA0
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	cmp edi,eax
	jge Block519

 Block514:
	lea eax,[ebp+0x3C]
	push 0xB45
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [ebp-4],0x36

 Block515:
	cmp dword ptr [TSingleton<CUIStatusBar>::ms_pInstance],0
	je Block517

 Block516:
	sub esp,8
	mov ecx,esp
	mov dword ptr [ebp+0x20],esp
	push 0
	push 0xFFFFFFFF
	mov dword ptr [ecx+4],0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CUIStatusBar>::ms_pInstance]
	push 0xC
	push eax
	call CUIStatusBar::ChatLogAdd

 Block517:
	mov eax,dword ptr [ebp+0x3C]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block520

 Block518:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block520

 Block519:
	mov dword ptr [ebp+0x6C],1

 Block520:
	mov ecx,esi
	xor edi,edi
	call CUserLocal::IsSkillAvailable
	test eax,eax
	je Block523

 Block521:
	cmp dword ptr [ebp+0x6C],edi
	je Block523

 Block522:
	mov edi,1

 Block523:
	mov dword ptr [ebp+0x14],0x41
	test edi,edi
	je Block528

 Block524:
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	lea ecx,[ebp+0x14]
	push ecx
	push 0
	push 0
	mov ecx,esi
	call CUserLocal::TryDoingMeleeAttack
	test eax,eax
	je Block526

 Block525:
	mov edx,dword ptr [ebp+0x64]
	mov eax,dword ptr [edx]
	push eax
	call is_shoot_skill_not_switched_to_melee_attack
	add esp,4
	test eax,eax
	je Block528

 Block526:
	mov ecx,dword ptr [ebp+0x14]
	mov edx,dword ptr [ebp+0x64]
	push 0
	push 0
	push 0
	push ecx
	push ebx
	push edx
	mov ecx,esi
	call CUserLocal::TryDoingShootAttack
	cmp dword ptr [ebp+0x18],0
	jne Block529

 Block527:
	mov eax,dword ptr [esi+0x3AD4]
	push eax
	mov ecx,esi
	call CUserLocal::GetSkillLevel
	mov ecx,dword ptr [esi+0x3AD4]
	push eax
	push 0x2A
	push ecx
	call play_skill_sound
	add esp,0xC
	jmp Block529

 Block528:
	mov ecx,esi
	call CUserLocal::OnKeyDownSkillEnd

 Block529:
	cmp dword ptr [ebp+0x60],0
	je Block531

 Block530:
	mov edx,dword ptr [ebp+0x40]
	mov dword ptr [esi+0x46A0],edx
	jmp Block535

 Block531:
	cmp dword ptr [ebp+0x18],0
	je Block533

 Block532:
	mov eax,dword ptr [ebp+0x40]
	mov dword ptr [esi+0x46A4],eax
	jmp Block535

 Block533:
	cmp dword ptr [ebp+0x68],0
	je Block535

 Block534:
	mov ecx,dword ptr [ebp+0x40]
	mov dword ptr [esi+0x46A8],ecx

 Block535:
	mov ecx,dword ptr [esi+0x2EAC]
	test ecx,ecx
	je Block537

 Block536:
	mov edx,dword ptr [esi+0x4688]
	mov eax,dword ptr [esi+0x3AD4]
	push edx
	push eax
	call CDragon::UpdateKeyDownBar

 Block537:
	mov ecx,esi
	call CUserLocal::IsSkillAvailable
	test eax,eax
	je Block540

 Block538:
	mov eax,dword ptr [TSingleton<CScriptMan>::ms_pInstance]
	cmp dword ptr [eax+0xC],0
	jne Block540

 Block539:
	cmp dword ptr [eax+0x14],0
	je Block541

 Block540:
	mov ecx,esi
	call CUserLocal::OnKeyDownSkillEnd

 Block541:
	mov edi,dword ptr [ebp+0x10]
	xor ebx,ebx
	cmp dword ptr [esi+0x46DC],ebx
	jne Block543

 Block542:
	mov ecx,edi
	call CWvsContext::ResetAutoQuest
	mov dword ptr [esi+0x46DC],1

 Block543:
	call get_update_time
	sub eax,dword ptr [esi+0x46E0]
	cmp eax,0x2710
	jb Block545

 Block544:
	mov ecx,edi
	call CWvsContext::CheckAutoCompletionAlertQuest
	call get_update_time
	push ebx
	mov ecx,edi
	mov dword ptr [esi+0x46E0],eax
	call CWvsContext::CheckNewQuestAvailable

 Block545:
	mov ecx,edi
	call CWvsContext::UpdateAutoQuestAlertIcon
	cmp dword ptr [esi+0x5CC],ebx
	je Block574

 Block546:
	push 0x38
	lea ecx,[ebp+0x24]
	mov dword ptr [esi+0x5CC],ebx
	call COutPacket::_ctor_1
	mov ecx,dword ptr [esi+0x5C8]
	push ecx
	lea edx,[esi+0x5C0]
	push edx
	mov dword ptr [ebp-4],0x37
	call _ZtlSecureFuseHelper<long>::call
	mov edi,eax
	mov eax,dword ptr [ebp+0x28]
	add esp,8
	cmp eax,ebx
	jne Block548

 Block547:
	xor edx,edx
	jmp Block549

 Block548:
	mov edx,dword ptr [eax-4]

 Block549:
	mov ecx,dword ptr [ebp+0x2C]
	add ecx,4
	cmp ecx,edx
	jbe Block555

 Block550:
	cmp eax,ebx
	jne Block552

 Block551:
	xor eax,eax
	jmp Block553

 Block552:
	mov eax,dword ptr [eax-4]
	lea ecx,[ecx]

 Block553:
	add eax,eax
	cmp ecx,eax
	ja Block553

 Block554:
	lea ecx,[ebp+0x4B]
	push ecx
	push ebx
	push eax
	lea ecx,[ebp+0x28]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [ebp+0x28]

 Block555:
	mov edx,dword ptr [ebp+0x2C]
	mov dword ptr [eax+edx],edi
	mov eax,dword ptr [ebp+0x28]
	mov edi,4
	add dword ptr [ebp+0x2C],edi
	cmp eax,ebx
	jne Block557

 Block556:
	xor edx,edx
	jmp Block558

 Block557:
	mov edx,dword ptr [eax-4]

 Block558:
	mov ecx,dword ptr [ebp+0x2C]
	add ecx,edi
	cmp ecx,edx
	jbe Block564

 Block559:
	cmp eax,ebx
	jne Block561

 Block560:
	xor eax,eax
	jmp Block562

 Block561:
	mov eax,dword ptr [eax-4]

 Block562:
	add eax,eax
	cmp ecx,eax
	ja Block562

 Block563:
	lea ecx,[ebp+0x4B]
	push ecx
	push ebx
	push eax
	lea ecx,[ebp+0x28]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [ebp+0x28]

 Block564:
	mov edx,dword ptr [ebp+0x2C]
	mov dword ptr [eax+edx],0xFFFFFFFF
	mov eax,dword ptr [ebp+0x28]
	add dword ptr [ebp+0x2C],edi
	cmp eax,ebx
	jne Block566

 Block565:
	xor edx,edx
	jmp Block567

 Block566:
	mov edx,dword ptr [eax-4]

 Block567:
	mov ecx,dword ptr [ebp+0x2C]
	inc ecx
	cmp ecx,edx
	jbe Block573

 Block568:
	cmp eax,ebx
	jne Block570

 Block569:
	xor eax,eax
	jmp Block571

 Block570:
	mov eax,dword ptr [eax-4]
	lea esp,[esp]

 Block571:
	add eax,eax
	cmp ecx,eax
	ja Block571

 Block572:
	lea ecx,[ebp+0x4B]
	push ecx
	push ebx
	push eax
	lea ecx,[ebp+0x28]
	call ZArray<unsigned char>::_Realloc
	mov eax,dword ptr [ebp+0x28]

 Block573:
	mov edx,dword ptr [ebp+0x2C]
	mov byte ptr [eax+edx],0
	mov ecx,dword ptr [TSingleton<CClientSocket>::ms_pInstance]
	inc dword ptr [ebp+0x2C]
	lea eax,[ebp+0x24]
	push eax
	call CClientSocket::SendPacket
	lea ecx,[ebp+0x28]
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ZArray<unsigned char>::RemoveAll

 Block574:
	mov ecx,esi
	call CUser::Update
	cmp dword ptr [esi+0x46FC],ebx
	je Block578

 Block575:
	mov edi,edi

 Block576:
	mov edi,dword ptr [esi+0x4700]
	call get_update_time
	cmp dword ptr [edi+4],eax
	jge Block578

 Block577:
	mov edx,dword ptr [esi+0x4700]
	lea ecx,[esi+0x46F4]
	push edx
	call ZList<CUserLocal::CBalloonMsg>::RemoveAt
	cmp dword ptr [esi+0x46FC],ebx
	jne Block576

 Block578:
	cmp dword ptr [esi+0x4710],ebx
	je Block581

 Block579:
	mov edi,dword ptr [esi+0x4714]
	call get_update_time
	cmp dword ptr [edi+4],eax
	jge Block581

 Block580:
	mov eax,dword ptr [esi+0x4714]
	lea ecx,[esi+0x4708]
	push eax
	call ZList<CUserLocal::CBalloonMsg>::RemoveAt
	cmp dword ptr [esi+0x4710],ebx
	jne Block579

 Block581:
	mov ecx,dword ptr [esi+0x4770]
	cmp ecx,ebx
	je Block583

 Block582:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	call eax

 Block583:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x40]
	mov edi,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	lea ecx,[ebp-0x30]
	push ecx
	mov ecx,esi
	mov dword ptr [ebp-0x30],ebx
	call eax
	mov ecx,dword ptr [ebp+0x44]
	sub eax,0x1312D11
	neg eax
	sbb eax,eax
	and eax,0xF422F
	add eax,0x1312D11
	push eax
	push ecx
	mov ecx,edi
	call CSkillInfo::GetSkillLevel_0
	test eax,eax
	jle Block587

 Block584:
	cmp dword ptr [esi+0x4790],ebx
	jle Block587

 Block585:
	mov edx,dword ptr [esi+0x4794]
	add edx,0x1388
	cmp edx,dword ptr [ebp+0x40]
	jae Block587

 Block586:
	mov ecx,esi
	call CUserLocal::ClearCombo

 Block587:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	cmp edi,ebx
	je Block590

 Block588:
	mov eax,dword ptr [edi+4]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call edx
	test eax,eax
	je Block590

 Block589:
	mov ecx,edi
	jmp Block591

 Block590:
	xor ecx,ecx

 Block591:
	call CField::IsFearEffectOn
	test eax,eax
	je Block598

 Block592:
	mov eax,dword ptr [ebp+0x34]
	mov ecx,dword ptr [eax+0xD50]
	push ecx
	add eax,0xD48
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	test eax,eax
	jg Block598

 Block593:
	mov edi,dword ptr [_D_G_PSTAGE+4]
	cmp edi,ebx
	je Block596

 Block594:
	mov edx,dword ptr [edi+4]
	mov eax,dword ptr [edx+0x48]
	lea ecx,[edi+4]
	push offset CField::ms_RTTI_CField
	call eax
	test eax,eax
	je Block596

 Block595:
	mov ecx,edi
	jmp Block597

 Block596:
	xor ecx,ecx

 Block597:
	call CField::OffFearEffect

 Block598:
	mov ecx,esi
	call CUserLocal::TryDoingSwallowMobWriggle
	mov ecx,esi
	call CUserLocal::TryDoingSwallowBuff
	mov ecx,esi
	call CUserLocal::TryDoingMine
	mov ecx,esi
	call CUserLocal::TryDoingCyclone
	mov ecx,esi
	call CUserLocal::TryDoingSitdownHealing
	mov ecx,dword ptr [ebp+0x40]
	push ecx
	mov ecx,esi
	call CUserLocal::UpdateClientTimer

 Block599:
	lea esp,[ebp-0xF08]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x70]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x74
	mov esp,ebp
	pop ebp
	ret
}
}
// CUserLocal::GetUpFromPortableChair
__SUB_CLASS_THIS(00506050, __thiscall, 41339,  CUserLocal, void, int32_t) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	lea edx,[esi+0x3B98]
	xor ecx,ecx
	call _ZtlSecureTearHelper<int>::call
	lea edi,[esi+0x463C]
	mov edx,edi
	xor ecx,ecx
	mov dword ptr [esi+0x3BA0],eax
	call _ZtlSecureTearHelper<long>::call
	push eax
	push edi
	mov dword ptr [esi+0x4644],eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	lea ecx,[esi+0x88]
	call CAvatar::SetChairHeight
	lea edx,[esi+0x4648]
	xor ecx,ecx
	call _ZtlSecureTearHelper<long>::call
	push 0
	mov ecx,esi
	mov dword ptr [esi+0x4650],eax
	mov dword ptr [esi+0x465C],0
	call CUser::SetActivePortableChair
	cmp dword ptr [esp+0xC],0
	jne Block4

 Block1:
	mov esi,dword ptr [esi+0x19E4]
	test esi,esi
	je Block3

 Block2:
	pop edi
	lea ecx,[esi-0xC]
	pop esi
	mov dword ptr [esp+4],0xA
	jmp  CVecCtrl::SetMovePathAttribute

 Block3:
	pop edi
	xor ecx,ecx
	pop esi
	mov dword ptr [esp+4],0xA
	jmp  CVecCtrl::SetMovePathAttribute

 Block4:
	pop edi
	pop esi
	ret 4
}
}
// CUserLocal::OnJoystickButton
__SUB_CLASS_THIS(00536550, __thiscall, 41370,  CUserLocal, void, uint32_t, unsigned long) {
__asm {

 Block0:
	sub esp,0x48
	push ebx
	push ebp
	mov ebx,ecx
	mov eax,dword ptr [ebx+4]
	mov edx,dword ptr [eax+0x10]
	push esi
	lea ebp,[ebx+4]
	push edi
	lea ecx,[esp+0x10]
	push ecx
	mov ecx,ebp
	call edx
	mov ecx,dword ptr [eax]
	mov dword ptr [ebx+0x4680],ecx
	mov edx,dword ptr [eax+4]
	mov dword ptr [ebx+0x4684],edx
	mov esi,dword ptr [TSingleton<CConfig>::ms_pInstance]
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add esi,0xA4
	mov ecx,0xC
	lea edi,[esp+0x28]
	rep movsd
	mov esi,dword ptr [esp+0x5C]
	lea ecx,[esi-4]
	xor edx,edx
	mov dword ptr [esp+0x10],eax
	cmp ecx,0xB
	ja Block15

 Block1:
	mov ecx,dword ptr [esp+esi*4+0x18]
	lea eax,[ecx-1]
	cmp eax,0xA
	ja Block13

 Block2:
	cmp EAX, 0
je Block11
cmp EAX, 1
je Block13
cmp EAX, 2
je Block13
cmp EAX, 3
je Block3
cmp EAX, 4
je Block4
cmp EAX, 5
je Block5
cmp EAX, 6
je Block6
cmp EAX, 7
je Block7
cmp EAX, 8
je Block8
cmp EAX, 9
je Block9
cmp EAX, 10
je Block10


 Block3:
	mov eax,0x530000
	jmp Block12

 Block4:
	mov eax,0x4F0000
	jmp Block12

 Block5:
	mov eax,0x510000
	jmp Block12

 Block6:
	mov eax,0x1520000
	jmp Block12

 Block7:
	mov eax,0x470000
	jmp Block12

 Block8:
	mov eax,0x490000
	jmp Block12

 Block9:
	mov eax,0x2A0000
	jmp Block12

 Block10:
	mov eax,0x1D0000
	jmp Block12

 Block11:
	mov eax,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	mov eax,dword ptr [eax+0x3C8]
	shl eax,0x10
	test eax,eax
	je Block13

 Block12:
	shr eax,0x10
	and eax,0xFF
	mov edx,eax

 Block13:
	cmp ecx,1
	jne Block15

 Block14:
	lea edx,[ecx+0x1C]

 Block15:
	cmp esi,3
	ja Block21

 Block16:
	cmp ESI, 0
je Block17
cmp ESI, 1
je Block18
cmp ESI, 2
je Block19
cmp ESI, 3
je Block20


 Block17:
	mov edx,0x48
	jmp Block21

 Block18:
	mov edx,0x50
	jmp Block21

 Block19:
	mov edx,0x4B
	jmp Block21

 Block20:
	mov edx,0x4D

 Block21:
	cmp dword ptr [esp+0x60],0
	jne Block53

 Block22:
	test edx,edx
	je Block24

 Block23:
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	push 1
	push edx
	call CSequencedKeyMan::Process

 Block24:
	test esi,esi
	jne Block26

 Block25:
	mov ecx,ebx
	call CUserLocal::HandleUpKeyDown
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block26:
	lea ecx,[esi-4]
	cmp ecx,0xB
	ja Block78

 Block27:
	mov esi,dword ptr [esp+esi*4+0x18]
	lea eax,[esi-1]
	cmp eax,0xA
	ja Block78

 Block28:
	cmp EAX, 0
je Block29
cmp EAX, 1
je Block31
cmp EAX, 2
je Block39
cmp EAX, 3
je Block45
cmp EAX, 4
je Block46
cmp EAX, 5
je Block47
cmp EAX, 6
je Block48
cmp EAX, 7
je Block49
cmp EAX, 8
je Block50
cmp EAX, 9
je Block51
cmp EAX, 10
je Block52


 Block29:
	cmp dword ptr [ebx+0x2E98],0
	jne Block78

 Block30:
	mov ecx,ebx
	call CUserLocal::HandleCtrlKeyDown
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block31:
	cmp dword ptr [ebx+0x2E98],0
	jne Block78

 Block32:
	mov ecx,ebx
	call CUserLocal::IsSit
	test eax,eax
	jne Block38

 Block33:
	mov ecx,dword ptr [TSingleton<CInputSystem>::ms_pInstance]
	push 1
	call CInputSystem::IsJoyBtnPressed
	mov edx,dword ptr [ebx]
	mov esi,eax
	mov eax,dword ptr [edx+8]
	mov ecx,ebx
	call eax
	mov ecx,eax
	call SecondaryStat::_ZtlSecureGet_nReverseInput_
	test eax,eax
	je Block35

 Block34:
	xor ecx,ecx
	test esi,esi
	sete cl
	mov esi,ecx

 Block35:
	mov ecx,ebx
	test esi,esi
	je Block37

 Block36:
	call CUserLocal::FallDown
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block37:
	push 0
	call CUserLocal::Jump
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block38:
	mov ecx,dword ptr [esp+0x10]
	push 0x1F4
	call CWvsContext::SendGetUpFromChairRequest
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block39:
	mov ecx,ebx
	call CUser::IsDarkSight
	test eax,eax
	jne Block78

 Block40:
	mov ecx,ebx
	call CUser::IsWindWalk
	test eax,eax
	jne Block78

 Block41:
	mov edx,dword ptr [ebx+0x640]
	and edx,0xFFFFFFFE
	cmp edx,0x12
	je Block78

 Block42:
	mov ecx,ebx
	call CUserLocal::IsStun
	test eax,eax
	jne Block78

 Block43:
	cmp dword ptr [ebx+0x2E98],eax
	jne Block78

 Block44:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x10]
	mov esi,dword ptr [TSingleton<CDropPool>::ms_pInstance]
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,ebp
	call edx
	push eax
	mov ecx,esi
	call CDropPool::TryPickUpDrop
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x10]
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,ebp
	call edx
	push eax
	mov ecx,esi
	call CWvsContext::CheckBoobyTrapPickUpRequest
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block45:
	push 0x530000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block46:
	push 0x4F0000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block47:
	push 0x510000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block48:
	push 0x1520000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block49:
	push 0x470000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block50:
	push 0x490000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block51:
	push 0x2A0000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block52:
	push 0x1D0000
	mov ecx,ebx
	call CUserLocal::UseFuncKeyMapped
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8

 Block53:
	test edx,edx
	je Block55

 Block54:
	mov ecx,dword ptr [TSingleton<CSequencedKeyMan>::ms_pInstance]
	push 0
	push edx
	call CSequencedKeyMan::Process

 Block55:
	cmp esi,2
	jb Block62

 Block56:
	cmp esi,3
	ja Block62

 Block57:
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	test ecx,ecx
	je Block60

 Block58:
	cmp dword ptr [ecx+0xC],0
	je Block60

 Block59:
	call CMacroSysMan::Stop

 Block60:
	mov ecx,ebx
	call CUserLocal::IsDashing
	test eax,eax
	je Block62

 Block61:
	mov ecx,ebx
	call CUser::GetDashingSkill
	push eax
	mov ecx,ebx
	call CUserLocal::SendSkillCancelRequest

 Block62:
	lea eax,[esi-4]
	cmp eax,0xB
	ja Block78

 Block63:
	mov esi,dword ptr [esp+esi*4+0x18]
	lea eax,[esi-4]
	cmp eax,7
	ja Block78

 Block64:
	cmp EAX, 0
je Block65
cmp EAX, 1
je Block66
cmp EAX, 2
je Block67
cmp EAX, 3
je Block68
cmp EAX, 4
je Block69
cmp EAX, 5
je Block70
cmp EAX, 6
je Block71
cmp EAX, 7
je Block72


 Block65:
	mov eax,0x530000
	jmp Block73

 Block66:
	mov eax,0x4F0000
	jmp Block73

 Block67:
	mov eax,0x510000
	jmp Block73

 Block68:
	mov eax,0x1520000
	jmp Block73

 Block69:
	mov eax,0x470000
	jmp Block73

 Block70:
	mov eax,0x490000
	jmp Block73

 Block71:
	mov eax,0x2A0000
	jmp Block73

 Block72:
	mov eax,0x1D0000

 Block73:
	mov ecx,dword ptr [TSingleton<CFuncKeyMappedMan>::ms_pInstance]
	shr eax,0x10
	and eax,0xFF
	push eax
	call CFuncKeyMappedMan::FuncKeyMapped
	cmp byte ptr [eax],0
	je Block78

 Block74:
	mov eax,dword ptr [eax+1]
	test eax,eax
	je Block78

 Block75:
	push eax
	call is_keydown_skill
	add esp,4
	test eax,eax
	je Block78

 Block76:
	cmp dword ptr [ebx+0x4690],0
	je Block78

 Block77:
	mov ecx,ebx
	call CUserLocal::OnKeyDownSkillEnd

 Block78:
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 8
}
}
// CUserLocal::EraseAutoQuestAlert
__SUB_CLASS_THIS0(00505060, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	push esi
	xor esi,esi
	mov dword ptr [ecx+0x46EC],esi
	mov eax,dword ptr [ecx+0x46F0]
	cmp eax,esi
	je Block2

 Block1:
	mov dword ptr [ecx+0x46F0],esi
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	mov eax,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [eax+0x4040],esi
	mov dword ptr [eax+0x4074],esi
	pop esi
	ret
}
}
// CUserLocal::TryDoingRush
__SUB_CLASS_THIS0(0050B8C0, __thiscall, 41321,  CUserLocal, void) {
__asm {

 Block0:
	sub esp,0x18
	push ebx
	push ebp
	push esi
	mov ebx,ecx
	call get_update_time
	lea esi,[ebx+0x88]
	mov ecx,esi
	call CAvatar::GetOneTimeAction
	xor ecx,ecx
	cmp eax,0xFFFFFFFF
	setg cl
	imul ecx,0x974
	lea ebp,[ecx+esi+0x5C0]
	xor esi,esi
	mov dword ptr [esp+0x18],ebp
	cmp dword ptr [ebx+0x3B48],esi
	je Block44

 Block1:
	cmp dword ptr [ebx+0x3B54],esi
	je Block5

 Block2:
	lea esp,[esp]

 Block3:
	mov edx,dword ptr [ebx+0x3B58]
	cmp dword ptr [edx+4],esi
	jg Block8

 Block4:
	mov eax,dword ptr [ebx+0x3B58]
	lea ecx,[ebx+0x3B4C]
	push eax
	call ZList<CUserLocal::RUSH::RUSHELEM>::RemoveAt
	cmp dword ptr [ebx+0x3B54],esi
	jne Block3

 Block5:
	cmp dword ptr [ebp+0x10],esi
	je Block7

 Block6:
	mov dword ptr [ebp+0x10],esi
	mov dword ptr [ebp+4],esi
	mov dword ptr [ebp+0x18],esi

 Block7:
	mov dword ptr [ebx+0x3B48],esi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret

 Block8:
	mov ecx,dword ptr [ebx+0x3B44]
	push edi
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	call CSkillInfo::GetSkill
	mov edi,dword ptr [eax+0x50]
	mov edx,dword ptr [ebx+4]
	mov edx,dword ptr [edx+0x10]
	mov esi,dword ptr [ebx+0x3B58]
	lea ecx,[ebx+4]
	lea eax,[esp+0x20]
	push eax
	call edx
	cmp dword ptr [ebp],edi
	jg Block15

 Block9:
	mov eax,dword ptr [ebx+0x19E4]
	test eax,eax
	je Block11

 Block10:
	lea esi,[eax-0xC]
	jmp Block12

 Block11:
	xor esi,esi

 Block12:
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esi+0xC]
	mov eax,dword ptr [eax+0x40]
	push ecx
	add esi,0xC
	push edx
	push esi
	call eax
	test eax,eax
	jge Block14

 Block13:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block14:
	mov ecx,dword ptr [esp+0x20]
	lea esi,[ebx+0x1984]
	push ecx
	lea ecx,[esi+0xC]
	call TSecType<long>::SetData
	mov edx,dword ptr [esp+0x24]
	push edx
	mov ecx,esi
	call TSecType<long>::SetData
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret

 Block15:
	mov eax,dword ptr [esi+8]
	add dword ptr [esi+4],0xFFFFFFE2
	mov dword ptr [esp+0x14],eax
	test eax,eax
	je Block43

 Block16:
	mov ebp,dword ptr [esi]
	mov edi,dword ptr [TSingleton<CWvsPhysicalSpace2D>::ms_pInstance]
	cmp ebp,2
	jne Block18

 Block17:
	fild dword ptr [esp+0x14]
	fmul qword ptr [__real_3fe999999999999a]
	call __ftol2_sse
	mov dword ptr [esi+8],eax

 Block18:
	cmp ebp,3
	jne Block20

 Block19:
	fld qword ptr [esi+0x18]
	fadd qword ptr [esi+0x10]
	fst qword ptr [esi+0x10]
	call __ftol2_sse
	mov dword ptr [esi+8],eax

 Block20:
	mov ecx,dword ptr [esp+0x20]
	add ecx,dword ptr [esi+8]
	mov dword ptr [esp+0x20],ecx
	mov eax,dword ptr [esi+8]
	cmp eax,0x1E
	jge Block24

 Block21:
	mov esi,dword ptr [esi]
	cmp esi,2
	je Block24

 Block22:
	cmp esi,3
	je Block24

 Block23:
	mov eax,0x1E

 Block24:
	cdq
	mov esi,eax
	mov eax,dword ptr [esp+0x24]
	xor esi,edx
	sub esi,edx
	push 1
	lea edx,[esi+eax]
	push edx
	lea edx,[esp+0x18]
	push edx
	push eax
	push ecx
	mov ecx,edi
	call CWvsPhysicalSpace2D::GetFootholdUnderneath
	mov ebp,eax
	mov eax,dword ptr [esp+0x24]
	mov ecx,eax
	sub ecx,esi
	push ecx
	lea edx,[esp+0x1C]
	push edx
	push eax
	mov eax,dword ptr [esp+0x2C]
	push eax
	mov ecx,edi
	call CWvsPhysicalSpace2D::GetFootholdAbove
	xor esi,esi
	mov dword ptr [esp+0x14],eax
	cmp ebp,esi
	je Block30

 Block25:
	cmp eax,esi
	je Block29

 Block26:
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [esp+0x18]
	mov esi,dword ptr [esp+0x10]
	mov eax,edx
	sub eax,ecx
	sub esi,edx
	cmp esi,eax
	mov eax,dword ptr [esp+0x14]
	jle Block28

 Block27:
	dec ecx
	xor esi,esi
	jmp Block33

 Block28:
	mov ecx,dword ptr [esp+0x10]
	dec ecx
	xor esi,esi
	jmp Block33

 Block29:
	mov ecx,dword ptr [esp+0x10]
	jmp Block32

 Block30:
	cmp eax,esi
	je Block40

 Block31:
	mov ecx,dword ptr [esp+0x18]

 Block32:
	dec ecx

 Block33:
	mov edx,dword ptr [esp+0x20]
	mov dword ptr [esp+0x24],ecx
	cmp edx,dword ptr [edi+0x24]
	jl Block38

 Block34:
	mov esi,dword ptr [edi+0x2C]
	dec esi
	cmp edx,esi
	jg Block37

 Block35:
	cmp ecx,dword ptr [edi+0x28]
	jl Block37

 Block36:
	mov edx,dword ptr [edi+0x30]
	dec edx
	cmp ecx,edx
	jle Block45

 Block37:
	xor esi,esi

 Block38:
	cmp ebp,esi
	jne Block46

 Block39:
	cmp eax,esi
	jne Block46

 Block40:
	mov eax,dword ptr [esp+0x1C]
	cmp dword ptr [eax+0x10],esi
	je Block42

 Block41:
	mov dword ptr [eax+0x10],esi
	mov dword ptr [eax+0x18],esi
	mov dword ptr [eax+4],esi

 Block42:
	mov dword ptr [ebx+0x3B48],esi

 Block43:
	pop edi

 Block44:
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret

 Block45:
	xor esi,esi

 Block46:
	mov eax,dword ptr [ebx+0x3B44]
	cmp eax,0x1E84BE8
	jg Block60

 Block47:
	je Block67

 Block48:
	cmp eax,0x141F5E2
	jg Block54

 Block49:
	cmp eax,0x141F5E1
	jge Block57

 Block50:
	cmp eax,0x1312D0E
	jl Block72

 Block51:
	cmp eax,0x1312D0F
	jle Block57

 Block52:
	cmp eax,0x1406F42
	je Block57

 Block53:
	jmp Block72

 Block54:
	cmp eax,0x142440A
	jg Block72

 Block55:
	cmp eax,0x1424409
	jge Block57

 Block56:
	add eax,0xFEBDE309
	cmp eax,1
	ja Block72

 Block57:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,esi
	je Block59

 Block58:
	lea ecx,[eax-0xC]
	push 0xF
	jmp Block71

 Block59:
	xor ecx,ecx
	push 0xF
	jmp Block71

 Block60:
	cmp eax,0x1E9F99A
	jg Block66

 Block61:
	je Block67

 Block62:
	cmp eax,0x1E84BEF
	jl Block72

 Block63:
	cmp eax,0x1E84BF3
	jle Block67

 Block64:
	cmp eax,0x1E9D288
	je Block67

 Block65:
	jmp Block72

 Block66:
	cmp eax,0x1EA20AA
	jne Block72

 Block67:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,esi
	je Block69

 Block68:
	lea ecx,[eax-0xC]
	jmp Block70

 Block69:
	xor ecx,ecx

 Block70:
	push 0x13

 Block71:
	call CVecCtrl::SetMovePathAttribute

 Block72:
	mov ecx,ebx
	call CUserLocal::GetFieldID
	cmp eax,0x35A4E900
	je Block43

 Block73:
	mov eax,dword ptr [ebx+0x19E4]
	cmp eax,esi
	je Block75

 Block74:
	add eax,0xFFFFFFF4
	jmp Block76

 Block75:
	xor eax,eax

 Block76:
	mov ecx,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x20]
	push ecx
	push edx
	lea ecx,[eax+0xC]
	call IWzShape2D::Move
	lea eax,[esp+0x20]
	push eax
	lea ecx,[ebx+0x1984]
	call SECPOINT::op_assign_0
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x18
	ret
}
}
// CUserLocal::GetPetSkill
__SUB_CLASS_THIS0(0059E6F0, __thiscall, 41417,  CUserLocal, uint16_t) {
__asm {

 Block0:
	mov eax,dword ptr [ecx+0x4658]
	push eax
	add ecx,0x4654
	push ecx
	call _ZtlSecureFuseHelper<unsigned short>::call
	add esp,8
	ret
}
}
