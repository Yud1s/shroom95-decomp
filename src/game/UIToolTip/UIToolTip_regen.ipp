#include "regen.hpp"
// UIToolTip.ipp
#include "UIToolTip.hpp"

// CUIToolTip::MakingLimitInfo
_SUB_EXCEPTION_HANDLER(488370)
__SUB_CLASS_THIS(00488370, __thiscall, 5742,  CUIToolTip, void, ZArray<ZXString<char> >&, CS_LIMITGOODS*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_488370
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x28]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x24],ecx
	mov ebx,dword ptr [esp+0x3C]
	xor edi,edi
	cmp ebx,edi
	je Block98

 Block1:
	push edi
	push offset _S_
	push edi
	push edi
	lea ecx,[esp+0x4C]
	mov dword ptr [esp+0x4C],edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push edi
	lea ecx,[esp+0x40]
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x38]
	lea eax,[esp+0x3C]
	push eax
	or esi,0xFFFFFFFF
	push esi
	mov ecx,ebp
	mov dword ptr [esp+0x38],edi
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x30],esi
	cmp eax,edi
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block3:
	push edi
	push offset _S_
	push edi
	push edi
	lea ecx,[esp+0x4C]
	mov dword ptr [esp+0x4C],edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push edi
	lea ecx,[esp+0x40]
	call ZXString<char>::ReleaseBuffer
	lea ecx,[esp+0x3C]
	push ecx
	push esi
	mov ecx,ebp
	mov dword ptr [esp+0x38],1
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x30],esi
	cmp eax,edi
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	mov dword ptr [esp+0x3C],edi
	test byte ptr [ebx+0x38],2
	mov dword ptr [esp+0x30],2
	je Block13

 Block6:
	cmp dword ptr [ebx+0x3C],edi
	jle Block13

 Block7:
	cmp dword ptr [ebx+0x40],edi
	jle Block13

 Block8:
	lea edx,[esp+0x1C]
	push 0xE95
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,dword ptr [eax]
	mov esi,dword ptr [ebx+0x3C]
	mov eax,esi
	cdq
	mov ecx,0x2710
	idiv ecx
	mov byte ptr [esp+0x30],3
	mov ebp,eax
	mov ecx,edx
	mov eax,esi
	cdq
	mov esi,0x64
	idiv esi
	push ebp
	mov eax,0x51EB851F
	push edx
	sub ecx,edx
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	push eax
	lea ecx,[esp+0x48]
	push edi
	push ecx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0x14
	mov byte ptr [esp+0x30],2
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	mov ecx,dword ptr [esp+0x38]
	lea edx,[esp+0x3C]
	push edx
	push 0xFFFFFFFF
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	lea eax,[esp+0x1C]
	push 0xE96
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,dword ptr [eax]
	mov esi,dword ptr [ebx+0x40]
	mov eax,esi
	cdq
	mov ecx,0x2710
	idiv ecx
	mov byte ptr [esp+0x30],4
	mov ebp,eax
	mov ecx,edx
	mov eax,esi
	cdq
	mov esi,0x64
	idiv esi
	push ebp
	mov eax,0x51EB851F
	push edx
	sub ecx,edx
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	push eax
	lea ecx,[esp+0x48]
	push edi
	push ecx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0x14
	mov byte ptr [esp+0x30],2
	test eax,eax
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block12:
	mov ecx,dword ptr [esp+0x38]
	lea edx,[esp+0x3C]
	push edx
	push 0xFFFFFFFF
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov ebp,dword ptr [esp+0x38]
	xor edi,edi

 Block13:
	mov dword ptr [esp+0x38],edi
	xor esi,esi
	test byte ptr [ebx+0x38],4
	mov byte ptr [esp+0x30],5
	je Block64

 Block14:
	cmp dword ptr [ebx+0x50],edi
	je Block20

 Block15:
	lea eax,[esp+0x1C]
	push 0xE97
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],6
	cmp eax,edi
	je Block17

 Block16:
	mov ecx,dword ptr [eax-4]
	jmp Block18

 Block17:
	xor ecx,ecx

 Block18:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov esi,1
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	cmp dword ptr [ebx+0x54],edi
	je Block26

 Block21:
	lea ecx,[esp+0x1C]
	push 0xE98
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],7
	cmp eax,edi
	je Block23

 Block22:
	mov ecx,dword ptr [eax-4]
	jmp Block24

 Block23:
	xor ecx,ecx

 Block24:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	inc esi
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block26:
	cmp dword ptr [ebx+0x58],edi
	je Block32

 Block27:
	lea edx,[esp+0x1C]
	push 0xE99
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],8
	cmp eax,edi
	je Block29

 Block28:
	mov ecx,dword ptr [eax-4]
	jmp Block30

 Block29:
	xor ecx,ecx

 Block30:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	inc esi
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block32

 Block31:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block32:
	cmp dword ptr [ebx+0x5C],edi
	je Block38

 Block33:
	lea eax,[esp+0x1C]
	push 0xE9A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],9
	cmp eax,edi
	je Block35

 Block34:
	mov ecx,dword ptr [eax-4]
	jmp Block36

 Block35:
	xor ecx,ecx

 Block36:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	inc esi
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block38

 Block37:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block38:
	cmp dword ptr [ebx+0x60],edi
	je Block44

 Block39:
	lea ecx,[esp+0x1C]
	push 0xE9B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],0xA
	cmp eax,edi
	je Block41

 Block40:
	mov ecx,dword ptr [eax-4]
	jmp Block42

 Block41:
	xor ecx,ecx

 Block42:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	inc esi
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block44

 Block43:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block44:
	cmp dword ptr [ebx+0x64],edi
	je Block50

 Block45:
	lea edx,[esp+0x1C]
	push 0xE9C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],0xB
	cmp eax,edi
	je Block47

 Block46:
	mov ecx,dword ptr [eax-4]
	jmp Block48

 Block47:
	xor ecx,ecx

 Block48:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	inc esi
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block50

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block50:
	cmp dword ptr [ebx+0x4C],edi
	je Block56

 Block51:
	lea eax,[esp+0x1C]
	push 0xE9D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],0xC
	cmp eax,edi
	je Block53

 Block52:
	mov ecx,dword ptr [eax-4]
	jmp Block54

 Block53:
	xor ecx,ecx

 Block54:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	inc esi
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block56

 Block55:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block56:
	cmp esi,7
	je Block64

 Block57:
	lea ecx,[esp+0x1C]
	push 0xE9E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x30],0xD
	cmp eax,edi
	je Block59

 Block58:
	mov ecx,dword ptr [eax-4]
	jmp Block60

 Block59:
	xor ecx,ecx

 Block60:
	push ecx
	push eax
	lea ecx,[esp+0x40]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x30],5
	cmp eax,edi
	je Block62

 Block61:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block62:
	cmp esi,7
	jge Block64

 Block63:
	lea edx,[esp+0x38]
	push edx
	push 0xFFFFFFFF
	mov ecx,ebp
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign

 Block64:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	test byte ptr [ebx+0x38],8
	mov byte ptr [esp+0x30],0xE
	je Block70

 Block65:
	cmp dword ptr [ebx+0x44],edi
	jl Block70

 Block66:
	cmp dword ptr [ebx+0x48],edi
	jl Block70

 Block67:
	lea eax,[esp+0x1C]
	push 0xFCA
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [ebx+0x48]
	mov edx,dword ptr [ebx+0x44]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x24]
	push eax
	mov byte ptr [esp+0x40],0xF
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0x10
	mov byte ptr [esp+0x30],0xE
	cmp eax,edi
	je Block69

 Block68:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block69:
	lea ecx,[esp+0x18]
	push ecx
	push 0xFFFFFFFF
	mov ecx,ebp
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov esi,dword ptr [esp+0x18]

 Block70:
	test byte ptr [ebx+0x38],1
	je Block78

 Block71:
	cmp dword ptr [ebx+0x30],edi
	jle Block78

 Block72:
	mov dword ptr [esp+0x1C],edi
	lea edx,[esp+0x14]
	push 0x1A57
	push edx
	mov byte ptr [esp+0x38],0x10
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [ebx+0x30]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x3C],0x11
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x20]
	add esp,0xC
	mov byte ptr [esp+0x30],0x10
	cmp eax,edi
	je Block74

 Block73:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block74:
	lea eax,[esp+0x1C]
	push eax
	push 0xFFFFFFFF
	mov ecx,ebp
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov dword ptr [esp+0x14],edi
	lea ecx,[esp+0x20]
	push 0xEA4
	push ecx
	mov byte ptr [esp+0x38],0x12
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [ebx+0x34]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0x3C],0x13
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0xC
	mov byte ptr [esp+0x30],0x12
	cmp eax,edi
	je Block76

 Block75:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block76:
	lea ecx,[esp+0x14]
	push ecx
	push 0xFFFFFFFF
	mov ecx,ebp
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x30],0x10
	cmp eax,edi
	je Block81

 Block77:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block81

 Block78:
	mov dword ptr [esp+0x1C],edi
	lea edx,[esp+0x20]
	push 0xEA5
	push edx
	mov byte ptr [esp+0x38],0x14
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [ebx+0x30]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x3C],0x15
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0xC
	mov byte ptr [esp+0x30],0x14
	cmp eax,edi
	je Block80

 Block79:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block80:
	lea eax,[esp+0x1C]
	push eax
	push 0xFFFFFFFF
	mov ecx,ebp
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign

 Block81:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x30],0xE
	cmp eax,edi
	je Block83

 Block82:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block83:
	lea ecx,[esp+0x20]
	push 0xEA6
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	push 0xFFFFFFFF
	mov ecx,ebp
	mov byte ptr [esp+0x38],0x16
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x30],0xE
	cmp eax,edi
	je Block85

 Block84:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block85:
	push edi
	push offset _S_
	push edi
	push edi
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x24],edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push edi
	lea ecx,[esp+0x18]
	call ZXString<char>::ReleaseBuffer
	lea edx,[esp+0x14]
	push edx
	push 0xFFFFFFFF
	mov ecx,ebp
	mov byte ptr [esp+0x38],0x17
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x30],0xE
	cmp eax,edi
	je Block87

 Block86:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block87:
	push edi
	push offset _S_
	push edi
	push edi
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x24],edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push edi
	lea ecx,[esp+0x18]
	call ZXString<char>::ReleaseBuffer
	lea eax,[esp+0x14]
	push eax
	push 0xFFFFFFFF
	mov ecx,ebp
	mov byte ptr [esp+0x38],0x18
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x30],0xE
	cmp eax,edi
	je Block89

 Block88:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block89:
	mov eax,dword ptr [ebp]
	cmp eax,edi
	jne Block91

 Block90:
	xor eax,eax
	jmp Block92

 Block91:
	mov eax,dword ptr [eax-4]

 Block92:
	mov ecx,dword ptr [esp+0x24]
	shl eax,4
	add dword ptr [ecx+8],eax
	mov byte ptr [esp+0x30],5
	cmp esi,edi
	je Block94

 Block93:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block94:
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0x30],2
	cmp eax,edi
	je Block96

 Block95:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block96:
	mov eax,dword ptr [esp+0x3C]
	mov dword ptr [esp+0x30],0xFFFFFFFF
	cmp eax,edi
	je Block98

 Block97:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block98:
	mov ecx,dword ptr [esp+0x28]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x20
	ret 8
}
}
// CUIToolTip::GetFontByType
__SUB_CLASS_THIS(00481D40, __thiscall, 5760,  CUIToolTip, _x_com_ptr<IWzFont>*, _x_com_ptr<IWzFont>*, long) {
__asm {

 Block0:
	push ecx
	mov eax,dword ptr [esp+0xC]
	dec eax
	push esi
	mov dword ptr [esp+4],0
	cmp eax,0x18
	ja Block27

 Block1:
	cmp EAX, 0
je Block2
cmp EAX, 1
je Block3
cmp EAX, 2
je Block4
cmp EAX, 3
je Block5
cmp EAX, 4
je Block6
cmp EAX, 5
je Block7
cmp EAX, 6
je Block8
cmp EAX, 7
je Block9
cmp EAX, 8
je Block10
cmp EAX, 9
je Block11
cmp EAX, 10
je Block12
cmp EAX, 11
je Block13
cmp EAX, 12
je Block14
cmp EAX, 13
je Block15
cmp EAX, 14
je Block16
cmp EAX, 15
je Block17
cmp EAX, 16
je Block18
cmp EAX, 17
je Block19
cmp EAX, 18
je Block20
cmp EAX, 19
je Block21
cmp EAX, 20
je Block22
cmp EAX, 21
je Block23
cmp EAX, 22
je Block24
cmp EAX, 23
je Block25
cmp EAX, 24
je Block26


 Block2:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x92C
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block3:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x930
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block4:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x934
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block5:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x938
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block6:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x940
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block7:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x944
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block8:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x948
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block9:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x94C
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block10:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x950
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block11:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x954
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block12:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x958
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block13:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x95C
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block14:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x960
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block15:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x964
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block16:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x96C
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block17:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x970
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block18:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x974
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block19:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x978
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block20:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x97C
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block21:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x980
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block22:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x984
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block23:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x988
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block24:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x98C
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block25:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x990
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block26:
	mov esi,dword ptr [esp+0xC]
	add ecx,0x994
	push ecx
	mov ecx,esi
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,esi
	pop esi
	pop ecx
	ret 8

 Block27:
	mov eax,dword ptr [esp+0xC]
	mov dword ptr [eax],0
	pop esi
	pop ecx
	ret 8
}
}
// CUIToolTip::SetToolTip_String
_SUB_EXCEPTION_HANDLER(487140)
__SUB_CLASS_THIS(00487140, __thiscall, 5689,  CUIToolTip, void, long, long, const char*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_487140
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x2C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x40]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [edi+0x954]
	xor ebp,ebp
	mov dword ptr [esp+0x1C],esi
	cmp esi,ebp
	je Block2

 Block1:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+4]
	push esi
	call ecx

 Block2:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x20]
	push edx
	mov dword ptr [esp+0x4C],ebp
	call ebx
	lea eax,[esp+0x20]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	mov byte ptr [esp+0x48],1
	push 0xFFFFFFFF
	cmp esi,ebp
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x14]
	lea edx,[esp+0x18]
	push edx
	push esi
	mov dword ptr [esp+0x20],ebp
	call eax
	cmp eax,ebp
	jge Block8

 Block7:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block8:
	mov ecx,dword ptr [esp+0x18]
	mov ebp,dword ptr [esp+0x5C]
	add ecx,6
	push ecx
	lea edx,[esp+0x28]
	push edx
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	push ebp
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x58],2
	mov ecx,esi
	mov byte ptr [esp+0x58],1
	call IWzFont::CalcTextWidth
	add eax,8
	push eax
	push 1
	mov ecx,edi
	call CUIToolTip::SetBasicInfo
	cmp word ptr [esp+0x20],8
	mov byte ptr [esp+0x48],0
	jne Block11

 Block9:
	xor eax,eax
	mov word ptr [esp+0x20],ax
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block12

 Block10:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block12

 Block11:
	lea ecx,[esp+0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block12:
	mov edx,dword ptr [esp+0x54]
	mov eax,dword ptr [esp+0x50]
	push 0
	push 0xCC0E395A
	push 0
	push 0
	push 0
	push edx
	push eax
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,edi
	call CUIToolTip::MakeLayer
	lea edx,[esp+0x30]
	push edx
	mov byte ptr [esp+0x4C],3
	call ebx
	lea eax,[esp+0x30]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block14

 Block13:
	push eax
	call _com_issue_error

 Block14:
	lea ecx,[esp+0x20]
	push ecx
	mov byte ptr [esp+0x4C],4
	call ebx
	lea edx,[esp+0x20]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block16

 Block15:
	push eax
	call _com_issue_error

 Block16:
	lea eax,[esp+0x30]
	push eax
	lea ecx,[esp+0x24]
	push ecx
	push esi
	push ecx
	mov dword ptr [esp+0x68],esp
	mov ecx,esp
	mov bl,5
	push ebp
	mov byte ptr [esp+0x5C],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x28]
	mov byte ptr [esp+0x58],6
	test ecx,ecx
	jne Block18

 Block17:
	push 0x80004003
	call _com_issue_error

 Block18:
	push 1
	push 4
	mov byte ptr [esp+0x60],bl
	call IWzCanvas::DrawTextA
	mov edi,8
	mov byte ptr [esp+0x48],4
	cmp word ptr [esp+0x20],di
	jne Block21

 Block19:
	mov eax,dword ptr [esp+0x28]
	xor edx,edx
	mov word ptr [esp+0x20],dx
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea eax,[esp+0x20]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block22:
	mov byte ptr [esp+0x48],3
	cmp word ptr [esp+0x30],di
	jne Block25

 Block23:
	mov eax,dword ptr [esp+0x38]
	xor ecx,ecx
	mov word ptr [esp+0x30],cx
	test eax,eax
	je Block26

 Block24:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block26

 Block25:
	lea edx,[esp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block26:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x48],0
	test eax,eax
	je Block28

 Block27:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block28:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	call ecx
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x38
	ret 0xC
}
}
// CUIToolTip::SetToolTip_Skill
_SUB_EXCEPTION_HANDLER(4A2500)
__SUB_CLASS_THIS(004A2500, __thiscall, 5726,  CUIToolTip, void, long, long, const SKILLENTRY*, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A2500
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x4C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x60]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov dword ptr [esp+0x1C],ebp
	xor ebx,ebx
	mov dword ptr [esp+0x14],ebx
	cmp dword ptr [ebp+0x10],ebx
	mov eax,dword ptr [esp+0x7C]
	mov dword ptr [esp+0x20],eax
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov ecx,dword ptr [ebp+0x18]
	cmp ecx,dword ptr [esp+0x70]
	jne Block3

 Block2:
	mov edx,dword ptr [ebp+0x1C]
	cmp edx,dword ptr [esp+0x74]
	je Block181

 Block3:
	mov eax,dword ptr [esp+0x78]
	mov ecx,dword ptr [eax]
	xor edi,edi
	push ecx
	mov dword ptr [esp+0x2C],edi
	call is_skill_need_master_level
	add esp,4
	test eax,eax
	je Block5

 Block4:
	mov edi,1
	mov dword ptr [esp+0x28],edi

 Block5:
	push 0xA
	lea edx,[esp+0x30]
	push edx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esp+0x2C]
	push 1
	push ebx
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x78],ebx
	mov dword ptr [esp+0x6C],esp
	mov dword ptr [ecx],eax
	cmp eax,ebx
	je Block7

 Block6:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block7:
	mov eax,dword ptr [esp+0x88]
	mov eax,dword ptr [eax+8]
	push eax
	push 0
	push 0x10E
	push 0x57
	mov ecx,ebp
	call CUIToolTip::DrawTextSepartedLine
	mov esi,eax
	test edi,edi
	je Block13

 Block8:
	push 0xA
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov edi,dword ptr [eax]
	mov ebx,1
	mov byte ptr [esp+0x68],1
	mov dword ptr [esp+0x14],ebx
	test edi,edi
	jne Block10

 Block9:
	push 0x80004003
	call _com_issue_error

 Block10:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0x14]
	lea eax,[esp+0x18]
	push eax
	push edi
	mov dword ptr [esp+0x20],0
	call ecx
	test eax,eax
	jge Block12

 Block11:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push edi
	push eax
	call _com_issue_errorex

 Block12:
	mov eax,dword ptr [esp+0x18]
	add eax,4
	jmp Block14

 Block13:
	xor eax,eax

 Block14:
	add esi,eax
	mov dword ptr [esp+0x68],0
	test bl,1
	je Block17

 Block15:
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block17

 Block16:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block17:
	cmp esi,0x44
	jle Block19

 Block18:
	sub esi,0x44
	jmp Block20

 Block19:
	xor esi,esi

 Block20:
	mov edx,dword ptr [esp+0x78]
	mov eax,dword ptr [edx+0x64]
	mov dword ptr [esp+0x5C],eax
	lea ecx,[esi+0x80]
	test eax,eax
	je Block22

 Block21:
	mov edi,eax
	shl edi,4
	add edi,eax
	lea eax,[edi+edi+0x14]
	jmp Block23

 Block22:
	xor eax,eax

 Block23:
	cmp dword ptr [edx],0x423D0E
	jne Block25

 Block24:
	add eax,0x12
	add esi,0x12

 Block25:
	add esi,0x72
	push esi
	add eax,ecx
	push eax
	push 0x140
	push 7
	mov ecx,ebp
	call CUIToolTip::SetBasicInfo
	lea ecx,[esp+0x3C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [esp+0x78]
	mov eax,dword ptr [eax+4]
	lea edx,[esp+0x78]
	push edx
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push edx
	push eax
	mov byte ptr [esp+0x74],2
	call CSkillInfo::GetSkillLevel_0
	mov ebx,eax
	mov eax,dword ptr [esp+0x40]
	mov dword ptr [esp+0x54],ebx
	mov byte ptr [esp+0x68],0
	test eax,eax
	je Block30

 Block26:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block29

 Block27:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block29

 Block28:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block29:
	mov dword ptr [esp+0x40],0

 Block30:
	mov dword ptr [esp+0x18],0
	cmp dword ptr [esp+0x7C],0
	mov byte ptr [esp+0x68],3
	je Block57

 Block31:
	test ebx,ebx
	jle Block44

 Block32:
	lea eax,[esp+0x30]
	push 0x2B3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push ebx
	push eax
	lea ecx,[esp+0x20]
	push ecx
	mov byte ptr [esp+0x74],4
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x3C]
	add esp,0xC
	mov byte ptr [esp+0x68],3
	test eax,eax
	je Block34

 Block33:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block34:
	push 0
	push 0x3E9
	push 1
	push ecx
	mov ecx,esp
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x5C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push 0x18
	mov ecx,ebp
	call CUIToolTip::AddInfo
	mov ecx,dword ptr [esp+0x78]
	push 1
	push 0x3E9
	push 0
	push ebx
	call SKILLENTRY::GetLevelData
	mov esi,dword ptr [eax]
	test esi,esi
	je Block38

 Block35:
	cmp dword ptr [esi+4],0
	jne Block37

 Block36:
	mov eax,dword ptr [esi]
	push eax
	call ZComAPI::ZtlConvertBSTRToString
	mov dword ptr [esi+4],eax

 Block37:
	mov ecx,dword ptr [esi+4]
	jmp Block39

 Block38:
	xor ecx,ecx

 Block39:
	push ecx
	mov edi,esp
	mov dword ptr [esp+0x5C],esp
	mov dword ptr [edi],0
	test ecx,ecx
	je Block43

 Block40:
	mov eax,ecx
	lea esi,[eax+1]

 Block41:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block41

 Block42:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push 0
	push esi
	mov ecx,edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	mov ecx,edi
	call ZXString<char>::ReleaseBuffer

 Block43:
	push 0x19
	mov ecx,ebp
	call CUIToolTip::AddInfo

 Block44:
	mov ecx,dword ptr [esp+0x78]
	call SKILLENTRY::GetMaxLevel
	cmp ebx,eax
	jge Block57

 Block45:
	lea ecx,[esp+0x30]
	push 0x2B4
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	lea esi,[ebx+1]
	push esi
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x74],5
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x3C]
	add esp,0xC
	mov byte ptr [esp+0x68],3
	test eax,eax
	je Block47

 Block46:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block47:
	push 0
	push 0x3E9
	push 1
	push ecx
	mov ecx,esp
	lea eax,[esp+0x28]
	mov dword ptr [esp+0x5C],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push 0x18
	mov ecx,ebp
	call CUIToolTip::AddInfo
	mov ecx,dword ptr [esp+0x78]
	push 1
	push 0x3E9
	push 0
	push esi
	call SKILLENTRY::GetLevelData
	mov esi,dword ptr [eax]
	test esi,esi
	je Block51

 Block48:
	cmp dword ptr [esi+4],0
	jne Block50

 Block49:
	mov ecx,dword ptr [esi]
	push ecx
	call ZComAPI::ZtlConvertBSTRToString
	mov dword ptr [esi+4],eax

 Block50:
	mov ecx,dword ptr [esi+4]
	jmp Block52

 Block51:
	xor ecx,ecx

 Block52:
	push ecx
	mov edi,esp
	mov dword ptr [esp+0x5C],esp
	mov dword ptr [edi],0
	test ecx,ecx
	je Block56

 Block53:
	mov eax,ecx
	lea esi,[eax+1]

 Block54:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block54

 Block55:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push 0
	push esi
	mov ecx,edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	mov ecx,edi
	call ZXString<char>::ReleaseBuffer

 Block56:
	push 0x19
	mov ecx,ebp
	call CUIToolTip::AddInfo

 Block57:
	mov edx,dword ptr [esp+0x78]
	cmp dword ptr [edx],0x1F914CE
	jne Block69

 Block58:
	mov dword ptr [esp+0x14],0
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov eax,dword ptr [esi+0x3300]
	add esi,0x2148
	push eax
	lea ecx,[esi+0x11B0]
	mov bl,6
	push ecx
	mov byte ptr [esp+0x70],bl
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add esp,8
	mov edi,eax
	call CWvsContext::GetSwallowBuffType
	dec eax
	cmp eax,4
	ja Block67

 Block59:
	cmp EAX, 0
je Block60
cmp EAX, 1
je Block61
cmp EAX, 2
je Block62
cmp EAX, 3
je Block63
cmp EAX, 4
je Block64


 Block60:
	lea edx,[esp+0x30]
	push 0x186C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,dword ptr [eax]
	mov ecx,esi
	mov byte ptr [esp+0x68],7
	call SecondaryStat::_ZtlSecureGet_nSwallowCritical_
	push eax
	push edi
	lea eax,[esp+0x1C]
	push ebp
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x40]
	jmp Block65

 Block61:
	lea ecx,[esp+0x20]
	push 0x170D
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,dword ptr [eax]
	mov ecx,esi
	mov byte ptr [esp+0x68],8
	call SecondaryStat::_ZtlSecureGet_nSwallowMaxMP_
	push eax
	push edi
	lea edx,[esp+0x1C]
	push ebp
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	jmp Block65

 Block62:
	lea eax,[esp+0x34]
	push 0x170A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,dword ptr [eax]
	mov ecx,esi
	mov byte ptr [esp+0x68],9
	call SecondaryStat::_ZtlSecureGet_nSwallowAttackDamage_
	push eax
	push edi
	lea ecx,[esp+0x1C]
	push ebp
	push ecx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x44]
	jmp Block65

 Block63:
	lea edx,[esp+0x3C]
	push 0x170B
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,dword ptr [eax]
	mov ecx,esi
	mov byte ptr [esp+0x68],0xA
	call SecondaryStat::_ZtlSecureGet_nSwallowDefence_
	push eax
	push edi
	lea eax,[esp+0x1C]
	push ebp
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x4C]
	jmp Block65

 Block64:
	lea ecx,[esp+0x4C]
	push 0x170C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,dword ptr [eax]
	mov ecx,esi
	mov byte ptr [esp+0x68],0xB
	call SecondaryStat::_ZtlSecureGet_nSwallowEvasion_
	push eax
	push edi
	lea edx,[esp+0x1C]
	push ebp
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x5C]

 Block65:
	add esp,0x10
	mov byte ptr [esp+0x68],bl
	test eax,eax
	je Block67

 Block66:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block67:
	push 0
	push 0x3E9
	push 0
	push ecx
	mov ecx,esp
	lea eax,[esp+0x24]
	mov dword ptr [esp+0x5C],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x2C]
	push 0xA
	call CUIToolTip::AddInfo
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x20],1
	mov byte ptr [esp+0x68],3
	test eax,eax
	je Block69

 Block68:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block69:
	mov ecx,dword ptr [esp+0x78]
	mov eax,dword ptr [ecx]
	cmp eax,0x4DFCDF
	je Block72

 Block70:
	cmp eax,0x4F837F
	je Block72

 Block71:
	cmp eax,0x217C065
	jne Block88

 Block72:
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov byte ptr [esp+0x68],0xC
	lea esi,[ecx+0x2148]
	call CWvsContext::GetDiceBuffType
	dec eax
	cmp eax,4
	ja Block85

 Block73:
	cmp EAX, 0
je Block74
cmp EAX, 1
je Block75
cmp EAX, 2
je Block76
cmp EAX, 3
je Block77
cmp EAX, 4
je Block78


 Block74:
	lea edx,[esp+0x4C]
	push 0x18B6
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x1290]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0x74],0xD
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x58]
	jmp Block79

 Block75:
	lea eax,[esp+0x3C]
	push 0x18E2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x1274]
	mov edx,dword ptr [esi+0x1270]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x20]
	push eax
	mov byte ptr [esp+0x78],0xE
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x4C]
	add esp,0x10
	jmp Block80

 Block76:
	lea ecx,[esp+0x34]
	push 0x18C7
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x1278]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0x74],0xF
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x40]
	jmp Block79

 Block77:
	lea ecx,[esp+0x30]
	push 0x18A7
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x12A0]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0x74],0x10
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x3C]
	jmp Block79

 Block78:
	lea ecx,[esp+0x20]
	push 0x18A6
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x12B4]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0x74],0x11
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]

 Block79:
	add esp,0xC

 Block80:
	mov byte ptr [esp+0x68],0xC
	test eax,eax
	je Block82

 Block81:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block82:
	mov ebp,dword ptr [esp+0x14]
	test ebp,ebp
	je Block85

 Block83:
	cmp byte ptr [ebp],0
	je Block85

 Block84:
	push 0
	push 0x3E9
	push 0
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x5C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov edi,dword ptr [esp+0x2C]
	push 0xA
	mov ecx,edi
	call CUIToolTip::AddInfo
	jmp Block86

 Block85:
	mov edi,dword ptr [esp+0x1C]

 Block86:
	mov dword ptr [esp+0x20],1
	mov byte ptr [esp+0x68],3
	test ebp,ebp
	je Block89

 Block87:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4
	jmp Block89

 Block88:
	mov edi,dword ptr [esp+0x1C]

 Block89:
	mov eax,dword ptr [esp+0x78]
	mov eax,dword ptr [eax]
	cmp eax,0x1C9C7A5
	je Block91

 Block90:
	cmp eax,0x1C9C7A6
	jne Block104

 Block91:
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x38]
	mov ebx,dword ptr [eax+4]
	mov dword ptr [esp+0x4C],ebx
	test esi,esi
	je Block96

 Block92:
	add esi,0xFFFFFFF0
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block95

 Block93:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block95

 Block94:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block95:
	mov dword ptr [esp+0x38],0

 Block96:
	cmp dword ptr [ebx+0x6CD],0
	je Block104

 Block97:
	mov ebx,1
	xor ebp,ebp

 Block98:
	mov ecx,dword ptr [esp+0x4C]
	mov ecx,dword ptr [ecx+0x6CD]
	mov eax,dword ptr [ecx+0x15]
	add eax,ebp
	cdq
	mov esi,5
	idiv esi
	mov ecx,dword ptr [ecx+edx*4+1]
	test ecx,ecx
	je Block103

 Block99:
	push ecx
	call CMobTemplate::GetMobTemplate
	mov esi,eax
	add esp,4
	test esi,esi
	je Block103

 Block100:
	test ebx,ebx
	je Block102

 Block101:
	push 0
	push 0x3E9
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x4C],esp
	push 0x18D5
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xE
	mov ecx,edi
	call CUIToolTip::AddInfo
	xor ebx,ebx
	mov dword ptr [esp+0x20],1

 Block102:
	push 0
	push 0x3E9
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x4C],esp
	add esi,0x30
	push esi
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push 0xE
	mov ecx,edi
	call CUIToolTip::AddInfo

 Block103:
	inc ebp
	cmp ebp,5
	jl Block98

 Block104:
	mov eax,dword ptr [esp+0x74]
	mov ecx,dword ptr [esp+0x70]
	push 0
	push 0xCC0E395A
	push 0
	push 0
	push 1
	push eax
	push ecx
	lea edx,[esp+0x90]
	push edx
	mov ecx,edi
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x74]
	test eax,eax
	je Block106

 Block105:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block106:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x78],esp
	push 1
	push eax
	mov ecx,edi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x7C]
	mov eax,dword ptr [ecx+4]
	push eax
	push 0xA
	mov ecx,edi
	call CUIToolTip::DrawTextItemName
	mov edx,dword ptr [esp+0x78]
	cmp dword ptr [edx],0x1F914CE
	jne Block108

 Block107:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetSwallowBuffType
	jmp Block109

 Block108:
	xor eax,eax

 Block109:
	mov ecx,dword ptr [esp+0x78]
	push eax
	lea eax,[esp+0x28]
	push eax
	call SKILLENTRY::GetIconCanvas_1
	push ecx
	mov ecx,dword ptr [esp+0x28]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x6C],0x12
	mov dword ptr [esp+0x78],esp
	test eax,eax
	je Block111

 Block110:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block111:
	push 0x20
	push 0xA
	mov ecx,edi
	call CUIToolTip::DrawCanvasIcon
	cmp dword ptr [esp+0x28],0
	mov dword ptr [esp+0x70],0x20
	je Block124

 Block112:
	lea ecx,[esp+0x4C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x50]
	mov ebx,dword ptr [eax+4]
	test esi,esi
	je Block117

 Block113:
	add esi,0xFFFFFFF0
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block116

 Block114:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block116

 Block115:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block116:
	mov dword ptr [esp+0x50],0

 Block117:
	mov edx,dword ptr [esp+0x78]
	lea ecx,[esp+0x74]
	push ecx
	xor esi,esi
	push edx
	lea ecx,[ebx+0x56D]
	mov dword ptr [esp+0x7C],esi
	call ZMap<long, long, long>::GetAt
	mov dword ptr [esp+0x70],esi
	lea eax,[esp+0x4C]
	push 0xF36
	mov bl,0x13
	push eax
	mov byte ptr [esp+0x70],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,dword ptr [esp+0x74]
	mov eax,dword ptr [eax]
	push ebp
	push eax
	lea ecx,[esp+0x78]
	push ecx
	mov byte ptr [esp+0x74],0x14
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x58]
	add esp,0xC
	mov byte ptr [esp+0x68],bl
	test eax,eax
	je Block119

 Block118:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block119:
	test ebp,ebp
	mov ebp,dword ptr [esp+0x70]
	jne Block121

 Block120:
	cmp dword ptr [esp+0x7C],0
	je Block122

 Block121:
	push 1
	push 0
	push 1
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x8C],esp
	push 0xA
	push edx
	mov ecx,edi
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [edi+0xC]
	push ebp
	push 0x20
	sub eax,0x14
	push eax
	push 0x57
	mov ecx,edi
	call CUIToolTip::DrawTextSepartedLine
	mov esi,0xF

 Block122:
	add esi,0x20
	mov dword ptr [esp+0x70],esi
	mov byte ptr [esp+0x68],0x12
	test ebp,ebp
	je Block124

 Block123:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block124:
	mov ecx,dword ptr [esp+0x78]
	mov eax,dword ptr [ecx]
	cmp eax,0xC
	je Block129

 Block125:
	cmp eax,0x98968C
	je Block129

 Block126:
	cmp eax,0x1312D0C
	je Block129

 Block127:
	cmp eax,0x131541C
	je Block129

 Block128:
	cmp eax,0x1C9C38C
	jne Block137

 Block129:
	cmp dword ptr [esp+0x54],0
	je Block137

 Block130:
	mov dword ptr [esp+0x7C],0
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov byte ptr [esp+0x6C],0x15
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x58]
	mov ebx,dword ptr [eax+4]
	test esi,esi
	je Block135

 Block131:
	add esi,0xFFFFFFF0
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block134

 Block132:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block134

 Block133:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block134:
	mov dword ptr [esp+0x58],0

 Block135:
	lea ecx,[esp+0x74]
	push 0x1463
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [ebx+0x6C5]
	mov eax,dword ptr [eax]
	push edx
	mov ecx,edx
	push ecx
	push eax
	lea edx,[esp+0x88]
	push edx
	mov byte ptr [esp+0x78],0x16
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x84]
	add esp,0x10
	mov byte ptr [esp+0x68],0x15
	test eax,eax
	je Block171

 Block136:
	add eax,0xFFFFFFF4
	push eax
	jmp Block170

 Block137:
	lea eax,[ecx+8]
	push eax
	lea ecx,[esp+0x80]
	mov dword ptr [esp+0x80],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x78]
	cmp dword ptr [eax+0x48],0
	mov byte ptr [esp+0x68],0x17
	je Block152

 Block138:
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x58]
	mov ebx,dword ptr [eax+4]
	test esi,esi
	je Block143

 Block139:
	add esi,0xFFFFFFF0
	lea ebp,[esi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block142

 Block140:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block142

 Block141:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block142:
	mov dword ptr [esp+0x58],0

 Block143:
	mov ecx,dword ptr [_D_DB_DATE_20790101__10]
	mov edx,dword ptr [_D_DB_DATE_20790101__10+4]
	mov dword ptr [esp+0x4C],ecx
	mov ecx,dword ptr [esp+0x78]
	lea eax,[esp+0x4C]
	push eax
	push ecx
	lea ecx,[ebx+0x585]
	mov dword ptr [esp+0x58],edx
	call ZMap<long, _FILETIME, long>::GetAt
	test eax,eax
	je Block152

 Block144:
	push offset _D_DB_DATE_20790101__10
	lea edx,[esp+0x50]
	push edx
	call CompareFileTime
	test eax,eax
	jge Block152

 Block145:
	lea eax,[esp+0x3C]
	push eax
	lea ecx,[esp+0x50]
	push ecx
	call FileTimeToSystemTime
	mov dword ptr [esp+0x74],0
	lea edx,[esp+0x54]
	push 0x1572
	push edx
	mov byte ptr [esp+0x70],0x18
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,word ptr [esp+0x46]
	movzx edx,word ptr [esp+0x44]
	mov eax,dword ptr [eax]
	push ecx
	movzx ecx,word ptr [esp+0x40]
	push edx
	movzx edx,word ptr [esp+0x4A]
	push ecx
	movzx ecx,word ptr [esp+0x4A]
	push edx
	push ecx
	push eax
	lea edx,[esp+0x8C]
	push edx
	mov byte ptr [esp+0x84],0x19
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x70]
	add esp,0x1C
	mov byte ptr [esp+0x68],0x18
	test eax,eax
	je Block147

 Block146:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block147:
	mov esi,dword ptr [esp+0x74]
	test esi,esi
	je Block149

 Block148:
	mov eax,dword ptr [esi-4]
	jmp Block150

 Block149:
	xor eax,eax

 Block150:
	push eax
	push esi
	lea ecx,[esp+0x84]
	call ZXString<char>::_Cat
	mov byte ptr [esp+0x68],0x17
	test esi,esi
	je Block152

 Block151:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block152:
	cmp dword ptr [TSingleton<CDamageMeter>::ms_pInstance],0
	je Block154

 Block153:
	mov eax,dword ptr [esp+0x78]
	cmp dword ptr [eax],0x3EE
	je Block158

 Block154:
	mov ecx,dword ptr [esp+0x78]
	mov eax,dword ptr [ecx]
	cmp eax,0x989A6E
	je Block158

 Block155:
	cmp eax,0x13130EE
	je Block158

 Block156:
	cmp eax,0x13157FE
	je Block158

 Block157:
	cmp eax,0x1C9C76E
	jne Block171

 Block158:
	push 2
	push offset _S___4
	lea ecx,[esp+0x84]
	call ZXString<char>::_Cat
	mov dword ptr [esp+0x74],0
	lea edx,[esp+0x54]
	push 0x1A15
	mov bl,0x1A
	push edx
	mov byte ptr [esp+0x70],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [TSingleton<CDamageMeter>::ms_pInstance]
	mov ecx,dword ptr [ecx+0x10]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x7C]
	push edx
	mov byte ptr [esp+0x74],0x1B
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x60]
	add esp,0xC
	mov byte ptr [esp+0x68],bl
	test eax,eax
	je Block160

 Block159:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block160:
	mov ecx,dword ptr [esp+0x74]
	test ecx,ecx
	je Block162

 Block161:
	mov eax,dword ptr [ecx-4]
	jmp Block163

 Block162:
	xor eax,eax

 Block163:
	push eax
	push ecx
	lea ecx,[esp+0x84]
	call ZXString<char>::_Cat
	push 3
	push offset _S___21
	lea ecx,[esp+0x84]
	call ZXString<char>::_Cat
	lea eax,[esp+0x54]
	push 0x1A15
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [TSingleton<CDamageMeter>::ms_pInstance]
	mov ecx,dword ptr [ecx+0xC]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x7C]
	push edx
	mov byte ptr [esp+0x74],0x1C
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x60]
	add esp,0xC
	mov byte ptr [esp+0x68],bl
	test eax,eax
	je Block165

 Block164:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block165:
	mov esi,dword ptr [esp+0x74]
	test esi,esi
	je Block167

 Block166:
	mov eax,dword ptr [esi-4]
	jmp Block168

 Block167:
	xor eax,eax

 Block168:
	push eax
	push esi
	lea ecx,[esp+0x84]
	call ZXString<char>::_Cat
	mov byte ptr [esp+0x68],0x17
	test esi,esi
	je Block171

 Block169:
	add esi,0xFFFFFFF4
	push esi

 Block170:
	call ZXString<char>::_Release
	add esp,4

 Block171:
	push 1
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x84],esp
	push 0xA
	push eax
	mov ecx,edi
	call CUIToolTip::GetFontByType
	mov esi,dword ptr [esp+0x8C]
	mov ecx,dword ptr [esp+0x80]
	mov edx,dword ptr [edi+0xC]
	push esi
	push ecx
	sub edx,0x14
	push edx
	push 0x57
	mov ecx,edi
	call CUIToolTip::DrawTextSepartedLine
	mov byte ptr [esp+0x68],0x12
	test esi,esi
	je Block173

 Block172:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block173:
	cmp dword ptr [esp+0x20],0
	je Block175

 Block174:
	push 0
	mov ecx,edi
	call CUIToolTip::DrawInfo

 Block175:
	mov eax,dword ptr [esp+0x78]
	mov ecx,dword ptr [esp+0x5C]
	push eax
	push ecx
	mov ecx,edi
	call CUIToolTip::DrawReqSkill
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x68],3
	test eax,eax
	je Block177

 Block176:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block177:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x68],0
	test eax,eax
	je Block179

 Block178:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block179:
	mov eax,dword ptr [esp+0x2C]
	mov dword ptr [esp+0x68],0xFFFFFFFF
	test eax,eax
	je Block181

 Block180:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block181:
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x58
	ret 0x10
}
}
// CUIToolTip::SetBasicInfo
__SUB_CLASS_THIS(00480F90, __thiscall, 5687,  CUIToolTip, void, long, long, long, long) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	call CUIToolTip::ClearToolTip
	mov eax,dword ptr [esp+8]
	mov ecx,dword ptr [esp+0xC]
	mov edx,dword ptr [esp+0x10]
	mov dword ptr [esi+4],eax
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esi+0xC],ecx
	mov dword ptr [esi+8],edx
	mov dword ptr [esi+0x4A4],eax
	pop esi
	ret 0x10
}
}
// CUIToolTip::DrawInfo
_SUB_EXCEPTION_HANDLER(49E8B0)
__SUB_CLASS_THIS(0049E8B0, __thiscall, 5767,  CUIToolTip, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_49E8B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x16C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x180]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov eax,dword ptr [edi+0x4A4]
	cmp eax,0xFFFFFFFF
	jne Block2

 Block1:
	xor eax,eax
	jmp Block14

 Block2:
	lea ebp,[eax+9]
	mov eax,3
	xor ebx,ebx
	mov dword ptr [esp+0x18],ebp
	mov word ptr [esp+0x160],ax
	mov dword ptr [esp+0x168],ebx
	mov ecx,dword ptr [edi+0x10]
	mov dword ptr [esp+0x188],ebx
	cmp ecx,ebx
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	lea edx,[esp+0x160]
	push edx
	lea eax,[esp+0x18]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x160],8
	mov byte ptr [esp+0x188],2
	jne Block7

 Block5:
	mov eax,dword ptr [esp+0x168]
	xor ecx,ecx
	mov word ptr [esp+0x160],cx
	cmp eax,ebx
	je Block8

 Block6:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block8

 Block7:
	lea edx,[esp+0x160]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block8:
	mov esi,dword ptr [esp+0x14]
	cmp esi,ebx
	jne Block10

 Block9:
	push 0x80004003
	call _com_issue_error

 Block10:
	mov eax,dword ptr [edi+0xC]
	mov ecx,dword ptr [edi+0x4A4]
	mov ebx,dword ptr [esp+0x190]
	mov edx,dword ptr [esi]
	push 0xFFFFFFFF
	push 1
	sub eax,0xC
	push eax
	mov eax,dword ptr [edx+0x8C]
	add ecx,ebx
	push ecx
	push 6
	push esi
	call eax
	test eax,eax
	jge Block12

 Block11:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block12:
	xor eax,eax
	cmp dword ptr [edi+0x20],eax
	mov dword ptr [esp+0x24],eax
	jg Block18

 Block13:
	sub ebp,dword ptr [edi+0x4A4]
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	mov edi,ebp
	mov dword ptr [esp+0x18C],0xFFFFFFFF
	call ecx
	mov eax,edi

 Block14:
	mov ecx,dword ptr [esp+0x180]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x178
	ret 4

 Block17:
	mov ebx,dword ptr [esp+0x190]

 Block18:
	lea eax,[eax+eax*8+9]
	cmp dword ptr [edi+eax*4+0x14],0
	mov ebp,dword ptr [edi+eax*4+0x20]
	lea esi,[edi+eax*4]
	mov edx,0x3E8
	mov ecx,0xFF
	je Block67

 Block19:
	cmp dword ptr [esi+0x10],edx
	jne Block41

 Block20:
	mov edx,dword ptr [esi+8]
	push 1
	push 0
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x30],esp
	push edx
	push ecx
	mov ecx,edi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esi+0xC]
	mov eax,dword ptr [edi+0xC]
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	lea edx,[eax-0x14]
	sub eax,dword ptr [esi]
	add ecx,ebx
	push ecx
	push edx
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov ecx,edi
	call CUIToolTip::DrawTextSepartedLine
	mov ecx,dword ptr [edi+0x20]
	lea ecx,[ecx+ecx*8]
	mov dword ptr [edi+ecx*4+0x28],eax
	mov eax,dword ptr [esi+0x1C]
	test eax,eax
	je Block142

 Block21:
	cmp byte ptr [eax],0
	je Block142

 Block22:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x100]
	push edx
	call ebp
	lea eax,[esp+0x100]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block23:
	lea ecx,[esp+0x80]
	push ecx
	mov byte ptr [esp+0x18C],3
	call ebp
	lea edx,[esp+0x80]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block24:
	lea eax,[esp+0x50]
	push eax
	mov byte ptr [esp+0x18C],4
	call ebp
	lea ecx,[esp+0x50]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block25:
	mov ecx,dword ptr [esi+0x18]
	lea edx,[esp+0x100]
	push edx
	lea eax,[esp+0x84]
	push eax
	push ecx
	lea edx,[esp+0x50]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x198],5
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+0x1C]
	push ecx
	mov dword ptr [esp+0x30],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x19C],6
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x28]
	lea ecx,[eax+ebx-2]
	mov eax,dword ptr [esi+0xC]
	push ecx
	lea edx,[esp+0x64]
	push edx
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x1A8],7
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esi+8]
	push eax
	lea ecx,[esp+0x60]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0x1AC],8
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x1A4],9
	test ecx,ecx
	je Block3

 Block26:
	mov byte ptr [esp+0x1A4],0xA
	call IWzFont::CalcTextWidth
	mov ecx,eax
	mov eax,dword ptr [edi+0xC]
	sub eax,dword ptr [esi]
	mov byte ptr [esp+0x19C],0xB
	cdq
	sub eax,edx
	sar eax,1
	add eax,ecx
	mov ecx,dword ptr [esp+0x28]
	push eax
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0x188],6
	test eax,eax
	je Block28

 Block27:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block28:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0x188],5
	test eax,eax
	je Block30

 Block29:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block30:
	mov ebx,8
	mov byte ptr [esp+0x188],4
	cmp word ptr [esp+0x50],bx
	jne Block33

 Block31:
	xor eax,eax
	mov word ptr [esp+0x50],ax
	mov eax,dword ptr [esp+0x58]
	test eax,eax
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea ecx,[esp+0x50]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block34:
	mov byte ptr [esp+0x188],3
	cmp word ptr [esp+0x80],bx
	jne Block37

 Block35:
	mov eax,dword ptr [esp+0x88]
	xor edx,edx
	mov word ptr [esp+0x80],dx
	test eax,eax
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block38

 Block37:
	lea eax,[esp+0x80]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block38:
	mov byte ptr [esp+0x188],2
	cmp word ptr [esp+0x100],bx
	jne Block40

 Block39:
	mov eax,dword ptr [esp+0x108]
	xor ecx,ecx
	mov word ptr [esp+0x100],cx
	jmp Block138

 Block40:
	lea edx,[esp+0x100]
	jmp Block141

 Block41:
	test ebp,ebp
	je Block46

 Block42:
	mov eax,3
	mov word ptr [esp+0xA0],ax
	mov dword ptr [esp+0xA8],ecx
	mov eax,dword ptr [edi+0xA04]
	mov edx,dword ptr [esp+0x18]
	lea ecx,[esp+0xA0]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push eax
	lea eax,[edx+ebx+2]
	push eax
	push 0xA
	mov byte ptr [esp+0x198],0xC
	call IWzCanvas::Copy
	cmp word ptr [esp+0xA0],8
	mov byte ptr [esp+0x188],2
	jne Block45

 Block43:
	mov eax,dword ptr [esp+0xA8]
	xor ecx,ecx
	mov word ptr [esp+0xA0],cx
	test eax,eax
	je Block46

 Block44:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block46

 Block45:
	lea edx,[esp+0xA0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block46:
	push 1
	push 0
	push 1
	push ecx
	mov ecx,dword ptr [esi+8]
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	push ecx
	push eax
	mov ecx,edi
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esi+0xC]
	mov edx,dword ptr [esp+0x28]
	mov ecx,dword ptr [esp+0x1A0]
	lea ebx,[edx+ecx-2]
	mov edx,dword ptr [edi+0xC]
	push eax
	neg ebp
	sbb ebp,ebp
	push ebx
	sub edx,0x14
	and ebp,6
	push edx
	lea eax,[ebp+0xA]
	push eax
	mov ecx,edi
	call CUIToolTip::DrawTextSepartedLine
	mov ecx,dword ptr [edi+0x20]
	lea ecx,[ecx+ecx*8]
	mov dword ptr [edi+ecx*4+0x28],eax
	mov eax,dword ptr [esi+0x1C]
	test eax,eax
	je Block142

 Block47:
	cmp byte ptr [eax],0
	je Block142

 Block48:
	lea edx,[esp+0x120]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x120]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block49:
	lea ecx,[esp+0xC0]
	push ecx
	mov byte ptr [esp+0x18C],0xD
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0xC0]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block50:
	lea eax,[esp+0x140]
	push eax
	mov byte ptr [esp+0x18C],0xE
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x140]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block51:
	mov ecx,dword ptr [esi+0x18]
	lea edx,[esp+0x120]
	push edx
	lea eax,[esp+0xC4]
	push eax
	push ecx
	lea edx,[esp+0x3C]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x198],0xF
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+0x1C]
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x19C],0x10
	call _xbstr_t::_ctor_0
	push ebx
	lea eax,[esp+0x154]
	push eax
	mov eax,dword ptr [esi+0xC]
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x1A8],0x11
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+8]
	push ecx
	lea edx,[esp+0x6C]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x1AC],0x12
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x1A4],0x13
	test ecx,ecx
	je Block3

 Block52:
	mov byte ptr [esp+0x1A4],0x14
	call IWzFont::CalcTextWidth
	mov ecx,dword ptr [esp+0x28]
	lea eax,[eax+ebp+0xA]
	push eax
	mov byte ptr [esp+0x1A0],0x15
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x188],0x10
	test eax,eax
	je Block54

 Block53:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block54:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x188],0xF
	test eax,eax
	je Block56

 Block55:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block56:
	mov ebx,8
	mov byte ptr [esp+0x188],0xE
	cmp word ptr [esp+0x140],bx
	jne Block59

 Block57:
	xor eax,eax
	mov word ptr [esp+0x140],ax
	mov eax,dword ptr [esp+0x148]
	test eax,eax
	je Block60

 Block58:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block60

 Block59:
	lea ecx,[esp+0x140]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block60:
	mov byte ptr [esp+0x188],0xD
	cmp word ptr [esp+0xC0],bx
	jne Block63

 Block61:
	mov eax,dword ptr [esp+0xC8]
	xor edx,edx
	mov word ptr [esp+0xC0],dx
	test eax,eax
	je Block64

 Block62:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block64

 Block63:
	lea eax,[esp+0xC0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block64:
	mov byte ptr [esp+0x188],2
	cmp word ptr [esp+0x120],bx
	jne Block66

 Block65:
	mov eax,dword ptr [esp+0x128]
	xor ecx,ecx
	mov word ptr [esp+0x120],cx
	jmp Block138

 Block66:
	lea edx,[esp+0x120]
	jmp Block141

 Block67:
	cmp dword ptr [esi+0x10],edx
	jne Block101

 Block68:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x60]
	push eax
	call ebp
	lea ecx,[esp+0x60]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block69:
	lea edx,[esp+0xE0]
	push edx
	mov byte ptr [esp+0x18C],0x16
	call ebp
	lea eax,[esp+0xE0]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block70:
	mov eax,dword ptr [esi+8]
	lea ecx,[esp+0x60]
	push ecx
	lea edx,[esp+0xE4]
	push edx
	push eax
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0x198],0x17
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+0xC]
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x19C],0x18
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [edi+0xC]
	sub eax,dword ptr [esi]
	mov ebp,dword ptr [esp+0x28]
	mov ecx,dword ptr [esp+0x24]
	lea edx,[ebx+ebp]
	push edx
	cdq
	sub eax,edx
	sar eax,1
	mov byte ptr [esp+0x19C],0x19
	push eax
	mov byte ptr [esp+0x1A0],0x18
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x188],0x17
	test eax,eax
	je Block72

 Block71:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block72:
	cmp word ptr [esp+0xE0],8
	mov byte ptr [esp+0x188],0x16
	jne Block75

 Block73:
	xor eax,eax
	mov word ptr [esp+0xE0],ax
	mov eax,dword ptr [esp+0xE8]
	test eax,eax
	je Block76

 Block74:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block76

 Block75:
	lea ecx,[esp+0xE0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block76:
	cmp word ptr [esp+0x60],8
	mov byte ptr [esp+0x188],2
	jne Block79

 Block77:
	mov eax,dword ptr [esp+0x68]
	xor edx,edx
	mov word ptr [esp+0x60],dx
	test eax,eax
	je Block80

 Block78:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block80

 Block79:
	lea eax,[esp+0x60]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block80:
	mov eax,dword ptr [esi+0x1C]
	test eax,eax
	je Block142

 Block81:
	cmp byte ptr [eax],0
	je Block142

 Block82:
	lea ecx,[esp+0xB0]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0xB0]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block83:
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x18C],0x1A
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x90]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block84:
	lea edx,[esp+0x70]
	push edx
	mov byte ptr [esp+0x18C],0x1B
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x70]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block85:
	mov eax,dword ptr [esi+0x18]
	lea ecx,[esp+0xB0]
	push ecx
	lea edx,[esp+0x94]
	push edx
	push eax
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0x198],0x1C
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+0x1C]
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x19C],0x1D
	call _xbstr_t::_ctor_0
	lea edx,[ebx+ebp-2]
	push edx
	lea eax,[esp+0x84]
	push eax
	mov eax,dword ptr [esi+0xC]
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x1A8],0x1E
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+8]
	push ecx
	lea edx,[esp+0x58]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x1AC],0x1F
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x1A4],0x20
	test ecx,ecx
	je Block3

 Block86:
	mov byte ptr [esp+0x1A4],0x21
	call IWzFont::CalcTextWidth
	mov ecx,eax
	mov eax,dword ptr [edi+0xC]
	sub eax,dword ptr [esi]
	mov byte ptr [esp+0x19C],0x22
	cdq
	sub eax,edx
	sar eax,1
	add eax,ecx
	mov ecx,dword ptr [esp+0x28]
	push eax
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0x188],0x1D
	test eax,eax
	je Block88

 Block87:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block88:
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0x188],0x1C
	test eax,eax
	je Block90

 Block89:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block90:
	mov ebx,8
	mov byte ptr [esp+0x188],0x1B
	cmp word ptr [esp+0x70],bx
	jne Block93

 Block91:
	xor eax,eax
	mov word ptr [esp+0x70],ax
	mov eax,dword ptr [esp+0x78]
	test eax,eax
	je Block94

 Block92:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block94

 Block93:
	lea ecx,[esp+0x70]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block94:
	mov byte ptr [esp+0x188],0x1A
	cmp word ptr [esp+0x90],bx
	jne Block97

 Block95:
	mov eax,dword ptr [esp+0x98]
	xor edx,edx
	mov word ptr [esp+0x90],dx
	test eax,eax
	je Block98

 Block96:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block98

 Block97:
	lea eax,[esp+0x90]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block98:
	mov byte ptr [esp+0x188],2
	cmp word ptr [esp+0xB0],bx
	jne Block100

 Block99:
	mov eax,dword ptr [esp+0xB8]
	xor ecx,ecx
	mov word ptr [esp+0xB0],cx
	jmp Block138

 Block100:
	lea edx,[esp+0xB0]
	jmp Block141

 Block101:
	test ebp,ebp
	je Block106

 Block102:
	mov eax,3
	mov word ptr [esp+0xD0],ax
	mov dword ptr [esp+0xD8],ecx
	mov eax,dword ptr [edi+0xA04]
	mov edx,dword ptr [esp+0x18]
	lea ecx,[esp+0xD0]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push eax
	lea eax,[edx+ebx+2]
	push eax
	push 0xA
	mov byte ptr [esp+0x198],0x23
	call IWzCanvas::Copy
	cmp word ptr [esp+0xD0],8
	mov byte ptr [esp+0x188],2
	jne Block105

 Block103:
	mov eax,dword ptr [esp+0xD8]
	xor ecx,ecx
	mov word ptr [esp+0xD0],cx
	test eax,eax
	je Block106

 Block104:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block106

 Block105:
	lea edx,[esp+0xD0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block106:
	lea eax,[esp+0x110]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x110]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block107:
	lea edx,[esp+0xF0]
	push edx
	mov byte ptr [esp+0x18C],0x24
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0xF0]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block108:
	mov eax,dword ptr [esi+8]
	lea ecx,[esp+0x110]
	push ecx
	lea edx,[esp+0xF4]
	push edx
	push eax
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0x198],0x25
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+0xC]
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x19C],0x26
	call _xbstr_t::_ctor_0
	mov edx,dword ptr [esp+0x28]
	mov ecx,dword ptr [esp+0x24]
	neg ebp
	sbb ebp,ebp
	lea ebx,[edx+ebx-2]
	and ebp,6
	push ebx
	lea eax,[ebp+0xA]
	mov byte ptr [esp+0x19C],0x27
	push eax
	mov byte ptr [esp+0x1A0],0x26
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x188],0x25
	test eax,eax
	je Block110

 Block109:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block110:
	cmp word ptr [esp+0xF0],8
	mov byte ptr [esp+0x188],0x24
	jne Block113

 Block111:
	xor eax,eax
	mov word ptr [esp+0xF0],ax
	mov eax,dword ptr [esp+0xF8]
	test eax,eax
	je Block114

 Block112:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block114

 Block113:
	lea ecx,[esp+0xF0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block114:
	cmp word ptr [esp+0x110],8
	mov byte ptr [esp+0x188],2
	jne Block117

 Block115:
	mov eax,dword ptr [esp+0x118]
	xor edx,edx
	mov word ptr [esp+0x110],dx
	test eax,eax
	je Block118

 Block116:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block118

 Block117:
	lea eax,[esp+0x110]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block118:
	mov eax,dword ptr [esi+0x1C]
	test eax,eax
	je Block142

 Block119:
	cmp byte ptr [eax],0
	je Block142

 Block120:
	lea ecx,[esp+0x170]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x170]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block121:
	lea eax,[esp+0x150]
	push eax
	mov byte ptr [esp+0x18C],0x28
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x150]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block122:
	lea edx,[esp+0x130]
	push edx
	mov byte ptr [esp+0x18C],0x29
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x130]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block144

 Block123:
	mov eax,dword ptr [esi+0x18]
	lea ecx,[esp+0x170]
	push ecx
	lea edx,[esp+0x154]
	push edx
	push eax
	lea ecx,[esp+0x48]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0x198],0x2A
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+0x1C]
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x19C],0x2B
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esi+0xC]
	push ebx
	lea edx,[esp+0x144]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x1A8],0x2C
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esi+8]
	push eax
	lea ecx,[esp+0x54]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0x1AC],0x2D
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x1A4],0x2E
	test ecx,ecx
	je Block3

 Block124:
	mov byte ptr [esp+0x1A4],0x2F
	call IWzFont::CalcTextWidth
	mov ecx,dword ptr [esp+0x28]
	lea edx,[eax+ebp+0xA]
	push edx
	mov byte ptr [esp+0x1A0],0x30
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0x188],0x2B
	test eax,eax
	je Block126

 Block125:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block126:
	mov eax,dword ptr [esp+0x3C]
	mov byte ptr [esp+0x188],0x2A
	test eax,eax
	je Block128

 Block127:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block128:
	mov ebx,8
	mov byte ptr [esp+0x188],0x29
	cmp word ptr [esp+0x130],bx
	jne Block131

 Block129:
	xor eax,eax
	mov word ptr [esp+0x130],ax
	mov eax,dword ptr [esp+0x138]
	test eax,eax
	je Block132

 Block130:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block132

 Block131:
	lea ecx,[esp+0x130]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block132:
	mov byte ptr [esp+0x188],0x28
	cmp word ptr [esp+0x150],bx
	jne Block135

 Block133:
	mov eax,dword ptr [esp+0x158]
	xor edx,edx
	mov word ptr [esp+0x150],dx
	test eax,eax
	je Block136

 Block134:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block136

 Block135:
	lea eax,[esp+0x150]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block136:
	mov byte ptr [esp+0x188],2
	cmp word ptr [esp+0x170],bx
	jne Block140

 Block137:
	mov eax,dword ptr [esp+0x178]
	xor ecx,ecx
	mov word ptr [esp+0x170],cx

 Block138:
	test eax,eax
	je Block142

 Block139:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block142

 Block140:
	lea edx,[esp+0x170]

 Block141:
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block142:
	mov eax,dword ptr [esi+4]
	mov ecx,dword ptr [esp+0x18]
	lea edx,[ecx+eax+4]
	mov eax,dword ptr [esp+0x24]
	inc eax
	cmp eax,dword ptr [edi+0x20]
	mov dword ptr [esp+0x18],edx
	mov dword ptr [esp+0x24],eax
	jl Block17

 Block143:
	mov esi,dword ptr [esp+0x14]
	mov ebp,edx
	jmp Block13

 Block144:
	push eax
	call _com_issue_error
}
}
// CUIToolTip::DrawOptionInfo
_SUB_EXCEPTION_HANDLER(48BF80)
__SUB_CLASS_THIS(0048BF80, __thiscall, 5767,  CUIToolTip, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48BF80
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x64
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x78]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ebx,dword ptr [edi+0x4A4]
	cmp ebx,0xFFFFFFFF
	jne Block2

 Block1:
	xor eax,eax
	jmp Block43

 Block2:
	xor esi,esi
	cmp dword ptr [edi+0x4A8],esi
	je Block1

 Block3:
	mov eax,3
	add ebx,9
	mov word ptr [esp+0x28],ax
	mov dword ptr [esp+0x30],esi
	mov ecx,dword ptr [edi+0x10]
	mov dword ptr [esp+0x80],esi
	cmp ecx,esi
	jne Block5

 Block4:
	push 0x80004003
	call _com_issue_error

 Block5:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x1C]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x28],8
	mov byte ptr [esp+0x80],2
	jne Block8

 Block6:
	mov eax,dword ptr [esp+0x30]
	xor ecx,ecx
	mov word ptr [esp+0x28],cx
	cmp eax,esi
	je Block9

 Block7:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block9

 Block8:
	lea edx,[esp+0x28]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block9:
	mov ebp,dword ptr [esp+0x18]
	cmp ebp,esi
	jne Block11

 Block10:
	push 0x80004003
	call _com_issue_error

 Block11:
	mov eax,dword ptr [edi+0xC]
	mov ecx,dword ptr [edi+0x4A4]
	add ecx,dword ptr [esp+0x88]
	mov edx,dword ptr [ebp]
	push 0xFFFFFFFF
	push 1
	sub eax,0xC
	push eax
	mov eax,dword ptr [edx+0x8C]
	push ecx
	push 6
	push ebp
	call eax
	cmp eax,esi
	jge Block13

 Block12:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block13:
	cmp dword ptr [edi+0x4A8],esi
	mov dword ptr [esp+0x14],esi
	jle Block42

 Block14:
	lea esi,[edi+0x4B4]

 Block15:
	cmp dword ptr [esi+8],0x3E8
	jne Block27

 Block16:
	lea ecx,[esp+0x48]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x48]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block44

 Block17:
	lea eax,[esp+0x38]
	push eax
	mov byte ptr [esp+0x84],3
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x38]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block44

 Block18:
	mov ecx,dword ptr [esi]
	lea edx,[esp+0x48]
	push edx
	lea eax,[esp+0x3C]
	push eax
	push ecx
	lea edx,[esp+0x28]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x90],4
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+4]
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x94],5
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x98]
	lea ecx,[ebx+eax]
	mov eax,dword ptr [edi+0xC]
	sub eax,dword ptr [esi-8]
	push ecx
	cdq
	sub eax,edx
	sar eax,1
	mov byte ptr [esp+0x94],6
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0x98],5
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x80],4
	test eax,eax
	je Block20

 Block19:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block20:
	cmp word ptr [esp+0x38],8
	mov byte ptr [esp+0x80],3
	jne Block23

 Block21:
	mov eax,dword ptr [esp+0x40]
	xor ecx,ecx
	mov word ptr [esp+0x38],cx
	test eax,eax
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea edx,[esp+0x38]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block24:
	cmp word ptr [esp+0x48],8
	mov byte ptr [esp+0x80],2
	jne Block26

 Block25:
	xor eax,eax
	mov word ptr [esp+0x48],ax
	mov eax,dword ptr [esp+0x50]
	jmp Block37

 Block26:
	lea ecx,[esp+0x48]
	push ecx
	jmp Block40

 Block27:
	lea edx,[esp+0x68]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x68]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block44

 Block28:
	lea ecx,[esp+0x58]
	push ecx
	mov byte ptr [esp+0x84],7
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block44

 Block29:
	mov edx,dword ptr [esi]
	lea eax,[esp+0x68]
	push eax
	lea ecx,[esp+0x5C]
	push ecx
	push edx
	lea eax,[esp+0x2C]
	push eax
	mov ecx,edi
	mov byte ptr [esp+0x90],8
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esi+4]
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x94],9
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x98]
	lea edx,[ebx+ecx]
	push edx
	mov byte ptr [esp+0x94],0xA
	push 0xA
	mov ecx,ebp
	mov byte ptr [esp+0x98],9
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x80],8
	test eax,eax
	je Block31

 Block30:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block31:
	cmp word ptr [esp+0x58],8
	mov byte ptr [esp+0x80],7
	jne Block34

 Block32:
	xor eax,eax
	mov word ptr [esp+0x58],ax
	mov eax,dword ptr [esp+0x60]
	test eax,eax
	je Block35

 Block33:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block35

 Block34:
	lea ecx,[esp+0x58]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block35:
	cmp word ptr [esp+0x68],8
	mov byte ptr [esp+0x80],2
	jne Block39

 Block36:
	mov eax,dword ptr [esp+0x70]
	xor edx,edx
	mov word ptr [esp+0x68],dx

 Block37:
	test eax,eax
	je Block41

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block41

 Block39:
	lea eax,[esp+0x68]
	push eax

 Block40:
	call dword ptr [ZImports::_VariantClear]

 Block41:
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [esi-4]
	inc eax
	add esi,0x24
	cmp eax,dword ptr [edi+0x4A8]
	lea ebx,[ebx+ecx+4]
	mov dword ptr [esp+0x14],eax
	jl Block15

 Block42:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+8]
	push ebp
	mov dword ptr [esp+0x84],0xFFFFFFFF
	call eax
	mov eax,ebx

 Block43:
	mov ecx,dword ptr [esp+0x78]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x70
	ret 4

 Block44:
	push eax
	call _com_issue_error
}
}
// CUIToolTip::SetToolTip_MacroSysSkill
_SUB_EXCEPTION_HANDLER(49E1F0)
__SUB_CLASS_THIS(0049E1F0, __thiscall, 5727,  CUIToolTip, void, long, long, long) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_49E1F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x4C
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	cmp dword ptr [esi+0x10],0
	mov edi,dword ptr [ebp+0xC]
	mov ebx,dword ptr [ebp+8]
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	cmp dword ptr [esi+0x18],ebx
	jne Block3

 Block2:
	cmp dword ptr [esi+0x1C],edi
	je Block45

 Block3:
	push 0x7D
	push 0x8E
	push 0x122
	push 0xB
	call CUIToolTip::SetBasicInfo
	xor eax,eax
	mov dword ptr [ebp-0x58],eax
	push eax
	push 0xCC0E395A
	push eax
	push eax
	push 1
	push edi
	mov dword ptr [ebp-4],eax
	push ebx
	lea eax,[ebp-0x20]
	push eax
	mov ecx,esi
	call CUIToolTip::MakeLayer
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x18],esp
	push 1
	push ecx
	mov ecx,esi
	mov byte ptr [ebp-4],1
	call CUIToolTip::GetFontByType
	mov edi,dword ptr [ebp+0x10]
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	push edi
	lea edx,[ebp-0x14]
	push edx
	mov byte ptr [ebp-4],2
	call CMacroSysMan::GetMacroName
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],3
	push eax
	push 0xA
	mov ecx,esi
	mov byte ptr [ebp-4],4
	call CUIToolTip::DrawTextCenter
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	push 1
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x18],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	lea ecx,[ebp-0x14]
	push 0x1101
	push ecx
	mov byte ptr [ebp-4],5
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],6
	mov edx,dword ptr [esi+0xC]
	push eax
	push 0x1B
	sub edx,0x14
	push edx
	push 0xF
	mov ecx,esi
	mov byte ptr [ebp-4],7
	call CUIToolTip::DrawTextSepartedLine
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov dword ptr [ebp-0x14],0
	lea eax,[ebp-0x1C]
	push 0x1069
	push eax
	mov byte ptr [ebp-4],8
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea ecx,[ebp-0x14]
	push ecx
	mov byte ptr [ebp-4],9
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0x1C]
	add esp,0xC
	mov byte ptr [ebp-4],8
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x44]
	push edx
	call edi
	lea eax,[ebp-0x44]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block11

 Block10:
	push eax
	call _com_issue_error

 Block11:
	lea ecx,[ebp-0x34]
	push ecx
	mov byte ptr [ebp-4],0xA
	call edi
	lea edx,[ebp-0x34]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block13

 Block12:
	push eax
	call _com_issue_error

 Block13:
	mov ebx,dword ptr [ebp-0x14]
	push 0
	push 0
	push 0xFFFFFFFF
	push ebx
	push 0
	push 0
	mov byte ptr [ebp-4],0xB
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edi,esp
	push 0
	push 0
	lea eax,[ebp-0x44]
	push eax
	lea ecx,[ebp-0x34]
	push ecx
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push ebx
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x18],esp
	mov ecx,esp
	push edi
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0xC
	jne Block15

 Block14:
	push 0x80004003
	call _com_issue_error

 Block15:
	lea edx,[ebp-0x54]
	mov byte ptr [ebp-4],0xB
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xD
	call Ztl_variant_t::GetUnknown
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x18],esp
	push eax
	mov dword ptr [ecx],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block18

 Block16:
	cmp eax,0x80004002
	je Block18

 Block17:
	push eax
	call _com_issue_error

 Block18:
	push 0x39
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawCanvasIcon
	mov edi,dword ptr [ZImports::_VariantClear]
	mov ebx,8
	mov byte ptr [ebp-4],0xB
	cmp word ptr [ebp-0x54],bx
	jne Block21

 Block19:
	xor eax,eax
	mov word ptr [ebp-0x54],ax
	mov eax,dword ptr [ebp-0x4C]
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea ecx,[ebp-0x54]
	push ecx
	call edi

 Block22:
	mov byte ptr [ebp-4],0xA
	cmp word ptr [ebp-0x34],bx
	jne Block25

 Block23:
	mov eax,dword ptr [ebp-0x2C]
	xor edx,edx
	mov word ptr [ebp-0x34],dx
	test eax,eax
	je Block26

 Block24:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block26

 Block25:
	lea eax,[ebp-0x34]
	push eax
	call edi

 Block26:
	mov byte ptr [ebp-4],bl
	cmp word ptr [ebp-0x44],bx
	jne Block29

 Block27:
	mov eax,dword ptr [ebp-0x3C]
	xor ecx,ecx
	mov word ptr [ebp-0x44],cx
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea edx,[ebp-0x44]
	push edx
	call edi

 Block30:
	xor edi,edi
	mov dword ptr [ebp-0x1C],edi
	mov byte ptr [ebp-4],0xE
	mov bl,0x10

 Block31:
	mov eax,dword ptr [ebp+0x10]
	mov ecx,dword ptr [TSingleton<CMacroSysMan>::ms_pInstance]
	push edi
	push eax
	call CMacroSysMan::GetMacro
	test eax,eax
	je Block36

 Block32:
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push eax
	call CSkillInfo::GetSkill
	add eax,4
	push eax
	lea ecx,[ebp-0x18]
	push ecx
	lea ecx,[ebp-0x1C]
	call ZXString<char>::op_add_1
	push offset _S_N
	lea edx,[ebp-0x24]
	push edx
	mov ecx,eax
	mov byte ptr [ebp-4],0xF
	call ZXString<char>::op_add_0
	push eax
	lea ecx,[ebp-0x1C]
	mov byte ptr [ebp-4],bl
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp-0x24]
	mov byte ptr [ebp-4],0xF
	test eax,eax
	je Block34

 Block33:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block34:
	mov eax,dword ptr [ebp-0x18]
	mov byte ptr [ebp-4],0xE
	test eax,eax
	je Block36

 Block35:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block36:
	inc edi
	cmp edi,3
	jl Block31

 Block37:
	mov edi,dword ptr [ebp-0x1C]
	test edi,edi
	je Block39

 Block38:
	push 1
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x18],esp
	push 0xD
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esi+0xC]
	push edi
	push 0x39
	sub ecx,0x14
	push ecx
	push 0x5C
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine

 Block39:
	mov byte ptr [ebp-4],8
	test edi,edi
	je Block41

 Block40:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block41:
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],1
	test eax,eax
	je Block43

 Block42:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block43:
	mov eax,dword ptr [ebp-0x20]
	mov byte ptr [ebp-4],0
	test eax,eax
	je Block45

 Block44:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block45:
	lea esp,[ebp-0x68]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 0xC
}
}
// CToolTipHelper::TTH_INFO::operator=
__SUB_CLASS_THIS(00483330, __thiscall, 6233,  CToolTipHelper::TTH_INFO, CToolTipHelper::TTH_INFO&, const CToolTipHelper::TTH_INFO&) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	mov edi,dword ptr [esp+0xC]
	mov eax,dword ptr [edi]
	mov dword ptr [esi],eax
	mov ecx,dword ptr [edi+4]
	mov dword ptr [esi+4],ecx
	mov edx,dword ptr [edi+8]
	mov dword ptr [esi+8],edx
	mov eax,dword ptr [edi+0xC]
	lea ecx,[edi+0x10]
	push ecx
	lea ecx,[esi+0x10]
	mov dword ptr [esi+0xC],eax
	call ZXString<char>::op_assign
	add edi,0x14
	push edi
	lea ecx,[esi+0x14]
	call ZXString<char>::op_assign
	pop edi
	mov eax,esi
	pop esi
	ret 4
}
}
// CUIToolTip::DrawCanvasIcon
_SUB_EXCEPTION_HANDLER(482200)
__SUB_CLASS_THIS(00482200, __thiscall, 5775,  CUIToolTip, void, long, long, NakedParam<_x_com_ptr<IWzCanvas>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_482200
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x3C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x50]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,dword ptr [esp+0x68]
	xor ebp,ebp
	cmp eax,ebp
	sete cl
	mov dword ptr [esp+0x58],ebp
	test cl,cl
	je Block2

 Block1:
	cmp eax,ebp
	jmp Block47

 Block2:
	mov eax,3
	mov word ptr [esp+0x30],ax
	mov dword ptr [esp+0x38],ebp
	mov ecx,dword ptr [ebx+0x10]
	mov byte ptr [esp+0x58],1
	cmp ecx,ebp
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x20]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x58],2
	cmp esi,ebp
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	mov edx,dword ptr [esp+0x64]
	mov edi,dword ptr [esp+0x60]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x8C]
	push 0xA0FFFFFF
	push 0x44
	push 0x44
	push edx
	push edi
	push esi
	call eax
	cmp eax,ebp
	jge Block8

 Block7:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block8:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x58],1
	cmp eax,ebp
	je Block10

 Block9:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block10:
	cmp word ptr [esp+0x30],8
	mov byte ptr [esp+0x58],0
	jne Block13

 Block11:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	cmp eax,ebp
	je Block14

 Block12:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block14

 Block13:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block14:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block16

 Block15:
	push eax
	call _com_issue_error

 Block16:
	mov ecx,3
	mov word ptr [esp+0x30],cx
	mov dword ptr [esp+0x38],ebp
	mov ecx,dword ptr [ebx+0x10]
	mov byte ptr [esp+0x58],4
	cmp ecx,ebp
	jne Block18

 Block17:
	push 0x80004003
	call _com_issue_error

 Block18:
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x30]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov dword ptr [esp+0x20],eax
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0x58],5
	cmp eax,ebp
	jne Block20

 Block19:
	push 0x80004003
	call _com_issue_error

 Block20:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x60]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0x48]
	mov dword ptr [esp+0x68],ebp
	call eax
	cmp eax,ebp
	jge Block22

 Block21:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block22:
	mov eax,dword ptr [esp+0x68]
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr [esp+0x24],ecx
	cmp eax,ebp
	jne Block24

 Block23:
	push 0x80004003
	call _com_issue_error

 Block24:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x40]
	lea ecx,[esp+0x14]
	push ecx
	push eax
	mov esi,eax
	mov dword ptr [esp+0x1C],ebp
	call edx
	cmp eax,ebp
	jge Block26

 Block25:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block26:
	mov eax,dword ptr [esp+0x68]
	mov ebx,dword ptr [esp+0x14]
	mov dword ptr [esp+0x28],eax
	cmp eax,ebp
	jne Block28

 Block27:
	push 0x80004003
	call _com_issue_error

 Block28:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x18]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0x74]
	mov dword ptr [esp+0x20],ebp
	call eax
	cmp eax,ebp
	jge Block30

 Block29:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block30:
	mov eax,dword ptr [esp+0x68]
	mov esi,dword ptr [esp+0x18]
	cmp eax,ebp
	jne Block32

 Block31:
	push 0x80004003
	call _com_issue_error

 Block32:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x1C]
	push edx
	mov ebp,eax
	push eax
	mov eax,dword ptr [ecx+0x6C]
	mov dword ptr [esp+0x24],0
	call eax
	test eax,eax
	jge Block34

 Block33:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block34:
	mov ecx,dword ptr [esp+0x20]
	mov ecx,dword ptr [ecx]
	test ecx,ecx
	jne Block36

 Block35:
	push 0x80004003
	call _com_issue_error

 Block36:
	mov eax,dword ptr [esp+0x24]
	lea edx,[esp+0x40]
	push edx
	push 0
	push 0
	push 0
	lea edx,[eax+eax]
	push 0
	push edx
	mov edx,dword ptr [esp+0x40]
	lea eax,[ebx+ebx]
	push eax
	push 0xFF
	push edx
	mov edx,dword ptr [esp+0x88]
	mov eax,0x21
	sub eax,esi
	lea eax,[edx+eax*2]
	mov edx,dword ptr [esp+0x40]
	push eax
	lea eax,[edx+edx]
	sub edi,eax
	add edi,2
	push edi
	call IWzCanvas::CopyEx
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x58],4
	test eax,eax
	je Block38

 Block37:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block38:
	mov esi,8
	mov byte ptr [esp+0x58],3
	cmp word ptr [esp+0x30],si
	jne Block41

 Block39:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block42:
	mov byte ptr [esp+0x58],0
	cmp word ptr [esp+0x40],si
	jne Block45

 Block43:
	mov eax,dword ptr [esp+0x48]
	xor edx,edx
	mov word ptr [esp+0x40],dx
	test eax,eax
	je Block46

 Block44:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block46

 Block45:
	lea eax,[esp+0x40]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block46:
	mov eax,dword ptr [esp+0x68]
	test eax,eax

 Block47:
	mov dword ptr [esp+0x58],0xFFFFFFFF
	je Block49

 Block48:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block49:
	mov ecx,dword ptr [esp+0x50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 0xC
}
}
// CUIToolTip::DrawTextEquip_Req
_SUB_EXCEPTION_HANDLER(48D710)
__SUB_CLASS_THIS(0048D710, __thiscall, 5781,  CUIToolTip, void, long, long, long, long, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48D710
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x3C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x50]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x14],esi
	xor edi,edi
	cmp dword ptr [esp+0x74],edi
	jne Block2

 Block1:
	mov dword ptr [esp+0x74],0x5E

 Block2:
	mov eax,3
	mov word ptr [esp+0x30],ax
	mov dword ptr [esp+0x38],edi
	mov ecx,dword ptr [esi+0x10]
	mov dword ptr [esp+0x58],edi
	cmp ecx,edi
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x1C]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x30],8
	mov byte ptr [esp+0x58],2
	jne Block7

 Block5:
	mov eax,dword ptr [esp+0x38]
	xor ecx,ecx
	mov word ptr [esp+0x30],cx
	cmp eax,edi
	je Block8

 Block6:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block8

 Block7:
	lea edx,[esp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block8:
	mov eax,dword ptr [esp+0x60]
	cmp eax,edi
	je Block11

 Block9:
	cmp dword ptr [esp+0x64],eax
	jge Block11

 Block10:
	mov edx,1
	jmp Block12

 Block11:
	xor edx,edx

 Block12:
	mov eax,3
	mov ecx,0xFF
	mov dword ptr [esp+0x64],edx
	mov word ptr [esp+0x20],ax
	mov dword ptr [esp+0x28],ecx
	mov ebp,dword ptr [esp+0x18]
	mov byte ptr [esp+0x58],al
	mov eax,dword ptr [esp+0x68]
	lea edx,[edx+eax*2+0x266]
	mov edx,dword ptr [esi+edx*4]
	cmp ebp,edi
	jne Block14

 Block13:
	push 0x80004003
	call _com_issue_error

 Block14:
	mov edi,dword ptr [esp+0x20]
	mov ebx,dword ptr [esp+0x74]
	lea esi,[eax+eax*2]
	mov eax,dword ptr [esp+0x6C]
	add esi,esi
	sub esp,0x10
	add esi,esi
	lea eax,[esi+eax+0x20]
	mov dword ptr [esp+0x78],eax
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [esp+0x34]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [esp+0x78]
	push edx
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x40]
	push edi
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x80]
	push ebx
	push ebp
	call edx
	test eax,eax
	jge Block16

 Block15:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block16:
	cmp word ptr [esp+0x20],8
	mov byte ptr [esp+0x58],2
	jne Block19

 Block17:
	xor eax,eax
	mov word ptr [esp+0x20],ax
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block20

 Block18:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block20

 Block19:
	lea ecx,[esp+0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block20:
	cmp dword ptr [esp+0x70],0
	je Block41

 Block21:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x80],esp
	push 0x1AC4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [eax+0x9C8]
	mov byte ptr [esp+0x64],4
	test ecx,ecx
	jne Block23

 Block22:
	push 0x80004003
	call _com_issue_error

 Block23:
	lea edx,[esp+0x4C]
	push edx
	mov byte ptr [esp+0x68],2
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0x60],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x78]
	mov dword ptr [esp+0x78],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block26

 Block24:
	cmp eax,0x80004002
	je Block26

 Block25:
	push eax
	call _com_issue_error

 Block26:
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0x58],7
	jne Block29

 Block27:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block30:
	mov edx,3
	mov word ptr [esp+0x20],dx
	mov dword ptr [esp+0x28],0xFF
	mov edi,dword ptr [esp+0x74]
	mov byte ptr [esp+0x58],8
	test edi,edi
	jne Block32

 Block31:
	push 0x80004003
	call _com_issue_error

 Block32:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x74]
	lea ecx,[esp+0x60]
	push ecx
	push edi
	mov dword ptr [esp+0x68],0
	call edx
	test eax,eax
	jge Block34

 Block33:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block34:
	mov eax,dword ptr [esp+0x60]
	mov ecx,dword ptr [edi]
	lea edx,[esp+0x64]
	push edx
	mov dword ptr [esp+0x6C],eax
	mov eax,dword ptr [ecx+0x6C]
	push edi
	mov dword ptr [esp+0x6C],0
	call eax
	test eax,eax
	jge Block36

 Block35:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block36:
	sub esi,dword ptr [esp+0x68]
	mov edx,dword ptr [esp+0x6C]
	sub ebx,dword ptr [esp+0x64]
	lea ecx,[esp+0x20]
	push ecx
	push edi
	lea eax,[esi+edx+0x20]
	push eax
	add ebx,0x32
	push ebx
	mov ecx,ebp
	call IWzCanvas::Copy
	cmp word ptr [esp+0x20],8
	mov byte ptr [esp+0x58],7
	jne Block39

 Block37:
	mov eax,dword ptr [esp+0x28]
	xor ecx,ecx
	mov word ptr [esp+0x20],cx
	test eax,eax
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov byte ptr [esp+0x5C],2
	call ecx
	jmp Block47

 Block39:
	lea edx,[esp+0x20]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block40:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov byte ptr [esp+0x5C],2
	call ecx
	jmp Block47

 Block41:
	cmp dword ptr [esp+0x64],0
	mov eax,dword ptr [esp+0x14]
	jne Block43

 Block42:
	add eax,0x9C8
	jmp Block44

 Block43:
	add eax,0x9CC

 Block44:
	mov eax,dword ptr [eax]
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x7C],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block46

 Block45:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block46:
	mov ecx,dword ptr [esp+0x68]
	push ecx
	push edi
	add ebx,0x32
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [eax],ebp
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+4]
	mov dword ptr [esp+0x8C],esp
	push ebp
	call eax
	call draw_number_by_image
	add esp,0x18

 Block47:
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx+8]
	push ebp
	mov dword ptr [esp+0x5C],0xFFFFFFFF
	call edx
	mov ecx,dword ptr [esp+0x50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 0x18
}
}
// CUIToolTip::DrawDiscount_Info
_SUB_EXCEPTION_HANDLER(48DEC0)
__SUB_CLASS_THIS(0048DEC0, __thiscall, 5727,  CUIToolTip, void, long, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48DEC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x54
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x68]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x20],esi
	mov eax,3
	xor edi,edi
	mov word ptr [esp+0x38],ax
	mov dword ptr [esp+0x40],edi
	mov ecx,dword ptr [esi+0x10]
	mov dword ptr [esp+0x70],edi
	cmp ecx,edi
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[esp+0x38]
	push edx
	lea eax,[esp+0x20]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x38],8
	mov byte ptr [esp+0x70],2
	jne Block5

 Block3:
	mov eax,dword ptr [esp+0x40]
	xor ecx,ecx
	mov word ptr [esp+0x38],cx
	cmp eax,edi
	je Block6

 Block4:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block6

 Block5:
	lea edx,[esp+0x38]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block6:
	cmp dword ptr [esi+0x4A4],0xFFFFFFFF
	mov ebp,dword ptr [esp+0x1C]
	jne Block12

 Block7:
	cmp ebp,edi
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	mov eax,dword ptr [esi+0xC]
	mov edx,dword ptr [esp+0x78]
	mov ecx,dword ptr [ebp]
	push 0xFFFFFFFF
	push 1
	sub eax,0xC
	push eax
	mov eax,dword ptr [ecx+0x8C]
	add edx,0xFFFFFFFC
	push edx
	push 6
	push ebp
	call eax
	cmp eax,edi
	jge Block11

 Block10:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block11:
	add dword ptr [esp+0x78],4

 Block12:
	lea ecx,[esp+0x18]
	push edi
	push ecx
	call get_basic_font
	lea edx,[esp+0x34]
	push 0x49
	push edx
	mov byte ptr [esp+0x80],3
	call get_basic_font
	add esp,0x10
	lea eax,[esp+0x30]
	push 0xC5B
	push eax
	mov byte ptr [esp+0x78],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x24],edi
	mov ecx,dword ptr [esp+0x7C]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x2C]
	push edx
	mov byte ptr [esp+0x7C],6
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x18],edi
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x70],8
	cmp eax,edi
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x70],9
	cmp eax,edi
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	lea eax,[esp+0x48]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x48]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block18

 Block17:
	push eax
	call _com_issue_error

 Block18:
	mov esi,dword ptr [esp+0x14]
	lea edx,[esp+0x48]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0xA
	push esi
	mov byte ptr [esp+0x7C],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x20]
	mov byte ptr [esp+0x78],0xB
	cmp ecx,edi
	jne Block20

 Block19:
	push 0x80004003
	call _com_issue_error

 Block20:
	mov byte ptr [esp+0x78],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x48],8
	mov edi,eax
	mov byte ptr [esp+0x70],9
	jne Block23

 Block21:
	xor eax,eax
	mov word ptr [esp+0x48],ax
	mov eax,dword ptr [esp+0x50]
	test eax,eax
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea ecx,[esp+0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block24:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x58]
	push edx
	call ebx
	lea eax,[esp+0x58]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block26

 Block25:
	push eax
	call _com_issue_error

 Block26:
	lea ecx,[esp+0x48]
	push ecx
	mov byte ptr [esp+0x74],0xC
	call ebx
	lea edx,[esp+0x48]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block28

 Block27:
	push eax
	call _com_issue_error

 Block28:
	mov edx,dword ptr [esp+0x18]
	lea eax,[esp+0x58]
	push eax
	lea ecx,[esp+0x4C]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0xD
	push esi
	mov byte ptr [esp+0x84],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x80],0xE
	test ebp,ebp
	jne Block30

 Block29:
	push 0x80004003
	call _com_issue_error

 Block30:
	mov eax,dword ptr [esp+0x88]
	mov ecx,dword ptr [esp+0x30]
	push eax
	mov eax,dword ptr [ecx+0xC]
	sub eax,edi
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0x88],bl
	call IWzCanvas::DrawTextA
	mov esi,8
	mov byte ptr [esp+0x70],0xC
	cmp word ptr [esp+0x48],si
	jne Block33

 Block31:
	mov eax,dword ptr [esp+0x50]
	xor edx,edx
	mov word ptr [esp+0x48],dx
	test eax,eax
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea eax,[esp+0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block34:
	mov byte ptr [esp+0x70],9
	cmp word ptr [esp+0x58],si
	jne Block37

 Block35:
	mov eax,dword ptr [esp+0x60]
	xor ecx,ecx
	mov word ptr [esp+0x58],cx
	test eax,eax
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block38

 Block37:
	lea edx,[esp+0x58]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block38:
	lea eax,[esp+0x28]
	push 0xC5C
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x74],0xF
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x70],9
	test eax,eax
	je Block40

 Block39:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block40:
	lea ecx,[esp+0x58]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block42

 Block41:
	push eax
	call _com_issue_error

 Block42:
	mov edx,dword ptr [esp+0x14]
	lea eax,[esp+0x58]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x10
	push edx
	mov byte ptr [esp+0x7C],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x20]
	mov byte ptr [esp+0x78],0x11
	test ecx,ecx
	jne Block44

 Block43:
	push 0x80004003
	call _com_issue_error

 Block44:
	mov byte ptr [esp+0x78],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x58],8
	mov ebp,eax
	mov byte ptr [esp+0x70],9
	jne Block47

 Block45:
	xor eax,eax
	mov word ptr [esp+0x58],ax
	mov eax,dword ptr [esp+0x60]
	test eax,eax
	je Block48

 Block46:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block48

 Block47:
	lea ecx,[esp+0x58]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block48:
	lea edx,[esp+0x34]
	push 0x7BD
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	xor ebx,ebx
	mov dword ptr [esp+0x28],ebx
	mov ecx,dword ptr [eax]
	mov edi,dword ptr [esp+0x7C]
	mov eax,edi
	sub eax,dword ptr [esp+0x80]
	mov byte ptr [esp+0x70],0x13
	imul eax,0x64
	cdq
	idiv edi
	push eax
	push ecx
	lea eax,[esp+0x30]
	push eax
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x80]
	mov dword ptr [esp+0x80],ebx
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x70],0x15
	cmp eax,ebx
	je Block50

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block50:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0x70],0x16
	cmp eax,ebx
	je Block52

 Block51:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block52:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x58]
	push ecx
	call esi
	lea edx,[esp+0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block54

 Block53:
	push eax
	call _com_issue_error

 Block54:
	mov edx,dword ptr [esp+0x7C]
	lea eax,[esp+0x58]
	push eax
	push ecx
	mov dword ptr [esp+0x88],esp
	mov ecx,esp
	mov bl,0x17
	push edx
	mov byte ptr [esp+0x7C],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x20]
	mov byte ptr [esp+0x78],0x18
	test ecx,ecx
	jne Block56

 Block55:
	push 0x80004003
	call _com_issue_error

 Block56:
	mov byte ptr [esp+0x78],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x58],8
	mov edi,eax
	mov byte ptr [esp+0x70],0x16
	jne Block59

 Block57:
	xor eax,eax
	mov word ptr [esp+0x58],ax
	mov eax,dword ptr [esp+0x60]
	test eax,eax
	je Block60

 Block58:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block60

 Block59:
	lea ecx,[esp+0x58]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block60:
	lea edx,[esp+0x48]
	push edx
	call esi
	lea eax,[esp+0x48]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block62

 Block61:
	push eax
	call _com_issue_error

 Block62:
	lea ecx,[esp+0x58]
	push ecx
	mov byte ptr [esp+0x74],0x19
	call esi
	lea edx,[esp+0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block64

 Block63:
	push eax
	call _com_issue_error

 Block64:
	mov edx,dword ptr [esp+0x18]
	lea eax,[esp+0x48]
	push eax
	mov eax,dword ptr [esp+0x18]
	lea ecx,[esp+0x5C]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x90],esp
	mov ecx,esp
	mov bl,0x1A
	push eax
	mov byte ptr [esp+0x84],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x30]
	mov eax,dword ptr [ecx+0xC]
	mov esi,dword ptr [esp+0x88]
	mov ecx,dword ptr [esp+0x2C]
	sub eax,edi
	sub eax,ebp
	cdq
	sub eax,edx
	add esi,0x10
	push esi
	sar eax,1
	mov byte ptr [esp+0x84],0x1B
	push eax
	mov byte ptr [esp+0x88],bl
	call IWzCanvas::DrawTextA
	mov ebx,8
	mov byte ptr [esp+0x70],0x19
	cmp word ptr [esp+0x58],bx
	jne Block67

 Block65:
	mov eax,dword ptr [esp+0x60]
	xor edx,edx
	mov word ptr [esp+0x58],dx
	test eax,eax
	je Block68

 Block66:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block68

 Block67:
	lea eax,[esp+0x58]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block68:
	mov byte ptr [esp+0x70],0x16
	cmp word ptr [esp+0x48],bx
	jne Block71

 Block69:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	test eax,eax
	je Block72

 Block70:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block72

 Block71:
	lea edx,[esp+0x48]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block72:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x48]
	push eax
	call ebx
	lea ecx,[esp+0x48]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block74

 Block73:
	push eax
	call _com_issue_error

 Block74:
	lea edx,[esp+0x58]
	push edx
	mov byte ptr [esp+0x74],0x1C
	call ebx
	lea eax,[esp+0x58]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block76

 Block75:
	push eax
	call _com_issue_error

 Block76:
	mov eax,dword ptr [esp+0x2C]
	lea ecx,[esp+0x48]
	push ecx
	lea edx,[esp+0x5C]
	push edx
	mov edx,dword ptr [esp+0x84]
	push eax
	push ecx
	mov dword ptr [esp+0x88],esp
	mov ecx,esp
	mov bl,0x1D
	push edx
	mov byte ptr [esp+0x84],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x30]
	mov eax,ebp
	sub eax,edi
	add eax,dword ptr [ecx+0xC]
	mov edi,dword ptr [esp+0x2C]
	cdq
	sub eax,edx
	push esi
	sar eax,1
	mov byte ptr [esp+0x84],0x1E
	push eax
	mov ecx,edi
	mov byte ptr [esp+0x88],bl
	call IWzCanvas::DrawTextA
	mov esi,8
	mov byte ptr [esp+0x70],0x1C
	cmp word ptr [esp+0x58],si
	jne Block79

 Block77:
	mov eax,dword ptr [esp+0x60]
	xor edx,edx
	mov word ptr [esp+0x58],dx
	test eax,eax
	je Block80

 Block78:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block80

 Block79:
	lea eax,[esp+0x58]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block80:
	mov byte ptr [esp+0x70],0x16
	cmp word ptr [esp+0x48],si
	jne Block83

 Block81:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	test eax,eax
	je Block84

 Block82:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block84

 Block83:
	lea edx,[esp+0x48]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block84:
	mov eax,dword ptr [esp+0x7C]
	mov byte ptr [esp+0x70],9
	test eax,eax
	je Block86

 Block85:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block86:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x70],4
	test eax,eax
	je Block88

 Block87:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block88:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x70],3
	test eax,eax
	je Block90

 Block89:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block90:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x70],2
	test eax,eax
	je Block92

 Block91:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block92:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov dword ptr [esp+0x74],0xFFFFFFFF
	call ecx
	mov ecx,dword ptr [esp+0x68]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x60
	ret 0xC
}
}
// CUIToolTip::SetToolTip_Bundle
_SUB_EXCEPTION_HANDLER(498F70)
__SUB_CLASS_THIS(00498F70, __thiscall, 5717,  CUIToolTip, void, long, long, long, _FILETIME*, int32_t, long, const char*, const char*, long, long, CS_LIMITGOODS*, GW_ItemSlotEquip*, int32_t, long, long, long, _FILETIME*, const char*, NakedParam<ZRef<ITCITEM>>, CUIToolTip::eITCToolTip) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_498F70
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC0
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xD4]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x54],ecx
	xor ebx,ebx
	xor edi,edi
	mov dword ptr [esp+0x14],ebx
	cmp dword ptr [ecx+0x10],edi
	mov dword ptr [esp+0xDC],edi
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov eax,dword ptr [ecx+0x18]
	cmp eax,dword ptr [esp+0xE4]
	jne Block3

 Block2:
	mov ecx,dword ptr [ecx+0x1C]
	cmp ecx,dword ptr [esp+0xE8]
	je Block147

 Block3:
	mov dword ptr [esp+0x28],edi
	mov dword ptr [esp+0x68],edi
	mov esi,dword ptr [esp+0xEC]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	mov byte ptr [esp+0xE0],2
	call CItemInfo::IsOnlyItem
	test eax,eax
	je Block6

 Block4:
	lea edx,[esp+0x18]
	push 0x2C5
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0xE0],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xDC],2
	cmp eax,edi
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block6:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	call CItemInfo::IsQuestItem
	test eax,eax
	je Block24

 Block7:
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block9

 Block8:
	cmp byte ptr [eax],0
	jne Block10

 Block9:
	xor ebp,ebp
	mov dword ptr [esp+0x1C],ebp
	lea esi,[esp+0x1C]
	mov byte ptr [esp+0xDC],4
	lea ebx,[ebp+1]
	jmp Block11

 Block10:
	push edi
	push 2
	lea ecx,[esp+0x28]
	mov dword ptr [esp+0x28],edi
	call ZXString<char>::GetBuffer
	mov cx,word ptr [_S___20]
	mov word ptr [eax],cx
	push 2
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x1C]
	lea esi,[esp+0x20]
	mov dword ptr [esp+0xDC],5
	mov ebx,2

 Block11:
	lea edx,[esp+0x24]
	push 0x2C6
	push edx
	mov dword ptr [esp+0x1C],ebx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov ecx,esi
	mov dword ptr [esp+0xE4],6
	call ZXString<char>::op_add_1
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xDC],7
	cmp eax,edi
	je Block13

 Block12:
	mov ecx,dword ptr [eax-4]
	jmp Block14

 Block13:
	xor ecx,ecx

 Block14:
	push ecx
	push eax
	lea ecx,[esp+0x30]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xDC],6
	cmp eax,edi
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xDC],5
	cmp eax,edi
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov dword ptr [esp+0xDC],4
	test bl,2
	je Block21

 Block19:
	mov eax,dword ptr [esp+0x20]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x14],ebx
	cmp eax,edi
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block21:
	mov dword ptr [esp+0xDC],2
	test bl,1
	je Block24

 Block22:
	and ebx,0xFFFFFFFE
	mov dword ptr [esp+0x14],ebx
	cmp ebp,edi
	je Block24

 Block23:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block24:
	mov ecx,dword ptr [esp+0xEC]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::IsPartyQuestItem
	test eax,eax
	je Block42

 Block25:
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block27

 Block26:
	cmp byte ptr [eax],0
	jne Block28

 Block27:
	xor ebp,ebp
	mov dword ptr [esp+0x1C],ebp
	lea esi,[esp+0x1C]
	mov byte ptr [esp+0xDC],8
	or ebx,4
	jmp Block29

 Block28:
	push edi
	push 2
	lea ecx,[esp+0x28]
	mov dword ptr [esp+0x28],edi
	call ZXString<char>::GetBuffer
	mov dx,word ptr [_S___20]
	push 2
	lea ecx,[esp+0x24]
	mov word ptr [eax],dx
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x1C]
	lea esi,[esp+0x20]
	mov dword ptr [esp+0xDC],9
	or ebx,8

 Block29:
	lea eax,[esp+0x24]
	push 0x2C7
	push eax
	mov dword ptr [esp+0x1C],ebx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0xE4],0xA
	call ZXString<char>::op_add_1
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xDC],0xB
	cmp eax,edi
	je Block31

 Block30:
	mov ecx,dword ptr [eax-4]
	jmp Block32

 Block31:
	xor ecx,ecx

 Block32:
	push ecx
	push eax
	lea ecx,[esp+0x30]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xDC],0xA
	cmp eax,edi
	je Block34

 Block33:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block34:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xDC],9
	cmp eax,edi
	je Block36

 Block35:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block36:
	mov dword ptr [esp+0xDC],8
	test bl,8
	je Block39

 Block37:
	mov eax,dword ptr [esp+0x20]
	and ebx,0xFFFFFFF7
	mov dword ptr [esp+0x14],ebx
	cmp eax,edi
	je Block39

 Block38:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block39:
	mov dword ptr [esp+0xDC],2
	test bl,4
	je Block42

 Block40:
	and ebx,0xFFFFFFFB
	mov dword ptr [esp+0x14],ebx
	cmp ebp,edi
	je Block42

 Block41:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block42:
	mov edx,dword ptr [esp+0xEC]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edx
	call CItemInfo::IsTradeBlockItem_0
	mov ebp,dword ptr [esp+0x110]
	test eax,eax
	je Block67

 Block43:
	cmp ebp,edi
	je Block49

 Block44:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x14]
	mov ecx,ebp
	call edx
	test eax,eax
	je Block49

 Block45:
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block47

 Block46:
	cmp byte ptr [eax],0
	jne Block48

 Block47:
	lea eax,[esp+0x18]
	push 0x2C9
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x2C]
	mov byte ptr [esp+0xE0],0xC
	call ZXString<char>::op_add_assign_other_0
	jmp Block65

 Block48:
	lea ecx,[esp+0x18]
	push 0x2C9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x6C]
	mov byte ptr [esp+0xE0],0xD
	call ZXString<char>::op_assign
	jmp Block65

 Block49:
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block51

 Block50:
	cmp byte ptr [eax],0
	jne Block61

 Block51:
	mov dword ptr [esp+0x30],edi
	mov esi,dword ptr [esp+0x50]
	or ebx,0x10
	lea eax,[esp+0x30]
	mov byte ptr [esp+0xDC],0xE
	mov dword ptr [esp+0x14],ebx

 Block52:
	xor ecx,ecx

 Block53:
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea ecx,[esp+0x30]
	call ZXString<char>::_Cat
	mov dword ptr [esp+0xDC],0xE
	test bl,0x20
	je Block56

 Block54:
	and ebx,0xFFFFFFDF
	mov dword ptr [esp+0x14],ebx
	cmp esi,edi
	je Block56

 Block55:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block56:
	mov dword ptr [esp+0xDC],2
	test bl,0x10
	je Block59

 Block57:
	and ebx,0xFFFFFFEF
	mov dword ptr [esp+0x14],ebx
	cmp dword ptr [esp+0x30],edi
	je Block59

 Block58:
	mov eax,dword ptr [esp+0x30]
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block59:
	lea ecx,[esp+0x18]
	push 0x2C8
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xDC],0x10
	cmp eax,edi
	je Block63

 Block60:
	mov ecx,dword ptr [eax-4]
	jmp Block64

 Block61:
	push edi
	push 2
	lea ecx,[esp+0x58]
	mov dword ptr [esp+0x58],edi
	call ZXString<char>::GetBuffer
	mov dx,word ptr [_S___20]
	push 2
	lea ecx,[esp+0x54]
	mov word ptr [eax],dx
	call ZXString<char>::ReleaseBuffer
	mov esi,dword ptr [esp+0x50]
	or ebx,0x20
	lea eax,[esp+0x50]
	mov dword ptr [esp+0xDC],0xF
	mov dword ptr [esp+0x14],ebx
	cmp esi,edi
	je Block52

 Block62:
	mov ecx,dword ptr [esi-4]
	jmp Block53

 Block63:
	xor ecx,ecx

 Block64:
	push ecx
	push eax
	lea ecx,[esp+0x30]
	call ZXString<char>::_Cat

 Block65:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xDC],2
	cmp eax,edi
	je Block67

 Block66:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block67:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebp
	call CItemInfo::IsAccountSharableItem_1
	test eax,eax
	je Block90

 Block68:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebp
	call CItemInfo::IsSharableOnceItem_1
	test eax,eax
	je Block71

 Block69:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x14]
	mov ecx,ebp
	call eax
	test eax,eax
	je Block71

 Block70:
	lea ecx,[esp+0x1C]
	push 0x2C8
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xDC],0x11
	or ebx,0x40
	jmp Block72

 Block71:
	lea edx,[esp+0x18]
	push 0x1467
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0xDC],0x12
	or ebx,0x80

 Block72:
	push eax
	lea ecx,[esp+0x24]
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x24],edi
	call ZXString<char>::op_assign
	mov dword ptr [esp+0xDC],0x14
	test bl,bl
	jns Block75

 Block73:
	mov eax,dword ptr [esp+0x18]
	and ebx,0xFFFFFF7F
	mov dword ptr [esp+0x14],ebx
	cmp eax,edi
	je Block75

 Block74:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block75:
	mov byte ptr [esp+0xDC],0x15
	test bl,0x40
	je Block78

 Block76:
	mov eax,dword ptr [esp+0x1C]
	and ebx,0xFFFFFFBF
	mov dword ptr [esp+0x14],ebx
	cmp eax,edi
	je Block78

 Block77:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block78:
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block80

 Block79:
	cmp byte ptr [eax],0
	jne Block81

 Block80:
	lea eax,[esp+0x20]
	jmp Block82

 Block81:
	push offset _S___20
	lea eax,[esp+0x74]
	push eax
	lea ecx,[esp+0x30]
	call ZXString<char>::op_add_0
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0x28]
	or ebx,0x100
	push edx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x16
	mov dword ptr [esp+0x1C],ebx
	call ZXString<char>::op_add_1
	or ebx,0x200
	mov dword ptr [esp+0xDC],0x17
	mov dword ptr [esp+0x14],ebx

 Block82:
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov dword ptr [esp+0xDC],0x16
	test ebx,0x200
	je Block85

 Block83:
	mov eax,dword ptr [esp+0x24]
	and ebx,0xFFFFFDFF
	mov dword ptr [esp+0x14],ebx
	cmp eax,edi
	je Block85

 Block84:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block85:
	mov dword ptr [esp+0xDC],0x15
	test ebx,0x100
	je Block88

 Block86:
	mov eax,dword ptr [esp+0x70]
	cmp eax,edi
	je Block88

 Block87:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block88:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0xDC],2
	cmp eax,edi
	je Block90

 Block89:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block90:
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block93

 Block91:
	cmp byte ptr [eax],0
	je Block93

 Block92:
	xor eax,eax
	jmp Block94

 Block93:
	mov eax,1

 Block94:
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFED
	add eax,0x13
	mov esi,eax
	mov eax,dword ptr [esp+0x68]
	mov dword ptr [esp+0x8C],esi
	cmp eax,edi
	je Block97

 Block95:
	cmp byte ptr [eax],0
	je Block97

 Block96:
	add esi,0x13
	mov dword ptr [esp+0x8C],esi

 Block97:
	mov dword ptr [esp+0x20],edi
	mov dword ptr [esp+0x58],edi
	mov ebx,dword ptr [esp+0xEC]
	mov byte ptr [esp+0xDC],0x19
	cmp ebx,0x4F83B4
	jne Block99

 Block98:
	mov eax,dword ptr [esp+0xF4]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push 2
	push 1
	push eax
	push ebx
	call CItemInfo::IsCashItem_1
	mov edx,dword ptr [esp+0x104]
	push eax
	mov eax,dword ptr [esp+0x100]
	lea ecx,[esp+0x68]
	push ecx
	push edx
	push eax
	jmp Block103

 Block99:
	cmp ebx,0x4F83A8
	je Block101

 Block100:
	cmp ebx,0x51C9AA
	jne Block102

 Block101:
	mov ecx,dword ptr [esp+0xF4]
	push 4
	push 1
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebx
	call CItemInfo::IsCashItem_1
	mov ecx,dword ptr [esp+0xFC]
	push eax
	mov eax,dword ptr [esp+0x108]
	lea edx,[esp+0x68]
	push edx
	push eax
	push ecx
	jmp Block103

 Block102:
	mov edx,dword ptr [esp+0xF4]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edi
	push edi
	push edx
	push ebx
	call CItemInfo::IsCashItem_1
	mov ecx,dword ptr [esp+0x104]
	mov edx,dword ptr [esp+0xFC]
	push eax
	lea eax,[esp+0x68]
	push eax
	push ecx
	push edx

 Block103:
	mov ecx,dword ptr [esp+0x70]
	call CUIToolTip::GetItemExpireDate
	mov ebp,dword ptr [esp+0x58]
	cmp ebp,edi
	je Block106

 Block104:
	cmp byte ptr [ebp],0
	je Block106

 Block105:
	xor ecx,ecx
	jmp Block107

 Block106:
	mov ecx,1

 Block107:
	cmp ebx,0x3D837D
	je Block116

 Block108:
	cmp ebx,0x3D837E
	je Block116

 Block109:
	cmp ebx,0x3D837F
	je Block116

 Block110:
	cmp ebx,0x3D8380
	je Block116

 Block111:
	cmp ebx,0x3D8381
	je Block116

 Block112:
	cmp ebx,0x3D8382
	je Block116

 Block113:
	cmp ebx,0x3D8383
	je Block116

 Block114:
	cmp ebx,0x3D8384
	je Block116

 Block115:
	xor eax,eax
	jmp Block117

 Block116:
	mov eax,1

 Block117:
	neg eax
	sbb eax,eax
	and eax,0x10
	neg ecx
	sbb ecx,ecx
	and ecx,0xFFFFFFEC
	add eax,esi
	mov esi,dword ptr [esp+0xFC]
	add ecx,0x14
	add ecx,eax
	mov dword ptr [esp+0x64],ecx
	cmp esi,edi
	je Block124

 Block118:
	mov eax,esi
	lea edx,[eax+1]

 Block119:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block119

 Block120:
	sub eax,edx
	je Block124

 Block121:
	lea eax,[esp+0x18]
	push 0x2B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x28]
	push ecx
	mov byte ptr [esp+0xE8],0x1A
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x19
	cmp eax,edi
	je Block123

 Block122:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block123:
	add dword ptr [esp+0x64],0x10

 Block124:
	mov ebx,dword ptr [esp+0xEC]
	mov esi,dword ptr [esp+0x100]
	mov eax,0x68DB8BAD
	imul ebx
	sar edx,0xC
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	mov dword ptr [esp+0x50],edi
	cmp edi,0x1AE
	je Block132

 Block125:
	test esi,esi
	je Block132

 Block126:
	mov eax,esi
	lea edx,[eax+1]

 Block127:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block127

 Block128:
	sub eax,edx
	je Block132

 Block129:
	cmp ebx,0x3D83AE
	je Block132

 Block130:
	cmp ebx,0x3D83AF
	je Block132

 Block131:
	add dword ptr [esp+0x64],0x10

 Block132:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebx
	lea edx,[esp+0x70]
	push edx
	call CItemInfo::GetItemName
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebx
	lea eax,[esp+0x30]
	push eax
	mov byte ptr [esp+0xE4],0x1B
	call CItemInfo::GetItemDesc
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebx
	mov byte ptr [esp+0xE0],0x1C
	call CItemInfo::GetRequiredLEV
	mov dword ptr [esp+0x70],eax
	test ebx,ebx
	je Block148

 Block133:
	mov eax,dword ptr [esp+0x6C]
	test eax,eax
	je Block135

 Block134:
	cmp byte ptr [eax],0
	jne Block148

 Block135:
	mov ecx,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xDC],0x1B
	test ecx,ecx
	je Block137

 Block136:
	add ecx,0xFFFFFFF4
	push ecx
	call ZXString<char>::_Release
	mov eax,dword ptr [esp+0x70]
	add esp,4

 Block137:
	mov byte ptr [esp+0xDC],0x19
	test eax,eax
	je Block139

 Block138:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block139:
	mov byte ptr [esp+0xDC],0x18
	test ebp,ebp
	je Block141

 Block140:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block141:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block143

 Block142:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block143:
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0xDC],1
	test eax,eax
	je Block145

 Block144:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block145:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xDC],0
	test eax,eax
	je Block147

 Block146:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block147:
	lea ecx,[esp+0x12C]
	mov dword ptr [esp+0xDC],0xFFFFFFFF
	call ZRef<ITCITEM>::~ZRef<ITCITEM>
	jmp Block453

 Block148:
	cmp edi,0x1AE
	jne Block167

 Block149:
	mov ecx,dword ptr [esp+0xEC]
	add ecx,0xFFBE6320
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	push esi
	sete byte ptr [esp+0x63]
	call _atoi
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add esp,4
	lea edx,[esp+0x34]
	mov ebp,eax
	push edx
	mov ecx,esi
	mov dword ptr [esp+0x1C],ebp
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block154

 Block150:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block153

 Block151:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block153

 Block152:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block153:
	mov ebp,dword ptr [esp+0x18]
	mov edi,dword ptr [esp+0x50]
	mov dword ptr [esp+0x38],0

 Block154:
	cmp dword ptr [ebx+0x631],0
	jbe Block167

 Block155:
	mov ebx,dword ptr [ebx+0x635]
	mov esi,dword ptr [esi+0x20B4]
	mov dword ptr [esp+0x1C],ebx
	test ebx,ebx
	je Block167

 Block156:
	lea eax,[esp+0x1C]
	push eax
	call ZList<GW_NewYearCardRecord>::GetNext
	mov edi,eax
	add esp,4
	cmp dword ptr [edi],ebp
	jne Block158

 Block157:
	cmp dword ptr [edi+4],esi
	je Block160

 Block158:
	cmp dword ptr [esp+0x1C],0
	jne Block156

 Block159:
	jmp Block166

 Block160:
	push 2
	push offset _S___4
	lea ecx,[esp+0x34]
	call ZXString<char>::_Cat
	push 1
	push offset _S___19
	lea ecx,[esp+0x34]
	call ZXString<char>::_Cat
	mov bl,byte ptr [esp+0x5F]
	mov eax,offset _S_TO__1
	test bl,bl
	jne Block162

 Block161:
	mov eax,offset _S_FROM__1

 Block162:
	push eax
	lea ecx,[esp+0x30]
	call ZXString<char>::op_add_assign_t_1
	test bl,bl
	je Block164

 Block163:
	add edi,0x25
	jmp Block165

 Block164:
	add edi,8

 Block165:
	push edi
	lea ecx,[esp+0x30]
	call ZXString<char>::op_add_assign_t_1
	push 1
	push offset _S___17
	lea ecx,[esp+0x34]
	call ZXString<char>::_Cat

 Block166:
	mov edi,dword ptr [esp+0x50]

 Block167:
	cmp edi,0x228
	jne Block258

 Block168:
	mov ecx,dword ptr [esp+0xEC]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov dword ptr [esp+0x40],0
	call CItemInfo::GetKarmaScissorsItem
	test eax,eax
	je Block170

 Block169:
	mov edx,dword ptr [eax+4]
	mov dword ptr [esp+0x3C],edx

 Block170:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x40]
	push eax
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [esp+0x44]
	mov esi,dword ptr [eax+4]
	test edi,edi
	je Block175

 Block171:
	add edi,0xFFFFFFF0
	lea ebx,[edi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block174

 Block172:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block174

 Block173:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block174:
	mov dword ptr [esp+0x44],0

 Block175:
	xor ebp,ebp
	push 0x64
	lea ecx,[esp+0x78]
	int 3// TODO: 	mov dword ptr [esp+0x78],offset ZMap<long, int, long>::`vftable'
	mov dword ptr [esp+0x7C],ebp
	mov dword ptr [esp+0x80],0x1F
	mov dword ptr [esp+0x84],ebp
	call ZMap<long, int, long>::_CalcAutoGrow
	mov dword ptr [esp+0x14],ebp
	lea ecx,[esi+0xFD]
	lea edx,[esi+0x4BD]
	lea eax,[esi+0x4DD]
	add esi,0x505
	mov byte ptr [esp+0xDC],0x1E
	mov dword ptr [esp+0xB4],ecx
	mov dword ptr [esp+0xA0],edx
	mov dword ptr [esp+0x94],eax
	mov dword ptr [esp+0x30],esi
	mov dword ptr [esp+0x24],5

 Block176:
	mov ecx,dword ptr [esp+0x30]
	mov eax,dword ptr [ecx]
	test eax,eax
	je Block178

 Block177:
	mov eax,dword ptr [eax-4]

 Block178:
	dec eax
	mov ebx,1
	cmp eax,ebx
	mov dword ptr [esp+0x1C],eax
	jl Block196

 Block179:
	mov edx,dword ptr [esp+0x30]
	mov eax,dword ptr [edx]
	mov esi,dword ptr [eax+ebx*8+4]
	test esi,esi
	je Block195

 Block180:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetAppliableKarmaType
	cmp eax,dword ptr [esp+0x3C]
	jne Block195

 Block181:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x14]
	mov ecx,esi
	call eax
	test eax,eax
	jne Block195

 Block182:
	mov ecx,edi
	call TSecType<long>::GetData
	push 0
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x20],eax
	call ZMap<long, int, long>::GetAt
	test eax,eax
	jne Block195

 Block183:
	test ebp,ebp
	je Block185

 Block184:
	cmp byte ptr [ebp],al
	jne Block187

 Block185:
	lea edx,[esp+0x90]
	push 0x124C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xE0],0x1F
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x90]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block187

 Block186:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block187:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0xB0]
	push eax
	call CItemInfo::GetItemName
	push eax
	lea ecx,[esp+0xA8]
	push offset _S___4
	push ecx
	mov byte ptr [esp+0xE8],0x20
	call __op_add_char_char
	add esp,0xC
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xDC],0x21
	test eax,eax
	je Block189

 Block188:
	mov ecx,dword ptr [eax-4]
	jmp Block190

 Block189:
	xor ecx,ecx

 Block190:
	push ecx
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0xA4]
	mov byte ptr [esp+0xDC],0x20
	test eax,eax
	je Block192

 Block191:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block192:
	mov eax,dword ptr [esp+0xAC]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block194

 Block193:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block194:
	mov ecx,edi
	call TSecType<long>::GetData
	push 0
	lea edx,[esp+0x1C]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x20],eax
	call ZMap<long, int, long>::Insert
	mov ebp,dword ptr [esp+0x14]

 Block195:
	inc ebx
	cmp ebx,dword ptr [esp+0x1C]
	jle Block179

 Block196:
	mov ebx,dword ptr [esp+0xB4]
	mov dword ptr [esp+0x1C],0x3C
	mov edi,edi

 Block197:
	mov esi,dword ptr [ebx]
	test esi,esi
	je Block213

 Block198:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetAppliableKarmaType
	cmp eax,dword ptr [esp+0x3C]
	jne Block213

 Block199:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x14]
	mov ecx,esi
	call edx
	test eax,eax
	jne Block213

 Block200:
	mov ecx,edi
	call TSecType<long>::GetData
	mov dword ptr [esp+0x18],eax
	push 0
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, int, long>::GetAt
	test eax,eax
	jne Block213

 Block201:
	test ebp,ebp
	je Block203

 Block202:
	cmp byte ptr [ebp],al
	jne Block205

 Block203:
	lea ecx,[esp+0xBC]
	push 0x124C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xE0],0x22
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0xBC]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block205

 Block204:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block205:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0xB4]
	push edx
	call CItemInfo::GetItemName
	push eax
	lea eax,[esp+0x9C]
	push offset _S___4
	push eax
	mov byte ptr [esp+0xE8],0x23
	call __op_add_char_char
	add esp,0xC
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xDC],0x24
	test eax,eax
	je Block207

 Block206:
	mov ecx,dword ptr [eax-4]
	jmp Block208

 Block207:
	xor ecx,ecx

 Block208:
	push ecx
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x98]
	mov byte ptr [esp+0xDC],0x23
	test eax,eax
	je Block210

 Block209:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block210:
	mov eax,dword ptr [esp+0xB0]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block212

 Block211:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block212:
	mov ecx,edi
	call TSecType<long>::GetData
	push 0
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x20],eax
	call ZMap<long, int, long>::Insert
	mov ebp,dword ptr [esp+0x14]

 Block213:
	add ebx,8
	sub dword ptr [esp+0x1C],1
	jne Block197

 Block214:
	mov ebx,dword ptr [esp+0xA0]
	mov dword ptr [esp+0x1C],4

 Block215:
	mov esi,dword ptr [ebx]
	test esi,esi
	je Block231

 Block216:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetAppliableKarmaType
	cmp eax,dword ptr [esp+0x3C]
	jne Block231

 Block217:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x14]
	mov ecx,esi
	call eax
	test eax,eax
	jne Block231

 Block218:
	mov ecx,edi
	call TSecType<long>::GetData
	push 0
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x20],eax
	call ZMap<long, int, long>::GetAt
	test eax,eax
	jne Block231

 Block219:
	test ebp,ebp
	je Block221

 Block220:
	cmp byte ptr [ebp],al
	jne Block223

 Block221:
	lea edx,[esp+0xC0]
	push 0x124C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xE0],0x25
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0xC0]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block223

 Block222:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block223:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0xBC]
	push eax
	call CItemInfo::GetItemName
	push eax
	lea ecx,[esp+0xAC]
	push offset _S___4
	push ecx
	mov byte ptr [esp+0xE8],0x26
	call __op_add_char_char
	add esp,0xC
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xDC],0x27
	test eax,eax
	je Block225

 Block224:
	mov ecx,dword ptr [eax-4]
	jmp Block226

 Block225:
	xor ecx,ecx

 Block226:
	push ecx
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0xA8]
	mov byte ptr [esp+0xDC],0x26
	test eax,eax
	je Block228

 Block227:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block228:
	mov eax,dword ptr [esp+0xB8]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block230

 Block229:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block230:
	mov ecx,edi
	call TSecType<long>::GetData
	push 0
	lea edx,[esp+0x1C]
	push edx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x20],eax
	call ZMap<long, int, long>::Insert
	mov ebp,dword ptr [esp+0x14]

 Block231:
	add ebx,8
	sub dword ptr [esp+0x1C],1
	jne Block215

 Block232:
	mov ebx,dword ptr [esp+0x94]
	mov dword ptr [esp+0x1C],5
	jmp Block234

 Block234:
	mov esi,dword ptr [ebx]
	test esi,esi
	je Block250

 Block235:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetAppliableKarmaType
	cmp eax,dword ptr [esp+0x3C]
	jne Block250

 Block236:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x14]
	mov ecx,esi
	call edx
	test eax,eax
	jne Block250

 Block237:
	mov ecx,edi
	call TSecType<long>::GetData
	mov dword ptr [esp+0x18],eax
	push 0
	lea eax,[esp+0x1C]
	push eax
	lea ecx,[esp+0x7C]
	call ZMap<long, int, long>::GetAt
	test eax,eax
	jne Block250

 Block238:
	test ebp,ebp
	je Block240

 Block239:
	cmp byte ptr [ebp],al
	jne Block242

 Block240:
	lea ecx,[esp+0x9C]
	push 0x124C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xE0],0x28
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x9C]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block242

 Block241:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block242:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0x38]
	push edx
	call CItemInfo::GetItemName
	push eax
	lea eax,[esp+0x64]
	push offset _S___4
	push eax
	mov byte ptr [esp+0xE8],0x29
	call __op_add_char_char
	add esp,0xC
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xDC],0x2A
	test eax,eax
	je Block244

 Block243:
	mov ecx,dword ptr [eax-4]
	jmp Block245

 Block244:
	xor ecx,ecx

 Block245:
	push ecx
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0xDC],0x29
	test eax,eax
	je Block247

 Block246:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block247:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block249

 Block248:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block249:
	mov ecx,edi
	call TSecType<long>::GetData
	push 0
	lea ecx,[esp+0x1C]
	push ecx
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x20],eax
	call ZMap<long, int, long>::Insert
	mov ebp,dword ptr [esp+0x14]

 Block250:
	mov eax,1
	add ebx,8
	sub dword ptr [esp+0x1C],eax
	jne Block234

 Block251:
	add dword ptr [esp+0x30],4
	sub dword ptr [esp+0x24],eax
	jne Block176

 Block252:
	test ebp,ebp
	je Block254

 Block253:
	mov eax,dword ptr [ebp-4]
	jmp Block255

 Block254:
	xor eax,eax

 Block255:
	push eax
	push ebp
	lea ecx,[esp+0x34]
	call ZXString<char>::_Cat
	mov byte ptr [esp+0xDC],0x1D
	test ebp,ebp
	je Block257

 Block256:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block257:
	lea ecx,[esp+0x74]
	mov byte ptr [esp+0xDC],0x1C
	int 3// TODO: 	mov dword ptr [esp+0x74],offset ZMap<long, int, long>::`vftable'
	call ZMap<long, int, long>::RemoveAll

 Block258:
	cmp dword ptr [esp+0x110],0
	je Block273

 Block259:
	mov esi,dword ptr [esp+0x110]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+0x14]
	mov ecx,esi
	call eax
	test eax,eax
	jne Block273

 Block260:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetAppliableKarmaType
	mov esi,eax
	test esi,esi
	je Block273

 Block261:
	mov eax,dword ptr [esp+0x2C]
	test eax,eax
	je Block264

 Block262:
	cmp byte ptr [eax],0
	je Block264

 Block263:
	push 2
	push offset _S___4
	lea ecx,[esp+0x34]
	call ZXString<char>::_Cat

 Block264:
	push esi
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetKarmaScissorsName
	lea edx,[esp+0x34]
	push 0x124A
	mov bl,0x2B
	push edx
	mov byte ptr [esp+0xE4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x1C],0
	mov ecx,dword ptr [esp+0x24]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0xE8],0x2D
	call ZXString<char>::Format
	mov eax,dword ptr [eax]
	add esp,0xC
	test eax,eax
	je Block266

 Block265:
	mov ecx,dword ptr [eax-4]
	jmp Block267

 Block266:
	xor ecx,ecx

 Block267:
	push ecx
	push eax
	lea ecx,[esp+0x34]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xDC],0x2C
	test eax,eax
	je Block269

 Block268:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block269:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xDC],bl
	test eax,eax
	je Block271

 Block270:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block271:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xDC],0x1C
	test eax,eax
	je Block273

 Block272:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block273:
	mov esi,dword ptr [esp+0x54]
	push 1
	xor ebp,ebp
	push ebp
	push ebp
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x3C]
	push ecx
	push ebp
	push 0x10E
	push 0x5C
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	cmp eax,0x44
	jle Block275

 Block274:
	add eax,0xFFFFFFBC
	mov dword ptr [esp+0x3C],eax
	jmp Block276

 Block275:
	mov dword ptr [esp+0x3C],ebp

 Block276:
	mov eax,dword ptr [esp+0x104]
	cmp eax,ebp
	je Block279

 Block277:
	cmp eax,dword ptr [esp+0x108]
	je Block279

 Block278:
	mov ebp,0x23

 Block279:
	mov edx,dword ptr [esp+0x120]
	neg edx
	sbb edx,edx
	and edx,0x26
	add ebp,edx
	mov dword ptr [esp+0x30],ebp
	mov dword ptr [esp+0x1C],0
	mov eax,dword ptr [esp+0x128]
	mov edi,dword ptr [ZImports::_VariantInit]
	mov byte ptr [esp+0xDC],0x2E
	test eax,eax
	je Block290

 Block280:
	push eax
	lea ecx,[esp+0x20]
	call ZXString<char>::AssignCStr
	lea eax,[esp+0x24]
	push 0
	push eax
	call get_basic_font
	add esp,8
	lea ecx,[esp+0x40]
	push ecx
	mov byte ptr [esp+0xE0],0x2F
	call edi
	lea edx,[esp+0x40]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block282

 Block281:
	push eax
	call _com_issue_error

 Block282:
	mov edx,dword ptr [esp+0x1C]
	lea eax,[esp+0x40]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x30
	push edx
	mov byte ptr [esp+0xE8],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xE4],0x31
	test ecx,ecx
	jne Block284

 Block283:
	push 0x80004003
	call _com_issue_error

 Block284:
	mov byte ptr [esp+0xE4],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x40],8
	mov esi,eax
	mov byte ptr [esp+0xDC],0x2F
	jne Block287

 Block285:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block288

 Block286:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block288

 Block287:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block288:
	mov eax,0x77280773
	imul esi
	sar edx,7
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	shl eax,4
	add ebp,eax
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x30],ebp
	mov byte ptr [esp+0xDC],0x2E
	test eax,eax
	je Block290

 Block289:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block290:
	mov eax,dword ptr [esp+0x130]
	test eax,eax
	je Block293

 Block291:
	cmp dword ptr [eax+0x10],0
	jle Block293

 Block292:
	add ebp,0x40
	mov dword ptr [esp+0x30],ebp

 Block293:
	cmp dword ptr [esp+0x134],2
	jne Block296

 Block294:
	cmp dword ptr [esp+0x124],0
	je Block296

 Block295:
	add ebp,0x10
	mov dword ptr [esp+0x30],ebp

 Block296:
	cmp dword ptr [esp+0x50],0x12D
	je Block299

 Block297:
	cmp dword ptr [esp+0x70],0
	jne Block299

 Block298:
	xor ebx,ebx
	jmp Block300

 Block299:
	mov ebx,0xC

 Block300:
	lea eax,[esp+0x40]
	push eax
	call edi
	lea ecx,[esp+0x40]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block302

 Block301:
	push eax
	call _com_issue_error

 Block302:
	mov eax,dword ptr [esp+0x6C]
	lea edx,[esp+0x40]
	push edx
	push ecx
	mov dword ptr [esp+0x68],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xE8],0x32
	call _xbstr_t::_ctor_0
	push 1
	lea ecx,[esp+0x40]
	push ecx
	mov ecx,dword ptr [esp+0x64]
	mov byte ptr [esp+0xEC],0x33
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0xE4],0x34
	test ecx,ecx
	jne Block304

 Block303:
	push 0x80004003
	call _com_issue_error

 Block304:
	mov byte ptr [esp+0xE4],0x35
	call IWzFont::CalcTextWidth
	lea esi,[eax+0x17]
	mov eax,dword ptr [esp+0x34]
	xor edi,edi
	mov byte ptr [esp+0xDC],0x32
	cmp eax,edi
	je Block306

 Block305:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block306:
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0xDC],0x2E
	jne Block309

 Block307:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	cmp eax,edi
	je Block310

 Block308:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block310

 Block309:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block310:
	cmp esi,0x122
	jle Block312

 Block311:
	lea eax,[esi-0x122]
	jmp Block313

 Block312:
	xor eax,eax

 Block313:
	mov ecx,dword ptr [esp+0x64]
	mov esi,dword ptr [esp+0x54]
	add ebx,ebp
	add ebx,dword ptr [esp+0x3C]
	push 0xFFFFFFFF
	lea edx,[ebx+ecx+0x74]
	push edx
	add eax,0x122
	push eax
	push 5
	mov ecx,esi
	call CUIToolTip::SetBasicInfo
	mov dword ptr [esp+0x14],edi
	mov eax,dword ptr [esp+0x10C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,esi
	mov byte ptr [esp+0xE4],0x36
	call CUIToolTip::MakingLimitInfo
	mov dword ptr [esp+0x24],edi
	cmp dword ptr [esp+0x118],edi
	je Block316

 Block314:
	mov eax,dword ptr [esp+0x110]
	mov edx,dword ptr [eax+0x18]
	or edx,dword ptr [eax+0x1C]
	jne Block316

 Block315:
	mov eax,0x1E
	add dword ptr [esi+8],eax
	mov dword ptr [esp+0x24],eax

 Block316:
	mov eax,dword ptr [esp+0xE8]
	mov ecx,dword ptr [esp+0xE4]
	push edi
	push 0xCC0E395A
	push edi
	push edi
	push 1
	push eax
	push ecx
	lea edx,[esp+0x50]
	push edx
	mov ecx,esi
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x34]
	cmp eax,edi
	je Block318

 Block317:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block318:
	mov eax,3
	mov word ptr [esp+0xC4],ax
	mov dword ptr [esp+0xCC],edi
	mov ecx,dword ptr [esi+0x10]
	mov byte ptr [esp+0xDC],0x37
	cmp ecx,edi
	jne Block320

 Block319:
	push 0x80004003
	call _com_issue_error

 Block320:
	lea edx,[esp+0xC4]
	push edx
	lea eax,[esp+0x40]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0xC4],8
	mov byte ptr [esp+0xDC],0x39
	jne Block323

 Block321:
	mov eax,dword ptr [esp+0xCC]
	xor ecx,ecx
	mov word ptr [esp+0xC4],cx
	cmp eax,edi
	je Block324

 Block322:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block324

 Block323:
	lea edx,[esp+0xC4]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block324:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 1
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x70]
	push ecx
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextItemName
	mov eax,dword ptr [esp+0x28]
	cmp eax,edi
	je Block327

 Block325:
	cmp byte ptr [eax],0
	je Block327

 Block326:
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0xE
	push edx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esp+0x2C]
	push eax
	push 0x1F
	mov ecx,esi
	call CUIToolTip::DrawTextCenter

 Block327:
	mov ebx,dword ptr [esp+0x68]
	cmp ebx,edi
	je Block330

 Block328:
	cmp byte ptr [ebx],0
	je Block330

 Block329:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0xE
	push ecx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	push ebx
	push 0x32
	mov ecx,esi
	call CUIToolTip::DrawTextCenter

 Block330:
	mov edi,dword ptr [esp+0x8C]
	mov eax,dword ptr [esp+0xEC]
	add edi,0x1F
	mov dword ptr [esp+0x34],edi
	cmp eax,0x3D837D
	je Block338

 Block331:
	cmp eax,0x3D837E
	je Block338

 Block332:
	cmp eax,0x3D837F
	je Block338

 Block333:
	cmp eax,0x3D8380
	je Block338

 Block334:
	cmp eax,0x3D8381
	je Block338

 Block335:
	cmp eax,0x3D8382
	je Block338

 Block336:
	cmp eax,0x3D8383
	je Block338

 Block337:
	cmp eax,0x3D8384
	jne Block351

 Block338:
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x40]
	push edx
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x44]
	mov ebp,dword ptr [eax+4]
	test esi,esi
	je Block343

 Block339:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block342

 Block340:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block342

 Block341:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block342:
	mov edi,dword ptr [esp+0x34]
	mov dword ptr [esp+0x44],0

 Block343:
	cmp dword ptr [ebp+0x645],0
	jbe Block351

 Block344:
	mov dword ptr [esp+0x18],0
	cmp dword ptr [ebx+0x2034],0
	mov esi,dword ptr [ebp+0x649]
	mov byte ptr [esp+0xDC],0x3A
	jne Block346

 Block345:
	add esi,0x23
	jmp Block347

 Block346:
	add esi,0x16

 Block347:
	lea eax,[esp+0x34]
	push 0x108D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea ecx,[esp+0x20]
	push ecx
	mov byte ptr [esp+0xE8],0x3B
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x40]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x3A
	test eax,eax
	je Block349

 Block348:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block349:
	mov ebx,dword ptr [esp+0x54]
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0xE
	push edx
	mov ecx,ebx
	call CUIToolTip::GetFontByType
	mov esi,dword ptr [esp+0x1C]
	push esi
	push edi
	mov ecx,ebx
	call CUIToolTip::DrawTextCenter
	add edi,0x13
	mov byte ptr [esp+0xDC],0x39
	test esi,esi
	je Block351

 Block350:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block351:
	mov eax,dword ptr [esp+0x58]
	mov esi,dword ptr [esp+0x3C]
	test eax,eax
	je Block376

 Block352:
	cmp byte ptr [eax],0
	je Block376

 Block353:
	mov eax,3
	mov ecx,0xFF
	mov word ptr [esp+0x40],ax
	mov dword ptr [esp+0x48],ecx
	mov ebp,dword ptr [esp+0x54]
	mov edx,dword ptr [ebp+0xA04]
	mov byte ptr [esp+0xDC],0x3C
	test esi,esi
	jne Block355

 Block354:
	push 0x80004003
	call _com_issue_error

 Block355:
	mov ebx,dword ptr [esi]
	mov esi,dword ptr [esp+0x40]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],esi
	mov esi,dword ptr [esp+0x54]
	push edx
	mov dword ptr [eax+4],esi
	mov esi,dword ptr [esp+0x50]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x60]
	lea edx,[edi+2]
	push edx
	push 0xA
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block357

 Block356:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block357:
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0xDC],0x39
	jne Block360

 Block358:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	test eax,eax
	je Block361

 Block359:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block361

 Block360:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block361:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x74]
	push eax
	call ebx
	lea ecx,[esp+0x74]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block363

 Block362:
	push eax
	call _com_issue_error

 Block363:
	lea edx,[esp+0x40]
	push edx
	mov byte ptr [esp+0xE0],0x3D
	call ebx
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block365

 Block364:
	push eax
	call _com_issue_error

 Block365:
	lea ecx,[esp+0x74]
	push ecx
	lea edx,[esp+0x44]
	push edx
	push 0x16
	lea eax,[esp+0x40]
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0xEC],0x3E
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov edx,dword ptr [esp+0x60]
	push eax
	push ecx
	mov dword ptr [esp+0x70],esp
	mov ecx,esp
	mov bl,0x3F
	push edx
	mov byte ptr [esp+0xF0],bl
	call _xbstr_t::_ctor_0
	lea eax,[edi-2]
	push eax
	mov byte ptr [esp+0xF0],0x40
	push 0x10
	mov ecx,esi
	mov byte ptr [esp+0xF4],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xDC],0x3E
	test eax,eax
	je Block367

 Block366:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block367:
	mov ebx,8
	mov byte ptr [esp+0xDC],0x3D
	cmp word ptr [esp+0x40],bx
	jne Block370

 Block368:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block371

 Block369:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block371

 Block370:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block371:
	mov byte ptr [esp+0xDC],0x39
	cmp word ptr [esp+0x74],bx
	jne Block374

 Block372:
	mov eax,dword ptr [esp+0x7C]
	xor edx,edx
	mov word ptr [esp+0x74],dx
	test eax,eax
	je Block375

 Block373:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	add edi,0x10
	jmp Block377

 Block374:
	lea eax,[esp+0x74]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block375:
	add edi,0x10
	jmp Block377

 Block376:
	mov ebp,dword ptr [esp+0x54]

 Block377:
	cmp dword ptr [esp+0x50],0x1AE
	je Block385

 Block378:
	mov edx,dword ptr [esp+0x100]
	test edx,edx
	je Block385

 Block379:
	mov eax,edx
	lea ebx,[eax+1]
	lea ebx,[ebx]

 Block380:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block380

 Block381:
	sub eax,ebx
	je Block385

 Block382:
	mov eax,dword ptr [esp+0xEC]
	cmp eax,0x3D83AE
	je Block385

 Block383:
	cmp eax,0x3D83AF
	je Block385

 Block384:
	push 0
	push edx
	push edi
	mov ecx,ebp
	call CUIToolTip::DrawItemTitle
	add edi,0x74

 Block385:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block409

 Block386:
	cmp byte ptr [eax],0
	je Block409

 Block387:
	mov ecx,3
	mov word ptr [esp+0x40],cx
	mov ecx,0xFF
	mov dword ptr [esp+0x48],ecx
	mov edx,dword ptr [ebp+0xA04]
	mov byte ptr [esp+0xDC],0x41
	test esi,esi
	jne Block389

 Block388:
	push 0x80004003
	call _com_issue_error

 Block389:
	mov ebx,dword ptr [esi]
	mov esi,dword ptr [esp+0x40]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],esi
	mov esi,dword ptr [esp+0x54]
	push edx
	mov dword ptr [eax+4],esi
	mov esi,dword ptr [esp+0x50]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x60]
	lea edx,[edi+2]
	push edx
	push 0xA
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block391

 Block390:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block391:
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0xDC],0x39
	jne Block394

 Block392:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	test eax,eax
	je Block395

 Block393:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block395

 Block394:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block395:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x40]
	push eax
	call ebx
	lea ecx,[esp+0x40]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block397

 Block396:
	push eax
	call _com_issue_error

 Block397:
	lea edx,[esp+0x74]
	push edx
	mov byte ptr [esp+0xE0],0x42
	call ebx
	lea eax,[esp+0x74]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block399

 Block398:
	push eax
	call _com_issue_error

 Block399:
	lea ecx,[esp+0x40]
	push ecx
	lea edx,[esp+0x78]
	push edx
	push 0x16
	lea eax,[esp+0x40]
	mov bl,0x43
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0xEC],bl
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov edx,dword ptr [esp+0x28]
	push eax
	push ecx
	mov dword ptr [esp+0x70],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0xF0],0x44
	call _xbstr_t::_ctor_0
	add edi,0xFFFFFFFE
	push edi
	mov byte ptr [esp+0xF0],0x45
	push 0x10
	mov ecx,esi
	mov byte ptr [esp+0xF4],0x44
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xDC],bl
	test eax,eax
	je Block401

 Block400:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block401:
	mov esi,8
	mov byte ptr [esp+0xDC],0x42
	cmp word ptr [esp+0x74],si
	jne Block404

 Block402:
	xor eax,eax
	mov word ptr [esp+0x74],ax
	mov eax,dword ptr [esp+0x7C]
	test eax,eax
	je Block405

 Block403:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block405

 Block404:
	lea ecx,[esp+0x74]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block405:
	mov byte ptr [esp+0xDC],0x39
	cmp word ptr [esp+0x40],si
	jne Block408

 Block406:
	mov eax,dword ptr [esp+0x48]
	xor edx,edx
	mov word ptr [esp+0x40],dx
	test eax,eax
	je Block409

 Block407:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block409

 Block408:
	lea eax,[esp+0x40]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block409:
	mov ecx,dword ptr [esp+0xF4]
	mov edx,dword ptr [esp+0xEC]
	mov edi,dword ptr [esp+0x64]
	push 0
	push ecx
	push edx
	lea esi,[edi+0x20]
	push esi
	push 0xA
	mov ecx,ebp
	call CUIToolTip::DrawItemIcon
	cmp dword ptr [esp+0x50],0x12D
	je Block412

 Block410:
	cmp dword ptr [esp+0x70],0
	jne Block412

 Block411:
	push 1
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x70],esp
	push 0xA
	push eax
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x3C]
	push ecx
	push esi
	push 0x10E
	push 0x5C
	mov ecx,ebp
	call CUIToolTip::DrawTextSepartedLine
	mov ebx,dword ptr [esp+0x58]
	jmp Block417

 Block412:
	mov ebx,dword ptr [esp+0x58]
	test ebx,ebx
	je Block415

 Block413:
	cmp byte ptr [ebx],0
	je Block415

 Block414:
	xor eax,eax
	jmp Block416

 Block415:
	mov eax,1

 Block416:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edx,dword ptr [ecx+0x20E4]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFEC
	push 0x5C
	add eax,0x14
	add eax,dword ptr [esp+0x90]
	push 0
	push eax
	push 0
	push edx
	add ecx,0x20DC
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov eax,dword ptr [esp+0x84]
	push eax
	mov ecx,ebp
	call CUIToolTip::DrawTextEquip_Req
	push 1
	push 0
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push 0xA
	push ecx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [esp+0x3C]
	push edx
	lea eax,[edi+0x2C]
	push eax
	push 0x10E
	push 0x5C
	mov ecx,ebp
	call CUIToolTip::DrawTextSepartedLine

 Block417:
	mov ecx,dword ptr [esp+0x104]
	test ecx,ecx
	je Block422

 Block418:
	mov edx,dword ptr [esp+0x108]
	cmp ecx,edx
	je Block422

 Block419:
	cmp eax,0x44
	jge Block421

 Block420:
	mov eax,0x44

 Block421:
	push edx
	push ecx
	lea ecx,[eax+edi+0x28]
	push ecx
	mov ecx,ebp
	call CUIToolTip::DrawDiscount_Info

 Block422:
	cmp dword ptr [esp+0x10C],0
	je Block426

 Block423:
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block425

 Block424:
	mov eax,dword ptr [eax-4]

 Block425:
	mov ecx,dword ptr [ebp+8]
	shl eax,4
	sub ecx,eax
	sub ecx,dword ptr [esp+0x24]
	lea edx,[esp+0x14]
	push edx
	push ecx
	mov ecx,ebp
	call CUIToolTip::DrawLimitInfo

 Block426:
	mov eax,dword ptr [esp+0x118]
	test eax,eax
	je Block429

 Block427:
	mov ecx,dword ptr [esp+0x110]
	mov edx,dword ptr [ecx+0x18]
	or edx,dword ptr [ecx+0x1C]
	jne Block429

 Block428:
	push eax
	mov eax,dword ptr [ebp+8]
	sub eax,dword ptr [esp+0x28]
	mov ecx,ebp
	push eax
	call CUIToolTip::DrawNpcShopLimitedItemInfo

 Block429:
	mov esi,dword ptr [esp+0x120]
	test esi,esi
	je Block433

 Block430:
	mov ecx,dword ptr [esp+0x134]
	mov edx,dword ptr [esp+0x130]
	push ecx
	sub esp,8
	mov eax,esp
	mov dword ptr [eax+4],edx
	mov eax,dword ptr [esp+0x13C]
	mov dword ptr [esp+0x6C],esp
	test eax,eax
	je Block432

 Block431:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block432:
	mov eax,dword ptr [esp+0x134]
	mov ecx,dword ptr [esp+0x130]
	mov edx,dword ptr [ebp+8]
	sub edx,dword ptr [esp+0x3C]
	push eax
	push ecx
	push esi
	push edx
	mov ecx,ebp
	call CUIToolTip::DrawITCSaleInfo

 Block433:
	mov eax,dword ptr [esp+0x3C]
	mov byte ptr [esp+0xDC],0x36
	test eax,eax
	je Block435

 Block434:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block435:
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0xDC],0x2E
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xDC],0x1C
	test eax,eax
	je Block437

 Block436:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block437:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xDC],0x1B
	test eax,eax
	je Block439

 Block438:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block439:
	mov eax,dword ptr [esp+0x6C]
	mov byte ptr [esp+0xDC],0x19
	test eax,eax
	je Block441

 Block440:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block441:
	mov byte ptr [esp+0xDC],0x18
	test ebx,ebx
	je Block443

 Block442:
	add ebx,0xFFFFFFF4
	push ebx
	call ZXString<char>::_Release
	add esp,4

 Block443:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block445

 Block444:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block445:
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0xDC],1
	test eax,eax
	je Block447

 Block446:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block447:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xDC],0
	test eax,eax
	je Block449

 Block448:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block449:
	mov eax,dword ptr [esp+0x130]
	mov dword ptr [esp+0xDC],0xFFFFFFFF
	test eax,eax
	je Block453

 Block450:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block453

 Block451:
	mov eax,dword ptr [esp+0x130]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x130]
	test ecx,ecx
	je Block453

 Block452:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block453:
	mov ecx,dword ptr [esp+0xD4]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xCC
	ret 0x54
}
}
// CUIToolTip::DrawITCSaleInfo
_SUB_EXCEPTION_HANDLER(48E6A0)
__SUB_CLASS_THIS(0048E6A0, __thiscall, 5801,  CUIToolTip, void, long, long, _FILETIME*, const char*, NakedParam<ZRef<ITCITEM>>, CUIToolTip::eITCToolTip) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48E6A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x94
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xA8]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x50],edi
	xor ebx,ebx
	mov eax,3
	mov dword ptr [esp+0xB0],ebx
	mov word ptr [esp+0x88],ax
	mov dword ptr [esp+0x90],ebx
	mov ecx,dword ptr [edi+0x10]
	mov byte ptr [esp+0xB0],1
	cmp ecx,ebx
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[esp+0x88]
	push edx
	lea eax,[esp+0x50]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x88],8
	mov byte ptr [esp+0xB0],3
	jne Block5

 Block3:
	mov eax,dword ptr [esp+0x90]
	xor ecx,ecx
	mov word ptr [esp+0x88],cx
	cmp eax,ebx
	je Block6

 Block4:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block6

 Block5:
	lea edx,[esp+0x88]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block6:
	mov esi,dword ptr [esp+0x4C]
	cmp esi,ebx
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov eax,dword ptr [edi+0xC]
	mov edx,dword ptr [esp+0xB8]
	mov ecx,dword ptr [esi]
	push 0xFFFFFFFF
	push 1
	sub eax,0xC
	push eax
	mov eax,dword ptr [ecx+0x8C]
	add edx,0xFFFFFFFE
	push edx
	push 6
	push esi
	call eax
	cmp eax,ebx
	jge Block10

 Block9:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block10:
	mov edx,dword ptr [esp+0xC4]
	add dword ptr [esp+0xB8],4
	mov dword ptr [esp+0x54],ebx
	cmp edx,ebx
	je Block14

 Block11:
	mov eax,edx
	lea esi,[eax+1]
	mov edi,edi

 Block12:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block12

 Block13:
	sub eax,esi
	mov esi,eax
	push esi
	push edx
	push ebx
	push esi
	lea ecx,[esp+0x64]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x58]
	call ZXString<char>::ReleaseBuffer

 Block14:
	mov ecx,dword ptr [esp+0xCC]
	mov ebp,dword ptr [ZImports::_VariantInit]
	mov byte ptr [esp+0xB0],4
	cmp ecx,ebx
	je Block54

 Block15:
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block17

 Block16:
	cmp dword ptr [eax-4],0
	jne Block54

 Block17:
	cmp dword ptr [ecx+0x10],0
	jne Block54

 Block18:
	xor esi,esi
	lea ecx,[esp+0x30]
	push esi
	push ecx
	call get_basic_font
	add esp,8
	lea edx,[esp+0x14]
	push 0x12D5
	push edx
	mov byte ptr [esp+0xB8],5
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x2C],esi
	mov ecx,dword ptr [esp+0xBC]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x34]
	push edx
	mov byte ptr [esp+0xBC],7
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	mov dword ptr [esp+0x2C],esi
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xB0],9
	cmp eax,esi
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0xA
	cmp eax,esi
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block22:
	lea eax,[esp+0x58]
	push eax
	call ebp
	lea ecx,[esp+0x58]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block24

 Block23:
	push eax
	call _com_issue_error

 Block24:
	mov edi,dword ptr [esp+0x28]
	lea edx,[esp+0x58]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0xB
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x38]
	mov byte ptr [esp+0xB8],0xC
	test ecx,ecx
	jne Block26

 Block25:
	push 0x80004003
	call _com_issue_error

 Block26:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x58],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0xA
	jne Block29

 Block27:
	xor eax,eax
	mov word ptr [esp+0x58],ax
	mov eax,dword ptr [esp+0x60]
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea ecx,[esp+0x58]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block30:
	lea edx,[esp+0x68]
	push edx
	call ebp
	lea eax,[esp+0x68]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block32

 Block31:
	push eax
	call _com_issue_error

 Block32:
	lea ecx,[esp+0x58]
	push ecx
	mov byte ptr [esp+0xB4],0xD
	call ebp
	lea edx,[esp+0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block34

 Block33:
	push eax
	call _com_issue_error

 Block34:
	mov edx,dword ptr [esp+0x30]
	lea eax,[esp+0x68]
	push eax
	lea ecx,[esp+0x5C]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0xE
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0xC8]
	mov ecx,dword ptr [esp+0x60]
	push eax
	mov eax,dword ptr [ecx+0xC]
	mov ecx,dword ptr [esp+0x60]
	sub eax,esi
	cdq
	sub eax,edx
	sar eax,1
	mov byte ptr [esp+0xC4],0xF
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	mov esi,8
	mov byte ptr [esp+0xB0],0xD
	cmp word ptr [esp+0x58],si
	jne Block37

 Block35:
	mov eax,dword ptr [esp+0x60]
	xor edx,edx
	mov word ptr [esp+0x58],dx
	test eax,eax
	je Block38

 Block36:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block38

 Block37:
	lea eax,[esp+0x58]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block38:
	mov byte ptr [esp+0xB0],0xA
	cmp word ptr [esp+0x68],si
	jne Block41

 Block39:
	mov eax,dword ptr [esp+0x70]
	xor ecx,ecx
	mov word ptr [esp+0x68],cx
	test eax,eax
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea edx,[esp+0x68]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block42:
	mov eax,dword ptr [esp+0xCC]
	cmp dword ptr [eax+0x18],0
	je Block50

 Block43:
	mov ecx,dword ptr [esp+0x30]
	test ecx,ecx
	jne Block45

 Block44:
	push 0x80004003
	call _com_issue_error

 Block45:
	call IWzFont::GetfullHeight
	mov ecx,dword ptr [esp+0xB8]
	mov edx,dword ptr [esp+0xCC]
	mov esi,dword ptr [edx+0x18]
	lea ebp,[ecx+eax+1]
	lea eax,[esp+0x34]
	push 0x12B0
	push eax
	mov dword ptr [esp+0xC0],ebp
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi]
	mov edi,dword ptr [eax]
	mov eax,dword ptr [edx+0x20]
	mov ecx,esi
	mov byte ptr [esp+0xB0],0x10
	call eax
	push eax
	lea ecx,[esp+0x2C]
	push edi
	push ecx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x40]
	add esp,0xC
	mov byte ptr [esp+0xB0],0xA
	test eax,eax
	je Block47

 Block46:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block47:
	push offset _D_VTMISSING
	lea ecx,[esp+0x7C]
	call Ztl_variant_t::_ctor_1
	mov edi,dword ptr [esp+0x28]
	lea edx,[esp+0x78]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x11
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x38]
	mov byte ptr [esp+0xB8],0x12
	test ecx,ecx
	jne Block49

 Block48:
	push 0x80004003
	call _com_issue_error

 Block49:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	lea ecx,[esp+0x78]
	mov esi,eax
	mov byte ptr [esp+0xB0],0xA
	call Ztl_variant_t::~Ztl_variant_t
	push offset _D_VTMISSING
	lea ecx,[esp+0x1C]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[esp+0x7C]
	mov byte ptr [esp+0xB4],0x13
	call Ztl_variant_t::_ctor_1
	mov edx,dword ptr [esp+0x30]
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x7C]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x14
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x60]
	mov eax,dword ptr [eax+0xC]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x15
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	lea ecx,[esp+0x78]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x18]
	call Ztl_variant_t::~Ztl_variant_t

 Block50:
	mov byte ptr [esp+0xB0],5
	test edi,edi
	je Block52

 Block51:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block52:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xB0],4
	test eax,eax
	je Block54

 Block53:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block54:
	cmp dword ptr [esp+0x54],0
	je Block104

 Block55:
	mov eax,dword ptr [esp+0x54]
	cmp dword ptr [eax-4],0
	je Block104

 Block56:
	lea ecx,[esp+0x30]
	push 3
	push ecx
	call get_basic_font
	add esp,8
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xB0],0x16
	test eax,eax
	jne Block58

 Block57:
	push 0x80004003
	call _com_issue_error

 Block58:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x14]
	lea ecx,[esp+0x28]
	push ecx
	push eax
	mov esi,eax
	mov dword ptr [esp+0x30],0
	call edx
	test eax,eax
	jge Block60

 Block59:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block60:
	mov eax,dword ptr [esp+0x50]
	mov ebp,dword ptr [eax+0xC]
	xor esi,esi
	sub ebp,0x1E
	mov edi,1

 Block61:
	mov ecx,dword ptr [esp+0x54]
	mov edx,dword ptr [ecx-4]
	dec edx
	cmp edi,edx
	jge Block86

 Block62:
	cmp edi,0x64
	jge Block86

 Block63:
	lea eax,[esp+0x58]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x58]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block23

 Block64:
	lea edx,[esp+0x58]
	push edx
	push edi
	push esi
	lea eax,[esp+0x40]
	push eax
	lea ecx,[esp+0x64]
	mov byte ptr [esp+0xC0],0x17
	call ZXString<char>::Substring
	mov eax,dword ptr [eax]
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xBC],0x18
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x38]
	mov byte ptr [esp+0xB8],0x19
	test ecx,ecx
	je Block1

 Block65:
	mov byte ptr [esp+0xB8],0x18
	call IWzFont::CalcTextWidth
	mov ebx,eax
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x17
	test eax,eax
	je Block67

 Block66:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block67:
	cmp word ptr [esp+0x58],8
	mov byte ptr [esp+0xB0],0x16
	jne Block70

 Block68:
	mov eax,dword ptr [esp+0x60]
	xor ecx,ecx
	mov word ptr [esp+0x58],cx
	test eax,eax
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea edx,[esp+0x58]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block71:
	cmp ebx,ebp
	jle Block85

 Block72:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x3C]
	push eax
	call ebx
	lea ecx,[esp+0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block23

 Block73:
	lea edx,[esp+0x68]
	push edx
	mov byte ptr [esp+0xB4],0x1A
	call ebx
	lea eax,[esp+0x68]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block23

 Block74:
	mov eax,dword ptr [esp+0x30]
	lea ecx,[esp+0x3C]
	push ecx
	lea edx,[esp+0x6C]
	push edx
	push eax
	push edi
	push esi
	lea ecx,[esp+0x28]
	push ecx
	lea ecx,[esp+0x6C]
	mov byte ptr [esp+0xC8],0x1B
	call ZXString<char>::Substring
	mov eax,dword ptr [eax]
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xC4],0x1C
	call _xbstr_t::_ctor_0
	mov edx,dword ptr [esp+0x60]
	mov eax,dword ptr [edx+0xC]
	mov ebx,dword ptr [esp+0xC8]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,ebp
	cdq
	sub eax,edx
	push ebx
	sar eax,1
	mov byte ptr [esp+0xC4],0x1D
	push eax
	mov byte ptr [esp+0xC8],0x1C
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x1B
	test eax,eax
	je Block76

 Block75:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block76:
	mov esi,8
	mov byte ptr [esp+0xB0],0x1A
	cmp word ptr [esp+0x68],si
	jne Block79

 Block77:
	xor eax,eax
	mov word ptr [esp+0x68],ax
	mov eax,dword ptr [esp+0x70]
	test eax,eax
	je Block80

 Block78:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block80

 Block79:
	lea ecx,[esp+0x68]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block80:
	mov byte ptr [esp+0xB0],0x16
	cmp word ptr [esp+0x3C],si
	jne Block83

 Block81:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block84

 Block82:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	add ebx,dword ptr [esp+0x28]
	mov esi,edi
	mov dword ptr [esp+0xB8],ebx
	inc edi
	jmp Block61

 Block83:
	lea eax,[esp+0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block84:
	add ebx,dword ptr [esp+0x28]
	mov esi,edi
	mov dword ptr [esp+0xB8],ebx

 Block85:
	inc edi
	jmp Block61

 Block86:
	cmp esi,edi
	jge Block102

 Block87:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x58]
	push ecx
	call edi
	lea edx,[esp+0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block89

 Block88:
	push eax
	call _com_issue_error

 Block89:
	lea eax,[esp+0x3C]
	push eax
	mov byte ptr [esp+0xB4],0x1E
	call edi
	lea ecx,[esp+0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block91

 Block90:
	push eax
	call _com_issue_error

 Block91:
	mov ecx,dword ptr [esp+0x30]
	lea edx,[esp+0x58]
	push edx
	lea eax,[esp+0x40]
	push eax
	push ecx
	push 0xFFFFFFFF
	push esi
	lea edx,[esp+0x48]
	push edx
	lea ecx,[esp+0x6C]
	mov byte ptr [esp+0xC8],0x1F
	call ZXString<char>::Substring
	mov eax,dword ptr [eax]
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	mov bl,0x20
	push eax
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x60]
	mov eax,dword ptr [eax+0xC]
	mov esi,dword ptr [esp+0xC8]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,ebp
	cdq
	sub eax,edx
	push esi
	sar eax,1
	mov byte ptr [esp+0xC4],0x21
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x1F
	test eax,eax
	je Block93

 Block92:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block93:
	mov edi,8
	mov byte ptr [esp+0xB0],0x1E
	cmp word ptr [esp+0x3C],di
	jne Block96

 Block94:
	mov eax,dword ptr [esp+0x44]
	xor ecx,ecx
	mov word ptr [esp+0x3C],cx
	test eax,eax
	je Block97

 Block95:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block97

 Block96:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block97:
	mov byte ptr [esp+0xB0],0x16
	cmp word ptr [esp+0x58],di
	jne Block100

 Block98:
	xor eax,eax
	mov word ptr [esp+0x58],ax
	mov eax,dword ptr [esp+0x60]
	test eax,eax
	je Block101

 Block99:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block101

 Block100:
	lea ecx,[esp+0x58]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block101:
	add esi,dword ptr [esp+0x28]
	mov dword ptr [esp+0xB8],esi

 Block102:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xB0],4
	test eax,eax
	je Block104

 Block103:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block104:
	mov eax,dword ptr [esp+0xCC]
	test eax,eax
	je Block312

 Block105:
	cmp dword ptr [eax+0x10],0
	jle Block312

 Block106:
	xor edi,edi
	lea ecx,[esp+0x2C]
	push edi
	push ecx
	call get_basic_font
	add esp,8
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xB0],0x22
	cmp eax,edi
	jne Block108

 Block107:
	push 0x80004003
	call _com_issue_error

 Block108:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x18]
	lea ecx,[esp+0x30]
	push ecx
	push eax
	mov esi,eax
	mov dword ptr [esp+0x38],edi
	call edx
	cmp eax,edi
	jge Block110

 Block109:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block110:
	mov eax,dword ptr [esp+0x30]
	add eax,2
	mov dword ptr [esp+0x30],eax
	mov dword ptr [esp+0x28],edi
	cmp dword ptr [esp+0xD0],2
	mov byte ptr [esp+0xB0],0x23
	jne Block232

 Block111:
	mov ecx,dword ptr [esp+0xCC]
	mov ecx,dword ptr [ecx+0x18]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x20]
	call eax
	lea ecx,[esp+0x34]
	push 0x12B0
	push ecx
	mov ebp,eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],0
	mov eax,dword ptr [eax]
	push ebp
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0xBC],0x25
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x24
	test eax,eax
	je Block113

 Block112:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block113:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	test eax,eax
	je Block115

 Block114:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block115:
	lea eax,[esp+0x3C]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block117

 Block116:
	push eax
	call _com_issue_error

 Block117:
	mov edi,dword ptr [esp+0x28]
	lea edx,[esp+0x3C]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x26
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x27
	test ecx,ecx
	jne Block119

 Block118:
	push 0x80004003
	call _com_issue_error

 Block119:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x3C],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block122

 Block120:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	test eax,eax
	je Block123

 Block121:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block123

 Block122:
	lea ecx,[esp+0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block123:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x18]
	push edx
	call ebx
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block125

 Block124:
	push eax
	call _com_issue_error

 Block125:
	lea ecx,[esp+0x3C]
	push ecx
	mov byte ptr [esp+0xB4],0x28
	call ebx
	lea edx,[esp+0x3C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block127

 Block126:
	push eax
	call _com_issue_error

 Block127:
	mov edx,dword ptr [esp+0x2C]
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x40]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x29
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0xC8]
	mov ecx,dword ptr [esp+0x60]
	push eax
	mov eax,dword ptr [ecx+0xC]
	mov ecx,dword ptr [esp+0x60]
	sub eax,esi
	cdq
	sub eax,edx
	sar eax,1
	mov byte ptr [esp+0xC4],0x2A
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x28
	jne Block130

 Block128:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block131

 Block129:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block131

 Block130:
	lea eax,[esp+0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block131:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x23
	jne Block134

 Block132:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block135

 Block133:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block135

 Block134:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block135:
	mov eax,dword ptr [esp+0x30]
	add dword ptr [esp+0xB8],eax
	lea ecx,[esp+0x34]
	push 0x12AC
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],0
	mov ecx,dword ptr [eax]
	mov esi,dword ptr [esp+0xCC]
	mov eax,dword ptr [esi+0xFC]
	cdq
	idiv ebp
	lea edx,[esp+0x14]
	mov byte ptr [esp+0xB0],0x2C
	add eax,dword ptr [esi+0x10C]
	push eax
	push ecx
	push edx
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x2B
	test eax,eax
	je Block137

 Block136:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block137:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	test eax,eax
	je Block139

 Block138:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block139:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block141

 Block140:
	push eax
	call _com_issue_error

 Block141:
	mov edi,dword ptr [esp+0x28]
	lea edx,[esp+0x18]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x2D
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x2E
	test ecx,ecx
	jne Block143

 Block142:
	push 0x80004003
	call _com_issue_error

 Block143:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block146

 Block144:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block147

 Block145:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block147

 Block146:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block147:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x3C]
	push edx
	call ebx
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block149

 Block148:
	push eax
	call _com_issue_error

 Block149:
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0xB4],0x2F
	call ebx
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block151

 Block150:
	push eax
	call _com_issue_error

 Block151:
	mov edx,dword ptr [esp+0x2C]
	lea eax,[esp+0x3C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x30
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x60]
	mov eax,dword ptr [eax+0xC]
	mov ebp,dword ptr [esp+0xC8]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x31
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x2F
	jne Block154

 Block152:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block155

 Block153:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block155

 Block154:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block155:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x23
	jne Block158

 Block156:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	test eax,eax
	je Block159

 Block157:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block159

 Block158:
	lea ecx,[esp+0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block159:
	add ebp,dword ptr [esp+0x30]
	lea edx,[esp+0x34]
	push 0x12AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],0
	mov ecx,dword ptr [esp+0xCC]
	movsx edx,word ptr [ecx+0xC]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xBC],0x33
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x32
	test eax,eax
	je Block161

 Block160:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block161:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	test eax,eax
	je Block163

 Block162:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block163:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block165

 Block164:
	push eax
	call _com_issue_error

 Block165:
	mov edi,dword ptr [esp+0x28]
	lea eax,[esp+0x18]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x34
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x35
	test ecx,ecx
	jne Block167

 Block166:
	push 0x80004003
	call _com_issue_error

 Block167:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block170

 Block168:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block171

 Block169:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block171

 Block170:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block171:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x3C]
	push eax
	call ebx
	lea ecx,[esp+0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block173

 Block172:
	push eax
	call _com_issue_error

 Block173:
	lea edx,[esp+0x18]
	push edx
	mov byte ptr [esp+0xB4],0x36
	call ebx
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block175

 Block174:
	push eax
	call _com_issue_error

 Block175:
	mov eax,dword ptr [esp+0x2C]
	lea ecx,[esp+0x3C]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	push eax
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x37
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x60]
	mov eax,dword ptr [ecx+0xC]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x38
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x36
	jne Block178

 Block176:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block179

 Block177:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block179

 Block178:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block179:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x23
	jne Block182

 Block180:
	mov eax,dword ptr [esp+0x44]
	xor ecx,ecx
	mov word ptr [esp+0x3C],cx
	test eax,eax
	je Block183

 Block181:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block183

 Block182:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block183:
	add ebp,dword ptr [esp+0x30]
	lea eax,[esp+0x34]
	push 0x12A8
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],0
	mov esi,dword ptr [eax]
	mov ecx,dword ptr [esp+0xCC]
	mov ecx,dword ptr [ecx+0x108]
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea ecx,[eax+ecx+0x64]
	push ecx
	lea edx,[esp+0x18]
	push esi
	push edx
	mov byte ptr [esp+0xBC],0x3A
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x39
	test eax,eax
	je Block185

 Block184:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block185:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	test eax,eax
	je Block187

 Block186:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block187:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block189

 Block188:
	push eax
	call _com_issue_error

 Block189:
	mov edi,dword ptr [esp+0x28]
	lea edx,[esp+0x18]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x3B
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x3C
	test ecx,ecx
	jne Block191

 Block190:
	push 0x80004003
	call _com_issue_error

 Block191:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block194

 Block192:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block195

 Block193:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block195

 Block194:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block195:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x3C]
	push edx
	call ebx
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block197

 Block196:
	push eax
	call _com_issue_error

 Block197:
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0xB4],0x3D
	call ebx
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block199

 Block198:
	push eax
	call _com_issue_error

 Block199:
	mov edx,dword ptr [esp+0x2C]
	lea eax,[esp+0x3C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x3E
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x60]
	mov eax,dword ptr [eax+0xC]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x3F
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x3D
	jne Block202

 Block200:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block203

 Block201:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block203

 Block202:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block203:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x23
	jne Block206

 Block204:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	test eax,eax
	je Block207

 Block205:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block207

 Block206:
	lea ecx,[esp+0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block207:
	add ebp,dword ptr [esp+0x30]
	lea edx,[esp+0x34]
	push 0x12A5
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],0
	mov ecx,dword ptr [esp+0xCC]
	mov edx,dword ptr [ecx+0xFC]
	add edx,dword ptr [ecx+0x10]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xBC],0x41
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x40
	test eax,eax
	je Block209

 Block208:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block209:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	test eax,eax
	je Block211

 Block210:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block211:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block213

 Block212:
	push eax
	call _com_issue_error

 Block213:
	mov edi,dword ptr [esp+0x28]
	lea eax,[esp+0x18]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x42
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x43
	test ecx,ecx
	jne Block215

 Block214:
	push 0x80004003
	call _com_issue_error

 Block215:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block218

 Block216:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block219

 Block217:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block219

 Block218:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block219:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x3C]
	push eax
	call ebx
	lea ecx,[esp+0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block221

 Block220:
	push eax
	call _com_issue_error

 Block221:
	lea edx,[esp+0x18]
	push edx
	mov byte ptr [esp+0xB4],0x44
	call ebx
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block223

 Block222:
	push eax
	call _com_issue_error

 Block223:
	mov eax,dword ptr [esp+0x2C]
	lea ecx,[esp+0x3C]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	push eax
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x45
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x60]
	mov eax,dword ptr [ecx+0xC]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x46
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x44
	jne Block226

 Block224:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block227

 Block225:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block227

 Block226:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block227:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x23
	jne Block230

 Block228:
	mov eax,dword ptr [esp+0x44]
	xor ecx,ecx
	mov word ptr [esp+0x3C],cx
	test eax,eax
	je Block231

 Block229:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	add ebp,dword ptr [esp+0x30]
	jmp Block281

 Block230:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block231:
	add ebp,dword ptr [esp+0x30]
	jmp Block281

 Block232:
	mov eax,dword ptr [esp+0xCC]
	mov ecx,dword ptr [eax+0x18]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x20]
	call eax
	lea ecx,[esp+0x34]
	push 0x12B0
	push ecx
	mov esi,eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],edi
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0xBC],0x48
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x47
	cmp eax,edi
	je Block234

 Block233:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block234:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	cmp eax,edi
	je Block236

 Block235:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block236:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	push eax
	call ebp
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block238

 Block237:
	push eax
	call _com_issue_error

 Block238:
	mov edi,dword ptr [esp+0x28]
	lea edx,[esp+0x18]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x49
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x4A
	test ecx,ecx
	jne Block240

 Block239:
	push 0x80004003
	call _com_issue_error

 Block240:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block243

 Block241:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block244

 Block242:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block244

 Block243:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block244:
	lea edx,[esp+0x3C]
	push edx
	call ebp
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block246

 Block245:
	push eax
	call _com_issue_error

 Block246:
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0xB4],0x4B
	call ebp
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block248

 Block247:
	push eax
	call _com_issue_error

 Block248:
	mov edx,dword ptr [esp+0x2C]
	lea eax,[esp+0x3C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	push edx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x4C
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x60]
	mov eax,dword ptr [eax+0xC]
	mov ebp,dword ptr [esp+0xC8]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x4D
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x4B
	jne Block251

 Block249:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block252

 Block250:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block252

 Block251:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block252:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x23
	jne Block255

 Block253:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	test eax,eax
	je Block256

 Block254:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block256

 Block255:
	lea ecx,[esp+0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block256:
	add ebp,dword ptr [esp+0x30]
	lea edx,[esp+0x34]
	push 0x12D6
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],0
	mov ecx,dword ptr [esp+0xCC]
	mov edx,dword ptr [ecx+0x10]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xBC],0x4F
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x4E
	test eax,eax
	je Block258

 Block257:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block258:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	test eax,eax
	je Block260

 Block259:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block260:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block262

 Block261:
	push eax
	call _com_issue_error

 Block262:
	mov edi,dword ptr [esp+0x28]
	lea eax,[esp+0x18]
	push eax
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x50
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x51
	test ecx,ecx
	jne Block264

 Block263:
	push 0x80004003
	call _com_issue_error

 Block264:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block267

 Block265:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block268

 Block266:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block268

 Block267:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block268:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x3C]
	push eax
	call ebx
	lea ecx,[esp+0x3C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block270

 Block269:
	push eax
	call _com_issue_error

 Block270:
	lea edx,[esp+0x18]
	push edx
	mov byte ptr [esp+0xB4],0x52
	call ebx
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block272

 Block271:
	push eax
	call _com_issue_error

 Block272:
	mov eax,dword ptr [esp+0x2C]
	lea ecx,[esp+0x3C]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	push eax
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x53
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x60]
	mov eax,dword ptr [ecx+0xC]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x54
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x52
	jne Block275

 Block273:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block276

 Block274:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block276

 Block275:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block276:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x23
	jne Block279

 Block277:
	mov eax,dword ptr [esp+0x44]
	xor ecx,ecx
	mov word ptr [esp+0x3C],cx
	test eax,eax
	je Block280

 Block278:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block280

 Block279:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block280:
	add ebp,dword ptr [esp+0x30]
	mov dword ptr [esp+0xB8],ebp

 Block281:
	mov ecx,dword ptr [_D_G_PSTAGE+4]
	lea eax,[esp+0x18]
	push eax
	call CITC::GetCorrectTime
	mov ecx,dword ptr [eax]
	mov esi,dword ptr [ZImports::_SystemTimeToFileTime]
	mov dword ptr [esp+0x78],ecx
	mov edx,dword ptr [eax+4]
	mov dword ptr [esp+0x7C],edx
	mov ecx,dword ptr [eax+8]
	mov dword ptr [esp+0x80],ecx
	mov edx,dword ptr [eax+0xC]
	lea eax,[esp+0x68]
	push eax
	lea ecx,[esp+0x7C]
	push ecx
	mov dword ptr [esp+0x8C],edx
	call esi
	mov eax,dword ptr [esp+0xC0]
	lea edx,[esp+0x98]
	push edx
	push eax
	call FileTimeToSystemTime
	lea ecx,[esp+0x58]
	push ecx
	lea edx,[esp+0x9C]
	push edx
	call esi
	mov ecx,dword ptr [esp+0x5C]
	mov esi,dword ptr [esp+0x6C]
	cmp ecx,esi
	jb Block308

 Block282:
	mov edx,dword ptr [esp+0x68]
	mov eax,dword ptr [esp+0x58]
	ja Block284

 Block283:
	cmp eax,edx
	jbe Block308

 Block284:
	push 8
	sub eax,edx
	push 0x61C46800
	sbb ecx,esi
	push ecx
	push eax
	call __aulldvrm
	push 0
	push 0x23C34600
	push ebx
	push ecx
	mov esi,eax
	mov dword ptr [esp+0x48],edx
	call __aulldiv
	mov edi,eax
	lea eax,[esp+0x34]
	push 0x12A6
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x14],0
	mov eax,dword ptr [eax]
	push edi
	push esi
	push eax
	lea ecx,[esp+0x20]
	push ecx
	mov byte ptr [esp+0xC0],0x56
	call ZXString<char>::Format
	add esp,0x10
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB0],0x55
	test eax,eax
	je Block286

 Block285:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block286:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB0],0x23
	test eax,eax
	je Block288

 Block287:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block288:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block290

 Block289:
	push eax
	call _com_issue_error

 Block290:
	mov edi,dword ptr [esp+0x28]
	lea ecx,[esp+0x18]
	push ecx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x57
	push edi
	mov byte ptr [esp+0xBC],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0xB8],0x58
	test ecx,ecx
	jne Block292

 Block291:
	push 0x80004003
	call _com_issue_error

 Block292:
	mov byte ptr [esp+0xB8],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov esi,eax
	mov byte ptr [esp+0xB0],0x23
	jne Block295

 Block293:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block296

 Block294:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block296

 Block295:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block296:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x3C]
	push ecx
	call ebx
	lea edx,[esp+0x3C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block298

 Block297:
	push eax
	call _com_issue_error

 Block298:
	lea eax,[esp+0x18]
	push eax
	mov byte ptr [esp+0xB4],0x59
	call ebx
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block300

 Block299:
	push eax
	call _com_issue_error

 Block300:
	mov ecx,dword ptr [esp+0x2C]
	lea edx,[esp+0x3C]
	push edx
	lea eax,[esp+0x1C]
	push eax
	push ecx
	push ecx
	mov dword ptr [esp+0x44],esp
	mov ecx,esp
	mov bl,0x5A
	push edi
	mov byte ptr [esp+0xC4],bl
	call _xbstr_t::_ctor_0
	mov edx,dword ptr [esp+0x60]
	mov eax,dword ptr [edx+0xC]
	mov ecx,dword ptr [esp+0x5C]
	sub eax,esi
	cdq
	sub eax,edx
	push ebp
	sar eax,1
	mov byte ptr [esp+0xC4],0x5B
	push eax
	mov byte ptr [esp+0xC8],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xB0],0x59
	jne Block303

 Block301:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block304

 Block302:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block304

 Block303:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block304:
	cmp word ptr [esp+0x3C],8
	mov byte ptr [esp+0xB0],0x23
	jne Block307

 Block305:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block308

 Block306:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block308

 Block307:
	lea eax,[esp+0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block308:
	mov byte ptr [esp+0xB0],0x22
	test edi,edi
	je Block310

 Block309:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block310:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xB0],4
	test eax,eax
	je Block312

 Block311:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block312:
	mov eax,dword ptr [esp+0x54]
	mov byte ptr [esp+0xB0],3
	test eax,eax
	je Block314

 Block313:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block314:
	mov eax,dword ptr [esp+0x4C]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0xB4],0
	call edx
	mov eax,dword ptr [esp+0xCC]
	mov dword ptr [esp+0xB0],0xFFFFFFFF
	test eax,eax
	je Block318

 Block315:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block318

 Block316:
	mov eax,dword ptr [esp+0xCC]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0xCC]
	test ecx,ecx
	je Block318

 Block317:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block318:
	mov ecx,dword ptr [esp+0xA8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xA0
	ret 0x1C
}
}
// CUIToolTip::ClearToolTip
__SUB_CLASS_THIS0(00480F20, __thiscall, 5685,  CUIToolTip, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	push edi
	xor edi,edi
	mov dword ptr [esi+4],edi
	mov dword ptr [esi+8],edi
	mov dword ptr [esi+0xC],edi
	mov eax,dword ptr [esi+0x10]
	cmp eax,edi
	je Block2

 Block1:
	mov dword ptr [esi+0x10],edi
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	mov eax,dword ptr [esi+0x14]
	cmp eax,edi
	je Block4

 Block3:
	mov dword ptr [esi+0x14],edi
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block4:
	mov dword ptr [esi+0x20],edi
	mov dword ptr [esi+0x4A8],edi
	lea eax,[esi+0x38]
	mov ecx,0x20

 Block5:
	mov dword ptr [eax-0x10],edi
	mov dword ptr [eax-0x14],edi
	mov dword ptr [eax],edi
	mov dword ptr [eax+0x478],edi
	mov dword ptr [eax+0x474],edi
	mov dword ptr [eax+0x488],edi
	add eax,0x24
	sub ecx,1
	jne Block5

 Block6:
	pop edi
	pop esi
	ret
}
}
// CUIToolTip::GetItemName
_SUB_EXCEPTION_HANDLER(4899B0)
__SUB_CLASS_THIS(004899B0, __thiscall, 5787,  CUIToolTip, void, GW_ItemSlotEquip*, ZXString<char>&, long&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4899B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x1C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x30]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x1C],ecx
	mov esi,dword ptr [esp+0x40]
	test esi,esi
	je Block46

 Block1:
	lea ebp,[esi+0xC]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov edi,eax
	test edi,edi
	je Block46

 Block2:
	xor ebx,ebx
	mov dword ptr [esp+0x40],ebx
	mov ecx,ebp
	mov dword ptr [esp+0x38],ebx
	call TSecType<long>::GetData
	push eax
	call get_gender_from_id
	add esp,4
	sub eax,ebx
	je Block5

 Block3:
	sub eax,1
	jne Block9

 Block4:
	lea eax,[esp+0x14]
	push 0x3C3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0x3C],2
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	jmp Block6

 Block5:
	lea ecx,[esp+0x18]
	push 0x3C2
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0x3C],1
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]

 Block6:
	mov byte ptr [esp+0x38],0
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block8:
	mov ebx,dword ptr [esp+0x40]

 Block9:
	mov edx,dword ptr [esi+0x51]
	push edx
	lea eax,[esi+0x4F]
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	test al,al
	ja Block17

 Block10:
	test ebx,ebx
	je Block12

 Block11:
	cmp byte ptr [ebx],0
	jne Block13

 Block12:
	lea ecx,[esp+0x18]
	push 0x1A19
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [edi+0x10]
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esp+0x44]
	push edx
	push eax
	push edi
	mov byte ptr [esp+0x44],3
	call ZXString<char>::Format
	add esp,0xC
	jmp Block14

 Block13:
	lea eax,[esp+0x18]
	push 0x1A1A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [edi+0x10]
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esp+0x44]
	push ebx
	push ecx
	push eax
	push edi
	mov byte ptr [esp+0x48],4
	call ZXString<char>::Format
	add esp,0x10

 Block14:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x38],0
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov ebp,dword ptr [esp+0x48]
	mov dword ptr [ebp],1
	jmp Block24

 Block17:
	test ebx,ebx
	je Block19

 Block18:
	cmp byte ptr [ebx],0
	jne Block20

 Block19:
	lea edx,[esp+0x18]
	push 0x828
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,eax
	mov eax,dword ptr [esi+0x51]
	push eax
	lea ecx,[esi+0x4F]
	push ecx
	mov byte ptr [esp+0x40],5
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov ebp,dword ptr [ebp]
	movzx edx,al
	mov eax,dword ptr [edi+0x10]
	mov edi,dword ptr [esp+0x4C]
	push edx
	push eax
	push ebp
	push edi
	call ZXString<char>::Format
	add esp,0x18
	jmp Block21

 Block20:
	lea ecx,[esp+0x18]
	push 0x829
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,eax
	mov edx,dword ptr [esi+0x51]
	push edx
	lea eax,[esi+0x4F]
	push eax
	mov byte ptr [esp+0x40],6
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov edx,dword ptr [edi+0x10]
	mov ebp,dword ptr [ebp]
	mov edi,dword ptr [esp+0x4C]
	push ebx
	movzx ecx,al
	push ecx
	push edx
	push ebp
	push edi
	call ZXString<char>::Format
	add esp,0x1C

 Block21:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x38],0
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	mov ebp,dword ptr [esp+0x48]
	mov dword ptr [ebp],3

 Block24:
	sub esp,8
	mov eax,esp
	mov dword ptr [eax+4],esi
	mov dword ptr [esp+0x4C],esp
	add esi,4
	push esi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::CalcEquipItemQuality
	inc eax
	cmp eax,6
	ja Block32

 Block25:
	cmp EAX, 0
je Block26
cmp EAX, 1
je Block32
cmp EAX, 2
je Block27
cmp EAX, 3
je Block28
cmp EAX, 4
je Block29
cmp EAX, 5
je Block30
cmp EAX, 6
je Block31


 Block26:
	mov dword ptr [ebp],4
	jmp Block32

 Block27:
	mov dword ptr [ebp],5
	jmp Block32

 Block28:
	mov dword ptr [ebp],6
	jmp Block32

 Block29:
	mov dword ptr [ebp],2
	jmp Block32

 Block30:
	mov dword ptr [ebp],8
	jmp Block32

 Block31:
	mov dword ptr [ebp],9

 Block32:
	lea eax,[esp+0x20]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x20]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block34

 Block33:
	push eax
	call _com_issue_error

 Block34:
	mov edi,dword ptr [edi]
	lea edx,[esp+0x20]
	push edx
	push ecx
	mov dword ptr [esp+0x50],esp
	mov ecx,esp
	mov bl,7
	push edi
	mov byte ptr [esp+0x44],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [ebp]
	mov esi,dword ptr [esp+0x24]
	push eax
	lea ecx,[esp+0x50]
	push ecx
	mov ecx,esi
	mov byte ptr [esp+0x48],8
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x40],9
	test ecx,ecx
	jne Block36

 Block35:
	push 0x80004003
	call _com_issue_error

 Block36:
	mov byte ptr [esp+0x40],0xA
	call IWzFont::CalcTextWidth
	mov edi,eax
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0x38],bl
	test eax,eax
	je Block38

 Block37:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block38:
	cmp word ptr [esp+0x20],8
	mov byte ptr [esp+0x38],0
	jne Block41

 Block39:
	mov eax,dword ptr [esp+0x28]
	xor ecx,ecx
	mov word ptr [esp+0x20],cx
	test eax,eax
	je Block42

 Block40:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block42

 Block41:
	lea edx,[esp+0x20]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block42:
	lea eax,[edi+0x14]
	cmp dword ptr [esi+0xC],eax
	jge Block44

 Block43:
	mov dword ptr [esi+0xC],eax

 Block44:
	mov eax,dword ptr [esp+0x40]
	mov dword ptr [esp+0x38],0xFFFFFFFF
	test eax,eax
	je Block46

 Block45:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block46:
	mov ecx,dword ptr [esp+0x30]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x28
	ret 0xC
}
}
// CUIToolTip::DrawNpcShopLimitedItemInfo
_SUB_EXCEPTION_HANDLER(491530)
__SUB_CLASS_THIS(00491530, __thiscall, 5755,  CUIToolTip, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_491530
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x5C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x70]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x1C],edi
	mov eax,3
	xor ebp,ebp
	mov word ptr [esp+0x30],ax
	mov dword ptr [esp+0x38],ebp
	mov ecx,dword ptr [edi+0x10]
	mov dword ptr [esp+0x78],ebp
	cmp ecx,ebp
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x1C]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x78],1
	cmp esi,ebp
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	mov eax,dword ptr [edi+0xC]
	mov edx,dword ptr [esp+0x80]
	mov ecx,dword ptr [esi]
	push 0xFFFFFFFF
	push 1
	sub eax,0xC
	push eax
	mov eax,dword ptr [ecx+0x8C]
	push edx
	push 6
	push esi
	call eax
	cmp eax,ebp
	jge Block6

 Block5:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block6:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],0
	cmp eax,ebp
	je Block8

 Block7:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block8:
	cmp word ptr [esp+0x30],8
	mov dword ptr [esp+0x78],0xFFFFFFFF
	jne Block11

 Block9:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	cmp eax,ebp
	je Block12

 Block10:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block12

 Block11:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block12:
	mov ecx,dword ptr [esp+0x84]
	xor ebx,ebx
	xor esi,esi
	cmp ecx,0x3B
	mov dword ptr [esp+0x14],ebx
	jle Block15

 Block13:
	mov eax,0x88888889
	imul ecx
	add edx,ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov edx,eax
	shl edx,4
	sub edx,eax
	add edx,edx
	add edx,edx
	sub ecx,edx
	mov esi,eax
	cmp esi,0x17
	mov edi,ecx
	jle Block16

 Block14:
	mov eax,0x2AAAAAAB
	imul esi
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov ecx,eax
	imul ecx,0xFFFFFFE8
	add esi,ecx
	mov dword ptr [esp+0x14],eax
	mov ebx,eax
	jmp Block16

 Block15:
	mov edi,ecx

 Block16:
	mov dword ptr [esp+0x84],ebp
	mov dword ptr [esp+0x78],2
	cmp edi,ebp
	je Block21

 Block17:
	lea edx,[esp+0x20]
	push 0x154D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x18],ebp
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea eax,[esp+0x20]
	push eax
	mov byte ptr [esp+0x84],4
	call ZXString<unsigned short>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x88]
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],3
	cmp eax,ebp
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block19:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x78],2
	cmp eax,ebp
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block21:
	cmp esi,ebp
	je Block34

 Block22:
	mov eax,dword ptr [esp+0x84]
	cmp eax,ebp
	je Block24

 Block23:
	cmp word ptr [eax],bp
	jne Block27

 Block24:
	lea ecx,[esp+0x20]
	push 0x154C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x18],ebp
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x84],6
	call ZXString<unsigned short>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x88]
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],5
	cmp eax,ebp
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block26:
	mov eax,dword ptr [esp+0x20]
	jmp Block32

 Block27:
	lea eax,[esp+0x24]
	push 0x154C
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x18],ebp
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x84]
	push ecx
	lea edx,[esp+0x24]
	push edx
	push esi
	push eax
	lea eax,[esp+0x28]
	push eax
	mov byte ptr [esp+0x8C],8
	call ZXString<unsigned short>::Format
	add esp,0xC
	mov ecx,eax
	call ZXString<unsigned short>::op_add_1
	push eax
	lea ecx,[esp+0x88]
	mov byte ptr [esp+0x7C],9
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x78],8
	cmp eax,ebp
	je Block29

 Block28:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block29:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],7
	cmp eax,ebp
	je Block31

 Block30:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block31:
	mov eax,dword ptr [esp+0x24]

 Block32:
	mov byte ptr [esp+0x78],2
	cmp eax,ebp
	je Block34

 Block33:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block34:
	cmp ebx,ebp
	je Block47

 Block35:
	mov eax,dword ptr [esp+0x84]
	cmp eax,ebp
	je Block37

 Block36:
	cmp word ptr [eax],bp
	jne Block40

 Block37:
	lea ecx,[esp+0x24]
	push 0x154B
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x18],ebp
	mov eax,dword ptr [eax]
	push ebx
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x84],0xB
	call ZXString<unsigned short>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x88]
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],0xA
	cmp eax,ebp
	je Block39

 Block38:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block39:
	mov eax,dword ptr [esp+0x24]
	jmp Block45

 Block40:
	lea eax,[esp+0x20]
	push 0x154B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x18],ebp
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x84]
	push ecx
	mov ecx,dword ptr [esp+0x18]
	lea edx,[esp+0x28]
	push edx
	push ecx
	push eax
	lea edx,[esp+0x28]
	mov bl,0xD
	push edx
	mov byte ptr [esp+0x8C],bl
	call ZXString<unsigned short>::Format
	add esp,0xC
	mov ecx,eax
	call ZXString<unsigned short>::op_add_1
	push eax
	lea ecx,[esp+0x88]
	mov byte ptr [esp+0x7C],0xE
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x78],bl
	cmp eax,ebp
	je Block42

 Block41:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block42:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],0xC
	cmp eax,ebp
	je Block44

 Block43:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block44:
	mov eax,dword ptr [esp+0x20]

 Block45:
	mov byte ptr [esp+0x78],2
	cmp eax,ebp
	je Block47

 Block46:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block47:
	mov eax,dword ptr [esp+0x1C]
	mov edi,dword ptr [eax+0x968]
	mov dword ptr [esp+0x28],edi
	cmp edi,ebp
	je Block49

 Block48:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+4]
	push edi
	call edx

 Block49:
	lea eax,[esp+0x24]
	push 0x154A
	push eax
	mov byte ptr [esp+0x80],0xF
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov dword ptr [esp+0x18],ebp
	mov ecx,dword ptr [esp+0x84]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0x84],0x11
	call ZXString<unsigned short>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x18],ebp
	call ZXString<unsigned short>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x78],0x13
	cmp eax,ebp
	je Block51

 Block50:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block51:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x78],0x14
	cmp eax,ebp
	je Block53

 Block52:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block53:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x30]
	push eax
	call esi
	lea ecx,[esp+0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block55

 Block54:
	push eax
	call _com_issue_error

 Block55:
	mov eax,dword ptr [esp+0x14]
	lea edx,[esp+0x30]
	push edx
	push ecx
	mov dword ptr [esp+0x28],esp
	mov ecx,esp
	mov bl,0x15
	push eax
	mov byte ptr [esp+0x84],bl
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x80],0x16
	cmp edi,ebp
	jne Block57

 Block56:
	push 0x80004003
	call _com_issue_error

 Block57:
	mov ecx,edi
	mov byte ptr [esp+0x80],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x30],8
	mov ebp,eax
	mov byte ptr [esp+0x78],0x14
	jne Block60

 Block58:
	mov eax,dword ptr [esp+0x38]
	xor ecx,ecx
	mov word ptr [esp+0x30],cx
	test eax,eax
	je Block61

 Block59:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block61

 Block60:
	lea edx,[esp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block61:
	lea eax,[esp+0x60]
	push eax
	call esi
	lea ecx,[esp+0x60]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block63

 Block62:
	push eax
	call _com_issue_error

 Block63:
	lea edx,[esp+0x50]
	push edx
	mov byte ptr [esp+0x7C],0x17
	call esi
	lea eax,[esp+0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block65

 Block64:
	push eax
	call _com_issue_error

 Block65:
	mov ecx,3
	mov word ptr [esp+0x40],cx
	mov dword ptr [esp+0x48],0
	lea edx,[esp+0x60]
	push edx
	mov edx,dword ptr [esp+0x18]
	lea eax,[esp+0x54]
	push eax
	push edi
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x19
	push edx
	mov byte ptr [esp+0x8C],bl
	call _xbstr_t::_ctor_1
	mov esi,dword ptr [esp+0x2C]
	mov ecx,dword ptr [esi+0x10]
	mov byte ptr [esp+0x88],0x1A
	test ecx,ecx
	jne Block67

 Block66:
	push 0x80004003
	call _com_issue_error

 Block67:
	lea eax,[esp+0x50]
	push eax
	lea edx,[esp+0x34]
	push edx
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x88],0x1B
	test ecx,ecx
	jne Block69

 Block68:
	push 0x80004003
	call _com_issue_error

 Block69:
	mov eax,dword ptr [esp+0x90]
	add eax,0xA
	push eax
	mov eax,dword ptr [esi+0xC]
	sub eax,ebp
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov byte ptr [esp+0x90],0x1C
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x78],bl
	test eax,eax
	je Block71

 Block70:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block71:
	mov esi,8
	mov byte ptr [esp+0x78],0x18
	cmp word ptr [esp+0x40],si
	jne Block74

 Block72:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block75:
	mov byte ptr [esp+0x78],0x17
	cmp word ptr [esp+0x50],si
	jne Block78

 Block76:
	mov eax,dword ptr [esp+0x58]
	xor edx,edx
	mov word ptr [esp+0x50],dx
	test eax,eax
	je Block79

 Block77:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block79

 Block78:
	lea eax,[esp+0x50]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block79:
	mov byte ptr [esp+0x78],0x14
	cmp word ptr [esp+0x60],si
	jne Block82

 Block80:
	mov eax,dword ptr [esp+0x68]
	xor ecx,ecx
	mov word ptr [esp+0x60],cx
	test eax,eax
	je Block83

 Block81:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block83

 Block82:
	lea edx,[esp+0x60]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block83:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x78],0xF
	test eax,eax
	je Block85

 Block84:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block85:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov byte ptr [esp+0x7C],2
	call ecx
	mov eax,dword ptr [esp+0x84]
	mov dword ptr [esp+0x78],0xFFFFFFFF
	test eax,eax
	je Block87

 Block86:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block87:
	mov ecx,dword ptr [esp+0x70]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x68
	ret 8
}
}
// CUIToolTip::DrawItemReqJob
_SUB_EXCEPTION_HANDLER(480FC0)
__SUB_CLASS_THIS(00480FC0, __thiscall, 5755,  CUIToolTip, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_480FC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x14],esi
	mov eax,3
	xor edi,edi
	mov word ptr [esp+0x2C],ax
	mov dword ptr [esp+0x34],edi
	mov ecx,dword ptr [esi+0x10]
	mov dword ptr [esp+0x44],edi
	cmp ecx,edi
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x1C]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0x44],2
	jne Block5

 Block3:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	cmp eax,edi
	je Block6

 Block4:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block6

 Block5:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block6:
	mov eax,3
	mov ecx,0xFF
	mov word ptr [esp+0x1C],ax
	mov dword ptr [esp+0x24],ecx
	xor edx,edx
	cmp dword ptr [esp+0x50],edi
	mov byte ptr [esp+0x44],al
	setg dl
	mov edx,dword ptr [esi+edx*4+0x9D0]
	mov esi,dword ptr [esp+0x18]
	cmp esi,edi
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov ebp,dword ptr [esp+0x1C]
	mov edi,dword ptr [esp+0x4C]
	mov ebx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x30]
	push edx
	mov edx,dword ptr [ebx+0x80]
	add edi,0x8D
	push edi
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x40]
	push 0xA
	push esi
	mov dword ptr [eax+0xC],ecx
	call edx
	test eax,eax
	jge Block10

 Block9:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block10:
	cmp word ptr [esp+0x1C],8
	mov byte ptr [esp+0x44],2
	jne Block13

 Block11:
	xor eax,eax
	mov word ptr [esp+0x1C],ax
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	je Block14

 Block12:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block14

 Block13:
	lea ecx,[esp+0x1C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block14:
	mov edx,3
	mov word ptr [esp+0x1C],dx
	mov edx,0xFF
	mov dword ptr [esp+0x24],edx
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x44],4
	test eax,eax
	je Block16

 Block15:
	mov ecx,eax
	not ecx
	test cl,1
	jne Block18

 Block16:
	cmp eax,0xFFFFFFFF
	je Block18

 Block17:
	xor eax,eax
	jmp Block19

 Block18:
	mov eax,1

 Block19:
	mov ecx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ecx+eax*4+0x9D8]
	mov ebp,dword ptr [esp+0x1C]
	mov ebx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x30]
	push ecx
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x3C]
	push edi
	push 0x34
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block21

 Block20:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block21:
	cmp word ptr [esp+0x1C],8
	mov byte ptr [esp+0x44],2
	jne Block24

 Block22:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	test eax,eax
	je Block25

 Block23:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block25

 Block24:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block25:
	mov eax,3
	mov edx,0xFF
	mov word ptr [esp+0x1C],ax
	mov dword ptr [esp+0x24],edx
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x44],5
	test eax,eax
	je Block27

 Block26:
	mov ecx,eax
	not ecx
	test cl,2
	jne Block29

 Block27:
	cmp eax,0xFFFFFFFF
	je Block29

 Block28:
	xor eax,eax
	jmp Block30

 Block29:
	mov eax,1

 Block30:
	mov ecx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ecx+eax*4+0x9E0]
	mov ebp,dword ptr [esp+0x1C]
	mov ebx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x30]
	push ecx
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x3C]
	push edi
	push 0x5C
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block32

 Block31:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block32:
	cmp word ptr [esp+0x1C],8
	mov byte ptr [esp+0x44],2
	jne Block35

 Block33:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	test eax,eax
	je Block36

 Block34:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block36

 Block35:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block36:
	mov eax,3
	mov edx,0xFF
	mov word ptr [esp+0x1C],ax
	mov dword ptr [esp+0x24],edx
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x44],6
	test eax,eax
	je Block38

 Block37:
	mov ecx,eax
	not ecx
	test cl,4
	jne Block40

 Block38:
	cmp eax,0xFFFFFFFF
	je Block40

 Block39:
	xor eax,eax
	jmp Block41

 Block40:
	mov eax,1

 Block41:
	mov ecx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ecx+eax*4+0x9E8]
	mov ebp,dword ptr [esp+0x1C]
	mov ebx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x30]
	push ecx
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x3C]
	push edi
	push 0x84
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block43

 Block42:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block43:
	cmp word ptr [esp+0x1C],8
	mov byte ptr [esp+0x44],2
	jne Block46

 Block44:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	test eax,eax
	je Block47

 Block45:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block47

 Block46:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block47:
	mov eax,3
	mov edx,0xFF
	mov word ptr [esp+0x1C],ax
	mov dword ptr [esp+0x24],edx
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x44],7
	test eax,eax
	je Block49

 Block48:
	mov ecx,eax
	not ecx
	test cl,8
	jne Block51

 Block49:
	cmp eax,0xFFFFFFFF
	je Block51

 Block50:
	xor eax,eax
	jmp Block52

 Block51:
	mov eax,1

 Block52:
	mov ecx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ecx+eax*4+0x9F0]
	mov ebp,dword ptr [esp+0x1C]
	mov ebx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x30]
	push ecx
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x3C]
	push edi
	push 0xAB
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block54

 Block53:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block54:
	mov ebx,8
	mov byte ptr [esp+0x44],2
	cmp word ptr [esp+0x1C],bx
	jne Block57

 Block55:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	test eax,eax
	je Block58

 Block56:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block58

 Block57:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block58:
	mov eax,3
	mov edx,0xFF
	mov word ptr [esp+0x1C],ax
	mov dword ptr [esp+0x24],edx
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x44],bl
	test eax,eax
	je Block60

 Block59:
	mov ecx,eax
	not ecx
	test cl,0x10
	jne Block62

 Block60:
	cmp eax,0xFFFFFFFF
	je Block62

 Block61:
	xor eax,eax
	jmp Block63

 Block62:
	mov eax,1

 Block63:
	mov ecx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ecx+eax*4+0x9F8]
	mov ebp,dword ptr [esp+0x1C]
	mov ebx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x30]
	push ecx
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x3C]
	push edi
	push 0xC5
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block65

 Block64:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block65:
	cmp word ptr [esp+0x1C],8
	mov byte ptr [esp+0x44],2
	jne Block68

 Block66:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	test eax,eax
	je Block69

 Block67:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block69

 Block68:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block69:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	mov dword ptr [esp+0x48],0xFFFFFFFF
	call ecx
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret 8
}
}
// CUIToolTip::GetItemExpireDate
_SUB_EXCEPTION_HANDLER(489310)
__SUB_CLASS_THIS(00489310, __thiscall, 5797,  CUIToolTip, void, _FILETIME*, long, ZXString<char>&, int32_t, int32_t, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_489310
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,dword ptr [esp+0x38]
	mov eax,dword ptr [esi]
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esi],0

 Block2:
	mov ebx,dword ptr [esp+0x30]
	mov edi,dword ptr [esp+0x34]
	test ebx,ebx
	jne Block5

 Block3:
	test edi,edi
	je Block19

 Block4:
	jmp Block6

 Block5:
	test edi,edi
	je Block9

 Block6:
	cmp dword ptr [esp+0x44],0
	je Block8

 Block7:
	lea eax,[esp+0x34]
	push 0x29F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x48]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	push esi
	mov dword ptr [esp+0x34],0
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x40]
	add esp,0xC
	jmp Block17

 Block8:
	lea edx,[esp+0x34]
	push 0x29D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push edi
	push eax
	push esi
	mov dword ptr [esp+0x34],1
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x40]
	add esp,0xC
	jmp Block17

 Block9:
	push offset _D_DB_DATE_20790101__10
	push ebx
	call CompareFileTime
	test eax,eax
	jge Block19

 Block10:
	push offset _D_DB_DATE_19000101__51
	push ebx
	call CompareFileTime
	test eax,eax
	jle Block19

 Block11:
	lea eax,[esp+0x10]
	push eax
	push ebx
	call FileTimeToSystemTime
	cmp dword ptr [esp+0x3C],0
	je Block13

 Block12:
	lea ecx,[esp+0x34]
	push 0xC70
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx edx,word ptr [esp+0x1A]
	movzx ecx,word ptr [esp+0x18]
	mov eax,dword ptr [eax]
	push edx
	movzx edx,word ptr [esp+0x14]
	push ecx
	movzx ecx,word ptr [esp+0x1E]
	push edx
	movzx edx,word ptr [esp+0x1E]
	push ecx
	push edx
	push eax
	push esi
	mov dword ptr [esp+0x44],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x50]
	jmp Block16

 Block13:
	cmp dword ptr [esp+0x40],0
	je Block15

 Block14:
	lea eax,[esp+0x34]
	push 0x14B2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,word ptr [esp+0x1A]
	movzx edx,word ptr [esp+0x18]
	mov eax,dword ptr [eax]
	push ecx
	movzx ecx,word ptr [esp+0x14]
	push edx
	movzx edx,word ptr [esp+0x1E]
	push ecx
	movzx ecx,word ptr [esp+0x1E]
	push edx
	push ecx
	push eax
	push esi
	mov dword ptr [esp+0x44],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x50]
	jmp Block16

 Block15:
	lea edx,[esp+0x38]
	push 0x2A0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,word ptr [esp+0x1A]
	movzx edx,word ptr [esp+0x18]
	mov eax,dword ptr [eax]
	push ecx
	movzx ecx,word ptr [esp+0x14]
	push edx
	movzx edx,word ptr [esp+0x1E]
	push ecx
	movzx ecx,word ptr [esp+0x1E]
	push edx
	push ecx
	push eax
	push esi
	mov dword ptr [esp+0x44],4
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x54]

 Block16:
	add esp,0x1C

 Block17:
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block19

 Block18:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block19:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 0x1C
}
}
// CUIToolTip::SetToolTip_String2
_SUB_EXCEPTION_HANDLER(4953B0)
__SUB_CLASS_THIS(004953B0, __thiscall, 5693,  CUIToolTip, void, long, long, NakedParam<ZXString<char>>, NakedParam<ZXString<char>>, int32_t, int32_t, int32_t, long, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4953B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	cmp dword ptr [edi+0x10],0
	mov dword ptr [esp+0x40],1
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov eax,dword ptr [esp+0x48]
	cmp dword ptr [edi+0x18],eax
	jne Block3

 Block2:
	mov ecx,dword ptr [esp+0x4C]
	cmp dword ptr [edi+0x1C],ecx
	je Block67

 Block3:
	mov ecx,dword ptr [esp+0x50]
	test ecx,ecx
	je Block5

 Block4:
	cmp byte ptr [ecx],0
	jne Block9

 Block5:
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block7

 Block6:
	cmp byte ptr [eax],0
	jne Block9

 Block7:
	mov byte ptr [esp+0x40],0
	test ecx,ecx
	je Block71

 Block8:
	add ecx,0xFFFFFFF4
	push ecx
	jmp Block69

 Block9:
	mov ebp,dword ptr [esp+0x60]
	xor edx,edx
	test ebp,ebp
	sete dl
	xor ebx,ebx
	test ebp,ebp
	sete bl
	mov eax,ebp
	neg eax
	sbb eax,eax
	and eax,9
	xor ecx,ecx
	inc eax
	test ebp,ebp
	setne cl
	lea edx,[edx*4+6]
	mov dword ptr [esp+0x24],edx
	push eax
	lea edx,[esp+0x18]
	push edx
	lea ebx,[ebx+ebx+0xE]
	lea ecx,[ecx*4+0xA]
	mov esi,ecx
	mov ecx,edi
	call CUIToolTip::GetFontByType
	push esi
	lea eax,[esp+0x20]
	push eax
	mov ecx,edi
	mov byte ptr [esp+0x48],2
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x64]
	mov byte ptr [esp+0x40],3
	test ebp,ebp
	je Block11

 Block10:
	mov dword ptr [esp+0x60],0x87
	jmp Block13

 Block11:
	mov dword ptr [esp+0x60],ecx
	test ecx,ecx
	jne Block13

 Block12:
	mov dword ptr [esp+0x60],0x10E

 Block13:
	mov esi,dword ptr [esp+0x24]
	mov eax,dword ptr [esp+0x50]
	lea esi,[esi+esi-6]
	mov dword ptr [esp+0x18],esi
	test eax,eax
	je Block28

 Block14:
	cmp byte ptr [eax],0
	je Block28

 Block15:
	lea ecx,[esp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block17

 Block16:
	push eax
	call _com_issue_error

 Block17:
	mov edx,dword ptr [esp+0x50]
	lea eax,[esp+0x28]
	push eax
	push ecx
	mov dword ptr [esp+0x28],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0x4C],4
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x48],5
	test ecx,ecx
	jne Block19

 Block18:
	push 0x80004003
	call _com_issue_error

 Block19:
	mov byte ptr [esp+0x48],4
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x28],8
	lea esi,[eax+ebx]
	mov byte ptr [esp+0x40],3
	jne Block22

 Block20:
	xor eax,eax
	mov word ptr [esp+0x28],ax
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block23

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block22:
	lea ecx,[esp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block23:
	cmp dword ptr [esp+0x60],esi
	jge Block25

 Block24:
	mov dword ptr [esp+0x60],esi

 Block25:
	mov ebx,dword ptr [esp+0x14]
	mov edx,dword ptr [ebx]
	mov ecx,dword ptr [edx+0x14]
	lea eax,[esp+0x20]
	push eax
	push ebx
	mov dword ptr [esp+0x28],0
	call ecx
	test eax,eax
	jge Block27

 Block26:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ebx
	push eax
	call _com_issue_errorex

 Block27:
	mov edx,dword ptr [esp+0x20]
	mov eax,dword ptr [esp+0x18]
	lea ecx,[eax+edx+8]
	mov esi,ecx
	mov ecx,dword ptr [esp+0x64]
	jmp Block29

 Block28:
	mov ebx,dword ptr [esp+0x14]

 Block29:
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block39

 Block30:
	cmp byte ptr [eax],0
	je Block39

 Block31:
	test ebp,ebp
	je Block33

 Block32:
	mov ebx,dword ptr [esp+0x60]
	add ebx,0xFFFFFFF1
	jmp Block36

 Block33:
	mov eax,ecx
	test ecx,ecx
	jne Block35

 Block34:
	mov eax,0x10E

 Block35:
	lea ebx,[eax-0xF]

 Block36:
	push 1
	push 0
	push 0
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	mov dword ptr [eax],ecx
	test ecx,ecx
	je Block38

 Block37:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+4]
	push ecx
	call eax

 Block38:
	mov ecx,dword ptr [esp+0x64]
	push ecx
	push esi
	push ebx
	push 0xA
	mov ecx,edi
	call CUIToolTip::DrawTextSepartedLine
	mov ebx,dword ptr [esp+0x14]
	add esi,eax
	jmp Block40

 Block39:
	sub esi,4

 Block40:
	mov edx,dword ptr [esp+0x60]
	push 0xFFFFFFFF
	push esi
	push edx
	push 2
	mov ecx,edi
	call CUIToolTip::SetBasicInfo
	cmp dword ptr [esp+0x58],0
	je Block42

 Block41:
	sub dword ptr [esp+0x4C],esi

 Block42:
	mov eax,dword ptr [esp+0x6C]
	mov ecx,dword ptr [esp+0x5C]
	mov edx,dword ptr [esp+0x68]
	push 0
	push 0xCC0E395A
	push eax
	mov eax,dword ptr [esp+0x58]
	push ecx
	mov ecx,dword ptr [esp+0x58]
	push edx
	push eax
	push ecx
	lea edx,[esp+0x68]
	push edx
	mov ecx,edi
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block44

 Block43:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block44:
	mov eax,dword ptr [esp+0x50]
	mov esi,dword ptr [esp+0x24]
	mov dword ptr [esp+0x48],esi
	test eax,eax
	je Block53

 Block45:
	cmp byte ptr [eax],0
	je Block53

 Block46:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x50],esp
	mov dword ptr [eax],ebx
	test ebx,ebx
	je Block48

 Block47:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+4]
	push ebx
	call ecx

 Block48:
	mov edx,dword ptr [esp+0x54]
	push edx
	push esi
	mov ecx,edi
	call CUIToolTip::DrawTextCenter
	test ebx,ebx
	jne Block50

 Block49:
	push 0x80004003
	call _com_issue_error

 Block50:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x14]
	lea ecx,[esp+0x4C]
	push ecx
	push ebx
	mov dword ptr [esp+0x54],0
	call edx
	test eax,eax
	jge Block52

 Block51:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ebx
	push eax
	call _com_issue_errorex

 Block52:
	mov eax,dword ptr [esp+0x4C]
	lea ecx,[eax+esi+8]
	mov dword ptr [esp+0x48],ecx

 Block53:
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block62

 Block54:
	cmp byte ptr [eax],0
	je Block62

 Block55:
	test ebp,ebp
	je Block57

 Block56:
	mov esi,dword ptr [esp+0x60]
	jmp Block59

 Block57:
	mov esi,dword ptr [esp+0x64]
	test esi,esi
	jne Block59

 Block58:
	mov esi,0x10E

 Block59:
	mov ebp,dword ptr [esp+0x1C]
	push 1
	push 0
	push 1
	push ecx
	add esi,0xFFFFFFF1
	mov eax,esp
	mov dword ptr [esp+0x74],esp
	mov dword ptr [eax],ebp
	test ebp,ebp
	je Block61

 Block60:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+4]
	push ebp
	call eax

 Block61:
	mov ecx,dword ptr [esp+0x64]
	mov edx,dword ptr [esp+0x58]
	push ecx
	push edx
	push esi
	push 0xA
	mov ecx,edi
	call CUIToolTip::DrawTextSepartedLine
	jmp Block63

 Block62:
	mov ebp,dword ptr [esp+0x1C]

 Block63:
	mov byte ptr [esp+0x40],2
	test ebp,ebp
	je Block65

 Block64:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	call ecx

 Block65:
	mov byte ptr [esp+0x40],1
	test ebx,ebx
	je Block67

 Block66:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	push ebx
	call eax

 Block67:
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block70

 Block68:
	add eax,0xFFFFFFF4
	push eax

 Block69:
	call ZXString<char>::_Release
	add esp,4

 Block70:
	mov eax,dword ptr [esp+0x54]

 Block71:
	mov dword ptr [esp+0x40],0xFFFFFFFF
	test eax,eax
	je Block73

 Block72:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block73:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 0x28
}
}
// CToolTipHelper::CheckAndShow
_SUB_EXCEPTION_HANDLER(4A0980)
__SUB_CLASS_THIS(004A0980, __thiscall, 6210,  CToolTipHelper, int32_t, CUIToolTip&, long, long, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A0980
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov ebp,dword ptr [esp+0x30]
	xor esi,esi
	cmp dword ptr [esp+0x3C],esi
	jne Block4

 Block1:
	mov eax,dword ptr [ebx+4]
	cmp eax,esi
	jne Block3

 Block2:
	mov dword ptr [esp+0x3C],esi
	jmp Block4

 Block3:
	mov eax,dword ptr [eax-4]
	mov dword ptr [esp+0x3C],eax

 Block4:
	xor edi,edi
	jmp Block6

 Block6:
	mov eax,dword ptr [ebx+4]
	test eax,eax
	je Block12

 Block7:
	cmp edi,dword ptr [eax-4]
	jae Block12

 Block8:
	cmp edi,dword ptr [esp+0x3C]
	jge Block12

 Block9:
	mov ecx,dword ptr [esp+0x34]
	push ecx
	add eax,esi
	push ebp
	push eax
	call PtInRect
	test eax,eax
	jne Block11

 Block10:
	inc edi
	add esi,0x18
	jmp Block6

 Block11:
	push 0
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	call CWndMan::GetCursorPos
	mov eax,dword ptr [esp+0x38]
	xor edx,edx
	test eax,eax
	sete dl
	push 0
	lea esi,[edi+edi*2]
	add esi,esi
	add esi,esi
	add esi,esi
	push edx
	push 0
	push eax
	mov eax,dword ptr [ebx+4]
	push 0
	push 0
	push ecx
	add eax,esi
	mov ecx,esp
	add eax,0x14
	mov dword ptr [esp+0x58],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebx+4]
	push ecx
	add eax,esi
	mov ecx,esp
	add eax,0x10
	mov dword ptr [esp+0x50],esp
	push eax
	mov dword ptr [esp+0x48],0
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x38]
	mov ecx,dword ptr [esp+0x34]
	add eax,0x14
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x54]
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	call CUIToolTip::SetToolTip_String2
	mov eax,edi
	jmp Block13

 Block12:
	mov ecx,dword ptr [esp+0x2C]
	call CUIToolTip::ClearToolTip
	or eax,0xFFFFFFFF

 Block13:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 0x14
}
}
// CUIToolTip::ShowItemToolTip
_SUB_EXCEPTION_HANDLER(4A9300)
__SUB_CLASS_THIS(004A9300, __thiscall, 5752,  CUIToolTip, void, long, long, GW_ItemSlotBase*, CUIToolTip::ItemToolTipParam*, CS_LIMITGOODS*, int32_t, long, CUIToolTip::eITCToolTip) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A9300
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x34
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x48]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x24],ecx
	mov eax,dword ptr [esp+0x64]
	xor edi,edi
	mov dword ptr [esp+0x2C],edi
	cmp eax,edi
	je Block3

 Block1:
	mov edx,dword ptr [eax+4]
	cmp edx,edi
	je Block3

 Block2:
	mov edx,dword ptr [edx+0x2C]
	mov dword ptr [esp+0x28],edx
	jmp Block4

 Block3:
	mov dword ptr [esp+0x28],edi

 Block4:
	cmp eax,edi
	je Block7

 Block5:
	mov edx,dword ptr [eax]
	mov dword ptr [esp+0x20],edx
	mov edx,dword ptr [eax+8]
	mov dword ptr [esp+0x1C],edx
	mov edx,dword ptr [eax+4]
	cmp edx,edi
	je Block8

 Block6:
	mov edx,dword ptr [edx+0x20]
	mov dword ptr [esp+0x18],edx
	jmp Block9

 Block7:
	mov dword ptr [esp+0x20],edi
	mov dword ptr [esp+0x1C],edi

 Block8:
	mov dword ptr [esp+0x18],edi

 Block9:
	cmp eax,edi
	je Block12

 Block10:
	mov edx,dword ptr [eax+4]
	cmp edx,edi
	je Block12

 Block11:
	mov edx,dword ptr [edx+0xC]
	mov dword ptr [esp+0x14],edx
	jmp Block13

 Block12:
	mov dword ptr [esp+0x14],edi

 Block13:
	mov esi,dword ptr [esp+0x60]
	cmp esi,edi
	jne Block15

 Block14:
	call CUIToolTip::ClearToolTip
	jmp Block42

 Block15:
	xor edx,edx
	cmp dword ptr [esp+0x74],edi
	je Block17

 Block16:
	mov ecx,dword ptr [eax+0x14]
	mov dword ptr [esp+0x60],ecx
	mov edx,1
	lea ecx,[eax+0x18]
	jmp Block18

 Block17:
	mov dword ptr [esp+0x60],edi
	mov ecx,offset _D_DB_DATE_19000101__51

 Block18:
	mov ebx,dword ptr [ecx]
	mov ecx,dword ptr [ecx+4]
	mov dword ptr [esp+0x30],ebx
	mov dword ptr [esp+0x34],ecx
	cmp edx,edi
	je Block20

 Block19:
	mov ebx,dword ptr [eax+0x20]
	add eax,0x24
	jmp Block21

 Block20:
	xor ebx,ebx
	mov dword ptr [esp+0x3C],edi
	lea eax,[esp+0x38]
	mov dword ptr [esp+0x2C],1

 Block21:
	mov ebp,dword ptr [eax+4]
	mov dword ptr [esp+0x44],ebp
	cmp ebp,edi
	je Block23

 Block22:
	lea edx,[ebp+4]
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block23:
	test byte ptr [esp+0x2C],1
	mov dword ptr [esp+0x50],edi
	je Block25

 Block24:
	lea ecx,[esp+0x38]
	call ZRef<ITCITEM>::~ZRef<ITCITEM>

 Block25:
	lea edi,[esi+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	push eax
	call get_item_slottype_from_id
	add esp,4
	sub eax,1
	je Block36

 Block26:
	sub eax,1
	je Block33

 Block27:
	sub eax,1
	je Block29

 Block28:
	mov ecx,dword ptr [esp+0x24]
	call CUIToolTip::ClearToolTip
	jmp Block39

 Block29:
	mov eax,dword ptr [esp+0x64]
	test eax,eax
	je Block31

 Block30:
	mov eax,dword ptr [eax+0xC]
	jmp Block32

 Block31:
	xor eax,eax

 Block32:
	mov ecx,dword ptr [esp+0x14]
	mov edx,dword ptr [esp+0x6C]
	push ecx
	mov ecx,dword ptr [esp+0x6C]
	push edx
	mov edx,dword ptr [esp+0x20]
	push ecx
	mov ecx,dword ptr [esp+0x28]
	push edx
	mov edx,dword ptr [esp+0x30]
	push ecx
	mov ecx,dword ptr [esp+0x6C]
	push edx
	push 0
	push eax
	mov eax,dword ptr [esp+0x7C]
	push esi
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x50]
	call CUIToolTip::SetToolTip_Pet
	jmp Block39

 Block33:
	mov edx,dword ptr [esp+0x74]
	push edx
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x80],esp
	mov dword ptr [eax+4],ebp
	test ebp,ebp
	je Block35

 Block34:
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block35:
	mov ecx,edi
	mov byte ptr [esp+0x5C],1
	call TSecType<long>::GetData
	mov edx,dword ptr [esp+0x6C]
	push ebx
	mov edi,eax
	mov eax,dword ptr [esp+0x24]
	lea ecx,[esp+0x40]
	push ecx
	mov ecx,dword ptr [esp+0x84]
	push edx
	mov edx,dword ptr [esp+0x84]
	push eax
	mov eax,dword ptr [esp+0x84]
	push ecx
	mov ecx,dword ptr [esp+0x38]
	push edx
	mov edx,dword ptr [esp+0x40]
	push esi
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x50]
	push edx
	mov edx,dword ptr [esp+0x5C]
	lea eax,[esi+0x40]
	push eax
	mov eax,dword ptr [esi]
	push ecx
	push edx
	mov edx,dword ptr [eax+4]
	mov ecx,esi
	call edx
	mov ecx,dword ptr [esp+0x98]
	push eax
	mov eax,dword ptr [esp+0xA0]
	add esi,0x20
	push esi
	push edi
	push eax
	push ecx
	mov ecx,dword ptr [esp+0x78]
	mov byte ptr [esp+0xA4],0
	call CUIToolTip::SetToolTip_Bundle
	jmp Block39

 Block36:
	mov edx,dword ptr [esp+0x74]
	push 1
	push edx
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x84],esp
	mov dword ptr [eax+4],ebp
	test ebp,ebp
	je Block38

 Block37:
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block38:
	mov edx,dword ptr [esp+0x70]
	mov eax,dword ptr [esp+0x7C]
	push ebx
	lea ecx,[esp+0x44]
	push ecx
	mov ecx,dword ptr [esp+0x2C]
	push edx
	mov edx,dword ptr [esp+0x8C]
	push eax
	mov eax,dword ptr [esp+0x88]
	push 0
	push ecx
	mov ecx,dword ptr [esp+0x40]
	push edx
	mov edx,dword ptr [esp+0x48]
	push eax
	mov eax,dword ptr [esp+0x50]
	push ecx
	mov ecx,dword ptr [esp+0x5C]
	push edx
	mov edx,dword ptr [esp+0x94]
	push eax
	mov eax,dword ptr [esp+0x94]
	push ecx
	mov ecx,dword ptr [esp+0x64]
	push esi
	push edx
	push eax
	call CUIToolTip::SetToolTip_Equip

 Block39:
	mov dword ptr [esp+0x50],0xFFFFFFFF
	test ebp,ebp
	je Block42

 Block40:
	lea esi,[ebp+4]
	push esi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block42

 Block41:
	push esi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebp
	call eax

 Block42:
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x40
	ret 0x20
}
}
// CUIToolTip::DrawDiscount_Rate
_SUB_EXCEPTION_HANDLER(489D80)
__SUB_CLASS_THIS(00489D80, __thiscall, 5687,  CUIToolTip, void, long, long, long, long) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x5C]
	sub esp,0x5C
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_489D80
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x58
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x58],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov eax,3
	xor esi,esi
	mov word ptr [ebp+0x20],ax
	mov dword ptr [ebp+0x28],esi
	mov ecx,dword ptr [ecx+0x10]
	mov dword ptr [ebp-4],esi
	cmp ecx,esi
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[ebp+0x20]
	push edx
	lea eax,[ebp+0x30]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [ebp+0x20],8
	mov ebx,dword ptr [ZImports::_VariantClear]
	mov byte ptr [ebp-4],2
	jne Block5

 Block3:
	mov eax,dword ptr [ebp+0x28]
	xor ecx,ecx
	mov word ptr [ebp+0x20],cx
	cmp eax,esi
	je Block6

 Block4:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block6

 Block5:
	lea edx,[ebp+0x20]
	push edx
	call ebx

 Block6:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp]
	push eax
	call edi
	lea ecx,[ebp]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block8

 Block7:
	push eax
	call _com_issue_error

 Block8:
	lea edx,[ebp+0x10]
	push edx
	mov byte ptr [ebp-4],3
	call edi
	lea eax,[ebp+0x10]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block10

 Block9:
	push eax
	call _com_issue_error

 Block10:
	push esi
	push esi
	lea ecx,[ebp]
	push ecx
	lea edx,[ebp+0x10]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x3C],esp
	push 0xB74
	push eax
	mov byte ptr [ebp-4],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [ebp-4],5
	cmp dword ptr [_D_G_RM],esi
	jne Block12

 Block11:
	push 0x80004003
	call _com_issue_error

 Block12:
	lea ecx,[ebp-0x1C]
	push ecx
	mov byte ptr [ebp-4],4
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],6
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x38]
	mov dword ptr [ebp+0x38],esi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,esi
	jge Block15

 Block13:
	cmp eax,0x80004002
	je Block15

 Block14:
	push eax
	call _com_issue_error

 Block15:
	mov edi,8
	mov byte ptr [ebp-4],8
	cmp word ptr [ebp-0x1C],di
	jne Block18

 Block16:
	mov eax,dword ptr [ebp-0x14]
	xor edx,edx
	mov word ptr [ebp-0x1C],dx
	cmp eax,esi
	je Block19

 Block17:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block19

 Block18:
	lea eax,[ebp-0x1C]
	push eax
	call ebx

 Block19:
	mov byte ptr [ebp-4],9
	cmp word ptr [ebp+0x10],di
	jne Block22

 Block20:
	mov eax,dword ptr [ebp+0x18]
	xor ecx,ecx
	mov word ptr [ebp+0x10],cx
	cmp eax,esi
	je Block23

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block22:
	lea edx,[ebp+0x10]
	push edx
	call ebx

 Block23:
	mov byte ptr [ebp-4],0xA
	cmp word ptr [ebp],di
	jne Block26

 Block24:
	xor eax,eax
	mov word ptr [ebp],ax
	mov eax,dword ptr [ebp+8]
	cmp eax,esi
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea ecx,[ebp]
	push ecx
	call ebx

 Block27:
	push esi
	push esi
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x3C],esp
	push 0x5A4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edi,dword ptr [ebp+0x38]
	mov byte ptr [ebp-4],0xB
	cmp edi,esi
	jne Block29

 Block28:
	push 0x80004003
	call _com_issue_error

 Block29:
	lea eax,[ebp-0x3C]
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],0xA
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xC
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x34]
	mov dword ptr [ebp+0x34],esi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block32

 Block30:
	cmp eax,0x80004002
	je Block32

 Block31:
	push eax
	call _com_issue_error

 Block32:
	cmp word ptr [ebp-0x3C],8
	mov byte ptr [ebp-4],0xE
	jne Block35

 Block33:
	mov eax,dword ptr [ebp-0x34]
	xor ecx,ecx
	mov word ptr [ebp-0x3C],cx
	cmp eax,esi
	je Block36

 Block34:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block36

 Block35:
	lea edx,[ebp-0x3C]
	push edx
	call ebx

 Block36:
	push esi
	push esi
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x3C],esp
	push 0x5A3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea ecx,[ebp-0x2C]
	push ecx
	mov byte ptr [ebp-4],0xF
	mov ecx,edi
	mov byte ptr [ebp-4],0xE
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x10
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x3C]
	mov dword ptr [ebp+0x3C],esi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block39

 Block37:
	cmp eax,0x80004002
	je Block39

 Block38:
	push eax
	call _com_issue_error

 Block39:
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],0x12
	jne Block42

 Block40:
	mov eax,dword ptr [ebp-0x24]
	xor edx,edx
	mov word ptr [ebp-0x2C],dx
	cmp eax,esi
	je Block43

 Block41:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block43

 Block42:
	lea eax,[ebp-0x2C]
	push eax
	call ebx

 Block43:
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push offset _x_com_ptr<IWzCanvas>::_ctor_default
	push 0xA
	push 4
	lea ecx,[ebp-0x64]
	push ecx
	call __eh_vector_ctor_iterator
	mov byte ptr [ebp-4],0x13
	lea esp,[esp]

 Block44:
	mov eax,0x20
	call __chkstk
	mov eax,esp
	push 0
	push 0
	push 0xA
	push eax
	push esi
	call __itow
	add esp,8
	mov dword ptr [ebp+0x40],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x38]
	lea edx,[ebp+0x48]
	mov byte ptr [ebp-4],0x14
	push edx
	mov byte ptr [ebp-4],0x13
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x15
	call Ztl_variant_t::GetUnknown
	test eax,eax
	je Block52

 Block45:
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x44]
	push edx
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push eax
	mov eax,dword ptr [ecx]
	call eax
	xor ecx,ecx
	mov ebx,eax
	mov eax,dword ptr [ebp+esi*4-0x64]
	test ebx,ebx
	setl cl
	dec ecx
	and ecx,dword ptr [ebp+0x44]
	mov edi,ecx
	test eax,eax
	je Block47

 Block46:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block47:
	mov dword ptr [ebp+esi*4-0x64],edi
	test ebx,ebx
	jge Block49

 Block48:
	cmp ebx,0x80004002
	jne Block58

 Block49:
	cmp word ptr [ebp+0x48],8
	mov byte ptr [ebp-4],0x13
	jne Block54

 Block50:
	xor eax,eax
	mov word ptr [ebp+0x48],ax
	mov eax,dword ptr [ebp+0x50]
	test eax,eax
	je Block55

 Block51:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block52:
	mov eax,dword ptr [ebp+esi*4-0x64]
	test eax,eax
	je Block49

 Block53:
	mov dword ptr [ebp+esi*4-0x64],0
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx
	jmp Block49

 Block54:
	lea ecx,[ebp+0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block55:
	inc esi
	cmp esi,9
	jle Block44

 Block56:
	mov edx,dword ptr [ebp+0x70]
	test edx,edx
	jne Block59

 Block57:
	mov dword ptr [ebp+0x40],0x64
	jmp Block60

 Block58:
	push ebx
	call _com_issue_error

 Block59:
	mov ecx,dword ptr [ebp+0x6C]
	mov eax,ecx
	sub eax,edx
	imul eax,0x64
	cdq
	idiv ecx
	mov dword ptr [ebp+0x40],eax

 Block60:
	mov edx,3
	mov ecx,0xFF
	mov word ptr [ebp+0x48],dx
	mov dword ptr [ebp+0x50],ecx
	mov esi,dword ptr [ebp+0x30]
	mov byte ptr [ebp-4],0x16
	test esi,esi
	jne Block62

 Block61:
	push 0x80004003
	call _com_issue_error

 Block62:
	mov edi,dword ptr [ebp+0x48]
	mov ebx,dword ptr [ebp+0x64]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0x4C]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp+0x34]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp+0x54]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp+0x68]
	mov ecx,dword ptr [edx+0x80]
	push edi
	push eax
	push ebx
	push esi
	call ecx
	test eax,eax
	jge Block64

 Block63:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block64:
	cmp word ptr [ebp+0x48],8
	mov byte ptr [ebp-4],0x13
	jne Block67

 Block65:
	mov eax,dword ptr [ebp+0x50]
	xor edx,edx
	mov word ptr [ebp+0x48],dx
	test eax,eax
	je Block68

 Block66:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block68

 Block67:
	lea eax,[ebp+0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block68:
	test edi,edi
	jne Block70

 Block69:
	push 0x80004003
	call _com_issue_error

 Block70:
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0x40]
	lea edx,[ebp+0x44]
	push edx
	push edi
	mov dword ptr [ebp+0x44],0
	call eax
	test eax,eax
	jge Block72

 Block71:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block72:
	add ebx,dword ptr [ebp+0x44]
	mov eax,0x51EB851F
	imul dword ptr [ebp+0x40]
	sar edx,5
	mov edi,edx
	shr edi,0x1F
	add edi,edx
	test edi,edi
	jle Block80

 Block73:
	mov ecx,3
	mov word ptr [ebp+0x48],cx
	mov dword ptr [ebp+0x50],0xFF
	mov ecx,dword ptr [ebp+0x48]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ecx
	mov ecx,dword ptr [ebp+0x4C]
	mov dword ptr [eax+4],ecx
	mov ecx,dword ptr [ebp+0x50]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp+0x54]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp+edi*4-0x64]
	mov ecx,dword ptr [edx+0x80]
	push eax
	mov eax,dword ptr [ebp+0x68]
	push eax
	push ebx
	push esi
	mov byte ptr [ebp-4],0x17
	call ecx
	test eax,eax
	jge Block75

 Block74:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block75:
	cmp word ptr [ebp+0x48],8
	mov byte ptr [ebp-4],0x13
	jne Block78

 Block76:
	mov eax,dword ptr [ebp+0x50]
	xor edx,edx
	mov word ptr [ebp+0x48],dx
	test eax,eax
	je Block79

 Block77:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block79

 Block78:
	lea eax,[ebp+0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block79:
	add ebx,5

 Block80:
	mov eax,0x66666667
	imul dword ptr [ebp+0x40]
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov dword ptr [ebp+0x44],eax
	test eax,eax
	jle Block88

 Block81:
	mov ecx,3
	mov word ptr [ebp+0x48],cx
	mov dword ptr [ebp+0x50],0xFF
	imul edi,0x64
	mov ecx,dword ptr [ebp+0x40]
	sub ecx,edi
	mov edi,dword ptr [ebp+0x48]
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	mov ecx,dword ptr [ebp+eax*4-0x64]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0x4C]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp+0x50]
	mov dword ptr [eax+8],edi
	mov edi,dword ptr [ebp+0x54]
	push ecx
	mov ecx,dword ptr [edx+0x80]
	mov dword ptr [eax+0xC],edi
	mov eax,dword ptr [ebp+0x68]
	push eax
	push ebx
	push esi
	mov byte ptr [ebp-4],0x18
	call ecx
	test eax,eax
	jge Block83

 Block82:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block83:
	cmp word ptr [ebp+0x48],8
	mov byte ptr [ebp-4],0x13
	jne Block86

 Block84:
	mov eax,dword ptr [ebp+0x50]
	xor edx,edx
	mov word ptr [ebp+0x48],dx
	test eax,eax
	je Block87

 Block85:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block87

 Block86:
	lea eax,[ebp+0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block87:
	add ebx,5

 Block88:
	cmp dword ptr [ebp+0x40],0
	jl Block96

 Block89:
	mov ecx,3
	mov word ptr [ebp+0x48],cx
	mov ecx,0xFF
	mov dword ptr [ebp+0x50],ecx
	mov eax,dword ptr [ebp+0x44]
	mov edi,dword ptr [ebp+0x48]
	lea edx,[eax+eax*4]
	mov eax,dword ptr [ebp+0x40]
	add edx,edx
	sub eax,edx
	mov eax,dword ptr [ebp+eax*4-0x64]
	mov edx,dword ptr [esi]
	mov edx,dword ptr [edx+0x80]
	sub esp,0x10
	mov dword ptr [ebp+0x44],eax
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0x4C]
	mov dword ptr [eax+4],edi
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp+0x54]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp+0x44]
	mov ecx,dword ptr [ebp+0x68]
	push eax
	push ecx
	push ebx
	push esi
	mov byte ptr [ebp-4],0x19
	call edx
	test eax,eax
	jge Block91

 Block90:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block91:
	cmp word ptr [ebp+0x48],8
	mov byte ptr [ebp-4],0x13
	jne Block94

 Block92:
	xor eax,eax
	mov word ptr [ebp+0x48],ax
	mov eax,dword ptr [ebp+0x50]
	test eax,eax
	je Block95

 Block93:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block95

 Block94:
	lea ecx,[ebp+0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block95:
	add ebx,5

 Block96:
	mov edx,3
	mov ecx,0xFF
	mov word ptr [ebp+0x48],dx
	mov dword ptr [ebp+0x50],ecx
	mov edi,dword ptr [ebp+0x48]
	mov edx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0x4C]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp+0x3C]
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [ebp+0x54]
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [ebp+0x68]
	mov ecx,dword ptr [edx+0x80]
	push edi
	push eax
	push ebx
	push esi
	mov byte ptr [ebp-4],0x1A
	call ecx
	test eax,eax
	jge Block98

 Block97:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block98:
	cmp word ptr [ebp+0x48],8
	mov byte ptr [ebp-4],0x13
	jne Block101

 Block99:
	mov eax,dword ptr [ebp+0x50]
	xor edx,edx
	mov word ptr [ebp+0x48],dx
	test eax,eax
	je Block102

 Block100:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block102

 Block101:
	lea eax,[ebp+0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block102:
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push 0xA
	push 4
	lea ecx,[ebp-0x64]
	push ecx
	mov byte ptr [ebp-4],0x12
	call __eh_vector_dtor_iterator
	mov byte ptr [ebp-4],0xE
	test edi,edi
	je Block104

 Block103:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	push edi
	call eax

 Block104:
	mov eax,dword ptr [ebp+0x34]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [ebp-4],0xA
	call edx
	mov eax,dword ptr [ebp+0x38]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [ebp-4],2
	call edx
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ecx
	lea esp,[ebp-0x74]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x58]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x5C
	mov esp,ebp
	pop ebp
	ret 0x10
}
}
// CUIToolTip::SetToolTip_Equip_Basic
_SUB_EXCEPTION_HANDLER(4A0BD0)
__SUB_CLASS_THIS(004A0BD0, __thiscall, 5789,  CUIToolTip, void, GW_ItemSlotEquip*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A0BD0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [esp+0x44]
	lea ebp,[esi+0xC]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	xor ecx,ecx
	mov dword ptr [esp+0x18],eax
	cmp eax,ecx
	je Block32

 Block1:
	mov dword ptr [esp+0x14],ecx
	mov dword ptr [esp+0x3C],ecx
	mov dword ptr [esp+0x2C],ecx
	mov ecx,ebp
	mov byte ptr [esp+0x3C],1
	call TSecType<long>::GetData
	push eax
	lea eax,[esp+0x28]
	push eax
	call get_weapon_category_name
	add esp,8
	mov ecx,ebp
	mov byte ptr [esp+0x3C],2
	call TSecType<long>::GetData
	push eax
	lea ecx,[esp+0x24]
	push ecx
	call get_weapon_attack_speed
	add esp,8
	mov ecx,ebp
	mov byte ptr [esp+0x3C],3
	call TSecType<long>::GetData
	push eax
	lea edx,[esp+0x20]
	push edx
	call get_item_category_name
	add esp,8
	cmp dword ptr [esp+0x24],0
	mov bl,4
	mov byte ptr [esp+0x3C],bl
	je Block3

 Block2:
	push 0x3E9
	push 1
	push ecx
	mov ecx,esp
	lea eax,[esp+0x30]
	mov dword ptr [esp+0x34],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x40],esp
	push 0x1A2A
	mov byte ptr [esp+0x50],5
	push ecx
	jmp Block5

 Block3:
	cmp dword ptr [esp+0x1C],0
	je Block6

 Block4:
	push 0x3E9
	push 1
	push ecx
	mov ecx,esp
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x3C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A2A
	mov byte ptr [esp+0x50],6
	push eax

 Block5:
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0x16
	push 0x15
	mov ecx,edi
	mov byte ptr [esp+0x54],bl
	call CUIToolTip::AddInfoEx

 Block6:
	cmp dword ptr [esp+0x20],0
	je Block8

 Block7:
	push 0x3E9
	push 1
	push ecx
	mov ecx,esp
	lea edx,[esp+0x2C]
	mov dword ptr [esp+0x3C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A1
	push eax
	mov byte ptr [esp+0x54],7
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0x16
	push 0x15
	mov ecx,edi
	mov byte ptr [esp+0x54],bl
	call CUIToolTip::AddInfoEx

 Block8:
	mov ecx,dword ptr [esp+0x18]
	cmp dword ptr [ecx+0x260],0
	jle Block10

 Block9:
	push 1
	push 0x3E9
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x40],esp
	push 0x1A0D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0x15
	mov ecx,edi
	call CUIToolTip::AddInfo

 Block10:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A61
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x59]
	add esi,0x49
	push ecx
	lea edx,[esi+0xC]
	push edx
	mov byte ptr [esp+0x4C],8
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	cwde
	add esp,8
	push eax
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A31
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x18]
	push edx
	lea eax,[esi+0x14]
	push eax
	mov byte ptr [esp+0x4C],9
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	add esp,8
	push ecx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A42
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x20]
	push eax
	lea ecx,[esi+0x1C]
	push ecx
	mov byte ptr [esp+0x4C],0xA
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx edx,ax
	add esp,8
	push edx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A4A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x28]
	push ecx
	lea edx,[esi+0x24]
	push edx
	mov byte ptr [esp+0x4C],0xB
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	cwde
	add esp,8
	push eax
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A3F
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x30]
	push edx
	lea eax,[esi+0x2C]
	push eax
	mov byte ptr [esp+0x4C],0xC
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	add esp,8
	push ecx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A4D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x38]
	push eax
	lea ecx,[esi+0x34]
	push ecx
	mov byte ptr [esp+0x4C],0xD
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx edx,ax
	add esp,8
	push edx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A3F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x20]
	movsx edx,word ptr [ecx+0x9C]
	push edx
	push 2
	mov ecx,edi
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x1A4D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x20]
	movsx edx,word ptr [ecx+0x9E]
	push edx
	push 2
	mov ecx,edi
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x40]
	push ecx
	lea edx,[esi+0x3C]
	push edx
	mov byte ptr [esp+0x4C],0xE
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	cwde
	add esp,8
	push eax
	push 1
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A3
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x48]
	push edx
	lea eax,[esi+0x44]
	push eax
	mov byte ptr [esp+0x4C],0xF
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	add esp,8
	push ecx
	push 1
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x50]
	push eax
	lea ecx,[esi+0x4C]
	push ecx
	mov byte ptr [esp+0x4C],0x10
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx edx,ax
	add esp,8
	push edx
	push 1
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A5
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x58]
	push ecx
	lea edx,[esi+0x54]
	push edx
	mov byte ptr [esp+0x4C],0x11
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	cwde
	add esp,8
	push eax
	push 1
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A6
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x60]
	push edx
	lea eax,[esi+0x5C]
	push eax
	mov byte ptr [esp+0x4C],0x12
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	add esp,8
	push ecx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A7
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x68]
	push eax
	lea ecx,[esi+0x64]
	push ecx
	mov byte ptr [esp+0x4C],0x13
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx edx,ax
	add esp,8
	push edx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A8
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x70]
	push ecx
	lea edx,[esi+0x6C]
	push edx
	mov byte ptr [esp+0x4C],0x14
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	cwde
	add esp,8
	push eax
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2A9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x78]
	push edx
	lea eax,[esi+0x74]
	push eax
	mov byte ptr [esp+0x4C],0x15
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx ecx,ax
	add esp,8
	push ecx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2AA
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x80]
	push eax
	lea ecx,[esi+0x7C]
	push ecx
	mov byte ptr [esp+0x4C],0x16
	call _ZtlSecureFuseHelper<short>::call
	movzx eax,ax
	movsx edx,ax
	add esp,8
	push edx
	push 0
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block12

 Block11:
	mov ecx,dword ptr [eax+0x140]
	push ecx
	add eax,0x138
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	mov ebp,eax
	jmp Block13

 Block12:
	xor ebp,ebp

 Block13:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2AC
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push ebp
	push 2
	mov ecx,edi
	call CUIToolTip::PrintValue
	mov ebp,dword ptr [esp+0x44]
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+8]
	mov ecx,ebp
	call edx
	test eax,eax
	je Block17

 Block14:
	lea eax,[esp+0x28]
	push 0x2AE
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0x44],0x17
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,8
	mov byte ptr [esp+0x3C],bl
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	push 0x3E9
	push 1
	push ecx
	mov ebp,esp
	mov dword ptr [esp+0x3C],esp
	push 0
	push offset _S_
	push 0
	push 0
	mov ecx,ebp
	mov dword ptr [ebp],0
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	mov ecx,ebp
	call ZXString<char>::ReleaseBuffer
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x38],esp
	push edx
	mov byte ptr [esp+0x50],0x18
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push 0x16
	push 0x15
	mov ecx,edi
	mov byte ptr [esp+0x54],bl
	call CUIToolTip::AddInfoEx
	mov ebp,dword ptr [esp+0x44]

 Block17:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0xC]
	mov ecx,ebp
	call edx
	test eax,eax
	je Block21

 Block18:
	lea eax,[esp+0x44]
	push 0x2AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	mov byte ptr [esp+0x44],0x19
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x4C]
	add esp,8
	mov byte ptr [esp+0x3C],bl
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	push 0x3E9
	push 1
	push ecx
	mov ebp,esp
	mov dword ptr [esp+0x3C],esp
	push 0
	push offset _S_
	push 0
	push 0
	mov ecx,ebp
	mov dword ptr [ebp],0
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	mov ecx,ebp
	call ZXString<char>::ReleaseBuffer
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x38],esp
	push edx
	mov byte ptr [esp+0x50],0x1A
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push 0x16
	push 0x15
	mov ecx,edi
	mov byte ptr [esp+0x54],bl
	call CUIToolTip::AddInfoEx

 Block21:
	mov ebp,dword ptr [esp+0x18]
	mov eax,dword ptr [ebp+0xA4]
	push eax
	lea ecx,[ebp+0xA0]
	push ecx
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	test al,al
	jbe Block24

 Block22:
	test byte ptr [ebp+0x264],2
	jne Block24

 Block23:
	push 1
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x38],esp
	push 0x2AD
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+2]
	push eax
	push esi
	mov byte ptr [esp+0x4C],0x1B
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx ecx,al
	add esp,8
	push ecx
	push 1
	mov ecx,edi
	mov byte ptr [esp+0x4C],bl
	call CUIToolTip::PrintValue

 Block24:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x3C],3
	test eax,eax
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block26:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x3C],2
	test eax,eax
	je Block28

 Block27:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block28:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x3C],1
	test eax,eax
	je Block30

 Block29:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block30:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x3C],0xFFFFFFFF
	test eax,eax
	je Block32

 Block31:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block32:
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret 4
}
}
// CUIToolTip::DrawItemTitle
_SUB_EXCEPTION_HANDLER(48CCB0)
__SUB_CLASS_THIS(0048CCB0, __thiscall, 5785,  CUIToolTip, void, long, const char*, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48CCB0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x48
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x5C]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov dword ptr [esp+0x20],ebp
	xor esi,esi
	mov dword ptr [esp+0x1C],esi
	mov dword ptr [esp+0x64],esi
	mov dword ptr [esp+0x14],esi
	mov dword ptr [esp+0x18],esi
	mov byte ptr [esp+0x64],2
	lea eax,[esp+0x74]
	cmp dword ptr [esp+0x74],esi
	je Block66

 Block1:
	push 0xC35
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x68],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x74]
	mov byte ptr [esp+0x64],2
	cmp eax,esi
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block3:
	push 3
	lea ecx,[esp+0x78]
	push ecx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	cmp eax,esi
	je Block5

 Block4:
	mov edx,dword ptr [eax]
	mov dword ptr [esp+0x14],eax
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block5:
	mov eax,dword ptr [esp+0x74]
	cmp eax,esi
	je Block7

 Block6:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block7:
	push 1
	lea eax,[esp+0x78]
	push eax
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	cmp eax,esi
	je Block9

 Block8:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	mov dword ptr [esp+0x1C],eax
	call edx

 Block9:
	mov eax,dword ptr [esp+0x74]
	cmp eax,esi
	je Block11

 Block10:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block11:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x2C]
	push eax
	call edi
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block13

 Block12:
	push eax
	call _com_issue_error

 Block13:
	mov esi,dword ptr [esp+0x70]
	lea edx,[esp+0x2C]
	push edx
	push ecx
	mov dword ptr [esp+0x7C],esp
	mov ecx,esp
	mov bl,4
	push esi
	mov byte ptr [esp+0x70],bl
	call _xbstr_t::_ctor_0
	cmp dword ptr [esp+0x1C],0
	mov byte ptr [esp+0x6C],5
	jne Block15

 Block14:
	push 0x80004003
	call _com_issue_error

 Block15:
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x6C],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x2C],8
	mov dword ptr [esp+0x74],eax
	mov byte ptr [esp+0x64],2
	jne Block18

 Block16:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block19

 Block17:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block19

 Block18:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block19:
	lea edx,[esp+0x2C]
	push edx
	call edi
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block21

 Block20:
	push eax
	call _com_issue_error

 Block21:
	mov edx,dword ptr [esp+0x1C]
	lea ecx,[esp+0x2C]
	push ecx
	push ecx
	mov dword ptr [esp+0x78],esp
	mov ecx,esp
	mov bl,6
	push edx
	mov byte ptr [esp+0x70],bl
	call _xbstr_t::_ctor_0
	cmp dword ptr [esp+0x20],0
	mov byte ptr [esp+0x6C],7
	jne Block23

 Block22:
	push 0x80004003
	call _com_issue_error

 Block23:
	mov ecx,dword ptr [esp+0x20]
	mov byte ptr [esp+0x6C],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x2C],8
	mov dword ptr [esp+0x70],eax
	mov byte ptr [esp+0x64],2
	jne Block26

 Block24:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block27:
	lea edx,[esp+0x4C]
	push edx
	call edi
	lea eax,[esp+0x4C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block29

 Block28:
	push eax
	call _com_issue_error

 Block29:
	lea ecx,[esp+0x3C]
	push ecx
	mov byte ptr [esp+0x68],8
	call edi
	lea edx,[esp+0x3C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block31

 Block30:
	push eax
	call _com_issue_error

 Block31:
	mov eax,3
	mov word ptr [esp+0x2C],ax
	mov dword ptr [esp+0x34],0
	mov eax,dword ptr [esp+0x14]
	lea ecx,[esp+0x4C]
	push ecx
	lea edx,[esp+0x40]
	push edx
	push eax
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	mov bl,0xA
	push esi
	mov byte ptr [esp+0x78],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x10]
	mov byte ptr [esp+0x74],0xB
	test ecx,ecx
	jne Block33

 Block32:
	push 0x80004003
	call _com_issue_error

 Block33:
	lea edx,[esp+0x3C]
	push edx
	lea eax,[esp+0x34]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x74],0xC
	test ecx,ecx
	jne Block35

 Block34:
	push 0x80004003
	call _com_issue_error

 Block35:
	mov eax,dword ptr [ebp+0xC]
	sub eax,dword ptr [esp+0x80]
	mov esi,dword ptr [esp+0x7C]
	sub eax,dword ptr [esp+0x84]
	push esi
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov byte ptr [esp+0x7C],0xD
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block37

 Block36:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block37:
	mov ebx,8
	mov byte ptr [esp+0x64],9
	cmp word ptr [esp+0x2C],bx
	jne Block40

 Block38:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block41

 Block39:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block41

 Block40:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block41:
	mov byte ptr [esp+0x64],bl
	cmp word ptr [esp+0x3C],bx
	jne Block44

 Block42:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block45

 Block43:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block45

 Block44:
	lea eax,[esp+0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block45:
	mov byte ptr [esp+0x64],2
	cmp word ptr [esp+0x4C],bx
	jne Block48

 Block46:
	mov eax,dword ptr [esp+0x54]
	xor ecx,ecx
	mov word ptr [esp+0x4C],cx
	test eax,eax
	je Block49

 Block47:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block49

 Block48:
	lea edx,[esp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block49:
	lea eax,[esp+0x2C]
	push eax
	call edi
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	lea edx,[esp+0x3C]
	push edx
	mov byte ptr [esp+0x68],0xE
	call edi
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block53

 Block52:
	push eax
	call _com_issue_error

 Block53:
	mov ecx,3
	mov word ptr [esp+0x4C],cx
	mov dword ptr [esp+0x54],0
	mov ecx,dword ptr [esp+0x18]
	lea edx,[esp+0x2C]
	push edx
	mov edx,dword ptr [esp+0x20]
	lea eax,[esp+0x40]
	push eax
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	mov bl,0x10
	push edx
	mov byte ptr [esp+0x78],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x10]
	mov byte ptr [esp+0x74],0x11
	test ecx,ecx
	jne Block55

 Block54:
	push 0x80004003
	call _com_issue_error

 Block55:
	lea eax,[esp+0x5C]
	push eax
	lea edx,[esp+0x80]
	push edx
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x74],0x12
	test ecx,ecx
	jne Block57

 Block56:
	push 0x80004003
	call _com_issue_error

 Block57:
	mov eax,dword ptr [ebp+0xC]
	sub eax,dword ptr [esp+0x80]
	push esi
	mov esi,dword ptr [esp+0x88]
	sub eax,esi
	cdq
	sub eax,edx
	sar eax,1
	add eax,esi
	push eax
	mov byte ptr [esp+0x7C],0x13
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x6C]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block59

 Block58:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block59:
	mov esi,8
	mov byte ptr [esp+0x64],0xF
	cmp word ptr [esp+0x4C],si
	jne Block62

 Block60:
	xor eax,eax
	mov word ptr [esp+0x4C],ax
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea ecx,[esp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block63:
	mov byte ptr [esp+0x64],0xE
	cmp word ptr [esp+0x3C],si
	jne Block131

 Block64:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block132

 Block65:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block132

 Block66:
	push 0xC36
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x68],0x14
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x74]
	mov byte ptr [esp+0x64],2
	cmp eax,esi
	je Block68

 Block67:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block68:
	push 0xE
	lea ecx,[esp+0x78]
	push ecx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	cmp eax,esi
	je Block70

 Block69:
	mov edx,dword ptr [eax]
	mov dword ptr [esp+0x14],eax
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block70:
	mov eax,dword ptr [esp+0x74]
	cmp eax,esi
	je Block72

 Block71:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block72:
	push 0xA
	lea eax,[esp+0x78]
	push eax
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	cmp eax,esi
	je Block74

 Block73:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	mov dword ptr [esp+0x1C],eax
	call edx

 Block74:
	mov eax,dword ptr [esp+0x74]
	cmp eax,esi
	je Block76

 Block75:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block76:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x4C]
	push eax
	call ebp
	lea ecx,[esp+0x4C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block78

 Block77:
	push eax
	call _com_issue_error

 Block78:
	mov eax,dword ptr [esp+0x70]
	lea edx,[esp+0x4C]
	push edx
	push ecx
	mov dword ptr [esp+0x7C],esp
	mov ecx,esp
	mov bl,0x15
	push eax
	mov byte ptr [esp+0x70],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x6C],0x16
	test ecx,ecx
	jne Block80

 Block79:
	push 0x80004003
	call _com_issue_error

 Block80:
	mov byte ptr [esp+0x6C],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x4C],8
	mov dword ptr [esp+0x74],eax
	mov byte ptr [esp+0x64],2
	jne Block83

 Block81:
	mov eax,dword ptr [esp+0x54]
	xor ecx,ecx
	mov word ptr [esp+0x4C],cx
	test eax,eax
	je Block84

 Block82:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block84

 Block83:
	lea edx,[esp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block84:
	lea eax,[esp+0x4C]
	push eax
	call ebp
	lea ecx,[esp+0x4C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block86

 Block85:
	push eax
	call _com_issue_error

 Block86:
	mov eax,dword ptr [esp+0x1C]
	lea edx,[esp+0x4C]
	push edx
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	mov bl,0x17
	push eax
	mov byte ptr [esp+0x70],bl
	call _xbstr_t::_ctor_0
	mov esi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x6C],0x18
	test esi,esi
	jne Block88

 Block87:
	push 0x80004003
	call _com_issue_error

 Block88:
	mov ecx,esi
	mov byte ptr [esp+0x6C],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x4C],8
	mov edi,eax
	mov byte ptr [esp+0x64],2
	jne Block91

 Block89:
	mov eax,dword ptr [esp+0x54]
	xor ecx,ecx
	mov word ptr [esp+0x4C],cx
	test eax,eax
	je Block92

 Block90:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block92

 Block91:
	lea edx,[esp+0x4C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block92:
	lea eax,[esp+0x2C]
	push eax
	call ebp
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block94

 Block93:
	push eax
	call _com_issue_error

 Block94:
	lea edx,[esp+0x3C]
	push edx
	mov byte ptr [esp+0x68],0x19
	call ebp
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block96

 Block95:
	push eax
	call _com_issue_error

 Block96:
	mov ecx,3
	mov word ptr [esp+0x4C],cx
	mov dword ptr [esp+0x54],0
	lea edx,[esp+0x2C]
	push edx
	mov edx,dword ptr [esp+0x20]
	lea eax,[esp+0x40]
	push eax
	push esi
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0x1B
	push edx
	mov byte ptr [esp+0x78],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x30]
	mov ecx,dword ptr [eax+0x10]
	mov byte ptr [esp+0x74],0x1C
	test ecx,ecx
	jne Block98

 Block97:
	push 0x80004003
	call _com_issue_error

 Block98:
	lea edx,[esp+0x5C]
	push edx
	lea eax,[esp+0x38]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x74],0x1D
	test ecx,ecx
	jne Block100

 Block99:
	push 0x80004003
	call _com_issue_error

 Block100:
	mov edx,dword ptr [esp+0x30]
	mov eax,dword ptr [edx+0xC]
	mov esi,dword ptr [esp+0x7C]
	sub eax,edi
	sub eax,dword ptr [esp+0x84]
	push esi
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov byte ptr [esp+0x7C],0x1E
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block102

 Block101:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block102:
	mov ebx,8
	mov byte ptr [esp+0x64],0x1A
	cmp word ptr [esp+0x4C],bx
	jne Block105

 Block103:
	xor eax,eax
	mov word ptr [esp+0x4C],ax
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block106

 Block104:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block106

 Block105:
	lea ecx,[esp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block106:
	mov byte ptr [esp+0x64],0x19
	cmp word ptr [esp+0x3C],bx
	jne Block109

 Block107:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block110

 Block108:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block110

 Block109:
	lea eax,[esp+0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block110:
	mov byte ptr [esp+0x64],2
	cmp word ptr [esp+0x2C],bx
	jne Block113

 Block111:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	test eax,eax
	je Block114

 Block112:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block114

 Block113:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block114:
	lea eax,[esp+0x2C]
	push eax
	call ebp
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block116

 Block115:
	push eax
	call _com_issue_error

 Block116:
	lea edx,[esp+0x3C]
	push edx
	mov byte ptr [esp+0x68],0x1F
	call ebp
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block118

 Block117:
	push eax
	call _com_issue_error

 Block118:
	mov ecx,3
	mov word ptr [esp+0x4C],cx
	mov dword ptr [esp+0x54],0
	mov ecx,dword ptr [esp+0x14]
	lea edx,[esp+0x2C]
	push edx
	mov edx,dword ptr [esp+0x74]
	lea eax,[esp+0x40]
	push eax
	push ecx
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0x21
	push edx
	mov byte ptr [esp+0x78],bl
	call _xbstr_t::_ctor_0
	mov ebp,dword ptr [esp+0x30]
	mov ecx,dword ptr [ebp+0x10]
	mov byte ptr [esp+0x74],0x22
	test ecx,ecx
	jne Block120

 Block119:
	push 0x80004003
	call _com_issue_error

 Block120:
	lea eax,[esp+0x5C]
	push eax
	lea edx,[esp+0x80]
	push edx
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x74],0x23
	test ecx,ecx
	jne Block122

 Block121:
	push 0x80004003
	call _com_issue_error

 Block122:
	mov eax,dword ptr [ebp+0xC]
	sub eax,edi
	sub eax,dword ptr [esp+0x84]
	push esi
	cdq
	sub eax,edx
	sar eax,1
	add eax,edi
	push eax
	mov byte ptr [esp+0x7C],0x24
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x6C]
	mov byte ptr [esp+0x64],bl
	test eax,eax
	je Block124

 Block123:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block124:
	mov esi,8
	mov byte ptr [esp+0x64],0x20
	cmp word ptr [esp+0x4C],si
	jne Block127

 Block125:
	xor eax,eax
	mov word ptr [esp+0x4C],ax
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block128

 Block126:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block128

 Block127:
	lea ecx,[esp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block128:
	mov byte ptr [esp+0x64],0x1F
	cmp word ptr [esp+0x3C],si
	jne Block131

 Block129:
	mov eax,dword ptr [esp+0x44]
	xor edx,edx
	mov word ptr [esp+0x3C],dx
	test eax,eax
	je Block132

 Block130:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block132

 Block131:
	lea eax,[esp+0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block132:
	mov byte ptr [esp+0x64],2
	cmp word ptr [esp+0x2C],si
	jne Block135

 Block133:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	test eax,eax
	je Block136

 Block134:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block136

 Block135:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block136:
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0x68],1
	call edx
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0x68],0
	call edx
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x64],0xFFFFFFFF
	test eax,eax
	je Block138

 Block137:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block138:
	mov ecx,dword ptr [esp+0x5C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x54
	ret 0xC
}
}
// ToolTip_SetItemList::~ToolTip_SetItemList
_SUB_EXCEPTION_HANDLER(482D00)
__SUB_CLASS_THIS0(00482D00, __thiscall, 84676,  ToolTip_SetItemList, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_482D00
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	mov eax,dword ptr [esi+8]
	mov dword ptr [esp+0x14],1
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov eax,dword ptr [esi+4]
	mov byte ptr [esp+0x14],0
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov esi,dword ptr [esi]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block6

 Block5:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block6:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CUIToolTip::DrawTextItemName
_SUB_EXCEPTION_HANDLER(48CA40)
__SUB_CLASS_THIS(0048CA40, __thiscall, 5777,  CUIToolTip, void, long, const char*, NakedParam<_x_com_ptr<IWzFont>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48CA40
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x34
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x44]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,3
	mov dword ptr [esp+0x4C],0
	mov word ptr [esp+0x24],ax
	mov dword ptr [esp+0x2C],0
	mov ecx,dword ptr [esi+0x10]
	mov byte ptr [esp+0x4C],1
	test ecx,ecx
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[esp+0x24]
	push edx
	lea eax,[esp+0x14]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x24],8
	mov byte ptr [esp+0x4C],3
	jne Block5

 Block3:
	mov eax,dword ptr [esp+0x2C]
	xor ecx,ecx
	mov word ptr [esp+0x24],cx
	test eax,eax
	je Block6

 Block4:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block6

 Block5:
	lea edx,[esp+0x24]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block6:
	mov eax,3
	mov ecx,0xFF
	mov word ptr [esp+0x14],ax
	mov dword ptr [esp+0x1C],ecx
	mov edx,dword ptr [esi+0xA00]
	mov esi,dword ptr [esp+0x10]
	mov byte ptr [esp+0x4C],4
	test esi,esi
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov ebp,dword ptr [esp+0x14]
	mov edi,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x28]
	mov dword ptr [eax+4],ebp
	mov ebp,dword ptr [esp+0x64]
	push edx
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x34]
	lea edx,[ebp+5]
	push edx
	push 0xA
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [edi+0x80]
	push esi
	call eax
	test eax,eax
	jge Block10

 Block9:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block10:
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0x4C],3
	jne Block13

 Block11:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block14

 Block12:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block14

 Block13:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block14:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x34]
	push eax
	call edi
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block16

 Block15:
	push eax
	call _com_issue_error

 Block16:
	lea edx,[esp+0x14]
	push edx
	mov byte ptr [esp+0x50],5
	call edi
	lea eax,[esp+0x14]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block18

 Block17:
	push eax
	call _com_issue_error

 Block18:
	mov eax,dword ptr [esp+0x5C]
	lea ecx,[esp+0x34]
	push ecx
	lea edx,[esp+0x18]
	push edx
	mov edx,dword ptr [esp+0x60]
	push eax
	push ecx
	mov dword ptr [esp+0x64],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0x60],6
	call _xbstr_t::_ctor_0
	push ebp
	mov byte ptr [esp+0x60],7
	push 0x12
	mov ecx,esi
	mov byte ptr [esp+0x64],6
	call IWzCanvas::DrawTextA
	mov edi,8
	mov byte ptr [esp+0x4C],5
	cmp word ptr [esp+0x14],di
	jne Block21

 Block19:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block22:
	mov byte ptr [esp+0x4C],3
	cmp word ptr [esp+0x34],di
	jne Block25

 Block23:
	mov eax,dword ptr [esp+0x3C]
	xor edx,edx
	mov word ptr [esp+0x34],dx
	test eax,eax
	je Block26

 Block24:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block26

 Block25:
	lea eax,[esp+0x34]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block26:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	mov byte ptr [esp+0x50],0
	call edx
	mov eax,dword ptr [esp+0x5C]
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	test eax,eax
	je Block28

 Block27:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block28:
	mov ecx,dword ptr [esp+0x44]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x40
	ret 0xC
}
}
// CUIToolTip::AddToolTip_SetItem
_SUB_EXCEPTION_HANDLER(4A4D10)
__SUB_CLASS_THIS(004A4D10, __thiscall, 5713,  CUIToolTip, void, long, long, GW_ItemSlotEquip*, NakedParam<_x_com_ptr<IWzGr2DLayer>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A4D10
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x40
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x54]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x14],ebx
	mov esi,dword ptr [esp+0x6C]
	xor ebp,ebp
	lea ecx,[esi+0xC]
	mov dword ptr [esp+0x5C],ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp dword ptr [eax+0x218],ebp
	jne Block2

 Block1:
	mov eax,dword ptr [esp+0x70]
	cmp eax,ebp
	jmp Block151

 Block2:
	mov dword ptr [esp+0x28],ebp
	mov eax,dword ptr [ebx+0x10]
	mov byte ptr [esp+0x5C],1
	mov dword ptr [ebx+0x10],ebp
	cmp dword ptr [esp+0x70],ebp
	je Block4

 Block3:
	mov ebp,eax
	mov dword ptr [esp+0x28],ebp
	jmp Block5

 Block4:
	mov dword ptr [esp+0x70],eax

 Block5:
	mov edi,dword ptr [esp+0x64]
	push esi
	mov esi,dword ptr [esp+0x6C]
	push esi
	push edi
	mov ecx,ebx
	call CUIToolTip::SetToolTip_SetItem
	test ebp,ebp
	je Block81

 Block6:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0xB8]
	lea ecx,[esp+0x24]
	push ecx
	push ebp
	mov dword ptr [esp+0x20],edi
	mov dword ptr [esp+0x74],esi
	mov dword ptr [esp+0x2C],0
	call edx
	xor edi,edi
	cmp eax,edi
	jge Block8

 Block7:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebp
	push eax
	call _com_issue_errorex

 Block8:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0xC0]
	lea ecx,[esp+0x1C]
	push ecx
	push ebp
	mov dword ptr [esp+0x24],edi
	call edx
	cmp eax,edi
	jge Block10

 Block9:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebp
	push eax
	call _com_issue_errorex

 Block10:
	mov esi,dword ptr [ebx+0x10]
	mov eax,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x30],eax
	cmp esi,edi
	jne Block12

 Block11:
	push 0x80004003
	call _com_issue_error

 Block12:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0xB8]
	lea edx,[esp+0x1C]
	push edx
	push esi
	mov dword ptr [esp+0x24],edi
	call eax
	cmp eax,edi
	jge Block14

 Block13:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block14:
	mov eax,dword ptr [esp+0x70]
	mov edi,dword ptr [esp+0x1C]
	test eax,eax
	jne Block16

 Block15:
	push 0x80004003
	call _com_issue_error

 Block16:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x20]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0xB8]
	mov dword ptr [esp+0x28],0
	call eax
	test eax,eax
	jge Block18

 Block17:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block18:
	mov ecx,dword ptr [esp+0x20]
	mov esi,dword ptr [ebx+0x10]
	add edi,ecx
	test esi,esi
	jne Block20

 Block19:
	push 0x80004003
	call _com_issue_error

 Block20:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xC0]
	lea eax,[esp+0x20]
	push eax
	xor ebx,ebx
	push esi
	mov dword ptr [esp+0x28],ebx
	call ecx
	cmp eax,ebx
	jge Block22

 Block21:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block22:
	mov edx,dword ptr [ebp]
	mov ecx,dword ptr [edx+0xC0]
	mov esi,dword ptr [esp+0x20]
	lea eax,[esp+0x1C]
	push eax
	push ebp
	mov dword ptr [esp+0x24],ebx
	call ecx
	cmp eax,ebx
	jge Block24

 Block23:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebp
	push eax
	call _com_issue_errorex

 Block24:
	mov edx,dword ptr [esp+0x1C]
	add esi,edx
	call get_screen_width
	mov ecx,dword ptr [esp+0x64]
	lea edx,[edi+ecx]
	cmp edx,eax
	jle Block26

 Block25:
	call get_screen_width
	sub eax,edi
	mov dword ptr [esp+0x18],eax
	jmp Block27

 Block26:
	mov eax,ecx

 Block27:
	cmp eax,ebx
	jge Block29

 Block28:
	mov dword ptr [esp+0x18],ebx

 Block29:
	call get_screen_height
	mov ecx,dword ptr [esp+0x68]
	lea edx,[esi+ecx]
	cmp edx,eax
	jle Block31

 Block30:
	call get_screen_height
	sub eax,esi
	mov dword ptr [esp+0x6C],eax
	jmp Block32

 Block31:
	mov eax,ecx

 Block32:
	cmp eax,ebx
	jge Block34

 Block33:
	mov dword ptr [esp+0x30],ebx
	mov dword ptr [esp+0x6C],ebx

 Block34:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0xC0]
	lea ecx,[esp+0x64]
	push ecx
	push ebp
	mov dword ptr [esp+0x6C],ebx
	call edx
	cmp eax,ebx
	jge Block36

 Block35:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebp
	push eax
	call _com_issue_errorex

 Block36:
	mov eax,dword ptr [esp+0x70]
	mov ebx,dword ptr [esp+0x64]
	test eax,eax
	jne Block38

 Block37:
	push 0x80004003
	call _com_issue_error

 Block38:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x68]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0xC0]
	mov dword ptr [esp+0x70],0
	call eax
	test eax,eax
	jge Block40

 Block39:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block40:
	mov ecx,dword ptr [esp+0x14]
	mov esi,dword ptr [ecx+0x10]
	mov edi,dword ptr [esp+0x68]
	test esi,esi
	jne Block42

 Block41:
	push 0x80004003
	call _com_issue_error

 Block42:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xC0]
	lea eax,[esp+0x20]
	push eax
	push esi
	mov dword ptr [esp+0x28],0
	call ecx
	test eax,eax
	jge Block44

 Block43:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block44:
	add edi,ebx
	cmp edi,dword ptr [esp+0x20]
	jle Block50

 Block45:
	mov edi,dword ptr [esp+0x70]
	test edi,edi
	jne Block47

 Block46:
	push 0x80004003
	call _com_issue_error

 Block47:
	mov edx,dword ptr [esp+0x14]
	mov ecx,dword ptr [edx+0x10]
	test ecx,ecx
	jne Block49

 Block48:
	push 0x80004003
	call _com_issue_error

 Block49:
	call IWzGr2DLayer::Getheight
	mov ecx,ebp
	mov ebx,eax
	call IWzGr2DLayer::Getheight
	mov esi,eax
	mov ecx,edi
	sub esi,ebx
	call IWzGr2DLayer::Getheight
	add eax,esi
	mov dword ptr [esp+0x30],eax

 Block50:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x44]
	push eax
	call esi
	lea ecx,[esp+0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block52

 Block51:
	push eax
	call _com_issue_error

 Block52:
	lea edx,[esp+0x34]
	mov bl,2
	push edx
	mov byte ptr [esp+0x60],bl
	call esi
	lea eax,[esp+0x34]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block54

 Block53:
	push eax
	call _com_issue_error

 Block54:
	mov ecx,dword ptr [ebp]
	mov eax,dword ptr [ecx+0xC0]
	lea edx,[esp+0x64]
	push edx
	push ebp
	mov byte ptr [esp+0x64],3
	mov dword ptr [esp+0x6C],0
	call eax
	test eax,eax
	jge Block56

 Block55:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push ebp
	push eax
	call _com_issue_errorex

 Block56:
	mov ecx,dword ptr [esp+0x70]
	test ecx,ecx
	jne Block58

 Block57:
	push 0x80004003
	call _com_issue_error

 Block58:
	lea edx,[esp+0x44]
	push edx
	mov edx,dword ptr [esp+0x68]
	lea eax,[esp+0x38]
	push eax
	mov eax,dword ptr [esp+0x74]
	add edx,eax
	push edx
	mov edx,dword ptr [esp+0x24]
	push edx
	call IWzVector2D::RelMove
	mov edi,8
	mov byte ptr [esp+0x5C],bl
	cmp word ptr [esp+0x34],di
	jne Block61

 Block59:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block62

 Block60:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block62

 Block61:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block62:
	mov byte ptr [esp+0x5C],1
	cmp word ptr [esp+0x44],di
	jne Block65

 Block63:
	mov eax,dword ptr [esp+0x4C]
	xor edx,edx
	mov word ptr [esp+0x44],dx
	test eax,eax
	je Block66

 Block64:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block66

 Block65:
	lea eax,[esp+0x44]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block66:
	mov ecx,0xD
	mov word ptr [esp+0x44],cx
	mov dword ptr [esp+0x4C],ebp
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+4]
	push ebp
	call eax
	mov ebp,dword ptr [esp+0x14]
	mov ecx,dword ptr [ebp+0x10]
	mov byte ptr [esp+0x5C],4
	test ecx,ecx
	jne Block68

 Block67:
	push 0x80004003
	call _com_issue_error

 Block68:
	lea edx,[esp+0x44]
	push edx
	call IWzVector2D::Putorigin
	mov byte ptr [esp+0x5C],1
	cmp word ptr [esp+0x44],di
	jne Block71

 Block69:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block72

 Block70:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block72

 Block71:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block72:
	lea edx,[esp+0x34]
	push edx
	call esi
	lea eax,[esp+0x34]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block74

 Block73:
	push eax
	call _com_issue_error

 Block74:
	lea ecx,[esp+0x44]
	mov bl,5
	push ecx
	mov byte ptr [esp+0x60],bl
	call esi
	lea edx,[esp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block76

 Block75:
	push eax
	call _com_issue_error

 Block76:
	mov ecx,dword ptr [ebp+0x10]
	mov byte ptr [esp+0x5C],6
	test ecx,ecx
	jne Block78

 Block77:
	push 0x80004003
	call _com_issue_error

 Block78:
	lea eax,[esp+0x34]
	push eax
	mov eax,dword ptr [esp+0x34]
	lea edx,[esp+0x48]
	push edx
	mov edx,dword ptr [esp+0x2C]
	push eax
	push edx
	call IWzVector2D::RelMove
	mov byte ptr [esp+0x5C],bl
	cmp word ptr [esp+0x44],di
	jne Block143

 Block79:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block144

 Block80:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block144

 Block81:
	mov edx,dword ptr [esp+0x14]
	mov ebp,esi
	mov esi,dword ptr [edx+0x10]
	xor ebx,ebx
	mov ecx,edi
	mov dword ptr [esp+0x6C],ecx
	cmp esi,ebx
	jne Block83

 Block82:
	push 0x80004003
	call _com_issue_error

 Block83:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0xB8]
	lea ecx,[esp+0x24]
	push ecx
	push esi
	mov dword ptr [esp+0x2C],ebx
	call edx
	cmp eax,ebx
	jge Block85

 Block84:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block85:
	mov eax,dword ptr [esp+0x70]
	mov edi,dword ptr [esp+0x24]
	cmp eax,ebx
	jne Block87

 Block86:
	push 0x80004003
	call _com_issue_error

 Block87:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x20]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0xB8]
	mov dword ptr [esp+0x28],ebx
	call eax
	cmp eax,ebx
	jge Block89

 Block88:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block89:
	mov eax,dword ptr [esp+0x70]
	mov ecx,dword ptr [esp+0x20]
	lea ebx,[ecx+edi]
	test eax,eax
	jne Block91

 Block90:
	push 0x80004003
	call _com_issue_error

 Block91:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0xC0]
	lea ecx,[esp+0x24]
	push ecx
	push eax
	mov esi,eax
	mov dword ptr [esp+0x2C],0
	call edx
	test eax,eax
	jge Block93

 Block92:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block93:
	mov eax,dword ptr [esp+0x14]
	mov esi,dword ptr [eax+0x10]
	mov edi,dword ptr [esp+0x24]
	test esi,esi
	jne Block95

 Block94:
	push 0x80004003
	call _com_issue_error

 Block95:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0xC0]
	lea edx,[esp+0x20]
	push edx
	push esi
	mov dword ptr [esp+0x28],0
	call eax
	test eax,eax
	jge Block97

 Block96:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block97:
	mov eax,dword ptr [esp+0x20]
	cmp edi,eax
	jge Block99

 Block98:
	mov edi,eax

 Block99:
	call get_screen_width
	mov ecx,dword ptr [esp+0x64]
	lea edx,[ebx+ecx]
	cmp edx,eax
	jle Block101

 Block100:
	call get_screen_width
	sub eax,ebx
	mov dword ptr [esp+0x6C],eax
	jmp Block102

 Block101:
	mov eax,ecx

 Block102:
	test eax,eax
	jge Block104

 Block103:
	mov dword ptr [esp+0x6C],0

 Block104:
	call get_screen_height
	mov ecx,ebp
	lea edx,[edi+ecx]
	cmp edx,eax
	jle Block106

 Block105:
	call get_screen_height
	mov ebp,eax
	sub ebp,edi

 Block106:
	test ebp,ebp
	jge Block108

 Block107:
	xor ebp,ebp

 Block108:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x34]
	push eax
	call esi
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block110

 Block109:
	push eax
	call _com_issue_error

 Block110:
	lea edx,[esp+0x44]
	mov bl,7
	push edx
	mov byte ptr [esp+0x60],bl
	call esi
	lea eax,[esp+0x44]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block112

 Block111:
	push eax
	call _com_issue_error

 Block112:
	mov ecx,dword ptr [esp+0x70]
	mov edi,8
	mov byte ptr [esp+0x5C],8
	test ecx,ecx
	jne Block114

 Block113:
	push 0x80004003
	call _com_issue_error

 Block114:
	lea edx,[esp+0x34]
	push edx
	mov edx,dword ptr [esp+0x70]
	lea eax,[esp+0x48]
	push eax
	push ebp
	push edx
	call IWzVector2D::RelMove
	mov byte ptr [esp+0x5C],bl
	cmp word ptr [esp+0x44],di
	jne Block117

 Block115:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block118

 Block116:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block118

 Block117:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block118:
	mov byte ptr [esp+0x5C],1
	cmp word ptr [esp+0x34],di
	jne Block121

 Block119:
	mov eax,dword ptr [esp+0x3C]
	xor edx,edx
	mov word ptr [esp+0x34],dx
	test eax,eax
	je Block122

 Block120:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block122

 Block121:
	lea eax,[esp+0x34]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block122:
	mov eax,dword ptr [esp+0x70]
	mov ecx,0xD
	mov word ptr [esp+0x44],cx
	mov dword ptr [esp+0x4C],eax
	test eax,eax
	je Block124

 Block123:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block124:
	mov ebp,dword ptr [esp+0x14]
	mov ecx,dword ptr [ebp+0x10]
	mov byte ptr [esp+0x5C],9
	test ecx,ecx
	jne Block126

 Block125:
	push 0x80004003
	call _com_issue_error

 Block126:
	lea edx,[esp+0x44]
	push edx
	call IWzVector2D::Putorigin
	mov byte ptr [esp+0x5C],1
	cmp word ptr [esp+0x44],di
	jne Block129

 Block127:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block130

 Block128:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block130

 Block129:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block130:
	lea edx,[esp+0x34]
	push edx
	call esi
	lea eax,[esp+0x34]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block132

 Block131:
	push eax
	call _com_issue_error

 Block132:
	lea ecx,[esp+0x44]
	mov bl,0xA
	push ecx
	mov byte ptr [esp+0x60],bl
	call esi
	lea edx,[esp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block134

 Block133:
	push eax
	call _com_issue_error

 Block134:
	mov eax,dword ptr [esp+0x70]
	mov byte ptr [esp+0x5C],0xB
	test eax,eax
	jne Block136

 Block135:
	push 0x80004003
	call _com_issue_error

 Block136:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x64]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0xB8]
	mov dword ptr [esp+0x6C],0
	call eax
	test eax,eax
	jge Block138

 Block137:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block138:
	mov ecx,dword ptr [ebp+0x10]
	test ecx,ecx
	jne Block140

 Block139:
	push 0x80004003
	call _com_issue_error

 Block140:
	lea edx,[esp+0x34]
	push edx
	mov edx,dword ptr [esp+0x68]
	lea eax,[esp+0x48]
	push eax
	push 0
	push edx
	call IWzVector2D::RelMove
	mov byte ptr [esp+0x5C],bl
	cmp word ptr [esp+0x44],di
	jne Block143

 Block141:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block144

 Block142:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block144

 Block143:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block144:
	mov byte ptr [esp+0x5C],1
	cmp word ptr [esp+0x34],di
	jne Block147

 Block145:
	mov eax,dword ptr [esp+0x3C]
	xor edx,edx
	mov word ptr [esp+0x34],dx
	test eax,eax
	je Block148

 Block146:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block148

 Block147:
	lea eax,[esp+0x34]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block148:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x5C],0
	test eax,eax
	je Block150

 Block149:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block150:
	mov eax,dword ptr [esp+0x70]
	test eax,eax

 Block151:
	mov dword ptr [esp+0x5C],0xFFFFFFFF
	je Block153

 Block152:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block153:
	mov ecx,dword ptr [esp+0x54]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x4C
	ret 0x10
}
}
// CUIToolTip::SetToolTip_Equip
_SUB_EXCEPTION_HANDLER(4A5670)
__SUB_CLASS_THIS(004A5670, __thiscall, 5707,  CUIToolTip, void, long, long, GW_ItemSlotEquip*, long, const char*, long, long, CS_LIMITGOODS*, long, int32_t, long, long, long, _FILETIME*, const char*, NakedParam<ZRef<ITCITEM>>, CUIToolTip::eITCToolTip, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A5670
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xD0
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xE4]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x58],ecx
	xor ebx,ebx
	xor edi,edi
	mov dword ptr [esp+0x14],ebx
	cmp dword ptr [ecx+0x10],edi
	mov dword ptr [esp+0xEC],edi
	sete al
	test al,al
	sete al
	test al,al
	je Block4

 Block1:
	mov eax,dword ptr [ecx+0x18]
	cmp eax,dword ptr [esp+0xF4]
	jne Block4

 Block2:
	mov ecx,dword ptr [ecx+0x1C]
	cmp ecx,dword ptr [esp+0xF8]
	jne Block4

 Block3:
	lea ecx,[esp+0x130]
	mov dword ptr [esp+0xEC],0xFFFFFFFF
	call ZRef<ITCITEM>::~ZRef<ITCITEM>
	jmp Block637

 Block4:
	mov dword ptr [esp+0x24],edi
	mov dword ptr [esp+0x4C],edi
	mov esi,dword ptr [esp+0xFC]
	add esi,0xC
	mov ecx,esi
	mov byte ptr [esp+0xEC],2
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsOnlyItem
	test eax,eax
	je Block8

 Block5:
	lea edx,[esp+0x1C]
	push 0x2C5
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0xF0],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],2
	cmp eax,edi
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov edi,dword ptr [esp+0x24]

 Block8:
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsQuestItem
	test eax,eax
	je Block27

 Block9:
	test edi,edi
	je Block11

 Block10:
	cmp byte ptr [edi],0
	jne Block12

 Block11:
	xor ebp,ebp
	mov dword ptr [esp+0x48],ebp
	mov ebx,1
	lea esi,[esp+0x48]
	mov byte ptr [esp+0xEC],4
	mov dword ptr [esp+0x14],ebx
	jmp Block13

 Block12:
	push 0
	push 2
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x34],0
	call ZXString<char>::GetBuffer
	mov cx,word ptr [_S___20]
	mov word ptr [eax],cx
	push 2
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x48]
	mov dword ptr [esp+0x14],2
	mov ebx,dword ptr [esp+0x14]
	lea esi,[esp+0x2C]
	mov dword ptr [esp+0xEC],5

 Block13:
	lea edx,[esp+0x30]
	push 0x2C6
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	mov dword ptr [esp+0xF4],6
	call ZXString<char>::op_add_1
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],7
	test eax,eax
	je Block15

 Block14:
	mov ecx,dword ptr [eax-4]
	jmp Block16

 Block15:
	xor ecx,ecx

 Block16:
	push ecx
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],6
	test eax,eax
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xEC],5
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block20:
	mov dword ptr [esp+0xEC],4
	test bl,2
	je Block23

 Block21:
	mov eax,dword ptr [esp+0x2C]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x14],ebx
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	mov dword ptr [esp+0xEC],2
	test bl,1
	je Block26

 Block24:
	and ebx,0xFFFFFFFE
	mov dword ptr [esp+0x14],ebx
	test ebp,ebp
	je Block26

 Block25:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block26:
	mov ebx,dword ptr [esp+0x14]
	mov edi,dword ptr [esp+0x24]

 Block27:
	mov ecx,dword ptr [esp+0xFC]
	add ecx,0xC
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsPartyQuestItem
	test eax,eax
	je Block46

 Block28:
	test edi,edi
	je Block30

 Block29:
	cmp byte ptr [edi],0
	jne Block31

 Block30:
	xor ebp,ebp
	mov dword ptr [esp+0x48],ebp
	lea esi,[esp+0x48]
	mov byte ptr [esp+0xEC],8
	or ebx,4
	jmp Block32

 Block31:
	push 0
	push 2
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x34],0
	call ZXString<char>::GetBuffer
	mov cx,word ptr [_S___20]
	mov word ptr [eax],cx
	push 2
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x48]
	lea esi,[esp+0x2C]
	mov dword ptr [esp+0xEC],9
	or ebx,8

 Block32:
	lea edx,[esp+0x30]
	push 0x2C7
	push edx
	mov dword ptr [esp+0x1C],ebx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	mov dword ptr [esp+0xF4],0xA
	call ZXString<char>::op_add_1
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],0xB
	test eax,eax
	je Block34

 Block33:
	mov ecx,dword ptr [eax-4]
	jmp Block35

 Block34:
	xor ecx,ecx

 Block35:
	push ecx
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0xA
	test eax,eax
	je Block37

 Block36:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block37:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xEC],9
	test eax,eax
	je Block39

 Block38:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block39:
	mov dword ptr [esp+0xEC],8
	test bl,8
	je Block42

 Block40:
	mov eax,dword ptr [esp+0x2C]
	and ebx,0xFFFFFFF7
	mov dword ptr [esp+0x14],ebx
	test eax,eax
	je Block42

 Block41:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block42:
	mov dword ptr [esp+0xEC],2
	test bl,4
	je Block45

 Block43:
	and ebx,0xFFFFFFFB
	mov dword ptr [esp+0x14],ebx
	test ebp,ebp
	je Block45

 Block44:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block45:
	mov edi,dword ptr [esp+0x24]

 Block46:
	mov ebp,dword ptr [esp+0xFC]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebp
	call CItemInfo::IsTradeBlockItem_1
	test eax,eax
	je Block72

 Block47:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x14]
	mov ecx,ebp
	call eax
	test eax,eax
	je Block54

 Block48:
	test edi,edi
	je Block50

 Block49:
	cmp byte ptr [edi],0
	jne Block52

 Block50:
	lea ecx,[esp+0x1C]
	push 0x2C9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],0xC
	test eax,eax
	je Block68

 Block51:
	mov ecx,dword ptr [eax-4]
	jmp Block69

 Block52:
	lea edx,[esp+0x1C]
	push 0x2C9
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0xF0],0xD
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],2
	test eax,eax
	je Block72

 Block53:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block72

 Block54:
	xor eax,eax
	cmp edi,eax
	je Block56

 Block55:
	cmp byte ptr [edi],al
	jne Block66

 Block56:
	mov dword ptr [esp+0x48],eax
	mov esi,dword ptr [esp+0x28]
	or ebx,0x10
	lea eax,[esp+0x48]
	mov byte ptr [esp+0xEC],0xE
	mov dword ptr [esp+0x14],ebx

 Block57:
	xor ecx,ecx

 Block58:
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::_Cat
	mov dword ptr [esp+0xEC],0xE
	test bl,0x20
	je Block61

 Block59:
	and ebx,0xFFFFFFDF
	mov dword ptr [esp+0x14],ebx
	test esi,esi
	je Block61

 Block60:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block61:
	mov dword ptr [esp+0xEC],2
	test bl,0x10
	je Block64

 Block62:
	mov eax,dword ptr [esp+0x48]
	and ebx,0xFFFFFFEF
	mov dword ptr [esp+0x14],ebx
	test eax,eax
	je Block64

 Block63:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block64:
	lea edx,[esp+0x1C]
	push 0x2C8
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],0x10
	test eax,eax
	je Block68

 Block65:
	mov ecx,dword ptr [eax-4]
	jmp Block69

 Block66:
	push eax
	push 2
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x30],eax
	call ZXString<char>::GetBuffer
	mov cx,word ptr [_S___20]
	mov word ptr [eax],cx
	push 2
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	mov esi,dword ptr [esp+0x28]
	or ebx,0x20
	lea eax,[esp+0x28]
	mov dword ptr [esp+0xEC],0xF
	mov dword ptr [esp+0x14],ebx
	test esi,esi
	je Block57

 Block67:
	mov ecx,dword ptr [esi-4]
	jmp Block58

 Block68:
	xor ecx,ecx

 Block69:
	push ecx
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],2
	test eax,eax
	je Block71

 Block70:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block71:
	mov edi,dword ptr [esp+0x24]

 Block72:
	lea ecx,[ebp+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsBindedWhenEquiped
	test eax,eax
	je Block92

 Block73:
	mov ecx,dword ptr [esp+0xFC]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax+0x10]
	call edx
	test eax,eax
	jne Block92

 Block74:
	test edi,edi
	je Block76

 Block75:
	cmp byte ptr [edi],al
	jne Block77

 Block76:
	xor ebp,ebp
	mov dword ptr [esp+0x48],ebp
	lea esi,[esp+0x48]
	mov byte ptr [esp+0xEC],0x11
	or ebx,0x40
	jmp Block78

 Block77:
	push 0
	push 2
	lea ecx,[esp+0x34]
	mov dword ptr [esp+0x34],0
	call ZXString<char>::GetBuffer
	mov cx,word ptr [_S___20]
	mov word ptr [eax],cx
	push 2
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x48]
	lea esi,[esp+0x2C]
	mov dword ptr [esp+0xEC],0x12
	or ebx,0x80

 Block78:
	lea edx,[esp+0x30]
	push 0x2CC
	push edx
	mov dword ptr [esp+0x1C],ebx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea eax,[esp+0x20]
	push eax
	mov ecx,esi
	mov dword ptr [esp+0xF4],0x13
	call ZXString<char>::op_add_1
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],0x14
	test eax,eax
	je Block80

 Block79:
	mov ecx,dword ptr [eax-4]
	jmp Block81

 Block80:
	xor ecx,ecx

 Block81:
	push ecx
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0x13
	test eax,eax
	je Block83

 Block82:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block83:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xEC],0x12
	test eax,eax
	je Block85

 Block84:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block85:
	mov dword ptr [esp+0xEC],0x11
	test bl,bl
	jns Block88

 Block86:
	mov eax,dword ptr [esp+0x2C]
	and ebx,0xFFFFFF7F
	mov dword ptr [esp+0x14],ebx
	test eax,eax
	je Block88

 Block87:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block88:
	mov dword ptr [esp+0xEC],2
	test bl,0x40
	je Block91

 Block89:
	and ebx,0xFFFFFFBF
	mov dword ptr [esp+0x14],ebx
	test ebp,ebp
	je Block91

 Block90:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block91:
	mov edi,dword ptr [esp+0x24]

 Block92:
	mov ebp,dword ptr [esp+0xFC]
	lea ecx,[ebp+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsOnlyEquipItem
	xor esi,esi
	test eax,eax
	je Block101

 Block93:
	cmp edi,esi
	je Block95

 Block94:
	cmp byte ptr [edi],0
	jne Block105

 Block95:
	lea ecx,[esp+0x1C]
	push 0x14B4
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],0x15
	cmp eax,esi
	je Block97

 Block96:
	mov ecx,dword ptr [eax-4]
	jmp Block98

 Block97:
	xor ecx,ecx

 Block98:
	push ecx
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],2
	cmp eax,esi
	je Block100

 Block99:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block100:
	mov edi,dword ptr [esp+0x24]

 Block101:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebp
	call CItemInfo::IsAccountSharableItem_1
	test eax,eax
	je Block136

 Block102:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push ebp
	call CItemInfo::IsSharableOnceItem_1
	test eax,eax
	je Block116

 Block103:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x14]
	mov ecx,ebp
	call eax
	test eax,eax
	je Block116

 Block104:
	lea ecx,[esp+0x30]
	push 0x2C8
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xEC],0x19
	or ebx,0x100
	jmp Block117

 Block105:
	mov eax,dword ptr [esp+0x4C]
	cmp eax,esi
	je Block107

 Block106:
	cmp byte ptr [eax],0
	jne Block109

 Block107:
	lea edx,[esp+0x1C]
	push 0x14B4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0xF0],0x16
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],2
	cmp eax,esi
	je Block101

 Block108:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block101

 Block109:
	lea eax,[esp+0x30]
	push 0x14B4
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x20]
	push offset _S___20
	push ecx
	mov byte ptr [esp+0xF8],0x17
	call __op_add_char_char
	add esp,0xC
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],0x18
	cmp eax,esi
	je Block111

 Block110:
	mov ecx,dword ptr [eax-4]
	jmp Block112

 Block111:
	xor ecx,ecx

 Block112:
	push ecx
	push eax
	lea ecx,[esp+0x54]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0x17
	cmp eax,esi
	je Block114

 Block113:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block114:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xEC],2
	cmp eax,esi
	je Block101

 Block115:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block101

 Block116:
	lea edx,[esp+0x1C]
	push 0x1467
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0xEC],0x1A
	or ebx,0x200

 Block117:
	push eax
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x18],ebx
	mov dword ptr [esp+0x30],esi
	call ZXString<char>::op_assign
	mov dword ptr [esp+0xEC],0x1C
	test ebx,0x200
	je Block120

 Block118:
	mov eax,dword ptr [esp+0x1C]
	and ebx,0xFFFFFDFF
	mov dword ptr [esp+0x14],ebx
	cmp eax,esi
	je Block120

 Block119:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block120:
	mov byte ptr [esp+0xEC],0x1D
	test ebx,0x100
	je Block123

 Block121:
	mov eax,dword ptr [esp+0x30]
	and ebx,0xFFFFFEFF
	mov dword ptr [esp+0x14],ebx
	cmp eax,esi
	je Block123

 Block122:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block123:
	cmp edi,esi
	je Block125

 Block124:
	cmp byte ptr [edi],0
	jne Block126

 Block125:
	lea eax,[esp+0x2C]
	jmp Block127

 Block126:
	push offset _S___20
	lea eax,[esp+0x98]
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::op_add_0
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x4C]
	or ebx,0x400
	push edx
	mov ecx,eax
	mov byte ptr [esp+0xF4],0x1E
	mov dword ptr [esp+0x1C],ebx
	call ZXString<char>::op_add_1
	or ebx,0x800
	mov dword ptr [esp+0xEC],0x1F
	mov dword ptr [esp+0x14],ebx

 Block127:
	push eax
	lea ecx,[esp+0x28]
	call ZXString<char>::op_assign
	mov dword ptr [esp+0xEC],0x1E
	test ebx,0x800
	je Block130

 Block128:
	mov eax,dword ptr [esp+0x48]
	and ebx,0xFFFFF7FF
	mov dword ptr [esp+0x14],ebx
	cmp eax,esi
	je Block130

 Block129:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block130:
	mov dword ptr [esp+0xEC],0x1D
	test ebx,0x400
	je Block133

 Block131:
	mov eax,dword ptr [esp+0x94]
	and ebx,0xFFFFFBFF
	mov dword ptr [esp+0x14],ebx
	cmp eax,esi
	je Block133

 Block132:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block133:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xEC],2
	cmp eax,esi
	je Block135

 Block134:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block135:
	mov edi,dword ptr [esp+0x24]

 Block136:
	mov dword ptr [esp+0x54],esi
	mov dword ptr [esp+0xA8],esi
	mov dword ptr [esp+0x9C],esi
	mov dword ptr [esp+0x48],esi
	mov eax,dword ptr [ebp+0x18]
	or eax,dword ptr [ebp+0x1C]
	mov byte ptr [esp+0xEC],0x22
	je Block138

 Block137:
	mov esi,1

 Block138:
	mov ebx,dword ptr [esp+0xFC]
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+4]
	push 0
	push 0
	mov ecx,ebx
	call eax
	mov edx,dword ptr [esp+0x108]
	push eax
	push esi
	lea ecx,[esp+0xAC]
	push ecx
	push edx
	add ebx,0x20
	push ebx
	mov ebx,dword ptr [esp+0x74]
	mov ecx,ebx
	call CUIToolTip::GetItemExpireDate
	mov ebp,dword ptr [esp+0x9C]
	test ebp,ebp
	je Block141

 Block139:
	cmp byte ptr [ebp],0
	je Block141

 Block140:
	lea eax,[esp+0x9C]
	push eax
	push 0xFFFFFFFF
	lea ecx,[esp+0x5C]
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign

 Block141:
	mov esi,dword ptr [esp+0x104]
	test esi,esi
	je Block146

 Block142:
	cmp byte ptr [esi],0
	je Block146

 Block143:
	lea ecx,[esp+0x1C]
	push 0x29C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea edx,[esp+0x50]
	push edx
	mov byte ptr [esp+0xF8],0x23
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0xEC],0x22
	test eax,eax
	je Block145

 Block144:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block145:
	lea eax,[esp+0x48]
	push eax
	push 0xFFFFFFFF
	lea ecx,[esp+0x5C]
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign

 Block146:
	mov esi,dword ptr [esp+0xFC]
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsNotExtendItem
	test eax,eax
	je Block157

 Block147:
	test ebp,ebp
	je Block157

 Block148:
	cmp byte ptr [ebp],0
	je Block157

 Block149:
	test edi,edi
	je Block151

 Block150:
	cmp byte ptr [edi],0
	jne Block170

 Block151:
	lea ecx,[esp+0x1C]
	push 0x14B3
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xEC],0x24
	test eax,eax
	je Block153

 Block152:
	mov ecx,dword ptr [eax-4]
	jmp Block154

 Block153:
	xor ecx,ecx

 Block154:
	push ecx
	push eax
	lea ecx,[esp+0x2C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0x22
	test eax,eax
	je Block156

 Block155:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block156:
	mov edi,dword ptr [esp+0x24]

 Block157:
	mov dword ptr [esp+0x88],0
	test edi,edi
	je Block160

 Block158:
	cmp byte ptr [edi],0
	je Block160

 Block159:
	push 1
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x54],esp
	push 0xE
	push edx
	mov ecx,ebx
	call CUIToolTip::GetFontByType
	push edi
	push 0
	push 0xCE
	push 0x19
	mov ecx,ebx
	call CUIToolTip::DrawTextSepartedLine
	mov dword ptr [esp+0x88],eax

 Block160:
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block163

 Block161:
	cmp byte ptr [eax],0
	je Block163

 Block162:
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x54],esp
	push 0xE
	push eax
	mov ecx,ebx
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x5C]
	push ecx
	push 0
	push 0xCE
	push 0x19
	mov ecx,ebx
	call CUIToolTip::DrawTextSepartedLine
	add dword ptr [esp+0x88],eax

 Block163:
	lea ecx,[esi+0x30]
	xor eax,eax
	mov dword ptr [esp+0x2C],eax
	test ecx,ecx
	je Block167

 Block164:
	mov eax,ecx
	lea esi,[eax+1]

 Block165:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block165

 Block166:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push 0
	push esi
	lea ecx,[esp+0x3C]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x30]
	call ZXString<char>::ReleaseBuffer
	mov eax,dword ptr [esp+0x2C]
	mov esi,dword ptr [esp+0xFC]

 Block167:
	mov byte ptr [esp+0xEC],0x28
	test eax,eax
	je Block178

 Block168:
	cmp byte ptr [eax],0
	je Block178

 Block169:
	xor eax,eax
	jmp Block179

 Block170:
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block172

 Block171:
	cmp byte ptr [eax],0
	jne Block174

 Block172:
	lea edx,[esp+0x1C]
	push 0x14B3
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0xF0],0x25
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0x22
	test eax,eax
	je Block157

 Block173:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block157

 Block174:
	lea eax,[esp+0x30]
	push 0x14B3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x20]
	push offset _S___20
	push ecx
	mov byte ptr [esp+0xF8],0x26
	call __op_add_char_char
	add esp,0xC
	push eax
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0xF0],0x27
	call ZXString<char>::op_add_assign_other_0
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0x26
	test eax,eax
	je Block176

 Block175:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block176:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xEC],0x22
	test eax,eax
	je Block157

 Block177:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block157

 Block178:
	mov eax,1

 Block179:
	mov edx,dword ptr [esi+0x10D]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFED
	push edx
	add eax,0x13
	add esi,0x10B
	push esi
	mov dword ptr [esp+0x98],eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	test al,al
	jbe Block181

 Block180:
	add dword ptr [esp+0x90],0x12

 Block181:
	mov eax,dword ptr [esp+0x108]
	test eax,eax
	je Block184

 Block182:
	cmp eax,dword ptr [esp+0x10C]
	je Block184

 Block183:
	mov ebp,0x23
	jmp Block185

 Block184:
	xor ebp,ebp

 Block185:
	mov eax,dword ptr [esp+0x124]
	neg eax
	sbb eax,eax
	and eax,0x26
	add ebp,eax
	mov dword ptr [esp+0x98],ebp
	mov dword ptr [esp+0x94],0
	mov eax,dword ptr [esp+0x12C]
	mov byte ptr [esp+0xEC],0x29
	test eax,eax
	je Block196

 Block186:
	push eax
	lea ecx,[esp+0x98]
	call ZXString<char>::AssignCStr
	lea ecx,[esp+0x8C]
	push 0
	push ecx
	call get_basic_font
	add esp,8
	lea edx,[esp+0x78]
	push edx
	mov byte ptr [esp+0xF0],0x2A
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x78]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block188

 Block187:
	push eax
	call _com_issue_error

 Block188:
	mov edx,dword ptr [esp+0x94]
	lea ecx,[esp+0x78]
	push ecx
	push ecx
	mov dword ptr [esp+0x4C],esp
	mov ecx,esp
	mov bl,0x2B
	push edx
	mov byte ptr [esp+0xF8],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x94]
	mov byte ptr [esp+0xF4],0x2C
	test ecx,ecx
	jne Block190

 Block189:
	push 0x80004003
	call _com_issue_error

 Block190:
	mov byte ptr [esp+0xF4],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x78],8
	mov esi,eax
	mov byte ptr [esp+0xEC],0x2A
	jne Block193

 Block191:
	xor eax,eax
	mov word ptr [esp+0x78],ax
	mov eax,dword ptr [esp+0x80]
	test eax,eax
	je Block194

 Block192:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block194

 Block193:
	lea ecx,[esp+0x78]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block194:
	mov eax,0x939A85C5
	imul esi
	add edx,esi
	sar edx,7
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	shl eax,4
	add ebp,eax
	mov eax,dword ptr [esp+0x8C]
	mov dword ptr [esp+0x98],ebp
	mov byte ptr [esp+0xEC],0x29
	test eax,eax
	je Block196

 Block195:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block196:
	mov eax,dword ptr [esp+0x134]
	test eax,eax
	je Block199

 Block197:
	cmp dword ptr [eax+0x10],0
	jle Block199

 Block198:
	add ebp,0x40
	mov dword ptr [esp+0x98],ebp

 Block199:
	cmp dword ptr [esp+0x138],2
	jne Block202

 Block200:
	cmp dword ptr [esp+0x128],0
	je Block202

 Block201:
	add ebp,0x10
	mov dword ptr [esp+0x98],ebp

 Block202:
	mov ebx,dword ptr [esp+0xFC]
	lea esi,[ebx+0xC]
	mov ecx,esi
	mov edi,0xAE
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x86
	jne Block204

 Block203:
	lea edi,[eax+0x3A]

 Block204:
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block206

 Block205:
	mov eax,dword ptr [eax-4]

 Block206:
	shl eax,4
	add eax,edi
	mov edi,dword ptr [esp+0x58]
	add eax,ebp
	add eax,dword ptr [esp+0x90]
	push 0xA0
	add eax,dword ptr [esp+0x8C]
	mov ecx,edi
	push eax
	push 0xEC
	push 4
	call CUIToolTip::SetBasicInfo
	mov dword ptr [esp+0x8C],0
	lea ecx,[esp+0x44]
	push ecx
	lea edx,[esp+0x90]
	push edx
	push ebx
	mov ecx,edi
	mov byte ptr [esp+0xF8],0x2D
	call CUIToolTip::GetItemName
	push ebx
	mov ecx,edi
	call CUIToolTip::SetToolTip_Equip_Basic
	mov ecx,esi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0x38]
	push eax
	call CItemInfo::GetItemDesc
	mov ecx,esi
	mov byte ptr [esp+0xEC],0x2E
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x2B70
	jne Block222

 Block207:
	cmp ecx,0x10F7C0
	je Block222

 Block208:
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x3C]
	mov ebx,dword ptr [eax+4]
	test esi,esi
	je Block213

 Block209:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block212

 Block210:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block212

 Block211:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block212:
	mov dword ptr [esp+0x3C],0

 Block213:
	mov eax,dword ptr [ebx+0x60D]
	mov dword ptr [esp+0x40],eax
	test eax,eax
	je Block222

 Block214:
	mov ebp,dword ptr [esp+0xFC]
	mov bl,0x2F
	xor edi,edi

 Block215:
	lea ecx,[esp+0x40]
	push ecx
	call ZList<GW_CoupleRecord>::GetNext
	mov esi,eax
	mov edx,dword ptr [esi+0x11]
	add esp,4
	cmp edx,dword ptr [ebp+0x18]
	jne Block221

 Block216:
	mov eax,dword ptr [esi+0x15]
	cmp eax,dword ptr [ebp+0x1C]
	jne Block221

 Block217:
	mov dword ptr [esp+0x18],edi
	lea ecx,[esp+0x1C]
	push 0x2B1
	push ecx
	mov byte ptr [esp+0xF4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	add esi,4
	push esi
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0xF8],0x30
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0xEC],bl
	cmp eax,edi
	je Block219

 Block218:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block219:
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x38]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xEC],0x2E
	cmp eax,edi
	je Block221

 Block220:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block221:
	cmp dword ptr [esp+0x40],edi
	jne Block215

 Block222:
	mov ecx,dword ptr [esp+0xFC]
	add ecx,0xC
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x2B78
	jne Block238

 Block223:
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea edx,[eax+eax*4]
	add edx,edx
	sub ecx,edx
	cmp ecx,2
	jg Block238

 Block224:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x38]
	push eax
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x3C]
	mov ebx,dword ptr [eax+4]
	test esi,esi
	je Block229

 Block225:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block228

 Block226:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block228

 Block227:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block228:
	mov dword ptr [esp+0x3C],0

 Block229:
	mov eax,dword ptr [ebx+0x621]
	mov dword ptr [esp+0x40],eax
	test eax,eax
	je Block238

 Block230:
	mov ebp,dword ptr [esp+0xFC]
	mov bl,0x31
	xor edi,edi
	lea esp,[esp]

 Block231:
	lea ecx,[esp+0x40]
	push ecx
	call ZList<GW_FriendRecord>::GetNext
	mov esi,eax
	mov edx,dword ptr [esi+0x11]
	add esp,4
	cmp edx,dword ptr [ebp+0x18]
	jne Block237

 Block232:
	mov eax,dword ptr [esi+0x15]
	cmp eax,dword ptr [ebp+0x1C]
	jne Block237

 Block233:
	mov dword ptr [esp+0x18],edi
	lea ecx,[esp+0x1C]
	push 0x2B2
	push ecx
	mov byte ptr [esp+0xF4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	add esi,4
	push esi
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0xF8],0x32
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0xEC],bl
	cmp eax,edi
	je Block235

 Block234:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block235:
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x38]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xEC],0x2E
	cmp eax,edi
	je Block237

 Block236:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block237:
	cmp dword ptr [esp+0x40],edi
	jne Block231

 Block238:
	mov ecx,dword ptr [esp+0xFC]
	add ecx,0xC
	call TSecType<long>::GetData
	cmp eax,0x10FAE3
	je Block242

 Block239:
	cmp eax,0x10FAE6
	je Block242

 Block240:
	cmp eax,0x10FAE7
	je Block242

 Block241:
	cmp eax,0x10FAE9
	jne Block254

 Block242:
	mov ebx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea ecx,[esp+0x38]
	push ecx
	mov ecx,ebx
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [esp+0x3C]
	mov ebp,dword ptr [eax+4]
	test esi,esi
	je Block247

 Block243:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block246

 Block244:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block246

 Block245:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block246:
	mov dword ptr [esp+0x3C],0

 Block247:
	cmp dword ptr [ebp+0x645],0
	jbe Block254

 Block248:
	mov dword ptr [esp+0x18],0
	cmp dword ptr [ebx+0x2034],0
	mov ebp,dword ptr [ebp+0x649]
	mov byte ptr [esp+0xEC],0x33
	lea esi,[ebp+0x23]
	je Block250

 Block249:
	lea esi,[ebp+0x16]

 Block250:
	lea ecx,[esp+0x1C]
	push 0x108C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0xF8],0x34
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0xEC],0x33
	test eax,eax
	je Block252

 Block251:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block252:
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x38]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xEC],0x2E
	test eax,eax
	je Block254

 Block253:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block254:
	cmp dword ptr [TSingleton<CItemInfo>::ms_pInstance],0
	mov edi,dword ptr [esp+0xFC]
	je Block293

 Block255:
	lea ebp,[edi+0xC]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	test eax,eax
	je Block274

 Block256:
	mov ecx,dword ptr [edi+0xD7]
	push ecx
	lea edx,[edi+0xD5]
	push edx
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov bl,al
	mov eax,dword ptr [edi+0xDD]
	push eax
	lea ecx,[edi+0xDB]
	push ecx
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,0x10
	mov ecx,ebp
	mov byte ptr [esp+0x77],al
	call TSecType<long>::GetData
	movzx ecx,byte ptr [esp+0x77]
	movzx edx,bl
	push edx
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0x44]
	push edx
	call CItemInfo::GetLevelAbilityInfo
	mov eax,dword ptr [esp+0x3C]
	mov bl,0x35
	mov byte ptr [esp+0xEC],bl
	test eax,eax
	je Block258

 Block257:
	mov esi,dword ptr [eax]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	push eax
	lea eax,[esp+0x24]
	push eax
	call CItemInfo::GetItemString
	or dword ptr [esp+0x14],0x1000
	mov byte ptr [esp+0xEC],0x36
	jmp Block259

 Block258:
	push 0
	push offset _S_
	push 0
	push 0
	lea ecx,[esp+0x38]
	mov dword ptr [esp+0x38],0
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	or dword ptr [esp+0x14],0x2000
	lea eax,[esp+0x28]
	mov dword ptr [esp+0xEC],0x37

 Block259:
	push eax
	lea ecx,[esp+0x44]
	mov dword ptr [esp+0x44],0
	call ZXString<char>::op_assign
	mov esi,dword ptr [esp+0x14]
	mov dword ptr [esp+0xEC],0x39
	test esi,0x2000
	je Block262

 Block260:
	mov eax,dword ptr [esp+0x28]
	and esi,0xFFFFDFFF
	mov dword ptr [esp+0x14],esi
	test eax,eax
	je Block262

 Block261:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block262:
	mov byte ptr [esp+0xEC],0x3A
	test esi,0x1000
	je Block265

 Block263:
	mov eax,dword ptr [esp+0x1C]
	and esi,0xFFFFEFFF
	mov dword ptr [esp+0x14],esi
	test eax,eax
	je Block265

 Block264:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block265:
	mov esi,dword ptr [esp+0x40]
	test esi,esi
	je Block271

 Block266:
	cmp byte ptr [esi],0
	je Block271

 Block267:
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block270

 Block268:
	cmp byte ptr [eax],0
	je Block270

 Block269:
	push offset _S___22
	lea ecx,[esp+0x38]
	call ZXString<char>::op_add_assign_t_1

 Block270:
	mov ecx,dword ptr [esi-4]
	push ecx
	push esi
	lea ecx,[esp+0x3C]
	call ZXString<char>::_Cat

 Block271:
	mov byte ptr [esp+0xEC],bl
	test esi,esi
	je Block273

 Block272:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block273:
	lea ecx,[esp+0x38]
	mov byte ptr [esp+0xEC],0x2E
	call ZRef<CItemInfo::LevelInfo::Ability>::~ZRef<CItemInfo::LevelInfo::Ability>

 Block274:
	cmp dword ptr [TSingleton<CItemInfo>::ms_pInstance],0
	je Block293

 Block275:
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsEpicItem
	test eax,eax
	je Block293

 Block276:
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	test eax,eax
	je Block278

 Block277:
	mov esi,dword ptr [eax+0x21C]
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	push eax
	lea edx,[esp+0x24]
	push edx
	call CItemInfo::GetItemString
	or dword ptr [esp+0x14],0x4000
	mov byte ptr [esp+0xEC],0x3B
	jmp Block279

 Block278:
	push 0
	push offset _S_
	push 0
	push 0
	lea ecx,[esp+0x38]
	mov dword ptr [esp+0x38],0
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	lea ecx,[esp+0x2C]
	call ZXString<char>::ReleaseBuffer
	or dword ptr [esp+0x14],0x8000
	lea eax,[esp+0x28]
	mov dword ptr [esp+0xEC],0x3C

 Block279:
	push eax
	lea ecx,[esp+0x44]
	mov dword ptr [esp+0x44],0
	call ZXString<char>::op_assign
	mov esi,dword ptr [esp+0x14]
	mov dword ptr [esp+0xEC],0x3E
	test esi,0x8000
	je Block282

 Block280:
	mov eax,dword ptr [esp+0x28]
	and esi,0xFFFF7FFF
	mov dword ptr [esp+0x14],esi
	test eax,eax
	je Block282

 Block281:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block282:
	mov byte ptr [esp+0xEC],0x3F
	test esi,0x4000
	je Block285

 Block283:
	mov eax,dword ptr [esp+0x1C]
	and esi,0xFFFFBFFF
	mov dword ptr [esp+0x14],esi
	test eax,eax
	je Block285

 Block284:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block285:
	mov esi,dword ptr [esp+0x40]
	test esi,esi
	je Block291

 Block286:
	cmp byte ptr [esi],0
	je Block291

 Block287:
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block290

 Block288:
	cmp byte ptr [eax],0
	je Block290

 Block289:
	push offset _S___22
	lea ecx,[esp+0x38]
	call ZXString<char>::op_add_assign_t_1

 Block290:
	mov eax,dword ptr [esi-4]
	push eax
	push esi
	lea ecx,[esp+0x3C]
	call ZXString<char>::_Cat

 Block291:
	mov byte ptr [esp+0xEC],0x2E
	test esi,esi
	je Block293

 Block292:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block293:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	mov esi,eax
	push esi
	call CItemInfo::GetEquipItem
	mov ebx,eax
	test ebx,ebx
	je Block321

 Block294:
	mov ecx,dword ptr [ebx+0xAC]
	push ecx
	lea edx,[ebx+0xA8]
	push edx
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	test byte ptr [ebx+0x264],2
	movzx eax,al
	je Block305

 Block295:
	xor eax,eax
	mov dword ptr [esp+0x18],eax
	mov dword ptr [esp+0x28],eax
	lea eax,[esp+0x1C]
	push 0x2AD
	push eax
	mov byte ptr [esp+0xF4],0x41
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,eax
	mov ebp,dword ptr [esp+0xFC]
	mov ecx,dword ptr [ebp+0x4B]
	lea esi,[ebp+0x49]
	push ecx
	push esi
	mov byte ptr [esp+0xF4],0x42
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov edi,dword ptr [edi]
	movzx edx,al
	push edx
	lea eax,[esp+0x24]
	push edi
	push eax
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0x14
	mov byte ptr [esp+0xEC],0x41
	test eax,eax
	je Block297

 Block296:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block297:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x84]
	mov ecx,ebp
	call eax
	cmp eax,dword ptr [ebx+0x26C]
	jl Block299

 Block298:
	mov ecx,dword ptr [esi+2]
	push ecx
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	push edx
	push offset _S_DMAX
	lea eax,[esp+0x38]
	push eax
	jmp Block302

 Block299:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x84]
	mov ecx,ebp
	call eax
	test eax,eax
	jle Block301

 Block300:
	mov ecx,dword ptr [esi+2]
	push ecx
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov edx,dword ptr [ebp]
	mov bl,al
	mov eax,dword ptr [edx+0x84]
	add esp,8
	mov ecx,ebp
	call eax
	push eax
	movzx ecx,bl
	push ecx
	lea edx,[esp+0x30]
	push offset _S_DD__1
	push edx
	call ZXString<char>::Format
	add esp,0x10
	jmp Block303

 Block301:
	mov eax,dword ptr [esi+2]
	push eax
	push esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx ecx,al
	push ecx
	push offset _S_D__1
	lea edx,[esp+0x38]
	push edx

 Block302:
	call ZXString<char>::Format
	add esp,0x14

 Block303:
	push 0x3E9
	push 1
	push ecx
	mov ecx,esp
	lea eax,[esp+0x34]
	mov dword ptr [esp+0x44],esp
	push eax
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov byte ptr [esp+0x100],0x43
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x68]
	push 0x17
	push 0x15
	mov byte ptr [esp+0x104],0x41
	call CUIToolTip::AddInfoEx
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xEC],0x40
	test eax,eax
	je Block318

 Block304:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block318

 Block305:
	test eax,eax
	jle Block321

 Block306:
	mov eax,0x14F8B589
	imul esi
	sar edx,0xD
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x12
	je Block321

 Block307:
	mov ecx,dword ptr [esp+0xFC]
	add ecx,0xC
	call TSecType<long>::GetData
	cmp eax,0x111ED0
	je Block321

 Block308:
	mov eax,dword ptr [esp+0x34]
	mov edi,dword ptr [ebx+0x26C]
	xor esi,esi
	cmp eax,esi
	je Block311

 Block309:
	cmp byte ptr [eax],0
	je Block311

 Block310:
	push offset _S___4
	lea ecx,[esp+0x38]
	call ZXString<char>::op_add_assign_t_1

 Block311:
	mov ebp,dword ptr [esp+0xFC]
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+0x84]
	mov ecx,ebp
	call eax
	cmp eax,edi
	mov dword ptr [esp+0x18],esi
	jl Block315

 Block312:
	lea ecx,[esp+0x1C]
	push 0x13D3
	mov bl,0x44
	push ecx
	mov byte ptr [esp+0xF4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0xF4],0x45
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,8
	mov byte ptr [esp+0xEC],bl
	cmp eax,esi
	je Block314

 Block313:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block314:
	push 0x3E9
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	mov dword ptr [eax],esi
	push ecx
	mov ecx,esp
	lea eax,[esp+0x28]
	mov dword ptr [esp+0x2C],esp
	push eax
	mov byte ptr [esp+0x100],0x46
	mov dword ptr [ecx],esi
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x68]
	push 0x17
	push 0x15
	mov byte ptr [esp+0x104],bl
	call CUIToolTip::AddInfoEx
	mov eax,dword ptr [esp+0x18]
	cmp eax,esi
	jmp Block319

 Block315:
	lea ecx,[esp+0x1C]
	push 0x13D2
	mov bl,0x47
	push ecx
	mov byte ptr [esp+0xF4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [ebp]
	mov esi,dword ptr [eax]
	mov eax,dword ptr [edx+0x84]
	push edi
	mov ecx,ebp
	mov byte ptr [esp+0xF0],0x48
	call eax
	push eax
	lea ecx,[esp+0x20]
	push esi
	push ecx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0x10
	mov byte ptr [esp+0xEC],bl
	test eax,eax
	je Block317

 Block316:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block317:
	push 0x3E9
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	mov dword ptr [eax],0
	push ecx
	mov ecx,esp
	lea edx,[esp+0x28]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov byte ptr [esp+0x100],0x49
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x68]
	push 0x17
	push 0x15
	mov byte ptr [esp+0x104],bl
	call CUIToolTip::AddInfoEx

 Block318:
	mov eax,dword ptr [esp+0x18]
	test eax,eax

 Block319:
	mov byte ptr [esp+0xEC],0x2E
	je Block321

 Block320:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block321:
	mov esi,dword ptr [esp+0xFC]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x14]
	mov ecx,esi
	call edx
	test eax,eax
	jne Block335

 Block322:
	lea ecx,[esi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetAppliableKarmaType
	mov esi,eax
	test esi,esi
	je Block335

 Block323:
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block326

 Block324:
	cmp byte ptr [eax],0
	je Block326

 Block325:
	push 1
	push offset _S___22
	lea ecx,[esp+0x3C]
	call ZXString<char>::_Cat

 Block326:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x54]
	push eax
	call CItemInfo::GetKarmaScissorsName
	lea ecx,[esp+0x1C]
	push 0x124A
	mov bl,0x4A
	push ecx
	mov byte ptr [esp+0xF4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x40],0
	mov edx,dword ptr [esp+0x50]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x48]
	push eax
	mov byte ptr [esp+0xF8],0x4C
	call ZXString<char>::Format
	mov eax,dword ptr [eax]
	add esp,0xC
	test eax,eax
	je Block328

 Block327:
	mov ecx,dword ptr [eax-4]
	jmp Block329

 Block328:
	xor ecx,ecx

 Block329:
	push ecx
	push eax
	lea ecx,[esp+0x3C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0xEC],0x4B
	test eax,eax
	je Block331

 Block330:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block331:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],bl
	test eax,eax
	je Block333

 Block332:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block333:
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0xEC],0x2E
	test eax,eax
	je Block335

 Block334:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block335:
	mov edi,dword ptr [esp+0x114]
	lea ecx,[edi-0x3B]
	test ecx,ecx
	ja Block351

 Block336:
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block339

 Block337:
	cmp byte ptr [eax],0
	je Block339

 Block338:
	push 1
	push offset _S___22
	lea ecx,[esp+0x3C]
	call ZXString<char>::_Cat

 Block339:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x1C]
	push edx
	call CWvsContext::GetCharacterData
	mov esi,dword ptr [eax+4]
	lea ecx,[esp+0x1C]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	mov dword ptr [esp+0x18],0
	mov byte ptr [esp+0xEC],0x4D
	call Util::FTGetNow
	mov dword ptr [esp+0x38],eax
	lea eax,[esp+0x38]
	push eax
	lea esi,[esi+edi*8+0x341]
	push esi
	mov dword ptr [esp+0x44],edx
	call dword ptr [ZImports::_CompareFileTime]
	test eax,eax
	jge Block343

 Block340:
	lea ecx,[esp+0x30]
	push edi
	push ecx
	call get_bodyaprt_name
	add esp,8
	mov esi,eax
	lea edx,[esp+0x1C]
	push 0x1465
	mov bl,0x4E
	push edx
	mov byte ptr [esp+0xF4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x20]
	push edx
	mov byte ptr [esp+0xF8],0x4F
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0xEC],bl
	test eax,eax
	je Block342

 Block341:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block342:
	mov eax,dword ptr [esp+0x30]
	jmp Block344

 Block343:
	lea eax,[esp+0x64]
	push eax
	push esi
	call FileTimeToSystemTime
	lea ecx,[esp+0x1C]
	push 0x1464
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx edx,word ptr [esp+0x6E]
	movzx ecx,word ptr [esp+0x6C]
	mov eax,dword ptr [eax]
	push edx
	movzx edx,word ptr [esp+0x6E]
	push ecx
	movzx ecx,word ptr [esp+0x6E]
	push edx
	movzx edx,word ptr [esp+0x70]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x30]
	push eax
	mov byte ptr [esp+0x108],0x50
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0x1C

 Block344:
	mov byte ptr [esp+0xEC],0x4D
	test eax,eax
	je Block346

 Block345:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block346:
	mov esi,dword ptr [esp+0x18]
	test esi,esi
	je Block348

 Block347:
	mov eax,dword ptr [esi-4]
	jmp Block349

 Block348:
	xor eax,eax

 Block349:
	push eax
	push esi
	lea ecx,[esp+0x3C]
	call ZXString<char>::_Cat
	mov byte ptr [esp+0xEC],0x2E
	test esi,esi
	je Block351

 Block350:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block351:
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block354

 Block352:
	cmp byte ptr [eax],0
	je Block354

 Block353:
	mov ebp,dword ptr [esp+0x58]
	push 0
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x48],esp
	push 0xA
	push ecx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [esp+0x44]
	push edx
	push 0
	push 0xDD
	push 0xA
	mov ecx,ebp
	call CUIToolTip::DrawTextSepartedLine
	add dword ptr [ebp+8],eax
	mov dword ptr [esp+0xA8],eax
	jmp Block355

 Block354:
	mov ebp,dword ptr [esp+0x58]

 Block355:
	xor edi,edi
	mov dword ptr [esp+0x5C],edi
	mov ebx,dword ptr [esp+0xFC]
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x80]
	mov ecx,ebx
	mov byte ptr [esp+0xEC],0x51
	call edx
	test al,al
	jbe Block370

 Block356:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x78]
	mov ecx,ebx
	call edx
	test eax,eax
	je Block363

 Block357:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x80]
	mov ecx,ebx
	call edx
	movzx eax,al
	sub eax,1
	je Block362

 Block358:
	sub eax,1
	je Block361

 Block359:
	sub eax,1
	jne Block370

 Block360:
	lea eax,[esp+0x1C]
	push 0x16F5
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xEC],0x54
	jmp Block364

 Block361:
	lea ecx,[esp+0x30]
	push 0x16F2
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x60]
	mov byte ptr [esp+0xF0],0x53
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x30]
	jmp Block365

 Block362:
	lea edx,[esp+0x40]
	push 0x16F4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x60]
	mov byte ptr [esp+0xF0],0x52
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x40]
	jmp Block365

 Block363:
	lea eax,[esp+0x1C]
	push 0x16F7
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xEC],0x55

 Block364:
	push eax
	lea ecx,[esp+0x60]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]

 Block365:
	mov byte ptr [esp+0xEC],0x51
	cmp eax,edi
	je Block367

 Block366:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block367:
	mov eax,dword ptr [esp+0x5C]
	cmp eax,edi
	je Block370

 Block368:
	cmp byte ptr [eax],0
	je Block370

 Block369:
	xor eax,eax
	jmp Block371

 Block370:
	mov eax,1

 Block371:
	xor ecx,ecx
	cmp eax,edi
	sete cl
	mov eax,ecx
	mov dword ptr [esp+0x28],eax
	cmp eax,edi
	je Block378

 Block372:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov esi,eax
	cmp esi,edi
	je Block378

 Block373:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x78]
	mov ecx,ebx
	call eax
	test eax,eax
	je Block375

 Block374:
	mov ecx,dword ptr [esi+0x68]
	push ecx
	add esi,0x60
	push esi
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	dec ecx
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov esi,edx
	add esp,8
	shr esi,0x1F
	add esi,edx
	mov edx,dword ptr [ebx+0x115]
	push esi
	push edx
	lea eax,[ebx+0x111]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	add esp,8
	push ecx
	mov ecx,ebp
	call CUIToolTip::SetToolTip_ItemOption
	mov edx,dword ptr [ebx+0x11D]
	push esi
	push edx
	lea eax,[ebx+0x119]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	add esp,8
	push ecx
	mov ecx,ebp
	call CUIToolTip::SetToolTip_ItemOption
	mov edx,dword ptr [ebx+0x125]
	push esi
	push edx
	lea eax,[ebx+0x121]
	push eax
	call _ZtlSecureFuseHelper<short>::call
	movsx ecx,ax
	add esp,8
	push ecx
	mov ecx,ebp
	call CUIToolTip::SetToolTip_ItemOption
	add dword ptr [ebp+8],4
	jmp Block377

 Block375:
	push edi
	push edi
	push edi
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0xA
	push edx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	lea eax,[esp+0x2C]
	push 0x1A40
	push eax
	mov byte ptr [esp+0x104],0x56
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xFC],0x57
	push eax
	push edi
	push 0xDD
	push 0xA
	mov ecx,ebp
	mov byte ptr [esp+0x10C],0x58
	call CUIToolTip::DrawTextSepartedLine
	add eax,8
	add dword ptr [ebp+8],eax
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0x51
	cmp eax,edi
	je Block377

 Block376:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block377:
	add dword ptr [ebp+8],0x13

 Block378:
	mov dword ptr [esp+0x40],edi
	cmp dword ptr [esp+0x11C],edi
	je Block381

 Block379:
	mov ecx,dword ptr [ebx+0x18]
	or ecx,dword ptr [ebx+0x1C]
	jne Block381

 Block380:
	mov eax,0x1E
	add dword ptr [ebp+8],eax
	mov dword ptr [esp+0x40],eax

 Block381:
	mov dword ptr [esp+0x18],edi
	mov edx,dword ptr [esp+0x110]
	push edx
	lea eax,[esp+0x1C]
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0xF4],0x59
	call CUIToolTip::MakingLimitInfo
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	cmp eax,edi
	je Block383

 Block382:
	mov esi,dword ptr [esp+0x3C]
	add eax,0x258
	jmp Block384

 Block383:
	xor esi,esi
	or dword ptr [esp+0x14],0x10000
	mov dword ptr [esp+0x3C],esi
	lea eax,[esp+0x38]

 Block384:
	mov edi,dword ptr [eax+4]
	mov dword ptr [esp+0xE0],edi
	test edi,edi
	je Block386

 Block385:
	lea ecx,[edi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block386:
	test dword ptr [esp+0x14],0x10000
	mov byte ptr [esp+0xEC],0x5A
	je Block392

 Block387:
	test esi,esi
	je Block392

 Block388:
	add esi,0xFFFFFFF0
	lea ebx,[esi+4]
	push ebx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block391

 Block389:
	push ebx
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block391

 Block390:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block391:
	mov ebx,dword ptr [esp+0xFC]

 Block392:
	xor eax,eax
	mov dword ptr [esp+0x1C],eax
	mov dword ptr [esp+0x14],eax
	mov byte ptr [esp+0xEC],0x5C
	cmp dword ptr [TSingleton<CUserPreview>::ms_pInstance],eax
	je Block402

 Block393:
	lea esi,[ebx+0xC]
	mov ecx,esi
	call TSecType<long>::GetData
	cmp eax,0x1BCD30
	je Block395

 Block394:
	mov ecx,esi
	call TSecType<long>::GetData
	cmp eax,0x1BF440
	jne Block402

 Block395:
	mov ecx,dword ptr [TSingleton<CUserPreview>::ms_pInstance]
	mov edx,dword ptr [ecx+0x2E44]
	mov esi,dword ptr [edx+4]
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	cmp eax,0x1BCD30
	jne Block398

 Block396:
	test esi,esi
	je Block398

 Block397:
	mov eax,dword ptr [esi+0x88]
	cmp dword ptr [eax+0x10],0
	jne Block401

 Block398:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	cmp eax,0x1BF440
	jne Block401

 Block399:
	test esi,esi
	je Block401

 Block400:
	mov ecx,dword ptr [esi+0x88]

 Block401:
	add dword ptr [ebp+8],0x14

 Block402:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	xor edx,edx
	test edi,edi
	setne dl
	push edx
	push eax
	call CItemInfo::IsEpicItem
	mov ecx,dword ptr [esp+0xF8]
	neg eax
	sbb eax,eax
	and eax,0xD431C6A6
	add eax,0xCC0E395A
	push eax
	mov eax,dword ptr [esp+0x100]
	push 0
	push 0
	push 1
	push eax
	push ecx
	lea edx,[esp+0x7C]
	push edx
	mov ecx,ebp
	call CUIToolTip::MakeLayer
	mov byte ptr [esp+0xEC],0x5D
	test edi,edi
	je Block410

 Block403:
	mov eax,3
	mov word ptr [esp+0x78],ax
	mov dword ptr [esp+0x80],0
	push 1
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push 9
	mov bl,0x5E
	push ecx
	mov byte ptr [esp+0x100],bl
	call get_basic_font
	add esp,4
	mov edx,esp
	mov dword ptr [esp+0x60],esp
	push 0xA
	push edx
	mov ecx,ebp
	mov byte ptr [esp+0x104],0x5F
	call CUIToolTip::GetFontByType
	lea eax,[esp+0x40]
	push eax
	mov ecx,edi
	mov byte ptr [esp+0x100],0x60
	call CItemInfo::EQUIPITEM::ADDITION::GetDesc
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [ebp+0x14]
	push eax
	push 4
	push 0xA
	push 0xDD
	mov byte ptr [esp+0x10C],0x61
	push 0xA
	test ecx,ecx
	jne Block405

 Block404:
	push 0x80004003
	call _com_issue_error

 Block405:
	push ecx
	mov edx,esp
	mov dword ptr [esp+0xC8],esp
	lea eax,[esp+0xA0]
	push eax
	push edx
	call IWzGr2DLayer::Getcanvas
	mov byte ptr [esp+0x114],0x62
	call DrawTextSepartedLine
	mov eax,dword ptr [esp+0x58]
	add esp,0x28
	mov byte ptr [esp+0xEC],bl
	test eax,eax
	je Block407

 Block406:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block407:
	cmp word ptr [esp+0x78],8
	mov byte ptr [esp+0xEC],0x5D
	jne Block414

 Block408:
	mov eax,dword ptr [esp+0x80]
	xor ecx,ecx
	mov word ptr [esp+0x78],cx
	test eax,eax
	je Block410

 Block409:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block410:
	mov edi,dword ptr [ZImports::_VariantClear]

 Block411:
	mov ebx,dword ptr [esp+0xFC]
	mov eax,dword ptr [ebx+0x10D]
	push eax
	lea ecx,[ebx+0x10B]
	push ecx
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	test al,al
	jbe Block459

 Block412:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x64]
	push edx
	call esi
	lea eax,[esp+0x64]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	xor ebp,ebp
	add esp,8
	cmp eax,ebp
	jge Block415

 Block413:
	push eax
	call _com_issue_error

 Block414:
	mov edi,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0x78]
	push edx
	call edi
	jmp Block411

 Block415:
	lea ecx,[esp+0xAC]
	push ecx
	mov byte ptr [esp+0xF0],0x63
	call esi
	lea edx,[esp+0xAC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block417

 Block416:
	push eax
	call _com_issue_error

 Block417:
	push ebp
	push ebp
	lea eax,[esp+0x6C]
	push eax
	lea ecx,[esp+0xB8]
	push ecx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x4C],esp
	push 0x806
	mov bl,0x64
	push edx
	mov byte ptr [esp+0x108],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0x100],0x65
	cmp dword ptr [_D_G_RM],ebp
	jne Block419

 Block418:
	push 0x80004003
	call _com_issue_error

 Block419:
	lea eax,[esp+0xE0]
	mov byte ptr [esp+0x100],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0xF4],0x66
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x54]
	mov dword ptr [esp+0x54],ebp
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,ebp
	jge Block422

 Block420:
	cmp eax,0x80004002
	je Block422

 Block421:
	push eax
	call _com_issue_error

 Block422:
	mov esi,8
	mov byte ptr [esp+0xEC],0x68
	cmp word ptr [esp+0xCC],si
	jne Block425

 Block423:
	mov eax,dword ptr [esp+0xD4]
	xor ecx,ecx
	mov word ptr [esp+0xCC],cx
	cmp eax,ebp
	je Block426

 Block424:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block426

 Block425:
	lea edx,[esp+0xCC]
	push edx
	call edi

 Block426:
	mov byte ptr [esp+0xEC],0x69
	cmp word ptr [esp+0xAC],si
	jne Block429

 Block427:
	xor eax,eax
	mov word ptr [esp+0xAC],ax
	mov eax,dword ptr [esp+0xB4]
	cmp eax,ebp
	je Block430

 Block428:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block430

 Block429:
	lea ecx,[esp+0xAC]
	push ecx
	call edi

 Block430:
	mov byte ptr [esp+0xEC],0x6A
	cmp word ptr [esp+0x64],si
	jne Block433

 Block431:
	mov eax,dword ptr [esp+0x6C]
	xor edx,edx
	mov word ptr [esp+0x64],dx
	cmp eax,ebp
	je Block434

 Block432:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block434

 Block433:
	lea eax,[esp+0x64]
	push eax
	call edi

 Block434:
	push ebp
	push ebp
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push 0x807
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ebx,dword ptr [esp+0x5C]
	mov byte ptr [esp+0xF8],0x6B
	cmp ebx,ebp
	jne Block436

 Block435:
	push 0x80004003
	call _com_issue_error

 Block436:
	lea edx,[esp+0xC8]
	push edx
	mov ecx,ebx
	mov byte ptr [esp+0xFC],0x6A
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0xF4],0x6C
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0xA8]
	mov dword ptr [esp+0xA8],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block439

 Block437:
	cmp eax,0x80004002
	je Block439

 Block438:
	push eax
	call _com_issue_error

 Block439:
	mov byte ptr [esp+0xEC],0x6E
	cmp word ptr [esp+0xBC],si
	jne Block442

 Block440:
	xor eax,eax
	mov word ptr [esp+0xBC],ax
	mov eax,dword ptr [esp+0xC4]
	cmp eax,ebp
	je Block443

 Block441:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block443

 Block442:
	lea ecx,[esp+0xBC]
	push ecx
	call edi

 Block443:
	mov esi,dword ptr [esp+0xFC]
	mov edx,dword ptr [esi+0x10D]
	push edx
	lea eax,[esi+0x10B]
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov ecx,dword ptr [esi+0x10D]
	movzx ebp,al
	imul ebp,0xD
	push ecx
	add esi,0x10B
	push esi
	mov dword ptr [esp+0x48],ebp
	mov dword ptr [esp+0x40],0
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov edi,dword ptr [esp+0xB4]
	add esp,0x10
	test al,al
	jbe Block456

 Block444:
	mov dword ptr [esp+0xA0],0
	jmp Block447

 Block446:
	mov ebp,dword ptr [esp+0x38]

 Block447:
	mov edx,3
	mov edi,0xFF
	mov word ptr [esp+0x78],dx
	mov dword ptr [esp+0x80],edi
	mov esi,dword ptr [esp+0x60]
	mov byte ptr [esp+0xEC],0x6F
	test esi,esi
	je Block189

 Block448:
	mov ebx,dword ptr [esp+0x78]
	mov eax,dword ptr [esp+0x58]
	mov eax,dword ptr [eax+0xC]
	sub esp,0x10
	mov ecx,esp
	mov dword ptr [ecx],ebx
	mov ebx,dword ptr [esp+0x8C]
	sub eax,ebp
	cdq
	mov dword ptr [ecx+4],ebx
	mov dword ptr [ecx+8],edi
	mov edi,dword ptr [esp+0x94]
	sub eax,edx
	mov edx,dword ptr [esi]
	mov dword ptr [ecx+0xC],edi
	mov edi,dword ptr [esp+0xB4]
	sar eax,1
	add eax,dword ptr [esp+0xB0]
	push edi
	push 0xA
	push eax
	mov eax,dword ptr [edx+0x80]
	push esi
	call eax
	test eax,eax
	jge Block450

 Block449:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block450:
	cmp word ptr [esp+0x78],8
	mov byte ptr [esp+0xEC],0x6E
	jne Block453

 Block451:
	mov eax,dword ptr [esp+0x80]
	xor ecx,ecx
	mov word ptr [esp+0x78],cx
	test eax,eax
	je Block454

 Block452:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block454

 Block453:
	lea edx,[esp+0x78]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block454:
	mov eax,dword ptr [esp+0xFC]
	mov ecx,dword ptr [eax+0x10D]
	mov esi,dword ptr [esp+0x30]
	add dword ptr [esp+0xA0],0xD
	push ecx
	add eax,0x10B
	inc esi
	push eax
	mov dword ptr [esp+0x38],esi
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	add esp,8
	cmp esi,edx
	jl Block446

 Block455:
	mov ebx,dword ptr [esp+0x50]

 Block456:
	mov byte ptr [esp+0xEC],0x6A
	test edi,edi
	je Block458

 Block457:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block458:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	push ebx
	mov byte ptr [esp+0xF0],0x5D
	call eax
	mov ebp,dword ptr [esp+0x58]
	mov ebx,dword ptr [esp+0xFC]

 Block459:
	cmp dword ptr [TSingleton<CUserPreview>::ms_pInstance],0
	je Block478

 Block460:
	lea edi,[ebx+0xC]
	mov ecx,edi
	call TSecType<long>::GetData
	cmp eax,0x1BCD30
	je Block462

 Block461:
	mov ecx,edi
	call TSecType<long>::GetData
	cmp eax,0x1BF440
	jne Block478

 Block462:
	mov ecx,dword ptr [TSingleton<CUserPreview>::ms_pInstance]
	mov edx,dword ptr [ecx+0x2E44]
	mov esi,dword ptr [edx+4]
	mov ecx,edi
	call TSecType<long>::GetData
	cmp eax,0x1BCD30
	jne Block469

 Block463:
	test esi,esi
	je Block469

 Block464:
	mov eax,dword ptr [esi+0x88]
	cmp dword ptr [eax+0x10],0
	je Block469

 Block465:
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0x34]
	push eax
	call CItemInfo::GetItemName
	mov ecx,dword ptr [esi+0x88]
	mov edx,dword ptr [ecx+0x10]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x40]
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0xF8],0x70
	call CUIToolTip::MakePreviewPetNameTag
	push eax
	lea ecx,[esp+0x20]
	call _x_com_ptr<IWzCanvas>::op_assign_copy
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block467

 Block466:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block467:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xEC],0x5D
	test eax,eax
	je Block477

 Block468:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block477

 Block469:
	mov ecx,edi
	call TSecType<long>::GetData
	cmp eax,0x1BF440
	jne Block473

 Block470:
	test esi,esi
	je Block473

 Block471:
	mov eax,dword ptr [esi+0x88]
	cmp dword ptr [eax+0x14],0
	je Block473

 Block472:
	lea ecx,[esp+0x38]
	push 0xFC9
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xEC],0x71
	jmp Block474

 Block473:
	lea ecx,[esp+0x38]
	push 0xFC8
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0xEC],0x72

 Block474:
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0xEC],0x5D
	test eax,eax
	je Block476

 Block475:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block476:
	push 1
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0xE
	push edx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esp+0x24]
	push eax
	push 0
	push 0xDD
	push 0xA
	mov ecx,ebp
	call CUIToolTip::DrawTextSepartedLine

 Block477:
	mov ebx,dword ptr [esp+0xFC]

 Block478:
	mov esi,dword ptr [esp+0x2C]
	test esi,esi
	je Block484

 Block479:
	cmp byte ptr [esi],0
	je Block484

 Block480:
	mov ecx,dword ptr [ebx+0x10D]
	push ecx
	lea edx,[ebx+0x10B]
	push edx
	call _ZtlSecureFuseHelper<unsigned char>::call
	add esp,8
	push 1
	mov ecx,ebp
	push esi
	test al,al
	jbe Block482

 Block481:
	push 0x1C
	jmp Block483

 Block482:
	push 0xA

 Block483:
	call CUIToolTip::DrawItemTitle

 Block484:
	push ecx
	mov ecx,dword ptr [esp+0x48]
	mov eax,esp
	mov dword ptr [esp+0x3C],esp
	push ecx
	push eax
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [esp+0x90]
	mov edi,dword ptr [esp+0x94]
	push edx
	lea eax,[edi+0xA]
	push eax
	mov ecx,ebp
	call CUIToolTip::DrawTextItemName
	cmp dword ptr [esp+0x28],0
	je Block489

 Block485:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+0x78]
	mov ecx,ebx
	call eax
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x48],esp
	test eax,eax
	je Block487

 Block486:
	push 0xA
	jmp Block488

 Block487:
	push 0x13

 Block488:
	push ecx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [esp+0x60]
	push edx
	lea eax,[edi+0x1D]
	push eax
	mov ecx,ebp
	call CUIToolTip::DrawTextCenter

 Block489:
	mov esi,dword ptr [esp+0x24]
	test esi,esi
	je Block504

 Block490:
	cmp byte ptr [esi],0
	je Block504

 Block491:
	lea ecx,[esp+0x64]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x64]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block493

 Block492:
	push eax
	call _com_issue_error

 Block493:
	lea eax,[esp+0x64]
	push eax
	push ecx
	mov dword ptr [esp+0x40],esp
	mov ecx,esp
	mov bl,0x74
	push esi
	mov byte ptr [esp+0xF8],bl
	call _xbstr_t::_ctor_0
	push 0xE
	lea ecx,[esp+0x50]
	push ecx
	mov ecx,ebp
	mov byte ptr [esp+0xFC],0x75
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0xF4],0x76
	test ecx,ecx
	jne Block495

 Block494:
	push 0x80004003
	call _com_issue_error

 Block495:
	mov byte ptr [esp+0xF4],0x77
	call IWzFont::CalcTextWidth
	mov dword ptr [esp+0x38],eax
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0xEC],bl
	test eax,eax
	je Block497

 Block496:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block497:
	cmp word ptr [esp+0x64],8
	mov byte ptr [esp+0xEC],0x5D
	jne Block500

 Block498:
	mov eax,dword ptr [esp+0x6C]
	xor ecx,ecx
	mov word ptr [esp+0x64],cx
	test eax,eax
	je Block501

 Block499:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block501

 Block500:
	lea edx,[esp+0x64]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block501:
	cmp dword ptr [esp+0x38],0xEC
	jle Block503

 Block502:
	push 0
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x54],esp
	push 0xE
	push eax
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	push esi
	lea ecx,[edi+0x1F]
	push ecx
	push 0xCE
	push 0x19
	mov ecx,ebp
	call CUIToolTip::DrawTextSepartedLine
	jmp Block504

 Block503:
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0xE
	push edx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esp+0x2C]
	imul eax,0x13
	lea ecx,[eax+edi+0x1F]
	push esi
	push ecx
	mov ecx,ebp
	call CUIToolTip::DrawTextCenter

 Block504:
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block507

 Block505:
	cmp byte ptr [eax],0
	je Block507

 Block506:
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0xE
	push edx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x2C]
	mov eax,dword ptr [esp+0x50]
	imul ecx,0x13
	lea edx,[ecx+edi+0x32]
	push eax
	push edx
	mov ecx,ebp
	call CUIToolTip::DrawTextCenter

 Block507:
	xor esi,esi
	mov dword ptr [esp+0x50],esi

 Block508:
	mov eax,dword ptr [esp+0x54]
	mov ebx,dword ptr [esp+0x88]
	mov dword ptr [esp+0x30],esi
	test eax,eax
	je Block531

 Block509:
	cmp esi,dword ptr [eax-4]
	jae Block532

 Block510:
	mov eax,3
	mov edx,0xFF
	mov word ptr [esp+0x78],ax
	mov dword ptr [esp+0x80],edx
	mov ecx,dword ptr [esp+0x60]
	mov esi,dword ptr [ebp+0xA04]
	mov byte ptr [esp+0xEC],0x78
	test ecx,ecx
	je Block189

 Block511:
	mov eax,dword ptr [esp+0x28]
	mov ebp,dword ptr [esp+0x78]
	imul eax,0x13
	add eax,edi
	mov edi,dword ptr [esp+0x50]
	add eax,ebx
	mov ebx,dword ptr [ecx]
	sub esp,0x10
	add edi,eax
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x8C]
	mov dword ptr [eax+4],ebp
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x94]
	push esi
	mov dword ptr [eax+0xC],edx
	lea eax,[edi+0x21]
	push eax
	push 0xA
	mov dword ptr [esp+0x60],ecx
	push ecx
	mov ecx,dword ptr [ebx+0x80]
	call ecx
	test eax,eax
	jge Block513

 Block512:
	mov edx,dword ptr [esp+0x44]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edx
	push eax
	call _com_issue_errorex

 Block513:
	cmp word ptr [esp+0x78],8
	mov byte ptr [esp+0xEC],0x5D
	jne Block516

 Block514:
	xor eax,eax
	mov word ptr [esp+0x78],ax
	mov eax,dword ptr [esp+0x80]
	test eax,eax
	je Block517

 Block515:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block517

 Block516:
	lea ecx,[esp+0x78]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block517:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0xAC]
	push edx
	call esi
	lea eax,[esp+0xAC]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block187

 Block518:
	lea ecx,[esp+0x64]
	push ecx
	mov byte ptr [esp+0xF0],0x79
	call esi
	lea edx,[esp+0x64]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block187

 Block519:
	mov ebp,dword ptr [esp+0x58]
	lea eax,[esp+0xAC]
	push eax
	lea ecx,[esp+0x68]
	push ecx
	push 0x16
	lea edx,[esp+0x44]
	push edx
	mov ecx,ebp
	mov byte ptr [esp+0xFC],0x7A
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov esi,dword ptr [esp+0x38]
	push eax
	mov eax,dword ptr [esp+0x60]
	mov eax,dword ptr [eax+esi*4]
	push ecx
	mov dword ptr [esp+0x54],esp
	mov ecx,esp
	mov bl,0x7B
	push eax
	mov byte ptr [esp+0x100],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x70]
	mov byte ptr [esp+0xFC],0x7C
	test ecx,ecx
	je Block189

 Block520:
	add edi,0x1D
	push edi
	push 0x10
	mov byte ptr [esp+0x104],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0xEC],0x7A
	test eax,eax
	je Block522

 Block521:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block522:
	mov edi,8
	mov byte ptr [esp+0xEC],0x79
	cmp word ptr [esp+0x64],di
	jne Block525

 Block523:
	xor eax,eax
	mov word ptr [esp+0x64],ax
	mov eax,dword ptr [esp+0x6C]
	test eax,eax
	je Block526

 Block524:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block526

 Block525:
	lea ecx,[esp+0x64]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block526:
	mov byte ptr [esp+0xEC],0x5D
	cmp word ptr [esp+0xAC],di
	jne Block529

 Block527:
	mov eax,dword ptr [esp+0xB4]
	xor edx,edx
	mov word ptr [esp+0xAC],dx
	test eax,eax
	je Block530

 Block528:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	mov edi,dword ptr [esp+0x90]
	inc esi
	add dword ptr [esp+0x50],0x10
	jmp Block508

 Block529:
	lea eax,[esp+0xAC]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block530:
	mov edi,dword ptr [esp+0x90]
	inc esi
	add dword ptr [esp+0x50],0x10
	jmp Block508

 Block531:
	xor eax,eax
	jmp Block533

 Block532:
	mov ecx,dword ptr [esp+0x54]
	mov eax,dword ptr [ecx-4]

 Block533:
	mov esi,dword ptr [esp+0x28]
	mov edx,dword ptr [esp+0xFC]
	imul esi,0x13
	shl eax,4
	add eax,esi
	add eax,edi
	push edx
	add eax,ebx
	push eax
	mov ecx,ebp
	call CUIToolTip::DrawToolTip_Equip
	cmp dword ptr [esp+0x54],0
	jne Block535

 Block534:
	xor eax,eax
	jmp Block536

 Block535:
	mov eax,dword ptr [esp+0x54]
	mov eax,dword ptr [eax-4]

 Block536:
	shl eax,4
	add eax,esi
	add eax,edi
	add eax,ebx
	push eax
	mov ecx,ebp
	call CUIToolTip::DrawInfo
	cmp dword ptr [esp+0x28],0
	je Block578

 Block537:
	mov ecx,dword ptr [esp+0x54]
	test ecx,ecx
	je Block539

 Block538:
	mov ecx,dword ptr [ecx-4]

 Block539:
	shl ecx,4
	add ecx,esi
	add ecx,edi
	add ecx,ebx
	add ecx,eax
	cmp dword ptr [ebp+0x4A8],0
	mov edi,ecx
	je Block541

 Block540:
	push edi
	mov ecx,ebp
	call CUIToolTip::DrawOptionInfo
	jmp Block555

 Block541:
	mov ebx,dword ptr [ebp+0x4A4]
	mov ecx,3
	add ebx,9
	mov word ptr [esp+0x64],cx
	mov dword ptr [esp+0x6C],0
	mov ecx,dword ptr [ebp+0x10]
	mov byte ptr [esp+0xEC],0x7D
	test ecx,ecx
	jne Block543

 Block542:
	push 0x80004003
	call _com_issue_error

 Block543:
	lea edx,[esp+0x64]
	push edx
	lea eax,[esp+0x48]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0xEC],0x7E
	test esi,esi
	jne Block545

 Block544:
	push 0x80004003
	call _com_issue_error

 Block545:
	mov eax,dword ptr [ebp+0xC]
	mov ecx,dword ptr [ebp+0x4A4]
	mov edx,dword ptr [esi]
	push 0xFFFFFFFF
	push 1
	sub eax,0xC
	push eax
	mov eax,dword ptr [edx+0x8C]
	add ecx,edi
	push ecx
	push 6
	push esi
	call eax
	test eax,eax
	jge Block547

 Block546:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block547:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0xEC],0x7D
	test eax,eax
	je Block549

 Block548:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block549:
	cmp word ptr [esp+0x64],8
	mov byte ptr [esp+0xEC],0x5D
	jne Block552

 Block550:
	xor eax,eax
	mov word ptr [esp+0x64],ax
	mov eax,dword ptr [esp+0x6C]
	test eax,eax
	je Block553

 Block551:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block553

 Block552:
	lea ecx,[esp+0x64]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block553:
	push 0
	push 0
	push 1
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0xA
	push edx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	lea eax,[esp+0x54]
	push 0x1A40
	push eax
	mov byte ptr [esp+0x104],0x7F
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0xFC],0x80
	push eax
	add ebx,edi
	push ebx
	push 0xDD
	push 0xA
	mov ecx,ebp
	mov byte ptr [esp+0x10C],0x81
	call CUIToolTip::DrawTextSepartedLine
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0xEC],0x5D
	test eax,eax
	je Block555

 Block554:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block555:
	mov edi,dword ptr [esp+0xFC]
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x78]
	mov ecx,edi
	mov esi,0xFFFF0066
	call eax
	test eax,eax
	je Block562

 Block556:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+0x80]
	mov ecx,edi
	call eax
	movzx eax,al
	sub eax,1
	je Block561

 Block557:
	sub eax,1
	je Block560

 Block558:
	sub eax,1
	jne Block562

 Block559:
	mov esi,0xFFFFCC00
	jmp Block562

 Block560:
	mov esi,0xFFC261FF
	jmp Block562

 Block561:
	mov esi,0xFF5CA1FF

 Block562:
	mov ecx,dword ptr [esp+0x60]
	test ecx,ecx
	jne Block564

 Block563:
	push 0x80004003
	call _com_issue_error

 Block564:
	mov eax,dword ptr [ebp+0xC]
	mov edx,dword ptr [ecx]
	push esi
	push 1
	sub eax,8
	push eax
	mov eax,dword ptr [edx+0x8C]
	push 4
	push 4
	push ecx
	mov edi,ecx
	call eax
	test eax,eax
	jge Block566

 Block565:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block566:
	mov edx,dword ptr [esp+0x60]
	test edx,edx
	jne Block568

 Block567:
	push 0x80004003
	call _com_issue_error

 Block568:
	mov eax,dword ptr [ebp+0xC]
	mov ecx,dword ptr [ebp+8]
	mov ebx,dword ptr [edx]
	push esi
	push 1
	sub eax,8
	push eax
	sub ecx,4
	push ecx
	mov ecx,dword ptr [ebx+0x8C]
	push 4
	push edx
	mov edi,edx
	call ecx
	test eax,eax
	jge Block570

 Block569:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block570:
	mov ecx,dword ptr [esp+0x60]
	test ecx,ecx
	jne Block572

 Block571:
	push 0x80004003
	call _com_issue_error

 Block572:
	mov eax,dword ptr [ebp+8]
	mov edx,dword ptr [ecx]
	push esi
	sub eax,8
	push eax
	mov eax,dword ptr [edx+0x8C]
	push 1
	push 4
	push 4
	push ecx
	mov edi,ecx
	call eax
	test eax,eax
	jge Block574

 Block573:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block574:
	mov edx,dword ptr [esp+0x60]
	test edx,edx
	jne Block576

 Block575:
	push 0x80004003
	call _com_issue_error

 Block576:
	mov eax,dword ptr [ebp+8]
	mov ecx,dword ptr [ebp+0xC]
	mov ebx,dword ptr [edx]
	push esi
	sub eax,8
	push eax
	push 1
	sub ecx,4
	push 4
	push ecx
	mov ecx,dword ptr [ebx+0x8C]
	push edx
	mov edi,edx
	call ecx
	test eax,eax
	jge Block578

 Block577:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block578:
	mov eax,dword ptr [esp+0x34]
	mov edi,dword ptr [esp+0x18]
	test eax,eax
	je Block584

 Block579:
	cmp byte ptr [eax],0
	je Block584

 Block580:
	push 0
	push 0
	push 1
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0xA
	push edx
	mov ecx,ebp
	call CUIToolTip::GetFontByType
	test edi,edi
	jne Block582

 Block581:
	xor eax,eax
	jmp Block583

 Block582:
	mov eax,dword ptr [edi-4]

 Block583:
	mov edx,dword ptr [ebp+8]
	mov esi,dword ptr [esp+0x50]
	mov ecx,dword ptr [esp+0x44]
	mov ebx,dword ptr [esp+0xB8]
	shl eax,4
	sub edx,eax
	sub edx,esi
	push ecx
	sub edx,ebx
	sub edx,5
	push edx
	push 0xDD
	push 0xA
	mov ecx,ebp
	call CUIToolTip::DrawTextSepartedLine
	jmp Block585

 Block584:
	mov esi,dword ptr [esp+0x40]
	mov ebx,dword ptr [esp+0xA8]

 Block585:
	mov ecx,dword ptr [esp+0x108]
	test ecx,ecx
	je Block591

 Block586:
	mov edx,dword ptr [esp+0x10C]
	cmp ecx,edx
	je Block591

 Block587:
	test edi,edi
	jne Block589

 Block588:
	xor eax,eax
	jmp Block590

 Block589:
	mov eax,dword ptr [edi-4]

 Block590:
	push edx
	push ecx
	mov ecx,dword ptr [ebp+8]
	shl eax,4
	sub ecx,eax
	sub ecx,esi
	sub ecx,ebx
	sub ecx,0x27
	push ecx
	mov ecx,ebp
	call CUIToolTip::DrawDiscount_Info

 Block591:
	cmp dword ptr [esp+0x110],0
	je Block596

 Block592:
	test edi,edi
	jne Block594

 Block593:
	xor eax,eax
	jmp Block595

 Block594:
	mov eax,dword ptr [edi-4]

 Block595:
	mov ecx,dword ptr [ebp+8]
	shl eax,4
	sub ecx,eax
	lea edx,[esp+0x18]
	sub ecx,esi
	push edx
	push ecx
	mov ecx,ebp
	call CUIToolTip::DrawLimitInfo

 Block596:
	mov eax,dword ptr [esp+0x11C]
	mov edi,dword ptr [esp+0xFC]
	test eax,eax
	je Block599

 Block597:
	mov edx,dword ptr [edi+0x18]
	or edx,dword ptr [edi+0x1C]
	jne Block599

 Block598:
	push eax
	mov eax,dword ptr [ebp+8]
	sub eax,esi
	push eax
	mov ecx,ebp
	call CUIToolTip::DrawNpcShopLimitedItemInfo

 Block599:
	mov esi,dword ptr [esp+0x124]
	test esi,esi
	je Block603

 Block600:
	mov ecx,dword ptr [esp+0x138]
	mov edx,dword ptr [esp+0x134]
	push ecx
	sub esp,8
	mov eax,esp
	mov dword ptr [eax+4],edx
	mov eax,dword ptr [esp+0x140]
	mov dword ptr [esp+0x44],esp
	test eax,eax
	je Block602

 Block601:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block602:
	mov eax,dword ptr [esp+0x138]
	mov edx,dword ptr [ebp+8]
	mov ecx,dword ptr [esp+0x134]
	sub edx,dword ptr [esp+0xA4]
	push eax
	push ecx
	push esi
	sub edx,ebx
	push edx
	mov ecx,ebp
	call CUIToolTip::DrawITCSaleInfo

 Block603:
	cmp dword ptr [esp+0x13C],0
	je Block605

 Block604:
	push ecx
	mov ecx,dword ptr [esp+0xF8]
	mov eax,esp
	mov dword ptr [esp+0x3C],esp
	mov dword ptr [eax],0
	mov eax,dword ptr [esp+0xFC]
	push edi
	push eax
	push ecx
	mov ecx,ebp
	call CUIToolTip::AddToolTip_SetItem

 Block605:
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0xEC],0x5C
	test eax,eax
	je Block607

 Block606:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block607:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xEC],0x5B
	test eax,eax
	je Block609

 Block608:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block609:
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xEC],0x5A
	test eax,eax
	je Block611

 Block610:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block611:
	mov esi,dword ptr [esp+0xE0]
	mov byte ptr [esp+0xEC],0x59
	test esi,esi
	je Block615

 Block612:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block615

 Block613:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block615

 Block614:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block615:
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xEC],0x51
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x5C]
	mov byte ptr [esp+0xEC],0x2E
	test eax,eax
	je Block617

 Block616:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block617:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xEC],0x2D
	test eax,eax
	je Block619

 Block618:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block619:
	mov eax,dword ptr [esp+0x8C]
	mov byte ptr [esp+0xEC],0x29
	test eax,eax
	je Block621

 Block620:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block621:
	mov eax,dword ptr [esp+0x94]
	mov byte ptr [esp+0xEC],0x28
	test eax,eax
	je Block623

 Block622:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block623:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xEC],0x22
	test eax,eax
	je Block625

 Block624:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block625:
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0xEC],0x21
	test eax,eax
	je Block627

 Block626:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block627:
	mov eax,dword ptr [esp+0x9C]
	mov byte ptr [esp+0xEC],0x20
	test eax,eax
	je Block629

 Block628:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block629:
	lea ecx,[esp+0x54]
	mov byte ptr [esp+0xEC],2
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x4C]
	mov byte ptr [esp+0xEC],1
	test eax,eax
	je Block631

 Block630:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block631:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xEC],0
	test eax,eax
	je Block633

 Block632:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block633:
	mov eax,dword ptr [esp+0x134]
	mov dword ptr [esp+0xEC],0xFFFFFFFF
	test eax,eax
	je Block637

 Block634:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block637

 Block635:
	mov eax,dword ptr [esp+0x134]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x134]
	test ecx,ecx
	je Block637

 Block636:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block637:
	mov ecx,dword ptr [esp+0xE4]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xDC
	ret 0x4C
}
}
// CUIToolTip::SetToolTip_SetItem_Basic
_SUB_EXCEPTION_HANDLER(4A14B0)
__SUB_CLASS_THIS(004A14B0, __thiscall, 5793,  CUIToolTip, long, CItemInfo::SETITEMINFO*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A14B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC0
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xD4]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x18],ecx
	xor esi,esi
	mov dword ptr [esp+0xC4],esi
	mov dword ptr [esp+0xBC],esi
	mov dword ptr [esp+0xC0],esi
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0xCC]
	push eax
	mov dword ptr [esp+0xE0],esi
	call CWvsContext::GetCharacterData
	mov edi,dword ptr [esp+0xE4]
	lea ecx,[esp+0xBC]
	push ecx
	mov ecx,dword ptr [esp+0xD4]
	push edi
	add ecx,0x521
	mov byte ptr [esp+0xE4],1
	call ZMap<long, EQUIPPED_SETITEM, long>::GetAt
	lea esp,[esp]

 Block1:
	cmp dword ptr [edi+esi*8+0xC],0
	je Block122

 Block2:
	xor edx,edx
	cmp esi,dword ptr [esp+0xC0]
	mov dword ptr [esp+0x14],0
	setge dl
	lea edx,[edx+edx+0xA]
	mov ebp,edx
	lea ebx,[esi+1]
	mov byte ptr [esp+0xDC],2
	test ebx,ebx
	jle Block6

 Block3:
	lea eax,[esp+0x70]
	push 0x16BC
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push ebx
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov byte ptr [esp+0xE8],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x7C]
	add esp,0xC
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block5

 Block4:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block5:
	push 0
	push 0x3E9
	push 0
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push 0x10
	call CUIToolTip::AddInfo

 Block6:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax],0
	jle Block12

 Block7:
	lea eax,[esp+0x30]
	push 0x1A61
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0xB0]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],4
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],5
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xB8]
	add esp,0xC
	mov byte ptr [esp+0xDC],4
	test eax,eax
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block11:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block12:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+2],0
	jle Block18

 Block13:
	lea eax,[esp+0x38]
	push 0x1A31
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0xA4]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],6
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+2]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],7
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xAC]
	add esp,0xC
	mov byte ptr [esp+0xDC],6
	test eax,eax
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block15:
	mov eax,dword ptr [esp+0x38]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block17:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block18:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+4],0
	jle Block24

 Block19:
	lea eax,[esp+0x40]
	push 0x1A42
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x84]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],8
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+4]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],9
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x8C]
	add esp,0xC
	mov byte ptr [esp+0xDC],8
	test eax,eax
	je Block21

 Block20:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block21:
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block24:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+6],0
	jle Block30

 Block25:
	lea eax,[esp+0x48]
	push 0x1A4A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0xCC]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0xA
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+6]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0xB
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xD4]
	add esp,0xC
	mov byte ptr [esp+0xDC],0xA
	test eax,eax
	je Block27

 Block26:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block27:
	mov eax,dword ptr [esp+0x48]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block29

 Block28:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block29:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block30:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+8],0
	jle Block36

 Block31:
	lea eax,[esp+0x50]
	push 0x1A3F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x8C]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0xC
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+8]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0xD
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x94]
	add esp,0xC
	mov byte ptr [esp+0xDC],0xC
	test eax,eax
	je Block33

 Block32:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block33:
	mov eax,dword ptr [esp+0x50]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block35

 Block34:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block35:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block36:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0xA],0
	jle Block42

 Block37:
	lea eax,[esp+0x58]
	push 0x1A4D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0xAC]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0xE
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0xA]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0xF
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xB4]
	add esp,0xC
	mov byte ptr [esp+0xDC],0xE
	test eax,eax
	je Block39

 Block38:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block39:
	mov eax,dword ptr [esp+0x58]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block41

 Block40:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block41:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block42:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0xC],0
	jle Block48

 Block43:
	lea eax,[esp+0x60]
	push 0x2A2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x94]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x10
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0xC]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x11
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x9C]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x10
	test eax,eax
	je Block45

 Block44:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block45:
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block47

 Block46:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block47:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block48:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0xE],0
	jle Block54

 Block49:
	lea eax,[esp+0x68]
	push 0x2A3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0xBC]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x12
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0xE]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x13
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xC4]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x12
	test eax,eax
	je Block51

 Block50:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block51:
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block53

 Block52:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block53:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block54:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0x10],0
	jle Block60

 Block55:
	lea eax,[esp+0x28]
	push 0x2A4
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x9C]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x14
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0x10]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x15
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xA4]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x14
	test eax,eax
	je Block57

 Block56:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block57:
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block59

 Block58:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block59:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block60:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0x12],0
	jle Block66

 Block61:
	lea eax,[esp+0x78]
	push 0x2A5
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0xB4]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x16
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0x12]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x17
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xBC]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x16
	test eax,eax
	je Block63

 Block62:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block63:
	mov eax,dword ptr [esp+0x78]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block65

 Block64:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block65:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block66:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0x14],0
	jle Block72

 Block67:
	lea eax,[esp+0x34]
	push 0x2A6
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x30]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x18
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0x14]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x19
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x18
	test eax,eax
	je Block69

 Block68:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block69:
	mov eax,dword ptr [esp+0x34]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block71

 Block70:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block71:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block72:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0x16],0
	jle Block78

 Block73:
	lea eax,[esp+0x44]
	push 0x2A7
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x40]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x1A
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0x16]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x1B
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x48]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x1A
	test eax,eax
	je Block75

 Block74:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block75:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block77

 Block76:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block77:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block78:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0x18],0
	jle Block84

 Block79:
	lea eax,[esp+0x54]
	push 0x2A8
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x50]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x1C
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0x18]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x1D
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x58]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x1C
	test eax,eax
	je Block81

 Block80:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block81:
	mov eax,dword ptr [esp+0x54]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block83

 Block82:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block83:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block84:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0x1A],0
	jle Block90

 Block85:
	lea eax,[esp+0x64]
	push 0x2A9
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x60]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x1E
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0x1A]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x1F
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x68]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x1E
	test eax,eax
	je Block87

 Block86:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block87:
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block89

 Block88:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block89:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block90:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp word ptr [eax+0x1C],0
	jle Block96

 Block91:
	lea eax,[esp+0x74]
	push 0x2AA
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x70]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x20
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	movsx edx,word ptr [ecx+0x1C]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x21
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x78]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x20
	test eax,eax
	je Block93

 Block92:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block93:
	mov eax,dword ptr [esp+0x74]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block95

 Block94:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block95:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block96:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp dword ptr [eax+0x20],0
	jle Block102

 Block97:
	lea eax,[esp+0x84]
	push 0x2AC
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push offset _S_D__6
	lea ecx,[esp+0x80]
	push ecx
	mov ecx,eax
	mov byte ptr [esp+0xE4],0x22
	call ZXString<char>::op_add_0
	mov ecx,dword ptr [edi+esi*8+0xC]
	mov edx,dword ptr [ecx+0x20]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xE8],0x23
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x88]
	add esp,0xC
	mov byte ptr [esp+0xDC],0x22
	test eax,eax
	je Block99

 Block98:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block99:
	mov eax,dword ptr [esp+0x84]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block101

 Block100:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block101:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0x2C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x28]
	push ebp
	call CUIToolTip::AddInfo

 Block102:
	mov eax,dword ptr [edi+esi*8+0xC]
	mov dword ptr [esp+0x1C],ebp
	sub ebp,0xA
	neg ebp
	sbb ebp,ebp
	and ebp,0xFFFFFFFD
	add ebp,0xE
	lea ecx,[eax+0x3C]
	mov dword ptr [esp+0xA4],ebp
	call ZMap<long, long, long>::GetHeadPosition
	mov dword ptr [esp+0x20],eax
	test eax,eax
	je Block111

 Block103:
	mov edi,edi

 Block104:
	mov eax,dword ptr [edi+esi*8+0xC]
	lea ecx,[esp+0x8C]
	push ecx
	lea edx,[esp+0x24]
	push edx
	lea ecx,[eax+0x3C]
	call ZMap<long, long, long>::GetNext
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	push eax
	call CSkillInfo::GetSkill
	mov ebp,dword ptr [esp+0x8C]
	mov ebx,eax
	test ebp,ebp
	jle Block110

 Block105:
	lea eax,[esp+0x94]
	push 0x16BD
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push ebp
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov byte ptr [esp+0xE8],0x24
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0xA0]
	add esp,0xC
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block107

 Block106:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block107:
	lea edx,[esp+0x14]
	push edx
	lea eax,[esp+0xA0]
	push eax
	lea ecx,[ebx+4]
	call ZXString<char>::op_add_1
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xE0],0x25
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x9C]
	mov byte ptr [esp+0xDC],2
	test eax,eax
	je Block109

 Block108:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block109:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0xC4],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0xB4]
	mov ecx,dword ptr [esp+0x28]
	push eax
	call CUIToolTip::AddInfo

 Block110:
	cmp dword ptr [esp+0x20],0
	jne Block104

 Block111:
	mov eax,dword ptr [edi+esi*8+0xC]
	cmp dword ptr [eax+0x24],0x2710
	jne Block120

 Block112:
	lea ecx,[esp+0x24]
	push 0x17EC
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ebx,dword ptr [eax]
	mov byte ptr [esp+0xDC],0x26
	test ebx,ebx
	je Block116

 Block113:
	cmp dword ptr [ebx+4],0
	jne Block115

 Block114:
	mov edx,dword ptr [ebx]
	push edx
	call ZComAPI::ZtlConvertBSTRToString
	mov dword ptr [ebx+4],eax

 Block115:
	mov ebx,dword ptr [ebx+4]
	jmp Block117

 Block116:
	xor ebx,ebx

 Block117:
	lea eax,[esp+0x14]
	push ebx
	push eax
	call ZXString<char>::Format
	mov ecx,dword ptr [esp+0x2C]
	add esp,8
	mov byte ptr [esp+0xDC],2
	test ecx,ecx
	je Block119

 Block118:
	call _xbstr_t::Data_t::Release
	mov dword ptr [esp+0x24],0

 Block119:
	push 0
	push 0x3E9
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x24]
	mov dword ptr [esp+0xC4],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x2C]
	mov ecx,dword ptr [esp+0x28]
	push eax
	call CUIToolTip::AddInfo

 Block120:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xDC],1
	test eax,eax
	je Block122

 Block121:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block122:
	inc esi
	cmp esi,0x3C
	jl Block1

 Block123:
	mov eax,dword ptr [esp+0xD0]
	mov ecx,dword ptr [esp+0x18]
	mov ebx,dword ptr [ecx+0x20]
	mov byte ptr [esp+0xDC],0
	test eax,eax
	je Block127

 Block124:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block127

 Block125:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block127

 Block126:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block127:
	lea ecx,[esp+0xC4]
	mov dword ptr [esp+0xDC],0xFFFFFFFF
	call ZArray<long>::RemoveAll
	mov eax,ebx
	mov ecx,dword ptr [esp+0xD4]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xCC
	ret 4
}
}
// CUIToolTip::SetToolTip_SetItem
_SUB_EXCEPTION_HANDLER(4A4090)
__SUB_CLASS_THIS(004A4090, __thiscall, 5711,  CUIToolTip, void, long, long, GW_ItemSlotEquip*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A4090
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x9C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xB0]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x20],ebx
	mov ebp,dword ptr [esp+0xC4]
	xor edi,edi
	cmp dword ptr [ebx+0x10],edi
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov eax,dword ptr [esp+0xC0]
	cmp dword ptr [ebx+0x18],eax
	jne Block3

 Block2:
	cmp dword ptr [ebx+0x1C],ebp
	je Block161

 Block3:
	mov ecx,dword ptr [esp+0xC8]
	add ecx,0xC
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov esi,eax
	cmp dword ptr [esi+0x218],edi
	je Block161

 Block4:
	mov dword ptr [esp+0x64],edi
	mov dword ptr [esp+0x5C],edi
	mov dword ptr [esp+0x60],edi
	lea ecx,[esp+0x78]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov dword ptr [esp+0xBC],edi
	call CWvsContext::GetCharacterData
	mov edx,dword ptr [esi+0x218]
	lea eax,[esp+0x5C]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [esp+0x84]
	add ecx,0x521
	mov byte ptr [esp+0xC0],1
	mov dword ptr [esp+0x20],edx
	call ZMap<long, EQUIPPED_SETITEM, long>::GetAt
	mov dword ptr [esp+0x48],edi
	mov edx,dword ptr [esi+0x218]
	lea eax,[esp+0x44]
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	add ecx,0x9C
	mov byte ptr [esp+0xC0],2
	mov dword ptr [esp+0x20],edx
	call ZMap<long, ZRef<CItemInfo::SETITEMINFO>, long>::GetAt
	push edi
	push edi
	push 0xEC
	push 1
	mov ecx,ebx
	call CUIToolTip::SetBasicInfo
	mov esi,dword ptr [esp+0x48]
	push esi
	mov ecx,ebx
	call CUIToolTip::SetToolTip_SetItem_Basic
	mov ecx,dword ptr [esi+0x1EC]
	push edi
	push 0xCC0E395A
	push edi
	shl ecx,4
	push edi
	add ecx,0x28
	shl eax,4
	lea edx,[eax+ecx+0xF]
	mov eax,dword ptr [esp+0xD0]
	push 1
	push ebp
	mov dword ptr [ebx+0x4A4],ecx
	push eax
	lea ecx,[esp+0x34]
	push ecx
	mov ecx,ebx
	mov dword ptr [ebx+8],edx
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x18]
	cmp eax,edi
	je Block6

 Block5:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block6:
	push 0x10
	lea ecx,[esp+0x20]
	push ecx
	mov ecx,ebx
	call CUIToolTip::GetFontByType
	mov ebp,dword ptr [esp+0x1C]
	push ecx
	mov eax,esp
	mov byte ptr [esp+0xBC],3
	mov dword ptr [esp+0x5C],esp
	mov dword ptr [eax],ebp
	cmp ebp,edi
	je Block8

 Block7:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+4]
	push ebp
	call eax

 Block8:
	mov eax,dword ptr [esi+0x1E8]
	push eax
	push 0xA
	mov ecx,ebx
	call CUIToolTip::DrawTextCenter
	push 0xC
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,ebx
	mov dword ptr [esp+0x2C],0x23
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	cmp ebp,eax
	je Block13

 Block9:
	mov dword ptr [esp+0x1C],eax
	cmp eax,edi
	je Block11

 Block10:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block11:
	cmp ebp,edi
	je Block13

 Block12:
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx+8]
	push ebp
	call edx

 Block13:
	mov eax,dword ptr [esp+0x18]
	cmp eax,edi
	je Block15

 Block14:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block15:
	push 0x64
	lea ecx,[esp+0x84]
	int 3// TODO: 	mov dword ptr [esp+0x84],offset ZMap<long, ZRef<ToolTip_SetItemList>, long>::`vftable'
	mov dword ptr [esp+0x88],edi
	mov dword ptr [esp+0x8C],0x1F
	mov dword ptr [esp+0x90],edi
	call ZMap<long, ZRef<ToolTip_SetItemList>, long>::_CalcAutoGrow
	int 3// TODO: 	mov dword ptr [esp+0x9C],offset ZList<ZRef<ToolTip_SetItemList>>::`vftable'
	mov dword ptr [esp+0xA4],edi
	mov dword ptr [esp+0xA8],edi
	mov dword ptr [esp+0xAC],edi
	lea ecx,[esi+0x1F4]
	mov byte ptr [esp+0xB8],5
	call ZMap<long, ZXString<char>, long>::GetHeadPosition
	mov ebp,eax
	mov dword ptr [esp+0x14],ebp
	cmp ebp,edi
	je Block28

 Block16:
	mov edi,edi

 Block17:
	push 0
	call ZRefCounted_AllocHelper<ZRefCountedDummy<ToolTip_SetItemList>>::call
	lea esi,[eax+0x10]
	add esp,4
	mov dword ptr [eax+4],1
	mov dword ptr [esp+0x30],esi
	push 0xC
	lea eax,[esp+0x1C]
	push eax
	mov ecx,ebx
	mov byte ptr [esp+0xC0],6
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi]
	cmp edi,eax
	je Block22

 Block18:
	mov dword ptr [esi],eax
	test eax,eax
	je Block20

 Block19:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block20:
	test edi,edi
	je Block22

 Block21:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block22:
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	je Block24

 Block23:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block24:
	lea ecx,[ebp+0xC]
	push ecx
	lea ecx,[esi+4]
	call ZXString<char>::op_assign
	push 0
	push offset _S_
	push 0
	lea edi,[esi+8]
	push 0
	mov ecx,edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	mov ecx,edi
	call ZXString<char>::ReleaseBuffer
	lea edx,[esp+0x2C]
	lea eax,[ebp+8]
	push edx
	push eax
	lea ecx,[esp+0x88]
	call ZMap<long, ZRef<ToolTip_SetItemList>, long>::Insert
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0xBC],5
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block27

 Block25:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block27

 Block26:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block27:
	mov ecx,dword ptr [esp+0x48]
	push 0
	lea eax,[esp+0x18]
	push eax
	add ecx,0x1F4
	mov dword ptr [esp+0x38],0
	call ZMap<long, ZXString<char>, long>::GetNext
	mov ebp,dword ptr [esp+0x14]
	test ebp,ebp
	jne Block17

 Block28:
	xor ecx,ecx
	cmp ecx,dword ptr [esp+0x8C]
	sbb eax,eax
	neg eax
	mov dword ptr [esp+0x58],eax
	xor eax,eax

 Block29:
	mov edi,dword ptr [esp+0x48]
	mov ecx,dword ptr [edi+4]
	mov ebp,dword ptr [esp+0x1C]
	mov dword ptr [esp+0x18],eax
	test ecx,ecx
	je Block108

 Block30:
	cmp eax,dword ptr [ecx-4]
	jae Block108

 Block31:
	lea esi,[eax*4]
	mov eax,ecx
	mov edx,dword ptr [eax+esi]
	add eax,esi
	push edx
	call get_gender_from_id
	add esp,4
	cmp eax,2
	je Block33

 Block32:
	mov ecx,dword ptr [esp+0x7C]
	movzx edx,byte ptr [ecx+0x11]
	cmp eax,edx
	jne Block107

 Block33:
	mov ecx,dword ptr [edi+4]
	mov esi,dword ptr [esi+ecx]
	xor eax,eax
	push eax
	lea edx,[esp+0x44]
	push edx
	push 2
	push esi
	mov dword ptr [esp+0x5C],eax
	mov dword ptr [esp+0x50],eax
	call get_bodypart_from_item
	add esp,0x10
	cmp dword ptr [esp+0x40],0
	jne Block35

 Block34:
	push esi
	call get_weapon_type
	add esp,4
	mov dword ptr [esp+0x40],eax

 Block35:
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push esi
	lea eax,[esp+0x40]
	push eax
	call CItemInfo::GetItemName
	push 0xC
	lea ecx,[esp+0x78]
	push ecx
	mov ecx,ebx
	mov byte ptr [esp+0xC0],7
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	cmp ebp,eax
	je Block40

 Block36:
	mov edi,ebp
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block38

 Block37:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block38:
	test edi,edi
	je Block40

 Block39:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block40:
	mov eax,dword ptr [esp+0x74]
	test eax,eax
	je Block42

 Block41:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block42:
	lea ecx,[esp+0x64]
	xor ebp,ebp
	xor edi,edi
	call ZArray<long>::GetCount
	cmp eax,ebp
	jbe Block46

 Block43:
	mov ecx,dword ptr [esp+0x64]

 Block44:
	cmp dword ptr [ecx+edi*4],esi
	je Block52

 Block45:
	inc edi
	cmp edi,eax
	jb Block44

 Block46:
	mov ebx,dword ptr [esp+0x1C]

 Block47:
	mov dword ptr [esp+0x14],ebp
	lea ecx,[esp+0x68]
	push esi
	push ecx
	mov byte ptr [esp+0xC0],8
	call get_item_category_name
	add esp,8
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xBC],9
	call ZXString<char>::op_assign
	mov edi,dword ptr [eax]
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0xB8],8
	cmp eax,ebp
	je Block49

 Block48:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block49:
	cmp edi,ebp
	je Block60

 Block50:
	mov dword ptr [esp+0x28],ebp
	mov byte ptr [esp+0xB8],0xA

 Block51:
	mov edx,dword ptr [esp+0x14]
	push edx
	lea eax,[esp+0x2C]
	push offset _S_S__4
	push eax
	call ZXString<char>::Format
	add esp,0xC
	push eax
	lea ecx,[esp+0x18]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x28]
	jmp Block65

 Block52:
	push 0xA
	lea eax,[esp+0x70]
	push eax
	mov ecx,ebx
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov ebx,dword ptr [esp+0x1C]
	cmp ebx,eax
	je Block57

 Block53:
	mov edi,ebx
	mov ebx,eax
	mov dword ptr [esp+0x1C],ebx
	cmp eax,ebp
	je Block55

 Block54:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block55:
	cmp edi,ebp
	je Block57

 Block56:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block57:
	mov eax,dword ptr [esp+0x6C]
	cmp eax,ebp
	je Block59

 Block58:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block59:
	mov dword ptr [esp+0x4C],1
	jmp Block47

 Block60:
	lea ecx,[esp+0x70]
	push esi
	push ecx
	call get_weapon_category_name
	add esp,8
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xBC],0xB
	call ZXString<char>::op_assign
	mov edi,dword ptr [eax]
	mov eax,dword ptr [esp+0x70]
	mov byte ptr [esp+0xB8],8
	cmp eax,ebp
	je Block62

 Block61:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block62:
	cmp edi,ebp
	je Block64

 Block63:
	mov dword ptr [esp+0x28],ebp
	mov byte ptr [esp+0xB8],0xC
	jmp Block51

 Block64:
	push esi
	lea ecx,[esp+0x9C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemTypeName
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0xBC],0xD
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x98]

 Block65:
	mov byte ptr [esp+0xB8],8
	cmp eax,ebp
	je Block67

 Block66:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block67:
	cmp dword ptr [esp+0x58],ebp
	je Block89

 Block68:
	mov dword ptr [esp+0x30],ebp
	lea edx,[esp+0x2C]
	push edx
	lea eax,[esp+0x44]
	push eax
	lea ecx,[esp+0x88]
	mov byte ptr [esp+0xC0],0xE
	call ZMap<long, ZRef<ToolTip_SetItemList>, long>::GetAt
	mov esi,dword ptr [esp+0x30]
	test eax,eax
	je Block84

 Block69:
	lea ecx,[esp+0x14]
	push ecx
	lea ecx,[esi+8]
	call ZXString<char>::op_assign
	cmp dword ptr [esp+0x4C],ebp
	je Block76

 Block70:
	mov edi,dword ptr [esi]
	cmp edi,ebx
	je Block75

 Block71:
	mov dword ptr [esi],ebx
	cmp ebx,ebp
	je Block73

 Block72:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+4]
	push ebx
	call eax

 Block73:
	cmp edi,ebp
	je Block75

 Block74:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block75:
	lea eax,[esp+0x3C]
	push eax
	lea ecx,[esi+4]
	call ZXString<char>::op_assign

 Block76:
	mov byte ptr [esp+0xB8],8
	cmp esi,ebp
	je Block81

 Block77:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block80

 Block78:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block80

 Block79:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block80:
	mov dword ptr [esp+0x30],ebp

 Block81:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xB8],7
	cmp eax,ebp
	je Block83

 Block82:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block83:
	mov eax,dword ptr [esp+0x3C]
	cmp eax,ebp
	jmp Block105

 Block84:
	mov byte ptr [esp+0xB8],8
	cmp esi,ebp
	je Block89

 Block85:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block88

 Block86:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebp
	je Block88

 Block87:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block88:
	mov dword ptr [esp+0x30],ebp

 Block89:
	push ebp
	call ZRefCounted_AllocHelper<ZRefCountedDummy<ToolTip_SetItemList>>::call
	lea esi,[eax+0x10]
	add esp,4
	mov dword ptr [eax+4],1
	mov dword ptr [esp+0x54],esi
	mov edi,dword ptr [esi]
	mov byte ptr [esp+0xB8],0xF
	cmp edi,ebx
	je Block94

 Block90:
	mov dword ptr [esi],ebx
	cmp ebx,ebp
	je Block92

 Block91:
	mov ecx,dword ptr [ebx]
	mov edx,dword ptr [ecx+4]
	push ebx
	call edx

 Block92:
	cmp edi,ebp
	je Block94

 Block93:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block94:
	lea edx,[esp+0x3C]
	push edx
	lea ecx,[esi+4]
	call ZXString<char>::op_assign
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esi+8]
	call ZXString<char>::op_assign
	lea ecx,[esp+0x9C]
	call ZList<ZRef<ToolTip_SetItemList>>::AddTail_
	lea edi,[esi-0x10]
	lea ecx,[edi+4]
	push ecx
	mov ebx,eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [ebx+4]
	test eax,eax
	je Block99

 Block95:
	lea ebp,[eax-0x10]
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block98

 Block96:
	lea eax,[ebp+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	test ebp,ebp
	je Block98

 Block97:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,ebp
	call eax

 Block98:
	mov dword ptr [ebx+4],0

 Block99:
	mov dword ptr [ebx+4],esi
	lea esi,[edi+4]
	push esi
	mov byte ptr [esp+0xBC],8
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block102

 Block100:
	push esi
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block102

 Block101:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block102:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x54],0
	mov byte ptr [esp+0xB8],7
	test eax,eax
	je Block104

 Block103:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block104:
	mov eax,dword ptr [esp+0x3C]
	test eax,eax

 Block105:
	mov byte ptr [esp+0xB8],5
	je Block107

 Block106:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block107:
	mov eax,dword ptr [esp+0x18]
	mov ebx,dword ptr [esp+0x20]
	inc eax
	jmp Block29

 Block108:
	lea ecx,[esp+0x80]
	call ZMap<long, ZRef<ToolTip_SetItemList>, long>::GetHeadPosition
	mov esi,eax
	mov dword ptr [esp+0x14],esi
	test esi,esi
	je Block129

 Block109:
	mov ebp,dword ptr [ZImports::_VariantInit]
	mov edi,edi

 Block110:
	mov eax,dword ptr [esi+0x10]
	mov byte ptr [esp+0xB8],0x10
	test eax,eax
	je Block112

 Block111:
	add eax,0xFFFFFFF4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block112:
	mov esi,dword ptr [esi+0x10]
	mov eax,dword ptr [esi]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x58],esi
	mov dword ptr [esp+0x24],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block114

 Block113:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block114:
	mov eax,dword ptr [esi+8]
	push eax
	mov eax,dword ptr [esp+0x2C]
	push eax
	mov ecx,ebx
	call CUIToolTip::DrawTextRight
	lea ecx,[esp+0x2C]
	push ecx
	call ebp
	lea edx,[esp+0x2C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block139

 Block115:
	lea eax,[esp+0x2C]
	push eax
	mov eax,dword ptr [esi+8]
	push ecx
	mov dword ptr [esp+0x28],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xC4],0x11
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi]
	mov byte ptr [esp+0xC0],0x12
	test ecx,ecx
	je Block140

 Block116:
	mov byte ptr [esp+0xC0],0x11
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x2C],8
	mov edi,eax
	mov byte ptr [esp+0xB8],0x10
	jne Block119

 Block117:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	test eax,eax
	je Block120

 Block118:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block120

 Block119:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block120:
	mov eax,dword ptr [ebx+0xC]
	sub eax,edi
	sub eax,0x14
	push eax
	mov eax,dword ptr [esi]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block122

 Block121:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block122:
	lea edi,[esi+4]
	push edi
	call format_string_1
	mov eax,dword ptr [esi]
	add esp,8
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block124

 Block123:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block124:
	mov eax,dword ptr [edi]
	mov edi,dword ptr [esp+0x28]
	push eax
	push edi
	mov ecx,ebx
	call CUIToolTip::DrawTextLeft
	add edi,0x10
	add esi,0xFFFFFFF0
	mov dword ptr [esp+0x24],edi
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0xBC],5
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block127

 Block125:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block127

 Block126:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block127:
	push 0
	lea eax,[esp+0x18]
	push eax
	lea ecx,[esp+0x88]
	mov dword ptr [esp+0x5C],0
	call ZMap<long, ZRef<ToolTip_SetItemList>, long>::GetNext
	mov esi,dword ptr [esp+0x14]
	test esi,esi
	jne Block110

 Block128:
	mov edi,dword ptr [esp+0x48]
	mov ebp,dword ptr [esp+0x1C]

 Block129:
	mov eax,dword ptr [esp+0xA8]
	mov dword ptr [esp+0x14],eax
	test eax,eax
	je Block151

 Block130:
	mov esi,dword ptr [eax+4]
	mov dword ptr [esp+0x54],esi
	test esi,esi
	je Block132

 Block131:
	lea ecx,[esi-0xC]
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]

 Block132:
	mov eax,dword ptr [esi]
	push ecx
	mov ecx,esp
	mov byte ptr [esp+0xBC],0x13
	mov dword ptr [esp+0x24],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block134

 Block133:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block134:
	mov eax,dword ptr [esi+8]
	mov ecx,dword ptr [esp+0x28]
	push eax
	push ecx
	mov ecx,ebx
	call CUIToolTip::DrawTextRight
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block139

 Block135:
	mov eax,dword ptr [esi+8]
	lea ecx,[esp+0x2C]
	push ecx
	push ecx
	mov dword ptr [esp+0x28],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xC4],0x14
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi]
	mov byte ptr [esp+0xC0],0x15
	test ecx,ecx
	je Block140

 Block136:
	mov byte ptr [esp+0xC0],0x14
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x2C],8
	mov edi,eax
	mov byte ptr [esp+0xB8],0x13
	jne Block141

 Block137:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block142

 Block138:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block142

 Block139:
	push eax
	call _com_issue_error

 Block140:
	push 0x80004003
	call _com_issue_error

 Block141:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block142:
	mov eax,dword ptr [ebx+0xC]
	sub eax,edi
	sub eax,0x14
	push eax
	mov eax,dword ptr [esi]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block144

 Block143:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block144:
	lea edi,[esi+4]
	push edi
	call format_string_1
	mov eax,dword ptr [esi]
	add esp,8
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block146

 Block145:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block146:
	mov eax,dword ptr [edi]
	mov edi,dword ptr [esp+0x28]
	push eax
	push edi
	mov ecx,ebx
	call CUIToolTip::DrawTextLeft
	add edi,0x10
	add esi,0xFFFFFFF0
	mov dword ptr [esp+0x24],edi
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0xBC],5
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block149

 Block147:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block149

 Block148:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block149:
	lea eax,[esp+0x14]
	push eax
	mov dword ptr [esp+0x58],0
	call ZList<ZRef<ToolTip_SetItemList>>::GetNext
	mov eax,dword ptr [esp+0x18]
	add esp,4
	test eax,eax
	jne Block130

 Block150:
	mov edi,dword ptr [esp+0x48]
	mov ebp,dword ptr [esp+0x1C]

 Block151:
	push 0
	mov ecx,ebx
	call CUIToolTip::DrawInfo
	lea ecx,[esp+0x9C]
	mov byte ptr [esp+0xB8],4
	int 3// TODO: 	mov dword ptr [esp+0x9C],offset ZList<ZRef<ToolTip_SetItemList>>::`vftable'
	call ZList<ZRef<ToolTip_SetItemList>>::RemoveAll
	lea ecx,[esp+0x80]
	mov byte ptr [esp+0xB8],3
	int 3// TODO: 	mov dword ptr [esp+0x80],offset ZMap<long, ZRef<ToolTip_SetItemList>, long>::`vftable'
	call ZMap<long, ZRef<ToolTip_SetItemList>, long>::RemoveAll
	mov byte ptr [esp+0xB8],2
	test ebp,ebp
	je Block153

 Block152:
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx+8]
	push ebp
	call edx

 Block153:
	mov ebx,dword ptr [ZImports::_InterlockedDecrement]
	lea esi,[edi-0x10]
	lea edi,[esi+4]
	push edi
	mov byte ptr [esp+0xBC],1
	call ebx
	test eax,eax
	jne Block156

 Block154:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block156

 Block155:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block156:
	mov esi,dword ptr [esp+0x7C]
	mov byte ptr [esp+0xB8],0
	test esi,esi
	je Block160

 Block157:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call ebx
	test eax,eax
	jne Block160

 Block158:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block160

 Block159:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block160:
	lea ecx,[esp+0x64]
	mov dword ptr [esp+0xB8],0xFFFFFFFF
	call ZArray<long>::RemoveAll

 Block161:
	mov ecx,dword ptr [esp+0xB0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xA8
	ret 0xC
}
}
// CUIToolTip::~CUIToolTip
_SUB_EXCEPTION_HANDLER(482F30)
__SUB_CLASS_THIS0(00482F30, __thiscall, 5685,  CUIToolTip, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_482F30
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	int 3// TODO: 	mov dword ptr [esi],offset CUIToolTip::`vftable'
	mov dword ptr [esp+0x14],0x27
	call CUIToolTip::ClearToolTip
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push 4
	push 4
	lea eax,[esi+0xA34]
	push eax
	mov byte ptr [esp+0x24],0x26
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0xA30]
	mov byte ptr [esp+0x14],0x25
	test eax,eax
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block2:
	mov eax,dword ptr [esi+0xA2C]
	mov byte ptr [esp+0x14],0x24
	test eax,eax
	je Block4

 Block3:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block4:
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push 8
	push 4
	lea eax,[esi+0xA0C]
	push eax
	mov byte ptr [esp+0x24],0x23
	call __eh_vector_dtor_iterator
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push 3
	push 4
	lea ecx,[esi+0xA00]
	push ecx
	mov byte ptr [esp+0x24],0x22
	call __eh_vector_dtor_iterator
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push 0xC
	push 4
	lea edx,[esi+0x9D0]
	push edx
	mov byte ptr [esp+0x24],0x21
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0x9CC]
	mov byte ptr [esp+0x14],0x20
	test eax,eax
	je Block6

 Block5:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block6:
	mov eax,dword ptr [esi+0x9C8]
	mov byte ptr [esp+0x14],0x1F
	test eax,eax
	je Block8

 Block7:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block8:
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push 0xC
	push 4
	lea eax,[esi+0x998]
	push eax
	mov byte ptr [esp+0x24],0x1E
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0x994]
	mov byte ptr [esp+0x14],0x1D
	test eax,eax
	je Block10

 Block9:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block10:
	mov eax,dword ptr [esi+0x990]
	mov byte ptr [esp+0x14],0x1C
	test eax,eax
	je Block12

 Block11:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block12:
	mov eax,dword ptr [esi+0x98C]
	mov byte ptr [esp+0x14],0x1B
	test eax,eax
	je Block14

 Block13:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block14:
	mov eax,dword ptr [esi+0x988]
	mov byte ptr [esp+0x14],0x1A
	test eax,eax
	je Block16

 Block15:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block16:
	mov eax,dword ptr [esi+0x984]
	mov byte ptr [esp+0x14],0x19
	test eax,eax
	je Block18

 Block17:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block18:
	mov eax,dword ptr [esi+0x980]
	mov byte ptr [esp+0x14],0x18
	test eax,eax
	je Block20

 Block19:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block20:
	mov eax,dword ptr [esi+0x97C]
	mov byte ptr [esp+0x14],0x17
	test eax,eax
	je Block22

 Block21:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block22:
	mov eax,dword ptr [esi+0x978]
	mov byte ptr [esp+0x14],0x16
	test eax,eax
	je Block24

 Block23:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block24:
	mov eax,dword ptr [esi+0x974]
	mov byte ptr [esp+0x14],0x15
	test eax,eax
	je Block26

 Block25:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block26:
	mov eax,dword ptr [esi+0x970]
	mov byte ptr [esp+0x14],0x14
	test eax,eax
	je Block28

 Block27:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block28:
	mov eax,dword ptr [esi+0x96C]
	mov byte ptr [esp+0x14],0x13
	test eax,eax
	je Block30

 Block29:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block30:
	mov eax,dword ptr [esi+0x968]
	mov byte ptr [esp+0x14],0x12
	test eax,eax
	je Block32

 Block31:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block32:
	mov eax,dword ptr [esi+0x964]
	mov byte ptr [esp+0x14],0x11
	test eax,eax
	je Block34

 Block33:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block34:
	mov eax,dword ptr [esi+0x960]
	mov byte ptr [esp+0x14],0x10
	test eax,eax
	je Block36

 Block35:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block36:
	mov eax,dword ptr [esi+0x95C]
	mov byte ptr [esp+0x14],0xF
	test eax,eax
	je Block38

 Block37:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block38:
	mov eax,dword ptr [esi+0x958]
	mov byte ptr [esp+0x14],0xE
	test eax,eax
	je Block40

 Block39:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block40:
	mov eax,dword ptr [esi+0x954]
	mov byte ptr [esp+0x14],0xD
	test eax,eax
	je Block42

 Block41:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block42:
	mov eax,dword ptr [esi+0x950]
	mov byte ptr [esp+0x14],0xC
	test eax,eax
	je Block44

 Block43:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block44:
	mov eax,dword ptr [esi+0x94C]
	mov byte ptr [esp+0x14],0xB
	test eax,eax
	je Block46

 Block45:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block46:
	mov eax,dword ptr [esi+0x948]
	mov byte ptr [esp+0x14],0xA
	test eax,eax
	je Block48

 Block47:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block48:
	mov eax,dword ptr [esi+0x944]
	mov byte ptr [esp+0x14],9
	test eax,eax
	je Block50

 Block49:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block50:
	mov eax,dword ptr [esi+0x940]
	mov byte ptr [esp+0x14],8
	test eax,eax
	je Block52

 Block51:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block52:
	mov eax,dword ptr [esi+0x93C]
	mov byte ptr [esp+0x14],7
	test eax,eax
	je Block54

 Block53:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block54:
	mov eax,dword ptr [esi+0x938]
	mov byte ptr [esp+0x14],6
	test eax,eax
	je Block56

 Block55:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block56:
	mov eax,dword ptr [esi+0x934]
	mov byte ptr [esp+0x14],5
	test eax,eax
	je Block58

 Block57:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block58:
	mov eax,dword ptr [esi+0x930]
	mov byte ptr [esp+0x14],4
	test eax,eax
	je Block60

 Block59:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block60:
	mov eax,dword ptr [esi+0x92C]
	mov byte ptr [esp+0x14],3
	test eax,eax
	je Block62

 Block61:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block62:
	push offset CUIToolTip::CLineInfo::~CLineInfo
	push 0x20
	push 0x24
	lea eax,[esi+0x4AC]
	push eax
	mov byte ptr [esp+0x24],2
	call __eh_vector_dtor_iterator
	push offset CUIToolTip::CLineInfo::~CLineInfo
	push 0x20
	push 0x24
	lea ecx,[esi+0x24]
	push ecx
	mov byte ptr [esp+0x24],1
	call __eh_vector_dtor_iterator
	mov eax,dword ptr [esi+0x14]
	mov byte ptr [esp+0x14],0
	test eax,eax
	je Block64

 Block63:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block64:
	mov esi,dword ptr [esi+0x10]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block66

 Block65:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	call edx

 Block66:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CUIToolTip::PrintValue
_SUB_EXCEPTION_HANDLER(491230)
__SUB_CLASS_THIS(00491230, __thiscall, 5771,  CUIToolTip, void, long, long, NakedParam<ZXString<char>>, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_491230
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x10
	push ebx
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x10],0
	cmp dword ptr [esp+0x3C],0
	mov esi,dword ptr [esp+0x34]
	mov dword ptr [esp+0x28],0
	jne Block2

 Block1:
	test esi,esi
	jle Block32

 Block2:
	mov dword ptr [esp+0x3C],0
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x28],1
	cmp eax,5
	ja Block32

 Block3:
	cmp EAX, 0
je Block4
cmp EAX, 1
je Block13
cmp EAX, 2
je Block14
cmp EAX, 3
je Block17
cmp EAX, 4
je Block27
cmp EAX, 5
je Block28


 Block4:
	test esi,esi
	jle Block6

 Block5:
	lea eax,[esp+0x30]
	push 0x178C
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x28],2
	mov ebx,1
	jmp Block7

 Block6:
	lea ecx,[esp+0x34]
	push 0x178D
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x28],3
	mov ebx,2

 Block7:
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea edx,[esp+0x44]
	push edx
	mov dword ptr [esp+0x1C],ebx
	call ZXString<char>::Format
	add esp,0xC
	mov dword ptr [esp+0x28],2
	test bl,2
	je Block10

 Block8:
	mov eax,dword ptr [esp+0x34]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x10],ebx
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block10:
	mov dword ptr [esp+0x28],1
	test bl,1
	je Block16

 Block11:
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block16

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block16

 Block13:
	push esi
	push offset _S_D__5
	lea eax,[esp+0x44]
	push eax
	jmp Block15

 Block14:
	push esi
	push offset _S_D__4
	lea ecx,[esp+0x44]
	push ecx

 Block15:
	call ZXString<char>::Format
	add esp,0xC

 Block16:
	push 0x3E9
	push 1
	push ecx
	mov ecx,esp
	lea edx,[esp+0x48]
	mov dword ptr [esp+0x1C],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push ecx
	mov ecx,esp
	lea eax,[esp+0x48]
	mov dword ptr [esp+0x2C],esp
	push eax
	mov byte ptr [esp+0x3C],6
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign
	push 0x17
	push 0x15
	mov ecx,edi
	mov byte ptr [esp+0x40],1
	call CUIToolTip::AddInfoEx
	jmp Block30

 Block17:
	test esi,esi
	jle Block19

 Block18:
	lea ecx,[esp+0x18]
	push 0x178C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov byte ptr [esp+0x28],4
	mov ebx,4
	jmp Block20

 Block19:
	lea edx,[esp+0x14]
	push 0x178D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov dword ptr [esp+0x28],5
	mov ebx,8

 Block20:
	mov eax,dword ptr [eax]
	push esi
	push eax
	lea eax,[esp+0x44]
	push eax
	mov dword ptr [esp+0x1C],ebx
	call ZXString<char>::Format
	add esp,0xC
	mov dword ptr [esp+0x28],4
	test bl,8
	je Block23

 Block21:
	mov eax,dword ptr [esp+0x14]
	and ebx,0xFFFFFFF7
	mov dword ptr [esp+0x10],ebx
	test eax,eax
	je Block23

 Block22:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block23:
	mov dword ptr [esp+0x28],1
	test bl,4
	je Block26

 Block24:
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block26:
	push 0x3E9
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	lea edx,[esp+0x44]
	push edx
	push ecx
	lea ecx,[esp+0x48]
	call ZXString<char>::op_add_1
	jmp Block29

 Block27:
	push esi
	lea eax,[esp+0x40]
	push offset _S_D__4
	push eax
	call ZXString<char>::Format
	add esp,0xC
	jmp Block26

 Block28:
	mov eax,dword ptr [esp+0x38]
	push esi
	push eax
	lea ecx,[esp+0x44]
	push ecx
	call ZXString<char>::Format
	add esp,0xC
	push 0x3E9
	push ecx
	mov ecx,esp
	lea edx,[esp+0x44]
	mov dword ptr [esp+0x24],esp
	push edx
	mov dword ptr [ecx],0
	call ZXString<char>::op_assign

 Block29:
	push 0x15
	mov ecx,edi
	call CUIToolTip::AddOptionInfo

 Block30:
	mov eax,dword ptr [esp+0x3C]
	mov byte ptr [esp+0x28],0
	test eax,eax
	je Block32

 Block31:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block32:
	mov eax,dword ptr [esp+0x38]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	test eax,eax
	je Block34

 Block33:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block34:
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	add esp,0x1C
	ret 0x10
}
}
// CUIToolTip::DrawItemIcon
_SUB_EXCEPTION_HANDLER(482050)
__SUB_CLASS_THIS(00482050, __thiscall, 5773,  CUIToolTip, void, long, long, long, int32_t, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_482050
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x24
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x38]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov eax,3
	xor edi,edi
	mov word ptr [esp+0x18],ax
	mov dword ptr [esp+0x20],edi
	mov ecx,dword ptr [ebx+0x10]
	mov dword ptr [esp+0x40],edi
	cmp ecx,edi
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	lea edx,[esp+0x18]
	push edx
	lea eax,[esp+0x18]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x40],1
	cmp esi,edi
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	mov edi,dword ptr [esp+0x4C]
	mov ebp,dword ptr [esp+0x48]
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+0x8C]
	push 0xA0FFFFFF
	push 0x44
	push 0x44
	push edi
	push ebp
	push esi
	call edx
	test eax,eax
	jge Block6

 Block5:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block6:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x40],0
	test eax,eax
	je Block8

 Block7:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block8:
	mov esi,8
	mov dword ptr [esp+0x40],0xFFFFFFFF
	cmp word ptr [esp+0x18],si
	jne Block11

 Block9:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block12

 Block10:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block12

 Block11:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block12:
	mov edx,3
	mov word ptr [esp+0x28],dx
	mov dword ptr [esp+0x30],0
	mov eax,dword ptr [esp+0x58]
	mov ecx,dword ptr [esp+0x54]
	mov edx,dword ptr [esp+0x50]
	push 2
	push 0
	push 0
	push eax
	push 0
	push 1
	push ecx
	mov ecx,dword ptr [ebx+0x10]
	add edi,0x42
	push edi
	add ebp,2
	push ebp
	mov dword ptr [esp+0x64],2
	push edx
	test ecx,ecx
	jne Block14

 Block13:
	push 0x80004003
	call _com_issue_error

 Block14:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x78],esp
	lea edx,[esp+0x54]
	push edx
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::DrawItemIconForSlot
	mov dword ptr [esp+0x40],0xFFFFFFFF
	cmp word ptr [esp+0x28],si
	jne Block17

 Block15:
	xor eax,eax
	mov word ptr [esp+0x28],ax
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block18

 Block16:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block18

 Block17:
	lea ecx,[esp+0x28]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block18:
	mov ecx,dword ptr [esp+0x38]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x30
	ret 0x14
}
}
// CToolTipHelper::~CToolTipHelper
_SUB_EXCEPTION_HANDLER(13C770)
__SUB_CLASS_THIS0(0013C770, __thiscall, 6204,  CToolTipHelper, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_13C770
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	int 3// TODO: 	mov dword ptr [esi],offset CToolTipHelper::`vftable'
	lea ecx,[esi+8]
	mov dword ptr [esp+0x14],0
	int 3// TODO: 	mov dword ptr [ecx],offset ZMap<long, CToolTipHelper::TTH_INFO, long>::`vftable'
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::RemoveAll
	lea ecx,[esi+4]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	call ZArray<CToolTipHelper::TTH_INFO>::RemoveAll
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CUIToolTip::AddInfoEx
_SUB_EXCEPTION_HANDLER(48BAC0)
__SUB_CLASS_THIS(0048BAC0, __thiscall, 5769,  CUIToolTip, void, long, long, NakedParam<ZXString<char>>, NakedParam<ZXString<char>>, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48BAC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ebp,dword ptr [esp+0x4C]
	push ebp
	lea eax,[esp+0x18]
	push eax
	mov dword ptr [esp+0x4C],1
	call CUIToolTip::GetFontByType
	mov ebx,dword ptr [esp+0x50]
	push ebx
	lea ecx,[esp+0x1C]
	push ecx
	mov ecx,esi
	mov byte ptr [esp+0x4C],2
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esi+0x20]
	inc eax
	lea edx,[eax+eax*8]
	lea edi,[esi+edx*4]
	lea eax,[esp+0x54]
	push eax
	lea ecx,[edi+0xC]
	mov byte ptr [esp+0x48],3
	mov dword ptr [edi+8],ebp
	mov dword ptr [edi+0x18],ebx
	call ZXString<char>::op_assign
	lea ecx,[esp+0x58]
	push ecx
	lea ecx,[edi+0x1C]
	call ZXString<char>::op_assign
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x2C]
	push edx
	call ebx
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	lea ecx,[esp+0x1C]
	push ecx
	mov byte ptr [esp+0x48],4
	call ebx
	lea edx,[esp+0x1C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	mov edx,dword ptr [esp+0x54]
	lea eax,[esp+0x2C]
	push eax
	push ecx
	mov dword ptr [esp+0x54],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0x50],5
	call _xbstr_t::_ctor_0
	mov ebp,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x4C],6
	test ebp,ebp
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	mov ecx,ebp
	mov byte ptr [esp+0x4C],5
	call IWzFont::CalcTextWidth
	mov edx,dword ptr [esp+0x58]
	mov dword ptr [esp+0x4C],eax
	lea eax,[esp+0x1C]
	push eax
	push ecx
	mov dword ptr [esp+0x58],esp
	mov ecx,esp
	push edx
	call _xbstr_t::_ctor_0
	mov ebx,dword ptr [esp+0x20]
	mov byte ptr [esp+0x4C],7
	test ebx,ebx
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov ecx,ebx
	mov byte ptr [esp+0x4C],5
	call IWzFont::CalcTextWidth
	mov ecx,dword ptr [esp+0x4C]
	add eax,ecx
	cmp word ptr [esp+0x1C],8
	mov dword ptr [edi],eax
	mov byte ptr [esp+0x44],4
	jne Block11

 Block9:
	mov eax,dword ptr [esp+0x24]
	xor edx,edx
	mov word ptr [esp+0x1C],dx
	test eax,eax
	je Block12

 Block10:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block12

 Block11:
	lea eax,[esp+0x1C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block12:
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0x44],3
	jne Block15

 Block13:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	test eax,eax
	je Block16

 Block14:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block16

 Block15:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block16:
	mov eax,dword ptr [esp+0x5C]
	mov ecx,dword ptr [esp+0x60]
	mov dword ptr [edi+0x20],eax
	mov dword ptr [edi+0x10],ecx
	mov edx,dword ptr [ebx]
	mov ecx,dword ptr [edx+0x14]
	lea eax,[esp+0x4C]
	push eax
	push ebx
	mov dword ptr [esp+0x54],0
	call ecx
	test eax,eax
	jge Block18

 Block17:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ebx
	push eax
	call _com_issue_errorex

 Block18:
	mov edx,dword ptr [ebp]
	mov ecx,dword ptr [edx+0x14]
	mov edi,dword ptr [esp+0x4C]
	lea eax,[esp+0x50]
	push eax
	push ebp
	mov dword ptr [esp+0x58],0
	call ecx
	test eax,eax
	jge Block20

 Block19:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ebp
	push eax
	call _com_issue_errorex

 Block20:
	mov ecx,dword ptr [esp+0x50]
	cmp edi,ecx
	jl Block22

 Block21:
	mov ecx,edi

 Block22:
	mov eax,dword ptr [esi+0x20]
	lea edx,[eax+eax*8]
	mov dword ptr [esi+edx*4+0x28],ecx
	mov eax,dword ptr [esi+0x20]
	inc eax
	lea eax,[eax+eax*8]
	mov eax,dword ptr [esi+eax*4]
	add eax,0x14
	cmp dword ptr [esi+0xC],eax
	jge Block24

 Block23:
	mov dword ptr [esi+0xC],eax

 Block24:
	mov ecx,dword ptr [ebp]
	mov eax,dword ptr [ecx+0x14]
	lea edx,[esp+0x4C]
	push edx
	push ebp
	mov dword ptr [esp+0x54],0
	call eax
	test eax,eax
	jge Block26

 Block25:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ebp
	push eax
	call _com_issue_errorex

 Block26:
	mov ecx,dword ptr [esp+0x4C]
	inc dword ptr [esi+0x20]
	add ecx,4
	add dword ptr [esi+8],ecx
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	push ebx
	mov byte ptr [esp+0x48],2
	call eax
	mov ecx,dword ptr [ebp]
	mov edx,dword ptr [ecx+8]
	push ebp
	mov byte ptr [esp+0x48],1
	call edx
	mov eax,dword ptr [esp+0x54]
	mov byte ptr [esp+0x44],0
	test eax,eax
	je Block28

 Block27:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block28:
	mov eax,dword ptr [esp+0x58]
	mov dword ptr [esp+0x44],0xFFFFFFFF
	test eax,eax
	je Block30

 Block29:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block30:
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret 0x18
}
}
// CUIToolTip::SetToolTip_ItemOption
_SUB_EXCEPTION_HANDLER(491C80)
// 893A68
static uint8_t _SUB_491C80_LOOKUP_TABLE_0[248] = {
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 13, 14, 15, 16, 17, 18, 19, 20, 39, 
39, 21, 22, 23, 24, 25, 26, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 27, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 28, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 29, 39, 39, 39, 39, 30, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 31, 39, 39, 39, 39, 32, 39, 39, 39, 
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 33, 39, 39, 39, 39, 
34, 39, 39, 39, 39, 35, 39, 39, 39, 39, 36, 39, 39, 39, 39, 37, 
39, 39, 39, 39, 38, 141, 73, 0, 
};
// 893BB0
static uint8_t _SUB_491C80_LOOKUP_TABLE_1[252] = {
0, 1, 2, 3, 4, 5, 6, 7, 19, 19, 8, 9, 10, 11, 12, 13, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 15, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
16, 19, 19, 19, 19, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 144, 
};
// 893E64
static uint8_t _SUB_491C80_LOOKUP_TABLE_4[246] = {
0, 6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6, 2, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 4, 5, 
};
// 893CC8
static uint8_t _SUB_491C80_LOOKUP_TABLE_2[56] = {
0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 6, 6, 6, 
6, 4, 6, 6, 6, 6, 5, 144, 
};
// 893D4C
static uint8_t _SUB_491C80_LOOKUP_TABLE_3[252] = {
0, 1, 2, 3, 4, 5, 6, 18, 18, 7, 8, 9, 10, 11, 12, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
15, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 139, 255, 
};
__SUB_CLASS_THIS(00491C80, __thiscall, 5755,  CUIToolTip, void, long, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_491C80
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x64
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x74]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ebp,dword ptr [esp+0x84]
	mov ecx,dword ptr [TSingleton<CItemOptionInfo>::ms_pInstance]
	push ebp
	lea eax,[esp+0x70]
	push eax
	call CItemOptionInfo::GetItemOption
	mov eax,dword ptr [esp+0x70]
	mov dword ptr [esp+0x7C],0
	test eax,eax
	je Block240

 Block1:
	mov esi,dword ptr [esp+0x88]
	imul esi,0xE0
	add esi,dword ptr [eax+0xC]
	mov dword ptr [esp+0x84],0
	cmp ebp,0x385
	mov byte ptr [esp+0x7C],1
	jg Block23

 Block2:
	je Block18

 Block3:
	lea eax,[ebp-1]
	cmp eax,0xD
	ja Block227

 Block4:
	cmp EAX, 0
je Block5
cmp EAX, 1
je Block52
cmp EAX, 2
je Block6
cmp EAX, 3
je Block7
cmp EAX, 4
je Block8
cmp EAX, 5
je Block9
cmp EAX, 6
je Block10
cmp EAX, 7
je Block11
cmp EAX, 8
je Block12
cmp EAX, 9
je Block13
cmp EAX, 10
je Block14
cmp EAX, 11
je Block15
cmp EAX, 12
je Block16
cmp EAX, 13
je Block17


 Block5:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A61
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+8]
	push edx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block6:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A42
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x10]
	push eax
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block7:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x14]
	push edx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block8:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A3F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x20]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block9:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x24]
	push eax
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block10:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x2A6
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x28]
	push edx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block11:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x2A7
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x2C]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block12:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x2A9
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x30]
	push eax
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block13:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x2AA
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x34]
	push edx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block14:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x2A2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x38]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block15:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x2A3
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x3C]
	push eax
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block16:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x2A4
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x40]
	push edx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block17:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x2A5
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x44]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block18:
	cmp dword ptr [esi],0
	jle Block234

 Block19:
	cmp dword ptr [esi+4],0
	jle Block234

 Block20:
	lea edx,[esp+0x88]
	push 0x16BE
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+4]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x98]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block22:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block23:
	cmp ebp,0x2711
	jg Block48

 Block24:
	je Block47

 Block25:
	lea eax,[ebp-0x386]
	cmp eax,3
	ja Block227

 Block26:
	cmp EAX, 0
je Block27
cmp EAX, 1
je Block32
cmp EAX, 2
je Block37
cmp EAX, 3
je Block42


 Block27:
	cmp dword ptr [esi],0
	jle Block234

 Block28:
	cmp dword ptr [esi+4],0
	jle Block234

 Block29:
	lea eax,[esp+0x10]
	push 0x16BF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+4]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x20]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block31

 Block30:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block31:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block32:
	cmp dword ptr [esi],0
	jle Block234

 Block33:
	cmp dword ptr [esi+4],0
	jle Block234

 Block34:
	lea eax,[esp+0x14]
	push 0x16C0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+4]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],4
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block36

 Block35:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block36:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block37:
	cmp dword ptr [esi],0
	jle Block234

 Block38:
	cmp dword ptr [esi+4],0
	jle Block234

 Block39:
	lea eax,[esp+0x18]
	push 0x16C1
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+4]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],5
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block41

 Block40:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block41:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block42:
	cmp dword ptr [esi],0
	jle Block234

 Block43:
	cmp dword ptr [esi+4],0
	jle Block234

 Block44:
	lea eax,[esp+0x1C]
	push 0x16C2
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+4]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],6
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block46

 Block45:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block46:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block47:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A61
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+8]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block48:
	cmp ebp,0x2833
	jg Block112

 Block49:
	je Block111

 Block50:
	lea eax,[ebp-0x2712]
	cmp eax,0xF4
	ja Block227

 Block51:
	movzx edx,byte ptr [eax+_SUB_491C80_LOOKUP_TABLE_0]
	cmp EDX, 0
je Block52
cmp EDX, 1
je Block6
cmp EDX, 2
je Block7
cmp EDX, 3
je Block8
cmp EDX, 4
je Block9
cmp EDX, 5
je Block10
cmp EDX, 6
je Block11
cmp EDX, 7
je Block12
cmp EDX, 8
je Block13
cmp EDX, 9
je Block14
cmp EDX, 10
je Block15
cmp EDX, 11
je Block16
cmp EDX, 12
je Block17
cmp EDX, 13
je Block53
cmp EDX, 14
je Block54
cmp EDX, 15
je Block55
cmp EDX, 16
je Block56
cmp EDX, 17
je Block57
cmp EDX, 18
je Block58
cmp EDX, 19
je Block59
cmp EDX, 20
je Block60
cmp EDX, 21
je Block61
cmp EDX, 22
je Block62
cmp EDX, 23
je Block63
cmp EDX, 24
je Block64
cmp EDX, 25
je Block65
cmp EDX, 26
je Block66
cmp EDX, 27
je Block67
cmp EDX, 28
je Block68
cmp EDX, 29
je Block69
cmp EDX, 30
je Block70
cmp EDX, 31
je Block71
cmp EDX, 32
je Block76
cmp EDX, 33
je Block81
cmp EDX, 34
je Block86
cmp EDX, 35
je Block91
cmp EDX, 36
je Block96
cmp EDX, 37
je Block101
cmp EDX, 38
je Block106
cmp EDX, 39
je Block227


 Block52:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A31
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block53:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A61
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x48]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block54:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A31
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x4C]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block55:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A42
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x50]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block56:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4A
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x54]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block57:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A3F
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x58]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block58:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x5C]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block59:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x170F
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x60]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block60:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1718
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x64]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block61:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x171F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x68]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block62:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x171D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x6C]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block63:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1720
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x70]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block64:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x171E
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x74]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block65:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1715
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x78]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block66:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1716
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x7C]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block67:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1717
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xAC]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block68:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A23
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+8]
	push eax
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block69:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1722
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x8C]
	push edx
	push 5
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block70:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1726
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x90]
	push ecx
	push 5
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block71:
	cmp dword ptr [esi],0
	jle Block234

 Block72:
	cmp dword ptr [esi+0x18],0
	jle Block234

 Block73:
	lea edx,[esp+0x20]
	push 0x1724
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x18]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],7
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block75

 Block74:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block75:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block76:
	cmp dword ptr [esi],0
	jle Block234

 Block77:
	cmp dword ptr [esi+0x1C],0
	jle Block234

 Block78:
	lea eax,[esp+0x24]
	push 0x1727
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x1C]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],8
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x34]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block80

 Block79:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block80:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block81:
	cmp dword ptr [esi],0
	jle Block234

 Block82:
	cmp dword ptr [esi+0xC0],0
	jle Block234

 Block83:
	lea eax,[esp+0x28]
	push 0x1721
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC0]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],9
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block85

 Block84:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block85:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block86:
	cmp dword ptr [esi],0
	jle Block234

 Block87:
	cmp dword ptr [esi+0xC0],0
	jle Block234

 Block88:
	lea eax,[esp+0x2C]
	push 0x172C
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC0]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0xA
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x3C]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block90

 Block89:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block90:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block91:
	cmp dword ptr [esi],0
	jle Block234

 Block92:
	cmp dword ptr [esi+0xC0],0
	jle Block234

 Block93:
	lea eax,[esp+0x30]
	push 0x172A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC0]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0xB
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x40]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block95

 Block94:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block95:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block96:
	cmp dword ptr [esi],0
	jle Block234

 Block97:
	cmp dword ptr [esi+0xC0],0
	jle Block234

 Block98:
	lea eax,[esp+0x34]
	push 0x1713
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC0]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0xC
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x44]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block100

 Block99:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block100:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block101:
	cmp dword ptr [esi],0
	jle Block234

 Block102:
	cmp dword ptr [esi+0xC0],0
	jle Block234

 Block103:
	lea eax,[esp+0x38]
	push 0x1719
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC0]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0xD
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x48]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block105

 Block104:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block105:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block106:
	cmp dword ptr [esi],0
	jle Block234

 Block107:
	cmp dword ptr [esi+0xC0],0
	jle Block234

 Block108:
	lea eax,[esp+0x3C]
	push 0x1729
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xC0]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0xE
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x4C]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block110

 Block109:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block110:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block111:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A43
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xA0]
	push ecx
	push 5
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block112:
	cmp ebp,0x4F7F
	jg Block148

 Block113:
	je Block143

 Block114:
	lea eax,[ebp-0x4E49]
	cmp eax,0xFA
	ja Block227

 Block115:
	movzx edx,byte ptr [eax+_SUB_491C80_LOOKUP_TABLE_1]
	cmp EDX, 0
je Block116
cmp EDX, 1
je Block118
cmp EDX, 2
je Block119
cmp EDX, 3
je Block120
cmp EDX, 4
je Block121
cmp EDX, 5
je Block122
cmp EDX, 6
je Block123
cmp EDX, 7
je Block124
cmp EDX, 8
je Block125
cmp EDX, 9
je Block126
cmp EDX, 10
je Block127
cmp EDX, 11
je Block128
cmp EDX, 12
je Block129
cmp EDX, 13
je Block130
cmp EDX, 14
je Block131
cmp EDX, 15
je Block132
cmp EDX, 16
je Block133
cmp EDX, 17
je Block138
cmp EDX, 18
je Block111
cmp EDX, 19
je Block227


 Block116:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A61

 Block117:
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x48]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block118:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A31
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x4C]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block119:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A42
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x50]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block120:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4A
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x54]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block121:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A3F
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x58]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block122:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4D
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x5C]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block123:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x170F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x60]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block124:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1718
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x64]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block125:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x171F
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x68]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block126:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x171D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x6C]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block127:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1720
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x70]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block128:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x171E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x74]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block129:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1715
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x78]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block130:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1716
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x7C]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block131:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1717
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0xAC]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block132:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A23
	jmp Block117

 Block133:
	cmp dword ptr [esi],0
	jle Block234

 Block134:
	cmp dword ptr [esi+0x18],0
	jle Block234

 Block135:
	lea edx,[esp+0x40]
	push 0x1724
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x18]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0xF
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x50]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block137

 Block136:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block137:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block138:
	cmp dword ptr [esi],0
	jle Block234

 Block139:
	cmp dword ptr [esi+0x1C],0
	jle Block234

 Block140:
	lea eax,[esp+0x44]
	push 0x1727
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x1C]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0x10
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x54]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block142

 Block141:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block142:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block143:
	cmp dword ptr [esi],0
	jle Block234

 Block144:
	cmp dword ptr [esi+0xA4],0
	jle Block234

 Block145:
	lea edx,[esp+0x48]
	push 0x171A
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xA4]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0x11
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x58]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block147

 Block146:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block147:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block148:
	cmp ebp,0x7559
	jg Block174

 Block149:
	je Block116

 Block150:
	lea eax,[ebp-0x4F80]
	cmp eax,0x36
	ja Block227

 Block151:
	movzx eax,byte ptr [eax+_SUB_491C80_LOOKUP_TABLE_2]
	cmp EAX, 0
je Block152
cmp EAX, 1
je Block157
cmp EAX, 2
je Block162
cmp EAX, 3
je Block163
cmp EAX, 4
je Block164
cmp EAX, 5
je Block169
cmp EAX, 6
je Block227


 Block152:
	cmp dword ptr [esi],0
	jle Block234

 Block153:
	cmp dword ptr [esi+0xA4],0
	jle Block234

 Block154:
	lea ecx,[esp+0x4C]
	push 0x171A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0xA4]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push edx
	push ecx
	push eax
	lea edx,[esp+0x90]
	push edx
	mov byte ptr [esp+0x8C],0x12
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x5C]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block156

 Block155:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block156:
	push 0x3E9
	push ecx
	lea eax,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push eax
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block157:
	cmp dword ptr [esi],0
	jle Block234

 Block158:
	cmp dword ptr [esi+0xA4],0
	jle Block234

 Block159:
	lea ecx,[esp+0x50]
	push 0x171A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0xA4]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push edx
	push ecx
	push eax
	lea edx,[esp+0x90]
	push edx
	mov byte ptr [esp+0x8C],0x13
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x60]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block161

 Block160:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block161:
	push 0x3E9
	push ecx
	lea eax,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push eax
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block162:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x171C
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+4]
	push edx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block163:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x172B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+4]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block164:
	cmp dword ptr [esi],0
	jle Block234

 Block165:
	cmp dword ptr [esi+0x18],0
	jle Block234

 Block166:
	lea edx,[esp+0x54]
	push 0x1725
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x18]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0x14
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x64]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block168

 Block167:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block168:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block169:
	cmp dword ptr [esi],0
	jle Block234

 Block170:
	cmp dword ptr [esi+0x1C],0
	jle Block234

 Block171:
	lea eax,[esp+0x58]
	push 0x1728
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x1C]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0x15
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x68]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block173

 Block172:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block173:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block174:
	cmp ebp,0x7694
	jg Block201

 Block175:
	je Block196

 Block176:
	lea eax,[ebp-0x755A]
	cmp eax,0xF9
	ja Block227

 Block177:
	movzx edx,byte ptr [eax+_SUB_491C80_LOOKUP_TABLE_3]
	cmp EDX, 0
je Block178
cmp EDX, 1
je Block179
cmp EDX, 2
je Block180
cmp EDX, 3
je Block181
cmp EDX, 4
je Block182
cmp EDX, 5
je Block183
cmp EDX, 6
je Block184
cmp EDX, 7
je Block185
cmp EDX, 8
je Block186
cmp EDX, 9
je Block187
cmp EDX, 10
je Block188
cmp EDX, 11
je Block189
cmp EDX, 12
je Block190
cmp EDX, 13
je Block191
cmp EDX, 14
je Block192
cmp EDX, 15
je Block193
cmp EDX, 16
je Block194
cmp EDX, 17
je Block195
cmp EDX, 18
je Block227


 Block178:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A31
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x4C]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block179:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A42
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x50]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block180:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x54]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block181:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A3F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x58]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block182:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A4D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x5C]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block183:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x170F
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x60]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block184:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1718
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x64]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block185:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x171F
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x68]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block186:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x171D
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x6C]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block187:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1720
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x70]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block188:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x171E
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x74]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block189:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1715
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x78]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block190:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1716
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x7C]
	push ecx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block191:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1717
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0xAC]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block192:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A23
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0x48]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block193:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1710
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x88]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block194:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1710
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0x88]
	push eax
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block195:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1A43
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0xA0]
	push edx
	push 5
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block196:
	cmp dword ptr [esi],0
	jle Block234

 Block197:
	cmp dword ptr [esi+0xA8],0
	jle Block234

 Block198:
	lea eax,[esp+0x5C]
	push 0x1A18
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0xA8]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0x16
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x6C]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block200

 Block199:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block200:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block201:
	cmp ebp,0x77ED
	jg Block219

 Block202:
	je Block218

 Block203:
	lea eax,[ebp-0x7695]
	cmp eax,0xF5
	ja Block227

 Block204:
	movzx eax,byte ptr [eax+_SUB_491C80_LOOKUP_TABLE_4]
	cmp EAX, 0
je Block205
cmp EAX, 1
je Block162
cmp EAX, 2
je Block210
cmp EAX, 3
je Block215
cmp EAX, 4
je Block216
cmp EAX, 5
je Block217
cmp EAX, 6
je Block227


 Block205:
	cmp dword ptr [esi],0
	jle Block234

 Block206:
	cmp dword ptr [esi+0xA8],0
	jle Block234

 Block207:
	lea ecx,[esp+0x60]
	push 0x1A18
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0xA8]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push edx
	push ecx
	push eax
	lea edx,[esp+0x90]
	push edx
	mov byte ptr [esp+0x8C],0x17
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x70]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block209

 Block208:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block209:
	push 0x3E9
	push ecx
	lea eax,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push eax
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block210:
	cmp dword ptr [esi],0
	jle Block234

 Block211:
	cmp dword ptr [esi+4],0
	jle Block234

 Block212:
	lea eax,[esp+0x64]
	push 0x171B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+4]
	mov edx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x90]
	push eax
	mov byte ptr [esp+0x8C],0x18
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x74]
	add esp,0x10
	mov byte ptr [esp+0x7C],1
	test eax,eax
	je Block214

 Block213:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block214:
	push 0x3E9
	push ecx
	lea edx,[esp+0x8C]
	mov ecx,esp
	mov dword ptr [esp+0x70],esp
	push edx
	call ZXString<char>::_ctor_copy
	push 0xA
	jmp Block233

 Block215:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1723
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x94]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block216:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1714
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi+0xAC]
	push eax
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block217:
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1714
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esi+0xAC]
	push edx
	push 4
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block218:
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x1711
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi]
	push ecx
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block219:
	cmp ebp,0x7919
	jg Block224

 Block220:
	je Block223

 Block221:
	cmp ebp,0x77EE
	jne Block227

 Block222:
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1711
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [esi]
	push eax
	push 3
	mov ecx,edi
	call CUIToolTip::PrintValue
	jmp Block234

 Block223:
	push 0x3E9
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x172D
	push ecx
	jmp Block232

 Block224:
	sub ebp,0x791A
	je Block230

 Block225:
	sub ebp,1
	je Block229

 Block226:
	sub ebp,1
	je Block228

 Block227:
	push 0x3E9
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x16F6
	jmp Block231

 Block228:
	push 0x3E9
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x90],esp
	push 0x172E
	push eax
	jmp Block232

 Block229:
	push 0x3E9
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x90],esp
	push 0x1730
	push ecx
	jmp Block232

 Block230:
	push 0x3E9
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x90],esp
	push 0x172F

 Block231:
	push edx

 Block232:
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0x15

 Block233:
	mov ecx,edi
	call CUIToolTip::AddOptionInfo

 Block234:
	mov eax,dword ptr [esp+0x84]
	mov byte ptr [esp+0x7C],0
	test eax,eax
	je Block236

 Block235:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block236:
	mov esi,dword ptr [esp+0x70]
	mov dword ptr [esp+0x7C],0xFFFFFFFF
	test esi,esi
	je Block240

 Block237:
	add esi,0xFFFFFFF0
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block240

 Block238:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	test esi,esi
	je Block240

 Block239:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,esi
	call edx

 Block240:
	mov ecx,dword ptr [esp+0x74]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x70
	ret 8
}
}
// CUIToolTip::DrawTextSepartedLine
_SUB_EXCEPTION_HANDLER(494A40)
__SUB_CLASS_THIS(00494A40, __thiscall, 5779,  CUIToolTip, long, long, long, long, const char*, NakedParam<_x_com_ptr<IWzFont>>, int32_t, long*, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_494A40
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x34],ebp
	cmp dword ptr [esp+0x50],ebp
	je Block4

 Block1:
	mov eax,3
	mov word ptr [esp+0x1C],ax
	mov dword ptr [esp+0x24],ebp
	mov ecx,dword ptr [ecx+0x10]
	mov byte ptr [esp+0x34],1
	mov dword ptr [esp+0x14],1
	cmp ecx,ebp
	jne Block3

 Block2:
	push 0x80004003
	call _com_issue_error

 Block3:
	lea edx,[esp+0x1C]
	push edx
	lea eax,[esp+0x1C]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov esi,eax
	mov edi,dword ptr [esp+0x50]
	mov dword ptr [esp+0x34],2
	mov ebx,3
	jmp Block5

 Block4:
	xor edi,edi
	mov dword ptr [esp+0x50],edi
	lea esi,[esp+0x50]
	mov dword ptr [esp+0x34],3
	mov ebx,4

 Block5:
	mov ecx,dword ptr [esp+0x58]
	mov edx,dword ptr [esp+0x54]
	push ecx
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x64],esp
	push 9
	push eax
	mov dword ptr [esp+0x28],ebx
	call get_basic_font
	mov ecx,dword ptr [esp+0x60]
	add esp,4
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [esp+0x5C]
	mov dword ptr [esp+0x68],esp
	cmp eax,ebp
	je Block7

 Block6:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block7:
	mov ecx,dword ptr [esp+0x58]
	mov edx,dword ptr [esp+0x54]
	mov eax,dword ptr [esp+0x50]
	push ecx
	mov ecx,dword ptr [esp+0x50]
	push 4
	push edx
	push eax
	mov eax,dword ptr [esi]
	push ecx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x80],esp
	mov dword ptr [ecx],eax
	cmp eax,ebp
	je Block9

 Block8:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block9:
	call DrawTextSepartedLine
	add esp,0x28
	mov esi,eax
	mov dword ptr [esp+0x34],2
	test bl,4
	je Block12

 Block10:
	and ebx,0xFFFFFFFB
	mov dword ptr [esp+0x14],ebx
	cmp edi,ebp
	je Block12

 Block11:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block12:
	mov dword ptr [esp+0x34],1
	test bl,2
	je Block15

 Block13:
	mov eax,dword ptr [esp+0x18]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x14],ebx
	cmp eax,ebp
	je Block15

 Block14:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block15:
	mov dword ptr [esp+0x34],ebp
	test bl,1
	je Block20

 Block16:
	cmp word ptr [esp+0x1C],8
	jne Block19

 Block17:
	xor eax,eax
	mov word ptr [esp+0x1C],ax
	mov eax,dword ptr [esp+0x24]
	cmp eax,ebp
	je Block20

 Block18:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block20

 Block19:
	lea ecx,[esp+0x1C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block20:
	mov eax,dword ptr [esp+0x4C]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebp
	je Block22

 Block21:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block22:
	mov eax,esi
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 0x20
}
}
// CUIToolTip::AddInfo
_SUB_EXCEPTION_HANDLER(49E620)
__SUB_CLASS_THIS(0049E620, __thiscall, 5762,  CUIToolTip, void, long, NakedParam<ZXString<char>>, int32_t, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_49E620
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x28
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x3C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x4C]
	push eax
	lea ecx,[esp+0x18]
	xor ebx,ebx
	push ecx
	mov ecx,esi
	mov dword ptr [esp+0x4C],ebx
	call CUIToolTip::GetFontByType
	mov byte ptr [esp+0x44],1

 Block1:
	mov eax,dword ptr [esi+0x20]
	inc eax
	push 0
	lea edx,[eax+eax*8]
	mov eax,dword ptr [esp+0x50]
	push ebx
	lea edi,[esi+edx*4]
	push offset _S_N
	lea ecx,[esp+0x5C]
	mov dword ptr [edi+8],eax
	call ZXString<char>::Find__0
	mov ebp,eax
	push ebp
	push ebx
	lea ecx,[esp+0x24]
	push ecx
	lea ecx,[esp+0x5C]
	mov dword ptr [esp+0x2C],ebp
	call ZXString<char>::Substring
	lea ebx,[edi+0xC]
	push eax
	mov ecx,ebx
	mov byte ptr [esp+0x48],2
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x44],1
	test eax,eax
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block3:
	lea edx,[esp+0x2C]
	add ebp,2
	push edx
	mov dword ptr [esp+0x28],ebp
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block18

 Block4:
	mov eax,dword ptr [ebx]
	lea ecx,[esp+0x2C]
	push ecx
	push ecx
	mov dword ptr [esp+0x30],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x50],3
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x4C],4
	test ecx,ecx
	je Block19

 Block5:
	mov byte ptr [esp+0x4C],3
	call IWzFont::CalcTextWidth
	add dword ptr [edi],eax
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0x44],1
	jne Block8

 Block6:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block9

 Block7:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block9

 Block8:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block9:
	mov ecx,dword ptr [esp+0x58]
	mov edx,dword ptr [esp+0x5C]
	push 0
	push offset _S_
	push 0
	mov dword ptr [edi+0x10],ecx
	lea ebp,[edi+0x1C]
	push 0
	mov ecx,ebp
	mov dword ptr [edi+0x14],edx
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push 0
	mov ecx,ebp
	call ZXString<char>::ReleaseBuffer
	mov dword ptr [edi+0x18],0
	mov eax,dword ptr [ebp]
	test eax,eax
	je Block11

 Block10:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [ebp],0

 Block11:
	cmp dword ptr [edi+0x14],0
	mov eax,dword ptr [esp+0x54]
	mov dword ptr [edi+0x20],eax
	je Block13

 Block12:
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x38],esp
	push 0xA
	push ecx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ebx,dword ptr [ebx]
	mov edx,dword ptr [esi+0xC]
	push ebx
	push 0
	sub edx,0x14
	push edx
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	mov ecx,dword ptr [esi+0x20]
	mov edi,dword ptr [esp+0x14]
	lea ecx,[ecx+ecx*8]
	mov dword ptr [esi+ecx*4+0x28],eax
	jmp Block16

 Block13:
	mov edi,dword ptr [esp+0x14]
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0x14]
	lea eax,[esp+0x18]
	push eax
	push edi
	mov dword ptr [esp+0x20],0
	call ecx
	test eax,eax
	jge Block15

 Block14:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push edi
	push eax
	call _com_issue_errorex

 Block15:
	mov eax,dword ptr [esi+0x20]
	lea edx,[eax+eax*8]
	mov eax,dword ptr [esp+0x18]
	mov dword ptr [esi+edx*4+0x28],eax

 Block16:
	mov eax,dword ptr [esi+0x20]
	lea ecx,[eax+eax*8]
	mov edx,dword ptr [esi+ecx*4+0x28]
	add edx,4
	add dword ptr [esi+8],edx
	inc eax
	or ebx,0xFFFFFFFF
	mov dword ptr [esi+0x20],eax
	cmp dword ptr [esp+0x20],ebx
	je Block20

 Block17:
	mov ebx,dword ptr [esp+0x24]
	jmp Block1

 Block18:
	push eax
	call _com_issue_error

 Block19:
	push 0x80004003
	call _com_issue_error

 Block20:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov byte ptr [esp+0x48],0
	call ecx
	mov eax,dword ptr [esp+0x50]
	mov dword ptr [esp+0x44],ebx
	test eax,eax
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block22:
	mov ecx,dword ptr [esp+0x3C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x34
	ret 0x14
}
}
// CToolTipHelper::LoadToolTip
_SUB_EXCEPTION_HANDLER(494C00)
__SUB_CLASS_THIS(00494C00, __thiscall, 6207,  CToolTipHelper, void, const wchar_t*) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x74]
	sub esp,0x74
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_494C00
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x40
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x70],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	lea ebx,[ecx+4]
	mov ecx,ebx
	mov dword ptr [ebp+0x64],ebx
	call ZArray<CToolTipHelper::TTH_INFO>::RemoveAll
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp+0x30]
	push eax
	call edi
	lea ecx,[ebp+0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	xor esi,esi
	add esp,8
	cmp eax,esi
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	lea edx,[ebp+0x20]
	push edx
	mov dword ptr [ebp-4],esi
	call edi
	lea eax,[ebp+0x20]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	mov eax,dword ptr [ebp+0x7C]
	push esi
	push esi
	lea ecx,[ebp+0x30]
	push ecx
	lea edx,[ebp+0x20]
	push edx
	push ecx
	mov dword ptr [ebp+0x5C],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],1
	call _xbstr_t::_ctor_1
	mov byte ptr [ebp-4],2
	cmp dword ptr [_D_G_RM],esi
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	lea ecx,[ebp-0x3C]
	push ecx
	mov byte ptr [ebp-4],1
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],3
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp+0x58]
	mov dword ptr [ebp+0x58],esi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,esi
	jge Block9

 Block7:
	cmp eax,0x80004002
	je Block9

 Block8:
	push eax
	call _com_issue_error

 Block9:
	mov edi,8
	mov byte ptr [ebp-4],5
	cmp word ptr [ebp-0x3C],di
	jne Block12

 Block10:
	mov eax,dword ptr [ebp-0x34]
	xor edx,edx
	mov word ptr [ebp-0x3C],dx
	cmp eax,esi
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea eax,[ebp-0x3C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block13:
	mov byte ptr [ebp-4],6
	cmp word ptr [ebp+0x20],di
	jne Block16

 Block14:
	mov eax,dword ptr [ebp+0x28]
	xor ecx,ecx
	mov word ptr [ebp+0x20],cx
	cmp eax,esi
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea edx,[ebp+0x20]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block17:
	mov byte ptr [ebp-4],7
	cmp word ptr [ebp+0x30],di
	jne Block20

 Block18:
	xor eax,eax
	mov word ptr [ebp+0x30],ax
	mov eax,dword ptr [ebp+0x38]
	cmp eax,esi
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea ecx,[ebp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block21:
	mov edi,dword ptr [ebp+0x58]
	cmp edi,esi
	sete al
	test al,al
	je Block24

 Block22:
	mov dword ptr [ebp-4],0xFFFFFFFF
	cmp edi,esi
	je Block80

 Block23:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	push edi
	call eax
	jmp Block80

 Block24:
	cmp edi,esi
	jne Block26

 Block25:
	push 0x80004003
	call _com_issue_error

 Block26:
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0x20]
	lea edx,[ebp+0x60]
	push edx
	push edi
	mov dword ptr [ebp+0x60],esi
	call eax
	cmp eax,esi
	jge Block28

 Block27:
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push edi
	push eax
	call _com_issue_errorex

 Block28:
	mov edx,dword ptr [ebp+0x60]
	lea ecx,[ebp+0x57]
	push ecx
	push edx
	mov ecx,ebx
	call ZArray<CToolTipHelper::TTH_INFO>::_Alloc
	xor ebx,ebx
	mov dword ptr [ebp+0x60],ebx
	mov dword ptr [ebp+0x68],esi

 Block29:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x20]
	lea ecx,[ebp+0x6C]
	push ecx
	push edi
	mov dword ptr [ebp+0x6C],esi
	call edx
	cmp eax,esi
	jge Block31

 Block30:
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push edi
	push eax
	call _com_issue_errorex

 Block31:
	cmp ebx,dword ptr [ebp+0x6C]
	jae Block79

 Block32:
	mov eax,0x20
	call __chkstk
	mov eax,esp
	push esi
	push esi
	push 0xA
	push eax
	push ebx
	call __itow
	add esp,8
	mov dword ptr [ebp+0x5C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	lea eax,[ebp-0x1C]
	mov byte ptr [ebp-4],8
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],7
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],9
	call Ztl_variant_t::GetUnknown
	xor edi,edi
	mov dword ptr [ebp+0x40],edi
	cmp eax,esi
	je Block35

 Block33:
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x4C]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	xor ecx,ecx
	cmp eax,esi
	setl cl
	dec ecx
	and ecx,dword ptr [ebp+0x4C]
	cmp eax,esi
	mov edi,ecx
	mov dword ptr [ebp+0x40],edi
	jge Block35

 Block34:
	cmp eax,0x80004002
	jne Block1

 Block35:
	cmp word ptr [ebp-0x1C],8
	mov byte ptr [ebp-4],0xB
	jne Block38

 Block36:
	mov eax,dword ptr [ebp-0x14]
	xor edx,edx
	mov word ptr [ebp-0x1C],dx
	cmp eax,esi
	je Block39

 Block37:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block39

 Block38:
	lea eax,[ebp-0x1C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block39:
	push esi
	push esi
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x5C],esp
	push 0x1ABE
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [ebp-4],0xC
	cmp edi,esi
	je Block5

 Block40:
	lea edx,[ebp+0x10]
	push edx
	mov ecx,edi
	mov byte ptr [ebp-4],0xB
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xD
	call Ztl_variant_t::GetUnknown
	xor ebx,ebx
	mov dword ptr [ebp+0x50],ebx
	cmp eax,esi
	je Block43

 Block41:
	mov ecx,dword ptr [eax]
	lea edx,[ebp+0x44]
	push edx
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push eax
	mov eax,dword ptr [ecx]
	call eax
	cmp eax,esi
	setl bl
	dec ebx
	and ebx,dword ptr [ebp+0x44]
	cmp eax,esi
	mov dword ptr [ebp+0x50],ebx
	jge Block43

 Block42:
	cmp eax,0x80004002
	jne Block1

 Block43:
	cmp word ptr [ebp+0x10],8
	mov byte ptr [ebp-4],0xF
	jne Block46

 Block44:
	mov eax,dword ptr [ebp+0x18]
	xor ecx,ecx
	mov word ptr [ebp+0x10],cx
	cmp eax,esi
	je Block47

 Block45:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block47

 Block46:
	lea edx,[ebp+0x10]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block47:
	push esi
	push esi
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x5C],esp
	push 0x1ACB
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea ecx,[ebp]
	push ecx
	mov byte ptr [ebp-4],0x10
	mov ecx,edi
	mov byte ptr [ebp-4],0xF
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x11
	call Ztl_variant_t::GetUnknown
	mov dword ptr [ebp+0x5C],esi
	test eax,eax
	je Block50

 Block48:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx]
	lea ecx,[ebp+0x48]
	push ecx
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push eax
	call edx
	xor ecx,ecx
	test eax,eax
	setl cl
	dec ecx
	and ecx,dword ptr [ebp+0x48]
	mov esi,ecx
	mov dword ptr [ebp+0x5C],esi
	test eax,eax
	jge Block50

 Block49:
	cmp eax,0x80004002
	jne Block1

 Block50:
	cmp word ptr [ebp],8
	mov byte ptr [ebp-4],0x13
	jne Block53

 Block51:
	mov eax,dword ptr [ebp+8]
	xor edx,edx
	mov word ptr [ebp],dx
	test eax,eax
	je Block54

 Block52:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block54

 Block53:
	lea eax,[ebp]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block54:
	test ebx,ebx
	je Block5

 Block55:
	mov ecx,dword ptr [ebx]
	mov eax,dword ptr [ecx+0x20]
	lea edx,[ebp+0x6C]
	push edx
	push ebx
	mov dword ptr [ebp+0x6C],0
	call eax
	test eax,eax
	jge Block57

 Block56:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push ebx
	push eax
	call _com_issue_errorex

 Block57:
	mov ecx,dword ptr [ebp+0x64]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [ebp+0x6C]
	mov ecx,dword ptr [ebp+0x68]
	mov dword ptr [ecx+edx],eax
	mov edx,dword ptr [ebx]
	mov ecx,dword ptr [edx+0x28]
	lea eax,[ebp+0x6C]
	push eax
	push ebx
	mov dword ptr [ebp+0x6C],0
	call ecx
	test eax,eax
	jge Block59

 Block58:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push ebx
	push eax
	call _com_issue_errorex

 Block59:
	mov edx,dword ptr [ebp+0x64]
	mov eax,dword ptr [edx]
	mov ecx,dword ptr [ebp+0x6C]
	mov edx,dword ptr [ebp+0x68]
	mov dword ptr [edx+eax+4],ecx
	test esi,esi
	je Block5

 Block60:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x20]
	lea ecx,[ebp+0x6C]
	push ecx
	push esi
	mov dword ptr [ebp+0x6C],0
	call edx
	test eax,eax
	jge Block62

 Block61:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block62:
	mov eax,dword ptr [ebp+0x64]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ebp+0x6C]
	mov eax,dword ptr [ebp+0x68]
	mov dword ptr [eax+ecx+8],edx
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x28]
	lea edx,[ebp+0x6C]
	push edx
	push esi
	mov dword ptr [ebp+0x6C],0
	call eax
	test eax,eax
	jge Block64

 Block63:
	push offset __GUID_4cfb57c7_eae3_40b3_ac98_4b2750e3642a
	push esi
	push eax
	call _com_issue_errorex

 Block64:
	mov ecx,dword ptr [ebp+0x64]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp+0x68]
	mov eax,dword ptr [ebp+0x6C]
	push ecx
	mov dword ptr [ecx+edx+0xC],eax
	mov edx,esp
	mov dword ptr [ebp+0x6C],esp
	push 0x1A70
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[ebp-0x2C]
	mov byte ptr [ebp-4],0x14
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],0x13
	call IWzProperty::Getitem
	cmp word ptr [eax],8
	mov byte ptr [ebp-4],0x15
	jne Block66

 Block65:
	mov eax,dword ptr [eax+8]
	jmp Block67

 Block66:
	mov eax,offset _S___3

 Block67:
	mov ecx,dword ptr [ebp+0x64]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp+0x68]
	push 0xFFFFFFFF
	lea ecx,[ecx+edx+0x10]
	push eax
	call ZXString<char>::AssignWideStr
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],0x13
	jne Block70

 Block68:
	mov eax,dword ptr [ebp-0x24]
	xor edx,edx
	mov word ptr [ebp-0x2C],dx
	test eax,eax
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea eax,[ebp-0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block71:
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x6C],esp
	push 0x5D3
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea edx,[ebp-0x4C]
	mov byte ptr [ebp-4],0x16
	push edx
	mov ecx,edi
	mov byte ptr [ebp-4],0x13
	call IWzProperty::Getitem
	cmp word ptr [eax],8
	mov byte ptr [ebp-4],0x17
	jne Block73

 Block72:
	mov eax,dword ptr [eax+8]
	jmp Block74

 Block73:
	mov eax,offset _S___3

 Block74:
	mov ecx,dword ptr [ebp+0x64]
	mov edx,dword ptr [ecx]
	mov ecx,dword ptr [ebp+0x68]
	push 0xFFFFFFFF
	lea ecx,[ecx+edx+0x14]
	push eax
	call ZXString<char>::AssignWideStr
	cmp word ptr [ebp-0x4C],8
	mov byte ptr [ebp-4],0x13
	jne Block77

 Block75:
	mov eax,dword ptr [ebp-0x44]
	xor edx,edx
	mov word ptr [ebp-0x4C],dx
	test eax,eax
	je Block78

 Block76:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block78

 Block77:
	lea eax,[ebp-0x4C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block78:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	mov byte ptr [ebp-4],0xF
	call edx
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	mov byte ptr [ebp-4],0xB
	call ecx
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	push edi
	mov byte ptr [ebp-4],7
	call eax
	inc dword ptr [ebp+0x60]
	add dword ptr [ebp+0x68],0x18
	mov edi,dword ptr [ebp+0x58]
	mov ebx,dword ptr [ebp+0x60]
	xor esi,esi
	jmp Block29

 Block79:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	mov dword ptr [ebp-4],0xFFFFFFFF
	call edx

 Block80:
	lea esp,[ebp-0x5C]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x70]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x74
	mov esp,ebp
	pop ebp
	ret 4
}
}
// CUIToolTip::CUIToolTip
_SUB_EXCEPTION_HANDLER(4839C0)
__SUB_CLASS_THIS0(004839C0, __thiscall, 5683,  CUIToolTip, void) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4839C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x70
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [ebp-0x7C],esi
	xor ebx,ebx
	int 3// TODO: 	mov dword ptr [esi],offset CUIToolTip::`vftable'
	mov dword ptr [esi+0x10],ebx
	mov dword ptr [ebp-4],ebx
	mov dword ptr [esi+0x14],ebx
	push offset CUIToolTip::CLineInfo::~CLineInfo
	push offset CUIToolTip::CLineInfo::_ctor_default
	push 0x20
	push 0x24
	lea eax,[esi+0x24]
	push eax
	mov byte ptr [ebp-4],1
	call __eh_vector_ctor_iterator
	push offset CUIToolTip::CLineInfo::~CLineInfo
	push offset CUIToolTip::CLineInfo::_ctor_default
	push 0x20
	push 0x24
	lea ecx,[esi+0x4AC]
	push ecx
	mov byte ptr [ebp-4],2
	call __eh_vector_ctor_iterator
	lea edi,[esi+0x92C]
	mov dword ptr [edi],ebx
	lea ebx,[esi+0x930]
	mov dword ptr [ebx],0
	mov dword ptr [esi+0x934],0
	mov dword ptr [esi+0x938],0
	mov dword ptr [esi+0x93C],0
	mov dword ptr [esi+0x940],0
	mov dword ptr [esi+0x944],0
	mov dword ptr [esi+0x948],0
	mov dword ptr [esi+0x94C],0
	mov dword ptr [esi+0x950],0
	mov dword ptr [esi+0x954],0
	mov dword ptr [esi+0x958],0
	mov dword ptr [esi+0x95C],0
	mov dword ptr [esi+0x960],0
	mov dword ptr [esi+0x964],0
	mov dword ptr [esi+0x968],0
	mov dword ptr [esi+0x96C],0
	mov dword ptr [esi+0x970],0
	mov dword ptr [esi+0x974],0
	mov dword ptr [esi+0x978],0
	mov dword ptr [esi+0x97C],0
	mov dword ptr [esi+0x980],0
	mov dword ptr [esi+0x984],0
	mov dword ptr [esi+0x988],0
	mov dword ptr [esi+0x98C],0
	mov dword ptr [esi+0x990],0
	mov dword ptr [esi+0x994],0
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push offset _x_com_ptr<IWzCanvas>::_ctor_default
	push 0xC
	lea eax,[esi+0x998]
	push 4
	push eax
	mov byte ptr [ebp-4],0x1E
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0x9C8],0
	mov dword ptr [esi+0x9CC],0
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push offset _x_com_ptr<IWzCanvas>::_ctor_default
	push 0xC
	lea eax,[esi+0x9D0]
	push 4
	push eax
	mov byte ptr [ebp-4],0x21
	call __eh_vector_ctor_iterator
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push offset _x_com_ptr<IWzCanvas>::_ctor_default
	push 3
	lea eax,[esi+0xA00]
	push 4
	push eax
	mov byte ptr [ebp-4],0x22
	call __eh_vector_ctor_iterator
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push offset _x_com_ptr<IWzCanvas>::_ctor_default
	push 8
	lea eax,[esi+0xA0C]
	push 4
	push eax
	mov byte ptr [ebp-4],0x23
	call __eh_vector_ctor_iterator
	mov dword ptr [esi+0xA2C],0
	mov dword ptr [esi+0xA30],0
	push offset _x_com_ptr<IWzCanvas>::~_x_com_ptr<IWzCanvas>
	push offset _x_com_ptr<IWzCanvas>::_ctor_default
	push 4
	lea eax,[esi+0xA34]
	push 4
	push eax
	mov byte ptr [ebp-4],0x26
	call __eh_vector_ctor_iterator
	lea edx,[ebp-0x28]
	push 0x5AF
	push edx
	mov byte ptr [ebp-4],0x27
	mov dword ptr [esi+0xA44],0
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	push edi
	push eax
	mov byte ptr [ebp-4],0x28
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block2:
	lea eax,[ebp-0x28]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	push ebx
	push eax
	mov byte ptr [ebp-4],0x29
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block4

 Block3:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block4:
	lea ecx,[ebp-0x28]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x934]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x2A
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block6

 Block5:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block6:
	lea edx,[ebp-0x28]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x938]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x2B
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block8

 Block7:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block8:
	lea eax,[ebp-0x28]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x93C]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x2C
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block10

 Block9:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block10:
	lea ecx,[ebp-0x28]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x940]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x2D
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block12:
	lea edx,[ebp-0x28]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x944]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x2E
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block14:
	lea eax,[ebp-0x28]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x948]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x2F
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block16:
	lea ecx,[ebp-0x28]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x94C]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x30
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block18:
	lea edx,[ebp-0x28]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x950]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x31
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x28]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block20

 Block19:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block20:
	lea eax,[ebp-0x14]
	push 0x5B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x32
	test eax,eax
	je Block22

 Block21:
	mov ecx,dword ptr [eax]
	mov dword ptr [ebp-0x28],ecx
	jmp Block23

 Block22:
	mov dword ptr [ebp-0x28],0

 Block23:
	mov eax,dword ptr [ebp-0x28]
	mov edx,8
	push eax
	mov word ptr [ebp-0x24],dx
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block26

 Block24:
	cmp dword ptr [ebp-0x28],eax
	je Block26

 Block25:
	push 0x8007000E
	call _com_issue_error

 Block26:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFFFFFF
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	push edx
	mov byte ptr [ebp-4],0x33
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edi,dword ptr [edi]
	mov byte ptr [ebp-4],0x34
	test edi,edi
	jne Block28

 Block27:
	push 0x80004003
	call _com_issue_error

 Block28:
	mov ecx,edi
	mov byte ptr [ebp-4],0x33
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x32
	jne Block31

 Block29:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block32

 Block30:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block32

 Block31:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block32:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block34

 Block33:
	call _xbstr_t::Data_t::Release

 Block34:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x35
	test eax,eax
	je Block36

 Block35:
	mov edi,dword ptr [eax]
	jmp Block37

 Block36:
	xor edi,edi

 Block37:
	mov eax,8
	push edi
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block40

 Block38:
	test edi,edi
	je Block40

 Block39:
	push 0x8007000E
	call _com_issue_error

 Block40:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFDF514
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	push edx
	mov byte ptr [ebp-4],0x36
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ebx,dword ptr [ebx]
	mov byte ptr [ebp-4],0x37
	test ebx,ebx
	jne Block42

 Block41:
	push 0x80004003
	call _com_issue_error

 Block42:
	mov ecx,ebx
	mov byte ptr [ebp-4],0x36
	call IWzFont::Create
	mov edi,8
	mov byte ptr [ebp-4],0x35
	cmp word ptr [ebp-0x24],di
	jne Block45

 Block43:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block46

 Block44:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block46

 Block45:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block46:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block48

 Block47:
	call _xbstr_t::Data_t::Release

 Block48:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x38
	test eax,eax
	je Block50

 Block49:
	mov ebx,dword ptr [eax]
	jmp Block51

 Block50:
	xor ebx,ebx

 Block51:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block54

 Block52:
	test ebx,ebx
	je Block54

 Block53:
	push 0x8007000E
	call _com_issue_error

 Block54:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFF8A18
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x39
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x934]
	mov byte ptr [ebp-4],0x3A
	test ecx,ecx
	jne Block56

 Block55:
	push 0x80004003
	call _com_issue_error

 Block56:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x38
	cmp word ptr [ebp-0x24],di
	jne Block59

 Block57:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block60

 Block58:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block60

 Block59:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block60:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block62

 Block61:
	call _xbstr_t::Data_t::Release

 Block62:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x3B
	test eax,eax
	je Block64

 Block63:
	mov ebx,dword ptr [eax]
	jmp Block65

 Block64:
	xor ebx,ebx

 Block65:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block68

 Block66:
	test ebx,ebx
	je Block68

 Block67:
	push 0x8007000E
	call _com_issue_error

 Block68:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFBCBCBC
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x3C
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x938]
	mov byte ptr [ebp-4],0x3D
	test ecx,ecx
	jne Block70

 Block69:
	push 0x80004003
	call _com_issue_error

 Block70:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x3B
	cmp word ptr [ebp-0x24],di
	jne Block73

 Block71:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block74

 Block72:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block74

 Block73:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block74:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block76

 Block75:
	call _xbstr_t::Data_t::Release

 Block76:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x3E
	test eax,eax
	je Block78

 Block77:
	mov ebx,dword ptr [eax]
	jmp Block79

 Block78:
	xor ebx,ebx

 Block79:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block82

 Block80:
	test ebx,ebx
	je Block82

 Block81:
	push 0x8007000E
	call _com_issue_error

 Block82:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFF93E119
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x3F
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x93C]
	mov byte ptr [ebp-4],0x40
	test ecx,ecx
	jne Block84

 Block83:
	push 0x80004003
	call _com_issue_error

 Block84:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x3E
	cmp word ptr [ebp-0x24],di
	jne Block87

 Block85:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block88

 Block86:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block88

 Block87:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block88:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block90

 Block89:
	call _xbstr_t::Data_t::Release

 Block90:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x41
	test eax,eax
	je Block92

 Block91:
	mov ebx,dword ptr [eax]
	jmp Block93

 Block92:
	xor ebx,ebx

 Block93:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block96

 Block94:
	test ebx,ebx
	je Block96

 Block95:
	push 0x8007000E
	call _com_issue_error

 Block96:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFF5CA1FF
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x42
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x940]
	mov byte ptr [ebp-4],0x43
	test ecx,ecx
	jne Block98

 Block97:
	push 0x80004003
	call _com_issue_error

 Block98:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x41
	cmp word ptr [ebp-0x24],di
	jne Block101

 Block99:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block102

 Block100:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block102

 Block101:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block102:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block104

 Block103:
	call _xbstr_t::Data_t::Release

 Block104:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x44
	test eax,eax
	je Block106

 Block105:
	mov ebx,dword ptr [eax]
	jmp Block107

 Block106:
	xor ebx,ebx

 Block107:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block110

 Block108:
	test ebx,ebx
	je Block110

 Block109:
	push 0x8007000E
	call _com_issue_error

 Block110:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFC261FF
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x45
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x944]
	mov byte ptr [ebp-4],0x46
	test ecx,ecx
	jne Block112

 Block111:
	push 0x80004003
	call _com_issue_error

 Block112:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x44
	cmp word ptr [ebp-0x24],di
	jne Block115

 Block113:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block116

 Block114:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block116

 Block115:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block116:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block118

 Block117:
	call _xbstr_t::Data_t::Release

 Block118:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x47
	test eax,eax
	je Block120

 Block119:
	mov ebx,dword ptr [eax]
	jmp Block121

 Block120:
	xor ebx,ebx

 Block121:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block124

 Block122:
	test ebx,ebx
	je Block124

 Block123:
	push 0x8007000E
	call _com_issue_error

 Block124:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFF7FFF00
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x48
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x948]
	mov byte ptr [ebp-4],0x49
	test ecx,ecx
	jne Block126

 Block125:
	push 0x80004003
	call _com_issue_error

 Block126:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x47
	cmp word ptr [ebp-0x24],di
	jne Block129

 Block127:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block130

 Block128:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block130

 Block129:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block130:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block132

 Block131:
	call _xbstr_t::Data_t::Release

 Block132:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x4A
	test eax,eax
	je Block134

 Block133:
	mov ebx,dword ptr [eax]
	jmp Block135

 Block134:
	xor ebx,ebx

 Block135:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block138

 Block136:
	test ebx,ebx
	je Block138

 Block137:
	push 0x8007000E
	call _com_issue_error

 Block138:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFF37FF00
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x4B
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x94C]
	mov byte ptr [ebp-4],0x4C
	test ecx,ecx
	jne Block140

 Block139:
	push 0x80004003
	call _com_issue_error

 Block140:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x4A
	cmp word ptr [ebp-0x24],di
	jne Block143

 Block141:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block144

 Block142:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block144

 Block143:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block144:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block146

 Block145:
	call _xbstr_t::Data_t::Release

 Block146:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x4D
	test eax,eax
	je Block148

 Block147:
	mov ebx,dword ptr [eax]
	jmp Block149

 Block148:
	xor ebx,ebx

 Block149:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block152

 Block150:
	test ebx,ebx
	je Block152

 Block151:
	push 0x8007000E
	call _com_issue_error

 Block152:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFF007F
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	mov bl,0x4E
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x950]
	mov byte ptr [ebp-4],0x4F
	test ecx,ecx
	jne Block154

 Block153:
	push 0x80004003
	call _com_issue_error

 Block154:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x4D
	cmp word ptr [ebp-0x24],di
	jne Block157

 Block155:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block158

 Block156:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block158

 Block157:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block158:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block160

 Block159:
	call _xbstr_t::Data_t::Release

 Block160:
	lea edx,[ebp-0x14]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea edi,[esi+0x954]
	push edi
	push eax
	mov byte ptr [ebp-4],0x50
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block162

 Block161:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block162:
	lea eax,[ebp-0x14]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x958]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x51
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block164

 Block163:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block164:
	lea ecx,[ebp-0x14]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x95C]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x52
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block166

 Block165:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block166:
	lea edx,[ebp-0x14]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x960]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x53
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block168

 Block167:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block168:
	lea eax,[ebp-0x14]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x964]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x54
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block170

 Block169:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block170:
	lea ecx,[ebp-0x14]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x968]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x55
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block172

 Block171:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block172:
	lea edx,[ebp-0x14]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x96C]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x56
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block174

 Block173:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block174:
	lea eax,[ebp-0x14]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x974]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x57
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block176

 Block175:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block176:
	lea ecx,[ebp-0x14]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x970]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x58
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block178

 Block177:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block178:
	lea edx,[ebp-0x14]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x978]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x59
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block180

 Block179:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block180:
	lea eax,[ebp-0x14]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x97C]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x5A
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block182

 Block181:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block182:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block184

 Block183:
	push eax
	call _com_issue_error

 Block184:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFFFFFF
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x5B
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x5C
	test ecx,ecx
	jne Block186

 Block185:
	push 0x80004003
	call _com_issue_error

 Block186:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block189

 Block187:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block190

 Block188:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block190

 Block189:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block190:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block192

 Block191:
	push eax
	call _com_issue_error

 Block192:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFBBBBBB
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x5D
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x958]
	mov byte ptr [ebp-4],0x5E
	test ecx,ecx
	jne Block194

 Block193:
	push 0x80004003
	call _com_issue_error

 Block194:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block197

 Block195:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block198

 Block196:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block198

 Block197:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block198:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block200

 Block199:
	push eax
	call _com_issue_error

 Block200:
	lea eax,[ebp-0x24]
	push eax
	push 0xFF7B8C91
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x5F
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x95C]
	mov byte ptr [ebp-4],0x60
	test ecx,ecx
	jne Block202

 Block201:
	push 0x80004003
	call _com_issue_error

 Block202:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block205

 Block203:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block206

 Block204:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block206

 Block205:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block206:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block208

 Block207:
	push eax
	call _com_issue_error

 Block208:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFF20303
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x61
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x960]
	mov byte ptr [ebp-4],0x62
	test ecx,ecx
	jne Block210

 Block209:
	push 0x80004003
	call _com_issue_error

 Block210:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block213

 Block211:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block214

 Block212:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block214

 Block213:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block214:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block216

 Block215:
	push eax
	call _com_issue_error

 Block216:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFF8A18
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x63
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x964]
	mov byte ptr [ebp-4],0x64
	test ecx,ecx
	jne Block218

 Block217:
	push 0x80004003
	call _com_issue_error

 Block218:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block221

 Block219:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block222

 Block220:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block222

 Block221:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block222:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block224

 Block223:
	push eax
	call _com_issue_error

 Block224:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFDF514
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x65
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x968]
	mov byte ptr [ebp-4],0x66
	test ecx,ecx
	jne Block226

 Block225:
	push 0x80004003
	call _com_issue_error

 Block226:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block229

 Block227:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block230

 Block228:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block230

 Block229:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block230:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block232

 Block231:
	push eax
	call _com_issue_error

 Block232:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFF99CC
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x67
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x96C]
	mov byte ptr [ebp-4],0x68
	test ecx,ecx
	jne Block234

 Block233:
	push 0x80004003
	call _com_issue_error

 Block234:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block237

 Block235:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block238

 Block236:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block238

 Block237:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block238:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block240

 Block239:
	push eax
	call _com_issue_error

 Block240:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFFF54D
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x69
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x974]
	mov byte ptr [ebp-4],0x6A
	test ecx,ecx
	jne Block242

 Block241:
	push 0x80004003
	call _com_issue_error

 Block242:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block245

 Block243:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block246

 Block244:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block246

 Block245:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block246:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block248

 Block247:
	push eax
	call _com_issue_error

 Block248:
	lea eax,[ebp-0x24]
	push eax
	push 0xFF77CCFF
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x6B
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x978]
	mov byte ptr [ebp-4],0x6C
	test ecx,ecx
	jne Block250

 Block249:
	push 0x80004003
	call _com_issue_error

 Block250:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block253

 Block251:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block254

 Block252:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block254

 Block253:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block254:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block256

 Block255:
	push eax
	call _com_issue_error

 Block256:
	lea eax,[ebp-0x24]
	push eax
	push 0xFF7FFF00
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x6D
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x970]
	mov byte ptr [ebp-4],0x6E
	test ecx,ecx
	jne Block258

 Block257:
	push 0x80004003
	call _com_issue_error

 Block258:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block261

 Block259:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block262

 Block260:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block262

 Block261:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block262:
	lea ecx,[ebp-0x24]
	push ecx
	call edi
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block264

 Block263:
	push eax
	call _com_issue_error

 Block264:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFF0066
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x1A25
	mov bl,0x6F
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x97C]
	mov byte ptr [ebp-4],0x70
	test ecx,ecx
	jne Block266

 Block265:
	push 0x80004003
	call _com_issue_error

 Block266:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block269

 Block267:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block270

 Block268:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block270

 Block269:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block270:
	lea ecx,[ebp-0x14]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ebx,[esi+0x980]
	push ebx
	push eax
	mov byte ptr [ebp-4],0x71
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block272

 Block271:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block272:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x72
	test eax,eax
	je Block274

 Block273:
	mov edi,dword ptr [eax]
	jmp Block275

 Block274:
	xor edi,edi

 Block275:
	mov eax,8
	push edi
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block278

 Block276:
	test edi,edi
	je Block278

 Block277:
	push 0x8007000E
	call _com_issue_error

 Block278:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFFFFFF
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push 0x1A25
	push edx
	mov byte ptr [ebp-4],0x73
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [ebx]
	mov byte ptr [ebp-4],0x74
	test ecx,ecx
	jne Block280

 Block279:
	push 0x80004003
	call _com_issue_error

 Block280:
	mov byte ptr [ebp-4],0x73
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x72
	jne Block283

 Block281:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block284

 Block282:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block284

 Block283:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block284:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block286

 Block285:
	call _xbstr_t::Data_t::Release

 Block286:
	lea edx,[ebp-0x14]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ebx,[esi+0x984]
	push ebx
	push eax
	mov byte ptr [ebp-4],0x75
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block288

 Block287:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block288:
	lea eax,[ebp-0x14]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea edi,[esi+0x988]
	push edi
	push eax
	mov byte ptr [ebp-4],0x76
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block290

 Block289:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block290:
	lea ecx,[ebp-0x14]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ecx,[esi+0x98C]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x77
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block292

 Block291:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block292:
	lea edx,[ebp-0x24]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x24]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block294

 Block293:
	push eax
	call _com_issue_error

 Block294:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFAE8CB
	push 9
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 8
	push edx
	mov byte ptr [ebp-4],0x78
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [ebx]
	mov byte ptr [ebp-4],0x79
	test ecx,ecx
	jne Block296

 Block295:
	push 0x80004003
	call _com_issue_error

 Block296:
	mov byte ptr [ebp-4],0x78
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block299

 Block297:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block300

 Block298:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block300

 Block299:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block300:
	lea edx,[ebp-0x24]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x24]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block302

 Block301:
	push eax
	call _com_issue_error

 Block302:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFFFFFF
	push 9
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 8
	mov bl,0x7A
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x7B
	test ecx,ecx
	jne Block304

 Block303:
	push 0x80004003
	call _com_issue_error

 Block304:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov edi,8
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x24],di
	jne Block307

 Block305:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block308

 Block306:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block308

 Block307:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block308:
	lea edx,[ebp-0x14]
	push 0x5B0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],0x7C
	test eax,eax
	je Block310

 Block309:
	mov ebx,dword ptr [eax]
	jmp Block311

 Block310:
	xor ebx,ebx

 Block311:
	mov eax,edi
	push ebx
	mov word ptr [ebp-0x24],ax
	call ZComAPI::ZComSysAllocString
	add esp,4
	mov dword ptr [ebp-0x1C],eax
	test eax,eax
	jne Block314

 Block312:
	test ebx,ebx
	je Block314

 Block313:
	push 0x8007000E
	call _com_issue_error

 Block314:
	lea ecx,[ebp-0x24]
	push ecx
	push 0xFFFFFFFF
	push 9
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x28],esp
	push edi
	mov bl,0x7D
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x98C]
	mov byte ptr [ebp-4],0x7E
	test ecx,ecx
	jne Block316

 Block315:
	push 0x80004003
	call _com_issue_error

 Block316:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	mov byte ptr [ebp-4],0x7C
	cmp word ptr [ebp-0x24],di
	jne Block319

 Block317:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block320

 Block318:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block320

 Block319:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block320:
	mov ecx,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x27
	test ecx,ecx
	je Block322

 Block321:
	call _xbstr_t::Data_t::Release

 Block322:
	lea edx,[ebp-0x14]
	push 0x5AF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea ebx,[esi+0x990]
	push ebx
	push eax
	mov byte ptr [ebp-4],0x7F
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block324

 Block323:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block324:
	lea eax,[ebp-0x14]
	push 0x5AF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	lea edi,[esi+0x994]
	push edi
	push eax
	mov byte ptr [ebp-4],0x80
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp-0x14]
	add esp,0xC
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block326

 Block325:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block326:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block328

 Block327:
	push eax
	call _com_issue_error

 Block328:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFAE8CB
	push 0xB
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 8
	push ecx
	mov byte ptr [ebp-4],0x81
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [ebx]
	mov byte ptr [ebp-4],0x82
	test ecx,ecx
	jne Block330

 Block329:
	push 0x80004003
	call _com_issue_error

 Block330:
	mov byte ptr [ebp-4],0x81
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block333

 Block331:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block334

 Block332:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block334

 Block333:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block334:
	lea ecx,[ebp-0x24]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x24]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block336

 Block335:
	push eax
	call _com_issue_error

 Block336:
	lea eax,[ebp-0x24]
	push eax
	push 0xFFFFFFFF
	push 0xB
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 8
	mov bl,0x83
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x84
	test ecx,ecx
	jne Block338

 Block337:
	push 0x80004003
	call _com_issue_error

 Block338:
	mov byte ptr [ebp-4],bl
	call IWzFont::Create
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block341

 Block339:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block342

 Block340:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block342

 Block341:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block342:
	mov ecx,esi
	call CUIToolTip::ClearToolTip
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x58]
	push ecx
	call edi
	lea edx,[ebp-0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block344

 Block343:
	push eax
	call _com_issue_error

 Block344:
	lea eax,[ebp-0x24]
	push eax
	mov byte ptr [ebp-4],0x85
	call edi
	lea ecx,[ebp-0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block346

 Block345:
	push eax
	call _com_issue_error

 Block346:
	push 0
	push 0
	lea edx,[ebp-0x58]
	push edx
	lea eax,[ebp-0x24]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x804
	mov bl,0x86
	push ecx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0x87
	jne Block348

 Block347:
	push 0x80004003
	call _com_issue_error

 Block348:
	lea edx,[ebp-0x38]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x88
	call Ztl_variant_t::GetUnknown
	lea edi,[esi+0x9C8]
	push eax
	mov ecx,edi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	test eax,eax
	jge Block351

 Block349:
	cmp eax,0x80004002
	je Block351

 Block350:
	push eax
	call _com_issue_error

 Block351:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],bl
	jne Block354

 Block352:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block355

 Block353:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block355

 Block354:
	lea ecx,[ebp-0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block355:
	mov ebx,8
	mov byte ptr [ebp-4],0x85
	cmp word ptr [ebp-0x24],bx
	jne Block358

 Block356:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block359

 Block357:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block359

 Block358:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block359:
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x58],bx
	jne Block362

 Block360:
	mov eax,dword ptr [ebp-0x50]
	xor ecx,ecx
	mov word ptr [ebp-0x58],cx
	test eax,eax
	je Block363

 Block361:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block363

 Block362:
	lea edx,[ebp-0x58]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block363:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x24]
	push eax
	call ebx
	lea ecx,[ebp-0x24]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block365

 Block364:
	push eax
	call _com_issue_error

 Block365:
	lea edx,[ebp-0x58]
	push edx
	mov byte ptr [ebp-4],0x89
	call ebx
	lea eax,[ebp-0x58]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block367

 Block366:
	push eax
	call _com_issue_error

 Block367:
	push 0
	push 0
	lea ecx,[ebp-0x24]
	push ecx
	lea edx,[ebp-0x58]
	push edx
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x805
	mov bl,0x8A
	push eax
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0x8B
	jne Block369

 Block368:
	push 0x80004003
	call _com_issue_error

 Block369:
	lea ecx,[ebp-0x38]
	push ecx
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x8C
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esi+0x9CC]
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	test eax,eax
	jge Block372

 Block370:
	cmp eax,0x80004002
	je Block372

 Block371:
	push eax
	call _com_issue_error

 Block372:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],bl
	jne Block375

 Block373:
	mov eax,dword ptr [ebp-0x30]
	xor edx,edx
	mov word ptr [ebp-0x38],dx
	test eax,eax
	je Block376

 Block374:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block376

 Block375:
	lea eax,[ebp-0x38]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block376:
	cmp word ptr [ebp-0x58],8
	mov byte ptr [ebp-4],0x89
	jne Block383

 Block377:
	mov eax,dword ptr [ebp-0x50]
	xor ecx,ecx
	mov word ptr [ebp-0x58],cx
	test eax,eax
	je Block379

 Block378:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block379:
	mov ebx,dword ptr [ZImports::_VariantClear]

 Block380:
	cmp word ptr [ebp-0x24],8
	mov byte ptr [ebp-4],0x27
	jne Block384

 Block381:
	xor eax,eax
	mov word ptr [ebp-0x24],ax
	mov eax,dword ptr [ebp-0x1C]
	test eax,eax
	je Block385

 Block382:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block385

 Block383:
	mov ebx,dword ptr [ZImports::_VariantClear]
	lea edx,[ebp-0x58]
	push edx
	call ebx
	jmp Block380

 Block384:
	lea ecx,[ebp-0x24]
	push ecx
	call ebx

 Block385:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x808
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x8D
	test ecx,ecx
	jne Block387

 Block386:
	push 0x80004003
	call _com_issue_error

 Block387:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x8E
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esi+0x998]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block390

 Block388:
	cmp eax,0x80004002
	je Block390

 Block389:
	push eax
	call _com_issue_error

 Block390:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block393

 Block391:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block394

 Block392:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block394

 Block393:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block394:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x809
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x8F
	test ecx,ecx
	jne Block396

 Block395:
	push 0x80004003
	call _com_issue_error

 Block396:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x90
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9A0]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block399

 Block397:
	cmp eax,0x80004002
	je Block399

 Block398:
	push eax
	call _com_issue_error

 Block399:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block402

 Block400:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block403

 Block401:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block403

 Block402:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block403:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80A
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x91
	test ecx,ecx
	jne Block405

 Block404:
	push 0x80004003
	call _com_issue_error

 Block405:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x92
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9A8]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block408

 Block406:
	cmp eax,0x80004002
	je Block408

 Block407:
	push eax
	call _com_issue_error

 Block408:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block411

 Block409:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block412

 Block410:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block412

 Block411:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block412:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x93
	test ecx,ecx
	jne Block414

 Block413:
	push 0x80004003
	call _com_issue_error

 Block414:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x94
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9B0]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block417

 Block415:
	cmp eax,0x80004002
	je Block417

 Block416:
	push eax
	call _com_issue_error

 Block417:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block420

 Block418:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block421

 Block419:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block421

 Block420:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block421:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x95
	test ecx,ecx
	jne Block423

 Block422:
	push 0x80004003
	call _com_issue_error

 Block423:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x96
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9B8]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block426

 Block424:
	cmp eax,0x80004002
	je Block426

 Block425:
	push eax
	call _com_issue_error

 Block426:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block429

 Block427:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block430

 Block428:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block430

 Block429:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block430:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0x97
	test ecx,ecx
	jne Block432

 Block431:
	push 0x80004003
	call _com_issue_error

 Block432:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x98
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9C0]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block435

 Block433:
	cmp eax,0x80004002
	je Block435

 Block434:
	push eax
	call _com_issue_error

 Block435:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block438

 Block436:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block439

 Block437:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block439

 Block438:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block439:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x808
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0x99
	test ecx,ecx
	jne Block441

 Block440:
	push 0x80004003
	call _com_issue_error

 Block441:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x9A
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x99C]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block444

 Block442:
	cmp eax,0x80004002
	je Block444

 Block443:
	push eax
	call _com_issue_error

 Block444:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block447

 Block445:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block448

 Block446:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block448

 Block447:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block448:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x809
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0x9B
	test ecx,ecx
	jne Block450

 Block449:
	push 0x80004003
	call _com_issue_error

 Block450:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x9C
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9A4]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block453

 Block451:
	cmp eax,0x80004002
	je Block453

 Block452:
	push eax
	call _com_issue_error

 Block453:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block456

 Block454:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block457

 Block455:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block457

 Block456:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block457:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80A
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0x9D
	test ecx,ecx
	jne Block459

 Block458:
	push 0x80004003
	call _com_issue_error

 Block459:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x9E
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9AC]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block462

 Block460:
	cmp eax,0x80004002
	je Block462

 Block461:
	push eax
	call _com_issue_error

 Block462:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block465

 Block463:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block466

 Block464:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block466

 Block465:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block466:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80B
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0x9F
	test ecx,ecx
	jne Block468

 Block467:
	push 0x80004003
	call _com_issue_error

 Block468:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xA0
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9B4]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block471

 Block469:
	cmp eax,0x80004002
	je Block471

 Block470:
	push eax
	call _com_issue_error

 Block471:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block474

 Block472:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block475

 Block473:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block475

 Block474:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block475:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80C
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xA1
	test ecx,ecx
	jne Block477

 Block476:
	push 0x80004003
	call _com_issue_error

 Block477:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xA2
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9BC]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block480

 Block478:
	cmp eax,0x80004002
	je Block480

 Block479:
	push eax
	call _com_issue_error

 Block480:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block483

 Block481:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block484

 Block482:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block484

 Block483:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block484:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x80D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xA3
	test ecx,ecx
	jne Block486

 Block485:
	push 0x80004003
	call _com_issue_error

 Block486:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xA4
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9C4]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block489

 Block487:
	cmp eax,0x80004002
	je Block489

 Block488:
	push eax
	call _com_issue_error

 Block489:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block492

 Block490:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block493

 Block491:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block493

 Block492:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block493:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2CE
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xA5
	test ecx,ecx
	jne Block495

 Block494:
	push 0x80004003
	call _com_issue_error

 Block495:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xA6
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esi+0x9D0]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block498

 Block496:
	cmp eax,0x80004002
	je Block498

 Block497:
	push eax
	call _com_issue_error

 Block498:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block501

 Block499:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block502

 Block500:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block502

 Block501:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block502:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2CF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xA7
	test ecx,ecx
	jne Block504

 Block503:
	push 0x80004003
	call _com_issue_error

 Block504:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xA8
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9D8]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block507

 Block505:
	cmp eax,0x80004002
	je Block507

 Block506:
	push eax
	call _com_issue_error

 Block507:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block510

 Block508:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block511

 Block509:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block511

 Block510:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block511:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xA9
	test ecx,ecx
	jne Block513

 Block512:
	push 0x80004003
	call _com_issue_error

 Block513:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xAA
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9E0]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block516

 Block514:
	cmp eax,0x80004002
	je Block516

 Block515:
	push eax
	call _com_issue_error

 Block516:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block519

 Block517:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block520

 Block518:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block520

 Block519:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block520:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D1
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xAB
	test ecx,ecx
	jne Block522

 Block521:
	push 0x80004003
	call _com_issue_error

 Block522:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xAC
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9E8]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block525

 Block523:
	cmp eax,0x80004002
	je Block525

 Block524:
	push eax
	call _com_issue_error

 Block525:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block528

 Block526:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block529

 Block527:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block529

 Block528:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block529:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D2
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xAD
	test ecx,ecx
	jne Block531

 Block530:
	push 0x80004003
	call _com_issue_error

 Block531:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xAE
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9F0]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block534

 Block532:
	cmp eax,0x80004002
	je Block534

 Block533:
	push eax
	call _com_issue_error

 Block534:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0x27
	jne Block537

 Block535:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block538

 Block536:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block538

 Block537:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block538:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xAF
	test ecx,ecx
	jne Block540

 Block539:
	push 0x80004003
	call _com_issue_error

 Block540:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xB0
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9F8]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block543

 Block541:
	cmp eax,0x80004002
	je Block543

 Block542:
	push eax
	call _com_issue_error

 Block543:
	mov edi,8
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x38],di
	jne Block546

 Block544:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block547

 Block545:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block547

 Block546:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block547:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2CE
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xB1
	test ecx,ecx
	jne Block549

 Block548:
	push 0x80004003
	call _com_issue_error

 Block549:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xB2
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9D4]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block552

 Block550:
	cmp eax,0x80004002
	je Block552

 Block551:
	push eax
	call _com_issue_error

 Block552:
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x38],di
	jne Block555

 Block553:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block556

 Block554:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block556

 Block555:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block556:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2CF
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xB3
	test ecx,ecx
	jne Block558

 Block557:
	push 0x80004003
	call _com_issue_error

 Block558:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xB4
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9DC]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block561

 Block559:
	cmp eax,0x80004002
	je Block561

 Block560:
	push eax
	call _com_issue_error

 Block561:
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x38],di
	jne Block564

 Block562:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block565

 Block563:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block565

 Block564:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block565:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D0
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xB5
	test ecx,ecx
	jne Block567

 Block566:
	push 0x80004003
	call _com_issue_error

 Block567:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xB6
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9E4]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block570

 Block568:
	cmp eax,0x80004002
	je Block570

 Block569:
	push eax
	call _com_issue_error

 Block570:
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x38],di
	jne Block573

 Block571:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block574

 Block572:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block574

 Block573:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block574:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D1
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xB7
	test ecx,ecx
	jne Block576

 Block575:
	push 0x80004003
	call _com_issue_error

 Block576:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xB8
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9EC]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block579

 Block577:
	cmp eax,0x80004002
	je Block579

 Block578:
	push eax
	call _com_issue_error

 Block579:
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x38],di
	jne Block582

 Block580:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block583

 Block581:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block583

 Block582:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block583:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D2
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xB9
	test ecx,ecx
	jne Block585

 Block584:
	push 0x80004003
	call _com_issue_error

 Block585:
	lea eax,[ebp-0x38]
	push eax
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xBA
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9F4]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block588

 Block586:
	cmp eax,0x80004002
	je Block588

 Block587:
	push eax
	call _com_issue_error

 Block588:
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x38],di
	jne Block591

 Block589:
	mov eax,dword ptr [ebp-0x30]
	xor ecx,ecx
	mov word ptr [ebp-0x38],cx
	test eax,eax
	je Block592

 Block590:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block592

 Block591:
	lea edx,[ebp-0x38]
	push edx
	call ebx

 Block592:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2D3
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xBB
	test ecx,ecx
	jne Block594

 Block593:
	push 0x80004003
	call _com_issue_error

 Block594:
	lea edx,[ebp-0x38]
	push edx
	mov byte ptr [ebp-4],0x27
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xBC
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0x9FC]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block597

 Block595:
	cmp eax,0x80004002
	je Block597

 Block596:
	push eax
	call _com_issue_error

 Block597:
	mov byte ptr [ebp-4],0x27
	cmp word ptr [ebp-0x38],di
	jne Block600

 Block598:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block601

 Block599:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block601

 Block600:
	lea ecx,[ebp-0x38]
	push ecx
	call ebx

 Block601:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x24]
	push edx
	call edi
	lea eax,[ebp-0x24]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block603

 Block602:
	push eax
	call _com_issue_error

 Block603:
	lea ecx,[ebp-0x58]
	push ecx
	mov byte ptr [ebp-4],0xBD
	call edi
	lea edx,[ebp-0x58]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block605

 Block604:
	push eax
	call _com_issue_error

 Block605:
	push 0
	push 0
	lea eax,[ebp-0x24]
	push eax
	lea ecx,[ebp-0x58]
	push ecx
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x2CD
	mov bl,0xBE
	push edx
	mov byte ptr [ebp-4],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0xBF
	jne Block607

 Block606:
	push 0x80004003
	call _com_issue_error

 Block607:
	lea eax,[ebp-0x78]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xC0
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x28]
	mov dword ptr [ebp-0x28],0
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	test eax,eax
	jge Block610

 Block608:
	cmp eax,0x80004002
	je Block610

 Block609:
	push eax
	call _com_issue_error

 Block610:
	mov edi,8
	mov byte ptr [ebp-4],0xC2
	cmp word ptr [ebp-0x78],di
	jne Block613

 Block611:
	mov eax,dword ptr [ebp-0x70]
	xor ecx,ecx
	mov word ptr [ebp-0x78],cx
	test eax,eax
	je Block614

 Block612:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block614

 Block613:
	lea edx,[ebp-0x78]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block614:
	mov byte ptr [ebp-4],0xC3
	cmp word ptr [ebp-0x58],di
	jne Block617

 Block615:
	xor eax,eax
	mov word ptr [ebp-0x58],ax
	mov eax,dword ptr [ebp-0x50]
	test eax,eax
	je Block618

 Block616:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block618

 Block617:
	lea ecx,[ebp-0x58]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block618:
	mov byte ptr [ebp-4],0xC4
	cmp word ptr [ebp-0x24],di
	jne Block621

 Block619:
	mov eax,dword ptr [ebp-0x1C]
	xor edx,edx
	mov word ptr [ebp-0x24],dx
	test eax,eax
	je Block622

 Block620:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block622

 Block621:
	lea eax,[ebp-0x24]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block622:
	xor ebx,ebx
	lea edi,[esi+0xA00]

 Block623:
	mov eax,0x20
	call __chkstk
	mov eax,esp
	push 0
	push 0
	push 0xA
	push eax
	push ebx
	call __itow
	add esp,8
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_1
	cmp dword ptr [ebp-0x28],0
	mov byte ptr [ebp-4],0xC5
	je Block27

 Block624:
	lea ecx,[ebp-0x38]
	push ecx
	mov ecx,dword ptr [ebp-0x28]
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xC6
	call Ztl_variant_t::GetUnknown
	push eax
	mov ecx,edi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block626

 Block625:
	cmp eax,0x80004002
	jne Block183

 Block626:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0xC4
	jne Block629

 Block627:
	mov eax,dword ptr [ebp-0x30]
	xor edx,edx
	mov word ptr [ebp-0x38],dx
	test eax,eax
	je Block630

 Block628:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block630

 Block629:
	lea eax,[ebp-0x38]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block630:
	inc ebx
	add edi,4
	cmp ebx,3
	jl Block623

 Block631:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x38]
	push ecx
	call edi
	lea edx,[ebp-0x38]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block633

 Block632:
	push eax
	call _com_issue_error

 Block633:
	lea eax,[ebp-0x68]
	push eax
	mov byte ptr [ebp-4],0xC7
	call edi
	lea ecx,[ebp-0x68]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block635

 Block634:
	push eax
	call _com_issue_error

 Block635:
	push 0
	push 0
	lea edx,[ebp-0x38]
	push edx
	lea eax,[ebp-0x68]
	push eax
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	mov bl,0xC8
	push offset _S_UIUIWINDOWIMGTOO__1
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0xC9
	jne Block637

 Block636:
	push 0x80004003
	call _com_issue_error

 Block637:
	lea ecx,[ebp-0x48]
	push ecx
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xCA
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esi+0xA2C]
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	test eax,eax
	jge Block640

 Block638:
	cmp eax,0x80004002
	je Block640

 Block639:
	push eax
	call _com_issue_error

 Block640:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],bl
	jne Block643

 Block641:
	mov eax,dword ptr [ebp-0x40]
	xor edx,edx
	mov word ptr [ebp-0x48],dx
	test eax,eax
	je Block644

 Block642:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block644

 Block643:
	lea eax,[ebp-0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block644:
	cmp word ptr [ebp-0x68],8
	mov byte ptr [ebp-4],0xC7
	jne Block647

 Block645:
	mov eax,dword ptr [ebp-0x60]
	xor ecx,ecx
	mov word ptr [ebp-0x68],cx
	test eax,eax
	je Block648

 Block646:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block648

 Block647:
	lea edx,[ebp-0x68]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block648:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0xC4
	jne Block651

 Block649:
	xor eax,eax
	mov word ptr [ebp-0x38],ax
	mov eax,dword ptr [ebp-0x30]
	test eax,eax
	je Block652

 Block650:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block652

 Block651:
	lea ecx,[ebp-0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block652:
	lea edx,[ebp-0x68]
	push edx
	call edi
	lea eax,[ebp-0x68]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block654

 Block653:
	push eax
	call _com_issue_error

 Block654:
	lea ecx,[ebp-0x38]
	push ecx
	mov byte ptr [ebp-4],0xCB
	call edi
	lea edx,[ebp-0x38]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block656

 Block655:
	push eax
	call _com_issue_error

 Block656:
	push 0
	push 0
	lea eax,[ebp-0x68]
	push eax
	lea ecx,[ebp-0x38]
	push ecx
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	mov bl,0xCC
	push offset _S_UIUIWINDOWIMGTOO
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0xCD
	jne Block658

 Block657:
	push 0x80004003
	call _com_issue_error

 Block658:
	lea edx,[ebp-0x48]
	mov byte ptr [ebp-4],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0xCE
	call Ztl_variant_t::GetUnknown
	lea edi,[esi+0xA30]
	push eax
	mov ecx,edi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	test eax,eax
	jge Block661

 Block659:
	cmp eax,0x80004002
	je Block661

 Block660:
	push eax
	call _com_issue_error

 Block661:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],bl
	jne Block668

 Block662:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block664

 Block663:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block664:
	mov ebx,dword ptr [ZImports::_VariantClear]

 Block665:
	cmp word ptr [ebp-0x38],8
	mov byte ptr [ebp-4],0xCB
	jne Block669

 Block666:
	mov eax,dword ptr [ebp-0x30]
	xor edx,edx
	mov word ptr [ebp-0x38],dx
	test eax,eax
	je Block670

 Block667:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block670

 Block668:
	mov ebx,dword ptr [ZImports::_VariantClear]
	lea ecx,[ebp-0x48]
	push ecx
	call ebx
	jmp Block665

 Block669:
	lea eax,[ebp-0x38]
	push eax
	call ebx

 Block670:
	cmp word ptr [ebp-0x68],8
	mov byte ptr [ebp-4],0xC4
	jne Block673

 Block671:
	mov eax,dword ptr [ebp-0x60]
	xor ecx,ecx
	mov word ptr [ebp-0x68],cx
	test eax,eax
	je Block674

 Block672:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block674

 Block673:
	lea edx,[ebp-0x68]
	push edx
	call ebx

 Block674:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_ITEMLEV
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0xA2C]
	mov byte ptr [ebp-4],0xCF
	test ecx,ecx
	jne Block676

 Block675:
	push 0x80004003
	call _com_issue_error

 Block676:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xD0
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esi+0xA0C]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block679

 Block677:
	cmp eax,0x80004002
	je Block679

 Block678:
	push eax
	call _com_issue_error

 Block679:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],0xC4
	jne Block682

 Block680:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block683

 Block681:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block683

 Block682:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block683:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_ITEMEXP
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0xA2C]
	mov byte ptr [ebp-4],0xD1
	test ecx,ecx
	jne Block685

 Block684:
	push 0x80004003
	call _com_issue_error

 Block685:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xD2
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA14]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block688

 Block686:
	cmp eax,0x80004002
	je Block688

 Block687:
	push eax
	call _com_issue_error

 Block688:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],0xC4
	jne Block691

 Block689:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block692

 Block690:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block692

 Block691:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block692:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [ebp-0x14],esp
	push 0x5D7
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esi+0xA2C]
	mov byte ptr [ebp-4],0xD3
	test ecx,ecx
	jne Block694

 Block693:
	push 0x80004003
	call _com_issue_error

 Block694:
	lea edx,[ebp-0x48]
	push edx
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xD4
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA1C]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block697

 Block695:
	cmp eax,0x80004002
	je Block697

 Block696:
	push eax
	call _com_issue_error

 Block697:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],0xC4
	jne Block700

 Block698:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block701

 Block699:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block701

 Block700:
	lea ecx,[ebp-0x48]
	push ecx
	call ebx

 Block701:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_PERCENT
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0xA2C]
	mov byte ptr [ebp-4],0xD5
	test ecx,ecx
	jne Block703

 Block702:
	push 0x80004003
	call _com_issue_error

 Block703:
	lea edx,[ebp-0x48]
	push edx
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xD6
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA24]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block706

 Block704:
	cmp eax,0x80004002
	je Block706

 Block705:
	push eax
	call _com_issue_error

 Block706:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],0xC4
	jne Block709

 Block707:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block710

 Block708:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block710

 Block709:
	lea ecx,[ebp-0x48]
	push ecx
	call ebx

 Block710:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_ITEMLEV
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xD7
	test ecx,ecx
	jne Block712

 Block711:
	push 0x80004003
	call _com_issue_error

 Block712:
	lea edx,[ebp-0x48]
	push edx
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xD8
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA10]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block715

 Block713:
	cmp eax,0x80004002
	je Block715

 Block714:
	push eax
	call _com_issue_error

 Block715:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],0xC4
	jne Block718

 Block716:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block719

 Block717:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block719

 Block718:
	lea ecx,[ebp-0x48]
	push ecx
	call ebx

 Block719:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_ITEMEXP
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xD9
	test ecx,ecx
	jne Block721

 Block720:
	push 0x80004003
	call _com_issue_error

 Block721:
	lea edx,[ebp-0x48]
	push edx
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xDA
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA18]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block724

 Block722:
	cmp eax,0x80004002
	je Block724

 Block723:
	push eax
	call _com_issue_error

 Block724:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],0xC4
	jne Block727

 Block725:
	xor eax,eax
	mov word ptr [ebp-0x48],ax
	mov eax,dword ptr [ebp-0x40]
	test eax,eax
	je Block728

 Block726:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block728

 Block727:
	lea ecx,[ebp-0x48]
	push ecx
	call ebx

 Block728:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x14],esp
	push 0x5D7
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xDB
	test ecx,ecx
	jne Block730

 Block729:
	push 0x80004003
	call _com_issue_error

 Block730:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xDC
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA20]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block733

 Block731:
	cmp eax,0x80004002
	je Block733

 Block732:
	push eax
	call _com_issue_error

 Block733:
	cmp word ptr [ebp-0x48],8
	mov byte ptr [ebp-4],0xC4
	jne Block736

 Block734:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block737

 Block735:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block737

 Block736:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block737:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_PERCENT
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [edi]
	mov byte ptr [ebp-4],0xDD
	test ecx,ecx
	jne Block739

 Block738:
	push 0x80004003
	call _com_issue_error

 Block739:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xDE
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA28]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block742

 Block740:
	cmp eax,0x80004002
	je Block742

 Block741:
	push eax
	call _com_issue_error

 Block742:
	mov edi,8
	mov byte ptr [ebp-4],0xC4
	cmp word ptr [ebp-0x48],di
	jne Block745

 Block743:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block746

 Block744:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block746

 Block745:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block746:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_DURABILITY
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0x9C8]
	mov byte ptr [ebp-4],0xDF
	test ecx,ecx
	jne Block748

 Block747:
	push 0x80004003
	call _com_issue_error

 Block748:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xE0
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esi+0xA34]
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block751

 Block749:
	cmp eax,0x80004002
	je Block751

 Block750:
	push eax
	call _com_issue_error

 Block751:
	mov byte ptr [ebp-4],0xC4
	cmp word ptr [ebp-0x48],di
	jne Block754

 Block752:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block755

 Block753:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block755

 Block754:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block755:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_PERCENT
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0x9C8]
	mov byte ptr [ebp-4],0xE1
	test ecx,ecx
	jne Block757

 Block756:
	push 0x80004003
	call _com_issue_error

 Block757:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xE2
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA3C]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block760

 Block758:
	cmp eax,0x80004002
	je Block760

 Block759:
	push eax
	call _com_issue_error

 Block760:
	mov byte ptr [ebp-4],0xC4
	cmp word ptr [ebp-0x48],di
	jne Block763

 Block761:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block764

 Block762:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block764

 Block763:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block764:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_DURABILITY
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xE3
	test ecx,ecx
	jne Block766

 Block765:
	push 0x80004003
	call _com_issue_error

 Block766:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xE4
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA38]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block769

 Block767:
	cmp eax,0x80004002
	je Block769

 Block768:
	push eax
	call _com_issue_error

 Block769:
	mov byte ptr [ebp-4],0xC4
	cmp word ptr [ebp-0x48],di
	jne Block772

 Block770:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block773

 Block771:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block773

 Block772:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block773:
	push 0
	push 0
	push ecx
	mov dword ptr [ebp-0x14],esp
	mov ecx,esp
	push offset _S_PERCENT
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0x9CC]
	mov byte ptr [ebp-4],0xE5
	test ecx,ecx
	jne Block775

 Block774:
	push 0x80004003
	call _com_issue_error

 Block775:
	lea eax,[ebp-0x48]
	push eax
	mov byte ptr [ebp-4],0xC4
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xE6
	call Ztl_variant_t::GetUnknown
	lea ecx,[esi+0xA40]
	push eax
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block778

 Block776:
	cmp eax,0x80004002
	je Block778

 Block777:
	push eax
	call _com_issue_error

 Block778:
	mov byte ptr [ebp-4],0xC4
	cmp word ptr [ebp-0x48],di
	jne Block781

 Block779:
	mov eax,dword ptr [ebp-0x40]
	xor ecx,ecx
	mov word ptr [ebp-0x48],cx
	test eax,eax
	je Block782

 Block780:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block782

 Block781:
	lea edx,[ebp-0x48]
	push edx
	call ebx

 Block782:
	mov eax,dword ptr [ebp-0x28]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [ebp-4],0x27
	call edx
	mov eax,esi
	lea esp,[ebp-0x8C]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret
}
}
// CUIToolTip::AddOptionInfo
_SUB_EXCEPTION_HANDLER(48BDA0)
__SUB_CLASS_THIS(0048BDA0, __thiscall, 5766,  CUIToolTip, void, long, NakedParam<ZXString<char>>, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48BDA0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x14
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x24]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov edi,dword ptr [esp+0x34]
	push edi
	lea eax,[esp+0x14]
	push eax
	mov dword ptr [esp+0x34],0
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esi+0x4A8]
	lea ecx,[eax+eax*8]
	lea ebp,[esi+ecx*4+0x4AC]
	lea edx,[esp+0x38]
	push edx
	lea ecx,[ebp+0xC]
	mov byte ptr [esp+0x30],1
	mov dword ptr [ebp+8],edi
	call ZXString<char>::op_assign
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x14]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	mov eax,dword ptr [esp+0x38]
	lea edx,[esp+0x14]
	push edx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x38],2
	call _xbstr_t::_ctor_0
	mov edi,dword ptr [esp+0x18]
	mov byte ptr [esp+0x34],3
	test edi,edi
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	mov ecx,edi
	mov byte ptr [esp+0x34],2
	call IWzFont::CalcTextWidth
	add dword ptr [ebp],eax
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0x2C],1
	jne Block7

 Block5:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block8

 Block6:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block8

 Block7:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block8:
	mov eax,dword ptr [esp+0x3C]
	push offset _S_
	lea ecx,[ebp+0x1C]
	mov dword ptr [ebp+0x10],eax
	call ZXString<char>::AssignCStr
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0x14]
	lea edx,[esp+0x34]
	push edx
	push edi
	mov dword ptr [esp+0x3C],0
	call eax
	test eax,eax
	jge Block10

 Block9:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push edi
	push eax
	call _com_issue_errorex

 Block10:
	mov eax,dword ptr [esi+0x4A8]
	mov edx,dword ptr [esp+0x34]
	lea ecx,[eax+eax*8]
	mov dword ptr [esi+ecx*4+0x4B0],edx
	mov eax,dword ptr [esi+0x4A8]
	lea eax,[eax+eax*8]
	mov eax,dword ptr [esi+eax*4+0x4AC]
	add eax,0x14
	cmp dword ptr [esi+0xC],eax
	jge Block12

 Block11:
	mov dword ptr [esi+0xC],eax

 Block12:
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0x14]
	lea edx,[esp+0x34]
	push edx
	push edi
	mov dword ptr [esp+0x3C],0
	call eax
	test eax,eax
	jge Block14

 Block13:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push edi
	push eax
	call _com_issue_errorex

 Block14:
	mov ecx,dword ptr [esp+0x34]
	inc dword ptr [esi+0x4A8]
	add ecx,8
	add dword ptr [esi+8],ecx
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	push edi
	mov byte ptr [esp+0x30],0
	call eax
	mov eax,dword ptr [esp+0x38]
	mov dword ptr [esp+0x2C],0xFFFFFFFF
	test eax,eax
	je Block16

 Block15:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block16:
	mov ecx,dword ptr [esp+0x24]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x20
	ret 0xC
}
}
// CUIToolTip::DrawTextEquip_Req_Level
_SUB_EXCEPTION_HANDLER(48DAB0)
__SUB_CLASS_THIS(0048DAB0, __thiscall, 5783,  CUIToolTip, void, long, long, long, long, long, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48DAB0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x3C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x50]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x14],esi
	xor ebx,ebx
	cmp dword ptr [esp+0x78],ebx
	jne Block2

 Block1:
	mov dword ptr [esp+0x78],0x5E

 Block2:
	mov eax,3
	mov word ptr [esp+0x30],ax
	mov dword ptr [esp+0x38],ebx
	mov ecx,dword ptr [esi+0x10]
	mov dword ptr [esp+0x58],ebx
	cmp ecx,ebx
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x1C]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x30],8
	mov byte ptr [esp+0x58],2
	jne Block7

 Block5:
	mov eax,dword ptr [esp+0x38]
	xor ecx,ecx
	mov word ptr [esp+0x30],cx
	cmp eax,ebx
	je Block8

 Block6:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block8

 Block7:
	lea edx,[esp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block8:
	mov eax,dword ptr [esp+0x60]
	cmp eax,ebx
	je Block11

 Block9:
	mov ecx,dword ptr [esp+0x64]
	mov edx,dword ptr [esp+0x68]
	add ecx,edx
	cmp ecx,eax
	jge Block11

 Block10:
	mov edx,1
	jmp Block12

 Block11:
	xor edx,edx

 Block12:
	mov eax,3
	mov ecx,0xFF
	mov dword ptr [esp+0x64],edx
	mov word ptr [esp+0x20],ax
	mov dword ptr [esp+0x28],ecx
	mov edi,dword ptr [esp+0x18]
	mov byte ptr [esp+0x58],al
	mov eax,dword ptr [esp+0x6C]
	lea edx,[edx+eax*2+0x266]
	mov edx,dword ptr [esi+edx*4]
	cmp edi,ebx
	jne Block14

 Block13:
	push 0x80004003
	call _com_issue_error

 Block14:
	mov ebx,dword ptr [esp+0x20]
	lea esi,[eax+eax*2]
	mov eax,dword ptr [esp+0x70]
	add esi,esi
	sub esp,0x10
	add esi,esi
	lea eax,[esi+eax+0x20]
	mov dword ptr [esp+0x7C],eax
	mov ebp,eax
	mov eax,esp
	mov dword ptr [eax],ebx
	mov ebx,dword ptr [esp+0x34]
	mov dword ptr [eax+4],ebx
	mov ebx,dword ptr [esp+0x88]
	push edx
	mov dword ptr [eax+8],ecx
	mov ecx,dword ptr [esp+0x40]
	push ebp
	mov dword ptr [eax+0xC],ecx
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x80]
	push ebx
	push edi
	call edx
	test eax,eax
	jge Block16

 Block15:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block16:
	cmp word ptr [esp+0x20],8
	mov byte ptr [esp+0x58],2
	jne Block19

 Block17:
	xor eax,eax
	mov word ptr [esp+0x20],ax
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block20

 Block18:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block20

 Block19:
	lea ecx,[esp+0x20]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block20:
	cmp dword ptr [esp+0x74],0
	je Block41

 Block21:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x84],esp
	push 0x1AC4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x20]
	mov ecx,dword ptr [eax+0x9C8]
	mov byte ptr [esp+0x64],4
	test ecx,ecx
	jne Block23

 Block22:
	push 0x80004003
	call _com_issue_error

 Block23:
	lea edx,[esp+0x4C]
	push edx
	mov byte ptr [esp+0x68],2
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0x60],5
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x7C]
	mov dword ptr [esp+0x7C],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block26

 Block24:
	cmp eax,0x80004002
	je Block26

 Block25:
	push eax
	call _com_issue_error

 Block26:
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0x58],7
	jne Block29

 Block27:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block30:
	mov edx,3
	mov word ptr [esp+0x20],dx
	mov dword ptr [esp+0x28],0xFF
	mov ebp,dword ptr [esp+0x78]
	mov byte ptr [esp+0x58],8
	test ebp,ebp
	jne Block32

 Block31:
	push 0x80004003
	call _com_issue_error

 Block32:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x74]
	lea ecx,[esp+0x60]
	push ecx
	push ebp
	mov dword ptr [esp+0x68],0
	call edx
	test eax,eax
	jge Block34

 Block33:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block34:
	mov eax,dword ptr [esp+0x60]
	mov ecx,dword ptr [ebp]
	lea edx,[esp+0x68]
	push edx
	mov dword ptr [esp+0x68],eax
	mov eax,dword ptr [ecx+0x6C]
	push ebp
	mov dword ptr [esp+0x70],0
	call eax
	test eax,eax
	jge Block36

 Block35:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block36:
	sub esi,dword ptr [esp+0x64]
	mov edx,dword ptr [esp+0x70]
	sub ebx,dword ptr [esp+0x68]
	lea ecx,[esp+0x20]
	push ecx
	push ebp
	lea eax,[esi+edx+0x20]
	push eax
	add ebx,0x32
	push ebx
	mov ecx,edi
	call IWzCanvas::Copy
	cmp word ptr [esp+0x20],8
	mov byte ptr [esp+0x58],7
	jne Block39

 Block37:
	mov eax,dword ptr [esp+0x28]
	xor ecx,ecx
	mov word ptr [esp+0x20],cx
	test eax,eax
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	mov byte ptr [esp+0x5C],2
	call ecx
	jmp Block55

 Block39:
	lea edx,[esp+0x20]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block40:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	mov byte ptr [esp+0x5C],2
	call ecx
	jmp Block55

 Block41:
	mov ecx,dword ptr [esp+0x68]
	test ecx,ecx
	je Block48

 Block42:
	cmp dword ptr [esp+0x64],0
	mov ebp,dword ptr [esp+0x14]
	jne Block44

 Block43:
	add ebp,0xA2C
	jmp Block45

 Block44:
	add ebp,0x9CC

 Block45:
	mov eax,dword ptr [esp+0x60]
	sub eax,ecx
	mov edx,0
	sets dl
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x80],esp
	dec edx
	and edx,eax
	mov eax,dword ptr [ebp]
	mov esi,edx
	mov dword ptr [ecx],eax
	test eax,eax
	je Block47

 Block46:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block47:
	mov eax,dword ptr [esp+0x74]
	push esi
	push eax
	jmp Block54

 Block48:
	cmp dword ptr [esp+0x64],0
	mov eax,dword ptr [esp+0x14]
	jne Block50

 Block49:
	add eax,0x9C8
	jmp Block51

 Block50:
	add eax,0x9CC

 Block51:
	mov eax,dword ptr [eax]
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x80],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block53

 Block52:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block53:
	mov eax,dword ptr [esp+0x68]
	push eax
	push ebp

 Block54:
	add ebx,0x32
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [eax],edi
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+4]
	mov dword ptr [esp+0x90],esp
	push edi
	call edx
	call draw_number_by_image
	add esp,0x18

 Block55:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov dword ptr [esp+0x5C],0xFFFFFFFF
	call ecx
	mov ecx,dword ptr [esp+0x50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 0x1C
}
}
// CUIToolTip::SetToolTip_Package
_SUB_EXCEPTION_HANDLER(49B0A0)
__SUB_CLASS_THIS(0049B0A0, __thiscall, 5730,  CUIToolTip, void, long, long, NakedParam<ZRef<CS_COMMODITY>>, int32_t, CS_LIMITGOODS*) {
__asm {

 Block0:
	push ebp
	lea ebp,[esp-0x60]
	sub esp,0x60
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_49B0A0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x284
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp+0x5C],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [ebp+4],ebx
	xor esi,esi
	cmp dword ptr [ebx+0x10],esi
	mov dword ptr [ebp-4],esi
	sete al
	test al,al
	sete al
	test al,al
	je Block4

 Block1:
	mov eax,dword ptr [ebx+0x18]
	cmp eax,dword ptr [ebp+0x68]
	jne Block4

 Block2:
	mov ecx,dword ptr [ebx+0x1C]
	cmp ecx,dword ptr [ebp+0x6C]
	jne Block4

 Block3:
	lea ecx,[ebp+0x70]
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ZRef<CS_COMMODITY>::~ZRef<CS_COMMODITY>
	jmp Block456

 Block4:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x190]
	push edx
	call edi
	lea eax,[ebp-0x190]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block6

 Block5:
	push eax
	call _com_issue_error

 Block6:
	lea ecx,[ebp-0x180]
	push ecx
	mov byte ptr [ebp-4],1
	call edi
	lea edx,[ebp-0x180]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block8

 Block7:
	push eax
	call _com_issue_error

 Block8:
	push esi
	push esi
	lea eax,[ebp-0x190]
	push eax
	lea ecx,[ebp-0x180]
	push ecx
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x4C],esp
	push 0xB74
	push edx
	mov byte ptr [ebp-4],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [ebp-4],3
	cmp dword ptr [_D_G_RM],esi
	jne Block10

 Block9:
	push 0x80004003
	call _com_issue_error

 Block10:
	lea eax,[ebp-0x230]
	mov byte ptr [ebp-4],2
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],4
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x70]
	mov dword ptr [ebp-0x70],esi
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,esi
	jge Block13

 Block11:
	cmp eax,0x80004002
	je Block13

 Block12:
	push eax
	call _com_issue_error

 Block13:
	cmp word ptr [ebp-0x230],8
	mov edi,dword ptr [ZImports::_VariantClear]
	mov byte ptr [ebp-4],6
	jne Block16

 Block14:
	mov eax,dword ptr [ebp-0x228]
	xor ecx,ecx
	mov word ptr [ebp-0x230],cx
	cmp eax,esi
	je Block17

 Block15:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block16:
	lea edx,[ebp-0x230]
	push edx
	call edi

 Block17:
	cmp word ptr [ebp-0x180],8
	mov byte ptr [ebp-4],7
	jne Block20

 Block18:
	xor eax,eax
	mov word ptr [ebp-0x180],ax
	mov eax,dword ptr [ebp-0x178]
	cmp eax,esi
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea ecx,[ebp-0x180]
	push ecx
	call edi

 Block21:
	cmp word ptr [ebp-0x190],8
	mov byte ptr [ebp-4],8
	jne Block24

 Block22:
	mov eax,dword ptr [ebp-0x188]
	xor edx,edx
	mov word ptr [ebp-0x190],dx
	cmp eax,esi
	je Block25

 Block23:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block25

 Block24:
	lea eax,[ebp-0x190]
	push eax
	call edi

 Block25:
	push esi
	push esi
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x4C],esp
	push 0x759
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edi,dword ptr [ebp-0x70]
	mov byte ptr [ebp-4],9
	cmp edi,esi
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	lea edx,[ebp-0x280]
	push edx
	mov ecx,edi
	mov byte ptr [ebp-4],8
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xA
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x6C]
	mov dword ptr [ebp-0x6C],esi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block30

 Block28:
	cmp eax,0x80004002
	je Block30

 Block29:
	push eax
	call _com_issue_error

 Block30:
	cmp word ptr [ebp-0x280],8
	mov byte ptr [ebp-4],0xC
	jne Block33

 Block31:
	xor eax,eax
	mov word ptr [ebp-0x280],ax
	mov eax,dword ptr [ebp-0x278]
	cmp eax,esi
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea ecx,[ebp-0x280]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block34:
	push esi
	push esi
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x4C],esp
	push 0x5A8
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[ebp-0x260]
	mov byte ptr [ebp-4],0xD
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],0xC
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xE
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x58]
	mov dword ptr [ebp-0x58],esi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block37

 Block35:
	cmp eax,0x80004002
	je Block37

 Block36:
	push eax
	call _com_issue_error

 Block37:
	cmp word ptr [ebp-0x260],8
	mov byte ptr [ebp-4],0x10
	jne Block40

 Block38:
	mov eax,dword ptr [ebp-0x258]
	xor ecx,ecx
	mov word ptr [ebp-0x260],cx
	cmp eax,esi
	je Block41

 Block39:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block41

 Block40:
	lea edx,[ebp-0x260]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block41:
	push esi
	push esi
	push ecx
	mov dword ptr [ebp+0x4C],esp
	mov ecx,esp
	push offset _S_BONUS
	call _xbstr_t::_ctor_0
	lea eax,[ebp-0x240]
	mov byte ptr [ebp-4],0x11
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],0x10
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x12
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x60]
	mov dword ptr [ebp-0x60],esi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block44

 Block42:
	cmp eax,0x80004002
	je Block44

 Block43:
	push eax
	call _com_issue_error

 Block44:
	cmp word ptr [ebp-0x240],8
	mov byte ptr [ebp-4],0x14
	jne Block47

 Block45:
	mov eax,dword ptr [ebp-0x238]
	xor ecx,ecx
	mov word ptr [ebp-0x240],cx
	cmp eax,esi
	je Block48

 Block46:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block48

 Block47:
	lea edx,[ebp-0x240]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block48:
	push esi
	push esi
	push ecx
	mov eax,esp
	mov dword ptr [ebp+0x4C],esp
	push 0x1AA0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea ecx,[ebp-0x250]
	push ecx
	mov byte ptr [ebp-4],0x15
	mov ecx,edi
	mov byte ptr [ebp-4],0x14
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x16
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x14]
	mov dword ptr [ebp-0x14],esi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block51

 Block49:
	cmp eax,0x80004002
	je Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	cmp word ptr [ebp-0x250],8
	mov byte ptr [ebp-4],0x18
	jne Block54

 Block52:
	mov eax,dword ptr [ebp-0x248]
	xor edx,edx
	mov word ptr [ebp-0x250],dx
	cmp eax,esi
	je Block55

 Block53:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block55

 Block54:
	lea eax,[ebp-0x250]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block55:
	push esi
	push esi
	push ecx
	mov ecx,esp
	mov dword ptr [ebp+0x4C],esp
	push 0xB75
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea edx,[ebp-0x270]
	mov byte ptr [ebp-4],0x19
	push edx
	mov ecx,edi
	mov byte ptr [ebp-4],0x18
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0x1A
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x54]
	mov dword ptr [ebp-0x54],esi
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,esi
	jge Block58

 Block56:
	cmp eax,0x80004002
	je Block58

 Block57:
	push eax
	call _com_issue_error

 Block58:
	mov edi,8
	mov byte ptr [ebp-4],0x1C
	cmp word ptr [ebp-0x270],di
	jne Block61

 Block59:
	xor eax,eax
	mov word ptr [ebp-0x270],ax
	mov eax,dword ptr [ebp-0x268]
	cmp eax,esi
	je Block62

 Block60:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block62

 Block61:
	lea ecx,[ebp-0x270]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block62:
	lea edx,[ebp+0x44]
	push esi
	push edx
	call get_basic_font
	add esp,8
	mov dword ptr [ebp-0x20],esi
	lea eax,[ebp+0x40]
	push 0x5AF
	push eax
	mov byte ptr [ebp-4],0x1E
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push esi
	lea ecx,[ebp-0x20]
	push ecx
	push eax
	mov byte ptr [ebp-4],0x1F
	call PcCreate_IWzFont
	mov eax,dword ptr [ebp+0x40]
	add esp,0xC
	mov byte ptr [ebp-4],0x1E
	cmp eax,esi
	je Block64

 Block63:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block64:
	lea edx,[ebp+8]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[ebp+8]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,esi
	jge Block66

 Block65:
	push eax
	call _com_issue_error

 Block66:
	lea ecx,[ebp+8]
	push ecx
	push 0xFFF71034
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [ebp+0x4C],esp
	push 0x1A25
	push edx
	mov byte ptr [ebp-4],0x20
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [ebp-0x20]
	mov byte ptr [ebp-4],0x21
	cmp ecx,esi
	jne Block68

 Block67:
	push 0x80004003
	call _com_issue_error

 Block68:
	mov byte ptr [ebp-4],0x20
	call IWzFont::Create
	mov byte ptr [ebp-4],0x1E
	cmp word ptr [ebp+8],di
	jne Block71

 Block69:
	xor eax,eax
	mov word ptr [ebp+8],ax
	mov eax,dword ptr [ebp+0x10]
	cmp eax,esi
	je Block72

 Block70:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block72

 Block71:
	lea ecx,[ebp+8]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block72:
	mov edx,dword ptr [ebp+0x74]
	mov eax,dword ptr [edx+0x68]
	cmp eax,esi
	jne Block74

 Block73:
	xor eax,eax
	jmp Block75

 Block74:
	mov eax,dword ptr [eax-4]

 Block75:
	mov ecx,dword ptr [ebp+0x78]
	neg ecx
	sbb ecx,ecx
	imul eax,0x35
	and ecx,0xFFFFFFE7
	add ecx,0x19
	sub eax,ecx
	push 0xFFFFFFFF
	add eax,0x41
	push eax
	push 0x104
	mov dword ptr [ebp-0x50],ecx
	push 9
	mov ecx,ebx
	call CUIToolTip::SetBasicInfo
	mov eax,dword ptr [ebp+0x74]
	mov eax,dword ptr [eax+0x68]
	cmp eax,esi
	jne Block77

 Block76:
	xor edi,edi
	jmp Block78

 Block77:
	mov edi,dword ptr [eax-4]

 Block78:
	xor ecx,ecx
	cmp edi,9
	setg cl
	mov dword ptr [ebp-0x4C],edi
	mov dword ptr [ebp+0x30],ecx
	cmp ecx,esi
	je Block80

 Block79:
	lea eax,[edi+1]
	cdq
	sub eax,edx
	sar eax,1
	mov dword ptr [ebp-0x24],eax
	jmp Block81

 Block80:
	mov dword ptr [ebp-0x24],edi

 Block81:
	cmp edi,esi
	mov dword ptr [ebp-0x18],esi
	jle Block106

 Block82:
	xor ebx,ebx
	mov edi,ebx

 Block83:
	cmp edi,dword ptr [ebp-0x24]
	jne Block85

 Block84:
	mov ecx,dword ptr [ebp+4]
	mov edx,dword ptr [ecx+0xC]
	mov dword ptr [ebp-0x18],edx

 Block85:
	mov eax,dword ptr [ebp+0x74]
	mov ecx,dword ptr [eax+0x68]
	mov edx,dword ptr [ecx+edi*4]
	lea eax,[ecx+edi*4]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edx
	lea eax,[ebp+0x54]
	push eax
	call CWvsContext::GetCommodityBySN
	mov ecx,dword ptr [ebp+0x58]
	mov eax,dword ptr [ecx+0xC]
	add eax,0xFAA2B580
	mov byte ptr [ebp-4],0x22
	cmp eax,0xF423F
	ja Block89

 Block86:
	add ecx,4
	push ecx
	mov byte ptr [ebp-4],0x1E
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block103

 Block87:
	mov ecx,dword ptr [ebp+0x58]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebp+0x58]
	cmp ecx,ebx
	je Block103

 Block88:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax
	jmp Block103

 Block89:
	lea ecx,[ebp+8]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp+8]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block5

 Block90:
	mov ecx,dword ptr [ebp+0x58]
	lea eax,[ebp+8]
	push eax
	add ecx,0x10
	mov byte ptr [ebp-4],0x23
	call TSecType<long>::GetData
	push eax
	lea ecx,[ebp+0x40]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemName
	mov eax,dword ptr [eax]
	push ecx
	mov dword ptr [ebp+0x4C],esp
	mov ecx,esp
	push eax
	mov byte ptr [ebp-4],0x24
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0x25
	cmp ecx,ebx
	je Block9

 Block91:
	mov byte ptr [ebp-4],0x24
	call IWzFont::CalcTextWidth
	mov esi,eax
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],0x23
	cmp eax,ebx
	je Block93

 Block92:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block93:
	cmp word ptr [ebp+8],8
	mov byte ptr [ebp-4],0x22
	jne Block96

 Block94:
	mov eax,dword ptr [ebp+0x10]
	xor edx,edx
	mov word ptr [ebp+8],dx
	cmp eax,ebx
	je Block97

 Block95:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block97

 Block96:
	lea eax,[ebp+8]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block97:
	mov ecx,dword ptr [ebp-0x18]
	mov edx,dword ptr [ebp+4]
	lea eax,[esi+ecx+0x64]
	mov ecx,dword ptr [edx+0xC]
	cmp eax,ecx
	jge Block99

 Block98:
	mov eax,ecx

 Block99:
	mov dword ptr [edx+0xC],eax
	mov eax,dword ptr [ebp+0x58]
	mov byte ptr [ebp-4],0x1E
	cmp eax,ebx
	je Block104

 Block100:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block103

 Block101:
	mov edx,dword ptr [ebp+0x58]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebp+0x58]
	cmp ecx,ebx
	je Block103

 Block102:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block103:
	mov dword ptr [ebp+0x58],ebx

 Block104:
	inc edi
	cmp edi,dword ptr [ebp-0x4C]
	jl Block83

 Block105:
	mov edi,dword ptr [ebp-0x4C]
	mov ebx,dword ptr [ebp+4]
	mov ecx,dword ptr [ebp+0x30]
	xor esi,esi

 Block106:
	mov eax,dword ptr [ebx+0xC]
	cmp eax,0xDC
	jg Block108

 Block107:
	mov eax,0xDC

 Block108:
	mov dword ptr [ebx+0xC],eax
	cmp ecx,esi
	jne Block110

 Block109:
	mov dword ptr [ebp-0x18],eax

 Block110:
	mov ecx,dword ptr [ebp+0x74]
	add ecx,0x10
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[ebp-0x5C]
	push eax
	call CItemInfo::GetSpecialDesc
	mov esi,dword ptr [ebx+0xC]
	sub esi,0x15
	cmp dword ptr [ebp+0x78],0
	mov byte ptr [ebp-4],0x26
	mov dword ptr [ebp+0x2C],0
	mov dword ptr [ebp+0x30],esi
	je Block114

 Block111:
	push 1
	push 0
	push 0
	push ecx
	mov ecx,dword ptr [ebp+0x44]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [ebp+0x44]
	mov dword ptr [ebp+0x4C],esp
	test eax,eax
	je Block113

 Block112:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block113:
	mov ecx,dword ptr [ebp-0x5C]
	push ecx
	push 0x23
	push esi
	push 0xB
	mov ecx,ebx
	call CUIToolTip::DrawTextSepartedLine
	mov dword ptr [ebp+0x2C],eax

 Block114:
	mov eax,dword ptr [ebp-0x24]
	mov edx,dword ptr [ebp+0x2C]
	imul eax,0x35
	mov dword ptr [ebp+0x4C],eax
	sub eax,dword ptr [ebp-0x50]
	xor esi,esi
	lea eax,[eax+edx+0x41]
	mov dword ptr [ebx+8],eax
	mov dword ptr [ebp-0x64],esi
	mov ecx,dword ptr [ebp+0x7C]
	push ecx
	lea edx,[ebp-0x64]
	push edx
	mov ecx,ebx
	mov byte ptr [ebp-4],0x27
	call CUIToolTip::MakingLimitInfo
	push esi
	push offset _S_
	push esi
	push esi
	lea ecx,[ebp-0x30]
	mov dword ptr [ebp-0x30],esi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[ebp-0x30]
	call ZXString<char>::ReleaseBuffer
	mov byte ptr [ebp-4],0x28
	test edi,edi
	jle Block129

 Block115:
	mov eax,dword ptr [ebp+0x74]
	mov ecx,dword ptr [eax+0x68]
	mov edx,dword ptr [ecx+esi*4]
	lea eax,[ecx+esi*4]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	push edx
	lea eax,[ebp+0x54]
	push eax
	call CWvsContext::GetCommodityBySN
	mov ecx,dword ptr [ebp+0x58]
	add ecx,0x10
	mov byte ptr [ebp-4],0x29
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	cmp ecx,0xBE
	je Block123

 Block116:
	mov eax,dword ptr [ebp+0x58]
	mov byte ptr [ebp-4],0x28
	test eax,eax
	je Block121

 Block117:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block120

 Block118:
	mov edx,dword ptr [ebp+0x58]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebp+0x58]
	test ecx,ecx
	je Block120

 Block119:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block120:
	mov dword ptr [ebp+0x58],0

 Block121:
	inc esi
	cmp esi,edi
	jl Block115

 Block122:
	jmp Block129

 Block123:
	mov ecx,dword ptr [ebp+0x58]
	add ecx,0x10
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[ebp+0x40]
	push eax
	call CItemInfo::GetItemDesc
	push eax
	lea ecx,[ebp-0x30]
	mov byte ptr [ebp-4],0x2A
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp+0x40]
	mov byte ptr [ebp-4],0x29
	test eax,eax
	je Block125

 Block124:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block125:
	push 1
	push 0
	push 0
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x2C],esp
	push 0xA
	push ecx
	mov ecx,ebx
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [ebp-0x30]
	push edx
	push 0
	push 0x10E
	push 0x5C
	mov ecx,ebx
	call CUIToolTip::DrawTextSepartedLine
	add dword ptr [ebx+8],eax
	mov eax,dword ptr [ebp+0x58]
	mov byte ptr [ebp-4],0x28
	test eax,eax
	je Block129

 Block126:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block129

 Block127:
	mov eax,dword ptr [ebp+0x58]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebp+0x58]
	test ecx,ecx
	je Block129

 Block128:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block129:
	mov ecx,dword ptr [ebp+0x6C]
	mov edx,dword ptr [ebp+0x68]
	xor esi,esi
	push esi
	push 0xCC0E395A
	push esi
	push esi
	push 1
	push ecx
	push edx
	lea eax,[ebp+0x50]
	push eax
	mov ecx,ebx
	call CUIToolTip::MakeLayer
	mov ecx,dword ptr [ebp+0x74]
	add ecx,0x10
	mov byte ptr [ebp-4],0x2B
	call TSecType<long>::GetData
	push eax
	lea ecx,[ebp-0x7C]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCashPackageName
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x2C],esp
	push 1
	push edx
	mov ecx,ebx
	mov byte ptr [ebp-4],0x2C
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [ebp-0x7C]
	push eax
	push 0xA
	mov ecx,ebx
	call CUIToolTip::DrawTextCenter
	cmp dword ptr [ebp+0x78],esi
	je Block135

 Block130:
	mov eax,dword ptr [ebp-0x5C]
	cmp eax,esi
	je Block135

 Block131:
	cmp byte ptr [eax],0
	je Block135

 Block132:
	push 1
	push esi
	push 1
	push ecx
	mov ecx,dword ptr [ebp+0x44]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [ebp+0x44]
	mov dword ptr [ebp-0x2C],esp
	cmp eax,esi
	je Block134

 Block133:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block134:
	mov ecx,dword ptr [ebp-0x5C]
	mov edx,dword ptr [ebp+0x30]
	push ecx
	push 0x23
	push edx
	push 0xB
	mov ecx,ebx
	call CUIToolTip::DrawTextSepartedLine

 Block135:
	mov dword ptr [ebp+0x48],esi
	mov eax,dword ptr [ebp+0x74]
	mov edx,dword ptr [ebp+0x2C]
	mov ecx,dword ptr [eax+0x64]
	add edx,0x1E
	cmp edi,esi
	mov byte ptr [ebp-4],0x2D
	mov dword ptr [ebp-0xD8],ecx
	mov dword ptr [ebp-0x68],esi
	mov dword ptr [ebp-0x48],esi
	mov dword ptr [ebp+0x40],edx
	mov dword ptr [ebp-0x34],esi
	jle Block359

 Block136:
	mov ebx,esi

 Block137:
	mov eax,dword ptr [ebp-0x24]
	xor ecx,ecx
	cmp ebx,eax
	setl cl
	xor edx,edx
	mov esi,ebx
	dec ecx
	and ecx,dword ptr [ebp-0x18]
	cmp ebx,eax
	setl dl
	mov edi,ecx
	lea ecx,[ebx*4]
	mov dword ptr [ebp+0x38],ecx
	dec edx
	and edx,eax
	mov eax,dword ptr [ebp+0x74]
	mov eax,dword ptr [eax+0x68]
	add eax,ecx
	mov ecx,dword ptr [eax]
	sub esi,edx
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[ebp+0x54]
	push edx
	call CWvsContext::GetCommodityBySN
	mov eax,dword ptr [ebp+0x58]
	mov eax,dword ptr [eax+0xC]
	add eax,0xFAA2B580
	mov ecx,0xF423F
	cmp ecx,eax
	sbb eax,eax
	inc eax
	add edi,0xD
	cmp dword ptr [ebp-0x14],0
	mov byte ptr [ebp-4],0x2E
	mov dword ptr [ebp+0x30],eax
	mov dword ptr [ebp+0x2C],edi
	je Block9

 Block138:
	mov edi,dword ptr [ebp-0x14]
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0x40]
	lea eax,[ebp+0x3C]
	push eax
	push edi
	mov dword ptr [ebp+0x3C],0
	call ecx
	test eax,eax
	jge Block140

 Block139:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block140:
	cmp ebx,dword ptr [ebp-0x24]
	mov edx,dword ptr [ebp+0x3C]
	mov eax,dword ptr [ebp+0x2C]
	lea ecx,[eax+edx+8]
	mov dword ptr [ebp+0x28],ecx
	jge Block142

 Block141:
	mov edx,dword ptr [ebp-0x18]
	mov dword ptr [ebp+0x3C],edx
	jmp Block143

 Block142:
	mov eax,dword ptr [ebp+4]
	mov ecx,dword ptr [eax+0xC]
	mov dword ptr [ebp+0x3C],ecx

 Block143:
	mov ecx,dword ptr [ebp+0x58]
	imul esi,0x35
	add esi,dword ptr [ebp+0x40]
	mov eax,dword ptr [ecx+0x2C]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFF7
	add eax,9
	add eax,esi
	lea edx,[esi+0xD]
	mov dword ptr [ebp-0x88],edx
	lea edx,[eax+9]
	add eax,0x19
	cmp dword ptr [ebp+0x78],0
	mov dword ptr [ebp],eax
	lea eax,[esi+0x28]
	mov dword ptr [ebp-0x74],esi
	mov dword ptr [ebp-0x78],edx
	mov dword ptr [ebp-0x2C],eax
	jne Block145

 Block144:
	add esi,0x19
	mov dword ptr [ebp-0x78],esi

 Block145:
	add ecx,0x10
	call TSecType<long>::GetData
	push 0
	push 0
	push eax
	lea ecx,[ebp+0x34]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemIcon
	mov ecx,dword ptr [ebp+0x58]
	add ecx,0x10
	mov byte ptr [ebp-4],0x2F
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[ebp-0x10]
	push edx
	call CItemInfo::GetItemName
	cmp dword ptr [ebp+0x30],0
	je Block174

 Block146:
	mov dword ptr [ebp-0x1C],0
	lea eax,[ebp-0xFC]
	push 0xD95
	push eax
	mov byte ptr [ebp-4],0x31
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [ebp+0x58]
	mov edx,dword ptr [ecx+0x38]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[ebp-0x1C]
	push eax
	mov byte ptr [ebp-4],0x32
	call ZXString<char>::Format
	mov eax,dword ptr [ebp-0xFC]
	add esp,0xC
	mov byte ptr [ebp-4],0x31
	test eax,eax
	je Block148

 Block147:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block148:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x210]
	push ecx
	call esi
	lea edx,[ebp-0x210]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block149:
	lea eax,[ebp-0x1B0]
	push eax
	mov byte ptr [ebp-4],0x33
	call esi
	lea ecx,[ebp-0x1B0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block150:
	mov ebx,dword ptr [ebp-0x1C]
	push 0
	push 0
	push 0xFFFFFFFF
	push ebx
	push 0
	push 0
	mov byte ptr [ebp-4],0x34
	call MultiByteToWideChar
	add eax,eax
	call __alloca_probe_16
	mov edi,esp
	push 0
	push 0
	lea edx,[ebp-0x210]
	push edx
	lea eax,[ebp-0x1B0]
	push eax
	push 0x3FFFFFFF
	push edi
	push 0xFFFFFFFF
	push ebx
	push 0
	push 0
	call MultiByteToWideChar
	push ecx
	mov dword ptr [ebp-0x28],esp
	mov ecx,esp
	push edi
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [ebp-4],0x35
	je Block9

 Block151:
	lea ecx,[ebp-0x290]
	push ecx
	mov byte ptr [ebp-4],0x34
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [ebp-4],0x36
	call Ztl_variant_t::GetUnknown
	test eax,eax
	je Block159

 Block152:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx]
	lea ecx,[ebp-0xE4]
	push ecx
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push eax
	call edx
	mov edi,eax
	xor eax,eax
	test edi,edi
	setl al
	dec eax
	and eax,dword ptr [ebp-0xE4]
	mov esi,eax
	mov eax,dword ptr [ebp+0x34]
	test eax,eax
	je Block154

 Block153:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block154:
	mov dword ptr [ebp+0x34],esi
	test edi,edi
	jge Block156

 Block155:
	cmp edi,0x80004002
	jne Block362

 Block156:
	mov esi,8
	mov byte ptr [ebp-4],0x34
	cmp word ptr [ebp-0x290],si
	jne Block161

 Block157:
	xor eax,eax
	mov word ptr [ebp-0x290],ax
	mov eax,dword ptr [ebp-0x288]
	test eax,eax
	je Block162

 Block158:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block162

 Block159:
	mov eax,dword ptr [ebp+0x34]
	test eax,eax
	je Block156

 Block160:
	mov dword ptr [ebp+0x34],0
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx
	jmp Block156

 Block161:
	lea ecx,[ebp-0x290]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block162:
	mov byte ptr [ebp-4],0x33
	cmp word ptr [ebp-0x1B0],si
	jne Block165

 Block163:
	mov eax,dword ptr [ebp-0x1A8]
	xor edx,edx
	mov word ptr [ebp-0x1B0],dx
	test eax,eax
	je Block166

 Block164:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block166

 Block165:
	lea eax,[ebp-0x1B0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block166:
	mov byte ptr [ebp-4],0x31
	cmp word ptr [ebp-0x210],si
	jne Block169

 Block167:
	mov eax,dword ptr [ebp-0x208]
	xor ecx,ecx
	mov word ptr [ebp-0x210],cx
	test eax,eax
	je Block170

 Block168:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block170

 Block169:
	lea edx,[ebp-0x210]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block170:
	lea eax,[ebp-0xF4]
	push 0x1A4F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[ebp-0x10]
	mov byte ptr [ebp-4],0x37
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebp-0xF4]
	mov byte ptr [ebp-4],0x31
	test eax,eax
	je Block172

 Block171:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block172:
	mov byte ptr [ebp-4],0x30
	test ebx,ebx
	je Block174

 Block173:
	add ebx,0xFFFFFFF4
	push ebx
	call ZXString<char>::_Release
	add esp,4

 Block174:
	mov ecx,3
	mov edx,0xFF
	mov word ptr [ebp-0xB0],cx
	mov dword ptr [ebp-0xA8],edx
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x38
	test ecx,ecx
	je Block9

 Block175:
	mov edi,dword ptr [ebp-0xB0]
	mov ebx,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp-0xAC]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp-0x14]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp-0xA4]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp-0x88]
	mov edx,dword ptr [ebp+0x2C]
	push edi
	push eax
	mov eax,dword ptr [ebx+0x80]
	push edx
	push ecx
	mov esi,ecx
	call eax
	xor ebx,ebx
	cmp eax,ebx
	jge Block177

 Block176:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block177:
	cmp word ptr [ebp-0xB0],8
	mov byte ptr [ebp-4],0x30
	jne Block180

 Block178:
	mov eax,dword ptr [ebp-0xA8]
	xor ecx,ecx
	mov word ptr [ebp-0xB0],cx
	cmp eax,ebx
	je Block181

 Block179:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block181

 Block180:
	lea edx,[ebp-0xB0]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block181:
	mov eax,3
	mov word ptr [ebp-0xA0],ax
	mov dword ptr [ebp-0x98],0xFF
	mov ecx,dword ptr [ebp+0x34]
	mov edx,dword ptr [edi]
	lea eax,[ebp-0x1C]
	push eax
	mov dword ptr [ebp-0xEC],ecx
	mov ecx,dword ptr [edx+0x48]
	push edi
	mov byte ptr [ebp-4],0x39
	mov dword ptr [ebp-0x1C],ebx
	call ecx
	cmp eax,ebx
	jge Block183

 Block182:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block183:
	mov eax,dword ptr [ebp+0x34]
	mov edx,dword ptr [ebp-0x1C]
	mov dword ptr [ebp-0xF8],edx
	cmp eax,ebx
	je Block9

 Block184:
	mov ecx,dword ptr [eax]
	lea edx,[ebp-0x90]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0x48]
	mov dword ptr [ebp-0x90],ebx
	call eax
	cmp eax,ebx
	jge Block186

 Block185:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block186:
	mov ecx,dword ptr [ebp-0x90]
	mov edx,dword ptr [edi]
	lea eax,[ebp-0x8C]
	push eax
	mov dword ptr [ebp-0x28],ecx
	mov ecx,dword ptr [edx+0x40]
	push edi
	mov dword ptr [ebp-0x8C],ebx
	call ecx
	cmp eax,ebx
	jge Block188

 Block187:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block188:
	mov eax,dword ptr [ebp+0x34]
	mov esi,dword ptr [ebp-0x8C]
	cmp eax,ebx
	je Block9

 Block189:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x40]
	lea ecx,[ebp-0x50]
	push ecx
	push eax
	mov edi,eax
	mov dword ptr [ebp-0x50],ebx
	call edx
	cmp eax,ebx
	jge Block191

 Block190:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block191:
	mov ecx,dword ptr [ebp+0x50]
	cmp ecx,ebx
	je Block9

 Block192:
	mov edx,dword ptr [ebp-0xA0]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [ebp-0x9C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp-0x98]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp-0x94]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp-0xEC]
	push eax
	mov eax,dword ptr [ebp-0xF8]
	sub eax,dword ptr [ebp-0x28]
	mov ebx,dword ptr [ecx]
	cdq
	sub eax,edx
	sar eax,1
	add eax,dword ptr [ebp-0x88]
	mov edi,ecx
	push eax
	mov eax,esi
	sub eax,dword ptr [ebp-0x50]
	cdq
	sub eax,edx
	sar eax,1
	add eax,dword ptr [ebp+0x2C]
	push eax
	push ecx
	mov ecx,dword ptr [ebx+0x80]
	call ecx
	test eax,eax
	jge Block194

 Block193:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block194:
	mov edi,8
	mov byte ptr [ebp-4],0x30
	cmp word ptr [ebp-0xA0],di
	jne Block197

 Block195:
	mov eax,dword ptr [ebp-0x98]
	xor edx,edx
	mov word ptr [ebp-0xA0],dx
	test eax,eax
	je Block198

 Block196:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block198

 Block197:
	lea eax,[ebp-0xA0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block198:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x1F0]
	push ecx
	call esi
	lea edx,[ebp-0x1F0]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block199:
	lea eax,[ebp-0x140]
	push eax
	mov byte ptr [ebp-4],0x3A
	call esi
	lea ecx,[ebp-0x140]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block200:
	mov ecx,dword ptr [ebp+0x44]
	lea edx,[ebp-0x1F0]
	push edx
	mov edx,dword ptr [ebp-0x10]
	lea eax,[ebp-0x140]
	push eax
	push ecx
	push ecx
	mov dword ptr [ebp-0x28],esp
	mov ecx,esp
	push edx
	mov byte ptr [ebp-4],0x3B
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x3C
	test ecx,ecx
	je Block9

 Block201:
	mov eax,dword ptr [ebp-0x78]
	mov edx,dword ptr [ebp+0x28]
	push eax
	push edx
	mov byte ptr [ebp-4],0x3B
	call IWzCanvas::DrawTextA
	mov byte ptr [ebp-4],0x3A
	cmp word ptr [ebp-0x140],di
	jne Block204

 Block202:
	xor eax,eax
	mov word ptr [ebp-0x140],ax
	mov eax,dword ptr [ebp-0x138]
	test eax,eax
	je Block205

 Block203:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block205

 Block204:
	lea ecx,[ebp-0x140]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block205:
	mov byte ptr [ebp-4],0x30
	cmp word ptr [ebp-0x1F0],di
	jne Block208

 Block206:
	mov eax,dword ptr [ebp-0x1E8]
	xor edx,edx
	mov word ptr [ebp-0x1F0],dx
	test eax,eax
	je Block209

 Block207:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block209

 Block208:
	lea eax,[ebp-0x1F0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block209:
	mov ecx,3
	mov edx,0xFF
	mov word ptr [ebp-0xC0],cx
	mov dword ptr [ebp-0xB8],edx
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x3D
	test ecx,ecx
	je Block9

 Block210:
	mov ebx,dword ptr [ebp-0xC0]
	mov esi,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebx
	mov ebx,dword ptr [ebp-0xBC]
	mov dword ptr [eax+4],ebx
	mov ebx,dword ptr [ebp-0x74]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp-0xB4]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp-0x6C]
	push eax
	mov eax,dword ptr [ebp+0x2C]
	lea edx,[ebx+0x35]
	push edx
	push eax
	mov edi,ecx
	push ecx
	mov ecx,dword ptr [esi+0x80]
	call ecx
	test eax,eax
	jge Block212

 Block211:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block212:
	mov edi,8
	mov byte ptr [ebp-4],0x30
	cmp word ptr [ebp-0xC0],di
	jne Block215

 Block213:
	mov eax,dword ptr [ebp-0xB8]
	xor edx,edx
	mov word ptr [ebp-0xC0],dx
	test eax,eax
	je Block216

 Block214:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block216

 Block215:
	lea eax,[ebp-0xC0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block216:
	cmp dword ptr [ebp+0x78],0
	je Block347

 Block217:
	cmp dword ptr [ebp+0x30],0
	je Block238

 Block218:
	lea ecx,[ebp-0xD4]
	push 0xD96
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [ebp+0x58]
	mov ecx,dword ptr [edx+0x38]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[ebp+0x48]
	push edx
	mov byte ptr [ebp-4],0x3E
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp-0xD4]
	add esp,0xC
	mov byte ptr [ebp-4],0x30
	test eax,eax
	je Block220

 Block219:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block220:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x1D0]
	push eax
	call esi
	lea ecx,[ebp-0x1D0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block221:
	lea edx,[ebp-0x160]
	push edx
	mov byte ptr [ebp-4],0x3F
	call esi
	lea eax,[ebp-0x160]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block222:
	mov eax,dword ptr [ebp+0x44]
	lea ecx,[ebp-0x1D0]
	push ecx
	lea edx,[ebp-0x160]
	push edx
	mov edx,dword ptr [ebp+0x48]
	push eax
	push ecx
	mov dword ptr [ebp-0x2C],esp
	mov ecx,esp
	push edx
	mov byte ptr [ebp-4],0x40
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x41
	test ecx,ecx
	je Block9

 Block223:
	mov eax,dword ptr [ebp+0x28]
	add ebx,0x19
	push ebx
	push eax
	mov byte ptr [ebp-4],0x40
	call IWzCanvas::DrawTextA
	mov byte ptr [ebp-4],0x3F
	cmp word ptr [ebp-0x160],di
	jne Block226

 Block224:
	mov eax,dword ptr [ebp-0x158]
	xor ecx,ecx
	mov word ptr [ebp-0x160],cx
	test eax,eax
	je Block227

 Block225:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block227

 Block226:
	lea edx,[ebp-0x160]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block227:
	mov byte ptr [ebp-4],0x30
	cmp word ptr [ebp-0x1D0],di
	jne Block230

 Block228:
	xor eax,eax
	mov word ptr [ebp-0x1D0],ax
	mov eax,dword ptr [ebp-0x1C8]
	test eax,eax
	je Block231

 Block229:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block231

 Block230:
	lea ecx,[ebp-0x1D0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block231:
	mov eax,dword ptr [ebp-0x10]
	mov byte ptr [ebp-4],0x2F
	test eax,eax
	je Block233

 Block232:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block233:
	mov eax,dword ptr [ebp+0x34]
	mov byte ptr [ebp-4],0x2E
	test eax,eax
	je Block235

 Block234:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block235:
	mov eax,dword ptr [ebp+0x58]
	mov byte ptr [ebp-4],0x2D
	test eax,eax
	je Block357

 Block236:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block356

 Block237:
	mov ecx,dword ptr [ebp+0x58]
	add ecx,4
	push ecx
	jmp Block354

 Block238:
	mov ecx,dword ptr [ebp+0x74]
	mov eax,dword ptr [ecx+0x6C]
	add eax,dword ptr [ebp+0x38]
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	mov edx,dword ptr [eax]
	push edx
	lea eax,[ebp-0x84]
	push eax
	call CWvsContext::GetCommodityBySN
	mov ecx,dword ptr [ebp-0x80]
	mov edi,dword ptr [ecx+0x70]
	mov esi,dword ptr [ebp+0x58]
	mov ecx,0x64
	sub ecx,dword ptr [ebp-0xD8]
	add dword ptr [ebp-0x48],edi
	imul ecx,dword ptr [esi+0x70]
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov ebx,edx
	shr ebx,0x1F
	add ebx,edx
	cmp dword ptr [esi+0x24],0
	mov byte ptr [ebp-4],0x42
	mov dword ptr [ebp-0x28],edi
	mov dword ptr [ebp-0x74],ebx
	jne Block240

 Block239:
	add dword ptr [ebp-0x68],ebx

 Block240:
	cmp dword ptr [esi+0x1C],2
	jl Block242

 Block241:
	lea edx,[ebp-0xE0]
	push 0xAAF
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov ecx,dword ptr [ebp+0x58]
	mov edx,dword ptr [ecx+0x1C]
	mov eax,dword ptr [eax]
	push edi
	push edx
	push eax
	lea eax,[ebp+0x48]
	push eax
	mov byte ptr [ebp-4],0x43
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp-0xE0]
	add esp,0x10
	jmp Block243

 Block242:
	lea ecx,[ebp-0xE8]
	push 0xAAE
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea edx,[ebp+0x48]
	push edx
	mov byte ptr [ebp-4],0x44
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp-0xE8]
	add esp,0xC

 Block243:
	mov byte ptr [ebp-4],0x42
	test eax,eax
	je Block245

 Block244:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block245:
	mov eax,dword ptr [ebp+0x58]
	cmp dword ptr [eax+0x24],0
	je Block267

 Block246:
	lea ecx,[ebp-0xF0]
	push 0xAAF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [ebp+0x58]
	mov ecx,dword ptr [edx+0x1C]
	mov eax,dword ptr [eax]
	push edi
	push ecx
	push eax
	lea edx,[ebp+0x48]
	push edx
	mov byte ptr [ebp-4],0x45
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp-0xF0]
	add esp,0x10
	mov byte ptr [ebp-4],0x42
	test eax,eax
	je Block248

 Block247:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block248:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[ebp-0x1E0]
	push eax
	call esi
	lea ecx,[ebp-0x1E0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block249:
	lea edx,[ebp-0x110]
	push edx
	mov byte ptr [ebp-4],0x46
	call esi
	lea eax,[ebp-0x110]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block250:
	mov eax,dword ptr [ebp-0x20]
	lea ecx,[ebp-0x1E0]
	push ecx
	lea edx,[ebp-0x110]
	push edx
	mov edx,dword ptr [ebp+0x48]
	push eax
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push edx
	mov byte ptr [ebp-4],0x47
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x48
	test ecx,ecx
	je Block9

 Block251:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [ebp+0x28]
	push eax
	push edx
	mov byte ptr [ebp-4],0x47
	call IWzCanvas::DrawTextA
	mov esi,8
	mov byte ptr [ebp-4],0x46
	cmp word ptr [ebp-0x110],si
	jne Block254

 Block252:
	xor eax,eax
	mov word ptr [ebp-0x110],ax
	mov eax,dword ptr [ebp-0x108]
	test eax,eax
	je Block255

 Block253:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block255

 Block254:
	lea ecx,[ebp-0x110]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block255:
	mov byte ptr [ebp-4],0x42
	cmp word ptr [ebp-0x1E0],si
	jne Block258

 Block256:
	mov eax,dword ptr [ebp-0x1D8]
	xor edx,edx
	mov word ptr [ebp-0x1E0],dx
	test eax,eax
	je Block259

 Block257:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block259

 Block258:
	lea eax,[ebp-0x1E0]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block259:
	mov ecx,3
	mov edx,0xFF
	mov word ptr [ebp-0xD0],cx
	mov dword ptr [ebp-0xC8],edx
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x49
	test ecx,ecx
	je Block9

 Block260:
	mov ebx,dword ptr [ebp-0xD0]
	mov edi,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebx
	mov ebx,dword ptr [ebp-0xCC]
	mov dword ptr [eax+4],ebx
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp-0xC4]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp-0x60]
	mov edx,dword ptr [ebp]
	push eax
	mov eax,dword ptr [ebp+0x3C]
	add edx,0xFFFFFFFC
	push edx
	add eax,0xFFFFFFD1
	push eax
	mov esi,ecx
	push ecx
	mov ecx,dword ptr [edi+0x80]
	call ecx
	test eax,eax
	jge Block262

 Block261:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block262:
	mov esi,8
	mov byte ptr [ebp-4],0x42
	cmp word ptr [ebp-0xD0],si
	jne Block266

 Block263:
	mov eax,dword ptr [ebp-0xC8]
	xor edx,edx
	mov word ptr [ebp-0xD0],dx

 Block264:
	test eax,eax
	je Block328

 Block265:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block328

 Block266:
	lea eax,[ebp-0xD0]
	push eax
	call dword ptr [ZImports::_VariantClear]
	jmp Block328

 Block267:
	mov esi,dword ptr [ZImports::_VariantInit]
	cmp ebx,edi
	jne Block278

 Block268:
	lea ecx,[ebp-0x200]
	push ecx
	call esi
	lea edx,[ebp-0x200]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block269:
	lea eax,[ebp-0x1A0]
	push eax
	mov byte ptr [ebp-4],0x4A
	call esi
	lea ecx,[ebp-0x1A0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block270:
	mov ecx,dword ptr [ebp+0x44]
	lea edx,[ebp-0x200]
	push edx
	mov edx,dword ptr [ebp+0x48]
	lea eax,[ebp-0x1A0]
	push eax
	push ecx
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push edx
	mov byte ptr [ebp-4],0x4B
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x4C
	test ecx,ecx
	je Block9

 Block271:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [ebp+0x28]
	push eax
	push edx
	mov byte ptr [ebp-4],0x4B
	call IWzCanvas::DrawTextA
	mov esi,8
	mov byte ptr [ebp-4],0x4A
	cmp word ptr [ebp-0x1A0],si
	jne Block274

 Block272:
	xor eax,eax
	mov word ptr [ebp-0x1A0],ax
	mov eax,dword ptr [ebp-0x198]
	test eax,eax
	je Block275

 Block273:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block275

 Block274:
	lea ecx,[ebp-0x1A0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block275:
	mov byte ptr [ebp-4],0x42
	cmp word ptr [ebp-0x200],si
	jne Block277

 Block276:
	mov eax,dword ptr [ebp-0x1F8]
	xor edx,edx
	mov word ptr [ebp-0x200],dx
	jmp Block264

 Block277:
	lea eax,[ebp-0x200]
	push eax
	call dword ptr [ZImports::_VariantClear]
	jmp Block328

 Block278:
	lea ecx,[ebp-0x220]
	push ecx
	call esi
	lea edx,[ebp-0x220]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block279:
	lea eax,[ebp-0x1C0]
	push eax
	mov byte ptr [ebp-4],0x4D
	call esi
	lea ecx,[ebp-0x1C0]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block280:
	mov ecx,dword ptr [ebp+0x44]
	mov edi,dword ptr [ebp+0x48]
	lea edx,[ebp-0x220]
	push edx
	lea eax,[ebp-0x1C0]
	push eax
	push ecx
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push edi
	mov byte ptr [ebp-4],0x4E
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x4F
	test ecx,ecx
	je Block9

 Block281:
	mov ebx,dword ptr [ebp]
	mov edx,dword ptr [ebp+0x28]
	push ebx
	push edx
	mov byte ptr [ebp-4],0x4E
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x1C0],8
	mov byte ptr [ebp-4],0x4D
	jne Block284

 Block282:
	xor eax,eax
	mov word ptr [ebp-0x1C0],ax
	mov eax,dword ptr [ebp-0x1B8]
	test eax,eax
	je Block285

 Block283:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block285

 Block284:
	lea ecx,[ebp-0x1C0]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block285:
	cmp word ptr [ebp-0x220],8
	mov byte ptr [ebp-4],0x42
	jne Block288

 Block286:
	mov eax,dword ptr [ebp-0x218]
	xor edx,edx
	mov word ptr [ebp-0x220],dx
	test eax,eax
	je Block289

 Block287:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block289

 Block288:
	lea eax,[ebp-0x220]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block289:
	lea ecx,[ebp-0x120]
	push ecx
	call esi
	lea edx,[ebp-0x120]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block290:
	lea eax,[ebp-0x120]
	push eax
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push edi
	mov byte ptr [ebp-4],0x50
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0x51
	test ecx,ecx
	je Block9

 Block291:
	mov byte ptr [ebp-4],0x50
	call IWzFont::CalcTextWidth
	cmp word ptr [ebp-0x120],8
	mov esi,eax
	mov byte ptr [ebp-4],0x42
	jne Block294

 Block292:
	mov eax,dword ptr [ebp-0x118]
	xor ecx,ecx
	mov word ptr [ebp-0x120],cx
	test eax,eax
	je Block295

 Block293:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block295

 Block294:
	lea edx,[ebp-0x120]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block295:
	mov eax,dword ptr [ebp+0x50]
	test eax,eax
	je Block9

 Block296:
	mov ecx,dword ptr [eax]
	push 0xFFFFFFFF
	push 1
	lea edx,[esi+2]
	push edx
	mov edx,dword ptr [ebp+0x28]
	add ebx,4
	push ebx
	push edx
	mov edi,eax
	push eax
	mov eax,dword ptr [ecx+0x8C]
	call eax
	test eax,eax
	jge Block298

 Block297:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block298:
	mov ecx,dword ptr [ebp+0x28]
	mov edx,3
	mov word ptr [ebp+8],dx
	mov edx,0xFF
	lea esi,[esi+ecx+0xA]
	mov dword ptr [ebp+0x10],edx
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x52
	test ecx,ecx
	je Block9

 Block299:
	mov edi,dword ptr [ebp+8]
	mov ebx,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0xC]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp-0x58]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp+0x14]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp]
	push edi
	inc eax
	push eax
	push esi
	mov dword ptr [ebp+0x38],ecx
	push ecx
	mov ecx,dword ptr [ebx+0x80]
	call ecx
	test eax,eax
	jge Block301

 Block300:
	mov edx,dword ptr [ebp+0x38]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edx
	push eax
	call _com_issue_errorex

 Block301:
	cmp word ptr [ebp+8],8
	mov byte ptr [ebp-4],0x42
	jne Block304

 Block302:
	xor eax,eax
	mov word ptr [ebp+8],ax
	mov eax,dword ptr [ebp+0x10]
	test eax,eax
	je Block305

 Block303:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block305

 Block304:
	lea ecx,[ebp+8]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block305:
	test edi,edi
	je Block9

 Block306:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0x40]
	lea eax,[ebp+0x30]
	push eax
	push edi
	mov dword ptr [ebp+0x30],0
	call ecx
	test eax,eax
	jge Block308

 Block307:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block308:
	mov edx,dword ptr [ebp+0x30]
	lea eax,[ebp-0x100]
	push 0xAAE
	push eax
	lea esi,[esi+edx+5]
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edi,dword ptr [ebp-0x74]
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea ecx,[ebp+0x48]
	push ecx
	mov byte ptr [ebp-4],0x53
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp-0x100]
	add esp,0xC
	mov byte ptr [ebp-4],0x42
	test eax,eax
	je Block310

 Block309:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block310:
	mov ebx,dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x150]
	push edx
	call ebx
	lea eax,[ebp-0x150]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block311:
	lea ecx,[ebp-0x130]
	push ecx
	mov byte ptr [ebp-4],0x54
	call ebx
	lea edx,[ebp-0x130]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block312:
	mov edx,dword ptr [ebp+0x44]
	lea eax,[ebp-0x150]
	push eax
	mov eax,dword ptr [ebp+0x48]
	lea ecx,[ebp-0x130]
	push ecx
	push edx
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	mov bl,0x55
	push eax
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x56
	test ecx,ecx
	je Block9

 Block313:
	mov edx,dword ptr [ebp]
	push edx
	push esi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp-0x130],8
	mov byte ptr [ebp-4],0x54
	jne Block316

 Block314:
	xor eax,eax
	mov word ptr [ebp-0x130],ax
	mov eax,dword ptr [ebp-0x128]
	test eax,eax
	je Block317

 Block315:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block317

 Block316:
	lea ecx,[ebp-0x130]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block317:
	mov esi,8
	mov byte ptr [ebp-4],0x42
	cmp word ptr [ebp-0x150],si
	jne Block320

 Block318:
	mov eax,dword ptr [ebp-0x148]
	xor edx,edx
	mov word ptr [ebp-0x150],dx
	test eax,eax
	je Block321

 Block319:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block321

 Block320:
	lea eax,[ebp-0x150]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block321:
	lea ecx,[ebp-0x170]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[ebp-0x170]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block322:
	mov edx,dword ptr [ebp-0x10]
	lea eax,[ebp-0x170]
	push eax
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	mov bl,0x57
	push edx
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0x58
	test ecx,ecx
	je Block9

 Block323:
	mov byte ptr [ebp-4],bl
	call IWzFont::CalcTextWidth
	mov byte ptr [ebp-4],0x42
	cmp word ptr [ebp-0x170],si
	jne Block326

 Block324:
	xor eax,eax
	mov word ptr [ebp-0x170],ax
	mov eax,dword ptr [ebp-0x168]
	test eax,eax
	je Block327

 Block325:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block327

 Block326:
	lea ecx,[ebp-0x170]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block327:
	mov edx,dword ptr [ebp-0x28]
	mov eax,dword ptr [ebp-0x78]
	mov ecx,dword ptr [ebp+0x3C]
	push edi
	push edx
	dec eax
	add ecx,0xFFFFFFD8
	push eax
	push ecx
	mov ecx,dword ptr [ebp+4]
	call CUIToolTip::DrawDiscount_Rate
	mov esi,8

 Block328:
	mov edx,dword ptr [ebp+0x58]
	cmp dword ptr [edx+0x2C],0
	je Block342

 Block329:
	lea eax,[ebp-0xDC]
	push 0x29D
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov ecx,dword ptr [ebp+0x58]
	mov edx,dword ptr [ecx+0x2C]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[ebp+0x48]
	push eax
	mov byte ptr [ebp-4],0x59
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp-0xDC]
	add esp,0xC
	mov byte ptr [ebp-4],0x42
	test eax,eax
	je Block331

 Block330:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block331:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp+0x18]
	push ecx
	call edi
	lea edx,[ebp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block332:
	lea eax,[ebp-0x44]
	push eax
	mov byte ptr [ebp-4],0x5A
	call edi
	lea ecx,[ebp-0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block333:
	mov ecx,dword ptr [ebp+0x44]
	lea edx,[ebp+0x18]
	push edx
	mov edx,dword ptr [ebp+0x48]
	lea eax,[ebp-0x44]
	push eax
	push ecx
	push ecx
	mov dword ptr [ebp+0x38],esp
	mov ecx,esp
	push edx
	mov byte ptr [ebp-4],0x5B
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x5C
	test ecx,ecx
	je Block9

 Block334:
	mov eax,dword ptr [ebp-0x2C]
	mov edx,dword ptr [ebp+0x28]
	push eax
	push edx
	mov byte ptr [ebp-4],0x5B
	call IWzCanvas::DrawTextA
	mov byte ptr [ebp-4],0x5A
	cmp word ptr [ebp-0x44],si
	jne Block337

 Block335:
	xor eax,eax
	mov word ptr [ebp-0x44],ax
	mov eax,dword ptr [ebp-0x3C]
	test eax,eax
	je Block338

 Block336:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block338

 Block337:
	lea ecx,[ebp-0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block338:
	mov byte ptr [ebp-4],0x42
	cmp word ptr [ebp+0x18],si
	jne Block341

 Block339:
	mov eax,dword ptr [ebp+0x20]
	xor edx,edx
	mov word ptr [ebp+0x18],dx
	test eax,eax
	je Block342

 Block340:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block342

 Block341:
	lea eax,[ebp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block342:
	mov eax,dword ptr [ebp-0x80]
	mov byte ptr [ebp-4],0x30
	test eax,eax
	je Block347

 Block343:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block346

 Block344:
	mov ecx,dword ptr [ebp-0x80]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebp-0x80]
	test ecx,ecx
	je Block346

 Block345:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block346:
	mov dword ptr [ebp-0x80],0

 Block347:
	mov eax,dword ptr [ebp-0x10]
	mov byte ptr [ebp-4],0x2F
	test eax,eax
	je Block349

 Block348:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block349:
	mov eax,dword ptr [ebp+0x34]
	mov byte ptr [ebp-4],0x2E
	test eax,eax
	je Block351

 Block350:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block351:
	mov eax,dword ptr [ebp+0x58]
	mov byte ptr [ebp-4],0x2D
	test eax,eax
	je Block357

 Block352:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block356

 Block353:
	mov eax,dword ptr [ebp+0x58]
	add eax,4
	push eax

 Block354:
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebp+0x58]
	test ecx,ecx
	je Block356

 Block355:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block356:
	mov dword ptr [ebp+0x58],0

 Block357:
	mov ebx,dword ptr [ebp-0x34]
	inc ebx
	cmp ebx,dword ptr [ebp-0x4C]
	mov dword ptr [ebp-0x34],ebx
	jl Block137

 Block358:
	mov ebx,dword ptr [ebp+4]

 Block359:
	cmp dword ptr [ebp+0x78],0
	mov esi,dword ptr [ebp-0x54]
	je Block428

 Block360:
	mov ecx,dword ptr [ebp+0x4C]
	mov edx,dword ptr [ebp+0x40]
	lea edi,[ecx+edx]
	mov ecx,dword ptr [ebp+0x50]
	test ecx,ecx
	jne Block363

 Block361:
	push 0x80004003
	call _com_issue_error

 Block362:
	push edi
	call _com_issue_error

 Block363:
	mov eax,dword ptr [ebx+0xC]
	mov edx,dword ptr [ecx]
	push 0xFFFFFFFF
	push 1
	sub eax,0x14
	push eax
	mov eax,dword ptr [edx+0x8C]
	push edi
	push 0xD
	push ecx
	mov esi,ecx
	call eax
	test eax,eax
	jge Block365

 Block364:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block365:
	add edi,0xC
	mov ecx,3
	mov edx,0xFF
	mov dword ptr [ebp+0x3C],edi
	mov word ptr [ebp+8],cx
	mov dword ptr [ebp+0x10],edx
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x5D
	test ecx,ecx
	jne Block367

 Block366:
	push 0x80004003
	call _com_issue_error

 Block367:
	mov edi,dword ptr [ebp+8]
	mov ebx,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edi
	mov edi,dword ptr [ebp+0xC]
	mov dword ptr [eax+4],edi
	mov edi,dword ptr [ebp-0x54]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp+0x14]
	push edi
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp+0x3C]
	push eax
	push 9
	mov esi,ecx
	push ecx
	mov ecx,dword ptr [ebx+0x80]
	call ecx
	test eax,eax
	jge Block369

 Block368:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block369:
	cmp word ptr [ebp+8],8
	mov byte ptr [ebp-4],0x2D
	jne Block372

 Block370:
	mov eax,dword ptr [ebp+0x10]
	xor edx,edx
	mov word ptr [ebp+8],dx
	test eax,eax
	je Block373

 Block371:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block373

 Block372:
	lea eax,[ebp+8]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block373:
	test edi,edi
	jne Block375

 Block374:
	push 0x80004003
	call _com_issue_error

 Block375:
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0x40]
	lea edx,[ebp+0x40]
	push edx
	push edi
	mov dword ptr [ebp+0x40],0
	call eax
	test eax,eax
	jge Block377

 Block376:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block377:
	mov esi,dword ptr [ebp+0x40]
	lea ecx,[ebp+0x4C]
	push 0xAAE
	push ecx
	add esi,0xE
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [ebp-0x48]
	mov eax,dword ptr [eax]
	push edx
	push eax
	lea eax,[ebp+0x48]
	push eax
	mov byte ptr [ebp-4],0x5E
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp+0x4C]
	add esp,0xC
	mov byte ptr [ebp-4],0x2D
	test eax,eax
	je Block379

 Block378:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block379:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x44]
	push ecx
	call edi
	lea edx,[ebp-0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block381

 Block380:
	push eax
	call _com_issue_error

 Block381:
	lea eax,[ebp+0x18]
	push eax
	mov byte ptr [ebp-4],0x5F
	call edi
	lea ecx,[ebp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block383

 Block382:
	push eax
	call _com_issue_error

 Block383:
	mov ecx,dword ptr [ebp-0x20]
	mov edi,dword ptr [ebp+0x48]
	lea edx,[ebp-0x44]
	push edx
	lea eax,[ebp+0x18]
	push eax
	push ecx
	push ecx
	mov dword ptr [ebp+0x4C],esp
	mov ecx,esp
	mov bl,0x60
	push edi
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x61
	test ecx,ecx
	jne Block385

 Block384:
	push 0x80004003
	call _com_issue_error

 Block385:
	mov eax,dword ptr [ebp+0x3C]
	dec eax
	push eax
	push esi
	mov byte ptr [ebp-4],bl
	call IWzCanvas::DrawTextA
	mov ebx,8
	mov byte ptr [ebp-4],0x5F
	cmp word ptr [ebp+0x18],bx
	jne Block388

 Block386:
	mov eax,dword ptr [ebp+0x20]
	xor edx,edx
	mov word ptr [ebp+0x18],dx
	test eax,eax
	je Block389

 Block387:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block389

 Block388:
	lea eax,[ebp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block389:
	mov byte ptr [ebp-4],0x2D
	cmp word ptr [ebp-0x44],bx
	jne Block392

 Block390:
	mov eax,dword ptr [ebp-0x3C]
	xor ecx,ecx
	mov word ptr [ebp-0x44],cx
	test eax,eax
	je Block393

 Block391:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block393

 Block392:
	lea edx,[ebp-0x44]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block393:
	lea eax,[ebp+0x18]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block395

 Block394:
	push eax
	call _com_issue_error

 Block395:
	lea edx,[ebp+0x18]
	push edx
	push ecx
	mov dword ptr [ebp+0x4C],esp
	mov ecx,esp
	mov bl,0x62
	push edi
	mov byte ptr [ebp-4],bl
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0x63
	test ecx,ecx
	jne Block397

 Block396:
	push 0x80004003
	call _com_issue_error

 Block397:
	mov byte ptr [ebp-4],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [ebp+0x18],8
	mov edi,eax
	mov byte ptr [ebp-4],0x2D
	jne Block400

 Block398:
	xor eax,eax
	mov word ptr [ebp+0x18],ax
	mov eax,dword ptr [ebp+0x20]
	test eax,eax
	je Block401

 Block399:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block401

 Block400:
	lea ecx,[ebp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block401:
	mov edx,3
	lea esi,[esi+edi+5]
	mov word ptr [ebp+0x18],dx
	mov dword ptr [ebp+0x20],0xFF
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x64
	test ecx,ecx
	jne Block403

 Block402:
	push 0x80004003
	call _com_issue_error

 Block403:
	mov edi,dword ptr [ebp-0x58]
	mov ebx,dword ptr [ebp+0x3C]
	lea eax,[ebp+0x18]
	push eax
	push edi
	push ebx
	push esi
	call IWzCanvas::Copy
	cmp word ptr [ebp+0x18],8
	mov byte ptr [ebp-4],0x2D
	jne Block406

 Block404:
	mov eax,dword ptr [ebp+0x20]
	xor ecx,ecx
	mov word ptr [ebp+0x18],cx
	test eax,eax
	je Block407

 Block405:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block407

 Block406:
	lea edx,[ebp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block407:
	test edi,edi
	jne Block409

 Block408:
	push 0x80004003
	call _com_issue_error

 Block409:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x40]
	lea ecx,[ebp+0x40]
	push ecx
	push edi
	mov dword ptr [ebp+0x40],0
	call edx
	test eax,eax
	jge Block411

 Block410:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block411:
	mov eax,dword ptr [ebp+0x40]
	lea ecx,[ebp+0x4C]
	push 0xAAE
	push ecx
	lea esi,[esi+eax+5]
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edi,dword ptr [ebp-0x68]
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea edx,[ebp+0x48]
	push edx
	mov byte ptr [ebp-4],0x65
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [ebp+0x4C]
	add esp,0xC
	mov byte ptr [ebp-4],0x2D
	test eax,eax
	je Block413

 Block412:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block413:
	lea eax,[ebp-0x44]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[ebp-0x44]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block415

 Block414:
	push eax
	call _com_issue_error

 Block415:
	lea edx,[ebp+0x18]
	push edx
	mov byte ptr [ebp-4],0x66
	call dword ptr [ZImports::_VariantInit]
	lea eax,[ebp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block417

 Block416:
	push eax
	call _com_issue_error

 Block417:
	mov eax,dword ptr [ebp+0x44]
	lea ecx,[ebp-0x44]
	push ecx
	lea edx,[ebp+0x18]
	push edx
	mov edx,dword ptr [ebp+0x48]
	push eax
	push ecx
	mov dword ptr [ebp+0x4C],esp
	mov ecx,esp
	push edx
	mov byte ptr [ebp-4],0x67
	call _xbstr_t::_ctor_1
	mov ecx,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x68
	test ecx,ecx
	jne Block419

 Block418:
	push 0x80004003
	call _com_issue_error

 Block419:
	lea eax,[ebx-1]
	push eax
	push esi
	mov byte ptr [ebp-4],0x67
	call IWzCanvas::DrawTextA
	cmp word ptr [ebp+0x18],8
	mov byte ptr [ebp-4],0x66
	jne Block422

 Block420:
	xor eax,eax
	mov word ptr [ebp+0x18],ax
	mov eax,dword ptr [ebp+0x20]
	test eax,eax
	je Block423

 Block421:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block423

 Block422:
	lea ecx,[ebp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block423:
	cmp word ptr [ebp-0x44],8
	mov byte ptr [ebp-4],0x2D
	jne Block426

 Block424:
	mov eax,dword ptr [ebp-0x3C]
	xor edx,edx
	mov word ptr [ebp-0x44],dx
	test eax,eax
	je Block427

 Block425:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block427

 Block426:
	lea eax,[ebp-0x44]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block427:
	mov ecx,dword ptr [ebp-0x48]
	mov esi,dword ptr [ebp+4]
	mov eax,dword ptr [esi+0xC]
	push edi
	push ecx
	lea edx,[ebx-2]
	push edx
	sub eax,0x28
	push eax
	mov ecx,esi
	call CUIToolTip::DrawDiscount_Rate
	lea ecx,[ebp-0x64]
	push ecx
	add ebx,0x14
	push ebx
	mov ecx,esi
	call CUIToolTip::DrawLimitInfo
	mov esi,dword ptr [ebp-0x54]

 Block428:
	mov eax,dword ptr [ebp+0x48]
	mov byte ptr [ebp-4],0x2C
	test eax,eax
	je Block430

 Block429:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block430:
	mov eax,dword ptr [ebp-0x7C]
	mov byte ptr [ebp-4],0x2B
	test eax,eax
	je Block432

 Block431:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block432:
	mov eax,dword ptr [ebp+0x50]
	mov byte ptr [ebp-4],0x28
	test eax,eax
	je Block434

 Block433:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block434:
	mov eax,dword ptr [ebp-0x30]
	mov byte ptr [ebp-4],0x27
	test eax,eax
	je Block436

 Block435:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block436:
	lea ecx,[ebp-0x64]
	mov byte ptr [ebp-4],0x26
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [ebp-0x5C]
	mov byte ptr [ebp-4],0x1E
	test eax,eax
	je Block438

 Block437:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block438:
	mov eax,dword ptr [ebp-0x20]
	mov byte ptr [ebp-4],0x1D
	test eax,eax
	je Block440

 Block439:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block440:
	mov eax,dword ptr [ebp+0x44]
	mov byte ptr [ebp-4],0x1C
	test eax,eax
	je Block442

 Block441:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block442:
	mov byte ptr [ebp-4],0x18
	test esi,esi
	je Block444

 Block443:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	call ecx

 Block444:
	mov eax,dword ptr [ebp-0x14]
	mov byte ptr [ebp-4],0x14
	test eax,eax
	je Block446

 Block445:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block446:
	mov eax,dword ptr [ebp-0x60]
	mov byte ptr [ebp-4],0x10
	test eax,eax
	je Block448

 Block447:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block448:
	mov eax,dword ptr [ebp-0x58]
	mov byte ptr [ebp-4],0xC
	test eax,eax
	je Block450

 Block449:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block450:
	mov eax,dword ptr [ebp-0x6C]
	mov byte ptr [ebp-4],8
	test eax,eax
	je Block452

 Block451:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block452:
	mov eax,dword ptr [ebp-0x70]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [ebp-4],0
	call edx
	mov eax,dword ptr [ebp+0x74]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block456

 Block453:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block456

 Block454:
	mov eax,dword ptr [ebp+0x74]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [ebp+0x74]
	test ecx,ecx
	je Block456

 Block455:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block456:
	lea esp,[ebp-0x2A0]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp+0x5C]
	xor ecx,ebp
	call __xsecurity_check_cookie
	add ebp,0x60
	mov esp,ebp
	pop ebp
	ret 0x18
}
}
// CUIToolTip::CLineInfo::~CLineInfo
_SUB_EXCEPTION_HANDLER(482EC0)
__SUB_CLASS_THIS0(00482EC0, __thiscall, 6116,  CUIToolTip::CLineInfo, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_482EC0
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	mov eax,dword ptr [esi+0x1C]
	mov dword ptr [esp+0x14],0
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov esi,dword ptr [esi+0xC]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block4

 Block3:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CUIToolTip::CLineInfo::CLineInfo
__SUB_CLASS_THIS0(00482EA0, __thiscall, 6114,  CUIToolTip::CLineInfo, void) {
__asm {

 Block0:
	mov eax,ecx
	xor ecx,ecx
	mov dword ptr [eax+0xC],ecx
	mov dword ptr [eax+0x1C],ecx
	mov dword ptr [eax+4],ecx
	mov dword ptr [eax],ecx
	mov dword ptr [eax+0x14],ecx
	ret
}
}
// DrawTextSepartedLine
_SUB_EXCEPTION_HANDLER(490490)
__SUB(00490490, __cdecl, 84847,  long, NakedParam<_x_com_ptr<IWzCanvas>>, long, long, long, long, const char*, NakedParam<_x_com_ptr<IWzFont>>, NakedParam<_x_com_ptr<IWzFont>>, long*, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_490490
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x11C
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	mov dword ptr [esp+0x118],eax
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x130]
	mov dword ptr fs:[0],eax
	mov ebp,dword ptr [esp+0x160]
	mov edi,dword ptr [esp+0x154]
	mov dword ptr [esp+0x74],ebp
	mov eax,dword ptr [esp+0x158]
	xor ebx,ebx
	mov dword ptr [esp+0x138],2
	cmp eax,ebx
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x3C]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0x14]
	mov dword ptr [esp+0x44],ebx
	call eax
	cmp eax,ebx
	jge Block4

 Block3:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block4:
	mov ecx,dword ptr [esp+0x3C]
	add ecx,4
	mov dword ptr [esp+0x50],ecx
	cmp ebp,ebx
	je Block6

 Block5:
	mov dword ptr [ebp],ebx

 Block6:
	mov dword ptr [esp+0x78],ebx
	mov byte ptr [esp+0x138],3
	cmp edi,ebx
	je Block8

 Block7:
	push edi
	lea edx,[esp+0x7C]
	push offset _S_S__3
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [eax]
	add esp,0xC
	jmp Block9

 Block8:
	mov eax,offset _S_

 Block9:
	mov esi,eax
	mov dword ptr [esp+0x18],esi
	mov dword ptr [esp+0x30],ebx
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x28],ebx
	mov dword ptr [esp+0x14],ebx
	push esi
	mov byte ptr [esp+0x13C],6
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x40],ebx
	call CharNextA
	mov edi,eax
	cmp edi,esi
	je Block161

 Block10:
	jmp Block12

 Block12:
	mov esi,dword ptr [esp+0x18]
	mov al,byte ptr [esi]
	xor ebp,ebp
	xor ebx,ebx
	mov dword ptr [esp+0x1C],ebp
	cmp al,0x5C
	jne Block27

 Block13:
	mov al,byte ptr [esi+1]
	inc esi
	mov dword ptr [esp+0x18],esi
	cmp al,0x6E
	jne Block15

 Block14:
	mov dword ptr [esp+0x1C],1
	jmp Block21

 Block15:
	cmp al,0x5C
	jne Block19

 Block16:
	mov byte ptr [esp+0xAC],al
	lea eax,[esp+0xAC]
	mov byte ptr [esp+0xAD],0
	lea edx,[eax+1]
	lea esp,[esp]

 Block17:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block17

 Block18:
	sub eax,edx
	push eax
	lea eax,[esp+0xB0]
	push eax
	lea ecx,[esp+0x1C]
	call ZXString<char>::_Cat
	jmp Block21

 Block19:
	test al,al
	je Block113

 Block20:
	mov esi,dword ptr [esp+0x18]

 Block21:
	inc esi
	cmp dword ptr [esp+0x1C],0
	mov dword ptr [esp+0x18],esi
	je Block112

 Block22:
	lea edx,[esp+0x14]
	push edx
	push 0xFFFFFFFF
	lea ecx,[esp+0x38]
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	xor eax,eax
	cmp dword ptr [esp+0x3C],ebx
	push 0xFFFFFFFF
	sete al
	lea ecx,[esp+0x38]
	mov esi,eax
	call ZArray<long>::InsertBefore
	mov edi,dword ptr [ZImports::_VariantInit]
	inc dword ptr [esp+0x24]
	lea ecx,[esp+0x8C]
	push ecx
	mov dword ptr [eax],esi
	call edi
	lea edx,[esp+0x8C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block23:
	mov ebx,dword ptr [esp+0x14]
	lea eax,[esp+0x8C]
	push eax
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push ebx
	mov byte ptr [esp+0x144],7
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x160]
	mov byte ptr [esp+0x140],8
	test ecx,ecx
	je Block1

 Block24:
	mov byte ptr [esp+0x140],7
	call IWzFont::CalcTextWidth
	add dword ptr [esp+0x28],eax
	cmp word ptr [esp+0x8C],8
	mov byte ptr [esp+0x138],6
	jne Block50

 Block25:
	mov eax,dword ptr [esp+0x94]
	xor ecx,ecx
	mov word ptr [esp+0x8C],cx
	test eax,eax
	je Block51

 Block26:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block51

 Block27:
	cmp al,0xA
	jne Block32

 Block28:
	inc esi
	mov dword ptr [esp+0x18],esi
	cmp dword ptr [esp+0x164],ebp
	jne Block31

 Block29:
	cmp dword ptr [esp+0x14],ebp
	je Block112

 Block30:
	mov ecx,dword ptr [esp+0x14]
	cmp byte ptr [ecx],0
	je Block112

 Block31:
	mov dword ptr [esp+0x1C],1
	jmp Block22

 Block32:
	cmp al,0x23
	jne Block37

 Block33:
	mov eax,dword ptr [esp+0x3C]
	inc esi
	mov dword ptr [esp+0x18],esi
	cmp eax,ebp
	jne Block36

 Block34:
	cmp byte ptr [esi],0x63
	jne Block36

 Block35:
	inc esi
	mov dword ptr [esp+0x18],esi

 Block36:
	xor edx,edx
	cmp eax,ebp
	sete dl
	mov ebx,1
	mov dword ptr [esp+0x3C],edx
	jmp Block22

 Block37:
	cmp al,0x20
	je Block42

 Block38:
	cmp al,0x2E
	je Block42

 Block39:
	cmp al,0x2C
	je Block42

 Block40:
	cmp al,0x3B
	je Block42

 Block41:
	cmp al,0x3A
	jne Block43

 Block42:
	mov ebp,1

 Block43:
	mov eax,dword ptr [esp+0x18]
	mov esi,edi
	sub esi,eax
	push esi
	push eax
	lea eax,[esp+0xB4]
	push eax
	call _memcpy
	lea eax,[esp+0xB8]
	add esp,0xC
	mov byte ptr [esp+esi+0xAC],0
	lea edx,[eax+1]
	lea esp,[esp]

 Block44:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block44

 Block45:
	sub eax,edx
	push eax
	lea ecx,[esp+0xB0]
	push ecx
	lea ecx,[esp+0x1C]
	call ZXString<char>::_Cat
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x18],edi
	test eax,eax
	je Block48

 Block46:
	cmp dword ptr [eax-4],1
	jle Block48

 Block47:
	push 0
	lea ecx,[esp+0x18]
	call ZXString<char>::TrimLeft

 Block48:
	test ebp,ebp
	jne Block22

 Block49:
	jmp Block112

 Block50:
	lea edx,[esp+0x8C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block51:
	mov esi,dword ptr [esp+0x74]
	test esi,esi
	je Block65

 Block52:
	lea eax,[esp+0x7C]
	push eax
	call edi
	lea ecx,[esp+0x7C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block53:
	lea edx,[esp+0x7C]
	push edx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push ebx
	mov byte ptr [esp+0x144],9
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x160]
	mov byte ptr [esp+0x140],0xA
	test ecx,ecx
	je Block1

 Block54:
	mov byte ptr [esp+0x140],9
	call IWzFont::CalcTextWidth
	mov edi,dword ptr [esp+0x20]
	add eax,edi
	add eax,dword ptr [esp+0x144]
	mov byte ptr [esp+0x138],6
	cmp dword ptr [esi],eax
	setb bl
	cmp word ptr [esp+0x7C],8
	jne Block57

 Block55:
	xor eax,eax
	mov word ptr [esp+0x7C],ax
	mov eax,dword ptr [esp+0x84]
	test eax,eax
	je Block58

 Block56:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block58

 Block57:
	lea ecx,[esp+0x7C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block58:
	test bl,bl
	je Block66

 Block59:
	lea edx,[esp+0x9C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x9C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block60:
	mov edx,dword ptr [esp+0x14]
	lea ecx,[esp+0x9C]
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0x144],0xB
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x160]
	mov byte ptr [esp+0x140],0xC
	test ecx,ecx
	je Block1

 Block61:
	mov byte ptr [esp+0x140],0xB
	call IWzFont::CalcTextWidth
	add eax,edi
	add eax,dword ptr [esp+0x144]
	cmp word ptr [esp+0x9C],8
	mov dword ptr [esi],eax
	mov byte ptr [esp+0x138],6
	jne Block64

 Block62:
	xor eax,eax
	mov word ptr [esp+0x9C],ax
	mov eax,dword ptr [esp+0xA4]
	test eax,eax
	je Block66

 Block63:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block66

 Block64:
	lea ecx,[esp+0x9C]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block66

 Block65:
	mov edi,dword ptr [esp+0x20]

 Block66:
	mov eax,dword ptr [esp+0x14]
	xor ebx,ebx
	cmp eax,ebx
	je Block68

 Block67:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esp+0x14],ebx

 Block68:
	cmp ebp,ebx
	jne Block70

 Block69:
	cmp dword ptr [esp+0x1C],ebx
	je Block112

 Block70:
	mov edx,dword ptr [esp+0x28]
	mov eax,dword ptr [esp+0x148]
	add edi,edx
	add edi,dword ptr [esp+0x144]
	add eax,0xFFFFFFFD
	cmp edi,eax
	jle Block81

 Block71:
	mov eax,dword ptr [esp+0x158]
	mov dword ptr [esp+0x20],ebx
	cmp eax,ebx
	je Block1

 Block72:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x28]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0x14]
	mov dword ptr [esp+0x30],ebx
	call eax
	cmp eax,ebx
	jge Block74

 Block73:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block74:
	mov ecx,dword ptr [esp+0x28]
	mov ebx,dword ptr [esp+0x150]
	mov eax,dword ptr [esp+0x158]
	add ecx,ebx
	add dword ptr [esp+0x14C],ecx
	test eax,eax
	je Block1

 Block75:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x14]
	lea ecx,[esp+0x28]
	push ecx
	push eax
	mov esi,eax
	mov dword ptr [esp+0x30],0
	call edx
	test eax,eax
	jge Block77

 Block76:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block77:
	mov eax,dword ptr [esp+0x28]
	mov ecx,dword ptr [esp+0x18]
	add eax,ebx
	add dword ptr [esp+0x50],eax
	mov al,byte ptr [ecx]
	test al,al
	je Block81

 Block78:
	cmp al,0x2E
	je Block80

 Block79:
	cmp al,0x2C
	jne Block81

 Block80:
	push 1
	lea edx,[esp+0x3C]
	push edx
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x40],al
	call ZXString<char>::_Cat
	inc dword ptr [esp+0x18]

 Block81:
	xor edi,edi
	cmp dword ptr [esp+0x24],edi
	jle Block104

 Block82:
	mov eax,dword ptr [esp+0x30]
	mov ebx,dword ptr [esp+0x34]
	mov ebp,dword ptr [ZImports::_VariantInit]
	mov esi,eax
	sub ebx,eax

 Block83:
	cmp dword ptr [esp+0x140],0
	je Block97

 Block84:
	lea eax,[esp+0x54]
	push eax
	call ebp
	lea ecx,[esp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block85:
	lea edx,[esp+0x64]
	push edx
	mov byte ptr [esp+0x13C],0xD
	call ebp
	lea eax,[esp+0x64]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block86:
	cmp dword ptr [ebx+esi],0
	mov byte ptr [esp+0x138],0xE
	lea eax,[esp+0x158]
	jne Block88

 Block87:
	lea eax,[esp+0x15C]

 Block88:
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x68]
	push edx
	push eax
	mov eax,dword ptr [esi]
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x150]
	mov byte ptr [esp+0x148],0xF
	test ecx,ecx
	je Block1

 Block89:
	mov eax,dword ptr [esp+0x15C]
	mov edx,dword ptr [esp+0x30]
	push eax
	mov eax,dword ptr [esp+0x158]
	add edx,eax
	push edx
	mov byte ptr [esp+0x150],0xE
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x64],8
	mov byte ptr [esp+0x138],0xD
	jne Block92

 Block90:
	mov eax,dword ptr [esp+0x6C]
	xor ecx,ecx
	mov word ptr [esp+0x64],cx
	test eax,eax
	je Block93

 Block91:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block93

 Block92:
	lea edx,[esp+0x64]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block93:
	cmp word ptr [esp+0x54],8
	mov byte ptr [esp+0x138],6
	jne Block96

 Block94:
	xor eax,eax
	mov word ptr [esp+0x54],ax
	mov eax,dword ptr [esp+0x5C]
	test eax,eax
	je Block97

 Block95:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block97

 Block96:
	lea ecx,[esp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block97:
	lea edx,[esp+0x40]
	push edx
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block98:
	mov eax,dword ptr [esi]
	lea ecx,[esp+0x40]
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x144],0x10
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x160]
	mov byte ptr [esp+0x140],0x11
	test ecx,ecx
	je Block1

 Block99:
	mov byte ptr [esp+0x140],0x10
	call IWzFont::CalcTextWidth
	add dword ptr [esp+0x20],eax
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0x138],6
	jne Block102

 Block100:
	mov eax,dword ptr [esp+0x48]
	xor edx,edx
	mov word ptr [esp+0x40],dx
	test eax,eax
	je Block103

 Block101:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block103

 Block102:
	lea eax,[esp+0x40]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block103:
	inc edi
	add esi,4
	cmp edi,dword ptr [esp+0x24]
	jl Block83

 Block104:
	lea ecx,[esp+0x30]
	call ZArray<ZXString<char>>::RemoveAll
	lea ecx,[esp+0x34]
	call ZArray<long>::RemoveAll
	xor eax,eax
	mov dword ptr [esp+0x24],eax
	mov dword ptr [esp+0x28],eax
	cmp dword ptr [esp+0x1C],eax
	je Block112

 Block105:
	mov eax,dword ptr [esp+0x158]
	xor ebx,ebx
	mov dword ptr [esp+0x20],ebx
	cmp eax,ebx
	je Block1

 Block106:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x1C]
	push edx
	mov esi,eax
	push eax
	mov eax,dword ptr [ecx+0x14]
	mov dword ptr [esp+0x24],ebx
	call eax
	cmp eax,ebx
	jge Block108

 Block107:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block108:
	mov ecx,dword ptr [esp+0x1C]
	mov edi,dword ptr [esp+0x150]
	mov eax,dword ptr [esp+0x158]
	add ecx,edi
	add dword ptr [esp+0x14C],ecx
	cmp eax,ebx
	je Block1

 Block109:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x14]
	lea ecx,[esp+0x1C]
	push ecx
	push eax
	mov esi,eax
	mov dword ptr [esp+0x24],ebx
	call edx
	cmp eax,ebx
	jge Block111

 Block110:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block111:
	mov eax,dword ptr [esp+0x1C]
	add eax,edi
	add dword ptr [esp+0x50],eax

 Block112:
	mov esi,dword ptr [esp+0x18]
	push esi
	call CharNextA
	mov edi,eax
	cmp edi,esi
	jne Block12

 Block113:
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block115

 Block114:
	cmp byte ptr [eax],0
	jne Block116

 Block115:
	cmp dword ptr [esp+0x24],0
	jle Block161

 Block116:
	test eax,eax
	je Block137

 Block117:
	cmp byte ptr [eax],0
	je Block137

 Block118:
	lea ecx,[esp+0x14]
	push ecx
	push 0xFFFFFFFF
	lea ecx,[esp+0x38]
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign
	push 0xFFFFFFFF
	lea ecx,[esp+0x38]
	call ZArray<long>::InsertBefore
	mov esi,dword ptr [esp+0x74]
	inc dword ptr [esp+0x24]
	mov dword ptr [eax],1
	test esi,esi
	je Block136

 Block119:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block121

 Block120:
	push eax
	call _com_issue_error

 Block121:
	mov edx,dword ptr [esp+0x14]
	lea ecx,[esp+0x40]
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	mov bl,0x12
	push edx
	mov byte ptr [esp+0x144],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x160]
	mov byte ptr [esp+0x140],0x13
	test ecx,ecx
	jne Block123

 Block122:
	push 0x80004003
	call _com_issue_error

 Block123:
	mov byte ptr [esp+0x140],bl
	call IWzFont::CalcTextWidth
	mov edi,dword ptr [esp+0x20]
	mov ebp,dword ptr [esp+0x144]
	add eax,edi
	add eax,ebp
	cmp dword ptr [esi],eax
	mov byte ptr [esp+0x138],6
	setb bl
	cmp word ptr [esp+0x40],8
	jne Block126

 Block124:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block127

 Block125:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block127

 Block126:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block127:
	test bl,bl
	je Block136

 Block128:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block130

 Block129:
	push eax
	call _com_issue_error

 Block130:
	mov edx,dword ptr [esp+0x14]
	lea ecx,[esp+0x40]
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	mov bl,0x14
	push edx
	mov byte ptr [esp+0x144],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x160]
	mov byte ptr [esp+0x140],0x15
	test ecx,ecx
	jne Block132

 Block131:
	push 0x80004003
	call _com_issue_error

 Block132:
	mov byte ptr [esp+0x140],bl
	call IWzFont::CalcTextWidth
	add eax,edi
	add eax,ebp
	cmp word ptr [esp+0x40],8
	mov dword ptr [esi],eax
	mov byte ptr [esp+0x138],6
	jne Block135

 Block133:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block136

 Block134:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block136

 Block135:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block136:
	mov edx,dword ptr [esp+0x14]
	add edx,0xFFFFFFF4
	push edx
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [esp+0x14],0

 Block137:
	xor edi,edi
	cmp dword ptr [esp+0x24],edi
	jle Block160

 Block138:
	mov esi,dword ptr [esp+0x30]
	mov ebp,dword ptr [esp+0x34]
	sub ebp,esi
	mov bl,0x19
	lea esp,[esp]

 Block139:
	cmp dword ptr [esp+0x140],0
	je Block153

 Block140:
	lea eax,[esp+0x54]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x54]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block141:
	lea edx,[esp+0x40]
	push edx
	mov byte ptr [esp+0x13C],0x16
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block142:
	cmp dword ptr [esi+ebp],0
	mov byte ptr [esp+0x138],0x17
	lea eax,[esp+0x158]
	jne Block144

 Block143:
	lea eax,[esp+0x15C]

 Block144:
	mov eax,dword ptr [eax]
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x44]
	push edx
	push eax
	mov eax,dword ptr [esi]
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x150]
	mov byte ptr [esp+0x148],0x18
	test ecx,ecx
	je Block1

 Block145:
	mov eax,dword ptr [esp+0x15C]
	mov edx,dword ptr [esp+0x30]
	push eax
	mov eax,dword ptr [esp+0x158]
	add edx,eax
	push edx
	mov byte ptr [esp+0x150],0x17
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0x138],0x16
	jne Block148

 Block146:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	test eax,eax
	je Block149

 Block147:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block149

 Block148:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block149:
	cmp word ptr [esp+0x54],8
	mov byte ptr [esp+0x138],6
	jne Block152

 Block150:
	xor eax,eax
	mov word ptr [esp+0x54],ax
	mov eax,dword ptr [esp+0x5C]
	test eax,eax
	je Block153

 Block151:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block153

 Block152:
	lea ecx,[esp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block153:
	lea edx,[esp+0x64]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x64]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block120

 Block154:
	mov eax,dword ptr [esi]
	lea ecx,[esp+0x64]
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x144],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x160]
	mov byte ptr [esp+0x140],0x1A
	test ecx,ecx
	je Block1

 Block155:
	mov byte ptr [esp+0x140],bl
	call IWzFont::CalcTextWidth
	add dword ptr [esp+0x20],eax
	cmp word ptr [esp+0x64],8
	mov byte ptr [esp+0x138],6
	jne Block158

 Block156:
	mov eax,dword ptr [esp+0x6C]
	xor edx,edx
	mov word ptr [esp+0x64],dx
	test eax,eax
	je Block159

 Block157:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block159

 Block158:
	lea eax,[esp+0x64]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block159:
	inc edi
	add esi,4
	cmp edi,dword ptr [esp+0x24]
	jl Block139

 Block160:
	lea ecx,[esp+0x30]
	call ZArray<ZXString<char>>::RemoveAll
	lea ecx,[esp+0x34]
	call ZArray<long>::RemoveAll

 Block161:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x138],5
	test eax,eax
	je Block163

 Block162:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block163:
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x138],4
	call ZArray<long>::RemoveAll
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x138],3
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x78]
	mov byte ptr [esp+0x138],2
	test eax,eax
	je Block165

 Block164:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block165:
	mov eax,dword ptr [esp+0x140]
	mov byte ptr [esp+0x138],1
	test eax,eax
	je Block167

 Block166:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block167:
	mov eax,dword ptr [esp+0x158]
	mov byte ptr [esp+0x138],0
	test eax,eax
	je Block169

 Block168:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block169:
	mov eax,dword ptr [esp+0x15C]
	mov dword ptr [esp+0x138],0xFFFFFFFF
	test eax,eax
	je Block171

 Block170:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block171:
	mov eax,dword ptr [esp+0x50]
	mov ecx,dword ptr [esp+0x130]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	mov ecx,dword ptr [esp+0x118]
	xor ecx,esp
	call __xsecurity_check_cookie
	add esp,0x128
	ret
}
}
// CUIToolTip::DrawLimitInfo
_SUB_EXCEPTION_HANDLER(488BE0)
__SUB_CLASS_THIS(00488BE0, __thiscall, 5744,  CUIToolTip, void, long, ZArray<ZXString<char> >&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_488BE0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x70
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x84]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov dword ptr [esp+0x14],edi
	mov eax,dword ptr [esp+0x98]
	mov eax,dword ptr [eax]
	xor ebp,ebp
	cmp eax,ebp
	je Block89

 Block1:
	mov ecx,3
	mov word ptr [esp+0x34],cx
	mov dword ptr [esp+0x3C],ebp
	mov ecx,dword ptr [edi+0x10]
	mov dword ptr [esp+0x8C],ebp
	cmp ecx,ebp
	jne Block3

 Block2:
	push 0x80004003
	call _com_issue_error

 Block3:
	lea edx,[esp+0x34]
	push edx
	lea eax,[esp+0x28]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x8C],1
	cmp esi,ebp
	jne Block5

 Block4:
	push 0x80004003
	call _com_issue_error

 Block5:
	mov eax,dword ptr [edi+0xC]
	mov edx,dword ptr [esp+0x94]
	mov ecx,dword ptr [esi]
	push 0xFFFFFFFF
	push 1
	sub eax,0xC
	push eax
	mov eax,dword ptr [ecx+0x8C]
	push edx
	mov ebx,6
	push ebx
	push esi
	call eax
	cmp eax,ebp
	jge Block7

 Block6:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block7:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x8C],0
	cmp eax,ebp
	je Block9

 Block8:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block9:
	cmp word ptr [esp+0x34],8
	mov dword ptr [esp+0x8C],0xFFFFFFFF
	jne Block12

 Block10:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	cmp eax,ebp
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block13:
	mov esi,dword ptr [edi+0x968]
	mov dword ptr [esp+0x24],esi
	cmp esi,ebp
	je Block15

 Block14:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+4]
	push esi
	call eax

 Block15:
	lea ecx,[esp+0x18]
	push 0xEA7
	push ecx
	mov dword ptr [esp+0x94],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x34]
	push edx
	mov byte ptr [esp+0x90],3
	call ebp
	lea eax,[esp+0x34]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block17

 Block16:
	push eax
	call _com_issue_error

 Block17:
	mov edx,dword ptr [esp+0x18]
	lea ecx,[esp+0x34]
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0x98],4
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x94],5
	test esi,esi
	jne Block19

 Block18:
	push 0x80004003
	call _com_issue_error

 Block19:
	mov ecx,esi
	mov byte ptr [esp+0x94],4
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x34],8
	mov esi,eax
	mov byte ptr [esp+0x8C],3
	jne Block22

 Block20:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block23

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block22:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block23:
	lea edx,[esp+0x54]
	push edx
	call ebp
	lea eax,[esp+0x54]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block25

 Block24:
	push eax
	call _com_issue_error

 Block25:
	lea ecx,[esp+0x44]
	push ecx
	mov byte ptr [esp+0x90],bl
	call ebp
	lea edx,[esp+0x44]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block27

 Block26:
	push eax
	call _com_issue_error

 Block27:
	mov eax,3
	mov word ptr [esp+0x34],ax
	mov dword ptr [esp+0x3C],0
	mov ebp,dword ptr [esp+0x24]
	mov eax,dword ptr [esp+0x18]
	lea ecx,[esp+0x54]
	push ecx
	lea edx,[esp+0x48]
	push edx
	push ebp
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xA0],8
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [edi+0x10]
	mov byte ptr [esp+0x9C],9
	test ecx,ecx
	jne Block29

 Block28:
	push 0x80004003
	call _com_issue_error

 Block29:
	lea edx,[esp+0x44]
	push edx
	lea eax,[esp+0x34]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x9C],0xA
	test ecx,ecx
	jne Block31

 Block30:
	push 0x80004003
	call _com_issue_error

 Block31:
	mov eax,dword ptr [edi+0xC]
	mov edx,dword ptr [esp+0xA4]
	add edx,0xE
	sub eax,esi
	push edx
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov byte ptr [esp+0xA4],0xB
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x8C],8
	test eax,eax
	je Block33

 Block32:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block33:
	mov esi,8
	mov byte ptr [esp+0x8C],7
	cmp word ptr [esp+0x34],si
	jne Block36

 Block34:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block37

 Block35:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block37

 Block36:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block37:
	mov byte ptr [esp+0x8C],bl
	cmp word ptr [esp+0x44],si
	jne Block40

 Block38:
	mov eax,dword ptr [esp+0x4C]
	xor edx,edx
	mov word ptr [esp+0x44],dx
	test eax,eax
	je Block41

 Block39:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block41

 Block40:
	lea eax,[esp+0x44]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block41:
	mov byte ptr [esp+0x8C],3
	cmp word ptr [esp+0x54],si
	jne Block44

 Block42:
	mov eax,dword ptr [esp+0x5C]
	xor ecx,ecx
	mov word ptr [esp+0x54],cx
	test eax,eax
	je Block45

 Block43:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block45

 Block44:
	lea edx,[esp+0x54]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block45:
	mov ecx,dword ptr [esp+0x98]
	add dword ptr [esp+0x94],0x1F
	mov ebx,1
	xor edi,edi
	mov dword ptr [esp+0x20],ebx
	call ZArray<ZXString<char>>::GetCount
	cmp eax,ebx
	jbe Block86

 Block46:
	xor ebp,ebp
	mov dword ptr [esp+0x1C],ebp
	mov esi,dword ptr [esp+0x98]
	mov ecx,esi
	mov byte ptr [esp+0x8C],0xC
	call ZArray<ZXString<char>>::GetCount
	sub eax,4
	cmp ebx,eax
	je Block51

 Block47:
	mov ecx,dword ptr [esp+0x14]
	push 0xA
	lea eax,[esp+0x2C]
	push eax
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	test eax,eax
	je Block49

 Block48:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	mov ebp,eax
	push eax
	mov dword ptr [esp+0x20],ebp
	call edx

 Block49:
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block54

 Block50:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	jmp Block53

 Block51:
	mov eax,dword ptr [esp+0x14]
	mov eax,dword ptr [eax+0x968]
	test eax,eax
	je Block54

 Block52:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	mov ebp,eax
	mov dword ptr [esp+0x1C],ebp

 Block53:
	push eax
	call edx

 Block54:
	mov eax,dword ptr [esi]
	lea esi,[eax+ebx*4]
	push offset _S_
	mov ecx,esi
	call ZXString<char>::Compare
	test eax,eax
	je Block80

 Block55:
	mov ebx,dword ptr [ZImports::_VariantInit]
	mov esi,dword ptr [esi]
	lea ecx,[esp+0x54]
	push ecx
	call ebx
	lea edx,[esp+0x54]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block16

 Block56:
	lea eax,[esp+0x54]
	push eax
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	push esi
	mov byte ptr [esp+0x98],0xD
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x94],0xE
	test ebp,ebp
	je Block2

 Block57:
	mov ecx,ebp
	mov byte ptr [esp+0x94],0xD
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x54],8
	mov edi,eax
	mov byte ptr [esp+0x8C],0xC
	jne Block60

 Block58:
	mov eax,dword ptr [esp+0x5C]
	xor ecx,ecx
	mov word ptr [esp+0x54],cx
	test eax,eax
	je Block61

 Block59:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block61

 Block60:
	lea edx,[esp+0x54]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block61:
	lea eax,[esp+0x74]
	push eax
	call ebx
	lea ecx,[esp+0x74]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block16

 Block62:
	lea edx,[esp+0x64]
	push edx
	mov byte ptr [esp+0x90],0xF
	call ebx
	lea eax,[esp+0x64]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block16

 Block63:
	mov ecx,3
	mov word ptr [esp+0x44],cx
	mov dword ptr [esp+0x4C],0
	lea edx,[esp+0x74]
	push edx
	lea eax,[esp+0x68]
	push eax
	push ebp
	push ecx
	mov dword ptr [esp+0x40],esp
	mov ecx,esp
	push esi
	mov byte ptr [esp+0xA0],0x11
	call _xbstr_t::_ctor_0
	mov esi,dword ptr [esp+0x24]
	mov ecx,dword ptr [esi+0x10]
	mov byte ptr [esp+0x9C],0x12
	test ecx,ecx
	je Block2

 Block64:
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x40]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x9C],0x13
	test ecx,ecx
	je Block2

 Block65:
	mov eax,dword ptr [esi+0xC]
	mov edx,dword ptr [esp+0xA4]
	sub eax,edi
	push edx
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov byte ptr [esp+0xA4],0x14
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x8C],0x11
	test eax,eax
	je Block67

 Block66:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block67:
	mov esi,8
	mov byte ptr [esp+0x8C],0x10
	cmp word ptr [esp+0x44],si
	jne Block70

 Block68:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block71:
	mov byte ptr [esp+0x8C],0xF
	cmp word ptr [esp+0x64],si
	jne Block74

 Block72:
	mov eax,dword ptr [esp+0x6C]
	xor edx,edx
	mov word ptr [esp+0x64],dx
	test eax,eax
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea eax,[esp+0x64]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block75:
	mov byte ptr [esp+0x8C],0xC
	cmp word ptr [esp+0x74],si
	jne Block78

 Block76:
	mov eax,dword ptr [esp+0x7C]
	xor ecx,ecx
	mov word ptr [esp+0x74],cx
	test eax,eax
	je Block79

 Block77:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	add dword ptr [esp+0x94],0x12
	mov ebx,dword ptr [esp+0x20]
	xor edi,edi
	jmp Block82

 Block78:
	lea edx,[esp+0x74]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block79:
	add dword ptr [esp+0x94],0x12
	mov ebx,dword ptr [esp+0x20]
	xor edi,edi
	jmp Block82

 Block80:
	test edi,edi
	jne Block82

 Block81:
	add dword ptr [esp+0x94],8
	mov edi,1

 Block82:
	mov byte ptr [esp+0x8C],3
	test ebp,ebp
	je Block84

 Block83:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	call ecx

 Block84:
	mov ecx,dword ptr [esp+0x98]
	inc ebx
	mov dword ptr [esp+0x20],ebx
	call ZArray<ZXString<char>>::GetCount
	cmp ebx,eax
	jb Block46

 Block85:
	mov ebp,dword ptr [esp+0x24]

 Block86:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x8C],2
	test eax,eax
	je Block88

 Block87:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block88:
	mov edx,dword ptr [ebp]
	mov eax,dword ptr [edx+8]
	push ebp
	mov dword ptr [esp+0x90],0xFFFFFFFF
	call eax

 Block89:
	mov ecx,dword ptr [esp+0x84]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x7C
	ret 8
}
}
// CUIToolTip::SetToolTip_Ring
_SUB_EXCEPTION_HANDLER(4A3460)
__SUB_CLASS_THIS(004A3460, __thiscall, 5709,  CUIToolTip, void, long, long, GW_ItemSlotEquip*, long, long, long, CS_LIMITGOODS*, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A3460
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x84
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x98]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebp,ebp
	cmp dword ptr [esi+0x10],ebp
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov eax,dword ptr [esi+0x18]
	cmp eax,dword ptr [esp+0xA8]
	jne Block3

 Block2:
	mov ecx,dword ptr [esi+0x1C]
	cmp ecx,dword ptr [esp+0xAC]
	je Block156

 Block3:
	mov dword ptr [esp+0x30],ebp
	mov dword ptr [esp+0xA0],ebp
	mov dword ptr [esp+0x38],ebp
	mov dword ptr [esp+0x3C],ebp
	mov dword ptr [esp+0x94],ebp
	mov ebx,dword ptr [esp+0xB0]
	mov edx,dword ptr [ebx+0x18]
	or edx,dword ptr [ebx+0x1C]
	mov byte ptr [esp+0xA0],2
	je Block5

 Block4:
	mov edi,1
	jmp Block6

 Block5:
	xor edi,edi

 Block6:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+4]
	push ebp
	push ebp
	mov ecx,ebx
	call edx
	mov ecx,dword ptr [esp+0xBC]
	push eax
	push edi
	lea eax,[esp+0x4C]
	push eax
	push ecx
	lea edx,[ebx+0x20]
	push edx
	mov ecx,esi
	call CUIToolTip::GetItemExpireDate
	mov eax,dword ptr [esp+0x3C]
	cmp eax,ebp
	je Block9

 Block7:
	cmp byte ptr [eax],0
	je Block9

 Block8:
	lea eax,[esp+0x3C]
	push eax
	push 0xFFFFFFFF
	lea ecx,[esp+0x38]
	call ZArray<ZXString<char>>::InsertBefore
	mov ecx,eax
	call ZXString<char>::op_assign

 Block9:
	lea ebp,[ebx+0xC]
	mov ecx,ebp
	call TSecType<long>::GetData
	push eax
	lea ecx,[esp+0x60]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemInfo
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x28],esp
	push 0xAD3
	push edx
	mov byte ptr [esp+0xAC],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x60]
	mov byte ptr [esp+0xA4],4
	test ecx,ecx
	jne Block11

 Block10:
	push 0x80004003
	call _com_issue_error

 Block11:
	lea eax,[esp+0x88]
	push eax
	mov byte ptr [esp+0xA8],3
	call IWzProperty::Getitem
	push eax
	lea ecx,[esp+0x64]
	push ecx
	mov byte ptr [esp+0xA8],5
	call get_unknown
	mov eax,dword ptr [eax]
	add esp,4
	mov ecx,esp
	mov byte ptr [esp+0xA4],6
	mov dword ptr [esp+0x38],0
	mov dword ptr [esp+0x28],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block13

 Block12:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block13:
	lea ecx,[esp+0x38]
	call _x_com_ptr<IWzCanvas>::_QueryUnknownComPtr
	test eax,eax
	jge Block16

 Block14:
	cmp eax,0x80004002
	je Block16

 Block15:
	push eax
	call _com_issue_error

 Block16:
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0xA0],8
	test eax,eax
	je Block18

 Block17:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block18:
	cmp word ptr [esp+0x84],8
	mov byte ptr [esp+0xA0],9
	jne Block21

 Block19:
	xor eax,eax
	mov word ptr [esp+0x84],ax
	mov eax,dword ptr [esp+0x8C]
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea ecx,[esp+0x84]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block22:
	mov edi,dword ptr [esp+0x34]
	test edi,edi
	sete al
	test al,al
	je Block24

 Block23:
	xor edx,edx
	jmp Block29

 Block24:
	test edi,edi
	jne Block26

 Block25:
	push 0x80004003
	call _com_issue_error

 Block26:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0x48]
	lea eax,[esp+0x2C]
	push eax
	push edi
	mov dword ptr [esp+0x34],0
	call ecx
	test eax,eax
	jge Block28

 Block27:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block28:
	mov edx,dword ptr [esp+0x2C]
	add edx,5

 Block29:
	mov eax,dword ptr [esp+0xB8]
	mov dword ptr [esp+0x58],edx
	test eax,eax
	je Block32

 Block30:
	cmp eax,dword ptr [esp+0xBC]
	je Block32

 Block31:
	mov ecx,0x23
	jmp Block33

 Block32:
	xor ecx,ecx

 Block33:
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block35

 Block34:
	mov eax,dword ptr [eax-4]

 Block35:
	shl eax,4
	add eax,ecx
	push 0xA0
	lea edx,[eax+edx+0xAE]
	push edx
	push 0xEC
	push 8
	mov ecx,esi
	call CUIToolTip::SetBasicInfo
	mov dword ptr [esp+0x2C],0
	lea eax,[esp+0x44]
	push eax
	lea ecx,[esp+0x30]
	push ecx
	push ebx
	mov ecx,esi
	mov byte ptr [esp+0xAC],0xA
	call CUIToolTip::GetItemName
	push ebx
	mov ecx,esi
	call CUIToolTip::SetToolTip_Equip_Basic
	mov ecx,ebp
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0x24]
	push edx
	call CItemInfo::GetItemDesc
	mov ecx,ebp
	mov byte ptr [esp+0xA0],0xB
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x2B70
	jne Block51

 Block36:
	cmp ecx,0x10F7C0
	je Block51

 Block37:
	lea ecx,[esp+0x24]
	push ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	call CWvsContext::GetCharacterData
	mov edx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x18],edx
	test eax,eax
	je Block42

 Block38:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block41

 Block39:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block41

 Block40:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block41:
	mov dword ptr [esp+0x28],0

 Block42:
	mov eax,dword ptr [esp+0x18]
	mov eax,dword ptr [eax+0x60D]
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block51

 Block43:
	xor ebp,ebp

 Block44:
	lea ecx,[esp+0x1C]
	push ecx
	call ZList<GW_CoupleRecord>::GetNext
	mov edi,eax
	mov edx,dword ptr [edi+0x11]
	add esp,4
	cmp edx,dword ptr [ebx+0x18]
	jne Block50

 Block45:
	mov eax,dword ptr [edi+0x15]
	cmp eax,dword ptr [ebx+0x1C]
	jne Block50

 Block46:
	mov dword ptr [esp+0x14],ebp
	lea ecx,[esp+0x18]
	push 0x2B1
	push ecx
	mov byte ptr [esp+0xA8],0xC
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	add edi,4
	push edi
	push eax
	lea edx,[esp+0x1C]
	push edx
	mov byte ptr [esp+0xAC],0xD
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0xC
	mov byte ptr [esp+0xA0],0xC
	cmp eax,ebp
	je Block48

 Block47:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block48:
	lea eax,[esp+0x14]
	push eax
	lea ecx,[esp+0x24]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xA0],0xB
	cmp eax,ebp
	je Block50

 Block49:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block50:
	cmp dword ptr [esp+0x1C],ebp
	jne Block44

 Block51:
	lea ecx,[ebx+0xC]
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x51EB851F
	imul ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x2B78
	jne Block67

 Block52:
	mov eax,0x66666667
	imul ecx
	sar edx,2
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	lea edx,[eax+eax*4]
	add edx,edx
	sub ecx,edx
	cmp ecx,2
	jg Block67

 Block53:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x24]
	push eax
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x28]
	test eax,eax
	je Block58

 Block54:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block57

 Block55:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block57

 Block56:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block57:
	mov dword ptr [esp+0x28],0

 Block58:
	mov eax,dword ptr [ebx+0x621]
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block67

 Block59:
	mov bl,0xE
	xor ebp,ebp
	lea esp,[esp]

 Block60:
	lea ecx,[esp+0x1C]
	push ecx
	call ZList<GW_FriendRecord>::GetNext
	mov edi,eax
	mov edx,dword ptr [edi+0x11]
	mov eax,dword ptr [esp+0xB4]
	add esp,4
	cmp edx,dword ptr [eax+0x18]
	jne Block66

 Block61:
	mov ecx,dword ptr [edi+0x15]
	cmp ecx,dword ptr [eax+0x1C]
	jne Block66

 Block62:
	mov dword ptr [esp+0x14],ebp
	lea edx,[esp+0x18]
	push 0x2B2
	push edx
	mov byte ptr [esp+0xA8],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	add edi,4
	push edi
	push eax
	lea eax,[esp+0x1C]
	push eax
	mov byte ptr [esp+0xAC],0xF
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0xC
	mov byte ptr [esp+0xA0],bl
	cmp eax,ebp
	je Block64

 Block63:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block64:
	lea ecx,[esp+0x14]
	push ecx
	lea ecx,[esp+0x24]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xA0],0xB
	cmp eax,ebp
	je Block66

 Block65:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block66:
	cmp dword ptr [esp+0x1C],ebp
	jne Block60

 Block67:
	mov ecx,dword ptr [esp+0xB0]
	add ecx,0xC
	call TSecType<long>::GetData
	mov bl,0x10
	cmp eax,0x10FAE3
	je Block71

 Block68:
	cmp eax,0x10FAE6
	je Block71

 Block69:
	cmp eax,0x10FAE7
	je Block71

 Block70:
	cmp eax,0x10FAE9
	jne Block79

 Block71:
	cmp dword ptr [esi+0xA44],0
	jne Block79

 Block72:
	mov edi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea edx,[esp+0x24]
	push edx
	mov ecx,edi
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	lea ecx,[esp+0x24]
	call ZRef<CharacterData>::~ZRef<CharacterData>
	cmp dword ptr [ebp+0x645],0
	jbe Block79

 Block73:
	mov dword ptr [esp+0x14],0
	mov ebp,dword ptr [ebp+0x649]
	cmp dword ptr [edi+0x2034],0
	mov byte ptr [esp+0xA0],bl
	lea edi,[ebp+0x23]
	je Block75

 Block74:
	lea edi,[ebp+0x16]

 Block75:
	lea eax,[esp+0x18]
	push 0x108C
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea ecx,[esp+0x1C]
	push ecx
	mov byte ptr [esp+0xAC],0x11
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x24]
	add esp,0xC
	mov byte ptr [esp+0xA0],bl
	test eax,eax
	je Block77

 Block76:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block77:
	lea edx,[esp+0x14]
	push edx
	lea ecx,[esp+0x24]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xA0],0xB
	test eax,eax
	je Block79

 Block78:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block79:
	mov eax,dword ptr [esp+0x20]
	xor edi,edi
	cmp eax,edi
	je Block82

 Block80:
	cmp byte ptr [eax],0
	je Block82

 Block81:
	push 1
	push edi
	push edi
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x30]
	push ecx
	push edi
	push 0xDD
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	add dword ptr [esi+8],eax
	mov dword ptr [esp+0x38],eax

 Block82:
	mov dword ptr [esp+0x14],edi
	mov edx,dword ptr [esp+0xC0]
	push edx
	lea eax,[esp+0x18]
	push eax
	mov ecx,esi
	mov byte ptr [esp+0xA8],0x12
	call CUIToolTip::MakingLimitInfo
	mov ecx,dword ptr [esp+0xAC]
	mov edx,dword ptr [esp+0xA8]
	push edi
	push 0xCC0E395A
	push edi
	push edi
	push 1
	push ecx
	push edx
	lea eax,[esp+0x5C]
	push eax
	mov ecx,esi
	call CUIToolTip::MakeLayer
	mov edx,dword ptr [esp+0x44]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	push ecx
	mov ecx,esi
	mov byte ptr [esp+0xAC],0x13
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esp+0x30]
	push eax
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextItemName
	mov dword ptr [esp+0x18],0x1D

 Block83:
	mov ebp,dword ptr [esp+0x30]
	mov ebx,dword ptr [esp+0x34]
	mov dword ptr [esp+0x1C],edi
	test ebp,ebp
	je Block106

 Block84:
	cmp edi,dword ptr [ebp-4]
	jae Block107

 Block85:
	mov ecx,3
	mov edx,0xFF
	mov word ptr [esp+0x48],cx
	mov dword ptr [esp+0x50],edx
	mov ecx,dword ptr [esp+0x40]
	mov edi,dword ptr [esi+0xA04]
	mov byte ptr [esp+0xA0],0x14
	test ecx,ecx
	je Block10

 Block86:
	mov ebp,dword ptr [esp+0x48]
	mov ebx,dword ptr [ecx]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],ebp
	mov ebp,dword ptr [esp+0x5C]
	mov dword ptr [eax+4],ebp
	mov ebp,dword ptr [esp+0x28]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x64]
	push edi
	mov dword ptr [eax+0xC],edx
	lea eax,[ebp+4]
	push eax
	push 0xA
	mov dword ptr [esp+0x60],ecx
	push ecx
	mov ecx,dword ptr [ebx+0x80]
	call ecx
	test eax,eax
	jge Block88

 Block87:
	mov edx,dword ptr [esp+0x44]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edx
	push eax
	call _com_issue_errorex

 Block88:
	cmp word ptr [esp+0x48],8
	mov byte ptr [esp+0xA0],0x13
	jne Block91

 Block89:
	xor eax,eax
	mov word ptr [esp+0x48],ax
	mov eax,dword ptr [esp+0x50]
	test eax,eax
	je Block92

 Block90:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block92

 Block91:
	lea ecx,[esp+0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block92:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x74]
	push edx
	call edi
	lea eax,[esp+0x74]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block15

 Block93:
	lea ecx,[esp+0x64]
	push ecx
	mov byte ptr [esp+0xA4],0x15
	call edi
	lea edx,[esp+0x64]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block15

 Block94:
	lea eax,[esp+0x74]
	push eax
	lea ecx,[esp+0x68]
	push ecx
	mov ebx,0x16
	push ebx
	lea edx,[esp+0x30]
	push edx
	mov ecx,esi
	mov byte ptr [esp+0xB0],bl
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esp+0x24]
	push eax
	mov eax,dword ptr [esp+0x3C]
	mov eax,dword ptr [eax+edi*4]
	push ecx
	mov dword ptr [esp+0x54],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xB4],0x17
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x50]
	mov byte ptr [esp+0xB0],0x18
	test ecx,ecx
	je Block10

 Block95:
	push ebp
	push 0x10
	mov byte ptr [esp+0xB8],0x17
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xA0],bl
	test eax,eax
	je Block97

 Block96:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block97:
	mov ebx,8
	mov byte ptr [esp+0xA0],0x15
	cmp word ptr [esp+0x64],bx
	jne Block100

 Block98:
	xor eax,eax
	mov word ptr [esp+0x64],ax
	mov eax,dword ptr [esp+0x6C]
	test eax,eax
	je Block101

 Block99:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block101

 Block100:
	lea ecx,[esp+0x64]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block101:
	mov byte ptr [esp+0xA0],0x13
	cmp word ptr [esp+0x74],bx
	jne Block104

 Block102:
	mov eax,dword ptr [esp+0x7C]
	xor edx,edx
	mov word ptr [esp+0x74],dx
	test eax,eax
	je Block105

 Block103:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	inc edi
	add ebp,0x10
	mov dword ptr [esp+0x18],ebp
	jmp Block83

 Block104:
	lea eax,[esp+0x74]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block105:
	inc edi
	add ebp,0x10
	mov dword ptr [esp+0x18],ebp
	jmp Block83

 Block106:
	xor eax,eax
	jmp Block108

 Block107:
	mov eax,dword ptr [ebp-4]

 Block108:
	mov ecx,dword ptr [esp+0xB0]
	push ecx
	shl eax,4
	push eax
	mov ecx,esi
	call CUIToolTip::DrawToolTip_Equip
	test ebp,ebp
	jne Block110

 Block109:
	xor eax,eax
	jmp Block111

 Block110:
	mov eax,dword ptr [ebp-4]

 Block111:
	shl eax,4
	push eax
	mov ecx,esi
	call CUIToolTip::DrawInfo
	mov edi,dword ptr [esp+0x14]
	test ebx,ebx
	je Block126

 Block112:
	mov edx,3
	mov word ptr [esp+0x48],dx
	mov dword ptr [esp+0x50],0xFF
	mov byte ptr [esp+0xA0],0x19
	test edi,edi
	jne Block114

 Block113:
	xor ebp,ebp
	jmp Block115

 Block114:
	mov ebp,dword ptr [edi-4]

 Block115:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x40]
	lea ecx,[esp+0x18]
	push ecx
	push ebx
	mov dword ptr [esp+0x20],0
	call edx
	test eax,eax
	jge Block117

 Block116:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block117:
	mov edi,dword ptr [esp+0x40]
	test edi,edi
	jne Block119

 Block118:
	push 0x80004003
	call _com_issue_error

 Block119:
	mov ebx,dword ptr [esp+0x48]
	mov eax,dword ptr [esi+8]
	mov ecx,dword ptr [esi+0xC]
	sub ecx,dword ptr [esp+0x18]
	sub esp,0x10
	mov edx,esp
	mov dword ptr [edx],ebx
	mov ebx,dword ptr [esp+0x5C]
	mov dword ptr [edx+4],ebx
	mov ebx,dword ptr [esp+0x60]
	shl ebp,4
	sub eax,ebp
	sub eax,dword ptr [esp+0x68]
	mov ebp,dword ptr [edi]
	sub eax,dword ptr [esp+0x48]
	mov dword ptr [edx+8],ebx
	mov ebx,dword ptr [esp+0x64]
	mov dword ptr [edx+0xC],ebx
	mov ebx,dword ptr [esp+0x44]
	push ebx
	sub eax,3
	push eax
	mov eax,dword ptr [ebp+0x80]
	shr ecx,1
	push ecx
	push edi
	call eax
	test eax,eax
	jge Block121

 Block120:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	mov ecx,edi
	push ecx
	push eax
	call _com_issue_errorex

 Block121:
	cmp word ptr [esp+0x48],8
	mov byte ptr [esp+0xA0],0x13
	jne Block124

 Block122:
	mov eax,dword ptr [esp+0x50]
	xor edx,edx
	mov word ptr [esp+0x48],dx
	test eax,eax
	je Block125

 Block123:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block125

 Block124:
	lea eax,[esp+0x48]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block125:
	mov edi,dword ptr [esp+0x14]

 Block126:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block132

 Block127:
	cmp byte ptr [eax],0
	je Block132

 Block128:
	push 1
	push 0
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0xA
	push ecx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	test edi,edi
	jne Block130

 Block129:
	xor eax,eax
	jmp Block131

 Block130:
	mov eax,dword ptr [edi-4]

 Block131:
	mov ecx,dword ptr [esi+8]
	mov edx,dword ptr [esp+0x30]
	shl eax,4
	sub ecx,eax
	sub ecx,dword ptr [esp+0x48]
	push edx
	sub ecx,3
	push ecx
	push 0xDD
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine

 Block132:
	mov ecx,dword ptr [esp+0xB8]
	test ecx,ecx
	je Block138

 Block133:
	mov edx,dword ptr [esp+0xBC]
	cmp ecx,edx
	je Block138

 Block134:
	test edi,edi
	jne Block136

 Block135:
	xor eax,eax
	jmp Block137

 Block136:
	mov eax,dword ptr [edi-4]

 Block137:
	push edx
	mov edx,dword ptr [esi+8]
	shl eax,4
	sub edx,eax
	sub edx,dword ptr [esp+0x5C]
	push ecx
	sub edx,dword ptr [esp+0x40]
	mov ecx,esi
	sub edx,0x27
	push edx
	call CUIToolTip::DrawDiscount_Info

 Block138:
	cmp dword ptr [esp+0xC0],0
	je Block143

 Block139:
	test edi,edi
	jne Block141

 Block140:
	xor eax,eax
	jmp Block142

 Block141:
	mov eax,dword ptr [edi-4]

 Block142:
	mov edx,dword ptr [esi+8]
	lea ecx,[esp+0x14]
	shl eax,4
	push ecx
	sub edx,eax
	push edx
	mov ecx,esi
	call CUIToolTip::DrawLimitInfo

 Block143:
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0xA0],0x12
	test eax,eax
	je Block145

 Block144:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block145:
	lea ecx,[esp+0x14]
	mov byte ptr [esp+0xA0],0xB
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0xA0],0xA
	test eax,eax
	je Block147

 Block146:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block147:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0xA0],9
	test eax,eax
	je Block149

 Block148:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block149:
	mov byte ptr [esp+0xA0],3
	test ebx,ebx
	je Block151

 Block150:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block151:
	mov eax,dword ptr [esp+0x5C]
	mov byte ptr [esp+0xA0],2
	test eax,eax
	je Block153

 Block152:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block153:
	mov eax,dword ptr [esp+0x3C]
	mov byte ptr [esp+0xA0],0
	test eax,eax
	je Block155

 Block154:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block155:
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0xA0],0xFFFFFFFF
	call ZArray<ZXString<char>>::RemoveAll

 Block156:
	mov ecx,dword ptr [esp+0x98]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x90
	ret 0x24
}
}
// CUIToolTip::operator=
__SUB_CLASS_THIS(005110A0, __thiscall, 5808,  CUIToolTip, CUIToolTip&, const CUIToolTip&) {
__asm {

 Block0:
	sub esp,8
	push ebx
	push ebp
	mov ebp,dword ptr [esp+0x14]
	mov eax,dword ptr [ebp+4]
	push esi
	mov esi,ecx
	mov dword ptr [esi+4],eax
	mov ecx,dword ptr [ebp+8]
	mov dword ptr [esi+8],ecx
	mov edx,dword ptr [ebp+0xC]
	mov dword ptr [esi+0xC],edx
	mov eax,dword ptr [ebp+0x10]
	push edi
	mov edi,dword ptr [esi+0x10]
	cmp edi,eax
	je Block5

 Block1:
	mov dword ptr [esi+0x10],eax
	test eax,eax
	je Block3

 Block2:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block3:
	test edi,edi
	je Block5

 Block4:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block5:
	mov eax,dword ptr [ebp+0x14]
	mov edi,dword ptr [esi+0x14]
	cmp edi,eax
	je Block10

 Block6:
	mov dword ptr [esi+0x14],eax
	test eax,eax
	je Block8

 Block7:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block8:
	test edi,edi
	je Block10

 Block9:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block10:
	mov eax,dword ptr [ebp+0x18]
	mov dword ptr [esi+0x18],eax
	mov ecx,dword ptr [ebp+0x1C]
	mov dword ptr [esi+0x1C],ecx
	mov edx,dword ptr [ebp+0x20]
	lea ebx,[ebp+0x30]
	sub ebp,esi
	mov dword ptr [esi+0x20],edx
	lea edi,[esi+0x28]
	mov dword ptr [esp+0x10],ebp
	mov dword ptr [esp+0x14],0x20
	nop

 Block11:
	mov eax,dword ptr [ebx-0xC]
	mov dword ptr [edi-4],eax
	mov ecx,dword ptr [edi+ebp]
	mov dword ptr [edi],ecx
	mov edx,dword ptr [ebx-4]
	push ebx
	lea ecx,[edi+8]
	mov dword ptr [edi+4],edx
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebx+4]
	mov dword ptr [edi+0xC],eax
	mov ecx,dword ptr [ebx+8]
	mov dword ptr [edi+0x10],ecx
	mov edx,dword ptr [ebx+0xC]
	lea eax,[ebx+0x10]
	push eax
	lea ecx,[edi+0x18]
	mov dword ptr [edi+0x14],edx
	call ZXString<char>::op_assign
	mov ecx,dword ptr [ebx+0x14]
	mov dword ptr [edi+0x1C],ecx
	add ebx,0x24
	add edi,0x24
	sub dword ptr [esp+0x14],1
	jne Block11

 Block12:
	mov ebx,dword ptr [esp+0x1C]
	mov edx,dword ptr [ebx+0x4A4]
	mov dword ptr [esi+0x4A4],edx
	mov eax,dword ptr [ebx+0x4A8]
	mov dword ptr [esi+0x4A8],eax
	add ebx,0x4B8
	lea edi,[esi+0x4B0]
	mov ebp,0x20
	jmp Block14

 Block14:
	mov ecx,dword ptr [ebx-0xC]
	mov edx,dword ptr [esp+0x10]
	mov dword ptr [edi-4],ecx
	mov eax,dword ptr [edx+edi]
	mov dword ptr [edi],eax
	mov ecx,dword ptr [ebx-4]
	mov dword ptr [edi+4],ecx
	push ebx
	lea ecx,[edi+8]
	call ZXString<char>::op_assign
	mov edx,dword ptr [ebx+4]
	mov dword ptr [edi+0xC],edx
	mov eax,dword ptr [ebx+8]
	mov dword ptr [edi+0x10],eax
	mov ecx,dword ptr [ebx+0xC]
	lea edx,[ebx+0x10]
	mov dword ptr [edi+0x14],ecx
	push edx
	lea ecx,[edi+0x18]
	call ZXString<char>::op_assign
	mov eax,dword ptr [ebx+0x14]
	mov dword ptr [edi+0x1C],eax
	add ebx,0x24
	add edi,0x24
	sub ebp,1
	jne Block14

 Block15:
	mov ebx,dword ptr [esp+0x1C]
	mov eax,dword ptr [ebx+0x92C]
	mov edi,dword ptr [esi+0x92C]
	cmp edi,eax
	je Block20

 Block16:
	mov dword ptr [esi+0x92C],eax
	test eax,eax
	je Block18

 Block17:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block18:
	test edi,edi
	je Block20

 Block19:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block20:
	mov eax,dword ptr [ebx+0x930]
	mov edi,dword ptr [esi+0x930]
	cmp edi,eax
	je Block25

 Block21:
	mov dword ptr [esi+0x930],eax
	test eax,eax
	je Block23

 Block22:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block23:
	test edi,edi
	je Block25

 Block24:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block25:
	mov eax,dword ptr [ebx+0x934]
	mov edi,dword ptr [esi+0x934]
	cmp edi,eax
	je Block30

 Block26:
	mov dword ptr [esi+0x934],eax
	test eax,eax
	je Block28

 Block27:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block28:
	test edi,edi
	je Block30

 Block29:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block30:
	mov eax,dword ptr [ebx+0x938]
	mov edi,dword ptr [esi+0x938]
	cmp edi,eax
	je Block35

 Block31:
	mov dword ptr [esi+0x938],eax
	test eax,eax
	je Block33

 Block32:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block33:
	test edi,edi
	je Block35

 Block34:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block35:
	mov eax,dword ptr [ebx+0x93C]
	mov edi,dword ptr [esi+0x93C]
	cmp edi,eax
	je Block40

 Block36:
	mov dword ptr [esi+0x93C],eax
	test eax,eax
	je Block38

 Block37:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block38:
	test edi,edi
	je Block40

 Block39:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block40:
	mov eax,dword ptr [ebx+0x940]
	mov edi,dword ptr [esi+0x940]
	cmp edi,eax
	je Block45

 Block41:
	mov dword ptr [esi+0x940],eax
	test eax,eax
	je Block43

 Block42:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block43:
	test edi,edi
	je Block45

 Block44:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block45:
	mov eax,dword ptr [ebx+0x944]
	mov edi,dword ptr [esi+0x944]
	cmp edi,eax
	je Block50

 Block46:
	mov dword ptr [esi+0x944],eax
	test eax,eax
	je Block48

 Block47:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block48:
	test edi,edi
	je Block50

 Block49:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block50:
	mov eax,dword ptr [ebx+0x948]
	mov edi,dword ptr [esi+0x948]
	cmp edi,eax
	je Block55

 Block51:
	mov dword ptr [esi+0x948],eax
	test eax,eax
	je Block53

 Block52:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block53:
	test edi,edi
	je Block55

 Block54:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block55:
	mov eax,dword ptr [ebx+0x94C]
	mov edi,dword ptr [esi+0x94C]
	cmp edi,eax
	je Block60

 Block56:
	mov dword ptr [esi+0x94C],eax
	test eax,eax
	je Block58

 Block57:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block58:
	test edi,edi
	je Block60

 Block59:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block60:
	mov eax,dword ptr [ebx+0x950]
	mov edi,dword ptr [esi+0x950]
	cmp edi,eax
	je Block65

 Block61:
	mov dword ptr [esi+0x950],eax
	test eax,eax
	je Block63

 Block62:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block63:
	test edi,edi
	je Block65

 Block64:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block65:
	mov eax,dword ptr [ebx+0x954]
	mov edi,dword ptr [esi+0x954]
	cmp edi,eax
	je Block70

 Block66:
	mov dword ptr [esi+0x954],eax
	test eax,eax
	je Block68

 Block67:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block68:
	test edi,edi
	je Block70

 Block69:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block70:
	mov eax,dword ptr [ebx+0x958]
	mov edi,dword ptr [esi+0x958]
	cmp edi,eax
	je Block75

 Block71:
	mov dword ptr [esi+0x958],eax
	test eax,eax
	je Block73

 Block72:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block73:
	test edi,edi
	je Block75

 Block74:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block75:
	mov eax,dword ptr [ebx+0x95C]
	mov edi,dword ptr [esi+0x95C]
	cmp edi,eax
	je Block80

 Block76:
	mov dword ptr [esi+0x95C],eax
	test eax,eax
	je Block78

 Block77:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block78:
	test edi,edi
	je Block80

 Block79:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block80:
	mov eax,dword ptr [ebx+0x960]
	mov edi,dword ptr [esi+0x960]
	cmp edi,eax
	je Block85

 Block81:
	mov dword ptr [esi+0x960],eax
	test eax,eax
	je Block83

 Block82:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block83:
	test edi,edi
	je Block85

 Block84:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block85:
	mov eax,dword ptr [ebx+0x964]
	mov edi,dword ptr [esi+0x964]
	cmp edi,eax
	je Block90

 Block86:
	mov dword ptr [esi+0x964],eax
	test eax,eax
	je Block88

 Block87:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block88:
	test edi,edi
	je Block90

 Block89:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block90:
	mov eax,dword ptr [ebx+0x968]
	mov edi,dword ptr [esi+0x968]
	cmp edi,eax
	je Block95

 Block91:
	mov dword ptr [esi+0x968],eax
	test eax,eax
	je Block93

 Block92:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block93:
	test edi,edi
	je Block95

 Block94:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block95:
	mov eax,dword ptr [ebx+0x96C]
	mov edi,dword ptr [esi+0x96C]
	cmp edi,eax
	je Block100

 Block96:
	mov dword ptr [esi+0x96C],eax
	test eax,eax
	je Block98

 Block97:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block98:
	test edi,edi
	je Block100

 Block99:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block100:
	mov eax,dword ptr [ebx+0x970]
	mov edi,dword ptr [esi+0x970]
	cmp edi,eax
	je Block105

 Block101:
	mov dword ptr [esi+0x970],eax
	test eax,eax
	je Block103

 Block102:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block103:
	test edi,edi
	je Block105

 Block104:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block105:
	mov eax,dword ptr [ebx+0x974]
	mov edi,dword ptr [esi+0x974]
	cmp edi,eax
	je Block110

 Block106:
	mov dword ptr [esi+0x974],eax
	test eax,eax
	je Block108

 Block107:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block108:
	test edi,edi
	je Block110

 Block109:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block110:
	mov eax,dword ptr [ebx+0x978]
	mov edi,dword ptr [esi+0x978]
	cmp edi,eax
	je Block115

 Block111:
	mov dword ptr [esi+0x978],eax
	test eax,eax
	je Block113

 Block112:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block113:
	test edi,edi
	je Block115

 Block114:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block115:
	mov eax,dword ptr [ebx+0x97C]
	mov edi,dword ptr [esi+0x97C]
	cmp edi,eax
	je Block120

 Block116:
	mov dword ptr [esi+0x97C],eax
	test eax,eax
	je Block118

 Block117:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block118:
	test edi,edi
	je Block120

 Block119:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block120:
	mov eax,dword ptr [ebx+0x980]
	mov edi,dword ptr [esi+0x980]
	cmp edi,eax
	je Block125

 Block121:
	mov dword ptr [esi+0x980],eax
	test eax,eax
	je Block123

 Block122:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block123:
	test edi,edi
	je Block125

 Block124:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block125:
	mov eax,dword ptr [ebx+0x984]
	mov edi,dword ptr [esi+0x984]
	cmp edi,eax
	je Block130

 Block126:
	mov dword ptr [esi+0x984],eax
	test eax,eax
	je Block128

 Block127:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block128:
	test edi,edi
	je Block130

 Block129:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block130:
	mov eax,dword ptr [ebx+0x988]
	mov edi,dword ptr [esi+0x988]
	cmp edi,eax
	je Block135

 Block131:
	mov dword ptr [esi+0x988],eax
	test eax,eax
	je Block133

 Block132:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block133:
	test edi,edi
	je Block135

 Block134:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block135:
	mov eax,dword ptr [ebx+0x98C]
	mov edi,dword ptr [esi+0x98C]
	cmp edi,eax
	je Block140

 Block136:
	mov dword ptr [esi+0x98C],eax
	test eax,eax
	je Block138

 Block137:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block138:
	test edi,edi
	je Block140

 Block139:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block140:
	mov eax,dword ptr [ebx+0x990]
	mov edi,dword ptr [esi+0x990]
	cmp edi,eax
	je Block145

 Block141:
	mov dword ptr [esi+0x990],eax
	test eax,eax
	je Block143

 Block142:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block143:
	test edi,edi
	je Block145

 Block144:
	mov ecx,dword ptr [edi]
	mov edx,dword ptr [ecx+8]
	push edi
	call edx

 Block145:
	mov eax,dword ptr [ebx+0x994]
	mov edi,dword ptr [esi+0x994]
	cmp edi,eax
	je Block150

 Block146:
	mov dword ptr [esi+0x994],eax
	test eax,eax
	je Block148

 Block147:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block148:
	test edi,edi
	je Block150

 Block149:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block150:
	lea edi,[esi+0x998]
	mov ebp,0xC

 Block151:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+edi]
	mov ebx,dword ptr [edi]
	cmp ebx,eax
	je Block156

 Block152:
	mov dword ptr [edi],eax
	test eax,eax
	je Block154

 Block153:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block154:
	test ebx,ebx
	je Block156

 Block155:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block156:
	add edi,4
	sub ebp,1
	jne Block151

 Block157:
	mov edx,dword ptr [esp+0x1C]
	mov eax,dword ptr [edx+0x9C8]
	mov edi,dword ptr [esi+0x9C8]
	cmp edi,eax
	je Block162

 Block158:
	mov dword ptr [esi+0x9C8],eax
	test eax,eax
	je Block160

 Block159:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block160:
	test edi,edi
	je Block162

 Block161:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block162:
	mov edx,dword ptr [esp+0x1C]
	mov eax,dword ptr [edx+0x9CC]
	mov edi,dword ptr [esi+0x9CC]
	cmp edi,eax
	je Block167

 Block163:
	mov dword ptr [esi+0x9CC],eax
	test eax,eax
	je Block165

 Block164:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block165:
	test edi,edi
	je Block167

 Block166:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block167:
	lea edi,[esi+0x9D0]
	mov ebp,0xC

 Block168:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+edi]
	mov ebx,dword ptr [edi]
	cmp ebx,eax
	je Block173

 Block169:
	mov dword ptr [edi],eax
	test eax,eax
	je Block171

 Block170:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block171:
	test ebx,ebx
	je Block173

 Block172:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block173:
	add edi,4
	sub ebp,1
	jne Block168

 Block174:
	lea edi,[esi+0xA00]
	mov ebp,3
	mov edi,edi

 Block175:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+edi]
	mov ebx,dword ptr [edi]
	cmp ebx,eax
	je Block180

 Block176:
	mov dword ptr [edi],eax
	test eax,eax
	je Block178

 Block177:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block178:
	test ebx,ebx
	je Block180

 Block179:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block180:
	add edi,4
	sub ebp,1
	jne Block175

 Block181:
	lea edi,[esi+0xA0C]
	mov ebp,8
	lea ebx,[ebx]

 Block182:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+edi]
	mov ebx,dword ptr [edi]
	cmp ebx,eax
	je Block187

 Block183:
	mov dword ptr [edi],eax
	test eax,eax
	je Block185

 Block184:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block185:
	test ebx,ebx
	je Block187

 Block186:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block187:
	add edi,4
	sub ebp,1
	jne Block182

 Block188:
	mov edx,dword ptr [esp+0x1C]
	mov eax,dword ptr [edx+0xA2C]
	mov edi,dword ptr [esi+0xA2C]
	cmp edi,eax
	je Block193

 Block189:
	mov dword ptr [esi+0xA2C],eax
	test eax,eax
	je Block191

 Block190:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block191:
	test edi,edi
	je Block193

 Block192:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block193:
	mov edx,dword ptr [esp+0x1C]
	mov eax,dword ptr [edx+0xA30]
	mov edi,dword ptr [esi+0xA30]
	cmp edi,eax
	je Block198

 Block194:
	mov dword ptr [esi+0xA30],eax
	test eax,eax
	je Block196

 Block195:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block196:
	test edi,edi
	je Block198

 Block197:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block198:
	lea edi,[esi+0xA34]
	mov ebp,4
	mov edi,edi

 Block199:
	mov edx,dword ptr [esp+0x10]
	mov eax,dword ptr [edx+edi]
	mov ebx,dword ptr [edi]
	cmp ebx,eax
	je Block204

 Block200:
	mov dword ptr [edi],eax
	test eax,eax
	je Block202

 Block201:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block202:
	test ebx,ebx
	je Block204

 Block203:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+8]
	push ebx
	call ecx

 Block204:
	add edi,4
	sub ebp,1
	jne Block199

 Block205:
	mov edx,dword ptr [esp+0x1C]
	mov eax,dword ptr [edx+0xA44]
	pop edi
	mov dword ptr [esi+0xA44],eax
	mov eax,esi
	pop esi
	pop ebp
	pop ebx
	add esp,8
	ret 4
}
}
// CUIToolTip::SetToolTip_Equip2
_SUB_EXCEPTION_HANDLER(4A8AA0)
__SUB_CLASS_THIS(004A8AA0, __thiscall, 5715,  CUIToolTip, void, long, long, GW_ItemSlotEquip*, GW_ItemSlotEquip*, int32_t, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A8AA0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x3C
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x50]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov dword ptr [esp+0x14],ebp
	xor esi,esi
	cmp dword ptr [ebp+0x10],esi
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov eax,dword ptr [ebp+0x18]
	cmp eax,dword ptr [esp+0x60]
	jne Block3

 Block2:
	mov ecx,dword ptr [ebp+0x1C]
	cmp ecx,dword ptr [esp+0x64]
	je Block126

 Block3:
	mov dword ptr [esp+0x20],esi
	push esi
	push 1
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push esi
	push esi
	mov edx,dword ptr [esp+0x80]
	push esi
	push esi
	push esi
	push esi
	push esi
	push esi
	push esi
	push esi
	push esi
	push esi
	push edx
	push esi
	push esi
	mov ecx,ebp
	mov dword ptr [esp+0xA4],esi
	mov dword ptr [eax+4],esi
	call CUIToolTip::SetToolTip_Equip
	mov edi,dword ptr [ebp+0x10]
	mov dword ptr [ebp+0x10],esi
	mov ebx,dword ptr [ebp+0x14]
	mov dword ptr [esp+0x20],edi
	mov dword ptr [esp+0x24],ebx
	cmp ebx,esi
	je Block5

 Block4:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+4]
	push ebx
	call ecx

 Block5:
	mov edx,dword ptr [esp+0x74]
	push 0
	push 1
	sub esp,8
	mov eax,esp
	mov dword ptr [esp+0x2C],esp
	push 0
	push 0
	mov ecx,dword ptr [esp+0x7C]
	push 0
	push 0
	push edx
	mov edx,dword ptr [esp+0x84]
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	push 0
	mov dword ptr [eax+4],0
	mov eax,dword ptr [esp+0xAC]
	push eax
	push ecx
	push edx
	mov ecx,ebp
	mov byte ptr [esp+0xA4],1
	call CUIToolTip::SetToolTip_Equip
	mov esi,dword ptr [ebp+0x14]
	cmp esi,ebx
	je Block10

 Block6:
	mov dword ptr [ebp+0x14],ebx
	test ebx,ebx
	je Block8

 Block7:
	mov eax,dword ptr [ebx]
	mov ecx,dword ptr [eax+4]
	push ebx
	call ecx

 Block8:
	test esi,esi
	je Block10

 Block9:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block10:
	cmp dword ptr [esp+0x70],0
	mov ecx,dword ptr [esp+0x60]
	mov edx,dword ptr [esp+0x64]
	mov dword ptr [esp+0x74],ecx
	mov dword ptr [esp+0x18],edx
	je Block13

 Block11:
	mov esi,dword ptr [ebp+0x10]
	mov dword ptr [esp+0x28],0
	test esi,esi
	jne Block19

 Block12:
	push 0x80004003
	call _com_issue_error

 Block13:
	mov esi,dword ptr [ebp+0x10]
	test esi,esi
	jne Block15

 Block14:
	push 0x80004003
	call _com_issue_error

 Block15:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0xB8]
	lea ecx,[esp+0x6C]
	push ecx
	xor ebx,ebx
	push esi
	mov dword ptr [esp+0x74],ebx
	call edx
	cmp eax,ebx
	jge Block17

 Block16:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block17:
	mov esi,dword ptr [ebp+0x10]
	mov eax,dword ptr [esp+0x6C]
	mov dword ptr [esp+0x28],eax
	mov dword ptr [esp+0x2C],ebx
	cmp esi,ebx
	jne Block34

 Block18:
	push 0x80004003
	call _com_issue_error

 Block19:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0xC0]
	lea edx,[esp+0x6C]
	push edx
	xor ebx,ebx
	push esi
	mov dword ptr [esp+0x74],ebx
	call eax
	cmp eax,ebx
	jge Block21

 Block20:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block21:
	mov ecx,dword ptr [esp+0x6C]
	mov dword ptr [esp+0x2C],ecx
	cmp edi,ebx
	jne Block23

 Block22:
	push 0x80004003
	call _com_issue_error

 Block23:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0xB8]
	lea eax,[esp+0x6C]
	push eax
	push edi
	mov dword ptr [esp+0x74],ebx
	call ecx
	cmp eax,ebx
	jge Block25

 Block24:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block25:
	mov esi,dword ptr [ebp+0x10]
	mov ebx,dword ptr [esp+0x6C]
	test esi,esi
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xB8]
	lea eax,[esp+0x70]
	push eax
	push esi
	mov dword ptr [esp+0x78],0
	call ecx
	test eax,eax
	jge Block29

 Block28:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block29:
	mov eax,dword ptr [esp+0x70]
	cmp ebx,eax
	jge Block33

 Block30:
	mov dword ptr [esp+0x6C],eax

 Block31:
	mov esi,dword ptr [ebp+0x10]
	test esi,esi
	jne Block44

 Block32:
	push 0x80004003
	call _com_issue_error

 Block33:
	mov dword ptr [esp+0x6C],ebx
	jmp Block31

 Block34:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0xB8]
	lea eax,[esp+0x6C]
	push eax
	push esi
	mov dword ptr [esp+0x74],ebx
	call ecx
	cmp eax,ebx
	jge Block36

 Block35:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block36:
	mov esi,dword ptr [esp+0x6C]
	cmp edi,ebx
	jne Block38

 Block37:
	push 0x80004003
	call _com_issue_error

 Block38:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0xB8]
	lea eax,[esp+0x70]
	push eax
	push edi
	mov dword ptr [esp+0x78],ebx
	call ecx
	cmp eax,ebx
	jge Block40

 Block39:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block40:
	mov edx,dword ptr [esp+0x70]
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0xC0]
	add edx,esi
	mov dword ptr [esp+0x6C],edx
	lea edx,[esp+0x70]
	push edx
	push edi
	mov dword ptr [esp+0x78],ebx
	call eax
	cmp eax,ebx
	jge Block42

 Block41:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block42:
	mov esi,dword ptr [ebp+0x10]
	mov ebx,dword ptr [esp+0x70]
	test esi,esi
	jne Block49

 Block43:
	push 0x80004003
	call _com_issue_error

 Block44:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0xC0]
	lea ecx,[esp+0x70]
	push ecx
	xor ebx,ebx
	push esi
	mov dword ptr [esp+0x78],ebx
	call edx
	cmp eax,ebx
	jge Block46

 Block45:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block46:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0xC0]
	mov esi,dword ptr [esp+0x70]
	lea ecx,[esp+0x1C]
	push ecx
	push edi
	mov dword ptr [esp+0x24],ebx
	call edx
	cmp eax,ebx
	jge Block48

 Block47:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block48:
	mov eax,dword ptr [esp+0x1C]
	lea ebx,[eax+esi]
	jmp Block53

 Block49:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0xC0]
	lea edx,[esp+0x1C]
	push edx
	push esi
	mov dword ptr [esp+0x24],0
	call eax
	test eax,eax
	jge Block51

 Block50:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block51:
	mov eax,dword ptr [esp+0x1C]
	cmp ebx,eax
	jge Block53

 Block52:
	mov ebx,eax

 Block53:
	cmp dword ptr [ebp+0x14],0
	je Block60

 Block54:
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0xB8]
	lea edx,[esp+0x70]
	push edx
	push edi
	mov dword ptr [esp+0x78],0
	call eax
	test eax,eax
	jge Block56

 Block55:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block56:
	mov esi,dword ptr [esp+0x70]
	call get_screen_width
	mov ecx,dword ptr [esp+0x6C]
	add esi,ecx
	add esi,dword ptr [esp+0x60]
	cmp esi,eax
	jle Block63

 Block57:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0xB8]
	lea eax,[esp+0x74]
	push eax
	push edi
	mov dword ptr [esp+0x7C],0
	call ecx
	test eax,eax
	jge Block59

 Block58:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block59:
	mov esi,dword ptr [esp+0x74]
	call get_screen_width
	sub eax,esi
	sub eax,dword ptr [esp+0x6C]
	jmp Block62

 Block60:
	call get_screen_width
	mov esi,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x60]
	lea ecx,[esi+edx]
	cmp ecx,eax
	jle Block63

 Block61:
	call get_screen_width
	sub eax,esi

 Block62:
	mov dword ptr [esp+0x74],eax

 Block63:
	xor esi,esi
	cmp dword ptr [esp+0x74],esi
	jge Block65

 Block64:
	mov dword ptr [esp+0x74],esi

 Block65:
	call get_screen_height
	mov edx,dword ptr [esp+0x64]
	lea ecx,[ebx+edx]
	cmp ecx,eax
	jle Block67

 Block66:
	call get_screen_height
	sub eax,ebx
	mov dword ptr [esp+0x18],eax
	jmp Block68

 Block67:
	mov eax,edx

 Block68:
	cmp eax,esi
	jge Block70

 Block69:
	mov dword ptr [esp+0x18],esi

 Block70:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x40]
	push edx
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block72

 Block71:
	push eax
	call _com_issue_error

 Block72:
	lea ecx,[esp+0x30]
	mov bl,2
	push ecx
	mov byte ptr [esp+0x5C],bl
	call ebp
	lea edx,[esp+0x30]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block74

 Block73:
	push eax
	call _com_issue_error

 Block74:
	mov ecx,dword ptr [esp+0x18]
	mov eax,dword ptr [esp+0x2C]
	add eax,ecx
	lea edx,[esp+0x40]
	push edx
	mov edx,dword ptr [esp+0x2C]
	lea ecx,[esp+0x34]
	push ecx
	push eax
	mov dword ptr [esp+0x7C],eax
	mov eax,dword ptr [esp+0x80]
	add edx,eax
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x68],3
	call IWzVector2D::RelMove
	mov esi,8
	mov byte ptr [esp+0x58],bl
	mov ebx,dword ptr [ZImports::_VariantClear]
	cmp word ptr [esp+0x30],si
	jne Block77

 Block75:
	mov eax,dword ptr [esp+0x38]
	xor ecx,ecx
	mov word ptr [esp+0x30],cx
	test eax,eax
	je Block78

 Block76:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block78

 Block77:
	lea edx,[esp+0x30]
	push edx
	call ebx

 Block78:
	mov byte ptr [esp+0x58],1
	cmp word ptr [esp+0x40],si
	jne Block81

 Block79:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block82

 Block80:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block82

 Block81:
	lea ecx,[esp+0x40]
	push ecx
	call ebx

 Block82:
	mov edx,0xD
	mov word ptr [esp+0x30],dx
	mov dword ptr [esp+0x38],edi
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+4]
	push edi
	call ecx
	mov edx,dword ptr [esp+0x14]
	mov esi,dword ptr [edx+0x10]
	mov byte ptr [esp+0x58],4
	test esi,esi
	jne Block84

 Block83:
	push 0x80004003
	call _com_issue_error

 Block84:
	mov edx,dword ptr [esp+0x30]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x44]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x48]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x4C]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push esi
	call eax
	test eax,eax
	jge Block86

 Block85:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push esi
	push eax
	call _com_issue_errorex

 Block86:
	cmp word ptr [esp+0x30],8
	mov byte ptr [esp+0x58],1
	jne Block89

 Block87:
	mov eax,dword ptr [esp+0x38]
	xor ecx,ecx
	mov word ptr [esp+0x30],cx
	test eax,eax
	je Block90

 Block88:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block90

 Block89:
	lea edx,[esp+0x30]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block90:
	lea eax,[esp+0x30]
	push eax
	call ebp
	lea ecx,[esp+0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block92

 Block91:
	push eax
	call _com_issue_error

 Block92:
	lea edx,[esp+0x40]
	mov bl,5
	push edx
	mov byte ptr [esp+0x5C],bl
	call ebp
	lea eax,[esp+0x40]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block94

 Block93:
	push eax
	call _com_issue_error

 Block94:
	mov ecx,dword ptr [esp+0x14]
	mov ecx,dword ptr [ecx+0x10]
	mov byte ptr [esp+0x58],6
	test ecx,ecx
	jne Block96

 Block95:
	push 0x80004003
	call _com_issue_error

 Block96:
	mov esi,dword ptr [esp+0x28]
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x44]
	push eax
	mov eax,dword ptr [esp+0x34]
	neg eax
	mov edx,esi
	push eax
	neg edx
	push edx
	call IWzVector2D::RelMove
	cmp word ptr [esp+0x40],8
	mov byte ptr [esp+0x58],bl
	jne Block99

 Block97:
	xor eax,eax
	mov word ptr [esp+0x40],ax
	mov eax,dword ptr [esp+0x48]
	test eax,eax
	je Block100

 Block98:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block100

 Block99:
	lea ecx,[esp+0x40]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block100:
	cmp word ptr [esp+0x30],8
	mov byte ptr [esp+0x58],1
	jne Block103

 Block101:
	mov eax,dword ptr [esp+0x38]
	xor edx,edx
	mov word ptr [esp+0x30],dx
	test eax,eax
	je Block104

 Block102:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block104

 Block103:
	lea eax,[esp+0x30]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block104:
	mov ecx,dword ptr [esp+0x14]
	cmp dword ptr [ecx+0x14],0
	je Block121

 Block105:
	lea edx,[esp+0x30]
	push edx
	call ebp
	lea eax,[esp+0x30]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block107

 Block106:
	push eax
	call _com_issue_error

 Block107:
	lea ecx,[esp+0x40]
	mov bl,7
	push ecx
	mov byte ptr [esp+0x5C],bl
	call ebp
	lea edx,[esp+0x40]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block109

 Block108:
	push eax
	call _com_issue_error

 Block109:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0xB8]
	lea ecx,[esp+0x6C]
	push ecx
	push edi
	mov byte ptr [esp+0x60],8
	mov dword ptr [esp+0x74],0
	call edx
	test eax,eax
	jge Block111

 Block110:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block111:
	mov eax,dword ptr [esp+0x14]
	mov ecx,dword ptr [eax+0x14]
	test ecx,ecx
	jne Block113

 Block112:
	push 0x80004003
	call _com_issue_error

 Block113:
	lea edx,[esp+0x30]
	push edx
	mov edx,dword ptr [esp+0x74]
	lea eax,[esp+0x44]
	push eax
	mov eax,dword ptr [esp+0x74]
	add eax,esi
	add eax,dword ptr [esp+0x7C]
	push edx
	push eax
	call IWzVector2D::RelMove
	mov esi,8
	mov byte ptr [esp+0x58],bl
	cmp word ptr [esp+0x40],si
	jne Block116

 Block114:
	mov eax,dword ptr [esp+0x48]
	xor ecx,ecx
	mov word ptr [esp+0x40],cx
	test eax,eax
	je Block117

 Block115:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block117

 Block116:
	lea edx,[esp+0x40]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block117:
	mov byte ptr [esp+0x58],1
	cmp word ptr [esp+0x30],si
	jne Block120

 Block118:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block121

 Block119:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block121

 Block120:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block121:
	cmp dword ptr [esp+0x78],0
	je Block123

 Block122:
	push ecx
	mov eax,esp
	mov dword ptr [eax],edi
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+4]
	mov dword ptr [esp+0x78],esp
	push edi
	call eax
	mov ecx,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x68]
	mov eax,dword ptr [esp+0x64]
	push ecx
	mov ecx,dword ptr [esp+0x1C]
	push edx
	push eax
	call CUIToolTip::AddToolTip_SetItem

 Block123:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x58],0
	test eax,eax
	je Block125

 Block124:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block125:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	mov dword ptr [esp+0x5C],0xFFFFFFFF
	call ecx

 Block126:
	mov ecx,dword ptr [esp+0x50]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x48
	ret 0x1C
}
}
// CUIToolTip::DrawToolTip_Equip
_SUB_EXCEPTION_HANDLER(493F60)
__SUB_CLASS_THIS(00493F60, __thiscall, 5795,  CUIToolTip, void, long, GW_ItemSlotEquip*) {
__asm {

 Block0:
	push ebp
	mov ebp,esp
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_493F60
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x5C
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,ebp
	mov dword ptr [ebp-0x10],eax
	push ebx
	push esi
	push edi
	push eax
	lea eax,[ebp-0xC]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov ecx,dword ptr [ebp+0xC]
	add ecx,0xC
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetEquipItem
	mov ecx,dword ptr [ebp+0xC]
	mov esi,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	add ecx,0xC
	mov ebx,eax
	call TSecType<long>::GetData
	mov ecx,dword ptr [ebp+0xC]
	mov edx,dword ptr [ecx]
	mov dword ptr [ebp-0x18],eax
	mov eax,dword ptr [ebp+8]
	add eax,0x20
	mov dword ptr [ebp-0x30],eax
	mov eax,dword ptr [edx+4]
	push 0
	call eax
	mov ecx,dword ptr [ebp-0x18]
	mov edx,dword ptr [ebp-0x30]
	push eax
	push ecx
	push edx
	push 0xA
	mov ecx,edi
	call CUIToolTip::DrawItemIcon
	lea eax,[ebp-0x24]
	push eax
	mov ecx,esi
	call CWvsContext::GetCharacterData
	mov ecx,dword ptr [eax+4]
	mov edx,dword ptr [esi+0x20E4]
	push edx
	lea eax,[esi+0x20DC]
	push eax
	mov dword ptr [ebp-4],0
	mov dword ptr [ebp-0x18],ecx
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebx+0x68]
	push ecx
	lea edx,[ebx+0x60]
	push edx
	mov dword ptr [ebp-0x1C],eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp-0x18]
	add esp,0x10
	push 0
	mov dword ptr [ebp-0x14],eax
	mov eax,dword ptr [ebp+8]
	push 0
	push eax
	push 0
	call CharacterData::GetIncLevel
	mov ecx,dword ptr [ebp-0x1C]
	mov edx,dword ptr [ebp-0x14]
	push eax
	push ecx
	push edx
	mov ecx,edi
	call CUIToolTip::DrawTextEquip_Req_Level
	mov eax,dword ptr [ebp-0x20]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block4

 Block1:
	add eax,0xFFFFFFF0
	mov dword ptr [ebp-0x14],eax
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	mov eax,dword ptr [ebp-0x14]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp dword ptr [ebp-0x14],0
	je Block4

 Block3:
	mov ecx,dword ptr [ebp-0x14]
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block4:
	mov eax,dword ptr [esi+0x20FC]
	push eax
	lea ecx,[esi+0x20F4]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [ebp+8]
	add esp,8
	push 0
	push 0
	push edx
	push 1
	push eax
	mov eax,dword ptr [ebx+0x20]
	push eax
	lea ecx,[ebx+0x18]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,edi
	call CUIToolTip::DrawTextEquip_Req
	mov edx,dword ptr [esi+0x2108]
	push edx
	lea eax,[esi+0x2100]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp+8]
	mov edx,dword ptr [ebx+0x38]
	add esp,8
	push 0
	push 0
	push ecx
	push 2
	push eax
	push edx
	lea eax,[ebx+0x30]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,edi
	call CUIToolTip::DrawTextEquip_Req
	mov ecx,dword ptr [esi+0x2114]
	push ecx
	lea edx,[esi+0x210C]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp+8]
	mov edx,dword ptr [ebx+0x2C]
	add esp,8
	push 0
	push 0
	push ecx
	push 3
	push eax
	push edx
	lea eax,[ebx+0x24]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,edi
	call CUIToolTip::DrawTextEquip_Req
	mov ecx,dword ptr [esi+0x2120]
	push ecx
	lea edx,[esi+0x2118]
	push edx
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [ebp+8]
	mov edx,dword ptr [ebx+0x44]
	add esp,8
	push 0
	push 0
	push ecx
	push 4
	push eax
	push edx
	lea eax,[ebx+0x3C]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,edi
	call CUIToolTip::DrawTextEquip_Req
	mov ecx,dword ptr [ebx+0x50]
	lea eax,[ebx+0x48]
	push ecx
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov edx,dword ptr [esi+0x212C]
	push edx
	add esi,0x2124
	push esi
	mov dword ptr [ebp-0x18],eax
	call _ZtlSecureFuseHelper<long>::call
	mov esi,dword ptr [ebp+8]
	mov edx,dword ptr [ebx+0x50]
	add esp,0x10
	xor ecx,ecx
	cmp dword ptr [ebp-0x18],ecx
	push 0
	sete cl
	push ecx
	push esi
	push 5
	push eax
	push edx
	lea eax,[ebx+0x48]
	push eax
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	mov ecx,edi
	call CUIToolTip::DrawTextEquip_Req
	mov eax,dword ptr [ebx+0x5C]
	push eax
	lea ecx,[ebx+0x54]
	push ecx
	call _ZtlSecureFuseHelper<long>::call
	add esp,8
	push eax
	push esi
	mov ecx,edi
	call CUIToolTip::DrawItemReqJob
	mov ecx,dword ptr [ebp+0xC]
	add ecx,0xC
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x68DB8BAD
	imul ecx
	sar edx,0xC
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cmp eax,0x86
	jne Block7

 Block5:
	add dword ptr [edi+0x4A4],0x12
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x20],esp
	push 0xE
	push ecx
	mov ecx,edi
	call CUIToolTip::GetFontByType
	lea edx,[ebp-0x18]
	push 0x1709
	push edx
	mov dword ptr [ebp-4],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov byte ptr [ebp-4],2
	push eax
	mov eax,esi
	add eax,0x9F
	push eax
	mov ecx,edi
	mov byte ptr [ebp-4],3
	call CUIToolTip::DrawTextCenter
	mov eax,dword ptr [ebp-0x18]
	mov dword ptr [ebp-4],0xFFFFFFFF
	test eax,eax
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov ecx,3
	mov word ptr [ebp-0x58],cx
	mov dword ptr [ebp-0x50],0
	mov ecx,dword ptr [edi+0x10]
	mov dword ptr [ebp-4],4
	test ecx,ecx
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	lea edx,[ebp-0x58]
	push edx
	lea eax,[ebp-0x48]
	push eax
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [ebp-0x58],8
	mov byte ptr [ebp-4],6
	jne Block12

 Block10:
	mov eax,dword ptr [ebp-0x50]
	xor ecx,ecx
	mov word ptr [ebp-0x58],cx
	test eax,eax
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea edx,[ebp-0x58]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block13:
	mov ecx,dword ptr [ebp+0xC]
	add ecx,0xC
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::IsGrowthItem
	mov ecx,3
	mov dword ptr [ebp-0x1C],eax
	mov word ptr [ebp-0x2C],cx
	mov dword ptr [ebp-0x24],0xFF
	mov esi,dword ptr [ebp-0x48]
	xor edx,edx
	test eax,eax
	sete dl
	mov byte ptr [ebp-4],7
	mov dword ptr [ebp-0x14],edx
	test esi,esi
	jne Block15

 Block14:
	push 0x80004003
	call _com_issue_error

 Block15:
	mov edx,dword ptr [ebp-0x2C]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [ebp-0x28]
	mov ecx,dword ptr [ecx+0x80]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp-0x24]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp-0x20]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp-0x14]
	mov eax,dword ptr [edi+eax*4+0xA0C]
	push eax
	mov eax,dword ptr [ebp-0x30]
	add eax,0x48
	push eax
	push 0x5E
	push esi
	call ecx
	test eax,eax
	jge Block17

 Block16:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block17:
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],6
	jne Block20

 Block18:
	mov eax,dword ptr [ebp-0x24]
	xor edx,edx
	mov word ptr [ebp-0x2C],dx
	test eax,eax
	je Block21

 Block19:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block21

 Block20:
	lea eax,[ebp-0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block21:
	mov ecx,3
	mov word ptr [ebp-0x2C],cx
	mov dword ptr [ebp-0x24],0xFF
	mov edx,dword ptr [ebp-0x14]
	mov eax,dword ptr [edi+edx*4+0xA14]
	mov edx,dword ptr [ebp-0x2C]
	mov ecx,dword ptr [esi]
	mov ecx,dword ptr [ecx+0x80]
	sub esp,0x10
	mov dword ptr [ebp-0x18],eax
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [ebp-0x28]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [ebp-0x24]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [ebp-0x20]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ebp-0x18]
	push eax
	mov eax,dword ptr [ebp-0x30]
	add eax,0x54
	push eax
	push 0x5E
	push esi
	mov byte ptr [ebp-4],8
	call ecx
	test eax,eax
	jge Block23

 Block22:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block23:
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],6
	jne Block26

 Block24:
	mov eax,dword ptr [ebp-0x24]
	xor edx,edx
	mov word ptr [ebp-0x2C],dx
	test eax,eax
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea eax,[ebp-0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block27:
	cmp dword ptr [ebp-0x1C],0
	je Block48

 Block28:
	mov eax,dword ptr [ebp+0xC]
	mov ecx,dword ptr [eax+0xDD]
	push ecx
	add eax,0xDB
	push eax
	call _ZtlSecureFuseHelper<unsigned char>::call
	mov ecx,dword ptr [ebp+0xC]
	add esp,8
	add ecx,0xC
	mov byte ptr [ebp-0x31],al
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetMaxLevel
	movzx edx,byte ptr [ebp-0x31]
	cmp edx,eax
	jne Block34

 Block29:
	mov eax,3
	mov word ptr [ebp-0x2C],ax
	mov dword ptr [ebp-0x24],0xFF
	mov eax,dword ptr [edi+0xA1C]
	lea ecx,[ebp-0x2C]
	push ecx
	push eax
	mov eax,dword ptr [ebp-0x30]
	add eax,0x48
	push eax
	push 0x94
	mov ecx,esi
	mov byte ptr [ebp-4],9
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],6
	jne Block32

 Block30:
	mov eax,dword ptr [ebp-0x24]
	xor edx,edx
	mov word ptr [ebp-0x2C],dx
	test eax,eax
	je Block33

 Block31:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block33

 Block32:
	lea eax,[ebp-0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block33:
	mov ecx,3
	mov word ptr [ebp-0x2C],cx
	mov dword ptr [ebp-0x24],0xFF
	mov eax,dword ptr [edi+0xA1C]
	lea edx,[ebp-0x2C]
	push edx
	push eax
	mov eax,dword ptr [ebp-0x30]
	add eax,0x54
	push eax
	mov byte ptr [ebp-4],0xA
	push 0x94
	jmp Block44

 Block34:
	mov ecx,dword ptr [ebp+0xC]
	sub esp,8
	mov eax,esp
	mov dword ptr [eax+4],ecx
	add ecx,4
	mov dword ptr [ebp-0x20],esp
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	call get_next_item_level_exp
	mov dword ptr [ebp-0x1C],eax
	mov eax,dword ptr [ebp+0xC]
	mov edx,dword ptr [eax+0xE9]
	push edx
	add eax,0xE1
	push eax
	call _ZtlSecureFuseHelper<long>::call
	mov dword ptr [ebp-0x18],eax
	fild dword ptr [ebp-0x18]
	add esp,0x10
	fidiv dword ptr [ebp-0x1C]
	fmul qword ptr [__real_4059000000000000]
	call __ftol2_sse
	test eax,eax
	jge Block36

 Block35:
	xor eax,eax
	mov dword ptr [ebp-0x14],eax
	jmp Block39

 Block36:
	cmp eax,0x63
	jge Block38

 Block37:
	mov dword ptr [ebp-0x14],eax
	jmp Block39

 Block38:
	mov dword ptr [ebp-0x14],0x63

 Block39:
	mov eax,dword ptr [edi+0xA2C]
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x20],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block41

 Block40:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block41:
	mov eax,dword ptr [ebp+0xC]
	mov ecx,dword ptr [eax+0xDD]
	push ecx
	add eax,0xDB
	push eax
	mov byte ptr [ebp-4],0xB
	call _ZtlSecureFuseHelper<unsigned char>::call
	movzx edx,al
	mov eax,dword ptr [ebp-0x30]
	add esp,8
	push edx
	add eax,0x48
	push eax
	push 0x94
	push ecx
	mov eax,esp
	mov dword ptr [eax],esi
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+4]
	mov dword ptr [ebp-0x18],esp
	push esi
	call ecx
	mov byte ptr [ebp-4],6
	call draw_number_by_image
	mov eax,dword ptr [edi+0xA2C]
	add esp,0x18
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x20],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block43

 Block42:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block43:
	mov ecx,dword ptr [ebp-0x14]
	mov eax,dword ptr [ebp-0x30]
	push ecx
	add eax,0x54
	push eax
	push 0x94
	push ecx
	mov eax,esp
	mov dword ptr [eax],esi
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+4]
	mov dword ptr [ebp-0x20],esp
	push esi
	call eax
	call draw_number_by_image
	mov ecx,3
	add esp,0x18
	mov word ptr [ebp-0x2C],cx
	mov dword ptr [ebp-0x24],0xFF
	mov eax,dword ptr [edi+0xA24]
	lea edx,[ebp-0x2C]
	push edx
	push eax
	mov eax,dword ptr [ebp-0x30]
	add eax,0x54
	push eax
	mov byte ptr [ebp-4],0xC
	push 0xA1

 Block44:
	mov ecx,esi
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x2C],8
	mov byte ptr [ebp-4],6
	jne Block47

 Block45:
	xor eax,eax
	mov word ptr [ebp-0x2C],ax
	mov eax,dword ptr [ebp-0x24]
	test eax,eax
	je Block76

 Block46:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block76

 Block47:
	lea ecx,[ebp-0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block76

 Block48:
	push 0
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [ebp-0x20],esp
	push 0x1AC4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [edi+0xA30]
	mov byte ptr [ebp-4],0xD
	test ecx,ecx
	jne Block50

 Block49:
	push 0x80004003
	call _com_issue_error

 Block50:
	lea eax,[ebp-0x68]
	push eax
	mov byte ptr [ebp-4],6
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [ebp-4],0xE
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[ebp-0x14]
	mov dword ptr [ebp-0x14],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block53

 Block51:
	cmp eax,0x80004002
	je Block53

 Block52:
	push eax
	call _com_issue_error

 Block53:
	cmp word ptr [ebp-0x68],8
	mov byte ptr [ebp-4],0x10
	jne Block56

 Block54:
	mov eax,dword ptr [ebp-0x60]
	xor ecx,ecx
	mov word ptr [ebp-0x68],cx
	test eax,eax
	je Block57

 Block55:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block57

 Block56:
	lea edx,[ebp-0x68]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block57:
	mov eax,3
	mov word ptr [ebp-0x44],ax
	mov dword ptr [ebp-0x3C],0xFF
	cmp dword ptr [ebp-0x14],0
	mov byte ptr [ebp-4],0x11
	jne Block59

 Block58:
	push 0x80004003
	call _com_issue_error

 Block59:
	mov eax,dword ptr [ebp-0x14]
	mov ecx,dword ptr [eax]
	lea edx,[ebp-0x1C]
	push edx
	push eax
	mov eax,dword ptr [ecx+0x74]
	mov dword ptr [ebp-0x1C],0
	call eax
	test eax,eax
	jge Block61

 Block60:
	mov ecx,dword ptr [ebp-0x14]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ecx
	push eax
	call _com_issue_errorex

 Block61:
	mov edx,dword ptr [ebp-0x1C]
	mov eax,dword ptr [ebp-0x14]
	mov ecx,dword ptr [eax]
	mov dword ptr [ebp-0x20],edx
	lea edx,[ebp-0x18]
	push edx
	push eax
	mov eax,dword ptr [ecx+0x6C]
	mov dword ptr [ebp-0x18],0
	call eax
	test eax,eax
	jge Block63

 Block62:
	mov ecx,dword ptr [ebp-0x14]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ecx
	push eax
	call _com_issue_errorex

 Block63:
	mov ecx,dword ptr [ebp+8]
	sub ecx,dword ptr [ebp-0x20]
	mov eax,dword ptr [ebp-0x14]
	lea edx,[ebp-0x44]
	push edx
	push eax
	add ecx,0x68
	mov edx,0x94
	sub edx,dword ptr [ebp-0x18]
	push ecx
	push edx
	mov ecx,esi
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x44],8
	mov byte ptr [ebp-4],0x10
	jne Block66

 Block64:
	xor eax,eax
	mov word ptr [ebp-0x44],ax
	mov eax,dword ptr [ebp-0x3C]
	test eax,eax
	je Block67

 Block65:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block67

 Block66:
	lea ecx,[ebp-0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block67:
	mov edx,3
	mov word ptr [ebp-0x44],dx
	mov dword ptr [ebp-0x3C],0xFF
	mov eax,dword ptr [ebp-0x14]
	mov ecx,dword ptr [eax]
	lea edx,[ebp-0x18]
	push edx
	push eax
	mov eax,dword ptr [ecx+0x74]
	mov byte ptr [ebp-4],0x12
	mov dword ptr [ebp-0x18],0
	call eax
	test eax,eax
	jge Block69

 Block68:
	mov ecx,dword ptr [ebp-0x14]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ecx
	push eax
	call _com_issue_errorex

 Block69:
	mov edx,dword ptr [ebp-0x18]
	mov eax,dword ptr [ebp-0x14]
	mov ecx,dword ptr [eax]
	mov dword ptr [ebp-0x20],edx
	lea edx,[ebp-0x1C]
	push edx
	push eax
	mov eax,dword ptr [ecx+0x6C]
	mov dword ptr [ebp-0x1C],0
	call eax
	test eax,eax
	jge Block71

 Block70:
	mov ecx,dword ptr [ebp-0x14]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ecx
	push eax
	call _com_issue_errorex

 Block71:
	mov eax,dword ptr [ebp-0x14]
	lea edx,[ebp-0x44]
	push edx
	push eax
	mov eax,dword ptr [ebp+8]
	sub eax,dword ptr [ebp-0x20]
	mov ecx,0x94
	sub ecx,dword ptr [ebp-0x1C]
	add eax,0x74
	push eax
	push ecx
	mov ecx,esi
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x44],8
	mov byte ptr [ebp-4],0x10
	jne Block74

 Block72:
	mov eax,dword ptr [ebp-0x3C]
	xor edx,edx
	mov word ptr [ebp-0x44],dx
	test eax,eax
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea eax,[ebp-0x44]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block75:
	mov eax,dword ptr [ebp-0x14]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [ebp-4],6
	call edx

 Block76:
	cmp dword ptr [ebx+0x260],0
	jle Block91

 Block77:
	mov eax,dword ptr [ebp+0xC]
	mov ecx,dword ptr [eax+0xF5]
	push ecx
	add eax,0xED
	push eax
	call _ZtlSecureFuseHelper<long>::call
	imul eax,0x64
	cdq
	idiv dword ptr [ebx+0x260]
	add esp,8
	mov edx,3
	mov word ptr [ebp-0x44],dx
	mov dword ptr [ebp-0x3C],0xFF
	mov ebx,eax
	xor eax,eax
	cmp ebx,0xA
	setle al
	mov dword ptr [ebp-0x18],eax
	mov eax,dword ptr [edi+eax*4+0xA34]
	mov ecx,dword ptr [ebp-0x30]
	lea edx,[ebp-0x44]
	push edx
	add ecx,0x60
	push eax
	push ecx
	mov dword ptr [ebp-0x1C],ecx
	push 0x5E
	mov ecx,esi
	mov byte ptr [ebp-4],0x13
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x44],8
	mov byte ptr [ebp-4],6
	jne Block80

 Block78:
	xor eax,eax
	mov word ptr [ebp-0x44],ax
	mov eax,dword ptr [ebp-0x3C]
	test eax,eax
	je Block81

 Block79:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block81

 Block80:
	lea ecx,[ebp-0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block81:
	cmp dword ptr [ebp-0x18],0
	lea eax,[edi+0x9CC]
	jne Block83

 Block82:
	lea eax,[edi+0x9C8]

 Block83:
	mov eax,dword ptr [eax]
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [ebp-0x20],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block85

 Block84:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block85:
	mov ecx,dword ptr [ebp-0x1C]
	push ebx
	push ecx
	push 0xA1
	push ecx
	mov eax,esp
	mov dword ptr [eax],esi
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+4]
	mov dword ptr [ebp-0x20],esp
	push esi
	call eax
	call draw_number_by_image
	mov ecx,3
	add esp,0x18
	mov word ptr [ebp-0x44],cx
	mov dword ptr [ebp-0x3C],0xFF
	lea eax,[ecx+0x1D]
	mov byte ptr [ebp-4],0x14
	call __alloca_probe_8
	mov eax,esp
	push 0xA
	push eax
	push ebx
	call _itoa
	add esp,0xC
	lea ecx,[eax+1]

 Block86:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block86

 Block87:
	mov edx,dword ptr [ebp-0x18]
	mov edi,dword ptr [edi+edx*4+0xA3C]
	mov edx,dword ptr [ebp-0x1C]
	sub eax,ecx
	lea ecx,[ebp-0x44]
	push ecx
	push edi
	lea eax,[eax+eax*2+0x51]
	push edx
	add eax,eax
	push eax
	mov ecx,esi
	call IWzCanvas::Copy
	cmp word ptr [ebp-0x44],8
	mov byte ptr [ebp-4],6
	jne Block90

 Block88:
	mov eax,dword ptr [ebp-0x3C]
	xor ecx,ecx
	mov word ptr [ebp-0x44],cx
	test eax,eax
	je Block91

 Block89:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block91

 Block90:
	lea edx,[ebp-0x44]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block91:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+8]
	push esi
	mov dword ptr [ebp-4],0xFFFFFFFF
	call ecx
	lea esp,[ebp-0x78]
	mov ecx,dword ptr [ebp-0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebx
	mov ecx,dword ptr [ebp-0x10]
	xor ecx,ebp
	call __xsecurity_check_cookie
	mov esp,ebp
	pop ebp
	ret 8
}
}
// CToolTipHelper::GetCharToolTipInfo
_SUB_EXCEPTION_HANDLER(483710)
__SUB_CLASS_THIS(00483710, __thiscall, 6213,  CToolTipHelper, void, long, tagPOINT&, ZXString<char>&, ZXString<char>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_483710
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x20]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor eax,eax
	mov dword ptr [esp+0x18],eax
	mov dword ptr [esp+0x1C],eax
	mov dword ptr [esp+0x28],eax
	lea eax,[esp+8]
	push eax
	lea ecx,[esp+0x34]
	push ecx
	lea ecx,[esi+8]
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::GetAt
	test eax,eax
	je Block2

 Block1:
	mov eax,dword ptr [esp+0x30]
	mov ecx,dword ptr [esp+0x34]
	lea edx,[eax+eax*2]
	mov eax,dword ptr [esi+4]
	lea eax,[eax+edx*8]
	mov edx,dword ptr [eax+8]
	mov dword ptr [ecx],edx
	mov eax,dword ptr [eax+0xC]
	mov dword ptr [ecx+4],eax
	lea ecx,[esp+0x18]
	push ecx
	mov ecx,dword ptr [esp+0x3C]
	call ZXString<char>::op_assign
	mov ecx,dword ptr [esp+0x3C]
	lea edx,[esp+0x1C]
	push edx
	call ZXString<char>::op_assign

 Block2:
	lea ecx,[esp+8]
	mov dword ptr [esp+0x28],0xFFFFFFFF
	call CToolTipHelper::TTH_INFO::~TTH_INFO
	mov ecx,dword ptr [esp+0x20]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x24
	ret 0x10
}
}
// CToolTipHelper::TTH_INFO::~TTH_INFO
_SUB_EXCEPTION_HANDLER(12E430)
__SUB_CLASS_THIS0(0012E430, __thiscall, 6231,  CToolTipHelper::TTH_INFO, void) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_12E430
	mov eax,dword ptr fs:[0]
	push eax
	push ecx
	push esi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+8],esi
	mov eax,dword ptr [esi+0x14]
	mov dword ptr [esp+0x14],0
	test eax,eax
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov esi,dword ptr [esi+0x10]
	mov dword ptr [esp+0x14],0xFFFFFFFF
	test esi,esi
	je Block4

 Block3:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block4:
	mov ecx,dword ptr [esp+0xC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop esi
	add esp,0x10
	ret
}
}
// CUIToolTip::MakePreviewPetNameTag
_SUB_EXCEPTION_HANDLER(4873B0)
__SUB_CLASS_THIS(004873B0, __thiscall, 5746,  CUIToolTip, _x_com_ptr<IWzCanvas>*, _x_com_ptr<IWzCanvas>*, const char*, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4873B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xCC
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xE0]
	mov dword ptr fs:[0],eax
	xor ebp,ebp
	mov dword ptr [esp+0x7C],ebp
	mov dword ptr [esp+0x64],ebp
	lea eax,[esp+0x3C]
	push 0x542
	push eax
	mov dword ptr [esp+0xF0],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0xF8]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x6C]
	push edx
	mov byte ptr [esp+0xF4],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x48]
	add esp,0xC
	mov byte ptr [esp+0xE8],1
	cmp eax,ebp
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block2:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x80]
	push eax
	call edi
	lea ecx,[esp+0x80]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	lea edx,[esp+0x90]
	push edx
	mov byte ptr [esp+0xEC],3
	call edi
	lea eax,[esp+0x90]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block6

 Block5:
	push eax
	call _com_issue_error

 Block6:
	mov eax,dword ptr [esp+0x64]
	push ebp
	push ebp
	lea ecx,[esp+0x88]
	push ecx
	lea edx,[esp+0x9C]
	push edx
	push ecx
	mov dword ptr [esp+0x48],esp
	mov ecx,esp
	mov bl,4
	push eax
	mov byte ptr [esp+0x100],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0xFC],5
	cmp dword ptr [_D_G_RM],ebp
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	lea ecx,[esp+0xB4]
	push ecx
	mov byte ptr [esp+0x100],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0xF0],6
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x6C]
	mov dword ptr [esp+0x6C],ebp
	call _x_com_ptr<IWzProperty>::_QueryUnknown
	cmp eax,ebp
	jge Block11

 Block9:
	cmp eax,0x80004002
	je Block11

 Block10:
	push eax
	call _com_issue_error

 Block11:
	mov esi,dword ptr [ZImports::_VariantClear]
	mov ebx,8
	mov byte ptr [esp+0xE8],bl
	cmp word ptr [esp+0xA0],bx
	jne Block14

 Block12:
	mov eax,dword ptr [esp+0xA8]
	xor edx,edx
	mov word ptr [esp+0xA0],dx
	cmp eax,ebp
	je Block15

 Block13:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block15

 Block14:
	lea eax,[esp+0xA0]
	push eax
	call esi

 Block15:
	mov byte ptr [esp+0xE8],9
	cmp word ptr [esp+0x90],bx
	jne Block18

 Block16:
	mov eax,dword ptr [esp+0x98]
	xor ecx,ecx
	mov word ptr [esp+0x90],cx
	cmp eax,ebp
	je Block19

 Block17:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block19

 Block18:
	lea edx,[esp+0x90]
	push edx
	call esi

 Block19:
	mov byte ptr [esp+0xE8],0xA
	cmp word ptr [esp+0x80],bx
	jne Block22

 Block20:
	xor eax,eax
	mov word ptr [esp+0x80],ax
	mov eax,dword ptr [esp+0x88]
	cmp eax,ebp
	je Block23

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block22:
	lea ecx,[esp+0x80]
	push ecx
	call esi

 Block23:
	push ebp
	push ebp
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x40],esp
	push 0x5A4
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov esi,dword ptr [esp+0x74]
	mov byte ptr [esp+0xF4],0xB
	cmp esi,ebp
	jne Block25

 Block24:
	push 0x80004003
	call _com_issue_error

 Block25:
	lea eax,[esp+0xCC]
	push eax
	mov ecx,esi
	mov byte ptr [esp+0xF8],0xA
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0xF0],0xC
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x44]
	mov dword ptr [esp+0x44],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block28

 Block26:
	cmp eax,0x80004002
	je Block28

 Block27:
	push eax
	call _com_issue_error

 Block28:
	cmp word ptr [esp+0xC0],8
	mov byte ptr [esp+0xE8],0xE
	jne Block35

 Block29:
	mov eax,dword ptr [esp+0xC8]
	xor ecx,ecx
	mov word ptr [esp+0xC0],cx
	cmp eax,ebp
	je Block31

 Block30:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block31:
	mov ebx,dword ptr [ZImports::_VariantClear]

 Block32:
	push ebp
	push ebp
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	push 0x5A5
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea ecx,[esp+0xBC]
	push ecx
	mov byte ptr [esp+0xF8],0xF
	mov ecx,esi
	mov byte ptr [esp+0xF8],0xE
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0xF0],0x10
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x50],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block36

 Block33:
	cmp eax,0x80004002
	je Block36

 Block34:
	push eax
	call _com_issue_error

 Block35:
	mov ebx,dword ptr [ZImports::_VariantClear]
	lea edx,[esp+0xC0]
	push edx
	call ebx
	jmp Block32

 Block36:
	cmp word ptr [esp+0xB0],8
	mov byte ptr [esp+0xE8],0x12
	jne Block39

 Block37:
	mov eax,dword ptr [esp+0xB8]
	xor edx,edx
	mov word ptr [esp+0xB0],dx
	cmp eax,ebp
	je Block40

 Block38:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block40

 Block39:
	lea eax,[esp+0xB0]
	push eax
	call ebx

 Block40:
	push ebp
	push ebp
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x40],esp
	push 0x5A3
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea edx,[esp+0xDC]
	mov byte ptr [esp+0xF4],0x13
	push edx
	mov ecx,esi
	mov byte ptr [esp+0xF8],0x12
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0xF0],0x14
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x4C]
	mov dword ptr [esp+0x4C],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block43

 Block41:
	cmp eax,0x80004002
	je Block43

 Block42:
	push eax
	call _com_issue_error

 Block43:
	cmp word ptr [esp+0xD0],8
	mov byte ptr [esp+0xE8],0x16
	jne Block46

 Block44:
	xor eax,eax
	mov word ptr [esp+0xD0],ax
	mov eax,dword ptr [esp+0xD8]
	cmp eax,ebp
	je Block47

 Block45:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block47

 Block46:
	lea ecx,[esp+0xD0]
	push ecx
	call ebx

 Block47:
	push 0xFFFFFFFF
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x3C],esp
	push 0x5AE
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[esp+0x5C]
	mov byte ptr [esp+0xF0],0x17
	push eax
	mov ecx,esi
	mov byte ptr [esp+0xF4],0x16
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0xF0],0x18
	call get_int32
	add esp,8
	cmp word ptr [esp+0x54],8
	mov esi,eax
	mov byte ptr [esp+0xE8],0x16
	jne Block50

 Block48:
	mov eax,dword ptr [esp+0x5C]
	xor ecx,ecx
	mov word ptr [esp+0x54],cx
	cmp eax,ebp
	je Block51

 Block49:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block51

 Block50:
	lea edx,[esp+0x54]
	push edx
	call ebx

 Block51:
	mov dword ptr [esp+0x44],ebp
	lea eax,[esp+0x3C]
	push 0x5AF
	push eax
	mov byte ptr [esp+0xF0],0x19
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push ebp
	lea ecx,[esp+0x48]
	push ecx
	push eax
	mov byte ptr [esp+0xF4],0x1A
	call PcCreate_IWzFont
	mov eax,dword ptr [esp+0x48]
	add esp,0xC
	mov byte ptr [esp+0xE8],0x19
	cmp eax,ebp
	je Block53

 Block52:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block53:
	lea edx,[esp+0x18]
	push edx
	call edi
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block55

 Block54:
	push eax
	call _com_issue_error

 Block55:
	lea ecx,[esp+0x18]
	push ecx
	push esi
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x44],esp
	push 0x1A25
	mov bl,0x1B
	push edx
	mov byte ptr [esp+0x100],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x54]
	mov byte ptr [esp+0xF8],0x1C
	cmp ecx,ebp
	jne Block57

 Block56:
	push 0x80004003
	call _com_issue_error

 Block57:
	mov byte ptr [esp+0xF8],bl
	call IWzFont::Create
	mov esi,8
	mov byte ptr [esp+0xE8],0x19
	cmp word ptr [esp+0x18],si
	jne Block60

 Block58:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebp
	je Block61

 Block59:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block61

 Block60:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block61:
	lea edx,[esp+0x18]
	push edx
	call edi
	lea eax,[esp+0x18]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block63

 Block62:
	push eax
	call _com_issue_error

 Block63:
	mov edx,dword ptr [esp+0xF4]
	lea ecx,[esp+0x18]
	push ecx
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x1D
	push edx
	mov byte ptr [esp+0xF4],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x4C]
	mov byte ptr [esp+0xF0],0x1E
	cmp ecx,ebp
	jne Block65

 Block64:
	push 0x80004003
	call _com_issue_error

 Block65:
	mov byte ptr [esp+0xF0],bl
	call IWzFont::CalcTextWidth
	mov ebx,eax
	mov dword ptr [esp+0x34],ebx
	mov byte ptr [esp+0xE8],0x19
	cmp word ptr [esp+0x18],si
	jne Block68

 Block66:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	cmp eax,ebp
	je Block69

 Block67:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block69

 Block68:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block69:
	mov edi,dword ptr [esp+0x4C]
	cmp edi,ebp
	jne Block71

 Block70:
	push 0x80004003
	call _com_issue_error

 Block71:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0x40]
	lea eax,[esp+0x38]
	push eax
	push edi
	mov dword ptr [esp+0x40],ebp
	call ecx
	cmp eax,ebp
	jge Block73

 Block72:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block73:
	mov esi,dword ptr [esp+0x40]
	cmp esi,ebp
	jne Block75

 Block74:
	push 0x80004003
	call _com_issue_error

 Block75:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0x6C]
	lea eax,[esp+0x6C]
	push eax
	push esi
	mov dword ptr [esp+0x74],ebp
	call ecx
	cmp eax,ebp
	jge Block77

 Block76:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block77:
	mov ecx,dword ptr [esp+0x38]
	lea eax,[ecx+ebx-1]
	cdq
	idiv ecx
	mov ebp,dword ptr [esp+0x48]
	xor ebx,ebx
	imul eax,ecx
	mov dword ptr [esp+0x38],eax
	cmp ebp,ebx
	jne Block79

 Block78:
	push 0x80004003
	call _com_issue_error

 Block79:
	mov edx,dword ptr [ebp]
	mov ecx,dword ptr [edx+0x40]
	lea eax,[esp+0x28]
	push eax
	push ebp
	mov dword ptr [esp+0x30],ebx
	call ecx
	cmp eax,ebx
	jge Block81

 Block80:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block81:
	mov edx,dword ptr [ebp]
	mov ecx,dword ptr [edx+0x6C]
	mov esi,dword ptr [esp+0x28]
	lea eax,[esp+0x2C]
	push eax
	push ebp
	mov dword ptr [esp+0x34],ebx
	call ecx
	cmp eax,ebx
	jge Block83

 Block82:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block83:
	sub esi,dword ptr [esp+0x2C]
	mov edx,dword ptr [ebp]
	mov ecx,dword ptr [edx+0x74]
	lea eax,[esp+0x2C]
	push eax
	push ebp
	mov dword ptr [esp+0x44],esi
	mov dword ptr [esp+0x34],ebx
	call ecx
	cmp eax,ebx
	jge Block85

 Block84:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block85:
	mov edx,dword ptr [edi]
	mov ecx,dword ptr [edx+0x74]
	mov ebx,dword ptr [esp+0x2C]
	lea eax,[esp+0x28]
	push eax
	push edi
	mov dword ptr [esp+0x30],0
	call ecx
	test eax,eax
	jge Block87

 Block86:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block87:
	mov esi,dword ptr [esp+0x40]
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0x74]
	mov edi,dword ptr [esp+0x28]
	lea eax,[esp+0x30]
	push eax
	push esi
	mov dword ptr [esp+0x38],0
	call ecx
	test eax,eax
	jge Block89

 Block88:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block89:
	mov eax,dword ptr [esp+0x30]
	cmp edi,eax
	jl Block91

 Block90:
	mov eax,edi

 Block91:
	cmp ebx,eax
	mov dword ptr [esp+0x28],eax
	jl Block93

 Block92:
	mov dword ptr [esp+0x28],ebx

 Block93:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0x6C]
	lea eax,[esp+0x30]
	push eax
	xor edi,edi
	push esi
	mov dword ptr [esp+0x38],edi
	call ecx
	cmp eax,edi
	jge Block95

 Block94:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block95:
	mov edx,dword ptr [esp+0x30]
	mov eax,dword ptr [esp+0x3C]
	mov ecx,dword ptr [ebp]
	add eax,edx
	add eax,dword ptr [esp+0x38]
	lea edx,[esp+0x30]
	push edx
	mov dword ptr [esp+0x40],eax
	mov eax,dword ptr [ecx+0x48]
	push ebp
	mov dword ptr [esp+0x38],edi
	call eax
	cmp eax,edi
	jge Block97

 Block96:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block97:
	mov edi,dword ptr [esp+0x48]
	mov ecx,dword ptr [edi]
	mov eax,dword ptr [ecx+0x74]
	mov ebp,dword ptr [esp+0x30]
	lea edx,[esp+0x2C]
	push edx
	xor esi,esi
	push edi
	mov dword ptr [esp+0x34],esi
	call eax
	cmp eax,esi
	jge Block99

 Block98:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block99:
	mov ecx,dword ptr [esp+0x2C]
	mov ebx,dword ptr [esp+0x4C]
	mov edx,dword ptr [ebx]
	lea eax,[esp+0x74]
	push eax
	mov dword ptr [esp+0x54],ecx
	mov ecx,dword ptr [edx+0x48]
	push ebx
	mov dword ptr [esp+0x7C],esi
	call ecx
	cmp eax,esi
	jge Block101

 Block100:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block101:
	mov edx,dword ptr [ebx]
	mov ecx,dword ptr [edx+0x74]
	mov edi,dword ptr [esp+0x74]
	lea eax,[esp+0x78]
	push eax
	push ebx
	mov dword ptr [esp+0x80],esi
	call ecx
	cmp eax,esi
	jge Block103

 Block102:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block103:
	mov ebx,dword ptr [esp+0x78]
	mov dword ptr [esp+0x70],esi
	mov esi,dword ptr [esp+0x40]
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0x48]
	lea eax,[esp+0x70]
	push eax
	push esi
	call ecx
	test eax,eax
	jge Block105

 Block104:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block105:
	mov eax,dword ptr [esp+0x40]
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x74]
	mov esi,dword ptr [esp+0x70]
	lea ecx,[esp+0x14]
	push ecx
	push eax
	mov dword ptr [esp+0x1C],0
	call edx
	test eax,eax
	jge Block107

 Block106:
	mov ecx,dword ptr [esp+0x40]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ecx
	push eax
	call _com_issue_errorex

 Block107:
	sub esi,dword ptr [esp+0x14]
	sub edi,ebx
	mov eax,edi
	cmp eax,esi
	jae Block109

 Block108:
	mov eax,esi

 Block109:
	sub ebp,dword ptr [esp+0x50]
	mov ecx,ebp
	cmp ecx,eax
	jb Block111

 Block110:
	mov eax,ecx

 Block111:
	mov edx,dword ptr [esp+0x28]
	mov edi,dword ptr [esp+0xF0]
	lea esi,[eax+edx]
	mov dword ptr [edi],0
	lea eax,[esp+0x50]
	push 0x3D0
	push eax
	mov dword ptr [esp+0x84],1
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov eax,dword ptr [eax]
	push 0
	push edi
	push eax
	mov byte ptr [esp+0xF4],0x1F
	call PcCreate_IWzCanvas
	mov eax,dword ptr [esp+0x5C]
	add esp,0xC
	mov byte ptr [esp+0xE8],0x19
	test eax,eax
	je Block113

 Block112:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block113:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x54]
	push ecx
	call ebp
	lea edx,[esp+0x54]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block115

 Block114:
	push eax
	call _com_issue_error

 Block115:
	lea eax,[esp+0x18]
	mov bl,0x20
	push eax
	mov byte ptr [esp+0xEC],bl
	call ebp
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block117

 Block116:
	push eax
	call _com_issue_error

 Block117:
	mov ecx,dword ptr [edi]
	mov byte ptr [esp+0xE8],0x21
	test ecx,ecx
	jne Block119

 Block118:
	push 0x80004003
	call _com_issue_error

 Block119:
	lea edx,[esp+0x54]
	push edx
	mov edx,dword ptr [esp+0x40]
	lea eax,[esp+0x1C]
	push eax
	push esi
	push edx
	call IWzCanvas::Create
	mov esi,8
	mov byte ptr [esp+0xE8],bl
	cmp word ptr [esp+0x18],si
	jne Block122

 Block120:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block123

 Block121:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block123

 Block122:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block123:
	mov byte ptr [esp+0xE8],0x19
	cmp word ptr [esp+0x54],si
	jne Block126

 Block124:
	mov eax,dword ptr [esp+0x5C]
	xor edx,edx
	mov word ptr [esp+0x54],dx
	test eax,eax
	je Block127

 Block125:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block127

 Block126:
	lea eax,[esp+0x54]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block127:
	mov ebp,dword ptr [esp+0x4C]
	xor edi,edi
	cmp dword ptr [esp+0x38],edi
	jle Block142

 Block128:
	xor ebx,ebx

 Block129:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jl Block3

 Block130:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x74]
	lea ecx,[esp+0x14]
	push ecx
	push ebp
	mov byte ptr [esp+0xF0],0x22
	mov dword ptr [esp+0x1C],ebx
	call edx
	cmp eax,ebx
	jge Block132

 Block131:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block132:
	mov eax,dword ptr [esp+0xF0]
	mov esi,dword ptr [eax]
	cmp esi,ebx
	je Block7

 Block133:
	mov edx,dword ptr [esp+0x18]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x34]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [esp+0x38]
	sub eax,dword ptr [esp+0x24]
	mov edx,dword ptr [esp+0x7C]
	push ebp
	push eax
	mov eax,dword ptr [ecx+0x80]
	add edx,edi
	push edx
	push esi
	call eax
	cmp eax,ebx
	jge Block135

 Block134:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block135:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xE8],0x19
	jne Block138

 Block136:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	cmp eax,ebx
	je Block139

 Block137:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block139

 Block138:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block139:
	mov eax,dword ptr [ebp]
	mov edx,dword ptr [eax+0x40]
	lea ecx,[esp+0x14]
	push ecx
	push ebp
	mov dword ptr [esp+0x1C],ebx
	call edx
	cmp eax,ebx
	jge Block141

 Block140:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebp
	push eax
	call _com_issue_errorex

 Block141:
	add edi,dword ptr [esp+0x14]
	cmp edi,dword ptr [esp+0x38]
	jl Block129

 Block142:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	xor edi,edi
	add esp,8
	cmp eax,edi
	jge Block144

 Block143:
	push eax
	call _com_issue_error

 Block144:
	mov ebx,dword ptr [esp+0x40]
	mov edx,dword ptr [ebx]
	mov ecx,dword ptr [edx+0x74]
	lea eax,[esp+0x14]
	push eax
	push ebx
	mov byte ptr [esp+0xF0],0x23
	mov dword ptr [esp+0x1C],edi
	call ecx
	cmp eax,edi
	jge Block146

 Block145:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block146:
	mov edx,dword ptr [esp+0xF0]
	mov esi,dword ptr [edx]
	cmp esi,edi
	jne Block148

 Block147:
	push 0x80004003
	call _com_issue_error

 Block148:
	mov edx,dword ptr [esp+0x18]
	mov ecx,dword ptr [esi]
	mov ecx,dword ptr [ecx+0x80]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x34]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [esp+0x38]
	sub eax,dword ptr [esp+0x24]
	push ebx
	push eax
	push edi
	push esi
	call ecx
	cmp eax,edi
	jge Block150

 Block149:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block150:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xE8],0x19
	jne Block153

 Block151:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	cmp eax,edi
	je Block154

 Block152:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block154

 Block153:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block154:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block156

 Block155:
	push eax
	call _com_issue_error

 Block156:
	mov ebx,dword ptr [esp+0x48]
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x40]
	lea ecx,[esp+0x14]
	push ecx
	push ebx
	mov byte ptr [esp+0xF0],0x24
	mov dword ptr [esp+0x1C],edi
	call edx
	cmp eax,edi
	jge Block158

 Block157:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block158:
	mov eax,dword ptr [esp+0xF0]
	mov esi,dword ptr [eax]
	cmp esi,edi
	jne Block160

 Block159:
	push 0x80004003
	call _com_issue_error

 Block160:
	mov edx,dword ptr [esp+0x18]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x34]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [esp+0x4C]
	sub eax,dword ptr [esp+0x24]
	push ebx
	push edi
	push eax
	mov eax,dword ptr [ecx+0x80]
	push esi
	call eax
	cmp eax,edi
	jge Block162

 Block161:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block162:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0xE8],0x19
	jne Block165

 Block163:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	cmp eax,edi
	je Block166

 Block164:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block166

 Block165:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block166:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	push eax
	call esi
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block168

 Block167:
	push eax
	call _com_issue_error

 Block168:
	lea edx,[esp+0x54]
	push edx
	mov byte ptr [esp+0xEC],0x25
	call esi
	lea eax,[esp+0x54]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block170

 Block169:
	push eax
	call _com_issue_error

 Block170:
	mov eax,dword ptr [esp+0x44]
	lea ecx,[esp+0x18]
	push ecx
	lea edx,[esp+0x58]
	push edx
	mov edx,dword ptr [esp+0xFC]
	push eax
	push ecx
	mov dword ptr [esp+0x60],esp
	mov ecx,esp
	mov bl,0x26
	push edx
	mov byte ptr [esp+0xFC],bl
	call _xbstr_t::_ctor_0
	mov eax,dword ptr [esp+0x100]
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0xF8],0x27
	cmp ecx,edi
	jne Block172

 Block171:
	push 0x80004003
	call _com_issue_error

 Block172:
	mov edx,dword ptr [esp+0x38]
	mov eax,dword ptr [esp+0x48]
	sub eax,dword ptr [esp+0x44]
	mov edi,dword ptr [esp+0x7C]
	add edx,0xFFFFFFFE
	push edx
	cdq
	sub eax,edx
	sar eax,1
	add eax,edi
	push eax
	mov byte ptr [esp+0x100],bl
	call IWzCanvas::DrawTextA
	mov esi,8
	mov byte ptr [esp+0xE8],0x25
	cmp word ptr [esp+0x54],si
	jne Block175

 Block173:
	xor eax,eax
	mov word ptr [esp+0x54],ax
	mov eax,dword ptr [esp+0x5C]
	test eax,eax
	je Block176

 Block174:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block176

 Block175:
	lea ecx,[esp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block176:
	mov byte ptr [esp+0xE8],0x19
	cmp word ptr [esp+0x18],si
	jne Block179

 Block177:
	mov eax,dword ptr [esp+0x20]
	xor edx,edx
	mov word ptr [esp+0x18],dx
	test eax,eax
	je Block180

 Block178:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block180

 Block179:
	lea eax,[esp+0x18]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block180:
	mov ebx,dword ptr [esp+0xF0]
	mov esi,dword ptr [ebx]
	test esi,esi
	jne Block182

 Block181:
	push 0x80004003
	call _com_issue_error

 Block182:
	mov eax,dword ptr [esp+0x38]
	mov ecx,dword ptr [esi]
	cdq
	sub eax,edx
	mov edx,dword ptr [ecx+0x70]
	sar eax,1
	add eax,edi
	push eax
	push esi
	call edx
	test eax,eax
	jge Block184

 Block183:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block184:
	mov esi,dword ptr [ebx]
	test esi,esi
	jne Block186

 Block185:
	push 0x80004003
	call _com_issue_error

 Block186:
	mov eax,dword ptr [esi]
	mov ecx,dword ptr [eax+0x78]
	push 0xFFFFFFFE
	push esi
	call ecx
	test eax,eax
	jge Block188

 Block187:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block188:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0xE8],0x16
	test eax,eax
	je Block190

 Block189:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block190:
	mov eax,dword ptr [esp+0x48]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0xEC],0x12
	call edx
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	mov byte ptr [esp+0xEC],0xE
	call ecx
	mov eax,dword ptr [esp+0x40]
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	mov byte ptr [esp+0xEC],0xA
	call eax
	mov eax,dword ptr [esp+0x68]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0xEC],1
	call edx
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0xE8],0
	test eax,eax
	je Block192

 Block191:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block192:
	mov eax,ebx
	mov ecx,dword ptr [esp+0xE0]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xD8
	ret 0xC
}
}
// CUIToolTip::SetToolTip_PartyAdver
_SUB_EXCEPTION_HANDLER(48A540)
__SUB_CLASS_THIS(0048A540, __thiscall, 5738,  CUIToolTip, void, long, long, const ADVER_COMMON*, NakedParam<_x_com_ptr<IWzFont>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48A540
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xD4
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xE8]
	mov dword ptr fs:[0],eax
	mov ebp,ecx
	mov esi,dword ptr [esp+0x100]
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x28]
	lea ecx,[esp+0x40]
	push ecx
	xor edi,edi
	mov ecx,esi
	mov dword ptr [esp+0xF4],edi
	call edx
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0xF0],1
	cmp eax,edi
	je Block153

 Block1:
	cmp dword ptr [eax-4],edi
	je Block153

 Block2:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x14]
	mov ecx,esi
	call edx
	mov ecx,eax
	mov eax,dword ptr [esp+0x40]
	mov dword ptr [esp+0x4C],ecx
	cmp eax,edi
	jne Block4

 Block3:
	xor eax,eax
	jmp Block5

 Block4:
	mov eax,dword ptr [eax-4]

 Block5:
	lea eax,[eax+ecx*2]
	add eax,ecx
	lea ebx,[eax+eax*2]
	push 0xFFFFFFFF
	lea ebx,[ebx+ebx-6]
	lea eax,[ebx+0x3F]
	push eax
	push 0x125
	push 1
	mov ecx,ebp
	call CUIToolTip::SetBasicInfo
	mov ecx,dword ptr [esp+0xFC]
	mov edx,dword ptr [esp+0xF8]
	push edi
	push 0xCC0E395A
	push edi
	push edi
	push 1
	push ecx
	add edx,0xFFFFFFF6
	push edx
	lea eax,[esp+0x30]
	push eax
	mov ecx,ebp
	call CUIToolTip::MakeLayer
	lea ecx,[esi+0x10]
	mov byte ptr [esp+0xF0],2
	mov dword ptr [esp+0x68],edi
	cmp ecx,edi
	je Block9

 Block6:
	mov eax,ecx
	lea esi,[eax+1]
	lea esp,[esp]

 Block7:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block7

 Block8:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push edi
	push esi
	lea ecx,[esp+0x78]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x6C]
	call ZXString<char>::ReleaseBuffer

 Block9:
	push 5
	push 5
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x7C],esp
	push edi
	push 0x15AD
	push ecx
	mov byte ptr [esp+0x108],3
	call UOL_Index
	mov edx,dword ptr [esp+0x2C]
	add esp,8
	mov eax,esp
	mov dword ptr [eax],edx
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x80],esp
	cmp eax,edi
	je Block11

 Block10:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block11:
	call DrawImage
	mov esi,dword ptr [ZImports::_VariantInit]
	add esp,0x10
	lea eax,[esp+0xC8]
	push eax
	call esi
	lea ecx,[esp+0xC8]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block13

 Block12:
	push eax
	call _com_issue_error

 Block13:
	lea edx,[esp+0x88]
	push edx
	mov byte ptr [esp+0xF4],4
	call esi
	lea eax,[esp+0x88]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block15

 Block14:
	push eax
	call _com_issue_error

 Block15:
	push edi
	push edi
	lea ecx,[esp+0xD0]
	push ecx
	lea edx,[esp+0x94]
	push edx
	push 1
	lea eax,[esp+0x84]
	push 0x15AD
	push eax
	mov byte ptr [esp+0x10C],5
	call UOL_Index
	mov eax,dword ptr [eax]
	add esp,8
	mov dword ptr [esp+0x74],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x108],6
	call _xbstr_t::_ctor_1
	mov byte ptr [esp+0x104],7
	cmp dword ptr [_D_G_RM],edi
	jne Block17

 Block16:
	push 0x80004003
	call _com_issue_error

 Block17:
	lea ecx,[esp+0xEC]
	push ecx
	mov byte ptr [esp+0x108],6
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov edi,8
	mov byte ptr [esp+0xF8],8
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x1C],0
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	test eax,eax
	jge Block20

 Block18:
	cmp eax,0x80004002
	je Block20

 Block19:
	push eax
	call _com_issue_error

 Block20:
	mov esi,dword ptr [ZImports::_VariantClear]
	mov byte ptr [esp+0xF0],0xA
	cmp word ptr [esp+0xD8],di
	jne Block23

 Block21:
	mov eax,dword ptr [esp+0xE0]
	xor edx,edx
	mov word ptr [esp+0xD8],dx
	test eax,eax
	je Block24

 Block22:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block24

 Block23:
	lea eax,[esp+0xD8]
	push eax
	call esi

 Block24:
	mov eax,dword ptr [esp+0x70]
	mov byte ptr [esp+0xF0],0xB
	test eax,eax
	je Block26

 Block25:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block26:
	mov byte ptr [esp+0xF0],0xC
	cmp word ptr [esp+0x88],di
	jne Block29

 Block27:
	mov eax,dword ptr [esp+0x90]
	xor ecx,ecx
	mov word ptr [esp+0x88],cx
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea edx,[esp+0x88]
	push edx
	call esi

 Block30:
	mov byte ptr [esp+0xF0],0xD
	cmp word ptr [esp+0xC8],di
	jne Block33

 Block31:
	xor eax,eax
	mov word ptr [esp+0xC8],ax
	mov eax,dword ptr [esp+0xD0]
	test eax,eax
	je Block34

 Block32:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block34

 Block33:
	lea ecx,[esp+0xC8]
	push ecx
	call esi

 Block34:
	cmp dword ptr [esp+0x18],0
	je Block49

 Block35:
	lea edx,[esp+0x30]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x30]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block37

 Block36:
	push eax
	call _com_issue_error

 Block37:
	mov esi,dword ptr [esp+0x18]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x48]
	lea edx,[esp+0x28]
	push edx
	push esi
	mov byte ptr [esp+0xF8],0xE
	mov dword ptr [esp+0x30],0
	call eax
	test eax,eax
	jge Block39

 Block38:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block39:
	mov esi,dword ptr [esp+0x18]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x40]
	mov edi,dword ptr [esp+0x28]
	lea edx,[esp+0x24]
	push edx
	push esi
	mov dword ptr [esp+0x2C],0
	call eax
	test eax,eax
	jge Block41

 Block40:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block41:
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [eax]
	mov esi,dword ptr [esp+0x24]
	lea edx,[esp+0x20]
	push edx
	push eax
	mov eax,dword ptr [ecx+0x40]
	mov dword ptr [esp+0x28],0
	call eax
	test eax,eax
	jge Block43

 Block42:
	mov ecx,dword ptr [esp+0x18]
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ecx
	push eax
	call _com_issue_errorex

 Block43:
	mov ecx,dword ptr [esp+0x14]
	test ecx,ecx
	jne Block45

 Block44:
	push 0x80004003
	call _com_issue_error

 Block45:
	mov eax,dword ptr [esp+0x20]
	lea edx,[esp+0x30]
	push edx
	mov edx,dword ptr [esp+0x1C]
	push edi
	push esi
	push 0
	push 0
	add ebx,4
	push ebx
	push eax
	push 0xFF
	push edx
	push 0x2F
	push 5
	call IWzCanvas::CopyEx
	cmp word ptr [esp+0x30],8
	mov byte ptr [esp+0xF0],0xD
	jne Block48

 Block46:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block49

 Block47:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block49

 Block48:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block49:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x50]
	push edx
	call esi
	lea eax,[esp+0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	xor edi,edi
	add esp,8
	cmp eax,edi
	jge Block51

 Block50:
	push eax
	call _com_issue_error

 Block51:
	lea ecx,[esp+0x30]
	push ecx
	mov byte ptr [esp+0xF4],0xF
	call esi
	lea edx,[esp+0x30]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block53

 Block52:
	push eax
	call _com_issue_error

 Block53:
	mov edx,dword ptr [esp+0x68]
	lea eax,[esp+0x50]
	push eax
	mov eax,dword ptr [ebp+0x974]
	lea ecx,[esp+0x34]
	push ecx
	push eax
	push ecx
	mov dword ptr [esp+0x70],esp
	mov ecx,esp
	mov bl,0x10
	push edx
	mov byte ptr [esp+0x104],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x24]
	mov byte ptr [esp+0x100],0x11
	cmp ecx,edi
	jne Block55

 Block54:
	push 0x80004003
	call _com_issue_error

 Block55:
	push 0xA
	push 0x19
	mov byte ptr [esp+0x108],bl
	call IWzCanvas::DrawTextA
	mov ebp,8
	mov byte ptr [esp+0xF0],0xF
	cmp word ptr [esp+0x30],bp
	jne Block58

 Block56:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	cmp eax,edi
	je Block59

 Block57:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block59

 Block58:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block59:
	mov byte ptr [esp+0xF0],0xD
	cmp word ptr [esp+0x50],bp
	jne Block62

 Block60:
	mov eax,dword ptr [esp+0x58]
	xor edx,edx
	mov word ptr [esp+0x50],dx
	cmp eax,edi
	je Block63

 Block61:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block63

 Block62:
	lea eax,[esp+0x50]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block63:
	mov dword ptr [esp+0x74],edi
	mov ecx,dword ptr [esp+0x100]
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx+0x18]
	mov byte ptr [esp+0xF0],0x12
	call eax
	mov ecx,dword ptr [esp+0x4C]
	push eax
	push ecx
	lea edx,[esp+0x7C]
	push offset _S_DD
	push edx
	call ZXString<char>::Format
	add esp,0x10
	push eax
	lea ecx,[esp+0x2C]
	mov dword ptr [esp+0x2C],edi
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x74]
	mov byte ptr [esp+0xF0],0x14
	cmp eax,edi
	je Block65

 Block64:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block65:
	lea eax,[esp+0x30]
	push eax
	call esi
	lea ecx,[esp+0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block67

 Block66:
	push eax
	call _com_issue_error

 Block67:
	lea edx,[esp+0x50]
	push edx
	mov byte ptr [esp+0xF4],0x15
	call esi
	lea eax,[esp+0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block69

 Block68:
	push eax
	call _com_issue_error

 Block69:
	mov eax,dword ptr [esp+0x104]
	mov esi,dword ptr [esp+0x28]
	lea ecx,[esp+0x30]
	push ecx
	lea edx,[esp+0x54]
	push edx
	push eax
	push ecx
	mov dword ptr [esp+0x5C],esp
	mov ecx,esp
	mov bl,0x16
	push esi
	mov byte ptr [esp+0x104],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x24]
	mov byte ptr [esp+0x100],0x17
	cmp ecx,edi
	jne Block71

 Block70:
	push 0x80004003
	call _com_issue_error

 Block71:
	push 0xA
	push 0xFA
	mov byte ptr [esp+0x108],bl
	call IWzCanvas::DrawTextA
	mov byte ptr [esp+0xF0],0x15
	cmp word ptr [esp+0x50],bp
	jne Block74

 Block72:
	mov eax,dword ptr [esp+0x58]
	xor ecx,ecx
	mov word ptr [esp+0x50],cx
	cmp eax,edi
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea edx,[esp+0x50]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block75:
	mov byte ptr [esp+0xF0],0x14
	cmp word ptr [esp+0x30],bp
	jne Block78

 Block76:
	xor eax,eax
	mov word ptr [esp+0x30],ax
	mov eax,dword ptr [esp+0x38]
	cmp eax,edi
	je Block79

 Block77:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block79

 Block78:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block79:
	mov ecx,dword ptr [esp+0x40]
	mov dword ptr [esp+0x64],edi
	mov dword ptr [esp+0x20],edi
	cmp ecx,edi
	je Block145

 Block80:
	mov eax,dword ptr [ecx-4]
	cmp eax,edi
	je Block145

 Block81:
	imul eax,0xB2
	lea eax,[eax+ecx-0xB2]
	mov dword ptr [esp+0x4C],eax
	cmp eax,edi
	je Block145

 Block82:
	nop

 Block83:
	lea edx,[esp+0x4C]
	push edx
	lea ecx,[esp+0x44]
	call ZArray<PARTYMEMBER>::GetNext
	mov ecx,dword ptr [esp+0x64]
	mov dword ptr [esp+0x6C],eax
	add eax,0x18
	mov dword ptr [esp+0x24],eax
	mov eax,dword ptr [esp+0x20]
	lea eax,[eax+ecx*2]
	add eax,ecx
	lea ebp,[eax+eax*2]
	mov dword ptr [esp+0x2C],edi
	lea ebp,[ebp+ebp+0x34]

 Block84:
	mov ecx,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x2C]
	cmp dword ptr [ecx+edx*4],edi
	je Block140

 Block85:
	mov ebx,dword ptr [esp+0x24]
	mov dword ptr [esp+0x44],edi
	cmp ebx,edi
	je Block89

 Block86:
	mov eax,ebx
	lea edx,[eax+1]

 Block87:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block87

 Block88:
	sub eax,edx
	mov esi,eax
	push esi
	push ebx
	push edi
	push esi
	lea ecx,[esp+0x54]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x48]
	call ZXString<char>::ReleaseBuffer

 Block89:
	push 0x58
	push ecx
	mov ecx,dword ptr [esp+0x10C]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [esp+0x10C]
	mov byte ptr [esp+0xF8],0x18
	mov dword ptr [esp+0x24],esp
	cmp eax,edi
	je Block91

 Block90:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block91:
	lea ecx,[esp+0x4C]
	push ecx
	call format_string_1
	mov edx,dword ptr [esp+0x78]
	mov eax,dword ptr [esp+0x38]
	mov eax,dword ptr [edx+eax*4+0x66]
	push eax
	call get_job_name
	add esp,0x10
	mov dword ptr [esp+0x48],edi
	cmp eax,edi
	je Block95

 Block92:
	mov ecx,eax
	lea esi,[ecx+1]

 Block93:
	mov dl,byte ptr [ecx]
	inc ecx
	test dl,dl
	jne Block93

 Block94:
	sub ecx,esi
	mov esi,ecx
	push esi
	push eax
	push edi
	push esi
	lea ecx,[esp+0x58]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x4C]
	call ZXString<char>::ReleaseBuffer

 Block95:
	push 0x6E
	push ecx
	mov ecx,dword ptr [esp+0x10C]
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [esp+0x10C]
	mov byte ptr [esp+0xF8],0x19
	mov dword ptr [esp+0x24],esp
	cmp eax,edi
	je Block97

 Block96:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block97:
	lea ecx,[esp+0x50]
	push ecx
	call format_string_1
	mov edx,dword ptr [esp+0x78]
	mov eax,dword ptr [esp+0x38]
	mov ebx,dword ptr [ZImports::_VariantInit]
	mov esi,dword ptr [edx+eax*4+0x7E]
	add esp,0xC
	lea ecx,[esp+0x30]
	push ecx
	call ebx
	lea edx,[esp+0x30]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block12

 Block98:
	lea eax,[esp+0x50]
	push eax
	mov byte ptr [esp+0xF4],0x1A
	call ebx
	lea ecx,[esp+0x50]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block12

 Block99:
	mov ecx,dword ptr [esp+0x104]
	lea edx,[esp+0x30]
	push edx
	mov edx,dword ptr [esp+0x48]
	lea eax,[esp+0x54]
	push eax
	push ecx
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0x104],0x1B
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x24]
	mov byte ptr [esp+0x100],0x1C
	cmp ecx,edi
	je Block16

 Block100:
	push ebp
	push 0x17
	mov byte ptr [esp+0x108],0x1B
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x50],8
	mov byte ptr [esp+0xF0],0x1A
	jne Block103

 Block101:
	xor eax,eax
	mov word ptr [esp+0x50],ax
	mov eax,dword ptr [esp+0x58]
	cmp eax,edi
	je Block104

 Block102:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block104

 Block103:
	lea ecx,[esp+0x50]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block104:
	cmp word ptr [esp+0x30],8
	mov byte ptr [esp+0xF0],0x19
	jne Block107

 Block105:
	mov eax,dword ptr [esp+0x38]
	xor edx,edx
	mov word ptr [esp+0x30],dx
	cmp eax,edi
	je Block108

 Block106:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block108

 Block107:
	lea eax,[esp+0x30]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block108:
	lea ecx,[esp+0x78]
	push ecx
	call ebx
	lea edx,[esp+0x78]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block12

 Block109:
	lea eax,[esp+0xA8]
	push eax
	mov byte ptr [esp+0xF4],0x1D
	call ebx
	lea ecx,[esp+0xA8]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block12

 Block110:
	mov ecx,dword ptr [esp+0x104]
	lea edx,[esp+0x78]
	push edx
	mov edx,dword ptr [esp+0x4C]
	lea eax,[esp+0xAC]
	push eax
	push ecx
	push ecx
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push edx
	mov byte ptr [esp+0x104],0x1E
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x24]
	mov byte ptr [esp+0x100],0x1F
	cmp ecx,edi
	je Block16

 Block111:
	push ebp
	push 0x7B
	mov byte ptr [esp+0x108],0x1E
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0xA8],8
	mov byte ptr [esp+0xF0],0x1D
	jne Block114

 Block112:
	xor eax,eax
	mov word ptr [esp+0xA8],ax
	mov eax,dword ptr [esp+0xB0]
	cmp eax,edi
	je Block115

 Block113:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block115

 Block114:
	lea ecx,[esp+0xA8]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block115:
	cmp word ptr [esp+0x78],8
	mov byte ptr [esp+0xF0],0x19
	jne Block118

 Block116:
	mov eax,dword ptr [esp+0x80]
	xor edx,edx
	mov word ptr [esp+0x78],dx
	cmp eax,edi
	je Block119

 Block117:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block119

 Block118:
	lea eax,[esp+0x78]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block119:
	lea ecx,[esp+0xB8]
	push ecx
	call ebx
	lea edx,[esp+0xB8]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block12

 Block120:
	lea eax,[esp+0x98]
	push eax
	mov byte ptr [esp+0xF4],0x20
	call ebx
	lea ecx,[esp+0x98]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jl Block12

 Block121:
	mov ecx,dword ptr [esp+0x104]
	lea edx,[esp+0xB8]
	push edx
	lea eax,[esp+0x9C]
	push eax
	push ecx
	mov dword ptr [esp+0x6C],edi
	push esi
	lea edx,[esp+0x70]
	push offset _S_D__1
	push edx
	mov byte ptr [esp+0x108],0x22
	call ZXString<char>::Format
	mov eax,dword ptr [eax]
	add esp,8
	mov dword ptr [esp+0x2C],esp
	mov ecx,esp
	push eax
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x24]
	mov byte ptr [esp+0x100],0x23
	cmp ecx,edi
	je Block16

 Block122:
	push ebp
	push 0xFA
	mov byte ptr [esp+0x108],0x22
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0xF0],0x21
	cmp eax,edi
	je Block124

 Block123:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block124:
	mov esi,8
	mov byte ptr [esp+0xF0],0x20
	cmp word ptr [esp+0x98],si
	jne Block127

 Block125:
	xor eax,eax
	mov word ptr [esp+0x98],ax
	mov eax,dword ptr [esp+0xA0]
	cmp eax,edi
	je Block128

 Block126:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block128

 Block127:
	lea ecx,[esp+0x98]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block128:
	mov byte ptr [esp+0xF0],0x19
	cmp word ptr [esp+0xB8],si
	jne Block131

 Block129:
	mov eax,dword ptr [esp+0xC0]
	xor edx,edx
	mov word ptr [esp+0xB8],dx
	cmp eax,edi
	je Block132

 Block130:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block132

 Block131:
	lea eax,[esp+0xB8]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block132:
	mov eax,dword ptr [esp+0x6C]
	mov ecx,dword ptr [eax+0xAE]
	mov edx,dword ptr [esp+0x2C]
	cmp ecx,dword ptr [eax+edx*4]
	jne Block136

 Block133:
	lea eax,[ebp+3]
	push eax
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push 3
	push 0x15AD
	push ecx
	call UOL_Index
	mov edx,dword ptr [esp+0x2C]
	add esp,8
	mov eax,esp
	mov dword ptr [eax],edx
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x2C],esp
	cmp eax,edi
	je Block135

 Block134:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block135:
	call DrawImage
	add esp,0x10

 Block136:
	mov eax,dword ptr [esp+0x48]
	inc dword ptr [esp+0x64]
	add ebp,0x12
	mov byte ptr [esp+0xF0],0x18
	cmp eax,edi
	je Block138

 Block137:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block138:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0xF0],0x14
	cmp eax,edi
	je Block140

 Block139:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block140:
	mov eax,dword ptr [esp+0x2C]
	add dword ptr [esp+0x24],0xD
	inc eax
	cmp eax,6
	mov dword ptr [esp+0x2C],eax
	jl Block84

 Block141:
	mov ecx,dword ptr [esp+0x64]
	mov eax,dword ptr [esp+0x20]
	lea eax,[eax+ecx*2]
	add eax,ecx
	lea ecx,[eax+eax*2]
	lea edx,[ecx+ecx+0x32]
	push edx
	push 5
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x28],esp
	push 2
	push 0x15AD
	push eax
	call UOL_Index
	mov ecx,dword ptr [esp+0x2C]
	add esp,8
	mov eax,esp
	mov dword ptr [eax],ecx
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x2C],esp
	cmp eax,edi
	je Block143

 Block142:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block143:
	call DrawImage
	inc dword ptr [esp+0x30]
	add esp,0x10
	cmp dword ptr [esp+0x4C],edi
	jne Block83

 Block144:
	mov esi,dword ptr [esp+0x28]

 Block145:
	mov byte ptr [esp+0xF0],0xD
	cmp esi,edi
	je Block147

 Block146:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block147:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0xF0],3
	cmp eax,edi
	je Block149

 Block148:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block149:
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0xF0],2
	cmp eax,edi
	je Block151

 Block150:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block151:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0xF0],1
	cmp eax,edi
	je Block153

 Block152:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block153:
	lea ecx,[esp+0x40]
	mov byte ptr [esp+0xF0],0
	call ZArray<PARTYMEMBER>::RemoveAll
	mov eax,dword ptr [esp+0x104]
	mov dword ptr [esp+0xF0],0xFFFFFFFF
	cmp eax,edi
	je Block155

 Block154:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block155:
	mov ecx,dword ptr [esp+0xE8]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xE0
	ret 0x10
}
}
// CUIToolTip::ItemToolTipParam::~ItemToolTipParam
__SUB_CLASS_THIS0(0009CBC0, __thiscall, 6130,  CUIToolTip::ItemToolTipParam, void) {
__asm {

 Block0:
	push esi
	mov esi,ecx
	mov eax,dword ptr [esi+0x28]
	test eax,eax
	je Block5

 Block1:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	mov eax,dword ptr [esi+0x28]
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esi+0x28]
	test ecx,ecx
	je Block4

 Block3:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block4:
	mov dword ptr [esi+0x28],0

 Block5:
	pop esi
	ret
}
}
// CUIToolTip::SetToolTip_WorldMap
_SUB_EXCEPTION_HANDLER(496980)
__SUB_CLASS_THIS(00496980, __thiscall, 5699,  CUIToolTip, void, long, long, WORLDMAP_ITEM&, ZArray<WORLDMAP_USERINFO>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_496980
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x168
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x17C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x20],ecx
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	cmp dword ptr [ecx+0x10],ebp
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov eax,dword ptr [ecx+0x18]
	cmp eax,dword ptr [esp+0x18C]
	jne Block3

 Block2:
	mov ecx,dword ptr [ecx+0x1C]
	cmp ecx,dword ptr [esp+0x190]
	je Block349

 Block3:
	mov dword ptr [esp+0x48],ebp
	mov dword ptr [esp+0x184],ebp
	mov dword ptr [esp+0x40],ebp
	mov esi,dword ptr [esp+0x194]
	mov eax,dword ptr [esi+0x14]
	mov byte ptr [esp+0x184],1
	cmp eax,ebp
	je Block7

 Block4:
	cmp byte ptr [eax],0
	je Block7

 Block5:
	lea edx,[esp+0x1C]
	push 0x72D
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi+0x14]
	mov edx,dword ptr [esi+0x10]
	mov eax,dword ptr [eax]
	push ecx
	push edx
	push eax
	lea eax,[esp+0x54]
	push eax
	mov byte ptr [esp+0x194],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x2C]
	add esp,0x10
	mov byte ptr [esp+0x184],1
	cmp eax,ebp
	je Block8

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block8

 Block7:
	lea ecx,[esi+0x10]
	push ecx
	lea ecx,[esp+0x4C]
	call ZXString<char>::op_assign

 Block8:
	add esi,0x18
	push esi
	lea ecx,[esp+0x44]
	call ZXString<char>::op_assign
	mov esi,dword ptr [esp+0x48]
	mov eax,dword ptr [esp+0x40]
	cmp esi,ebp
	je Block10

 Block9:
	cmp byte ptr [esi],0
	jne Block16

 Block10:
	cmp eax,ebp
	je Block12

 Block11:
	cmp byte ptr [eax],0
	jne Block16

 Block12:
	mov byte ptr [esp+0x184],0
	cmp eax,ebp
	je Block14

 Block13:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block14:
	mov dword ptr [esp+0x184],0xFFFFFFFF
	cmp esi,ebp
	je Block349

 Block15:
	add esi,0xFFFFFFF4
	push esi
	jmp Block348

 Block16:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x10C]
	push edx
	call esi
	lea eax,[esp+0x10C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block18

 Block17:
	push eax
	call _com_issue_error

 Block18:
	lea ecx,[esp+0xEC]
	push ecx
	mov byte ptr [esp+0x188],3
	call esi
	lea edx,[esp+0xEC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block20

 Block19:
	push eax
	call _com_issue_error

 Block20:
	push ebp
	push ebp
	lea eax,[esp+0x114]
	push eax
	lea ecx,[esp+0xF8]
	push ecx
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,4
	push offset _S_UIUIWINDOWIMGTOO__5
	mov byte ptr [esp+0x19C],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x198],5
	cmp dword ptr [_D_G_RM],ebp
	jne Block22

 Block21:
	push 0x80004003
	call _com_issue_error

 Block22:
	lea edx,[esp+0x180]
	mov byte ptr [esp+0x198],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x18C],6
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x50]
	mov dword ptr [esp+0x50],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block25

 Block23:
	cmp eax,0x80004002
	je Block25

 Block24:
	push eax
	call _com_issue_error

 Block25:
	mov edi,dword ptr [ZImports::_VariantClear]
	mov ebx,8
	mov byte ptr [esp+0x184],bl
	cmp word ptr [esp+0x16C],bx
	jne Block28

 Block26:
	xor eax,eax
	mov word ptr [esp+0x16C],ax
	mov eax,dword ptr [esp+0x174]
	cmp eax,ebp
	je Block29

 Block27:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block29

 Block28:
	lea ecx,[esp+0x16C]
	push ecx
	call edi

 Block29:
	mov byte ptr [esp+0x184],9
	cmp word ptr [esp+0xEC],bx
	jne Block32

 Block30:
	mov eax,dword ptr [esp+0xF4]
	xor edx,edx
	mov word ptr [esp+0xEC],dx
	cmp eax,ebp
	je Block33

 Block31:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block33

 Block32:
	lea eax,[esp+0xEC]
	push eax
	call edi

 Block33:
	mov byte ptr [esp+0x184],0xA
	cmp word ptr [esp+0x10C],bx
	jne Block36

 Block34:
	mov eax,dword ptr [esp+0x114]
	xor ecx,ecx
	mov word ptr [esp+0x10C],cx
	cmp eax,ebp
	je Block37

 Block35:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block37

 Block36:
	lea edx,[esp+0x10C]
	push edx
	call edi

 Block37:
	lea eax,[esp+0xBC]
	push eax
	call esi
	lea ecx,[esp+0xBC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block39

 Block38:
	push eax
	call _com_issue_error

 Block39:
	lea edx,[esp+0x12C]
	push edx
	mov byte ptr [esp+0x188],0xB
	call esi
	lea eax,[esp+0x12C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block41

 Block40:
	push eax
	call _com_issue_error

 Block41:
	push ebp
	push ebp
	lea ecx,[esp+0xC4]
	push ecx
	lea edx,[esp+0x138]
	push edx
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0xC
	push offset _S_UIUIWINDOWIMGTOO__4
	mov byte ptr [esp+0x19C],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x198],0xD
	cmp dword ptr [_D_G_RM],ebp
	jne Block43

 Block42:
	push 0x80004003
	call _com_issue_error

 Block43:
	lea eax,[esp+0x150]
	mov byte ptr [esp+0x198],bl
	mov ecx,dword ptr [_D_G_RM]
	push eax
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x18C],0xE
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x70]
	mov dword ptr [esp+0x70],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block46

 Block44:
	cmp eax,0x80004002
	je Block46

 Block45:
	push eax
	call _com_issue_error

 Block46:
	mov ebx,8
	mov byte ptr [esp+0x184],0x10
	cmp word ptr [esp+0x13C],bx
	jne Block49

 Block47:
	mov eax,dword ptr [esp+0x144]
	xor ecx,ecx
	mov word ptr [esp+0x13C],cx
	cmp eax,ebp
	je Block50

 Block48:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block50

 Block49:
	lea edx,[esp+0x13C]
	push edx
	call edi

 Block50:
	mov byte ptr [esp+0x184],0x11
	cmp word ptr [esp+0x12C],bx
	jne Block53

 Block51:
	xor eax,eax
	mov word ptr [esp+0x12C],ax
	mov eax,dword ptr [esp+0x134]
	cmp eax,ebp
	je Block54

 Block52:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block54

 Block53:
	lea ecx,[esp+0x12C]
	push ecx
	call edi

 Block54:
	mov byte ptr [esp+0x184],0x12
	cmp word ptr [esp+0xBC],bx
	jne Block57

 Block55:
	mov eax,dword ptr [esp+0xC4]
	xor edx,edx
	mov word ptr [esp+0xBC],dx
	cmp eax,ebp
	je Block58

 Block56:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block58

 Block57:
	lea eax,[esp+0xBC]
	push eax
	call edi

 Block58:
	lea ecx,[esp+0xFC]
	push ecx
	call esi
	lea edx,[esp+0xFC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block60

 Block59:
	push eax
	call _com_issue_error

 Block60:
	lea eax,[esp+0xCC]
	push eax
	mov byte ptr [esp+0x188],0x13
	call esi
	lea ecx,[esp+0xCC]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block62

 Block61:
	push eax
	call _com_issue_error

 Block62:
	push ebp
	push ebp
	lea edx,[esp+0x104]
	push edx
	lea eax,[esp+0xD8]
	push eax
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0x14
	push offset _S_UIUIWINDOWIMGTOO__3
	mov byte ptr [esp+0x19C],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x198],0x15
	cmp dword ptr [_D_G_RM],ebp
	jne Block64

 Block63:
	push 0x80004003
	call _com_issue_error

 Block64:
	lea ecx,[esp+0x170]
	push ecx
	mov byte ptr [esp+0x19C],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x18C],0x16
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x74]
	mov dword ptr [esp+0x74],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block67

 Block65:
	cmp eax,0x80004002
	je Block67

 Block66:
	push eax
	call _com_issue_error

 Block67:
	mov ebx,8
	mov byte ptr [esp+0x184],0x18
	cmp word ptr [esp+0x15C],bx
	jne Block70

 Block68:
	mov eax,dword ptr [esp+0x164]
	xor edx,edx
	mov word ptr [esp+0x15C],dx
	cmp eax,ebp
	je Block71

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block71

 Block70:
	lea eax,[esp+0x15C]
	push eax
	call edi

 Block71:
	mov byte ptr [esp+0x184],0x19
	cmp word ptr [esp+0xCC],bx
	jne Block74

 Block72:
	mov eax,dword ptr [esp+0xD4]
	xor ecx,ecx
	mov word ptr [esp+0xCC],cx
	cmp eax,ebp
	je Block75

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block75

 Block74:
	lea edx,[esp+0xCC]
	push edx
	call edi

 Block75:
	mov byte ptr [esp+0x184],0x1A
	cmp word ptr [esp+0xFC],bx
	jne Block78

 Block76:
	xor eax,eax
	mov word ptr [esp+0xFC],ax
	mov eax,dword ptr [esp+0x104]
	cmp eax,ebp
	je Block79

 Block77:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block79

 Block78:
	lea ecx,[esp+0xFC]
	push ecx
	call edi

 Block79:
	lea edx,[esp+0x11C]
	push edx
	call esi
	lea eax,[esp+0x11C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block81

 Block80:
	push eax
	call _com_issue_error

 Block81:
	lea ecx,[esp+0xDC]
	push ecx
	mov byte ptr [esp+0x188],0x1B
	call esi
	lea edx,[esp+0xDC]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block83

 Block82:
	push eax
	call _com_issue_error

 Block83:
	push ebp
	push ebp
	lea eax,[esp+0x124]
	push eax
	lea ecx,[esp+0xE8]
	push ecx
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0x1C
	push offset _S_UIUIWINDOWIMGTOO__2
	mov byte ptr [esp+0x19C],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x198],0x1D
	cmp dword ptr [_D_G_RM],ebp
	jne Block85

 Block84:
	push 0x80004003
	call _com_issue_error

 Block85:
	lea edx,[esp+0x160]
	mov byte ptr [esp+0x198],bl
	mov ecx,dword ptr [_D_G_RM]
	push edx
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0x18C],0x1E
	call Ztl_variant_t::GetUnknown
	push eax
	lea ecx,[esp+0x6C]
	mov dword ptr [esp+0x6C],ebp
	call _x_com_ptr<IWzCanvas>::_QueryUnknown
	cmp eax,ebp
	jge Block88

 Block86:
	cmp eax,0x80004002
	je Block88

 Block87:
	push eax
	call _com_issue_error

 Block88:
	mov esi,8
	mov byte ptr [esp+0x184],0x20
	cmp word ptr [esp+0x14C],si
	jne Block91

 Block89:
	xor eax,eax
	mov word ptr [esp+0x14C],ax
	mov eax,dword ptr [esp+0x154]
	cmp eax,ebp
	je Block92

 Block90:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block92

 Block91:
	lea ecx,[esp+0x14C]
	push ecx
	call edi

 Block92:
	mov byte ptr [esp+0x184],0x21
	cmp word ptr [esp+0xDC],si
	jne Block95

 Block93:
	mov eax,dword ptr [esp+0xE4]
	xor edx,edx
	mov word ptr [esp+0xDC],dx
	cmp eax,ebp
	je Block96

 Block94:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block96

 Block95:
	lea eax,[esp+0xDC]
	push eax
	call edi

 Block96:
	mov byte ptr [esp+0x184],0x22
	cmp word ptr [esp+0x11C],si
	jne Block99

 Block97:
	mov eax,dword ptr [esp+0x124]
	xor ecx,ecx
	mov word ptr [esp+0x11C],cx
	cmp eax,ebp
	je Block100

 Block98:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block100

 Block99:
	lea edx,[esp+0x11C]
	push edx
	call edi

 Block100:
	mov edi,dword ptr [esp+0x4C]
	mov ebx,dword ptr [esp+0x6C]
	mov esi,dword ptr [esp+0x70]
	mov ecx,dword ptr [esp+0x68]
	cmp edi,ebp
	sete al
	test al,al
	jne Block335

 Block101:
	cmp ebx,ebp
	sete al
	test al,al
	jne Block335

 Block102:
	cmp esi,ebp
	sete al
	test al,al
	jne Block335

 Block103:
	cmp ecx,ebp
	sete al
	test al,al
	jne Block335

 Block104:
	mov eax,dword ptr [esp+0x40]
	cmp eax,ebp
	je Block107

 Block105:
	cmp byte ptr [eax],0
	je Block107

 Block106:
	xor eax,eax
	jmp Block108

 Block107:
	mov eax,1

 Block108:
	xor ecx,ecx
	cmp eax,ebp
	sete cl
	mov esi,ecx
	mov dword ptr [esp+0x24],esi
	cmp esi,ebp
	je Block110

 Block109:
	mov edi,dword ptr [esp+0x20]
	push 1
	lea edx,[esp+0xB8]
	push edx
	mov ecx,edi
	call CUIToolTip::GetFontByType
	mov ebx,1
	jmp Block111

 Block110:
	mov ecx,dword ptr [esp+0x20]
	push 0xA
	lea eax,[esp+0xBC]
	push eax
	call CUIToolTip::GetFontByType
	mov edi,dword ptr [esp+0x20]
	mov ebx,2

 Block111:
	push eax
	lea ecx,[esp+0x78]
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov dword ptr [esp+0x184],0x24
	test bl,2
	je Block114

 Block112:
	mov eax,dword ptr [esp+0xB8]
	and ebx,0xFFFFFFFD
	mov dword ptr [esp+0x14],ebx
	cmp eax,ebp
	je Block114

 Block113:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block114:
	mov byte ptr [esp+0x184],0x25
	test bl,1
	je Block117

 Block115:
	mov eax,dword ptr [esp+0xB4]
	cmp eax,ebp
	je Block117

 Block116:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block117:
	push 0x10
	lea eax,[esp+0x48]
	push eax
	mov ecx,edi
	call CUIToolTip::GetFontByType
	push 0x12
	lea ecx,[esp+0x68]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0x18C],0x26
	call CUIToolTip::GetFontByType
	push 0xF
	lea edx,[esp+0x2C]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0x18C],0x27
	call CUIToolTip::GetFontByType
	neg esi
	sbb esi,esi
	and esi,0x46
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x188],0x28
	add esi,0xB4
	call Ztl_variant_t::_ctor_1
	mov edx,dword ptr [esp+0x48]
	lea eax,[esp+0x30]
	push eax
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	mov bl,0x29
	push edx
	mov byte ptr [esp+0x190],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x7C]
	mov byte ptr [esp+0x18C],0x2A
	cmp ecx,ebp
	jne Block119

 Block118:
	push 0x80004003
	call _com_issue_error

 Block119:
	mov byte ptr [esp+0x18C],bl
	call IWzFont::CalcTextWidth
	lea edi,[eax+0x14]
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x18],edi
	call Ztl_variant_t::~Ztl_variant_t
	cmp esi,edi
	jl Block121

 Block120:
	mov dword ptr [esp+0x18],esi

 Block121:
	xor ecx,ecx
	int 3// TODO: 	mov dword ptr [esp+0x78],offset ZList<ZXString<char>>::`vftable'
	mov dword ptr [esp+0x80],ecx
	mov dword ptr [esp+0x84],ecx
	mov dword ptr [esp+0x88],ecx
	mov eax,dword ptr [esp+0x194]
	mov eax,dword ptr [eax+0x88]
	mov ebp,dword ptr [esp+0x44]
	mov byte ptr [esp+0x184],0x2B
	mov dword ptr [esp+0x14],eax
	cmp eax,ecx
	je Block133

 Block122:
	mov bl,0x2D
	lea ebx,[ebx]

 Block123:
	lea ecx,[esp+0x14]
	push ecx
	call ZList<unsigned long>::GetNext
	mov eax,dword ptr [eax]
	push eax
	call CMobTemplate::GetMobTemplate
	mov esi,eax
	add esp,8
	test esi,esi
	je Block132

 Block124:
	mov eax,dword ptr [esi+0x30]
	test eax,eax
	je Block132

 Block125:
	cmp byte ptr [eax],0
	je Block132

 Block126:
	mov dword ptr [esp+0x60],0
	mov edx,dword ptr [esi+0x78]
	push edx
	lea eax,[esi+0x70]
	push eax
	mov byte ptr [esp+0x18C],0x2C
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,dword ptr [esi+0x30]
	push eax
	push ecx
	lea edx,[esp+0x70]
	push offset _S_SLVD
	push edx
	call ZXString<char>::Format
	add esp,0x18
	lea ecx,[esp+0x78]
	call ZList<ZXString<char>>::AddTail_
	lea ecx,[esp+0x60]
	push ecx
	mov ecx,eax
	call ZXString<char>::op_assign
	lea edx,[esp+0x50]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block127:
	mov edi,dword ptr [esp+0x60]
	lea ecx,[esp+0x50]
	push ecx
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	push edi
	mov byte ptr [esp+0x190],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x18C],0x2E
	test ebp,ebp
	je Block21

 Block128:
	mov ecx,ebp
	mov byte ptr [esp+0x18C],bl
	call IWzFont::CalcTextWidth
	lea ecx,[esp+0x50]
	lea esi,[eax+0x23]
	call Ztl_variant_t::~Ztl_variant_t
	cmp esi,dword ptr [esp+0x18]
	jl Block130

 Block129:
	mov dword ptr [esp+0x18],esi

 Block130:
	mov byte ptr [esp+0x184],0x2B
	test edi,edi
	je Block132

 Block131:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block132:
	cmp dword ptr [esp+0x14],0
	jne Block123

 Block133:
	xor ecx,ecx
	int 3// TODO: 	mov dword ptr [esp+0xA0],offset ZList<ZXString<char>>::`vftable'
	mov dword ptr [esp+0xA8],ecx
	mov dword ptr [esp+0xAC],ecx
	mov dword ptr [esp+0xB0],ecx
	mov edx,dword ptr [esp+0x194]
	mov eax,dword ptr [edx+0x74]
	mov edi,dword ptr [esp+0x64]
	mov byte ptr [esp+0x184],0x2F
	mov dword ptr [esp+0x14],eax
	cmp eax,ecx
	je Block144

 Block134:
	mov ebp,dword ptr [esp+0x18]
	mov bl,0x30
	nop

 Block135:
	lea eax,[esp+0x14]
	push eax
	call ZList<unsigned long>::GetNext
	mov eax,dword ptr [eax]
	push eax
	call CNpcTemplate::GetNpcTemplate
	add esp,8
	test eax,eax
	je Block142

 Block136:
	lea esi,[eax+4]
	mov eax,dword ptr [esi]
	test eax,eax
	je Block142

 Block137:
	cmp byte ptr [eax],0
	je Block142

 Block138:
	lea ecx,[esp+0xA0]
	call ZList<ZXString<char>>::AddTail_
	push esi
	mov ecx,eax
	call ZXString<char>::op_assign
	lea ecx,[esp+0x50]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block139:
	mov esi,dword ptr [esi]
	lea eax,[esp+0x50]
	push eax
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	push esi
	mov byte ptr [esp+0x190],bl
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x18C],0x31
	test edi,edi
	je Block21

 Block140:
	mov ecx,edi
	mov byte ptr [esp+0x18C],bl
	call IWzFont::CalcTextWidth
	lea ecx,[esp+0x50]
	lea esi,[eax+0x23]
	mov byte ptr [esp+0x184],0x2F
	call Ztl_variant_t::~Ztl_variant_t
	cmp esi,ebp
	jl Block142

 Block141:
	mov ebp,esi

 Block142:
	cmp dword ptr [esp+0x14],0
	jne Block135

 Block143:
	mov dword ptr [esp+0x18],ebp

 Block144:
	int 3// TODO: 	mov dword ptr [esp+0x8C],offset ZList<ZXString<char>>::`vftable'
	mov dword ptr [esp+0x94],0
	mov dword ptr [esp+0x98],0
	mov dword ptr [esp+0x9C],0
	mov ecx,dword ptr [esp+0x194]
	mov eax,dword ptr [ecx+0x60]
	mov ebp,dword ptr [esp+0x28]
	mov byte ptr [esp+0x184],0x32
	mov dword ptr [esp+0x14],eax
	test eax,eax
	je Block156

 Block145:
	mov ebx,dword ptr [esp+0x198]

 Block146:
	lea edx,[esp+0x14]
	push edx
	call ZList<long>::GetNext
	mov eax,dword ptr [eax]
	lea esi,[eax+eax*2]
	mov eax,dword ptr [ebx]
	add esi,esi
	add esi,esi
	add eax,esi
	add esp,4
	cmp dword ptr [eax+8],0
	jne Block155

 Block147:
	lea ecx,[esp+0x8C]
	lea edi,[eax+4]
	call ZList<ZXString<char>>::AddTail_
	push edi
	mov ecx,eax
	call ZXString<char>::op_assign
	lea ecx,[esp+0x50]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block148:
	lea eax,[esp+0x50]
	push eax
	mov eax,dword ptr [ebx]
	push ecx
	add eax,esi
	mov eax,dword ptr [eax+4]
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x190],0x33
	call _xbstr_t::_ctor_0
	mov byte ptr [esp+0x18C],0x34
	test ebp,ebp
	je Block21

 Block149:
	mov ecx,ebp
	mov byte ptr [esp+0x18C],0x33
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x50],8
	lea esi,[eax+0x23]
	mov byte ptr [esp+0x184],0x32
	jne Block152

 Block150:
	mov eax,dword ptr [esp+0x58]
	xor ecx,ecx
	mov word ptr [esp+0x50],cx
	test eax,eax
	je Block153

 Block151:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block153

 Block152:
	lea edx,[esp+0x50]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block153:
	cmp esi,dword ptr [esp+0x18]
	jl Block155

 Block154:
	mov dword ptr [esp+0x18],esi

 Block155:
	cmp dword ptr [esp+0x14],0
	jne Block146

 Block156:
	mov ebp,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	test ebp,ebp
	jne Block175

 Block157:
	int 3// TODO: 	mov esi,offset ZList<ZXString<char>>::`vftable'
	lea ecx,[esp+0x8C]
	mov byte ptr [esp+0x184],0x2F
	mov dword ptr [esp+0x8C],esi
	call ZList<ZXString<char>>::RemoveAll
	lea ecx,[esp+0xA0]
	mov byte ptr [esp+0x184],0x2B
	mov dword ptr [esp+0xA0],esi
	call ZList<ZXString<char>>::RemoveAll
	lea ecx,[esp+0x78]
	mov byte ptr [esp+0x184],0x28
	mov dword ptr [esp+0x78],esi
	call ZList<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x184],0x27
	test eax,eax
	je Block159

 Block158:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block159:
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0x184],0x26
	test eax,eax
	je Block161

 Block160:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block161:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0x184],0x25
	test eax,eax
	je Block163

 Block162:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block163:
	mov eax,dword ptr [esp+0x74]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0x188],0x22
	call edx
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0x184],0x1A
	test eax,eax
	je Block165

 Block164:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block165:
	mov eax,dword ptr [esp+0x70]
	mov byte ptr [esp+0x184],0x12
	test eax,eax
	je Block167

 Block166:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block167:
	mov eax,dword ptr [esp+0x6C]
	mov byte ptr [esp+0x184],0xA
	test eax,eax
	je Block169

 Block168:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block169:
	mov eax,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x184],1
	test eax,eax
	je Block171

 Block170:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block171:
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0x184],0
	test eax,eax
	je Block173

 Block172:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block173:
	mov eax,dword ptr [esp+0x48]
	mov dword ptr [esp+0x184],0xFFFFFFFF
	test eax,eax
	je Block349

 Block174:
	jmp Block347

 Block175:
	mov dword ptr [esp+0x60],0
	movzx eax,word ptr [ebp+0x4238]
	movzx ecx,ax
	mov byte ptr [esp+0x184],0x35
	test cx,cx
	je Block185

 Block176:
	mov ecx,dword ptr [esp+0x194]
	cmp dword ptr [ecx+0x2C],1
	jne Block185

 Block177:
	mov ecx,dword ptr [TSingleton<CQuestMan>::ms_pInstance]
	movzx eax,ax
	push eax
	lea edx,[esp+0x18]
	push edx
	call CQuestMan::GetQuestName
	mov esi,eax
	lea eax,[esp+0x1C]
	push 0x19F0
	mov bl,0x36
	push eax
	mov byte ptr [esp+0x18C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x68]
	push edx
	mov byte ptr [esp+0x190],0x37
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x28]
	add esp,0xC
	mov byte ptr [esp+0x184],bl
	test eax,eax
	je Block179

 Block178:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block179:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x184],0x35
	test eax,eax
	je Block181

 Block180:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block181:
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	call Ztl_variant_t::_ctor_1
	mov edx,dword ptr [esp+0x60]
	lea eax,[esp+0x30]
	push eax
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x24],esp
	mov bl,0x38
	push edx
	mov byte ptr [esp+0x190],bl
	call Ztl_bstr_t::_ctor_1
	mov ecx,dword ptr [esp+0x30]
	mov byte ptr [esp+0x18C],0x39
	test ecx,ecx
	jne Block183

 Block182:
	push 0x80004003
	call _com_issue_error

 Block183:
	mov byte ptr [esp+0x18C],bl
	call IWzFont::CalcTextWidth
	lea ecx,[esp+0x30]
	lea esi,[eax+0x23]
	mov byte ptr [esp+0x184],0x35
	call Ztl_variant_t::~Ztl_variant_t
	cmp esi,dword ptr [esp+0x18]
	jl Block185

 Block184:
	mov dword ptr [esp+0x18],esi

 Block185:
	mov ecx,dword ptr [esp+0x74]
	call IWzFont::Getheight
	cmp dword ptr [esp+0x24],0
	mov edi,eax
	lea esi,[edi+0x14]
	je Block187

 Block186:
	mov ebx,dword ptr [esp+0x20]
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x34],esp
	push 0xA
	push eax
	mov ecx,ebx
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x50]
	mov edx,dword ptr [esp+0x28]
	push ecx
	push 0
	add edx,0xFFFFFFEC
	push edx
	push 0xA
	mov ecx,ebx
	call CUIToolTip::DrawTextSepartedLine
	mov ebx,eax
	lea esi,[esi+ebx+8]
	jmp Block188

 Block187:
	mov ebx,dword ptr [esp+0x24]

 Block188:
	cmp dword ptr [esp+0x80],0
	jbe Block192

 Block189:
	cmp dword ptr [esp+0x44],0
	jne Block191

 Block190:
	push 0x80004003
	call _com_issue_error

 Block191:
	mov ecx,dword ptr [esp+0x44]
	call IWzFont::Getheight
	add eax,6
	imul eax,dword ptr [esp+0x80]
	lea esi,[esi+eax+8]

 Block192:
	cmp dword ptr [esp+0xA8],0
	jbe Block196

 Block193:
	cmp dword ptr [esp+0x64],0
	jne Block195

 Block194:
	push 0x80004003
	call _com_issue_error

 Block195:
	mov ecx,dword ptr [esp+0x64]
	call IWzFont::Getheight
	add eax,6
	imul eax,dword ptr [esp+0xA8]
	lea esi,[esi+eax+8]

 Block196:
	cmp dword ptr [esp+0x94],0
	jbe Block200

 Block197:
	cmp dword ptr [esp+0x28],0
	jne Block199

 Block198:
	push 0x80004003
	call _com_issue_error

 Block199:
	mov ecx,dword ptr [esp+0x28]
	call IWzFont::Getheight
	add eax,6
	imul eax,dword ptr [esp+0x94]
	lea esi,[esi+eax+8]

 Block200:
	mov ecx,dword ptr [esp+0x194]
	mov eax,dword ptr [ecx+0x44]
	test eax,eax
	je Block202

 Block201:
	cmp dword ptr [eax-4],0
	ja Block204

 Block202:
	movzx eax,word ptr [ebp+0x4238]
	test ax,ax
	je Block205

 Block203:
	cmp dword ptr [ecx+0x2C],1
	jne Block205

 Block204:
	add esi,8

 Block205:
	movzx eax,word ptr [ebp+0x4238]
	test ax,ax
	je Block210

 Block206:
	cmp dword ptr [ecx+0x2C],1
	jne Block210

 Block207:
	cmp dword ptr [esp+0x28],0
	jne Block209

 Block208:
	push 0x80004003
	call _com_issue_error

 Block209:
	mov ecx,dword ptr [esp+0x28]
	call IWzFont::Getheight
	mov ecx,dword ptr [esp+0x194]
	lea esi,[esi+eax+6]

 Block210:
	mov eax,dword ptr [ecx+0x44]
	test eax,eax
	je Block215

 Block211:
	cmp dword ptr [eax-4],0
	jbe Block215

 Block212:
	cmp dword ptr [esp+0x28],0
	jne Block214

 Block213:
	push 0x80004003
	call _com_issue_error

 Block214:
	mov ecx,dword ptr [esp+0x28]
	call IWzFont::Getheight
	lea esi,[esi+eax+6]

 Block215:
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [esp+0x20]
	push 0xFFFFFFFF
	push esi
	push eax
	push 3
	call CUIToolTip::SetBasicInfo
	mov ecx,dword ptr [esp+0x190]
	mov edx,dword ptr [esp+0x18C]
	mov esi,dword ptr [esp+0x20]
	push 0
	push 0xCC0E395A
	push 0
	push 0
	push 1
	push ecx
	push edx
	lea eax,[esp+0x48]
	push eax
	mov ecx,esi
	call CUIToolTip::MakeLayer
	push ecx
	lea edx,[esp+0x78]
	mov ecx,esp
	mov dword ptr [esp+0x28],esp
	push edx
	mov byte ptr [esp+0x18C],0x3A
	call _x_com_ptr<IWzFont>::_ctor_copy
	mov eax,dword ptr [esp+0x4C]
	push eax
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextCenter
	lea ecx,[esp+0x40]
	lea esi,[edi+0xA]
	call ZXString<char>::IsEmpty
	test eax,eax
	jne Block217

 Block216:
	mov edi,dword ptr [esp+0x20]
	push 1
	push eax
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	push 0xA
	push ecx
	mov ecx,edi
	add esi,8
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [esp+0x50]
	mov eax,dword ptr [esp+0x28]
	push edx
	push esi
	add eax,0xFFFFFFEB
	push eax
	push 9
	mov ecx,edi
	call CUIToolTip::DrawTextSepartedLine
	add esi,ebx

 Block217:
	mov edi,dword ptr [esp+0x194]
	mov eax,dword ptr [edi+0x44]
	test eax,eax
	je Block219

 Block218:
	cmp dword ptr [eax-4],0
	ja Block221

 Block219:
	movzx eax,word ptr [ebp+0x4238]
	test ax,ax
	je Block226

 Block220:
	cmp dword ptr [edi+0x2C],1
	jne Block226

 Block221:
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	add esi,6
	call Ztl_variant_t::_ctor_1
	cmp dword ptr [esp+0x4C],0
	mov byte ptr [esp+0x184],0x3B
	jne Block223

 Block222:
	push 0x80004003
	call _com_issue_error

 Block223:
	mov edi,dword ptr [esp+0x2C]
	test edi,edi
	jne Block225

 Block224:
	push 0x80004003
	call _com_issue_error

 Block225:
	mov ebx,dword ptr [esp+0x4C]
	lea ecx,[esp+0x30]
	push ecx
	push 0
	push 0
	push 0
	push 0
	mov ecx,ebx
	call IWzCanvas::Getheight
	mov edx,dword ptr [esp+0x2C]
	push eax
	add edx,0xFFFFFFEC
	push edx
	push 0xFF
	push ebx
	push esi
	push 0xA
	mov ecx,edi
	call IWzCanvas::CopyEx
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x184],0x3A
	call Ztl_variant_t::~Ztl_variant_t
	mov edi,dword ptr [esp+0x194]
	add esi,2

 Block226:
	movzx eax,word ptr [ebp+0x4238]
	test ax,ax
	je Block233

 Block227:
	cmp dword ptr [edi+0x2C],1
	jne Block233

 Block228:
	push offset _D_VTMISSING
	lea ecx,[esp+0x54]
	add esi,6
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x188],0x3C
	call Ztl_variant_t::_ctor_1
	mov ebp,dword ptr [esp+0x28]
	mov edx,dword ptr [esp+0x60]
	lea eax,[esp+0x50]
	push eax
	lea ecx,[esp+0x34]
	push ecx
	push ebp
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	mov bl,0x3D
	push edx
	mov byte ptr [esp+0x198],bl
	call Ztl_bstr_t::_ctor_1
	mov ecx,dword ptr [esp+0x3C]
	mov byte ptr [esp+0x194],0x3E
	test ecx,ecx
	jne Block230

 Block229:
	push 0x80004003
	call _com_issue_error

 Block230:
	push esi
	push 0x19
	mov byte ptr [esp+0x19C],bl
	call IWzCanvas::DrawTextA
	lea ecx,[esp+0x30]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0x184],0x3A
	call Ztl_variant_t::~Ztl_variant_t
	test ebp,ebp
	jne Block232

 Block231:
	push 0x80004003
	call _com_issue_error

 Block232:
	mov ecx,ebp
	call IWzFont::Getheight
	add esi,eax

 Block233:
	mov eax,dword ptr [edi+0x44]
	test eax,eax
	je Block245

 Block234:
	cmp dword ptr [eax-4],0
	jbe Block245

 Block235:
	mov dword ptr [esp+0x14],0
	lea eax,[esp+0x24]
	push 0x19FA
	push eax
	mov byte ptr [esp+0x18C],0x3F
	add esi,6
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x194]
	mov ecx,dword ptr [ecx+0x44]
	mov byte ptr [esp+0x184],0x40
	test ecx,ecx
	je Block237

 Block236:
	mov ecx,dword ptr [ecx-4]

 Block237:
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x1C]
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0xC
	mov byte ptr [esp+0x184],0x3F
	test eax,eax
	je Block239

 Block238:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block239:
	push offset _D_VTMISSING
	lea ecx,[esp+0x54]
	call Ztl_variant_t::_ctor_1
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	mov byte ptr [esp+0x188],0x41
	call Ztl_variant_t::_ctor_1
	mov ebp,dword ptr [esp+0x28]
	mov edi,dword ptr [esp+0x14]
	lea eax,[esp+0x50]
	push eax
	lea ecx,[esp+0x34]
	push ecx
	push ebp
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x34],esp
	mov bl,0x42
	push edi
	mov byte ptr [esp+0x198],bl
	call Ztl_bstr_t::_ctor_1
	mov ecx,dword ptr [esp+0x3C]
	mov byte ptr [esp+0x194],0x43
	test ecx,ecx
	jne Block241

 Block240:
	push 0x80004003
	call _com_issue_error

 Block241:
	push esi
	push 0x19
	mov byte ptr [esp+0x19C],bl
	call IWzCanvas::DrawTextA
	lea ecx,[esp+0x30]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0x184],0x3F
	call Ztl_variant_t::~Ztl_variant_t
	test ebp,ebp
	jne Block243

 Block242:
	push 0x80004003
	call _com_issue_error

 Block243:
	mov ecx,ebp
	call IWzFont::Getheight
	add esi,eax
	mov byte ptr [esp+0x184],0x3A
	test edi,edi
	je Block245

 Block244:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block245:
	cmp dword ptr [esp+0x80],0
	jbe Block253

 Block246:
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	add esi,6
	call Ztl_variant_t::_ctor_1
	mov ebp,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x184],0x44
	test ebp,ebp
	jne Block248

 Block247:
	push 0x80004003
	call _com_issue_error

 Block248:
	mov edi,dword ptr [esp+0x2C]
	test edi,edi
	jne Block250

 Block249:
	push 0x80004003
	call _com_issue_error

 Block250:
	lea edx,[esp+0x30]
	push edx
	push 0
	push 0
	push 0
	push 0
	mov ecx,ebp
	call IWzCanvas::Getheight
	push eax
	mov eax,dword ptr [esp+0x30]
	add eax,0xFFFFFFEC
	push eax
	push 0xFF
	push ebp
	push esi
	push 0xA
	mov ecx,edi
	call IWzCanvas::CopyEx
	lea ecx,[esp+0x30]
	call Ztl_variant_t::~Ztl_variant_t
	mov ecx,3
	add esi,2
	mov word ptr [esp+0x50],cx
	mov dword ptr [esp+0x58],0xFF
	mov ecx,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x184],0x45
	test ecx,ecx
	jne Block252

 Block251:
	push 0x80004003
	call _com_issue_error

 Block252:
	mov eax,dword ptr [esp+0x6C]
	lea edx,[esp+0x50]
	push edx
	push eax
	lea edx,[esi+7]
	push edx
	push 0xA
	call IWzCanvas::Copy
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0x184],0x3A
	call Ztl_variant_t::~Ztl_variant_t
	jmp Block254

 Block253:
	mov ebp,dword ptr [esp+0x4C]

 Block254:
	mov eax,dword ptr [esp+0x84]
	mov dword ptr [esp+0x1C],eax
	test eax,eax
	je Block268

 Block255:
	mov bl,0x48

 Block256:
	lea eax,[esp+0x1C]
	push eax
	call ZList<ZXString<char>>::GetNext
	add esp,4
	push eax
	lea ecx,[esp+0x18]
	mov dword ptr [esp+0x18],0
	call ZXString<char>::op_assign
	mov edi,dword ptr [esp+0x14]
	add esi,6
	mov byte ptr [esp+0x184],0x46
	test edi,edi
	je Block262

 Block257:
	cmp byte ptr [edi],0
	je Block262

 Block258:
	lea ecx,[esp+0x30]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x30]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block259:
	lea eax,[esp+0x50]
	push eax
	mov byte ptr [esp+0x188],0x47
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x50]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block260:
	mov ecx,dword ptr [esp+0x44]
	lea edx,[esp+0x30]
	push edx
	lea eax,[esp+0x54]
	push eax
	push ecx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push edi
	mov byte ptr [esp+0x198],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x3C]
	mov byte ptr [esp+0x194],0x49
	test ecx,ecx
	je Block21

 Block261:
	push esi
	push 0x19
	mov byte ptr [esp+0x19C],bl
	call IWzCanvas::DrawTextA
	lea ecx,[esp+0x50]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x184],0x46
	call Ztl_variant_t::~Ztl_variant_t

 Block262:
	cmp dword ptr [esp+0x44],0
	je Block21

 Block263:
	mov eax,dword ptr [esp+0x44]
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x14]
	lea ecx,[esp+0x20]
	push ecx
	push eax
	mov dword ptr [esp+0x28],0
	call edx
	test eax,eax
	jge Block265

 Block264:
	mov ecx,dword ptr [esp+0x44]
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ecx
	push eax
	call _com_issue_errorex

 Block265:
	add esi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x184],0x3A
	test edi,edi
	je Block267

 Block266:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block267:
	cmp dword ptr [esp+0x1C],0
	jne Block256

 Block268:
	mov edx,dword ptr [esp+0x194]
	cmp dword ptr [edx+0x70],0
	jbe Block276

 Block269:
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	add esi,6
	call Ztl_variant_t::_ctor_1
	mov byte ptr [esp+0x184],0x4A
	test ebp,ebp
	jne Block271

 Block270:
	push 0x80004003
	call _com_issue_error

 Block271:
	mov edi,dword ptr [esp+0x2C]
	test edi,edi
	jne Block273

 Block272:
	push 0x80004003
	call _com_issue_error

 Block273:
	lea eax,[esp+0x30]
	push eax
	push 0
	push 0
	push 0
	push 0
	mov ecx,ebp
	call IWzCanvas::Getheight
	mov ecx,dword ptr [esp+0x2C]
	push eax
	add ecx,0xFFFFFFEC
	push ecx
	push 0xFF
	push ebp
	push esi
	push 0xA
	mov ecx,edi
	call IWzCanvas::CopyEx
	lea ecx,[esp+0x30]
	call Ztl_variant_t::~Ztl_variant_t
	mov edx,3
	add esi,2
	mov word ptr [esp+0x30],dx
	mov dword ptr [esp+0x38],0xFF
	mov ecx,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x184],0x4B
	test ecx,ecx
	jne Block275

 Block274:
	push 0x80004003
	call _com_issue_error

 Block275:
	mov edx,dword ptr [esp+0x70]
	lea eax,[esp+0x30]
	push eax
	push edx
	lea eax,[esi+7]
	push eax
	push 0xA
	call IWzCanvas::Copy
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x184],0x3A
	call Ztl_variant_t::~Ztl_variant_t

 Block276:
	mov eax,dword ptr [esp+0xAC]
	mov dword ptr [esp+0x20],eax
	test eax,eax
	je Block291

 Block277:
	mov ebp,dword ptr [esp+0x64]
	mov bl,0x4E

 Block278:
	lea ecx,[esp+0x20]
	push ecx
	call ZList<ZXString<char>>::GetNext
	add esp,4
	push eax
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x20],0
	call ZXString<char>::op_assign
	mov edi,dword ptr [esp+0x1C]
	add esi,6
	mov byte ptr [esp+0x184],0x4C
	test edi,edi
	je Block284

 Block279:
	cmp byte ptr [edi],0
	je Block284

 Block280:
	lea edx,[esp+0x50]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x50]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block281:
	lea ecx,[esp+0x30]
	push ecx
	mov byte ptr [esp+0x188],0x4D
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x30]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block282:
	lea eax,[esp+0x50]
	push eax
	lea ecx,[esp+0x34]
	push ecx
	push ebp
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push edi
	mov byte ptr [esp+0x198],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x3C]
	mov byte ptr [esp+0x194],0x4F
	test ecx,ecx
	je Block21

 Block283:
	push esi
	push 0x19
	mov byte ptr [esp+0x19C],bl
	call IWzCanvas::DrawTextA
	lea ecx,[esp+0x30]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0x184],0x4C
	call Ztl_variant_t::~Ztl_variant_t

 Block284:
	test ebp,ebp
	je Block21

 Block285:
	mov edx,dword ptr [ebp]
	mov ecx,dword ptr [edx+0x14]
	lea eax,[esp+0x14]
	push eax
	push ebp
	mov dword ptr [esp+0x1C],0
	call ecx
	test eax,eax
	jge Block287

 Block286:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ebp
	push eax
	call _com_issue_errorex

 Block287:
	add esi,dword ptr [esp+0x14]
	mov byte ptr [esp+0x184],0x3A
	test edi,edi
	je Block289

 Block288:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block289:
	cmp dword ptr [esp+0x20],0
	jne Block278

 Block290:
	mov ebp,dword ptr [esp+0x4C]

 Block291:
	cmp dword ptr [esp+0x94],0
	jbe Block299

 Block292:
	push offset _D_VTMISSING
	lea ecx,[esp+0x34]
	add esi,6
	call Ztl_variant_t::_ctor_1
	mov byte ptr [esp+0x184],0x50
	test ebp,ebp
	jne Block294

 Block293:
	push 0x80004003
	call _com_issue_error

 Block294:
	mov edi,dword ptr [esp+0x2C]
	test edi,edi
	jne Block296

 Block295:
	push 0x80004003
	call _com_issue_error

 Block296:
	lea edx,[esp+0x30]
	push edx
	push 0
	push 0
	push 0
	push 0
	mov ecx,ebp
	call IWzCanvas::Getheight
	push eax
	mov eax,dword ptr [esp+0x30]
	add eax,0xFFFFFFEC
	push eax
	push 0xFF
	push ebp
	push esi
	push 0xA
	mov ecx,edi
	call IWzCanvas::CopyEx
	lea ecx,[esp+0x30]
	call Ztl_variant_t::~Ztl_variant_t
	mov ecx,3
	add esi,2
	mov word ptr [esp+0x30],cx
	mov dword ptr [esp+0x38],0xFF
	mov ecx,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x184],0x51
	test ecx,ecx
	jne Block298

 Block297:
	push 0x80004003
	call _com_issue_error

 Block298:
	mov eax,dword ptr [esp+0x68]
	lea edx,[esp+0x30]
	push edx
	push eax
	lea edx,[esi+7]
	push edx
	push 0xA
	call IWzCanvas::Copy
	lea ecx,[esp+0x30]
	mov byte ptr [esp+0x184],0x3A
	call Ztl_variant_t::~Ztl_variant_t

 Block299:
	mov eax,dword ptr [esp+0x98]
	mov ebp,dword ptr [esp+0x28]
	mov dword ptr [esp+0x20],eax
	test eax,eax
	je Block313

 Block300:
	mov bl,0x54

 Block301:
	lea eax,[esp+0x20]
	push eax
	call ZList<ZXString<char>>::GetNext
	add esp,4
	push eax
	lea ecx,[esp+0x20]
	mov dword ptr [esp+0x20],0
	call ZXString<char>::op_assign
	mov edi,dword ptr [esp+0x1C]
	add esi,6
	mov byte ptr [esp+0x184],0x52
	test edi,edi
	je Block307

 Block302:
	cmp byte ptr [edi],0
	je Block307

 Block303:
	lea ecx,[esp+0x50]
	push ecx
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x50]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block304:
	lea eax,[esp+0x30]
	push eax
	mov byte ptr [esp+0x188],0x53
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x30]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block17

 Block305:
	lea edx,[esp+0x50]
	push edx
	lea eax,[esp+0x34]
	push eax
	push ebp
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push edi
	mov byte ptr [esp+0x198],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x3C]
	mov byte ptr [esp+0x194],0x55
	test ecx,ecx
	je Block21

 Block306:
	push esi
	push 0x19
	mov byte ptr [esp+0x19C],bl
	call IWzCanvas::DrawTextA
	lea ecx,[esp+0x30]
	call Ztl_variant_t::~Ztl_variant_t
	lea ecx,[esp+0x50]
	mov byte ptr [esp+0x184],0x52
	call Ztl_variant_t::~Ztl_variant_t

 Block307:
	test ebp,ebp
	je Block21

 Block308:
	mov ecx,dword ptr [ebp]
	mov eax,dword ptr [ecx+0x14]
	lea edx,[esp+0x14]
	push edx
	push ebp
	mov dword ptr [esp+0x1C],0
	call eax
	test eax,eax
	jge Block310

 Block309:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push ebp
	push eax
	call _com_issue_errorex

 Block310:
	add esi,dword ptr [esp+0x14]
	mov byte ptr [esp+0x184],0x3A
	test edi,edi
	je Block312

 Block311:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block312:
	cmp dword ptr [esp+0x20],0
	jne Block301

 Block313:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x184],0x35
	test eax,eax
	je Block315

 Block314:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block315:
	mov eax,dword ptr [esp+0x60]
	mov byte ptr [esp+0x184],0x32
	test eax,eax
	je Block317

 Block316:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block317:
	int 3// TODO: 	mov esi,offset ZList<ZXString<char>>::`vftable'
	lea ecx,[esp+0x8C]
	mov byte ptr [esp+0x184],0x2F
	mov dword ptr [esp+0x8C],esi
	call ZList<ZXString<char>>::RemoveAll
	lea ecx,[esp+0xA0]
	mov byte ptr [esp+0x184],0x2B
	mov dword ptr [esp+0xA0],esi
	call ZList<ZXString<char>>::RemoveAll
	lea ecx,[esp+0x78]
	mov byte ptr [esp+0x184],0x28
	mov dword ptr [esp+0x78],esi
	call ZList<ZXString<char>>::RemoveAll
	mov byte ptr [esp+0x184],0x27
	test ebp,ebp
	je Block319

 Block318:
	mov eax,dword ptr [ebp]
	mov ecx,dword ptr [eax+8]
	push ebp
	call ecx

 Block319:
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0x184],0x26
	test eax,eax
	je Block321

 Block320:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block321:
	mov eax,dword ptr [esp+0x44]
	mov byte ptr [esp+0x184],0x25
	test eax,eax
	je Block323

 Block322:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block323:
	mov eax,dword ptr [esp+0x74]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0x188],0x22
	call edx
	mov eax,dword ptr [esp+0x68]
	mov byte ptr [esp+0x184],0x1A
	test eax,eax
	je Block325

 Block324:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block325:
	mov eax,dword ptr [esp+0x70]
	mov byte ptr [esp+0x184],0x12
	test eax,eax
	je Block327

 Block326:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block327:
	mov eax,dword ptr [esp+0x6C]
	mov byte ptr [esp+0x184],0xA
	test eax,eax
	je Block329

 Block328:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block329:
	mov eax,dword ptr [esp+0x4C]
	mov byte ptr [esp+0x184],1
	test eax,eax
	je Block331

 Block330:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block331:
	mov eax,dword ptr [esp+0x40]
	mov byte ptr [esp+0x184],0
	test eax,eax
	je Block333

 Block332:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block333:
	mov eax,dword ptr [esp+0x48]
	mov dword ptr [esp+0x184],0xFFFFFFFF
	test eax,eax
	je Block349

 Block334:
	jmp Block347

 Block335:
	mov byte ptr [esp+0x184],0x1A
	cmp ecx,ebp
	je Block337

 Block336:
	mov eax,dword ptr [ecx]
	push ecx
	mov ecx,dword ptr [eax+8]
	call ecx

 Block337:
	mov byte ptr [esp+0x184],0x12
	cmp esi,ebp
	je Block339

 Block338:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	call eax

 Block339:
	mov byte ptr [esp+0x184],0xA
	cmp ebx,ebp
	je Block341

 Block340:
	mov ecx,dword ptr [ebx]
	mov edx,dword ptr [ecx+8]
	push ebx
	call edx

 Block341:
	mov byte ptr [esp+0x184],1
	cmp edi,ebp
	je Block343

 Block342:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block343:
	mov byte ptr [esp+0x184],0
	cmp dword ptr [esp+0x40],ebp
	je Block345

 Block344:
	mov edx,dword ptr [esp+0x40]
	add edx,0xFFFFFFF4
	push edx
	call ZXString<char>::_Release
	add esp,4

 Block345:
	mov dword ptr [esp+0x184],0xFFFFFFFF
	cmp dword ptr [esp+0x48],ebp
	je Block349

 Block346:
	mov eax,dword ptr [esp+0x48]

 Block347:
	add eax,0xFFFFFFF4
	push eax

 Block348:
	call ZXString<char>::_Release
	add esp,4

 Block349:
	mov ecx,dword ptr [esp+0x17C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x174
	ret 0x10
}
}
// CUIToolTip::DrawTextCenter
_SUB_EXCEPTION_HANDLER(48C360)
__SUB_CLASS_THIS(0048C360, __thiscall, 5777,  CUIToolTip, void, long, const char*, NakedParam<_x_com_ptr<IWzFont>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48C360
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x38
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x48]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	push eax
	mov dword ptr [esp+0x54],0
	call esi
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	mov ebp,dword ptr [esp+0x5C]
	lea edx,[esp+0x18]
	push edx
	push ecx
	mov dword ptr [esp+0x18],esp
	mov ecx,esp
	push ebp
	mov byte ptr [esp+0x5C],1
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x68]
	mov byte ptr [esp+0x58],2
	test ecx,ecx
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	mov byte ptr [esp+0x58],1
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov dword ptr [esp+0x5C],eax
	mov byte ptr [esp+0x50],0
	jne Block7

 Block5:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block8

 Block6:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block8

 Block7:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block8:
	lea edx,[esp+0x38]
	push edx
	call esi
	lea eax,[esp+0x38]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block10

 Block9:
	push eax
	call _com_issue_error

 Block10:
	lea ecx,[esp+0x28]
	push ecx
	mov byte ptr [esp+0x54],3
	call esi
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block12

 Block11:
	push eax
	call _com_issue_error

 Block12:
	mov eax,3
	mov word ptr [esp+0x18],ax
	mov dword ptr [esp+0x20],0
	mov eax,dword ptr [esp+0x60]
	lea ecx,[esp+0x38]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	push eax
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	push ebp
	mov byte ptr [esp+0x64],5
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [edi+0x10]
	mov byte ptr [esp+0x60],6
	test ecx,ecx
	jne Block14

 Block13:
	push 0x80004003
	call _com_issue_error

 Block14:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x24]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x60],7
	test ecx,ecx
	jne Block16

 Block15:
	push 0x80004003
	call _com_issue_error

 Block16:
	mov eax,dword ptr [edi+0xC]
	sub eax,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x68]
	add edx,0xFFFFFFFE
	push edx
	cdq
	sub eax,edx
	sar eax,1
	push eax
	mov byte ptr [esp+0x68],8
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x50],5
	test eax,eax
	je Block18

 Block17:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block18:
	mov esi,8
	mov byte ptr [esp+0x50],4
	cmp word ptr [esp+0x18],si
	jne Block21

 Block19:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block22:
	mov byte ptr [esp+0x50],3
	cmp word ptr [esp+0x28],si
	jne Block25

 Block23:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	test eax,eax
	je Block26

 Block24:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block26

 Block25:
	lea eax,[esp+0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block26:
	mov byte ptr [esp+0x50],0
	cmp word ptr [esp+0x38],si
	jne Block29

 Block27:
	mov eax,dword ptr [esp+0x40]
	xor ecx,ecx
	mov word ptr [esp+0x38],cx
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea edx,[esp+0x38]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block30:
	mov eax,dword ptr [esp+0x60]
	mov dword ptr [esp+0x50],0xFFFFFFFF
	test eax,eax
	je Block32

 Block31:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block32:
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x44
	ret 0xC
}
}
// CUIToolTip::SetToolTip_String_MultiLine
_SUB_EXCEPTION_HANDLER(495250)
__SUB_CLASS_THIS(00495250, __thiscall, 5691,  CUIToolTip, void, long, long, NakedParam<ZXString<char>>, long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_495250
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x1C]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esi+0x954]
	xor ebx,ebx
	mov dword ptr [esp+0x24],ebx
	mov dword ptr [esp+0x18],eax
	cmp eax,ebx
	je Block2

 Block1:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block2:
	mov edi,dword ptr [esp+0x38]
	mov byte ptr [esp+0x24],1
	mov dword ptr [esp+0x14],ebx
	mov ebp,edi
	cmp edi,ebx
	jne Block4

 Block3:
	mov ebp,0x7FFFFFFF

 Block4:
	mov ebx,dword ptr [esp+0x3C]
	mov eax,edi
	neg eax
	sbb eax,eax
	push ebx
	lea ecx,[esp+0x18]
	not eax
	and eax,ecx
	push eax
	push 0
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x48],esp
	push 0xA
	push edx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [esp+0x44]
	push eax
	push 0xA
	push ebp
	push 5
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	add eax,0xA
	test edi,edi
	je Block6

 Block5:
	mov ecx,edi
	jmp Block7

 Block6:
	mov ecx,dword ptr [esp+0x14]
	add ecx,5

 Block7:
	push 0xFFFFFFFF
	push eax
	push ecx
	push 1
	mov ecx,esi
	call CUIToolTip::SetBasicInfo
	mov ecx,dword ptr [esp+0x30]
	mov edx,dword ptr [esp+0x2C]
	push 0
	push 0xCC0E395A
	push 0
	push 0
	push 0
	push ecx
	push edx
	lea eax,[esp+0x54]
	push eax
	mov ecx,esi
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x38]
	test eax,eax
	je Block9

 Block8:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block9:
	test edi,edi
	jne Block11

 Block10:
	mov edi,0x7FFFFFFF

 Block11:
	push ebx
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x4C],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x44]
	push ecx
	push 8
	push edi
	push 5
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x24],0
	test eax,eax
	je Block13

 Block12:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block13:
	mov eax,dword ptr [esp+0x34]
	mov dword ptr [esp+0x24],0xFFFFFFFF
	test eax,eax
	je Block15

 Block14:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block15:
	mov ecx,dword ptr [esp+0x1C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x14
	ret 0x14
}
}
// CUIToolTip::SetToolTip_PartyQuestRankString
_SUB_EXCEPTION_HANDLER(4957C0)
__SUB_CLASS_THIS(004957C0, __thiscall, 5689,  CUIToolTip, void, long, long, const char*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4957C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x58
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x6C]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x28],ecx
	lea eax,[esp+0x84]
	push eax
	xor ebx,ebx
	push 0xC
	lea ecx,[esp+0x1C]
	mov dword ptr [esp+0x1C],ebx
	call ZArray<_x_com_ptr<IWzFont>>::_Alloc
	mov dword ptr [esp+0x74],ebx
	xor esi,esi
	lea ebx,[ebx]

 Block1:
	lea ecx,[esp+0x20]
	push 0x5AF
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov edx,dword ptr [esp+0x14]
	mov eax,dword ptr [eax]
	push ebx
	lea ecx,[esi+edx]
	push ecx
	push eax
	mov byte ptr [esp+0x80],1
	call PcCreate_IWzFont
	mov eax,dword ptr [esp+0x2C]
	add esp,0xC
	mov byte ptr [esp+0x74],0
	cmp eax,ebx
	je Block3

 Block2:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block3:
	add esi,4
	cmp esi,0x30
	jl Block1

 Block4:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block6

 Block5:
	push eax
	call _com_issue_error

 Block6:
	lea ecx,[esp+0x2C]
	push ecx
	push 0xFF000000
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x30],esp
	push 0x1A25
	push edx
	mov byte ptr [esp+0x8C],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x84],3
	cmp ecx,ebx
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov byte ptr [esp+0x84],2
	call IWzFont::Create
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0x74],0
	jne Block11

 Block9:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	cmp eax,ebx
	je Block12

 Block10:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block12

 Block11:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block12:
	lea eax,[esp+0x20]
	push 0x5B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x74],4
	cmp eax,ebx
	je Block14

 Block13:
	mov ebp,dword ptr [eax]
	jmp Block15

 Block14:
	xor ebp,ebp

 Block15:
	mov ecx,8
	mov word ptr [esp+0x2C],cx
	cmp ebp,ebx
	jne Block17

 Block16:
	xor esi,esi
	jmp Block22

 Block17:
	mov eax,ebp
	lea edx,[eax+2]

 Block18:
	mov cx,word ptr [eax]
	add eax,2
	cmp cx,bx
	jne Block18

 Block19:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	cmp esi,ebx
	jne Block21

 Block20:
	xor esi,esi
	jmp Block22

 Block21:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block22:
	mov dword ptr [esp+0x34],esi
	cmp esi,ebx
	jne Block25

 Block23:
	cmp ebp,ebx
	je Block25

 Block24:
	push 0x8007000E
	call _com_issue_error

 Block25:
	lea eax,[esp+0x2C]
	push eax
	push 0xFF000000
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x1A25
	mov bl,5
	push ecx
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [edx+4]
	mov byte ptr [esp+0x84],6
	test ecx,ecx
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0x74],4
	jne Block30

 Block28:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block31

 Block29:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block31

 Block30:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block31:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0x74],0
	test eax,eax
	je Block39

 Block32:
	mov esi,eax
	add eax,8
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block39

 Block33:
	test esi,esi
	je Block39

 Block34:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block36

 Block35:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block36:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block38

 Block37:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block38:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block39:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block41

 Block40:
	push eax
	call _com_issue_error

 Block41:
	lea ecx,[esp+0x2C]
	push ecx
	push 0xFFFF0000
	push 0xC
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x30],esp
	push 0x1A25
	mov bl,7
	push edx
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [esp+0x24]
	mov ecx,dword ptr [eax+8]
	mov byte ptr [esp+0x84],8
	test ecx,ecx
	jne Block43

 Block42:
	push 0x80004003
	call _com_issue_error

 Block43:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0x74],0
	jne Block46

 Block44:
	mov eax,dword ptr [esp+0x34]
	xor ecx,ecx
	mov word ptr [esp+0x2C],cx
	test eax,eax
	je Block47

 Block45:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block47

 Block46:
	lea edx,[esp+0x2C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block47:
	lea eax,[esp+0x20]
	push 0x5B0
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x74],9
	test eax,eax
	je Block49

 Block48:
	mov ebp,dword ptr [eax]
	jmp Block50

 Block49:
	xor ebp,ebp

 Block50:
	mov ecx,8
	mov word ptr [esp+0x2C],cx
	test ebp,ebp
	jne Block52

 Block51:
	xor esi,esi
	jmp Block56

 Block52:
	mov eax,ebp
	lea edx,[eax+2]
	lea ebx,[ebx]

 Block53:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block53

 Block54:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block56

 Block55:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block56:
	mov dword ptr [esp+0x34],esi
	test esi,esi
	jne Block59

 Block57:
	test ebp,ebp
	je Block59

 Block58:
	push 0x8007000E
	call _com_issue_error

 Block59:
	lea eax,[esp+0x2C]
	push eax
	push 0xFFFF0000
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x1A25
	mov bl,0xA
	push ecx
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [edx+0xC]
	mov byte ptr [esp+0x84],0xB
	test ecx,ecx
	jne Block61

 Block60:
	push 0x80004003
	call _com_issue_error

 Block61:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	mov edi,8
	mov byte ptr [esp+0x74],9
	cmp word ptr [esp+0x2C],di
	jne Block64

 Block62:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block65

 Block63:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block65

 Block64:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block65:
	mov esi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x74],0
	test esi,esi
	je Block73

 Block66:
	lea edx,[esi+8]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block73

 Block67:
	test esi,esi
	je Block73

 Block68:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block70

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block70:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block72

 Block71:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block72:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block73:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block75

 Block74:
	push eax
	call _com_issue_error

 Block75:
	lea edx,[esp+0x2C]
	push edx
	push 0xFF00FF00
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0x1A25
	push eax
	mov byte ptr [esp+0x8C],0xC
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x24]
	mov ecx,dword ptr [ecx+0x10]
	mov byte ptr [esp+0x84],0xD
	test ecx,ecx
	jne Block77

 Block76:
	push 0x80004003
	call _com_issue_error

 Block77:
	mov byte ptr [esp+0x84],0xC
	call IWzFont::Create
	mov byte ptr [esp+0x74],0
	cmp word ptr [esp+0x2C],di
	jne Block80

 Block78:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block81

 Block79:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block81

 Block80:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block81:
	lea ecx,[esp+0x20]
	push 0x5B0
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x74],0xE
	test eax,eax
	je Block83

 Block82:
	mov ebp,dword ptr [eax]
	jmp Block84

 Block83:
	xor ebp,ebp

 Block84:
	mov word ptr [esp+0x2C],di
	test ebp,ebp
	jne Block86

 Block85:
	xor esi,esi
	jmp Block90

 Block86:
	mov eax,ebp
	lea edx,[eax+2]

 Block87:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block87

 Block88:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block90

 Block89:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block90:
	mov dword ptr [esp+0x34],esi
	test esi,esi
	jne Block93

 Block91:
	test ebp,ebp
	je Block93

 Block92:
	push 0x8007000E
	call _com_issue_error

 Block93:
	lea eax,[esp+0x2C]
	push eax
	push 0xFF00FF00
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x1A25
	mov bl,0xF
	push ecx
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [edx+0x14]
	mov byte ptr [esp+0x84],0x10
	test ecx,ecx
	jne Block95

 Block94:
	push 0x80004003
	call _com_issue_error

 Block95:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	mov edi,8
	mov byte ptr [esp+0x74],0xE
	cmp word ptr [esp+0x2C],di
	jne Block98

 Block96:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block99

 Block97:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block99

 Block98:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block99:
	mov esi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x74],0
	test esi,esi
	je Block107

 Block100:
	lea edx,[esi+8]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block107

 Block101:
	test esi,esi
	je Block107

 Block102:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block104

 Block103:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block104:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block106

 Block105:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block106:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block107:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block109

 Block108:
	push eax
	call _com_issue_error

 Block109:
	lea edx,[esp+0x2C]
	push edx
	push 0xFF0000FF
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0x1A25
	mov bl,0x11
	push eax
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x24]
	mov ecx,dword ptr [ecx+0x18]
	mov byte ptr [esp+0x84],0x12
	test ecx,ecx
	jne Block111

 Block110:
	push 0x80004003
	call _com_issue_error

 Block111:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	mov byte ptr [esp+0x74],0
	cmp word ptr [esp+0x2C],di
	jne Block114

 Block112:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block115

 Block113:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block115

 Block114:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block115:
	lea ecx,[esp+0x20]
	push 0x5B0
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov bl,0x13
	mov byte ptr [esp+0x74],bl
	test eax,eax
	je Block117

 Block116:
	mov ebp,dword ptr [eax]
	jmp Block118

 Block117:
	xor ebp,ebp

 Block118:
	mov word ptr [esp+0x2C],di
	test ebp,ebp
	jne Block120

 Block119:
	xor esi,esi
	jmp Block124

 Block120:
	mov eax,ebp
	lea edx,[eax+2]

 Block121:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block121

 Block122:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block124

 Block123:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block124:
	mov dword ptr [esp+0x34],esi
	test esi,esi
	jne Block127

 Block125:
	test ebp,ebp
	je Block127

 Block126:
	push 0x8007000E
	call _com_issue_error

 Block127:
	lea eax,[esp+0x2C]
	push eax
	push 0xFF0000FF
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x1A25
	push ecx
	mov byte ptr [esp+0x8C],0x14
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [edx+0x1C]
	mov byte ptr [esp+0x84],0x15
	test ecx,ecx
	jne Block129

 Block128:
	push 0x80004003
	call _com_issue_error

 Block129:
	mov byte ptr [esp+0x84],0x14
	call IWzFont::Create
	mov edi,8
	mov byte ptr [esp+0x74],bl
	cmp word ptr [esp+0x2C],di
	jne Block132

 Block130:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block133

 Block131:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block133

 Block132:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block133:
	mov esi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x74],0
	test esi,esi
	je Block141

 Block134:
	lea edx,[esi+8]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block141

 Block135:
	test esi,esi
	je Block141

 Block136:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block138

 Block137:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block138:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block140

 Block139:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block140:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block141:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block143

 Block142:
	push eax
	call _com_issue_error

 Block143:
	lea edx,[esp+0x2C]
	push edx
	push 0xFFFFFFFF
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0x1A25
	mov bl,0x16
	push eax
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x24]
	mov ecx,dword ptr [ecx+0x20]
	mov byte ptr [esp+0x84],0x17
	test ecx,ecx
	jne Block145

 Block144:
	push 0x80004003
	call _com_issue_error

 Block145:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	mov byte ptr [esp+0x74],0
	cmp word ptr [esp+0x2C],di
	jne Block148

 Block146:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block149

 Block147:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block149

 Block148:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block149:
	lea ecx,[esp+0x20]
	push 0x5B0
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x74],0x18
	test eax,eax
	je Block151

 Block150:
	mov ebp,dword ptr [eax]
	jmp Block152

 Block151:
	xor ebp,ebp

 Block152:
	mov word ptr [esp+0x2C],di
	test ebp,ebp
	jne Block154

 Block153:
	xor esi,esi
	jmp Block158

 Block154:
	mov eax,ebp
	lea edx,[eax+2]

 Block155:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block155

 Block156:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block158

 Block157:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block158:
	mov dword ptr [esp+0x34],esi
	test esi,esi
	jne Block161

 Block159:
	test ebp,ebp
	je Block161

 Block160:
	push 0x8007000E
	call _com_issue_error

 Block161:
	lea eax,[esp+0x2C]
	push eax
	push 0xFFFFFFFF
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x1A25
	mov bl,0x19
	push ecx
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [edx+0x24]
	mov byte ptr [esp+0x84],0x1A
	test ecx,ecx
	jne Block163

 Block162:
	push 0x80004003
	call _com_issue_error

 Block163:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	mov edi,8
	mov byte ptr [esp+0x74],0x18
	cmp word ptr [esp+0x2C],di
	jne Block166

 Block164:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block167

 Block165:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block167

 Block166:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block167:
	mov esi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x74],0
	test esi,esi
	je Block175

 Block168:
	lea edx,[esi+8]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block175

 Block169:
	test esi,esi
	je Block175

 Block170:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block172

 Block171:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block172:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block174

 Block173:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block174:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block175:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block177

 Block176:
	push eax
	call _com_issue_error

 Block177:
	lea edx,[esp+0x2C]
	push edx
	push 0xFF51378C
	push 0xC
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0x1A25
	mov bl,0x1B
	push eax
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x24]
	mov ecx,dword ptr [ecx+0x28]
	mov byte ptr [esp+0x84],0x1C
	test ecx,ecx
	jne Block179

 Block178:
	push 0x80004003
	call _com_issue_error

 Block179:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	mov byte ptr [esp+0x74],0
	cmp word ptr [esp+0x2C],di
	jne Block182

 Block180:
	mov eax,dword ptr [esp+0x34]
	xor edx,edx
	mov word ptr [esp+0x2C],dx
	test eax,eax
	je Block183

 Block181:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block183

 Block182:
	lea eax,[esp+0x2C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block183:
	lea ecx,[esp+0x20]
	push 0x5B0
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov eax,dword ptr [eax]
	mov byte ptr [esp+0x74],0x1D
	test eax,eax
	je Block185

 Block184:
	mov ebp,dword ptr [eax]
	jmp Block186

 Block185:
	xor ebp,ebp

 Block186:
	mov word ptr [esp+0x2C],di
	test ebp,ebp
	jne Block188

 Block187:
	xor esi,esi
	jmp Block192

 Block188:
	mov eax,ebp
	lea edx,[eax+2]
	mov edi,edi

 Block189:
	mov cx,word ptr [eax]
	add eax,2
	test cx,cx
	jne Block189

 Block190:
	sub eax,edx
	sar eax,1
	mov edi,eax
	lea edx,[edi+edi+6]
	push edx
	call CoTaskMemAlloc
	mov esi,eax
	test esi,esi
	je Block192

 Block191:
	lea eax,[edi+edi]
	mov dword ptr [esi],eax
	add eax,2
	push eax
	add esi,4
	push ebp
	push esi
	call _memcpy
	add esp,0xC

 Block192:
	xor edi,edi
	mov dword ptr [esp+0x34],esi
	cmp esi,edi
	jne Block195

 Block193:
	cmp ebp,edi
	je Block195

 Block194:
	push 0x8007000E
	call _com_issue_error

 Block195:
	lea eax,[esp+0x2C]
	push eax
	push 0xFF51378C
	push 0xC
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x2C],esp
	push 0x1A25
	mov bl,0x1E
	push ecx
	mov byte ptr [esp+0x8C],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov edx,dword ptr [esp+0x24]
	mov ecx,dword ptr [edx+0x2C]
	mov byte ptr [esp+0x84],0x1F
	cmp ecx,edi
	jne Block197

 Block196:
	push 0x80004003
	call _com_issue_error

 Block197:
	mov byte ptr [esp+0x84],bl
	call IWzFont::Create
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0x74],0x1D
	jne Block200

 Block198:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	cmp eax,edi
	je Block201

 Block199:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block201

 Block200:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block201:
	mov esi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x74],0
	cmp esi,edi
	je Block209

 Block202:
	lea edx,[esi+8]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	cmp eax,edi
	jne Block209

 Block203:
	cmp esi,edi
	je Block209

 Block204:
	mov eax,dword ptr [esi]
	cmp eax,edi
	je Block206

 Block205:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block206:
	mov eax,dword ptr [esi+4]
	cmp eax,edi
	je Block208

 Block207:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block208:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block209:
	mov dword ptr [esp+0x18],edi
	push 0x14
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	mov byte ptr [esp+0x78],0x20
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	cmp eax,edi
	je Block211

 Block210:
	xor ecx,ecx
	mov dword ptr [eax+4],ecx
	mov dword ptr [eax+8],ecx
	mov ebx,eax
	int 3// TODO: 	mov dword ptr [eax],offset CTextAnalyzer::`vftable'
	mov dword ptr [eax+0x10],0x109
	mov dword ptr [eax+0xC],1
	mov dword ptr [esp+0x20],ebx
	jmp Block212

 Block211:
	mov dword ptr [esp+0x20],edi
	mov ebx,edi

 Block212:
	mov dword ptr [esp+0x30],ebx
	cmp ebx,edi
	je Block214

 Block213:
	lea eax,[ebx+4]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block214:
	xor ebp,ebp
	push ebp
	push ebp
	push ebp
	lea ecx,[esp+0x20]
	push ecx
	lea edx,[esp+0x28]
	push edx
	mov edx,dword ptr [esp+0x98]
	push ecx
	mov edi,esp
	mov byte ptr [esp+0x8C],0x21
	mov dword ptr [esp+0x34],esp
	mov dword ptr [edi],ebp
	cmp edx,ebp
	je Block219

 Block215:
	mov eax,edx
	lea esi,[eax+1]
	jmp Block217

 Block217:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block217

 Block218:
	sub eax,esi
	mov esi,eax
	push esi
	push edx
	push ebp
	push esi
	mov ecx,edi
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	mov ecx,edi
	call ZXString<char>::ReleaseBuffer

 Block219:
	mov ecx,ebx
	call CTextAnalyzer::AnalyzeText
	mov dword ptr [esp+0x1C],ebp
	mov dword ptr [esp+0x84],ebp
	mov ebp,dword ptr [esp+0x28]
	xor edi,edi
	mov bl,0x22

 Block220:
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	je Block231

 Block221:
	mov ecx,dword ptr [esp+0x84]
	cmp ecx,dword ptr [eax-4]
	jae Block231

 Block222:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block223:
	mov edx,dword ptr [esp+0x18]
	mov eax,dword ptr [edi+edx+0x10]
	lea ecx,[esp+0x3C]
	push ecx
	push ecx
	mov dword ptr [esp+0x30],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x80],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x954]
	mov byte ptr [esp+0x7C],0x23
	test ecx,ecx
	je Block7

 Block224:
	mov byte ptr [esp+0x7C],bl
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x3C],8
	lea esi,[eax+0x10]
	mov byte ptr [esp+0x74],0x21
	jne Block227

 Block225:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	test eax,eax
	je Block228

 Block226:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block228

 Block227:
	lea ecx,[esp+0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block228:
	cmp esi,dword ptr [esp+0x1C]
	jle Block230

 Block229:
	mov dword ptr [esp+0x1C],esi

 Block230:
	inc dword ptr [esp+0x84]
	add edi,0x44
	jmp Block220

 Block231:
	mov esi,dword ptr [ebp+0x954]
	xor edi,edi
	cmp esi,edi
	jne Block233

 Block232:
	push 0x80004003
	call _com_issue_error

 Block233:
	mov edx,dword ptr [esi]
	mov ecx,dword ptr [edx+0x14]
	lea eax,[esp+0x84]
	push eax
	push esi
	mov dword ptr [esp+0x8C],edi
	call ecx
	cmp eax,edi
	jge Block235

 Block234:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block235:
	mov eax,dword ptr [esp+0x18]
	cmp eax,edi
	jne Block237

 Block236:
	xor eax,eax
	jmp Block238

 Block237:
	mov eax,dword ptr [eax-4]

 Block238:
	imul eax,dword ptr [esp+0x84]
	mov edx,dword ptr [esp+0x1C]
	push 0xFFFFFFFF
	add eax,0x10
	push eax
	push edx
	push 1
	mov ecx,ebp
	call CUIToolTip::SetBasicInfo
	mov eax,dword ptr [esp+0x80]
	mov ecx,dword ptr [esp+0x7C]
	push edi
	push 0xCC0E395A
	push edi
	push edi
	push edi
	push eax
	push ecx
	lea edx,[esp+0x40]
	push edx
	mov ecx,ebp
	call CUIToolTip::MakeLayer
	xor esi,esi
	mov byte ptr [esp+0x74],0x24
	mov dword ptr [esp+0x84],edi
	lea ebx,[esi+8]
	lea esp,[esp]

 Block239:
	mov eax,dword ptr [esp+0x18]
	test eax,eax
	je Block259

 Block240:
	mov ecx,dword ptr [esp+0x84]
	cmp ecx,dword ptr [eax-4]
	jae Block259

 Block241:
	lea edx,[esp+0x3C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x3C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block242:
	mov edx,dword ptr [esp+0x18]
	mov eax,dword ptr [esi+edx+0x10]
	lea ecx,[esp+0x3C]
	push ecx
	push ecx
	mov dword ptr [esp+0x88],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x80],0x25
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [ebp+0x954]
	mov byte ptr [esp+0x7C],0x26
	test ecx,ecx
	je Block7

 Block243:
	mov byte ptr [esp+0x7C],0x25
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x3C],8
	mov edi,eax
	mov byte ptr [esp+0x74],0x24
	jne Block246

 Block244:
	xor eax,eax
	mov word ptr [esp+0x3C],ax
	mov eax,dword ptr [esp+0x44]
	test eax,eax
	je Block247

 Block245:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block247

 Block246:
	lea ecx,[esp+0x3C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block247:
	lea edx,[esp+0x5C]
	push edx
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x5C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block248:
	lea ecx,[esp+0x4C]
	push ecx
	mov byte ptr [esp+0x78],0x27
	call dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x4C]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block5

 Block249:
	mov edx,dword ptr [esp+0x18]
	lea eax,[esp+0x5C]
	push eax
	mov eax,dword ptr [ebp+0x954]
	lea ecx,[esp+0x50]
	push ecx
	push eax
	mov eax,dword ptr [esi+edx+0x10]
	push ecx
	mov dword ptr [esp+0x90],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0x88],0x28
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x34]
	mov byte ptr [esp+0x84],0x29
	test ecx,ecx
	je Block7

 Block250:
	mov eax,dword ptr [esp+0x2C]
	sub eax,edi
	cdq
	sub eax,edx
	push ebx
	sar eax,1
	push eax
	mov byte ptr [esp+0x8C],0x28
	call IWzCanvas::DrawTextA
	cmp word ptr [esp+0x4C],8
	mov byte ptr [esp+0x74],0x27
	jne Block253

 Block251:
	xor eax,eax
	mov word ptr [esp+0x4C],ax
	mov eax,dword ptr [esp+0x54]
	test eax,eax
	je Block254

 Block252:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block254

 Block253:
	lea ecx,[esp+0x4C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block254:
	cmp word ptr [esp+0x5C],8
	mov byte ptr [esp+0x74],0x24
	jne Block257

 Block255:
	mov eax,dword ptr [esp+0x64]
	xor edx,edx
	mov word ptr [esp+0x5C],dx
	test eax,eax
	je Block258

 Block256:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	inc dword ptr [esp+0x84]
	add esi,0x44
	add ebx,0xC
	jmp Block239

 Block257:
	lea eax,[esp+0x5C]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block258:
	inc dword ptr [esp+0x84]
	add esi,0x44
	add ebx,0xC
	jmp Block239

 Block259:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x74],0x21
	test eax,eax
	je Block261

 Block260:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block261:
	mov edi,dword ptr [esp+0x20]
	mov byte ptr [esp+0x74],0x20
	test edi,edi
	je Block264

 Block262:
	lea esi,[edi+4]
	push esi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block264

 Block263:
	push esi
	call dword ptr [ZImports::_InterlockedIncrement]
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax]
	push 1
	mov ecx,edi
	call edx

 Block264:
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x74],0
	call ZArray<CT_INFO>::RemoveAll
	lea ecx,[esp+0x14]
	mov dword ptr [esp+0x74],0xFFFFFFFF
	call ZArray<_x_com_ptr<IWzFont>>::RemoveAll
	mov ecx,dword ptr [esp+0x6C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x64
	ret 0xC
}
}
// CUIToolTip::SetToolTip_EquipExt
_SUB_EXCEPTION_HANDLER(49DCF0)
__SUB_CLASS_THIS(0049DCF0, __thiscall, 5732,  CUIToolTip, void, long, long, NakedParam<ZRef<CS_COMMODITY>>, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_49DCF0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x40
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x54]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x2C]
	xor ebp,ebp
	push eax
	mov dword ptr [esp+0x60],ebp
	call CWvsContext::GetCharacterData
	mov ebx,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x30]
	cmp eax,ebp
	je Block5

 Block1:
	lea edi,[eax-0x10]
	lea ebp,[edi+4]
	push ebp
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block4

 Block2:
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]
	test edi,edi
	je Block4

 Block3:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,edi
	call eax

 Block4:
	mov dword ptr [esp+0x30],0
	xor ebp,ebp

 Block5:
	mov dword ptr [esp+0x14],ebp
	mov dword ptr [esp+0x18],ebp
	mov ecx,dword ptr [esp+0x70]
	add ecx,0x10
	mov byte ptr [esp+0x5C],2
	call TSecType<long>::GetData
	push eax
	lea ecx,[esp+0x28]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemName
	push eax
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x60],3
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x5C],2
	cmp eax,ebp
	je Block7

 Block6:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block7:
	mov edi,dword ptr [esp+0x74]
	lea edx,[esp+0x44]
	push edx
	lea eax,[ebx+edi*8+0x519]
	push eax
	call FileTimeToSystemTime
	call Util::FTGetNow
	mov ecx,edi
	mov dword ptr [esp+0x24],eax
	mov dword ptr [esp+0x28],edx
	test ecx,ecx
	ja Block10

 Block8:
	lea edx,[esp+0x24]
	push edx
	lea eax,[ebx+edi*8+0x519]
	push eax
	call dword ptr [ZImports::_CompareFileTime]
	test eax,eax
	jge Block10

 Block9:
	lea ecx,[esp+0x74]
	push 0x1475
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	lea ecx,[esp+0x18]
	mov byte ptr [esp+0x60],4
	call ZXString<char>::op_assign
	jmp Block11

 Block10:
	lea edx,[esp+0x74]
	push 0x1476
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,word ptr [esp+0x4E]
	movzx edx,word ptr [esp+0x4C]
	mov eax,dword ptr [eax]
	push ecx
	movzx ecx,word ptr [esp+0x4E]
	push edx
	movzx edx,word ptr [esp+0x4E]
	push ecx
	movzx ecx,word ptr [esp+0x50]
	push edx
	push ecx
	push eax
	lea edx,[esp+0x2C]
	push edx
	mov byte ptr [esp+0x78],5
	call ZXString<char>::Format
	add esp,0x1C

 Block11:
	mov eax,dword ptr [esp+0x74]
	mov byte ptr [esp+0x5C],2
	cmp eax,ebp
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	mov eax,dword ptr [esp+0x70]
	mov edi,dword ptr [esp+0x18]
	mov ecx,dword ptr [eax+0x20]
	mov edx,dword ptr [eax+0x70]
	mov dword ptr [esp+0x24],ecx
	mov dword ptr [esp+0x20],edx
	mov dword ptr [esp+0x1C],0x122
	mov ebp,0xE
	test edi,edi
	je Block33

 Block14:
	cmp byte ptr [edi],0
	je Block33

 Block15:
	lea eax,[esp+0x34]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block17

 Block16:
	push eax
	call _com_issue_error

 Block17:
	lea edx,[esp+0x34]
	push edx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	mov bl,6
	push edi
	mov byte ptr [esp+0x68],bl
	call _xbstr_t::_ctor_0
	push 1
	lea eax,[esp+0x80]
	push eax
	mov ecx,esi
	mov byte ptr [esp+0x6C],7
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x64],8
	test ecx,ecx
	jne Block19

 Block18:
	push 0x80004003
	call _com_issue_error

 Block19:
	mov byte ptr [esp+0x64],9
	call IWzFont::CalcTextWidth
	lea edi,[eax+0x10]
	mov eax,dword ptr [esp+0x74]
	mov byte ptr [esp+0x5C],bl
	test eax,eax
	je Block21

 Block20:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block21:
	cmp word ptr [esp+0x34],8
	mov byte ptr [esp+0x5C],2
	jne Block24

 Block22:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	test eax,eax
	je Block25

 Block23:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block25

 Block24:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block25:
	cmp edi,0x122
	jle Block27

 Block26:
	mov dword ptr [esp+0x1C],edi

 Block27:
	push 1
	lea edx,[esp+0x30]
	push edx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov edi,dword ptr [eax]
	mov byte ptr [esp+0x5C],0xA
	test edi,edi
	jne Block29

 Block28:
	push 0x80004003
	call _com_issue_error

 Block29:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x14]
	lea ecx,[esp+0x74]
	push ecx
	push edi
	mov dword ptr [esp+0x7C],0
	call edx
	test eax,eax
	jge Block31

 Block30:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push edi
	push eax
	call _com_issue_errorex

 Block31:
	mov ebp,dword ptr [esp+0x74]
	mov eax,dword ptr [esp+0x2C]
	add ebp,0x16
	mov byte ptr [esp+0x5C],2
	test eax,eax
	je Block33

 Block32:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block33:
	mov edi,dword ptr [esp+0x14]
	test edi,edi
	je Block36

 Block34:
	cmp byte ptr [edi],0
	je Block36

 Block35:
	push 1
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x84],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	push edi
	push ebp
	push 0x113
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	add ebp,eax
	jmp Block37

 Block36:
	sub ebp,4

 Block37:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block40

 Block38:
	cmp eax,dword ptr [esp+0x24]
	je Block40

 Block39:
	mov eax,0x33
	jmp Block41

 Block40:
	xor eax,eax

 Block41:
	mov ecx,dword ptr [esp+0x1C]
	push 0xFFFFFFFF
	add eax,ebp
	push eax
	push ecx
	push 0xA
	mov ecx,esi
	call CUIToolTip::SetBasicInfo
	mov edx,dword ptr [esp+0x68]
	mov eax,dword ptr [esp+0x64]
	push 0
	push 0xCC0E395A
	push 0
	push 0
	push 1
	push edx
	push eax
	lea ecx,[esp+0x90]
	push ecx
	mov ecx,esi
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x74]
	test eax,eax
	je Block43

 Block42:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block43:
	mov ebx,dword ptr [esp+0x18]
	mov edi,0xA
	test ebx,ebx
	je Block51

 Block44:
	cmp byte ptr [ebx],0
	je Block51

 Block45:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x78],esp
	push 1
	push ecx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	push ebx
	push edi
	mov ecx,esi
	call CUIToolTip::DrawTextCenter
	push 1
	lea edx,[esp+0x6C]
	push edx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov edi,dword ptr [eax]
	mov byte ptr [esp+0x5C],0xB
	test edi,edi
	jne Block47

 Block46:
	push 0x80004003
	call _com_issue_error

 Block47:
	mov eax,dword ptr [edi]
	mov edx,dword ptr [eax+0x14]
	lea ecx,[esp+0x74]
	push ecx
	push edi
	mov dword ptr [esp+0x7C],0
	call edx
	test eax,eax
	jge Block49

 Block48:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push edi
	push eax
	call _com_issue_errorex

 Block49:
	mov edi,dword ptr [esp+0x74]
	mov eax,dword ptr [esp+0x68]
	add edi,0x12
	mov byte ptr [esp+0x5C],2
	test eax,eax
	je Block51

 Block50:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block51:
	mov eax,dword ptr [esp+0x14]
	test eax,eax
	je Block54

 Block52:
	cmp byte ptr [eax],0
	je Block54

 Block53:
	push 1
	push 0
	push 1
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x74],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x24]
	push ecx
	push edi
	push 0x113
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine

 Block54:
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block57

 Block55:
	mov ecx,dword ptr [esp+0x24]
	cmp eax,ecx
	je Block57

 Block56:
	push ecx
	push eax
	add ebp,8
	push ebp
	mov ecx,esi
	call CUIToolTip::DrawDiscount_Info

 Block57:
	mov byte ptr [esp+0x5C],1
	test ebx,ebx
	je Block59

 Block58:
	add ebx,0xFFFFFFF4
	push ebx
	call ZXString<char>::_Release
	add esp,4

 Block59:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x5C],0
	test eax,eax
	je Block61

 Block60:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block61:
	mov eax,dword ptr [esp+0x70]
	mov dword ptr [esp+0x5C],0xFFFFFFFF
	test eax,eax
	je Block65

 Block62:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block65

 Block63:
	mov edx,dword ptr [esp+0x70]
	add edx,4
	push edx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x70]
	test ecx,ecx
	je Block65

 Block64:
	mov eax,dword ptr [ecx]
	mov edx,dword ptr [eax]
	push 1
	call edx

 Block65:
	mov ecx,dword ptr [esp+0x54]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x4C
	ret 0x14
}
}
// CUIToolTip::SetToolTip_SlotInc
_SUB_EXCEPTION_HANDLER(49D5F0)
__SUB_CLASS_THIS(0049D5F0, __thiscall, 5732,  CUIToolTip, void, long, long, NakedParam<ZRef<CS_COMMODITY>>, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_49D5F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x30
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x44]
	mov dword ptr fs:[0],eax
	mov dword ptr [esp+0x14],ecx
	xor ebx,ebx
	test byte ptr [_D__S4__1],1
	mov dword ptr [esp+0x4C],ebx
	jne Block2

 Block1:
	or dword ptr [_D__S4__1],1
	push ebx
	push offset _S_
	push ebx
	push ebx
	mov ecx,offset _D_S_ASCATEGORY
	mov byte ptr [esp+0x5C],1
	mov dword ptr [_D_S_ASCATEGORY],ebx
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push ebx
	mov ecx,offset _D_S_ASCATEGORY
	call ZXString<char>::ReleaseBuffer
	push 0xA
	push offset _D_S_ASCATEGORY+4
	mov byte ptr [esp+0x54],2
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0x1A87
	push offset _D_S_ASCATEGORY+8
	mov byte ptr [esp+0x54],3
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xB
	push offset _D_S_ASCATEGORY+12
	mov byte ptr [esp+0x54],4
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0x1A38
	push offset _D_S_ASCATEGORY+16
	mov byte ptr [esp+0x54],5
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push 0xB12EA0
	call _atexit
	add esp,4
	mov byte ptr [esp+0x4C],bl

 Block2:
	mov ecx,dword ptr [TSingleton<CWvsContext>::ms_pInstance]
	lea eax,[esp+0x2C]
	push eax
	call CWvsContext::GetCharacterData
	mov ebp,dword ptr [eax+4]
	mov eax,dword ptr [esp+0x30]
	cmp eax,ebx
	je Block7

 Block3:
	lea esi,[eax-0x10]
	lea edi,[esi+4]
	push edi
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block6

 Block4:
	push edi
	call dword ptr [ZImports::_InterlockedIncrement]
	cmp esi,ebx
	je Block6

 Block5:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx]
	push 1
	mov ecx,esi
	call eax

 Block6:
	mov dword ptr [esp+0x30],ebx

 Block7:
	mov dword ptr [esp+0x1C],ebx
	mov dword ptr [esp+0x18],ebx
	mov ecx,dword ptr [esp+0x60]
	add ecx,0x10
	mov byte ptr [esp+0x4C],7
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x10624DD3
	imul ecx
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cdq
	mov ecx,0xA
	idiv ecx
	mov ecx,dword ptr [esp+0x60]
	add ecx,0x10
	mov edi,edx
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	call CItemInfo::GetSlotIncDelta
	mov ecx,dword ptr [esp+0x60]
	add ecx,0x10
	mov esi,eax
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0x2C]
	push edx
	call CItemInfo::GetSpecialName
	push eax
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x50],8
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x4C],7
	cmp eax,ebx
	je Block9

 Block8:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block9:
	mov ecx,dword ptr [esp+0x60]
	add ecx,0x10
	call TSecType<long>::GetData
	mov ecx,eax
	mov eax,0x10624DD3
	imul ecx
	mov ecx,dword ptr [esp+0x60]
	sar edx,6
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	add ecx,0x10
	cmp eax,0x1536
	jne Block13

 Block10:
	call TSecType<long>::GetData
	push eax
	lea ecx,[esp+0x2C]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemName
	push eax
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x50],9
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0x4C],7
	cmp eax,ebx
	je Block12

 Block11:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block12:
	lea edx,[esp+0x28]
	push 0x256
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x64]
	push 0xF
	mov byte ptr [esp+0x50],0xA
	push ecx
	jmp Block24

 Block13:
	call TSecType<long>::GetData
	cmp eax,0x52DED8
	je Block15

 Block14:
	cmp eax,0x52E2C0
	jne Block18

 Block15:
	mov ecx,dword ptr [esp+0x60]
	add ecx,0x10
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0x68]
	push eax
	call CItemInfo::GetItemName
	push eax
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x50],0xB
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0x4C],7
	cmp eax,ebx
	je Block17

 Block16:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block17:
	mov ecx,dword ptr [esp+0x60]
	add ecx,0x10
	call TSecType<long>::GetData
	push eax
	lea ecx,[esp+0x68]
	push ecx
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	call CItemInfo::GetItemDesc
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x50],0xC
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x64]
	jmp Block25

 Block18:
	cmp edi,ebx
	je Block23

 Block19:
	lea edx,[esp+0x64]
	push 0x255
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	lea ecx,[edi*4]
	mov edx,dword ptr [ecx+ebp+0x501]
	mov byte ptr [esp+0x4C],0xD
	cmp edx,ebx
	jne Block21

 Block20:
	xor edx,edx
	jmp Block22

 Block21:
	mov edx,dword ptr [edx-4]

 Block22:
	mov ecx,dword ptr [ecx+_D_S_ASCATEGORY]
	mov eax,dword ptr [eax]
	push 0x60
	dec edx
	push edx
	push ecx
	push esi
	push eax
	lea edx,[esp+0x30]
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x7C]
	add esp,0x18
	jmp Block25

 Block23:
	lea eax,[esp+0x28]
	push 0x252
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x64]
	push ecx
	mov byte ptr [esp+0x50],0xE
	push esi

 Block24:
	mov eax,dword ptr [eax]
	push eax
	lea edx,[esp+0x28]
	push edx
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x38]
	add esp,0x10

 Block25:
	mov byte ptr [esp+0x4C],7
	cmp eax,ebx
	je Block27

 Block26:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block27:
	mov eax,dword ptr [esp+0x60]
	mov esi,dword ptr [esp+0x18]
	mov ecx,dword ptr [eax+0x20]
	mov edx,dword ptr [eax+0x70]
	mov dword ptr [esp+0x28],ecx
	mov dword ptr [esp+0x24],edx
	mov dword ptr [esp+0x20],0x122
	mov edi,0xE
	cmp esi,ebx
	je Block47

 Block28:
	cmp byte ptr [esi],bl
	je Block47

 Block29:
	lea eax,[esp+0x34]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebx
	jge Block31

 Block30:
	push eax
	call _com_issue_error

 Block31:
	lea edx,[esp+0x34]
	push edx
	push ecx
	mov dword ptr [esp+0x34],esp
	mov ecx,esp
	push esi
	mov byte ptr [esp+0x58],0xF
	call _xbstr_t::_ctor_0
	mov edi,dword ptr [esp+0x1C]
	push 1
	lea eax,[esp+0x70]
	push eax
	mov ecx,edi
	mov byte ptr [esp+0x5C],0x10
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x54],0x11
	cmp ecx,ebx
	jne Block33

 Block32:
	push 0x80004003
	call _com_issue_error

 Block33:
	mov byte ptr [esp+0x54],0x12
	call IWzFont::CalcTextWidth
	lea esi,[eax+0x10]
	mov eax,dword ptr [esp+0x64]
	mov byte ptr [esp+0x4C],0xF
	cmp eax,ebx
	je Block35

 Block34:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block35:
	cmp word ptr [esp+0x34],8
	mov byte ptr [esp+0x4C],7
	jne Block38

 Block36:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	cmp eax,ebx
	je Block39

 Block37:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block39

 Block38:
	lea ecx,[esp+0x34]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block39:
	cmp esi,0x122
	jle Block41

 Block40:
	mov dword ptr [esp+0x20],esi

 Block41:
	push 1
	lea edx,[esp+0x30]
	push edx
	mov ecx,edi
	call CUIToolTip::GetFontByType
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x4C],0x13
	cmp esi,ebx
	jne Block43

 Block42:
	push 0x80004003
	call _com_issue_error

 Block43:
	mov eax,dword ptr [esi]
	mov edx,dword ptr [eax+0x14]
	lea ecx,[esp+0x64]
	push ecx
	push esi
	mov dword ptr [esp+0x6C],ebx
	call edx
	cmp eax,ebx
	jge Block45

 Block44:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block45:
	mov edi,dword ptr [esp+0x64]
	mov eax,dword ptr [esp+0x2C]
	add edi,0x16
	mov byte ptr [esp+0x4C],7
	cmp eax,ebx
	je Block47

 Block46:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block47:
	mov ebp,dword ptr [esp+0x1C]
	cmp ebp,ebx
	je Block50

 Block48:
	cmp byte ptr [ebp],bl
	je Block50

 Block49:
	mov esi,dword ptr [esp+0x14]
	push 1
	push ebx
	push ebx
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x74],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	push ebp
	push edi
	push 0x113
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	add edi,eax
	jmp Block51

 Block50:
	mov esi,dword ptr [esp+0x14]
	sub edi,4

 Block51:
	mov eax,dword ptr [esp+0x24]
	cmp eax,ebx
	je Block54

 Block52:
	cmp eax,dword ptr [esp+0x28]
	je Block54

 Block53:
	mov eax,0x33
	jmp Block55

 Block54:
	xor eax,eax

 Block55:
	mov ecx,dword ptr [esp+0x20]
	push 0xFFFFFFFF
	add eax,edi
	push eax
	push ecx
	push 0xA
	mov ecx,esi
	call CUIToolTip::SetBasicInfo
	mov edx,dword ptr [esp+0x58]
	mov eax,dword ptr [esp+0x54]
	push ebx
	push 0xCC0E395A
	push ebx
	push ebx
	push 1
	push edx
	push eax
	lea ecx,[esp+0x80]
	push ecx
	mov ecx,esi
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x64]
	cmp eax,ebx
	je Block57

 Block56:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block57:
	mov eax,dword ptr [esp+0x18]
	mov esi,0xA
	cmp eax,ebx
	je Block65

 Block58:
	cmp byte ptr [eax],bl
	je Block65

 Block59:
	mov esi,dword ptr [esp+0x14]
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x68],esp
	push 1
	push ecx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [esp+0x1C]
	push edx
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextCenter
	push 1
	lea eax,[esp+0x5C]
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov esi,dword ptr [eax]
	mov byte ptr [esp+0x4C],0x14
	cmp esi,ebx
	jne Block61

 Block60:
	push 0x80004003
	call _com_issue_error

 Block61:
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x14]
	lea edx,[esp+0x64]
	push edx
	push esi
	mov dword ptr [esp+0x6C],ebx
	call eax
	cmp eax,ebx
	jge Block63

 Block62:
	push offset __GUID_2bef046d_ccd6_445a_88c4_929fc35d30ac
	push esi
	push eax
	call _com_issue_errorex

 Block63:
	mov esi,dword ptr [esp+0x64]
	mov eax,dword ptr [esp+0x58]
	add esi,0x12
	mov byte ptr [esp+0x4C],7
	cmp eax,ebx
	je Block65

 Block64:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block65:
	cmp ebp,ebx
	je Block68

 Block66:
	cmp byte ptr [ebp],bl
	je Block68

 Block67:
	push 1
	push ebx
	push 1
	push ecx
	mov ecx,dword ptr [esp+0x24]
	mov eax,esp
	mov dword ptr [esp+0x64],esp
	push 0xA
	push eax
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x24]
	push ebp
	push esi
	push 0x113
	push 0xA
	call CUIToolTip::DrawTextSepartedLine

 Block68:
	mov eax,dword ptr [esp+0x24]
	cmp eax,ebx
	je Block71

 Block69:
	mov ecx,dword ptr [esp+0x28]
	cmp eax,ecx
	je Block71

 Block70:
	push ecx
	mov ecx,dword ptr [esp+0x18]
	push eax
	add edi,8
	push edi
	call CUIToolTip::DrawDiscount_Info

 Block71:
	mov eax,dword ptr [esp+0x18]
	mov byte ptr [esp+0x4C],6
	cmp eax,ebx
	je Block73

 Block72:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block73:
	mov byte ptr [esp+0x4C],bl
	cmp ebp,ebx
	je Block75

 Block74:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block75:
	mov eax,dword ptr [esp+0x60]
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	cmp eax,ebx
	je Block79

 Block76:
	add eax,4
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block79

 Block77:
	mov ecx,dword ptr [esp+0x60]
	add ecx,4
	push ecx
	call dword ptr [ZImports::_InterlockedIncrement]
	mov ecx,dword ptr [esp+0x60]
	cmp ecx,ebx
	je Block79

 Block78:
	mov edx,dword ptr [ecx]
	mov eax,dword ptr [edx]
	push 1
	call eax

 Block79:
	mov ecx,dword ptr [esp+0x44]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x3C
	ret 0x14
}
}
// CUIToolTip::GetPetDeadDate
_SUB_EXCEPTION_HANDLER(489540)
__SUB_CLASS_THIS(00489540, __thiscall, 5799,  CUIToolTip, void, GW_ItemSlotPet*, int32_t, ZXString<char>&) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_489540
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x18
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x2C]
	mov dword ptr fs:[0],eax
	mov ebp,dword ptr [esp+0x44]
	mov eax,dword ptr [ebp]
	xor ebx,ebx
	cmp eax,ebx
	je Block2

 Block1:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [ebp],ebx

 Block2:
	mov edi,dword ptr [esp+0x3C]
	mov ecx,dword ptr [edi+0x59]
	or ecx,dword ptr [edi+0x5D]
	lea eax,[edi+0x59]
	mov dword ptr [esp+0x3C],eax
	jne Block4

 Block3:
	cmp dword ptr [esp+0x40],ebx
	je Block41

 Block4:
	lea ecx,[edi+0xC]
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea edx,[esp+0x18]
	push edx
	call CItemInfo::GetItemInfo
	mov ecx,dword ptr [esp+0x14]
	cmp ecx,ebx
	sete al
	mov dword ptr [esp+0x34],ebx
	cmp al,bl
	je Block7

 Block5:
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp ecx,ebx
	je Block41

 Block6:
	mov eax,dword ptr [ecx]
	push ecx
	mov ecx,dword ptr [eax+8]
	call ecx
	jmp Block41

 Block7:
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x20],esp
	push 0x781
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x3C],1
	cmp ecx,ebx
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	lea eax,[esp+0x24]
	push eax
	mov byte ptr [esp+0x40],bl
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0x3C],2
	call get_int32
	add esp,8
	cmp word ptr [esp+0x1C],8
	mov esi,eax
	mov byte ptr [esp+0x34],bl
	jne Block12

 Block10:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	cmp eax,ebx
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block13:
	cmp esi,ebx
	jle Block15

 Block14:
	mov eax,dword ptr [edi+0x69]
	push eax
	lea esi,[edi+0x61]
	push esi
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	mov eax,0x88888889
	imul ecx
	add edx,ecx
	sar edx,5
	mov eax,edx
	shr eax,0x1F
	add eax,edx
	cdq
	mov ecx,0x3C
	idiv ecx
	mov ebp,edx
	mov edx,dword ptr [edi+0x69]
	push edx
	push esi
	call _ZtlSecureFuseHelper<long>::call
	mov ecx,eax
	mov eax,0x88888889
	imul ecx
	add edx,ecx
	sar edx,5
	mov ecx,edx
	shr ecx,0x1F
	add ecx,edx
	mov eax,0x88888889
	imul ecx
	add edx,ecx
	sar edx,5
	add esp,0x10
	mov esi,edx
	lea eax,[esp+0x40]
	push 0x2B6
	shr esi,0x1F
	push eax
	add esi,edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	mov ecx,dword ptr [esp+0x44]
	push ebp
	push esi
	push eax
	push ecx
	mov byte ptr [esp+0x44],3
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x50]
	add esp,0x10
	jmp Block37

 Block15:
	cmp dword ptr [esp+0x40],ebx
	je Block29

 Block16:
	push ebx
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x4C],esp
	push 0x77E
	push edx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x3C],4
	cmp ecx,ebx
	jne Block18

 Block17:
	push 0x80004003
	call _com_issue_error

 Block18:
	lea eax,[esp+0x24]
	push eax
	mov byte ptr [esp+0x40],bl
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0x3C],5
	call get_int32
	add esp,8
	cmp word ptr [esp+0x1C],8
	mov esi,eax
	mov byte ptr [esp+0x34],bl
	jne Block21

 Block19:
	mov eax,dword ptr [esp+0x24]
	xor ecx,ecx
	mov word ptr [esp+0x1C],cx
	cmp eax,ebx
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea edx,[esp+0x1C]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block22:
	cmp esi,ebx
	je Block24

 Block23:
	lea eax,[esp+0x44]
	push 0x77F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	push ebp
	mov byte ptr [esp+0x3C],6
	call ZXString<char>::Format
	add esp,8
	jmp Block36

 Block24:
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x48],esp
	push 0x77D
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x3C],7
	cmp ecx,ebx
	jne Block26

 Block25:
	push 0x80004003
	call _com_issue_error

 Block26:
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x40],bl
	call IWzProperty::Getitem
	mov esi,eax
	lea eax,[esp+0x48]
	push 0x2B5
	push eax
	mov byte ptr [esp+0x40],8
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edi,dword ptr [eax]
	push esi
	mov byte ptr [esp+0x3C],9
	call get_int32
	push eax
	push edi
	push ebp
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x58]
	add esp,0x14
	mov byte ptr [esp+0x34],8
	cmp eax,ebx
	je Block28

 Block27:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block28:
	lea ecx,[esp+0x1C]
	call Ztl_variant_t::~Ztl_variant_t
	jmp Block39

 Block29:
	mov ecx,edi
	call GW_ItemSlotPet::IsDead
	test eax,eax
	je Block31

 Block30:
	lea eax,[esp+0x44]
	push 0x2B7
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	push eax
	mov ecx,ebp
	mov byte ptr [esp+0x38],0xA
	call ZXString<char>::op_assign
	jmp Block36

 Block31:
	push ebx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x4C],esp
	push 0x77E
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov ecx,dword ptr [esp+0x1C]
	mov byte ptr [esp+0x3C],0xB
	cmp ecx,ebx
	jne Block33

 Block32:
	push 0x80004003
	call _com_issue_error

 Block33:
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x40],bl
	call IWzProperty::Getitem
	push eax
	mov byte ptr [esp+0x3C],0xC
	call get_int32
	add esp,8
	lea ecx,[esp+0x1C]
	mov esi,eax
	mov byte ptr [esp+0x34],bl
	call Ztl_variant_t::~Ztl_variant_t
	cmp esi,ebx
	je Block35

 Block34:
	lea eax,[esp+0x44]
	push 0x77F
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push eax
	push ebp
	mov byte ptr [esp+0x3C],0xD
	call ZXString<char>::Format
	add esp,8
	jmp Block36

 Block35:
	mov edx,dword ptr [esp+0x3C]
	lea ecx,[esp+0x1C]
	push ecx
	push edx
	call FileTimeToSystemTime
	lea eax,[esp+0x44]
	push 0x2B8
	push eax
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	movzx ecx,word ptr [esp+0x24]
	movzx edx,word ptr [esp+0x1C]
	mov eax,dword ptr [eax]
	push ecx
	movzx ecx,word ptr [esp+0x26]
	push edx
	movzx edx,word ptr [esp+0x26]
	push ecx
	push edx
	push eax
	push ebp
	mov byte ptr [esp+0x4C],0xE
	call ZXString<char>::Format
	add esp,0x18

 Block36:
	mov eax,dword ptr [esp+0x44]

 Block37:
	mov byte ptr [esp+0x34],bl
	cmp eax,ebx
	je Block39

 Block38:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block39:
	mov eax,dword ptr [esp+0x14]
	mov dword ptr [esp+0x34],0xFFFFFFFF
	cmp eax,ebx
	je Block41

 Block40:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block41:
	mov ecx,dword ptr [esp+0x2C]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x24
	ret 0xC
}
}
// CUIToolTip::InitCanvas
_SUB_EXCEPTION_HANDLER(480960)
__SUB_CLASS_THIS(00480960, __thiscall, 5757,  CUIToolTip, void, NakedParam<_x_com_ptr<IWzCanvas>>, int32_t, unsigned long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_480960
	mov eax,dword ptr fs:[0]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x14]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x1C],0
	test eax,eax
	jne Block2

 Block1:
	push 0x80004003
	call _com_issue_error

 Block2:
	mov ebp,dword ptr [esp+0x2C]
	mov ecx,dword ptr [esi+8]
	mov edx,dword ptr [esi+0xC]
	mov ebx,dword ptr [eax]
	push ebp
	push ecx
	push edx
	push 0
	push 0
	mov edi,eax
	push eax
	mov eax,dword ptr [ebx+0x8C]
	call eax
	test eax,eax
	jge Block4

 Block3:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block4:
	mov eax,dword ptr [esp+0x24]
	test eax,eax
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+0x8C]
	push 0xFFFFFF
	push 1
	push 1
	push 0
	push 0
	push eax
	mov edi,eax
	call edx
	test eax,eax
	jge Block8

 Block7:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block8:
	mov ecx,dword ptr [esp+0x24]
	test ecx,ecx
	jne Block10

 Block9:
	push 0x80004003
	call _com_issue_error

 Block10:
	mov eax,dword ptr [esi+0xC]
	mov edx,dword ptr [ecx]
	push 0xFFFFFF
	push 1
	push 1
	dec eax
	push 0
	push eax
	mov eax,dword ptr [edx+0x8C]
	push ecx
	mov edi,ecx
	call eax
	test eax,eax
	jge Block12

 Block11:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block12:
	mov ecx,dword ptr [esp+0x24]
	test ecx,ecx
	jne Block14

 Block13:
	push 0x80004003
	call _com_issue_error

 Block14:
	mov eax,dword ptr [esi+8]
	mov edx,dword ptr [ecx]
	push 0xFFFFFF
	push 1
	push 1
	dec eax
	push eax
	mov eax,dword ptr [edx+0x8C]
	push 0
	push ecx
	mov edi,ecx
	call eax
	test eax,eax
	jge Block16

 Block15:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block16:
	mov edx,dword ptr [esp+0x24]
	test edx,edx
	jne Block18

 Block17:
	push 0x80004003
	call _com_issue_error

 Block18:
	mov eax,dword ptr [esi+8]
	mov ecx,dword ptr [esi+0xC]
	mov ebx,dword ptr [edx]
	push 0xFFFFFF
	push 1
	push 1
	dec eax
	dec ecx
	push eax
	push ecx
	mov ecx,dword ptr [ebx+0x8C]
	push edx
	mov edi,edx
	call ecx
	test eax,eax
	jge Block20

 Block19:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block20:
	cmp dword ptr [esp+0x28],0
	je Block37

 Block21:
	mov ecx,dword ptr [esp+0x24]
	test ecx,ecx
	jne Block23

 Block22:
	push 0x80004003
	call _com_issue_error

 Block23:
	mov eax,dword ptr [esi+8]
	mov edx,dword ptr [ecx]
	push 0xFFFFFF
	sub eax,4
	push eax
	mov eax,dword ptr [edx+0x8C]
	push 1
	push 2
	push 1
	push ecx
	mov edi,ecx
	call eax
	test eax,eax
	jge Block25

 Block24:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block25:
	mov edx,dword ptr [esp+0x24]
	test edx,edx
	jne Block27

 Block26:
	push 0x80004003
	call _com_issue_error

 Block27:
	mov eax,dword ptr [esi+8]
	mov ecx,dword ptr [esi+0xC]
	mov ebx,dword ptr [edx]
	push 0xFFFFFF
	sub eax,4
	push eax
	push 1
	sub ecx,2
	push 2
	push ecx
	mov ecx,dword ptr [ebx+0x8C]
	push edx
	mov edi,edx
	call ecx
	test eax,eax
	jge Block29

 Block28:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block29:
	mov ecx,dword ptr [esp+0x24]
	test ecx,ecx
	jne Block31

 Block30:
	push 0x80004003
	call _com_issue_error

 Block31:
	mov eax,dword ptr [esi+0xC]
	mov edx,dword ptr [ecx]
	push 0xFFFFFF
	push 1
	sub eax,4
	push eax
	mov eax,dword ptr [edx+0x8C]
	push 1
	push 2
	push ecx
	mov edi,ecx
	call eax
	test eax,eax
	jge Block33

 Block32:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block33:
	mov ecx,dword ptr [esp+0x24]
	test ecx,ecx
	jne Block35

 Block34:
	push 0x80004003
	call _com_issue_error

 Block35:
	mov eax,dword ptr [esi+0xC]
	mov esi,dword ptr [esi+8]
	mov edx,dword ptr [ecx]
	push 0xFFFFFF
	push 1
	sub eax,4
	push eax
	mov eax,dword ptr [edx+0x8C]
	sub esi,2
	push esi
	push 2
	push ecx
	mov edi,ecx
	call eax
	test eax,eax
	jge Block37

 Block36:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push edi
	push eax
	call _com_issue_errorex

 Block37:
	mov eax,dword ptr [esp+0x24]
	mov dword ptr [esp+0x1C],0xFFFFFFFF
	test eax,eax
	je Block39

 Block38:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block39:
	mov ecx,dword ptr [esp+0x14]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xC
	ret 0xC
}
}
// CUIToolTip::SetToolTip_Pet
_SUB_EXCEPTION_HANDLER(498700)
__SUB_CLASS_THIS(00498700, __thiscall, 5721,  CUIToolTip, void, long, long, GW_ItemSlotPet*, int32_t, int32_t, const char*, long, long, CS_LIMITGOODS*, int32_t, long) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_498700
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x50
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x64]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor ebp,ebp
	cmp dword ptr [esi+0x10],ebp
	sete al
	test al,al
	sete al
	test al,al
	je Block3

 Block1:
	mov eax,dword ptr [esi+0x18]
	cmp eax,dword ptr [esp+0x74]
	jne Block3

 Block2:
	mov ecx,dword ptr [esi+0x1C]
	cmp ecx,dword ptr [esp+0x78]
	je Block113

 Block3:
	mov dword ptr [esp+0x28],ebp
	mov dword ptr [esp+0x6C],ebp
	mov dword ptr [esp+0x14],ebp
	mov ebx,dword ptr [esp+0x80]
	mov eax,dword ptr [esp+0x7C]
	lea edx,[esp+0x14]
	push edx
	push ebx
	push eax
	mov ecx,esi
	mov byte ptr [esp+0x78],1
	call CUIToolTip::GetPetDeadDate
	mov eax,dword ptr [esp+0x14]
	cmp eax,ebp
	je Block6

 Block4:
	cmp byte ptr [eax],0
	je Block6

 Block5:
	xor eax,eax
	jmp Block7

 Block6:
	mov eax,1

 Block7:
	mov edi,dword ptr [esp+0x88]
	neg eax
	sbb eax,eax
	and eax,0xFFFFFFF0
	add eax,0x10
	mov dword ptr [esp+0x18],eax
	cmp edi,ebp
	je Block14

 Block8:
	mov eax,edi
	lea edx,[eax+1]
	mov edi,edi

 Block9:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block9

 Block10:
	sub eax,edx
	je Block14

 Block11:
	lea ecx,[esp+0x80]
	push 0x2B0
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov eax,dword ptr [eax]
	push edi
	push eax
	lea edx,[esp+0x30]
	push edx
	mov byte ptr [esp+0x78],2
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x8C]
	add esp,0xC
	mov byte ptr [esp+0x6C],1
	cmp eax,ebp
	je Block13

 Block12:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block13:
	add dword ptr [esp+0x18],0x10

 Block14:
	mov dword ptr [esp+0x80],ebp
	mov edi,dword ptr [esp+0x7C]
	add edi,0xC
	mov ecx,edi
	mov byte ptr [esp+0x6C],3
	mov dword ptr [esp+0x20],edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0x20]
	push eax
	call CItemInfo::GetItemName
	mov byte ptr [esp+0x6C],4
	cmp ebx,ebp
	jne Block19

 Block15:
	mov ecx,dword ptr [esp+0x7C]
	call GW_ItemSlotPet::IsDead
	test eax,eax
	je Block19

 Block16:
	lea ecx,[esp+0x24]
	push 0x82A
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov ecx,dword ptr [esp+0x20]
	mov edi,dword ptr [eax]
	mov bl,5
	mov byte ptr [esp+0x6C],bl
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push edi
	push eax
	lea edx,[esp+0x90]
	push edx
	call CItemInfo::GetItemString
	push eax
	lea ecx,[esp+0x84]
	mov byte ptr [esp+0x70],6
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x88]
	mov byte ptr [esp+0x6C],bl
	cmp eax,ebp
	je Block18

 Block17:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block18:
	mov eax,dword ptr [esp+0x24]
	jmp Block20

 Block19:
	mov ecx,edi
	call TSecType<long>::GetData
	mov ecx,dword ptr [TSingleton<CItemInfo>::ms_pInstance]
	push eax
	lea eax,[esp+0x8C]
	push eax
	call CItemInfo::GetItemDesc
	push eax
	lea ecx,[esp+0x84]
	mov byte ptr [esp+0x70],7
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x88]

 Block20:
	mov byte ptr [esp+0x6C],4
	cmp eax,ebp
	je Block22

 Block21:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block22:
	mov eax,dword ptr [esp+0x1C]
	cmp eax,ebp
	je Block105

 Block23:
	cmp byte ptr [eax],0
	je Block104

 Block24:
	mov ecx,dword ptr [esp+0x20]
	call TSecType<long>::GetData
	push eax
	call CPetTemplate::GetPetTemplate
	mov ecx,dword ptr [esp+0x80]
	add ecx,0x28
	add esp,4
	mov ebx,eax
	mov dword ptr [esp+0x88],ebp
	cmp ecx,ebp
	je Block28

 Block25:
	mov eax,ecx
	lea edi,[eax+1]
	nop

 Block26:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block26

 Block27:
	sub eax,edi
	mov edi,eax
	push edi
	push ecx
	push ebp
	push edi
	lea ecx,[esp+0x98]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push edi
	lea ecx,[esp+0x8C]
	call ZXString<char>::ReleaseBuffer

 Block28:
	mov eax,dword ptr [ebx+4]
	push eax
	lea ecx,[esp+0x8C]
	mov byte ptr [esp+0x70],8
	call ZXString<char>::CompareNoCase
	test eax,eax
	je Block35

 Block29:
	push offset _S___18
	lea ecx,[esp+0x34]
	push ecx
	lea ecx,[esp+0x90]
	call ZXString<char>::op_add_0
	lea edx,[esp+0x1C]
	push edx
	lea ecx,[esp+0x30]
	push ecx
	mov bl,9
	mov ecx,eax
	mov byte ptr [esp+0x74],bl
	call ZXString<char>::op_add_1
	push offset _S___17
	lea edx,[esp+0x28]
	push edx
	mov ecx,eax
	mov byte ptr [esp+0x74],0xA
	call ZXString<char>::op_add_0
	push eax
	lea ecx,[esp+0x20]
	mov byte ptr [esp+0x70],0xB
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0x6C],0xA
	cmp eax,ebp
	je Block31

 Block30:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block31:
	mov eax,dword ptr [esp+0x2C]
	mov byte ptr [esp+0x6C],bl
	cmp eax,ebp
	je Block33

 Block32:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block33:
	mov eax,dword ptr [esp+0x30]
	mov byte ptr [esp+0x6C],8
	cmp eax,ebp
	je Block35

 Block34:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block35:
	push 1
	push ebp
	push ebp
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x40],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x90]
	push ecx
	push ebp
	push 0x10E
	push 0x5C
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	cmp eax,0x44
	jle Block37

 Block36:
	lea ecx,[eax-0x44]
	jmp Block38

 Block37:
	xor ecx,ecx

 Block38:
	mov eax,dword ptr [esp+0x8C]
	cmp eax,ebp
	je Block41

 Block39:
	cmp eax,dword ptr [esp+0x90]
	je Block41

 Block40:
	mov eax,0x23
	jmp Block42

 Block41:
	xor eax,eax

 Block42:
	mov dword ptr [esp+0x30],ebp
	mov edx,dword ptr [esp+0x18]
	add eax,ecx
	push 0xFFFFFFFF
	lea eax,[eax+edx+0x74]
	push eax
	push 0x122
	push 6
	mov ecx,esi
	mov byte ptr [esp+0x7C],0xC
	call CUIToolTip::SetBasicInfo
	mov dword ptr [esp+0x24],ebp
	mov ecx,dword ptr [esp+0x94]
	push ecx
	lea edx,[esp+0x28]
	push edx
	mov ecx,esi
	mov byte ptr [esp+0x74],0xD
	call CUIToolTip::MakingLimitInfo
	mov eax,dword ptr [esp+0x78]
	mov ecx,dword ptr [esp+0x74]
	push ebp
	push 0xCC0E395A
	push ebp
	push ebp
	push 1
	push eax
	push ecx
	lea edx,[esp+0x94]
	push edx
	mov ecx,esi
	call CUIToolTip::MakeLayer
	mov eax,dword ptr [esp+0x78]
	cmp eax,ebp
	je Block44

 Block43:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block44:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x7C],esp
	push 1
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov ecx,dword ptr [esp+0x20]
	push ecx
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawTextItemName
	mov eax,dword ptr [esp+0x14]
	mov edi,0x1F
	cmp eax,ebp
	je Block85

 Block45:
	cmp byte ptr [eax],0
	je Block85

 Block46:
	mov edx,3
	mov word ptr [esp+0x44],dx
	mov dword ptr [esp+0x4C],0xFF
	mov eax,edx
	mov word ptr [esp+0x34],ax
	mov dword ptr [esp+0x3C],ebp
	mov ecx,dword ptr [esi+0x10]
	mov bl,0xF
	mov byte ptr [esp+0x6C],bl
	cmp ecx,ebp
	jne Block48

 Block47:
	push 0x80004003
	call _com_issue_error

 Block48:
	lea edx,[esp+0x34]
	push edx
	lea eax,[esp+0x7C]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [esi+0xA04]
	mov byte ptr [esp+0x6C],0x10
	cmp ecx,ebp
	jne Block50

 Block49:
	push 0x80004003
	call _com_issue_error

 Block50:
	lea eax,[esp+0x44]
	push eax
	push edx
	push 0x21
	push 0xA
	call IWzCanvas::Copy
	mov eax,dword ptr [esp+0x78]
	mov byte ptr [esp+0x6C],bl
	cmp eax,ebp
	je Block52

 Block51:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block52:
	mov edi,dword ptr [ZImports::_VariantClear]
	mov ebx,8
	mov byte ptr [esp+0x6C],0xE
	cmp word ptr [esp+0x34],bx
	jne Block55

 Block53:
	xor eax,eax
	mov word ptr [esp+0x34],ax
	mov eax,dword ptr [esp+0x3C]
	cmp eax,ebp
	je Block56

 Block54:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block56

 Block55:
	lea ecx,[esp+0x34]
	push ecx
	call edi

 Block56:
	mov byte ptr [esp+0x6C],0xD
	cmp word ptr [esp+0x44],bx
	jne Block59

 Block57:
	mov eax,dword ptr [esp+0x4C]
	xor edx,edx
	mov word ptr [esp+0x44],dx
	cmp eax,ebp
	je Block60

 Block58:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block60

 Block59:
	lea eax,[esp+0x44]
	push eax
	call edi

 Block60:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x54]
	push ecx
	call edi
	lea edx,[esp+0x54]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block62

 Block61:
	push eax
	call _com_issue_error

 Block62:
	lea eax,[esp+0x34]
	push eax
	mov byte ptr [esp+0x70],0x11
	call edi
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,ebp
	jge Block64

 Block63:
	push eax
	call _com_issue_error

 Block64:
	mov edx,3
	mov word ptr [esp+0x44],dx
	mov dword ptr [esp+0x4C],ebp
	lea eax,[esp+0x54]
	push eax
	lea ecx,[esp+0x38]
	push ecx
	push 0x16
	lea edx,[esp+0x80]
	push edx
	mov ecx,esi
	mov byte ptr [esp+0x7C],0x13
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	mov eax,dword ptr [esp+0x20]
	push ecx
	mov dword ptr [esp+0x3C],esp
	mov ecx,esp
	mov bl,0x14
	push eax
	mov byte ptr [esp+0x80],bl
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esi+0x10]
	mov byte ptr [esp+0x7C],0x15
	cmp ecx,ebp
	jne Block66

 Block65:
	push 0x80004003
	call _com_issue_error

 Block66:
	lea edx,[esp+0x54]
	push edx
	lea eax,[esp+0x8C]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x7C],0x16
	cmp ecx,ebp
	jne Block68

 Block67:
	push 0x80004003
	call _com_issue_error

 Block68:
	push 0x1D
	push 0x10
	mov byte ptr [esp+0x84],0x17
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x78]
	mov byte ptr [esp+0x6C],bl
	cmp eax,ebp
	je Block70

 Block69:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block70:
	mov eax,dword ptr [esp+0x74]
	mov byte ptr [esp+0x6C],0x13
	cmp eax,ebp
	je Block72

 Block71:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block72:
	mov edi,8
	mov byte ptr [esp+0x6C],0x12
	cmp word ptr [esp+0x44],di
	jne Block75

 Block73:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	cmp eax,ebp
	je Block76

 Block74:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block76

 Block75:
	lea ecx,[esp+0x44]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block76:
	mov byte ptr [esp+0x6C],0x11
	cmp word ptr [esp+0x34],di
	jne Block79

 Block77:
	mov eax,dword ptr [esp+0x3C]
	xor edx,edx
	mov word ptr [esp+0x34],dx
	cmp eax,ebp
	je Block80

 Block78:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block80

 Block79:
	lea eax,[esp+0x34]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block80:
	mov byte ptr [esp+0x6C],0xD
	cmp word ptr [esp+0x54],di
	jne Block83

 Block81:
	mov eax,dword ptr [esp+0x5C]
	xor ecx,ecx
	mov word ptr [esp+0x54],cx
	cmp eax,ebp
	je Block84

 Block82:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block84

 Block83:
	lea edx,[esp+0x54]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block84:
	mov edi,0x2F

 Block85:
	mov ebx,dword ptr [esp+0x28]
	cmp ebx,ebp
	je Block88

 Block86:
	cmp byte ptr [ebx],0
	je Block88

 Block87:
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x30],esp
	push 0xA
	push eax
	mov ecx,esi
	call CUIToolTip::GetFontByType
	push ebx
	push edi
	mov ecx,esi
	call CUIToolTip::DrawTextCenter

 Block88:
	mov ecx,dword ptr [esp+0x7C]
	call GW_ItemSlotPet::IsDead
	mov ebx,dword ptr [esp+0x18]
	mov ecx,dword ptr [esp+0x20]
	lea edi,[ebx+0x20]
	test eax,eax
	je Block90

 Block89:
	push 1
	jmp Block91

 Block90:
	push ebp

 Block91:
	push ebp
	call TSecType<long>::GetData
	push eax
	push edi
	push 0xA
	mov ecx,esi
	call CUIToolTip::DrawItemIcon
	push 1
	push ebp
	push 1
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x8C],esp
	push 0xA
	push ecx
	mov ecx,esi
	call CUIToolTip::GetFontByType
	mov edx,dword ptr [esp+0x90]
	push edx
	push edi
	push 0x10E
	push 0x5C
	mov ecx,esi
	call CUIToolTip::DrawTextSepartedLine
	mov ecx,dword ptr [esp+0x8C]
	cmp ecx,ebp
	je Block96

 Block92:
	mov edx,dword ptr [esp+0x90]
	cmp ecx,edx
	je Block96

 Block93:
	cmp eax,0x44
	jge Block95

 Block94:
	mov eax,0x44

 Block95:
	push edx
	push ecx
	lea eax,[eax+ebx+0x28]
	push eax
	mov ecx,esi
	call CUIToolTip::DrawDiscount_Info

 Block96:
	cmp dword ptr [esp+0x94],ebp
	je Block101

 Block97:
	mov eax,dword ptr [esp+0x24]
	cmp eax,ebp
	jne Block99

 Block98:
	xor eax,eax
	jmp Block100

 Block99:
	mov eax,dword ptr [eax-4]

 Block100:
	mov edx,dword ptr [esi+8]
	lea ecx,[esp+0x24]
	shl eax,4
	push ecx
	sub edx,eax
	push edx
	mov ecx,esi
	call CUIToolTip::DrawLimitInfo

 Block101:
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0x6C],0xC
	call ZArray<ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0x88]
	mov byte ptr [esp+0x6C],4
	cmp eax,ebp
	je Block103

 Block102:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block103:
	mov eax,dword ptr [esp+0x1C]

 Block104:
	cmp eax,ebp

 Block105:
	mov byte ptr [esp+0x6C],3
	je Block107

 Block106:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block107:
	mov eax,dword ptr [esp+0x80]
	mov byte ptr [esp+0x6C],1
	cmp eax,ebp
	je Block109

 Block108:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block109:
	mov eax,dword ptr [esp+0x14]
	mov byte ptr [esp+0x6C],0
	cmp eax,ebp
	je Block111

 Block110:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block111:
	mov eax,dword ptr [esp+0x28]
	mov dword ptr [esp+0x6C],0xFFFFFFFF
	cmp eax,ebp
	je Block113

 Block112:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block113:
	mov ecx,dword ptr [esp+0x64]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x5C
	ret 0x2C
}
}
// CToolTipHelper::GetNearToolTip
_SUB_EXCEPTION_HANDLER(4A0AC0)
__SUB_CLASS_THIS(004A0AC0, __thiscall, 6216,  CToolTipHelper, ZList<long>, NakedParam<tagPOINT>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4A0AC0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x20
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x34]
	mov dword ptr fs:[0],eax
	xor ebx,ebx
	mov dword ptr [esp+0x18],ebx
	mov edi,dword ptr [esp+0x44]
	int 3// TODO: 	mov dword ptr [edi],offset ZList<long>::`vftable'
	mov dword ptr [edi+8],ebx
	mov dword ptr [edi+0xC],ebx
	mov dword ptr [edi+0x10],ebx
	lea ebp,[ecx+8]
	mov ecx,ebp
	mov dword ptr [esp+0x3C],ebx
	mov dword ptr [esp+0x18],1
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::GetHeadPosition
	mov esi,eax
	mov dword ptr [esp+0x14],esi
	cmp esi,ebx
	je Block4

 Block1:
	mov dword ptr [esp+0x2C],ebx
	mov dword ptr [esp+0x30],ebx
	mov eax,dword ptr [esi+0xC]
	mov dword ptr [esp+0x1C],eax
	mov ecx,dword ptr [esi+0x10]
	mov dword ptr [esp+0x20],ecx
	mov edx,dword ptr [esi+0x14]
	lea ecx,[esi+0x1C]
	mov dword ptr [esp+0x24],edx
	mov eax,dword ptr [esi+0x18]
	push ecx
	lea ecx,[esp+0x30]
	mov dword ptr [esp+0x40],1
	mov dword ptr [esp+0x2C],eax
	call ZXString<char>::op_assign
	lea edx,[esi+0x20]
	push edx
	lea ecx,[esp+0x34]
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x4C]
	mov ecx,dword ptr [esp+0x48]
	mov esi,dword ptr [esi+8]
	push eax
	push ecx
	lea edx,[esp+0x24]
	push edx
	call PtInRect
	test eax,eax
	je Block3

 Block2:
	mov ecx,edi
	call ZList<long>::AddTail_
	mov dword ptr [eax],esi

 Block3:
	lea ecx,[esp+0x1C]
	mov byte ptr [esp+0x3C],bl
	call CToolTipHelper::TTH_INFO::~TTH_INFO
	push ebx
	lea eax,[esp+0x18]
	push eax
	mov ecx,ebp
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::GetNext
	mov esi,dword ptr [esp+0x14]
	cmp esi,ebx
	jne Block1

 Block4:
	mov eax,edi
	mov ecx,dword ptr [esp+0x34]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x2C
	ret 0xC
}
}
// CUIToolTip::MakeLayer
_SUB_EXCEPTION_HANDLER(4814B0)
__SUB_CLASS_THIS(004814B0, __thiscall, 5759,  CUIToolTip, _x_com_ptr<IWzCanvas>*, _x_com_ptr<IWzCanvas>*, long, long, int32_t, int32_t, int32_t, unsigned long, int32_t) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_4814B0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x44
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x58]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	xor edi,edi
	mov dword ptr [esp+0x14],edi
	mov ebx,dword ptr [esp+0x6C]
	mov ebp,dword ptr [esp+0x70]
	mov dword ptr [esp+0x60],edi
	mov dword ptr [esi+0x18],ebx
	mov dword ptr [esi+0x1C],ebp
	cmp dword ptr [esp+0x7C],edi
	je Block36

 Block1:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x38]
	push eax
	call ebp
	lea ecx,[esp+0x38]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block3

 Block2:
	push eax
	call _com_issue_error

 Block3:
	lea edx,[esp+0x28]
	push edx
	mov dword ptr [esp+0x64],1
	call ebp
	lea eax,[esp+0x28]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	cmp eax,edi
	jge Block5

 Block4:
	push eax
	call _com_issue_error

 Block5:
	mov eax,dword ptr [esp+0x78]
	mov ecx,dword ptr [_D_G_GR]
	neg eax
	sbb eax,eax
	and eax,0xD2
	mov byte ptr [esp+0x60],2
	cmp ecx,edi
	jne Block7

 Block6:
	push 0x80004003
	call _com_issue_error

 Block7:
	lea edx,[esp+0x38]
	push edx
	lea edx,[esp+0x2C]
	push edx
	mov edx,dword ptr [esi+0xC]
	push eax
	mov eax,dword ptr [esi+8]
	push eax
	push edx
	push 0
	push 0
	lea eax,[esp+0x88]
	push eax
	call IWzGr2D::CreateLayer
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x10]
	cmp edi,eax
	je Block12

 Block8:
	mov dword ptr [esi+0x10],eax
	test eax,eax
	je Block10

 Block9:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block10:
	test edi,edi
	je Block12

 Block11:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block12:
	mov eax,dword ptr [esp+0x6C]
	test eax,eax
	je Block14

 Block13:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block14:
	mov edi,8
	mov byte ptr [esp+0x60],1
	cmp word ptr [esp+0x28],di
	jne Block17

 Block15:
	mov eax,dword ptr [esp+0x30]
	xor ecx,ecx
	mov word ptr [esp+0x28],cx
	test eax,eax
	je Block18

 Block16:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block18

 Block17:
	lea edx,[esp+0x28]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block18:
	mov byte ptr [esp+0x60],0
	cmp word ptr [esp+0x38],di
	jne Block21

 Block19:
	xor eax,eax
	mov word ptr [esp+0x38],ax
	mov eax,dword ptr [esp+0x40]
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea ecx,[esp+0x38]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block22:
	lea edx,[esp+0x48]
	push edx
	call ebp
	lea eax,[esp+0x48]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block24

 Block23:
	push eax
	call _com_issue_error

 Block24:
	lea ecx,[esp+0x18]
	push ecx
	mov dword ptr [esp+0x64],3
	call ebp
	lea edx,[esp+0x18]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block26

 Block25:
	push eax
	call _com_issue_error

 Block26:
	mov ecx,dword ptr [esi+0x10]
	mov byte ptr [esp+0x60],4
	test ecx,ecx
	jne Block28

 Block27:
	push 0x80004003
	call _com_issue_error

 Block28:
	lea eax,[esp+0x48]
	push eax
	mov eax,dword ptr [esp+0x74]
	lea edx,[esp+0x1C]
	push edx
	push eax
	push ebx
	call IWzVector2D::RelMove
	mov byte ptr [esp+0x60],3
	cmp word ptr [esp+0x18],di
	jne Block31

 Block29:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block32

 Block30:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block32

 Block31:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block32:
	mov byte ptr [esp+0x60],0
	cmp word ptr [esp+0x48],di
	jne Block35

 Block33:
	xor eax,eax
	mov word ptr [esp+0x48],ax
	mov eax,dword ptr [esp+0x50]
	test eax,eax
	je Block123

 Block34:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block123

 Block35:
	lea ecx,[esp+0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]
	jmp Block123

 Block36:
	cmp ebx,edi
	jge Block38

 Block37:
	xor ebx,ebx
	mov dword ptr [esp+0x6C],ebx

 Block38:
	cmp ebp,edi
	jge Block40

 Block39:
	xor ebp,ebp
	mov dword ptr [esp+0x70],ebp

 Block40:
	call get_screen_width
	dec eax
	cmp dword ptr [esp+0x84],edi
	je Block43

 Block41:
	mov edx,dword ptr [esi+0xC]
	lea ecx,[ebx+edx*2]
	cmp ecx,eax
	jle Block46

 Block42:
	call get_screen_width
	mov edx,dword ptr [esi+0xC]
	mov ebx,eax
	add edx,edx
	or eax,0xFFFFFFFF
	sub eax,edx
	add ebx,eax
	jmp Block45

 Block43:
	mov ecx,dword ptr [esi+0xC]
	add ecx,ebx
	cmp ecx,eax
	jle Block46

 Block44:
	call get_screen_width
	mov ebx,eax
	sub ebx,dword ptr [esi+0xC]
	dec ebx

 Block45:
	mov dword ptr [esp+0x6C],ebx

 Block46:
	call get_screen_height
	mov edx,dword ptr [esi+8]
	dec eax
	add edx,ebp
	cmp edx,eax
	jle Block48

 Block47:
	call get_screen_height
	sub eax,dword ptr [esi+8]
	dec eax
	mov dword ptr [esp+0x70],eax

 Block48:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	push eax
	call edi
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block50

 Block49:
	push eax
	call _com_issue_error

 Block50:
	lea edx,[esp+0x48]
	push edx
	mov dword ptr [esp+0x64],5
	call edi
	lea eax,[esp+0x48]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block52

 Block51:
	push eax
	call _com_issue_error

 Block52:
	mov ebp,dword ptr [esp+0x78]
	mov ecx,dword ptr [_D_G_GR]
	mov eax,ebp
	neg eax
	sbb eax,eax
	and eax,0xC8
	add eax,0xA
	mov byte ptr [esp+0x60],6
	test ecx,ecx
	jne Block54

 Block53:
	push 0x80004003
	call _com_issue_error

 Block54:
	lea edx,[esp+0x18]
	push edx
	lea edx,[esp+0x4C]
	push edx
	mov edx,dword ptr [esi+0xC]
	push eax
	mov eax,dword ptr [esi+8]
	push eax
	mov eax,dword ptr [esp+0x80]
	push edx
	push eax
	push ebx
	lea edx,[esp+0x98]
	push edx
	call IWzGr2D::CreateLayer
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x10]
	cmp edi,eax
	je Block59

 Block55:
	mov dword ptr [esi+0x10],eax
	test eax,eax
	je Block57

 Block56:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block57:
	test edi,edi
	je Block59

 Block58:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block59:
	mov eax,dword ptr [esp+0x7C]
	test eax,eax
	je Block61

 Block60:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block61:
	mov edi,dword ptr [ZImports::_VariantClear]
	mov ebx,8
	mov byte ptr [esp+0x60],5
	cmp word ptr [esp+0x48],bx
	jne Block64

 Block62:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	test eax,eax
	je Block65

 Block63:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block65

 Block64:
	lea edx,[esp+0x48]
	push edx
	call edi

 Block65:
	mov byte ptr [esp+0x60],0
	cmp word ptr [esp+0x18],bx
	jne Block68

 Block66:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block69

 Block67:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block69

 Block68:
	lea ecx,[esp+0x18]
	push ecx
	call edi

 Block69:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 0
	lea edx,[esp+0x7C]
	push edx
	call CWndMan::GetOrgWindow
	mov eax,dword ptr [eax]
	mov ebx,7
	mov ecx,0xD
	mov dword ptr [esp+0x60],ebx
	mov word ptr [esp+0x18],cx
	mov dword ptr [esp+0x20],eax
	test eax,eax
	je Block71

 Block70:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block71:
	mov edi,dword ptr [esi+0x10]
	mov byte ptr [esp+0x60],8
	test edi,edi
	jne Block73

 Block72:
	push 0x80004003
	call _com_issue_error

 Block73:
	mov edx,dword ptr [esp+0x18]
	mov ecx,dword ptr [edi]
	sub esp,0x10
	mov eax,esp
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x2C]
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x30]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x34]
	mov dword ptr [eax+0xC],edx
	mov eax,dword ptr [ecx+0x64]
	push edi
	call eax
	test eax,eax
	jge Block75

 Block74:
	push offset __GUID_f28bd1ed_3deb_4f92_9eec_10ef5a1c3fb4
	push edi
	push eax
	call _com_issue_errorex

 Block75:
	cmp word ptr [esp+0x18],8
	mov byte ptr [esp+0x60],bl
	jne Block78

 Block76:
	mov eax,dword ptr [esp+0x20]
	xor ecx,ecx
	mov word ptr [esp+0x18],cx
	test eax,eax
	je Block79

 Block77:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block79

 Block78:
	lea edx,[esp+0x18]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block79:
	mov eax,dword ptr [esp+0x78]
	mov byte ptr [esp+0x60],0
	test eax,eax
	je Block81

 Block80:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block81:
	cmp dword ptr [esp+0x84],0
	je Block123

 Block82:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	push eax
	call edi
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block84

 Block83:
	push eax
	call _com_issue_error

 Block84:
	lea edx,[esp+0x48]
	mov ebx,9
	push edx
	mov dword ptr [esp+0x64],ebx
	call edi
	lea eax,[esp+0x48]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block86

 Block85:
	push eax
	call _com_issue_error

 Block86:
	mov ecx,dword ptr [_D_G_GR]
	neg ebp
	sbb ebp,ebp
	and ebp,0xC8
	add ebp,0xA
	mov byte ptr [esp+0x60],0xA
	mov edx,ebp
	test ecx,ecx
	jne Block88

 Block87:
	push 0x80004003
	call _com_issue_error

 Block88:
	mov eax,dword ptr [esi+0xC]
	lea edi,[esp+0x18]
	push edi
	lea edi,[esp+0x4C]
	push edi
	push edx
	mov edx,dword ptr [esi+8]
	push edx
	mov edx,dword ptr [esp+0x80]
	push eax
	push edx
	mov edx,dword ptr [esp+0x84]
	add eax,edx
	push eax
	lea eax,[esp+0x94]
	push eax
	call IWzGr2D::CreateLayer
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esi+0x14]
	cmp edi,eax
	je Block93

 Block89:
	mov dword ptr [esi+0x14],eax
	test eax,eax
	je Block91

 Block90:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block91:
	test edi,edi
	je Block93

 Block92:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+8]
	push edi
	call ecx

 Block93:
	mov eax,dword ptr [esp+0x78]
	test eax,eax
	je Block95

 Block94:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block95:
	mov edi,8
	mov byte ptr [esp+0x60],bl
	cmp word ptr [esp+0x48],di
	jne Block98

 Block96:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	test eax,eax
	je Block99

 Block97:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block99

 Block98:
	lea edx,[esp+0x48]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block99:
	mov byte ptr [esp+0x60],0
	cmp word ptr [esp+0x18],di
	jne Block102

 Block100:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block103

 Block101:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block103

 Block102:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block103:
	mov ecx,dword ptr [TSingleton<CWndMan>::ms_pInstance]
	push 0
	lea edx,[esp+0x74]
	push edx
	call CWndMan::GetOrgWindow
	mov eax,dword ptr [eax]
	mov ebx,0xB
	mov ecx,0xD
	mov dword ptr [esp+0x60],ebx
	mov word ptr [esp+0x48],cx
	mov dword ptr [esp+0x50],eax
	test eax,eax
	je Block105

 Block104:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block105:
	mov ecx,dword ptr [esi+0x14]
	mov byte ptr [esp+0x60],0xC
	test ecx,ecx
	jne Block107

 Block106:
	push 0x80004003
	call _com_issue_error

 Block107:
	lea edx,[esp+0x48]
	push edx
	call IWzVector2D::Putorigin
	mov edi,8
	mov byte ptr [esp+0x60],bl
	cmp word ptr [esp+0x48],di
	jne Block110

 Block108:
	xor eax,eax
	mov word ptr [esp+0x48],ax
	mov eax,dword ptr [esp+0x50]
	test eax,eax
	je Block111

 Block109:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block111

 Block110:
	lea ecx,[esp+0x48]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block111:
	mov eax,dword ptr [esp+0x70]
	mov byte ptr [esp+0x60],0
	test eax,eax
	je Block113

 Block112:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block113:
	mov ecx,3
	mov word ptr [esp+0x48],cx
	mov dword ptr [esp+0x50],0
	mov edx,dword ptr [esp+0x80]
	mov ecx,dword ptr [esi+0x14]
	mov eax,dword ptr [esp+0x74]
	push edx
	mov dword ptr [esp+0x64],0xD
	push eax
	test ecx,ecx
	jne Block115

 Block114:
	push 0x80004003
	call _com_issue_error

 Block115:
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x7C],esp
	lea eax,[esp+0x54]
	push eax
	push edx
	call IWzGr2DLayer::Getcanvas
	mov ecx,esi
	call CUIToolTip::InitCanvas
	mov byte ptr [esp+0x60],0
	cmp word ptr [esp+0x48],di
	jne Block118

 Block116:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	test eax,eax
	je Block119

 Block117:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block119

 Block118:
	lea edx,[esp+0x48]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block119:
	mov edi,dword ptr [esi+0x14]
	test edi,edi
	jne Block121

 Block120:
	push 0x80004003
	call _com_issue_error

 Block121:
	mov eax,dword ptr [edi]
	mov ecx,dword ptr [eax+0xE0]
	push 0xFFFFFFFF
	push edi
	call ecx
	test eax,eax
	jge Block123

 Block122:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push edi
	push eax
	call _com_issue_errorex

 Block123:
	mov edx,3
	mov word ptr [esp+0x48],dx
	mov dword ptr [esp+0x50],0
	mov ecx,dword ptr [esi+0x10]
	mov dword ptr [esp+0x60],0xE
	test ecx,ecx
	jne Block125

 Block124:
	push 0x80004003
	call _com_issue_error

 Block125:
	mov edi,dword ptr [esp+0x68]
	lea eax,[esp+0x48]
	push eax
	push edi
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x48],8
	mov dword ptr [esp+0x14],1
	mov byte ptr [esp+0x60],0
	jne Block128

 Block126:
	mov eax,dword ptr [esp+0x50]
	xor ecx,ecx
	mov word ptr [esp+0x48],cx
	test eax,eax
	je Block129

 Block127:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block129

 Block128:
	lea edx,[esp+0x48]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block129:
	mov eax,dword ptr [esp+0x80]
	mov ecx,dword ptr [esp+0x74]
	push eax
	mov eax,dword ptr [edi]
	push ecx
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x7C],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block131

 Block130:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+4]
	call eax

 Block131:
	mov ecx,esi
	call CUIToolTip::InitCanvas
	mov esi,dword ptr [esi+0x10]
	test esi,esi
	jne Block133

 Block132:
	push 0x80004003
	call _com_issue_error

 Block133:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+0xE0]
	push 0xFFFFFFFF
	push esi
	call edx
	test eax,eax
	jge Block135

 Block134:
	push offset __GUID_6dc8c7ce_8e81_4420_b4f6_4b60b7d5fcdf
	push esi
	push eax
	call _com_issue_errorex

 Block135:
	mov eax,edi
	mov ecx,dword ptr [esp+0x58]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0x50
	ret 0x20
}
}
// CUIToolTip::DrawTextRight
_SUB_EXCEPTION_HANDLER(48C7C0)
__SUB_CLASS_THIS(0048C7C0, __thiscall, 5777,  CUIToolTip, void, long, const char*, NakedParam<_x_com_ptr<IWzFont>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48C7C0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x38
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x48]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x18]
	push eax
	mov dword ptr [esp+0x54],0
	call esi
	lea ecx,[esp+0x18]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	mov ebp,dword ptr [esp+0x5C]
	lea edx,[esp+0x18]
	push edx
	push ecx
	mov dword ptr [esp+0x18],esp
	mov ecx,esp
	push ebp
	mov byte ptr [esp+0x5C],1
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [esp+0x68]
	mov byte ptr [esp+0x58],2
	test ecx,ecx
	jne Block4

 Block3:
	push 0x80004003
	call _com_issue_error

 Block4:
	mov byte ptr [esp+0x58],1
	call IWzFont::CalcTextWidth
	cmp word ptr [esp+0x18],8
	mov dword ptr [esp+0x5C],eax
	mov byte ptr [esp+0x50],0
	jne Block7

 Block5:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block8

 Block6:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block8

 Block7:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block8:
	lea edx,[esp+0x38]
	push edx
	call esi
	lea eax,[esp+0x38]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block10

 Block9:
	push eax
	call _com_issue_error

 Block10:
	lea ecx,[esp+0x28]
	push ecx
	mov byte ptr [esp+0x54],3
	call esi
	lea edx,[esp+0x28]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block12

 Block11:
	push eax
	call _com_issue_error

 Block12:
	mov eax,3
	mov word ptr [esp+0x18],ax
	mov dword ptr [esp+0x20],0
	mov eax,dword ptr [esp+0x60]
	lea ecx,[esp+0x38]
	push ecx
	lea edx,[esp+0x2C]
	push edx
	push eax
	push ecx
	mov dword ptr [esp+0x24],esp
	mov ecx,esp
	push ebp
	mov byte ptr [esp+0x64],5
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [edi+0x10]
	mov byte ptr [esp+0x60],6
	test ecx,ecx
	jne Block14

 Block13:
	push 0x80004003
	call _com_issue_error

 Block14:
	lea edx,[esp+0x28]
	push edx
	lea eax,[esp+0x24]
	push eax
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x60],7
	test ecx,ecx
	jne Block16

 Block15:
	push 0x80004003
	call _com_issue_error

 Block16:
	mov eax,dword ptr [edi+0xC]
	sub eax,dword ptr [esp+0x6C]
	mov edx,dword ptr [esp+0x68]
	push edx
	sub eax,0xA
	push eax
	mov byte ptr [esp+0x68],8
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x10]
	mov byte ptr [esp+0x50],5
	test eax,eax
	je Block18

 Block17:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block18:
	mov esi,8
	mov byte ptr [esp+0x50],4
	cmp word ptr [esp+0x18],si
	jne Block21

 Block19:
	xor eax,eax
	mov word ptr [esp+0x18],ax
	mov eax,dword ptr [esp+0x20]
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea ecx,[esp+0x18]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block22:
	mov byte ptr [esp+0x50],3
	cmp word ptr [esp+0x28],si
	jne Block25

 Block23:
	mov eax,dword ptr [esp+0x30]
	xor edx,edx
	mov word ptr [esp+0x28],dx
	test eax,eax
	je Block26

 Block24:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block26

 Block25:
	lea eax,[esp+0x28]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block26:
	mov byte ptr [esp+0x50],0
	cmp word ptr [esp+0x38],si
	jne Block29

 Block27:
	mov eax,dword ptr [esp+0x40]
	xor ecx,ecx
	mov word ptr [esp+0x38],cx
	test eax,eax
	je Block30

 Block28:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block30

 Block29:
	lea edx,[esp+0x38]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block30:
	mov eax,dword ptr [esp+0x60]
	mov dword ptr [esp+0x50],0xFFFFFFFF
	test eax,eax
	je Block32

 Block31:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block32:
	mov ecx,dword ptr [esp+0x48]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	add esp,0x44
	ret 0xC
}
}
// CUIToolTip::ItemToolTipParam::ItemToolTipParam
__SUB_CLASS_THIS0(0009CB90, __thiscall, 6127,  CUIToolTip::ItemToolTipParam, void) {
__asm {

 Block0:
	mov edx,dword ptr [_D_DB_DATE_19000101__220]
	mov eax,ecx
	xor ecx,ecx
	mov dword ptr [eax+0x18],edx
	mov edx,dword ptr [_D_DB_DATE_19000101__220+4]
	mov dword ptr [eax],ecx
	mov dword ptr [eax+4],ecx
	mov dword ptr [eax+8],ecx
	mov dword ptr [eax+0xC],ecx
	mov dword ptr [eax+0x10],ecx
	mov dword ptr [eax+0x14],ecx
	mov dword ptr [eax+0x1C],edx
	mov dword ptr [eax+0x28],ecx
	ret
}
}
// CUIToolTip::DrawReqSkill
_SUB_EXCEPTION_HANDLER(48B320)
__SUB_CLASS_THIS(0048B320, __thiscall, 5764,  CUIToolTip, void, long, const SKILLENTRY*) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48B320
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x98
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xAC]
	mov dword ptr fs:[0],eax
	mov ebx,ecx
	mov dword ptr [esp+0x64],ebx
	mov eax,dword ptr [esp+0xBC]
	xor ebp,ebp
	cmp eax,ebp
	je Block78

 Block1:
	mov edi,dword ptr [ebx+8]
	mov ecx,eax
	shl ecx,4
	add ecx,eax
	add ecx,ecx
	sub edi,ecx
	mov edx,3
	sub edi,0x14
	mov word ptr [esp+0x68],dx
	mov dword ptr [esp+0x70],ebp
	mov ecx,dword ptr [ebx+0x10]
	mov dword ptr [esp+0xB4],ebp
	cmp ecx,ebp
	jne Block3

 Block2:
	push 0x80004003
	call _com_issue_error

 Block3:
	lea eax,[esp+0x68]
	push eax
	lea edx,[esp+0x60]
	push edx
	call IWzGr2DLayer::Getcanvas
	cmp word ptr [esp+0x68],8
	mov byte ptr [esp+0xB4],2
	jne Block6

 Block4:
	xor eax,eax
	mov word ptr [esp+0x68],ax
	mov eax,dword ptr [esp+0x70]
	cmp eax,ebp
	je Block7

 Block5:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block7

 Block6:
	lea ecx,[esp+0x68]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block7:
	mov edx,3
	mov word ptr [esp+0x14],dx
	mov dword ptr [esp+0x1C],0xFF
	mov esi,dword ptr [esp+0x5C]
	mov eax,dword ptr [ebx+0xA04]
	mov byte ptr [esp+0xB4],dl
	cmp esi,ebp
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	lea ecx,[esp+0x14]
	push ecx
	push eax
	lea edx,[edi+1]
	push edx
	push 0xA
	mov ecx,esi
	call IWzCanvas::Copy
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xB4],2
	jne Block12

 Block10:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	cmp eax,ebp
	je Block13

 Block11:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block13

 Block12:
	lea ecx,[esp+0x14]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block13:
	mov ebp,dword ptr [ZImports::_VariantInit]
	lea edx,[esp+0x2C]
	push edx
	call ebp
	lea eax,[esp+0x2C]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block15

 Block14:
	push eax
	call _com_issue_error

 Block15:
	lea ecx,[esp+0x14]
	push ecx
	mov byte ptr [esp+0xB8],4
	call ebp
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block17

 Block16:
	push eax
	call _com_issue_error

 Block17:
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x18]
	push ecx
	push 0x18
	lea edx,[esp+0x30]
	push edx
	mov ecx,ebx
	mov byte ptr [esp+0xC4],5
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	push eax
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x5C],esp
	push 0x801
	mov bl,6
	push eax
	mov byte ptr [esp+0xCC],bl
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea ecx,[edi-3]
	push ecx
	mov byte ptr [esp+0xC8],7
	push 0x10
	mov ecx,esi
	mov byte ptr [esp+0xCC],bl
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xB4],5
	test eax,eax
	je Block19

 Block18:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block19:
	mov ebx,8
	mov byte ptr [esp+0xB4],4
	cmp word ptr [esp+0x14],bx
	jne Block22

 Block20:
	mov eax,dword ptr [esp+0x1C]
	xor ecx,ecx
	mov word ptr [esp+0x14],cx
	test eax,eax
	je Block23

 Block21:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block23

 Block22:
	lea edx,[esp+0x14]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block23:
	mov byte ptr [esp+0xB4],2
	cmp word ptr [esp+0x2C],bx
	jne Block26

 Block24:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block27

 Block25:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block27

 Block26:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block27:
	add edi,0xF
	mov dword ptr [esp+0x28],edi
	xor edi,edi
	mov dword ptr [esp+0x40],edi
	mov edx,dword ptr [esp+0xC0]
	mov eax,dword ptr [edx+0x68]
	mov byte ptr [esp+0xB4],8
	mov dword ptr [esp+0x24],eax
	test eax,eax
	je Block75

 Block28:
	jmp Block30

 Block29:
	mov ebp,dword ptr [ZImports::_VariantInit]

 Block30:
	lea eax,[esp+0x24]
	push eax
	call ZList<GW_SkillRecord>::GetNext
	mov ecx,dword ptr [eax]
	add esp,4
	push ecx
	mov ecx,dword ptr [TSingleton<CSkillInfo>::ms_pInstance]
	mov dword ptr [esp+0x48],eax
	call CSkillInfo::GetSkill
	mov ebx,dword ptr [eax+0x25C]
	mov dword ptr [esp+0x3C],eax
	mov dword ptr [esp+0xA8],ebx
	test ebx,ebx
	je Block32

 Block31:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+4]
	push ebx
	call eax

 Block32:
	mov edx,dword ptr [esp+0x28]
	mov ecx,dword ptr [esi]
	mov eax,dword ptr [ecx+0x8C]
	push 0xA0FFFFFF
	push 0x22
	push 0x22
	dec edx
	push edx
	push 0xA
	push esi
	mov byte ptr [esp+0xCC],9
	call eax
	test eax,eax
	jge Block34

 Block33:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block34:
	lea ecx,[esp+0x14]
	push ecx
	call ebp
	lea edx,[esp+0x14]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block14

 Block35:
	mov byte ptr [esp+0xB4],0xA
	test ebx,ebx
	je Block2

 Block36:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x48]
	lea ecx,[esp+0x54]
	push ecx
	push ebx
	mov dword ptr [esp+0x5C],0
	call edx
	test eax,eax
	jge Block38

 Block37:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block38:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x40]
	mov ebp,dword ptr [esp+0x54]
	lea ecx,[esp+0x48]
	push ecx
	push ebx
	mov dword ptr [esp+0x50],0
	call edx
	test eax,eax
	jge Block40

 Block39:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block40:
	mov eax,dword ptr [ebx]
	mov edx,dword ptr [eax+0x6C]
	mov edi,dword ptr [esp+0x48]
	lea ecx,[esp+0x50]
	push ecx
	push ebx
	mov dword ptr [esp+0x58],0
	call edx
	test eax,eax
	jge Block42

 Block41:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push ebx
	push eax
	call _com_issue_errorex

 Block42:
	mov edx,dword ptr [esp+0x14]
	mov ecx,dword ptr [esi]
	sub esp,0x10
	mov eax,esp
	mov ecx,dword ptr [ecx+0x84]
	push 0
	push 0
	mov dword ptr [eax],edx
	mov edx,dword ptr [esp+0x30]
	push 0
	push 0
	mov dword ptr [eax+4],edx
	mov edx,dword ptr [esp+0x3C]
	push ebp
	mov ebp,dword ptr [esp+0x4C]
	mov dword ptr [eax+8],edx
	mov edx,dword ptr [esp+0x44]
	push edi
	push 0xFF
	mov dword ptr [eax+0xC],edx
	push ebx
	mov eax,0xB
	sub eax,dword ptr [esp+0x80]
	push ebp
	push eax
	push esi
	call ecx
	test eax,eax
	jge Block44

 Block43:
	push offset __GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e
	push esi
	push eax
	call _com_issue_errorex

 Block44:
	cmp word ptr [esp+0x14],8
	mov byte ptr [esp+0xB4],9
	jne Block47

 Block45:
	mov eax,dword ptr [esp+0x1C]
	xor edx,edx
	mov word ptr [esp+0x14],dx
	test eax,eax
	je Block48

 Block46:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block48

 Block47:
	lea eax,[esp+0x14]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block48:
	mov edi,dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x78]
	push ecx
	call edi
	lea edx,[esp+0x78]
	push offset _D_VTMISSING
	push edx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block14

 Block49:
	lea eax,[esp+0x2C]
	push eax
	mov byte ptr [esp+0xB8],0xB
	call edi
	lea ecx,[esp+0x2C]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block14

 Block50:
	mov edi,dword ptr [esp+0x64]
	lea edx,[esp+0x78]
	push edx
	lea eax,[esp+0x30]
	push eax
	push 0x19
	lea ecx,[esp+0x64]
	push ecx
	mov ecx,edi
	mov byte ptr [esp+0xC4],0xC
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov edx,dword ptr [esp+0x44]
	push eax
	mov eax,dword ptr [edx+4]
	push ecx
	mov dword ptr [esp+0x4C],esp
	mov ecx,esp
	push eax
	mov byte ptr [esp+0xC8],0xD
	call _xbstr_t::_ctor_0
	lea eax,[ebp+2]
	push eax
	mov byte ptr [esp+0xC8],0xE
	push 0x32
	mov ecx,esi
	mov byte ptr [esp+0xCC],0xD
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x58]
	mov byte ptr [esp+0xB4],0xC
	test eax,eax
	je Block52

 Block51:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block52:
	cmp word ptr [esp+0x2C],8
	mov byte ptr [esp+0xB4],0xB
	jne Block55

 Block53:
	xor eax,eax
	mov word ptr [esp+0x2C],ax
	mov eax,dword ptr [esp+0x34]
	test eax,eax
	je Block56

 Block54:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block56

 Block55:
	lea ecx,[esp+0x2C]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block56:
	cmp word ptr [esp+0x78],8
	mov byte ptr [esp+0xB4],9
	jne Block59

 Block57:
	mov eax,dword ptr [esp+0x80]
	xor edx,edx
	mov word ptr [esp+0x78],dx
	test eax,eax
	je Block60

 Block58:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block60

 Block59:
	lea eax,[esp+0x78]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block60:
	lea ecx,[esp+0x60]
	push 0x800
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetString_0
	mov edx,dword ptr [esp+0x44]
	mov ecx,dword ptr [edx+4]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x48]
	push edx
	mov byte ptr [esp+0xC0],0xF
	call ZXString<char>::Format
	mov eax,dword ptr [esp+0x6C]
	add esp,0xC
	mov byte ptr [esp+0xB4],9
	test eax,eax
	je Block62

 Block61:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block62:
	lea eax,[esp+0x98]
	push eax
	call dword ptr [ZImports::_VariantInit]
	lea ecx,[esp+0x98]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block14

 Block63:
	lea edx,[esp+0x88]
	push edx
	mov byte ptr [esp+0xB8],0x10
	call dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x88]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jl Block14

 Block64:
	lea ecx,[esp+0x98]
	push ecx
	lea edx,[esp+0x8C]
	push edx
	push 0x19
	lea eax,[esp+0x58]
	push eax
	mov ecx,edi
	mov byte ptr [esp+0xC4],0x11
	call CUIToolTip::GetFontByType
	mov eax,dword ptr [eax]
	mov edi,dword ptr [esp+0x48]
	push eax
	push ecx
	mov dword ptr [esp+0x54],esp
	mov ecx,esp
	push edi
	mov byte ptr [esp+0xC8],0x12
	call _xbstr_t::_ctor_0
	lea ecx,[ebp+0xE]
	push ecx
	mov byte ptr [esp+0xC8],0x13
	push 0x32
	mov ecx,esi
	mov byte ptr [esp+0xCC],0x12
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0x4C]
	mov byte ptr [esp+0xB4],0x11
	test eax,eax
	je Block66

 Block65:
	mov edx,dword ptr [eax]
	push eax
	mov eax,dword ptr [edx+8]
	call eax

 Block66:
	cmp word ptr [esp+0x88],8
	mov byte ptr [esp+0xB4],0x10
	jne Block69

 Block67:
	mov eax,dword ptr [esp+0x90]
	xor ecx,ecx
	mov word ptr [esp+0x88],cx
	test eax,eax
	je Block70

 Block68:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block70

 Block69:
	lea edx,[esp+0x88]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block70:
	cmp word ptr [esp+0x98],8
	mov byte ptr [esp+0xB4],9
	jne Block73

 Block71:
	xor eax,eax
	mov word ptr [esp+0x98],ax
	mov eax,dword ptr [esp+0xA0]
	test eax,eax
	je Block74

 Block72:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block74

 Block73:
	lea ecx,[esp+0x98]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block74:
	mov edx,dword ptr [ebx]
	mov eax,dword ptr [edx+8]
	add ebp,0x22
	push ebx
	mov dword ptr [esp+0x2C],ebp
	mov byte ptr [esp+0xB8],8
	call eax
	cmp dword ptr [esp+0x24],0
	jne Block29

 Block75:
	mov byte ptr [esp+0xB4],2
	test edi,edi
	je Block77

 Block76:
	add edi,0xFFFFFFF4
	push edi
	call ZXString<char>::_Release
	add esp,4

 Block77:
	mov ecx,dword ptr [esi]
	mov edx,dword ptr [ecx+8]
	push esi
	mov dword ptr [esp+0xB8],0xFFFFFFFF
	call edx

 Block78:
	mov ecx,dword ptr [esp+0xAC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xA4
	ret 8
}
}
// CUIToolTip::DrawTextLeft
_SUB_EXCEPTION_HANDLER(48C5E0)
__SUB_CLASS_THIS(0048C5E0, __thiscall, 5777,  CUIToolTip, void, long, const char*, NakedParam<_x_com_ptr<IWzFont>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_48C5E0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0x38
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0x44]
	mov dword ptr fs:[0],eax
	mov edi,ecx
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x34]
	push eax
	mov dword ptr [esp+0x50],0
	call esi
	lea ecx,[esp+0x34]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block2

 Block1:
	push eax
	call _com_issue_error

 Block2:
	lea edx,[esp+0x24]
	push edx
	mov byte ptr [esp+0x50],1
	call esi
	lea eax,[esp+0x24]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block4

 Block3:
	push eax
	call _com_issue_error

 Block4:
	mov ecx,3
	mov word ptr [esp+0x14],cx
	mov dword ptr [esp+0x1C],0
	lea edx,[esp+0x34]
	push edx
	mov edx,dword ptr [esp+0x5C]
	mov byte ptr [esp+0x50],cl
	mov ecx,dword ptr [esp+0x60]
	lea eax,[esp+0x28]
	push eax
	push ecx
	push ecx
	mov dword ptr [esp+0x20],esp
	mov ecx,esp
	push edx
	call _xbstr_t::_ctor_0
	mov ecx,dword ptr [edi+0x10]
	mov byte ptr [esp+0x5C],4
	test ecx,ecx
	jne Block6

 Block5:
	push 0x80004003
	call _com_issue_error

 Block6:
	lea eax,[esp+0x24]
	push eax
	lea edx,[esp+0x20]
	push edx
	call IWzGr2DLayer::Getcanvas
	mov ecx,dword ptr [eax]
	mov byte ptr [esp+0x5C],5
	test ecx,ecx
	jne Block8

 Block7:
	push 0x80004003
	call _com_issue_error

 Block8:
	mov eax,dword ptr [esp+0x64]
	push eax
	push 0xA
	mov byte ptr [esp+0x64],6
	call IWzCanvas::DrawTextA
	mov eax,dword ptr [esp+0xC]
	mov byte ptr [esp+0x4C],3
	test eax,eax
	je Block10

 Block9:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block10:
	mov edi,dword ptr [ZImports::_VariantClear]
	mov esi,8
	mov byte ptr [esp+0x4C],2
	cmp word ptr [esp+0x14],si
	jne Block13

 Block11:
	xor eax,eax
	mov word ptr [esp+0x14],ax
	mov eax,dword ptr [esp+0x1C]
	test eax,eax
	je Block14

 Block12:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block14

 Block13:
	lea ecx,[esp+0x14]
	push ecx
	call edi

 Block14:
	mov byte ptr [esp+0x4C],1
	cmp word ptr [esp+0x24],si
	jne Block17

 Block15:
	mov eax,dword ptr [esp+0x2C]
	xor edx,edx
	mov word ptr [esp+0x24],dx
	test eax,eax
	je Block18

 Block16:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block18

 Block17:
	lea eax,[esp+0x24]
	push eax
	call edi

 Block18:
	mov byte ptr [esp+0x4C],0
	cmp word ptr [esp+0x34],si
	jne Block21

 Block19:
	mov eax,dword ptr [esp+0x3C]
	xor ecx,ecx
	mov word ptr [esp+0x34],cx
	test eax,eax
	je Block22

 Block20:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block22

 Block21:
	lea edx,[esp+0x34]
	push edx
	call edi

 Block22:
	mov eax,dword ptr [esp+0x5C]
	mov dword ptr [esp+0x4C],0xFFFFFFFF
	test eax,eax
	je Block24

 Block23:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block24:
	mov ecx,dword ptr [esp+0x44]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	add esp,0x44
	ret 0xC
}
}
// CToolTipHelper::LoadToolTip
_SUB_EXCEPTION_HANDLER(49F7F0)
__SUB_CLASS_THIS(0049F7F0, __thiscall, 6206,  CToolTipHelper, void, unsigned long, NakedParam<_x_com_ptr<IWzProperty>>) {
__asm {

 Block0:
	push 0xFFFFFFFF
	push offset _EXCEPTION_HANDLER_49F7F0
	mov eax,dword ptr fs:[0]
	push eax
	sub esp,0xC8
	push ebx
	push ebp
	push esi
	push edi
	mov eax,dword ptr [_D___SECURITY_COOKI]
	xor eax,esp
	push eax
	lea eax,[esp+0xDC]
	mov dword ptr fs:[0],eax
	mov esi,ecx
	mov dword ptr [esp+0x38],esi
	xor ebx,ebx
	mov dword ptr [esp+0x20],ebx
	mov ecx,dword ptr [esp+0xF0]
	cmp ecx,ebx
	sete al
	mov dword ptr [esp+0xE4],ebx
	test al,al
	je Block3

 Block1:
	mov dword ptr [esp+0xE4],0xFFFFFFFF
	cmp ecx,ebx
	je Block227

 Block2:
	mov eax,dword ptr [ecx]
	push ecx
	mov ecx,dword ptr [eax+8]
	call ecx
	jmp Block227

 Block3:
	push 0x64
	lea ecx,[esp+0xC8]
	int 3// TODO: 	mov dword ptr [esp+0xC8],offset ZMap<ZXString<char>, long, ZXString<char>>::`vftable'
	mov dword ptr [esp+0xCC],ebx
	mov dword ptr [esp+0xD0],0x1F
	mov dword ptr [esp+0xD4],ebx
	call ZMap<ZXString<char>, long, ZXString<char>>::_CalcAutoGrow
	add esi,4
	mov ecx,esi
	mov byte ptr [esp+0xE4],1
	call ZArray<CToolTipHelper::TTH_INFO>::RemoveAll
	mov eax,dword ptr [esp+0xF0]
	cmp eax,ebx
	jne Block5

 Block4:
	push 0x80004003
	call _com_issue_error

 Block5:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx+0x20]
	lea ecx,[esp+0x28]
	push ecx
	push eax
	mov edi,eax
	mov dword ptr [esp+0x30],ebx
	call edx
	cmp eax,ebx
	jge Block7

 Block6:
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push edi
	push eax
	call _com_issue_errorex

 Block7:
	mov ecx,dword ptr [esp+0x28]
	lea eax,[esp+0x37]
	push eax
	push ecx
	mov ecx,esi
	call ZArray<CToolTipHelper::TTH_INFO>::_Alloc
	mov ecx,dword ptr [esp+0xF0]
	mov dword ptr [esp+0x2C],ebx
	cmp ecx,ebx
	jne Block9

 Block8:
	push 0x80004003
	call _com_issue_error

 Block9:
	lea edx,[esp+0xA8]
	push edx
	call IWzProperty::Get_NewEnum
	mov eax,dword ptr [eax]
	push ecx
	mov ecx,esp
	mov byte ptr [esp+0xE8],2
	mov dword ptr [esp+0x34],ebx
	mov dword ptr [esp+0x28],esp
	mov dword ptr [ecx],eax
	cmp eax,ebx
	je Block11

 Block10:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block11:
	lea ecx,[esp+0x34]
	call _x_com_ptr<IEnumVARIANT>::_QueryUnknownComPtr
	cmp eax,ebx
	jge Block14

 Block12:
	cmp eax,0x80004002
	je Block14

 Block13:
	push eax
	call _com_issue_error

 Block14:
	mov eax,dword ptr [esp+0xA8]
	mov byte ptr [esp+0xE4],4
	cmp eax,ebx
	je Block16

 Block15:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block16:
	lea eax,[esp+0x64]
	push eax
	call dword ptr [ZImports::_VariantInit]
	mov byte ptr [esp+0xE4],5
	mov dword ptr [esp+0x74],ebx

 Block17:
	mov eax,dword ptr [esp+0x30]
	test eax,eax
	je Block4

 Block18:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x74]
	push edx
	lea edx,[esp+0x68]
	push edx
	push 1
	push eax
	mov eax,dword ptr [ecx+0xC]
	call eax
	test eax,eax
	jne Block97

 Block19:
	lea ecx,[esp+0x64]
	push ecx
	lea edx,[esp+0x20]
	push edx
	call DetachBSTR
	add esp,8
	mov esi,dword ptr [esp+0x1C]
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x48],esp
	mov dword ptr [eax],esi
	test esi,esi
	je Block21

 Block20:
	lea eax,[esi+8]
	push eax
	call dword ptr [ZImports::_InterlockedIncrement]

 Block21:
	mov ecx,dword ptr [esp+0xFC]
	mov byte ptr [esp+0xF0],7
	test ecx,ecx
	je Block4

 Block22:
	lea edx,[esp+0xA4]
	push edx
	mov byte ptr [esp+0xF4],6
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0xEC],8
	call Ztl_variant_t::GetUnknown
	xor edi,edi
	mov dword ptr [esp+0x3C],edi
	test eax,eax
	je Block25

 Block23:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x40]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	xor ecx,ecx
	test eax,eax
	setl cl
	dec ecx
	and ecx,dword ptr [esp+0x40]
	mov edi,ecx
	mov dword ptr [esp+0x3C],edi
	test eax,eax
	jge Block25

 Block24:
	cmp eax,0x80004002
	jne Block13

 Block25:
	cmp word ptr [esp+0x98],8
	mov byte ptr [esp+0xE4],0xA
	jne Block28

 Block26:
	mov eax,dword ptr [esp+0xA0]
	xor edx,edx
	mov word ptr [esp+0x98],dx
	test eax,eax
	je Block29

 Block27:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block29

 Block28:
	lea eax,[esp+0x98]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block29:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push 0x937
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0xE8],0xB
	test edi,edi
	je Block4

 Block30:
	lea edx,[esp+0x7C]
	push edx
	mov ecx,edi
	mov byte ptr [esp+0xEC],0xA
	call IWzProperty::Getitem
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x1C],esp
	push 0x939
	push eax
	mov byte ptr [esp+0xF0],0xC
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea ecx,[esp+0x8C]
	push ecx
	mov byte ptr [esp+0xEC],0xD
	mov ecx,edi
	mov byte ptr [esp+0xEC],0xC
	call IWzProperty::Getitem
	push ecx
	mov edx,esp
	mov dword ptr [esp+0x1C],esp
	push 0x938
	push edx
	mov byte ptr [esp+0xF0],0xE
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea eax,[esp+0x58]
	mov byte ptr [esp+0xE8],0xF
	push eax
	mov ecx,edi
	mov byte ptr [esp+0xEC],0xE
	call IWzProperty::Getitem
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x1C],esp
	push 0x93A
	push ecx
	mov byte ptr [esp+0xF0],0x10
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea edx,[esp+0x48]
	mov byte ptr [esp+0xE8],0x11
	push edx
	mov ecx,edi
	mov byte ptr [esp+0xEC],0x10
	call IWzProperty::Getitem
	mov byte ptr [esp+0xE4],0x12
	test esi,esi
	je Block34

 Block31:
	cmp dword ptr [esi+4],0
	jne Block33

 Block32:
	mov eax,dword ptr [esi]
	push eax
	call ZComAPI::ZtlConvertBSTRToString
	mov dword ptr [esi+4],eax

 Block33:
	mov ecx,dword ptr [esi+4]
	jmp Block35

 Block34:
	xor ecx,ecx

 Block35:
	xor ebp,ebp
	mov dword ptr [esp+0x14],ebp
	test ecx,ecx
	je Block39

 Block36:
	mov eax,ecx
	lea esi,[eax+1]
	mov edi,edi

 Block37:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block37

 Block38:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push 0
	push esi
	lea ecx,[esp+0x24]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x18]
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x14]

 Block39:
	mov byte ptr [esp+0xE4],0x13
	test ebp,ebp
	je Block43

 Block40:
	cmp dword ptr [ebp-4],4
	jl Block43

 Block41:
	push 4
	lea ecx,[esp+0x28]
	push ecx
	lea ecx,[esp+0x1C]
	call ZXString<char>::Right
	or dword ptr [esp+0x20],1
	push offset _S_CHAR
	mov ecx,eax
	call ZXString<char>::Compare
	test eax,eax
	jne Block43

 Block42:
	mov bl,1
	jmp Block44

 Block43:
	xor bl,bl

 Block44:
	test byte ptr [esp+0x20],1
	je Block47

 Block45:
	mov eax,dword ptr [esp+0x24]
	and dword ptr [esp+0x20],0xFFFFFFFE
	test eax,eax
	je Block47

 Block46:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block47:
	test bl,bl
	je Block53

 Block48:
	xor esi,esi
	cmp ebp,esi
	je Block50

 Block49:
	mov eax,dword ptr [ebp-4]
	jmp Block51

 Block50:
	xor eax,eax

 Block51:
	add eax,0xFFFFFFFC
	push eax
	push esi
	lea edx,[esp+0x30]
	push edx
	lea ecx,[esp+0x20]
	call ZXString<char>::Substring
	mov eax,dword ptr [esp+0x28]
	push eax
	call _atoi
	add esp,4
	mov dword ptr [esp+0x18],eax
	mov dword ptr [esp+0xBC],esi
	mov dword ptr [esp+0xC0],esi
	lea ecx,[esp+0x44]
	mov byte ptr [esp+0xE4],0x15
	call _xvariant_t::op_long
	push eax
	lea ecx,[esp+0x58]
	call _xvariant_t::op_long
	push eax
	lea ecx,[esp+0x90]
	call _xvariant_t::op_long
	push eax
	lea ecx,[esp+0x84]
	call _xvariant_t::op_long
	push eax
	lea ecx,[esp+0xBC]
	push ecx
	call dword ptr [ZImports::_SetRect]
	mov ecx,dword ptr [esp+0x38]
	lea edx,[esp+0xAC]
	push edx
	lea eax,[esp+0x1C]
	push eax
	add ecx,8
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::Insert
	lea ecx,[esp+0xAC]
	mov byte ptr [esp+0xE4],0x14
	call CToolTipHelper::TTH_INFO::~TTH_INFO
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xE4],0x13
	cmp eax,esi
	je Block65

 Block52:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	jmp Block65

 Block53:
	mov eax,dword ptr [esp+0x38]
	mov ebx,dword ptr [esp+0x2C]
	mov edx,dword ptr [eax+4]
	add eax,4
	lea ecx,[ebx+ebx*2]
	lea esi,[edx+ecx*8]
	lea ecx,[esp+0x44]
	call _xvariant_t::op_long
	push eax
	lea ecx,[esp+0x58]
	call _xvariant_t::op_long
	push eax
	lea ecx,[esp+0x90]
	call _xvariant_t::op_long
	push eax
	lea ecx,[esp+0x84]
	call _xvariant_t::op_long
	push eax
	push esi
	call dword ptr [ZImports::_SetRect]
	mov esi,dword ptr [esp+0x1C]
	test esi,esi
	je Block57

 Block54:
	cmp dword ptr [esi+4],0
	jne Block56

 Block55:
	mov eax,dword ptr [esi]
	push eax
	call ZComAPI::ZtlConvertBSTRToString
	mov dword ptr [esi+4],eax

 Block56:
	mov ecx,dword ptr [esi+4]
	jmp Block58

 Block57:
	xor ecx,ecx

 Block58:
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	test ecx,ecx
	je Block62

 Block59:
	mov eax,ecx
	lea esi,[eax+1]

 Block60:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block60

 Block61:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push 0
	push esi
	lea ecx,[esp+0x28]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x1C]
	call ZXString<char>::ReleaseBuffer
	mov esi,dword ptr [esp+0x18]

 Block62:
	lea ecx,[esp+0x2C]
	push ecx
	lea edx,[esp+0x1C]
	push edx
	lea ecx,[esp+0xCC]
	mov byte ptr [esp+0xEC],0x16
	call ZMap<ZXString<char>, long, ZXString<char>>::Insert
	mov byte ptr [esp+0xE4],0x13
	test esi,esi
	je Block64

 Block63:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block64:
	inc ebx
	mov dword ptr [esp+0x2C],ebx

 Block65:
	mov byte ptr [esp+0xE4],0x12
	test ebp,ebp
	je Block67

 Block66:
	add ebp,0xFFFFFFF4
	push ebp
	call ZXString<char>::_Release
	add esp,4

 Block67:
	mov ebp,8
	mov byte ptr [esp+0xE4],0x10
	cmp word ptr [esp+0x44],bp
	jne Block74

 Block68:
	xor eax,eax
	mov word ptr [esp+0x44],ax
	mov eax,dword ptr [esp+0x4C]
	test eax,eax
	je Block70

 Block69:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block70:
	mov ebx,dword ptr [ZImports::_VariantClear]

 Block71:
	mov byte ptr [esp+0xE4],0xE
	cmp word ptr [esp+0x54],bp
	jne Block75

 Block72:
	mov eax,dword ptr [esp+0x5C]
	xor edx,edx
	mov word ptr [esp+0x54],dx
	test eax,eax
	je Block76

 Block73:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block76

 Block74:
	mov ebx,dword ptr [ZImports::_VariantClear]
	lea ecx,[esp+0x44]
	push ecx
	call ebx
	jmp Block71

 Block75:
	lea eax,[esp+0x54]
	push eax
	call ebx

 Block76:
	mov byte ptr [esp+0xE4],0xC
	cmp word ptr [esp+0x88],bp
	jne Block79

 Block77:
	mov eax,dword ptr [esp+0x90]
	xor ecx,ecx
	mov word ptr [esp+0x88],cx
	test eax,eax
	je Block80

 Block78:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block80

 Block79:
	lea edx,[esp+0x88]
	push edx
	call ebx

 Block80:
	mov byte ptr [esp+0xE4],0xA
	cmp word ptr [esp+0x78],bp
	jne Block83

 Block81:
	xor eax,eax
	mov word ptr [esp+0x78],ax
	mov eax,dword ptr [esp+0x80]
	test eax,eax
	je Block84

 Block82:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block84

 Block83:
	lea ecx,[esp+0x78]
	push ecx
	call ebx

 Block84:
	mov edx,dword ptr [edi]
	mov eax,dword ptr [edx+8]
	push edi
	mov byte ptr [esp+0xE8],6
	call eax
	mov esi,dword ptr [esp+0x1C]
	mov byte ptr [esp+0xE4],5
	test esi,esi
	je Block92

 Block85:
	lea ecx,[esi+8]
	push ecx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block91

 Block86:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block88

 Block87:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block88:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block90

 Block89:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block90:
	push esi
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block91:
	mov dword ptr [esp+0x1C],0

 Block92:
	cmp word ptr [esp+0x64],bp
	jne Block95

 Block93:
	mov eax,dword ptr [esp+0x6C]
	xor edx,edx
	mov word ptr [esp+0x64],dx
	test eax,eax
	je Block17

 Block94:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block17

 Block95:
	lea eax,[esp+0x64]
	push eax
	call ebx
	test eax,eax
	jge Block17

 Block96:
	jmp Block13

 Block97:
	mov edx,dword ptr [esp+0x2C]
	lea ecx,[esp+0x37]
	push ecx
	mov ecx,dword ptr [esp+0x3C]
	push 0
	push edx
	add ecx,4
	call ZArray<CToolTipHelper::TTH_INFO>::_Realloc
	mov dword ptr [esp+0x28],0
	lea eax,[esp+0x24]
	push 0xEAA
	push eax
	mov byte ptr [esp+0xEC],0x17
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetStringW
	mov ecx,dword ptr [esp+0xEC]
	mov eax,dword ptr [eax]
	push ecx
	push eax
	lea edx,[esp+0x30]
	push edx
	mov byte ptr [esp+0xF0],0x18
	call ZXString<unsigned short>::Format
	mov eax,dword ptr [esp+0x30]
	add esp,0xC
	mov byte ptr [esp+0xE4],0x17
	test eax,eax
	je Block99

 Block98:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block99:
	mov esi,dword ptr [ZImports::_VariantInit]
	lea eax,[esp+0x88]
	push eax
	call esi
	lea ecx,[esp+0x88]
	push offset _D_VTMISSING
	push ecx
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block101

 Block100:
	push eax
	call _com_issue_error

 Block101:
	lea edx,[esp+0x78]
	push edx
	mov byte ptr [esp+0xE8],0x19
	call esi
	lea eax,[esp+0x78]
	push offset _D_VTMISSING
	push eax
	call ZComAPI::ZComVariantCopy
	add esp,8
	test eax,eax
	jge Block103

 Block102:
	push eax
	call _com_issue_error

 Block103:
	mov eax,dword ptr [esp+0x28]
	push 0
	push 0
	lea ecx,[esp+0x90]
	push ecx
	lea edx,[esp+0x84]
	push edx
	push ecx
	mov dword ptr [esp+0x38],esp
	mov ecx,esp
	mov bl,0x1A
	push eax
	mov byte ptr [esp+0xFC],bl
	call _xbstr_t::_ctor_1
	cmp dword ptr [_D_G_RM],0
	mov byte ptr [esp+0xF8],0x1B
	jne Block105

 Block104:
	push 0x80004003
	call _com_issue_error

 Block105:
	lea ecx,[esp+0xAC]
	push ecx
	mov byte ptr [esp+0xFC],bl
	mov ecx,dword ptr [_D_G_RM]
	call IWzResMan::GetObjectA
	mov ecx,eax
	mov byte ptr [esp+0xEC],0x1C
	call Ztl_variant_t::GetUnknown
	xor esi,esi
	mov dword ptr [esp+0x18],esi
	test eax,eax
	je Block109

 Block106:
	mov edx,dword ptr [eax]
	mov edx,dword ptr [edx]
	lea ecx,[esp+0x24]
	push ecx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	call edx
	xor ecx,ecx
	test eax,eax
	setl cl
	dec ecx
	and ecx,dword ptr [esp+0x24]
	mov esi,ecx
	mov dword ptr [esp+0x18],esi
	test eax,eax
	jge Block109

 Block107:
	cmp eax,0x80004002
	je Block109

 Block108:
	push eax
	call _com_issue_error

 Block109:
	mov edi,8
	mov byte ptr [esp+0xE4],0x1E
	cmp word ptr [esp+0x98],di
	jne Block112

 Block110:
	mov eax,dword ptr [esp+0xA0]
	xor edx,edx
	mov word ptr [esp+0x98],dx
	test eax,eax
	je Block113

 Block111:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block113

 Block112:
	lea eax,[esp+0x98]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block113:
	mov byte ptr [esp+0xE4],0x1F
	cmp word ptr [esp+0x78],di
	jne Block116

 Block114:
	mov eax,dword ptr [esp+0x80]
	xor ecx,ecx
	mov word ptr [esp+0x78],cx
	test eax,eax
	je Block117

 Block115:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block117

 Block116:
	lea edx,[esp+0x78]
	push edx
	call dword ptr [ZImports::_VariantClear]

 Block117:
	mov byte ptr [esp+0xE4],0x20
	cmp word ptr [esp+0x88],di
	jne Block120

 Block118:
	xor eax,eax
	mov word ptr [esp+0x88],ax
	mov eax,dword ptr [esp+0x90]
	test eax,eax
	je Block121

 Block119:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block121

 Block120:
	lea ecx,[esp+0x88]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block121:
	test esi,esi
	jne Block123

 Block122:
	push 0x80004003
	call _com_issue_error

 Block123:
	lea edx,[esp+0x24]
	push edx
	mov ecx,esi
	call IWzProperty::Get_NewEnum
	mov eax,dword ptr [eax]
	push ecx
	mov ecx,esp
	mov byte ptr [esp+0xE8],0x21
	mov dword ptr [esp+0x40],esp
	mov dword ptr [ecx],eax
	test eax,eax
	je Block125

 Block124:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+4]
	push eax
	call edx

 Block125:
	lea ecx,[esp+0x34]
	call _x_com_ptr<IEnumVARIANT>::_QueryUnknownComPtr
	test eax,eax
	jge Block128

 Block126:
	cmp eax,0x80004002
	je Block128

 Block127:
	push eax
	call _com_issue_error

 Block128:
	mov eax,dword ptr [esp+0x24]
	mov byte ptr [esp+0xE4],0x20
	test eax,eax
	je Block130

 Block129:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block130:
	mov dword ptr [esp+0x74],0
	nop

 Block131:
	mov esi,dword ptr [esp+0x30]
	test esi,esi
	je Block4

 Block132:
	mov eax,dword ptr [esi]
	mov eax,dword ptr [eax+0xC]
	lea ecx,[esp+0x74]
	push ecx
	lea edx,[esp+0x68]
	push edx
	push 1
	push esi
	call eax
	test eax,eax
	jne Block219

 Block133:
	lea ecx,[esp+0x64]
	push ecx
	lea edx,[esp+0x18]
	push edx
	call DetachBSTR
	add esp,8
	mov ebp,dword ptr [esp+0x14]
	mov byte ptr [esp+0xE4],0x22
	test ebp,ebp
	je Block139

 Block134:
	cmp dword ptr [ebp+4],0
	jne Block138

 Block135:
	mov edi,dword ptr [ebp]
	test edi,edi
	jne Block137

 Block136:
	xor esi,esi
	mov dword ptr [ebp+4],esi
	mov ecx,esi
	jmp Block140

 Block137:
	push 0
	push 0
	push 0
	push 0
	push 0xFFFFFFFF
	push edi
	push 0
	push 0
	call WideCharToMultiByte
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	push 0
	push 0
	push 0x3FFFFFFF
	mov esi,eax
	push esi
	push 0xFFFFFFFF
	push edi
	push 0
	push 0
	call WideCharToMultiByte
	mov dword ptr [ebp+4],esi

 Block138:
	mov ecx,dword ptr [ebp+4]
	jmp Block140

 Block139:
	xor ecx,ecx

 Block140:
	xor esi,esi
	mov dword ptr [esp+0x1C],esi
	test ecx,ecx
	je Block144

 Block141:
	mov eax,ecx
	lea esi,[eax+1]

 Block142:
	mov dl,byte ptr [eax]
	inc eax
	test dl,dl
	jne Block142

 Block143:
	sub eax,esi
	mov esi,eax
	push esi
	push ecx
	push 0
	push esi
	lea ecx,[esp+0x2C]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x20]
	call ZXString<char>::ReleaseBuffer
	mov esi,dword ptr [esp+0x1C]

 Block144:
	lea eax,[esp+0x2C]
	push eax
	lea ecx,[esp+0x20]
	push ecx
	lea ecx,[esp+0xCC]
	call ZMap<ZXString<char>, long, ZXString<char>>::GetAt
	test eax,eax
	sete bl
	test esi,esi
	je Block146

 Block145:
	add esi,0xFFFFFFF4
	push esi
	call ZXString<char>::_Release
	add esp,4

 Block146:
	test bl,bl
	je Block154

 Block147:
	mov byte ptr [esp+0xE4],0x20
	test ebp,ebp
	je Block214

 Block148:
	lea edx,[ebp+8]
	push edx
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block213

 Block149:
	mov eax,dword ptr [ebp]
	test eax,eax
	je Block151

 Block150:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block151:
	mov eax,dword ptr [ebp+4]
	test eax,eax
	je Block153

 Block152:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block153:
	push ebp
	jmp Block212

 Block154:
	push 0
	push 0
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x4C],esp
	mov dword ptr [eax],ebp
	test ebp,ebp
	je Block156

 Block155:
	add ebp,8
	push ebp
	call dword ptr [ZImports::_InterlockedIncrement]

 Block156:
	mov ecx,dword ptr [esp+0x24]
	lea eax,[esp+0xB8]
	mov byte ptr [esp+0xF0],0x23
	push eax
	mov byte ptr [esp+0xF4],0x22
	call IWzProperty::Getitem
	mov ecx,eax
	mov byte ptr [esp+0xEC],0x24
	call Ztl_variant_t::GetUnknown
	xor esi,esi
	mov dword ptr [esp+0x1C],esi
	test eax,eax
	je Block159

 Block157:
	mov ecx,dword ptr [eax]
	lea edx,[esp+0x24]
	push edx
	push offset __GUID_986515d9_0a0b_4929_8b4f_718682177b92
	push eax
	mov eax,dword ptr [ecx]
	call eax
	xor ecx,ecx
	test eax,eax
	setl cl
	dec ecx
	and ecx,dword ptr [esp+0x24]
	mov esi,ecx
	mov dword ptr [esp+0x1C],esi
	test eax,eax
	jge Block159

 Block158:
	cmp eax,0x80004002
	jne Block13

 Block159:
	mov edi,8
	mov byte ptr [esp+0xE4],0x26
	cmp word ptr [esp+0xAC],di
	jne Block162

 Block160:
	mov eax,dword ptr [esp+0xB4]
	xor edx,edx
	mov word ptr [esp+0xAC],dx
	test eax,eax
	je Block163

 Block161:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block163

 Block162:
	lea eax,[esp+0xAC]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block163:
	push ecx
	mov ecx,esp
	mov dword ptr [esp+0x44],esp
	push 0x1A70
	push ecx
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	mov byte ptr [esp+0xE8],0x27
	test esi,esi
	je Block4

 Block164:
	lea edx,[esp+0x48]
	push edx
	mov ecx,esi
	mov byte ptr [esp+0xEC],0x26
	call IWzProperty::Getitem
	push ecx
	mov eax,esp
	mov dword ptr [esp+0x44],esp
	push 0x5D3
	push eax
	mov byte ptr [esp+0xF0],0x28
	call StringPool::GetInstance
	mov ecx,eax
	call StringPool::GetBSTR
	lea ecx,[esp+0x58]
	push ecx
	mov byte ptr [esp+0xEC],0x29
	mov ecx,esi
	mov byte ptr [esp+0xEC],0x28
	call IWzProperty::Getitem
	mov ebp,dword ptr [esp+0x4C]
	mov byte ptr [esp+0xE4],0x2A
	cmp word ptr [esp+0x44],di
	je Block166

 Block165:
	mov ebp,offset _S___3

 Block166:
	mov ebx,dword ptr [esp+0x2C]
	mov eax,dword ptr [esp+0x38]
	mov edx,dword ptr [eax+4]
	lea ebx,[ebx+ebx*2]
	add ebx,ebx
	add ebx,ebx
	add eax,4
	add ebx,ebx
	lea edi,[ebx+edx+0x10]
	test ebp,ebp
	jne Block169

 Block167:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block170

 Block168:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [edi],ebp
	jmp Block170

 Block169:
	push 0
	push 0
	push 0
	push 0
	push 0xFFFFFFFF
	push ebp
	push 0
	push 0
	call WideCharToMultiByte
	mov esi,eax
	push 0
	dec esi
	push esi
	mov ecx,edi
	call ZXString<char>::GetBuffer
	push 0
	push 0
	push 0x3FFFFFFF
	push eax
	push 0xFFFFFFFF
	push ebp
	push 0
	push 0
	call WideCharToMultiByte
	push esi
	mov ecx,edi
	call ZXString<char>::ReleaseBuffer

 Block170:
	mov ebp,dword ptr [esp+0x5C]
	mov esi,8
	cmp word ptr [esp+0x54],si
	je Block172

 Block171:
	mov ebp,offset _S___3

 Block172:
	mov eax,dword ptr [esp+0x38]
	add eax,4
	mov eax,dword ptr [eax]
	lea edi,[ebx+eax+0x14]
	test ebp,ebp
	jne Block175

 Block173:
	mov eax,dword ptr [edi]
	test eax,eax
	je Block176

 Block174:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4
	mov dword ptr [edi],ebp
	jmp Block176

 Block175:
	push 0
	push 0
	push 0
	push 0
	push 0xFFFFFFFF
	push ebp
	push 0
	push 0
	call WideCharToMultiByte
	mov esi,eax
	push 0
	dec esi
	push esi
	mov ecx,edi
	call ZXString<char>::GetBuffer
	push 0
	push 0
	push 0x3FFFFFFF
	push eax
	push 0xFFFFFFFF
	push ebp
	push 0
	push 0
	call WideCharToMultiByte
	push esi
	mov ecx,edi
	call ZXString<char>::ReleaseBuffer
	mov esi,8

 Block176:
	mov ebp,dword ptr [esp+0x14]
	test ebp,ebp
	je Block182

 Block177:
	cmp dword ptr [ebp+4],0
	jne Block181

 Block178:
	mov edi,dword ptr [ebp]
	test edi,edi
	jne Block180

 Block179:
	xor eax,eax
	mov dword ptr [ebp+4],eax
	mov edx,eax
	jmp Block183

 Block180:
	push 0
	push 0
	push 0
	push 0
	push 0xFFFFFFFF
	push edi
	push 0
	push 0
	call WideCharToMultiByte
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Alloc
	push 0
	push 0
	push 0x3FFFFFFF
	mov esi,eax
	push esi
	push 0xFFFFFFFF
	push edi
	push 0
	push 0
	call WideCharToMultiByte
	mov ebp,dword ptr [esp+0x14]
	mov eax,esi
	mov esi,8
	mov dword ptr [ebp+4],eax

 Block181:
	mov edx,dword ptr [ebp+4]
	jmp Block183

 Block182:
	xor edx,edx

 Block183:
	mov dword ptr [esp+0x20],0
	test edx,edx
	je Block187

 Block184:
	mov eax,edx
	lea esi,[eax+1]

 Block185:
	mov cl,byte ptr [eax]
	inc eax
	test cl,cl
	jne Block185

 Block186:
	sub eax,esi
	mov esi,eax
	push esi
	push edx
	push 0
	push esi
	lea ecx,[esp+0x30]
	call ZXString<char>::GetBuffer
	push eax
	call _memcpy
	add esp,0xC
	push esi
	lea ecx,[esp+0x24]
	call ZXString<char>::ReleaseBuffer
	mov ebp,dword ptr [esp+0x14]
	mov esi,8

 Block187:
	push offset _S_CHAR
	lea ecx,[esp+0x40]
	push ecx
	lea ecx,[esp+0x28]
	mov byte ptr [esp+0xEC],0x2B
	call ZXString<char>::op_add_0
	push eax
	lea ecx,[esp+0x24]
	mov byte ptr [esp+0xE8],0x2C
	call ZXString<char>::op_assign
	mov eax,dword ptr [esp+0x3C]
	mov byte ptr [esp+0xE4],0x2B
	test eax,eax
	je Block189

 Block188:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block189:
	mov edi,dword ptr [esp+0x38]
	push 0
	lea edx,[esp+0x30]
	add edi,8
	push edx
	mov ecx,edi
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::GetAt
	test eax,eax
	je Block195

 Block190:
	mov ebx,dword ptr [esp+0x4C]
	cmp word ptr [esp+0x44],si
	je Block192

 Block191:
	mov ebx,offset _S___3

 Block192:
	push 0
	lea ecx,[esp+0x30]
	push ecx
	mov ecx,edi
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::Insert
	push 0xFFFFFFFF
	lea ecx,[eax+0x1C]
	push ebx
	call ZXString<char>::AssignWideStr
	mov ebx,dword ptr [esp+0x5C]
	cmp word ptr [esp+0x54],si
	je Block194

 Block193:
	mov ebx,offset _S___3

 Block194:
	push 0
	lea edx,[esp+0x30]
	push edx
	mov ecx,edi
	call ZMap<long, CToolTipHelper::TTH_INFO, long>::Insert
	push 0xFFFFFFFF
	lea ecx,[eax+0x20]
	push ebx
	call ZXString<char>::AssignWideStr

 Block195:
	mov eax,dword ptr [esp+0x20]
	mov byte ptr [esp+0xE4],0x2A
	test eax,eax
	je Block197

 Block196:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<char>::_Release
	add esp,4

 Block197:
	mov byte ptr [esp+0xE4],0x28
	cmp word ptr [esp+0x54],si
	jne Block200

 Block198:
	xor eax,eax
	mov word ptr [esp+0x54],ax
	mov eax,dword ptr [esp+0x5C]
	test eax,eax
	je Block201

 Block199:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block201

 Block200:
	lea ecx,[esp+0x54]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block201:
	mov byte ptr [esp+0xE4],0x26
	cmp word ptr [esp+0x44],si
	jne Block204

 Block202:
	mov eax,dword ptr [esp+0x4C]
	xor edx,edx
	mov word ptr [esp+0x44],dx
	test eax,eax
	je Block205

 Block203:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block205

 Block204:
	lea eax,[esp+0x44]
	push eax
	call dword ptr [ZImports::_VariantClear]

 Block205:
	mov eax,dword ptr [esp+0x1C]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0xE8],0x22
	call edx
	mov byte ptr [esp+0xE4],0x20
	test ebp,ebp
	je Block214

 Block206:
	mov esi,dword ptr [esp+0x14]
	lea eax,[esi+8]
	push eax
	call dword ptr [ZImports::_InterlockedDecrement]
	test eax,eax
	jne Block213

 Block207:
	mov eax,dword ptr [esi]
	test eax,eax
	je Block209

 Block208:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree

 Block209:
	mov eax,dword ptr [esi+4]
	test eax,eax
	je Block211

 Block210:
	push eax
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block211:
	push esi

 Block212:
	mov ecx,offset ZAllocEx<ZAllocAnonSelector>::_s_alloc
	call ZAllocEx<ZAllocAnonSelector>::Free

 Block213:
	mov dword ptr [esp+0x14],0

 Block214:
	cmp word ptr [esp+0x64],8
	jne Block217

 Block215:
	mov eax,dword ptr [esp+0x6C]
	xor ecx,ecx
	mov word ptr [esp+0x64],cx
	test eax,eax
	je Block131

 Block216:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block131

 Block217:
	lea edx,[esp+0x64]
	push edx
	call dword ptr [ZImports::_VariantClear]
	test eax,eax
	jl Block13

 Block218:
	jmp Block131

 Block219:
	mov eax,dword ptr [esp+0x18]
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	mov byte ptr [esp+0xE8],0x17
	call edx
	mov eax,dword ptr [esp+0x28]
	mov byte ptr [esp+0xE4],5
	test eax,eax
	je Block221

 Block220:
	add eax,0xFFFFFFF4
	push eax
	call ZXString<unsigned short>::_Release
	add esp,4

 Block221:
	cmp word ptr [esp+0x64],8
	mov byte ptr [esp+0xE4],4
	jne Block224

 Block222:
	xor eax,eax
	mov word ptr [esp+0x64],ax
	mov eax,dword ptr [esp+0x6C]
	test eax,eax
	je Block225

 Block223:
	add eax,0xFFFFFFFC
	push eax
	call CoTaskMemFree
	jmp Block225

 Block224:
	lea ecx,[esp+0x64]
	push ecx
	call dword ptr [ZImports::_VariantClear]

 Block225:
	mov edx,dword ptr [esi]
	mov eax,dword ptr [edx+8]
	push esi
	mov byte ptr [esp+0xE8],1
	call eax
	lea ecx,[esp+0xC4]
	mov byte ptr [esp+0xE4],0
	int 3// TODO: 	mov dword ptr [esp+0xC4],offset ZMap<ZXString<char>, long, ZXString<char>>::`vftable'
	call ZMap<ZXString<char>, long, ZXString<char>>::RemoveAll
	mov eax,dword ptr [esp+0xF0]
	mov dword ptr [esp+0xE4],0xFFFFFFFF
	test eax,eax
	je Block227

 Block226:
	mov ecx,dword ptr [eax]
	mov edx,dword ptr [ecx+8]
	push eax
	call edx

 Block227:
	mov ecx,dword ptr [esp+0xDC]
	mov dword ptr fs:[0],ecx
	pop ecx
	pop edi
	pop esi
	pop ebp
	pop ebx
	add esp,0xD4
	ret 8
}
}
